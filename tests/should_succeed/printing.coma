module M_printing__f [#"printing.rs" 4 0 4 10]
  let%span sprinting = "printing.rs" 5 11 5 19
  let%span sprinting'0 = "printing.rs" 6 13 6 21
  let%span sprinting'1 = "printing.rs" 7 12 7 20
  let%span sprinting'2 = "printing.rs" 8 14 8 23
  let%span sprinting'3 = "printing.rs" 10 18 10 28
  let%span sfmt = "../../creusot-contracts/src/std/fmt.rs" 141 45 141 51
  let%span sfmt'0 = "../../creusot-contracts/src/std/fmt.rs" 140 27 140 31
  let%span sio = "../../creusot-contracts/src/std/io.rs" 10 22 10 26
  let%span sio'0 = "../../creusot-contracts/src/std/io.rs" 16 22 16 26
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  
  use creusot.slice.Slice64
  use creusot.prelude.Any
  use creusot.int.UInt64
  use creusot.int.UInt32
  use creusot.int.UInt16
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  
  type t_Count = C_Is UInt16.t | C_Param UInt64.t | C_Implied
  
  type t_Placeholder = {
    t_Placeholder__position: UInt64.t;
    t_Placeholder__flags: UInt32.t;
    t_Placeholder__precision: t_Count;
    t_Placeholder__width: t_Count }
  
  type t_Option = C_None | C_Some (Slice64.slice t_Placeholder)
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_ArgumentType = C_Placeholder t_NonNull Opaque.ptr () | C_Count UInt16.t
  
  type t_Argument = { t_Argument__ty: t_ArgumentType }
  
  type t_Arguments = {
    t_Arguments__pieces: Slice64.slice string;
    t_Arguments__fmt: t_Option;
    t_Arguments__args: Slice64.slice t_Argument }
  
  predicate inv (_0: Seq.seq string)
  
  axiom inv_axiom [@rewrite]: forall x: Seq.seq string [inv x]. inv x = true
  
  predicate invariant' (self: Slice64.array string) =
    [%#sarray] inv (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (1: UInt64.t)
  
  predicate inv'0 (_0: Slice64.array string)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Slice64.array string [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Slice64.array string) = [%#sinvariant] inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Slice64.array string)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.array string [inv'1 x]. inv'1 x = invariant''0 x
  
  let rec new_const (pieces: Slice64.array string) (return' (x: t_Arguments)) =
    {[@expl:new_const 'pieces' type invariant] [%#sfmt] inv'1 pieces}
    {[@expl:new_const requires] [%#sfmt'0] true}
    any [ return''0 (result: t_Arguments) -> (! return' {result}) ]
  
  let rec qy95zprint (args: t_Arguments) (return' (x: ())) = any
    [ return''0 (result: ()) -> {[%#sio] true} (! return' {result}) ]
  
  let rec qy95zeprint (args: t_Arguments) (return' (x: ())) = any
    [ return''0 (result: ()) -> {[%#sio'0] true} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f [#"printing.rs" 4 0 4 10] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = any
            [ any_ (__arr_temp: Slice64.array string) -> (! -{Seq.get __arr_temp.Slice64.elts 0
                = ([%#sprinting] "Hello ")
              /\ Seq.length __arr_temp.Slice64.elts = 1}-
              [ &_1 <- __arr_temp ] s1'0) ]
          | s1'0 = [ &_0'0 <- _1 ] s2'0
          | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: Slice64.array string = Any.any_l () | & _1: Slice64.array string = Any.any_l () ]
        [ _const_ret (_const: Slice64.array string) -> [ &_30 <- _const ] s1 ]
      | s1 = [ &_5 <- _30 ] s2
      | s2 = new_const {_5} (fun (_ret: t_Arguments) -> [ &_3 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = qy95zprint {_3} (fun (_ret: ()) -> [ &_2 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = any
            [ any_ (__arr_temp: Slice64.array string) -> (! -{Seq.get __arr_temp.Slice64.elts 0
                = ([%#sprinting'0] "world!\n")
              /\ Seq.length __arr_temp.Slice64.elts = 1}-
              [ &_1 <- __arr_temp ] s1'0) ]
          | s1'0 = [ &_0'0 <- _1 ] s2'0
          | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: Slice64.array string = Any.any_l () | & _1: Slice64.array string = Any.any_l () ]
        [ _const_ret (_const: Slice64.array string) -> [ &_29 <- _const ] s1 ]
      | s1 = [ &_11 <- _29 ] s2
      | s2 = new_const {_11} (fun (_ret: t_Arguments) -> [ &_9 <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0 [ s0 = qy95zprint {_9} (fun (_ret: ()) -> [ &_8 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = any
            [ any_ (__arr_temp: Slice64.array string) -> (! -{Seq.get __arr_temp.Slice64.elts 0
                = ([%#sprinting'1] "Hello ")
              /\ Seq.length __arr_temp.Slice64.elts = 1}-
              [ &_1 <- __arr_temp ] s1'0) ]
          | s1'0 = [ &_0'0 <- _1 ] s2'0
          | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: Slice64.array string = Any.any_l () | & _1: Slice64.array string = Any.any_l () ]
        [ _const_ret (_const: Slice64.array string) -> [ &_28 <- _const ] s1 ]
      | s1 = [ &_17 <- _28 ] s2
      | s2 = new_const {_17} (fun (_ret: t_Arguments) -> [ &_15 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = qy95zeprint {_15} (fun (_ret: ()) -> [ &_14 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = any
            [ any_ (__arr_temp: Slice64.array string) -> (! -{Seq.get __arr_temp.Slice64.elts 0
                = ([%#sprinting'2] "stderr!\n")
              /\ Seq.length __arr_temp.Slice64.elts = 1}-
              [ &_1 <- __arr_temp ] s1'0) ]
          | s1'0 = [ &_0'0 <- _1 ] s2'0
          | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: Slice64.array string = Any.any_l () | & _1: Slice64.array string = Any.any_l () ]
        [ _const_ret (_const: Slice64.array string) -> [ &_27 <- _const ] s1 ]
      | s1 = [ &_23 <- _27 ] s2
      | s2 = new_const {_23} (fun (_ret: t_Arguments) -> [ &_21 <- _ret ] s3)
      | s3 = bb7 ]
    | bb7 = s0 [ s0 = qy95zeprint {_21} (fun (_ret: ()) -> [ &_20 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0 [ s0 = {[@expl:assertion] [%#sprinting'3] 1 + 1 = 2} s1 | s1 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & _2: () = Any.any_l ()
    | & _3: t_Arguments = Any.any_l ()
    | & _5: Slice64.array string = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _9: t_Arguments = Any.any_l ()
    | & _11: Slice64.array string = Any.any_l ()
    | & _14: () = Any.any_l ()
    | & _15: t_Arguments = Any.any_l ()
    | & _17: Slice64.array string = Any.any_l ()
    | & _20: () = Any.any_l ()
    | & _21: t_Arguments = Any.any_l ()
    | & _23: Slice64.array string = Any.any_l ()
    | & _27: Slice64.array string = Any.any_l ()
    | & _28: Slice64.array string = Any.any_l ()
    | & _29: Slice64.array string = Any.any_l ()
    | & _30: Slice64.array string = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
