module M_erasure__foo [#"erasure.rs" 4 0 4 21]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo [#"erasure.rs" 4 0 4 21] (x: Int32.t) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x'0 ] s1 | s1 = return''0 {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__foo2 [#"erasure.rs" 9 0 9 37]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo2 [#"erasure.rs" 9 0 9 37] (x: Int32.t) (_1: int) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x'0 ] s1 | s1 = return''0 {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__baz [#"erasure.rs" 19 0 19 29]
  let%span serasure = "erasure.rs" 20 4 20 5
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  constant const_N [#"erasure.rs" 19 7 19 19] : Int32.t
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec baz [#"erasure.rs" 19 0 19 29] (return' (x: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- [%#serasure] const_N ] s1 | s1 = return''0 {_0} ] ] [ & _0: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__qyi650948311052307407__quux [#"erasure.rs" 28 4 28 18] (* <i32 as Quux> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return' (x'0: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec quux [#"erasure.rs" 28 4 28 18] (self: Int32.t) (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo {self'0} (fun (_ret: Int32.t) -> [ &_2 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & self'0: Int32.t = self | & _2: Int32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_erasure__quux2 [#"erasure.rs" 34 0 34 32]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo2 (x: Int32.t) (_1: int) (return' (x'0: Int32.t)) = any
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec quux2 [#"erasure.rs" 34 0 34 32] (x: Int32.t) (y: int) (return' (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo2 {x'0} {y'0} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & x'0: Int32.t = x | & y'0: int = y | & _4: Int32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_erasure__test_foo [#"erasure.rs" 38 0 38 30]
  let%span serasure = "erasure.rs" 43 7 43 10
  let%span serasure'0 = "erasure.rs" 43 22 43 24
  let%span serasure'1 = "erasure.rs" 43 28 43 31
  let%span serasure'2 = "erasure.rs" 43 43 43 45
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return' (x'0: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  let rec baz (return' (x: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  let rec quux (self: Int32.t) (return' (x: ())) = any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_foo [#"erasure.rs" 38 0 38 30] (x: Int32.t) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x'0} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = foo {a} (fun (_ret: Int32.t) -> [ &b <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = baz (fun (_ret: Int32.t) -> [ &c <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = quux {c} (fun (_ret: ()) -> [ &_7 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_9 <- Int32.lt ([%#serasure] (-10: Int32.t)) a ] s1
      | s1 = any [ br0 -> {_9 = false} (! bb13) | br1 -> {_9} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_11 <- Int32.lt a ([%#serasure'0] (10: Int32.t)) ] s1
      | s1 = any [ br0 -> {_11 = false} (! bb13) | br1 -> {_11} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_13 <- Int32.lt ([%#serasure'1] (-10: Int32.t)) b ] s1
      | s1 = any [ br0 -> {_13 = false} (! bb13) | br1 -> {_13} (! bb7) ] ]
    | bb7 = s0
      [ s0 = [ &_15 <- Int32.lt b ([%#serasure'2] (10: Int32.t)) ] s1
      | s1 = any [ br0 -> {_15 = false} (! bb13) | br1 -> {_15} (! bb8) ] ]
    | bb8 = s0 [ s0 = Int32.add {a} {b} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb14 ]
    | bb13 = s0 [ s0 = [ &_0 <- c ] s1 | s1 = bb14 ]
    | bb14 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & x'0: Int32.t = x
    | & a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & c: Int32.t = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: bool = Any.any_l () ]) [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__test_foo2 [#"erasure.rs" 47 0 47 46]
  let%span serasure = "erasure.rs" 52 7 52 10
  let%span serasure'0 = "erasure.rs" 52 22 52 24
  let%span serasure'1 = "erasure.rs" 52 28 52 31
  let%span serasure'2 = "erasure.rs" 52 43 52 45
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return' (x'0: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  let rec foo2 (x: Int32.t) (_1: int) (return' (x'0: Int32.t)) = any
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  let rec baz (return' (x: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  let rec quux2 (x: Int32.t) (y: int) (return' (x'0: ())) = any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_foo2 [#"erasure.rs" 47 0 47 46] (x: Int32.t) (y: int) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x'0} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = foo2 {a} {y'0} (fun (_ret: Int32.t) -> [ &b <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = baz (fun (_ret: Int32.t) -> [ &c <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &_12 <- c ] s1 | s1 = quux2 {_12} {y'0} (fun (_ret: ()) -> [ &_10 <- _ret ] s2) | s2 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_14 <- Int32.lt ([%#serasure] (-10: Int32.t)) a ] s1
      | s1 = any [ br0 -> {_14 = false} (! bb13) | br1 -> {_14} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_16 <- Int32.lt a ([%#serasure'0] (10: Int32.t)) ] s1
      | s1 = any [ br0 -> {_16 = false} (! bb13) | br1 -> {_16} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_18 <- Int32.lt ([%#serasure'1] (-10: Int32.t)) b ] s1
      | s1 = any [ br0 -> {_18 = false} (! bb13) | br1 -> {_18} (! bb7) ] ]
    | bb7 = s0
      [ s0 = [ &_20 <- Int32.lt b ([%#serasure'2] (10: Int32.t)) ] s1
      | s1 = any [ br0 -> {_20 = false} (! bb13) | br1 -> {_20} (! bb8) ] ]
    | bb8 = s0 [ s0 = Int32.add {a} {b} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb14 ]
    | bb13 = s0 [ s0 = [ &_0 <- c ] s1 | s1 = bb14 ]
    | bb14 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & x'0: Int32.t = x
    | & y'0: int = y
    | & a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & c: Int32.t = Any.any_l ()
    | & _10: () = Any.any_l ()
    | & _12: Int32.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _20: bool = Any.any_l () ]) [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__qyi3268067038927913431__takes_ref [#"erasure.rs" 61 4 61 31] (* <i32 as Tr> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref [#"erasure.rs" 61 4 61 31] (self: Int32.t) (return' (x: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- self'0 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & self'0: Int32.t = self ]) [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__takes_ref [#"erasure.rs" 67 0 67 28]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref [#"erasure.rs" 67 0 67 28] (x: Int32.t) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x'0 ] s1 | s1 = return''0 {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__takes_ref_test [#"erasure.rs" 71 0 71 36]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec takes_ref (self: Int32.t) (return' (x: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref_test [#"erasure.rs" 71 0 71 36] (x: Int32.t) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = takes_ref {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x ]) [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__takes_ref_test2 [#"erasure.rs" 77 0 77 37]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec takes_ref (x: Int32.t) (return' (x'0: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref_test2 [#"erasure.rs" 77 0 77 37] (x: Int32.t) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_4 <- x'0 ] s1 | s1 = takes_ref {_4} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x | & _4: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__foog [#"erasure.rs" 83 0 83 36]
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 178 14 178 26
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec new (x: Int32.t) (return' (x'0: Int32.t)) = any
    [ return''0 (result: Int32.t) -> {[%#sghost] result = x} (! return' {result}) ]
  
  type tuple = { _p0: Int32.t; _p1: Int32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foog [#"erasure.rs" 83 0 83 36] (x: Int32.t) (return' (x'0: tuple)) = (! bb0
    [ bb0 = s0 [ s0 = new {x'0} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- { _p0 = x'0; _p1 = _4 } ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: tuple = Any.any_l () | & x'0: Int32.t = x | & _4: Int32.t = Any.any_l () ])
    [ return''0 (result: tuple) -> (! return' {result}) ]
end
module M_erasure__test_ghost_fields [#"erasure.rs" 87 0 87 39]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return' (x'0: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ghost_fields [#"erasure.rs" 87 0 87 39] (x: Int32.t) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x'0} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- a ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x | & a: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__test_ghost_fields2 [#"erasure.rs" 93 0 93 40]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple = { _p0: Int32.t; _p1: Int32.t }
  
  let rec foog (x: Int32.t) (return' (x'0: tuple)) = any [ return''0 (result: tuple) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ghost_fields2 [#"erasure.rs" 93 0 93 40] (x: Int32.t) (return' (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foog {x'0} (fun (_ret: tuple) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &a <- _4._p0 ] s1 | s1 = [ &_0 <- a ] s2 | s2 = return''0 {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x | & a: Int32.t = Any.any_l () | & _4: tuple = Any.any_l () ])
    [ return''0 (result: Int32.t) -> (! return' {result}) ]
end
module M_erasure__test_ptr2 [#"erasure.rs" 105 0 105 67]
  let%span serasure = "erasure.rs" 105 38 105 41
  let%span serasure'0 = "erasure.rs" 104 11 104 16
  let%span serasure'1 = "erasure.rs" 105 65 105 67
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 117 8 117 18
  let%span sptr_own = "../../../creusot-contracts/src/ghost/ptr_own.rs" 139 40 139 43
  let%span sptr_own'0 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 135 15 135 31
  let%span sptr_own'1 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 139 4 139 69
  let%span sptr_own'2 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 136 14 136 35
  let%span sptr_own'3 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 44 4 44 29
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sptr = "../../../creusot-contracts/src/std/ptr.rs" 129 8 129 35
  
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_PtrOwn
  
  type t_T
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr] Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches (_value: t_T) (_metadata: ()) = true
  
  function val' (self: t_PtrOwn) : t_T
  
  function metadata_logic (_0: Opaque.ptr) : ()
  
  predicate inv (_0: Opaque.ptr)
  
  axiom inv_axiom [@rewrite]: forall x: Opaque.ptr [inv x]. inv x = true
  
  predicate invariant' (self: t_PtrOwn) =
    [%#sptr_own'3] not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self /\ metadata_matches (val' self) (metadata_logic (ptr self)) /\ inv (ptr self)
  
  predicate inv'0 (_0: t_PtrOwn)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: t_PtrOwn) = [%#sinvariant] inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: t_PtrOwn)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PtrOwn [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: t_PtrOwn) = [%#sghost] inv'1 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'2 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_T)
  
  predicate invariant''2 [@inline:trivial] (self: t_T) = [%#sinvariant] inv'3 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'4 (_0: t_T)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_T [inv'4 x]. inv'4 x = invariant''2 x
  
  let rec as_ref (ptr'0: Opaque.ptr) (own: t_PtrOwn) (return' (x: t_T)) =
    {[@expl:as_ref 'own' type invariant] [%#sptr_own] inv'2 own}
    {[@expl:as_ref requires] [%#sptr_own'0] ptr'0 = ptr own}
    any
    [ return''0 (result: t_T) -> {[%#sptr_own'1] inv'4 result} {[%#sptr_own'2] result = val' own} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ptr2 [#"erasure.rs" 105 0 105 67] (x: Opaque.ptr) (own: t_PtrOwn) (return' (x'0: t_T)) =
    {[@expl:test_ptr2 'own' type invariant] [%#serasure] inv'2 own}
    {[@expl:test_ptr2 requires] [%#serasure'0] false}
    (! bb0
    [ bb0 = s0 [ s0 = as_ref {x'0} {own'0} (fun (_ret: t_T) -> [ &_5 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- _5 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: t_T = Any.any_l () | & x'0: Opaque.ptr = x | & own'0: t_PtrOwn = own | & _5: t_T = Any.any_l () ])
    [ return''0 (result: t_T) -> {[@expl:test_ptr2 result type invariant] [%#serasure'1] inv'4 result}
      (! return' {result}) ]
end
module M_erasure__test_ptr_mut2 [#"erasure.rs" 116 0 116 79]
  let%span serasure = "erasure.rs" 116 42 116 45
  let%span serasure'0 = "erasure.rs" 115 11 115 16
  let%span serasure'1 = "erasure.rs" 116 73 116 79
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 117 8 117 18
  let%span sptr_own = "../../../creusot-contracts/src/ghost/ptr_own.rs" 169 40 169 43
  let%span sptr_own'0 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 164 15 164 31
  let%span sptr_own'1 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 169 4 169 77
  let%span sptr_own'2 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 165 14 165 35
  let%span sptr_own'3 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 166 14 166 39
  let%span sptr_own'4 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 167 14 167 38
  let%span sptr_own'5 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 44 4 44 29
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  let%span sptr = "../../../creusot-contracts/src/std/ptr.rs" 129 8 129 35
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_PtrOwn
  
  type t_T
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr] Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches (_value: t_T) (_metadata: ()) = true
  
  function val' (self: t_PtrOwn) : t_T
  
  function metadata_logic (_0: Opaque.ptr) : ()
  
  predicate inv (_0: Opaque.ptr)
  
  axiom inv_axiom [@rewrite]: forall x: Opaque.ptr [inv x]. inv x = true
  
  predicate invariant' (self: t_PtrOwn) =
    [%#sptr_own'5] not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self /\ metadata_matches (val' self) (metadata_logic (ptr self)) /\ inv (ptr self)
  
  predicate inv'0 (_0: t_PtrOwn)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_PtrOwn) =
    [%#sinvariant] inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: MutBorrow.t t_PtrOwn)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_PtrOwn [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_PtrOwn) = [%#sghost'0] inv'1 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'2 (_0: MutBorrow.t t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_PtrOwn [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_T)
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_T) =
    [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'4 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_T [inv'4 x]. inv'4 x = invariant''2 x
  
  function fin [@inline:trivial] (self: MutBorrow.t t_PtrOwn) : t_PtrOwn = [%#sghost] self.final
  
  meta "rewrite_def" function fin
  
  let rec as_mut (ptr'0: Opaque.ptr) (own: MutBorrow.t t_PtrOwn) (return' (x: MutBorrow.t t_T)) =
    {[@expl:as_mut 'own' type invariant] [%#sptr_own] inv'2 own}
    {[@expl:as_mut requires] [%#sptr_own'0] ptr'0 = ptr own.current}
    any
    [ return''0 (result: MutBorrow.t t_T) -> {[%#sptr_own'1] inv'4 result}
      {[%#sptr_own'2] result.current = val' own.current}
      {[%#sptr_own'3] ptr (fin own) = ptr own.current}
      {[%#sptr_own'4] val' (fin own) = result.final}
      (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_T) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_T) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ptr_mut2 [#"erasure.rs" 116 0 116 79] (x: Opaque.ptr) (own: MutBorrow.t t_PtrOwn)
    (return' (x'0: MutBorrow.t t_T)) = {[@expl:test_ptr_mut2 'own' type invariant] [%#serasure] inv'2 own}
    {[@expl:test_ptr_mut2 requires] [%#serasure'0] false}
    (! bb0
    [ bb0 = s0 [ s0 = as_mut {x'0} {own'0} (fun (_ret: MutBorrow.t t_T) -> [ &_7 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'3 _7.current}
        MutBorrow.borrow_final <t_T> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_6 <- _ret ] -{inv'3 _ret.final}-
            [ &_7 <- { _7 with current = _ret.final } ] s1)
      | s1 = {inv'3 _6.current}
        MutBorrow.borrow_final <t_T> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_3 <- _ret ] -{inv'3 _ret.final}-
            [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = {inv'3 _3.current}
        MutBorrow.borrow_final <t_T> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_0 <- _ret ] -{inv'3 _ret.final}-
            [ &_3 <- { _3 with current = _ret.final } ] s3)
      | s3 = {[@expl:type invariant] inv'4 _7} s4
      | s4 = -{resolve'0 _7}- s5
      | s5 = {[@expl:type invariant] inv'4 _6} s6
      | s6 = -{resolve'0 _6}- s7
      | s7 = {[@expl:type invariant] inv'4 _3} s8
      | s8 = -{resolve'0 _3}- s9
      | s9 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t t_T = Any.any_l ()
    | & x'0: Opaque.ptr = x
    | & own'0: MutBorrow.t t_PtrOwn = own
    | & _3: MutBorrow.t t_T = Any.any_l ()
    | & _6: MutBorrow.t t_T = Any.any_l ()
    | & _7: MutBorrow.t t_T = Any.any_l () ])
    [ return''0 (result: MutBorrow.t t_T) -> {[@expl:test_ptr_mut2 result type invariant] [%#serasure'1] inv'4 result}
      (! return' {result}) ]
end
module M_erasure__no_specs [#"erasure.rs" 120 0 120 17]
  let%span serasure = "erasure.rs" 121 16 121 17
  let%span serasure'0 = "erasure.rs" 122 10 122 15
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return' (x'0: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec no_specs [#"erasure.rs" 120 0 120 17] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo {[%#serasure] (0: Int32.t)} (fun (_ret: Int32.t) -> [ &_1 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = bb3'0
      [ bb3'0 = (! any [ br0 -> {([%#serasure'0] false) = false} (! bb5) | br1 -> {[%#serasure'0] false} (! bb3'0) ]) ]
    | bb5 = return''0 {_0} ] [ & _0: () = Any.any_l () | & _1: Int32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_erasure__specs [#"erasure.rs" 128 0 128 30]
  let%span serasure = "erasure.rs" 129 18 129 23
  let%span serasure'0 = "erasure.rs" 130 16 130 17
  let%span serasure'1 = "erasure.rs" 131 12 131 25
  let%span serasure'2 = "erasure.rs" 132 16 132 21
  let%span serasure'3 = "erasure.rs" 133 10 133 15
  let%span serasure'4 = "erasure.rs" 126 11 126 16
  let%span serasure'5 = "erasure.rs" 127 10 127 15
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return' (x'0: Int32.t)) = any [ return''0 (result: Int32.t) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec specs [#"erasure.rs" 128 0 128 30] (x: int) (return' (x'0: ())) =
    {[@expl:specs requires] [%#serasure'4] false}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#serasure] false} s1
      | s1 = foo {[%#serasure'0] (0: Int32.t)} (fun (_ret: Int32.t) -> [ &_7 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_8 <- [%#serasure'1] x'0 ] s1 | s1 = bb3 ]
    | bb3 = bb3'0
      [ bb3'0 = {[@expl:loop invariant] [%#serasure'2] false}
        (! s0)
        [ s0 = bb4 ]
        [ bb4 = any [ br0 -> {([%#serasure'3] false) = false} (! bb6) | br1 -> {[%#serasure'3] false} (! bb3'0) ] ] ]
    | bb6 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & x'0: int = x | & _7: Int32.t = Any.any_l () | & _8: int = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:specs ensures] [%#serasure'5] false} (! return' {result}) ]
end
module M_erasure__nested [#"erasure.rs" 136 0 136 15]
  use creusot.prelude.Any
  
  let rec hidden (return' (x: ())) = any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested [#"erasure.rs" 136 0 136 15] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_erasure__nested__hidden [#"erasure.rs" 137 4 137 15]
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden [#"erasure.rs" 137 4 137 15] (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_erasure__nested2 [#"erasure.rs" 142 0 142 16]
  use creusot.prelude.Any
  
  let rec hidden (return' (x: ())) = any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested2 [#"erasure.rs" 142 0 142 16] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_erasure__nested2__hidden [#"erasure.rs" 143 4 143 15]
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden [#"erasure.rs" 143 4 143 15] (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_erasure__nested3 [#"erasure.rs" 148 0 148 16]
  use creusot.prelude.Any
  
  let rec hidden (return' (x: ())) = any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested3 [#"erasure.rs" 148 0 148 16] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_erasure__nested3__hidden [#"erasure.rs" 149 4 149 15]
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden [#"erasure.rs" 149 4 149 15] (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
