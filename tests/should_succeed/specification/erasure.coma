module M_erasure__foo
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__foo2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo2 (x: Int32.t) (_2: int) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__baz
  use creusot.int.Int32
  use creusot.prelude.Any
  
  constant const_N : Int32.t
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec baz (return (x: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- const_N ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__qyi650948311052307407__quux (* <i32 as Quux> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec quux (self: Int32.t) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo {self} (fun (_ret: Int32.t) -> [ &_2 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & self: Int32.t = self | & _2: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__quux2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo2 (x: Int32.t) (_2: int) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec quux2 (x: Int32.t) (y: int) (return (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo2 {x} {y} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & x: Int32.t = x | & y: int = y | & _4: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__test_foo
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec baz (return (x: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec quux (self: Int32.t) (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_foo (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = foo {a} (fun (_ret: Int32.t) -> [ &b <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = baz (fun (_ret: Int32.t) -> [ &c <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = quux {c} (fun (_ret: ()) -> [ &_7 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_9 <- Int32.lt (-10: Int32.t) a ] s1 | s1 = any [ br0 -> {_9 = false} (! bb13) | br1 -> {_9} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_11 <- Int32.lt a (10: Int32.t) ] s1
      | s1 = any [ br0 -> {_11 = false} (! bb13) | br1 -> {_11} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_13 <- Int32.lt (-10: Int32.t) b ] s1
      | s1 = any [ br0 -> {_13 = false} (! bb13) | br1 -> {_13} (! bb7) ] ]
    | bb7 = s0
      [ s0 = [ &_15 <- Int32.lt b (10: Int32.t) ] s1
      | s1 = any [ br0 -> {_15 = false} (! bb13) | br1 -> {_15} (! bb8) ] ]
    | bb8 = s0 [ s0 = Int32.add {a} {b} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb14 ]
    | bb13 = s0 [ s0 = [ &_0 <- c ] s1 | s1 = bb14 ]
    | bb14 = return {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & x: Int32.t = x
    | & a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & c: Int32.t = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: bool = Any.any_l () ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__test_foo2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec foo2 (x: Int32.t) (_2: int) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec baz (return (x: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec quux2 (x: Int32.t) (y: int) (return (x'0: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_foo2 (x: Int32.t) (y: int) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = foo2 {a} {y} (fun (_ret: Int32.t) -> [ &b <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = baz (fun (_ret: Int32.t) -> [ &c <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &_12 <- c ] s1 | s1 = quux2 {_12} {y} (fun (_ret: ()) -> [ &_10 <- _ret ] s2) | s2 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_14 <- Int32.lt (-10: Int32.t) a ] s1
      | s1 = any [ br0 -> {_14 = false} (! bb13) | br1 -> {_14} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_16 <- Int32.lt a (10: Int32.t) ] s1
      | s1 = any [ br0 -> {_16 = false} (! bb13) | br1 -> {_16} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_18 <- Int32.lt (-10: Int32.t) b ] s1
      | s1 = any [ br0 -> {_18 = false} (! bb13) | br1 -> {_18} (! bb7) ] ]
    | bb7 = s0
      [ s0 = [ &_20 <- Int32.lt b (10: Int32.t) ] s1
      | s1 = any [ br0 -> {_20 = false} (! bb13) | br1 -> {_20} (! bb8) ] ]
    | bb8 = s0 [ s0 = Int32.add {a} {b} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb14 ]
    | bb13 = s0 [ s0 = [ &_0 <- c ] s1 | s1 = bb14 ]
    | bb14 = return {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & x: Int32.t = x
    | & y: int = y
    | & a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & c: Int32.t = Any.any_l ()
    | & _10: () = Any.any_l ()
    | & _12: Int32.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _20: bool = Any.any_l () ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__qyi3268067038927913431__takes_ref (* <i32 as Tr> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref (self: Int32.t) (return (x: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- self ] s1 | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & self: Int32.t = self ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__takes_ref
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__takes_ref_test
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec takes_ref (self: Int32.t) (return (x: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref_test (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = takes_ref {x} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__takes_ref_test2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec takes_ref (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref_test2 (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_4 <- x ] s1 | s1 = takes_ref {_4} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = return {_0} ] [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x | & _4: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__foog
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec new (x: Int32.t) (return (x'0: Int32.t)) = any
    [ return (result: Int32.t) -> {result = x} (! return {result}) ]
  
  type tuple = { f0: Int32.t; f1: Int32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foog (x: Int32.t) (return (x'0: tuple)) = (! bb0
    [ bb0 = s0 [ s0 = new {x} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- { f0 = x; f1 = _4 } ] s1 | s1 = return {_0} ] ]
    [ & _0: tuple = Any.any_l () | & x: Int32.t = x | & _4: Int32.t = Any.any_l () ])
    [ return (result: tuple) -> (! return {result}) ]
end
module M_erasure__test_ghost_fields
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ghost_fields (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- a ] s1 | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x | & a: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__test_ghost_fields2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple = { f0: Int32.t; f1: Int32.t }
  
  let rec foog (x: Int32.t) (return (x'0: tuple)) = any [ return (result: tuple) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ghost_fields2 (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foog {x} (fun (_ret: tuple) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &a <- _4.f0 ] s1 | s1 = [ &_0 <- a ] s2 | s2 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x | & a: Int32.t = Any.any_l () | & _4: tuple = Any.any_l () ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_erasure__test_ptr2
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.int.Int64
  use creusot.prelude.Any
  
  type t_PtrOwn
  
  type t_T
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches [@inline:trivial] (_value: t_T) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : t_T
  
  function metadata_logic (_1: Opaque.ptr) : ()
  
  constant size_of_T : int
  
  axiom size_of_T_spec: 0 <= size_of_T
  
  function size_of_val_logic [@inline:trivial] (val''0: t_T) : int = size_of_T
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: t_T. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate inv (_1: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv'0 (val' self)
  
  predicate inv'1 (_1: t_PtrOwn)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: t_PtrOwn) = inv'1 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'2 [@inline:trivial] (_1: t_PtrOwn) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''2 [@inline:trivial] (self: t_PtrOwn) = inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: t_PtrOwn) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  let rec as_ref (ptr'0: Opaque.ptr) (own: t_PtrOwn) (return (x: t_T)) = {[@expl:as_ref 'own' type invariant] inv'3 own}
    {[@expl:as_ref requires] ptr'0 = ptr own}
    any [ return (result: t_T) -> {inv'0 result} {result = val' own} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ptr2 (x: Opaque.ptr) (own: t_PtrOwn) (return (x'0: t_T)) =
    {[@expl:test_ptr2 'own' type invariant] inv'3 own}
    {[@expl:test_ptr2 requires] false}
    (! bb0
    [ bb0 = s0 [ s0 = as_ref {x} {own} (fun (_ret: t_T) -> [ &_5 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- _5 ] s1 | s1 = return {_0} ] ]
    [ & _0: t_T = Any.any_l () | & x: Opaque.ptr = x | & own: t_PtrOwn = own | & _5: t_T = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:test_ptr2 result type invariant] inv'0 result} (! return {result}) ]
end
module M_erasure__test_ptr_mut2
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.int.Int64
  use creusot.prelude.Any
  
  type t_PtrOwn
  
  type t_T
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches [@inline:trivial] (_value: t_T) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : t_T
  
  function metadata_logic (_1: Opaque.ptr) : ()
  
  constant size_of_T : int
  
  axiom size_of_T_spec: 0 <= size_of_T
  
  function size_of_val_logic [@inline:trivial] (val''0: t_T) : int = size_of_T
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: t_T. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate inv (_1: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv'0 (val' self)
  
  predicate inv'1 (_1: t_PtrOwn)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_PtrOwn) = inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'2 [@inline:trivial] (_1: MutBorrow.t t_PtrOwn) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_PtrOwn) = inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t t_PtrOwn) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 [@inline:trivial] (_1: MutBorrow.t t_T) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'4
  
  function fin [@inline:trivial] (self: MutBorrow.t t_PtrOwn) : t_PtrOwn = self.final
  
  meta "rewrite_def" function fin
  
  let rec as_mut (ptr'0: Opaque.ptr) (own: MutBorrow.t t_PtrOwn) (return (x: MutBorrow.t t_T)) =
    {[@expl:as_mut 'own' type invariant] inv'3 own}
    {[@expl:as_mut requires] ptr'0 = ptr own.current}
    any
    [ return (result: MutBorrow.t t_T) -> {inv'4 result}
      {result.current = val' own.current}
      {ptr (fin own) = ptr own.current}
      {val' (fin own) = result.final}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ptr_mut2 (x: Opaque.ptr) (own: MutBorrow.t t_PtrOwn) (return (x'0: MutBorrow.t t_T)) =
    {[@expl:test_ptr_mut2 'own' type invariant] inv'3 own}
    {[@expl:test_ptr_mut2 requires] false}
    (! bb0
    [ bb0 = s0 [ s0 = as_mut {x} {own} (fun (_ret: MutBorrow.t t_T) -> [ &_7 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {inv _7.current}
        MutBorrow.borrow_final <t_T> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_6 <- _ret ] -{inv _ret.final}-
            [ &_7 <- { _7 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv'4 _7} s2
      | s2 = -{resolve _7}- s3
      | s3 = {inv _6.current}
        MutBorrow.borrow_final <t_T> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_3 <- _ret ] -{inv _ret.final}-
            [ &_6 <- { _6 with current = _ret.final } ] s4)
      | s4 = {[@expl:type invariant] inv'4 _6} s5
      | s5 = -{resolve _6}- s6
      | s6 = {inv _3.current}
        MutBorrow.borrow_final <t_T> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_0 <- _ret ] -{inv _ret.final}-
            [ &_3 <- { _3 with current = _ret.final } ] s7)
      | s7 = {[@expl:type invariant] inv'4 _3} s8
      | s8 = -{resolve _3}- s9
      | s9 = return {_0} ] ]
    [ & _0: MutBorrow.t t_T = Any.any_l ()
    | & x: Opaque.ptr = x
    | & own: MutBorrow.t t_PtrOwn = own
    | & _3: MutBorrow.t t_T = Any.any_l ()
    | & _6: MutBorrow.t t_T = Any.any_l ()
    | & _7: MutBorrow.t t_T = Any.any_l () ])
    [ return (result: MutBorrow.t t_T) -> {[@expl:test_ptr_mut2 result type invariant] inv'4 result}
      (! return {result}) ]
end
module M_erasure__no_specs
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec no_specs (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo {(0: Int32.t)} (fun (_ret: Int32.t) -> [ &_1 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = bb3 [ bb3 = (! any [ br0 -> {false = false} (! bb5) | br1 -> {false} (! bb3) ]) ]
    | bb5 = return {_0} ] [ & _0: () = Any.any_l () | & _1: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__specs
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec specs (x: int) (return (x'0: ())) = {[@expl:specs requires] false}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] false} s1
      | s1 = foo {(0: Int32.t)} (fun (_ret: Int32.t) -> [ &_7 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_8 <- x ] s1 | s1 = bb3 ]
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] false}
        (! s0)
        [ s0 = bb4 ]
        [ bb4 = any [ br0 -> {false = false} (! bb6) | br1 -> {false} (! bb3) ] ] ]
    | bb6 = return {_0} ]
    [ & _0: () = Any.any_l () | & x: int = x | & _7: Int32.t = Any.any_l () | & _8: int = Any.any_l () ])
    [ return (result: ()) -> {[@expl:specs ensures] false} (! return {result}) ]
end
module M_erasure__nested
  use creusot.prelude.Any
  
  let rec hidden (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__nested__hidden
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__nested2
  use creusot.prelude.Any
  
  let rec hidden (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested2 (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__nested2__hidden
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__nested3
  use creusot.prelude.Any
  
  let rec hidden (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested3 (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__nested3__hidden
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__ghost_split
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_split (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__ghost_split2
  use creusot.prelude.Any
  
  type tuple = { f0: (); f1: () }
  
  let rec new (x: tuple) (return (x'0: tuple)) = any [ return (result: tuple) -> {result = x} (! return {result}) ]
  
  type tuple'0 = { f0'0: (); f1'0: () }
  
  let rec split (self: tuple) (return (x: tuple'0)) = any
    [ return (result: tuple'0) -> {self.f0 = result.f0'0} {self.f1 = result.f1'0} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_split2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- { f0 = _5; f1 = _6 } ] s1 | s1 = new {_4} (fun (_ret: tuple) -> [ &_3 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0 [ s0 = split {_3} (fun (_ret: tuple'0) -> [ &_2 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & _2: tuple'0 = Any.any_l ()
    | & _3: tuple = Any.any_l ()
    | & _4: tuple = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _6: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_erasure__slice_as_ptr
  use creusot.slice.Slice64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''1 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'2 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''2 [@inline:trivial] (self: Slice64.slice t_T) = inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  let rec as_ptr (self_: Slice64.slice t_T) (return (x: Opaque.ptr)) =
    {[@expl:as_ptr 'self_' type invariant] inv'3 self_}
    any [ return (result: Opaque.ptr) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_as_ptr (s: Slice64.slice t_T) (return (x: Opaque.ptr)) =
    {[@expl:slice_as_ptr 's' type invariant] inv'3 s}
    (! bb0
    [ bb0 = s0 [ s0 = as_ptr {s} (fun (_ret: Opaque.ptr) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: Opaque.ptr = Any.any_l () | & s: Slice64.slice t_T = s ])
    [ return (result: Opaque.ptr) -> (! return {result}) ]
end
module M_erasure__slice_as_ptr_own
  use creusot.slice.Slice64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.int.Int64
  use creusot.prelude.Any
  
  type t_T
  
  type t_PtrOwn
  
  type tuple = { f0: Opaque.ptr; f1: t_PtrOwn }
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''1 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'2 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''2 [@inline:trivial] (self: Slice64.slice t_T) = inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches [@inline:trivial] (_value: Slice64.slice t_T) (_metadata: UInt64.t) =
    Seq.length (Slice64.view _value) = UInt64.t'int _metadata
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : Slice64.slice t_T
  
  function metadata_logic (_1: Opaque.ptr) : UInt64.t
  
  constant size_of_T : int
  
  axiom size_of_T_spec: 0 <= size_of_T
  
  function size_of_val_logic [@inline:trivial] (val''0: Slice64.slice t_T) : int = size_of_T
    * Seq.length (Slice64.view val''0)
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: Slice64.slice t_T. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate invariant''3 (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv'3 (val' self)
  
  predicate inv'4 (_1: t_PtrOwn)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate invariant''4 [@inline:trivial] (self: t_PtrOwn) = inv'4 self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 [@inline:trivial] (_1: t_PtrOwn) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'5
  
  predicate invariant''5 [@inline:trivial] (self: t_PtrOwn) = inv'5 self
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'6 [@inline:trivial] (_1: t_PtrOwn) = invariant''5 _1
  
  meta "rewrite_def" predicate inv'6
  
  predicate inv'7 [@inline:trivial] (_1: tuple) = inv'6 _1.f1
  
  meta "rewrite_def" predicate inv'7
  
  let rec as_ptr_own (self: Slice64.slice t_T) (return (x: tuple)) =
    {[@expl:as_ptr_own 'self' type invariant] inv'3 self}
    any
    [ return (result: tuple) -> {inv'7 result}
      {result.f0 = Opaque.thin (ptr result.f1)}
      {self = val' result.f1}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_as_ptr_own (s: Slice64.slice t_T) (return (x: tuple)) =
    {[@expl:slice_as_ptr_own 's' type invariant] inv'3 s}
    (! bb0
    [ bb0 = s0 [ s0 = as_ptr_own {s} (fun (_ret: tuple) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: tuple = Any.any_l () | & s: Slice64.slice t_T = s ])
    [ return (result: tuple) -> {[@expl:slice_as_ptr_own result type invariant] inv'7 result} (! return {result}) ]
end
module M_erasure__slice_as_mut_ptr
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''1 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'2 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  let rec as_mut_ptr (self_: MutBorrow.t (Slice64.slice t_T)) (return (x: Opaque.ptr)) =
    {[@expl:as_mut_ptr 'self_' type invariant] inv'3 self_}
    any [ return (result: Opaque.ptr) -> (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_as_mut_ptr (s: MutBorrow.t (Slice64.slice t_T)) (return (x: Opaque.ptr)) =
    {[@expl:slice_as_mut_ptr 's' type invariant] inv'3 s}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 s.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {s.current} {MutBorrow.get_id s}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_2 <- _ret ] -{inv'2 _ret.final}-
            [ &s <- { s with current = _ret.final } ] s1)
      | s1 = as_mut_ptr {_2} (fun (_ret: Opaque.ptr) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'3 s} s1 | s1 = -{resolve s}- s2 | s2 = return {_0} ] ]
    [ & _0: Opaque.ptr = Any.any_l ()
    | & s: MutBorrow.t (Slice64.slice t_T) = s
    | & _2: MutBorrow.t (Slice64.slice t_T) = Any.any_l () ]) [ return (result: Opaque.ptr) -> (! return {result}) ]
end
module M_erasure__slice_as_mut_ptr_own
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.int.Int64
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''1 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'2 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  type t_PtrOwn
  
  type tuple = { f0: Opaque.ptr; f1: MutBorrow.t t_PtrOwn }
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches [@inline:trivial] (_value: Slice64.slice t_T) (_metadata: UInt64.t) =
    Seq.length (Slice64.view _value) = UInt64.t'int _metadata
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : Slice64.slice t_T
  
  function metadata_logic (_1: Opaque.ptr) : UInt64.t
  
  constant size_of_T : int
  
  axiom size_of_T_spec: 0 <= size_of_T
  
  function size_of_val_logic [@inline:trivial] (val''0: Slice64.slice t_T) : int = size_of_T
    * Seq.length (Slice64.view val''0)
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: Slice64.slice t_T. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate invariant''3 [@inline:trivial] (self: Slice64.slice t_T) = inv'2 self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate invariant''4 (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv'4 (val' self)
  
  predicate inv'5 (_1: t_PtrOwn)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate invariant''5 [@inline:trivial] (self: MutBorrow.t t_PtrOwn) = inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'6 [@inline:trivial] (_1: MutBorrow.t t_PtrOwn) = invariant''5 _1
  
  meta "rewrite_def" predicate inv'6
  
  predicate invariant''6 [@inline:trivial] (self: MutBorrow.t t_PtrOwn) = inv'6 self
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'7 [@inline:trivial] (_1: MutBorrow.t t_PtrOwn) = invariant''6 _1
  
  meta "rewrite_def" predicate inv'7
  
  predicate inv'8 [@inline:trivial] (_1: tuple) = inv'7 _1.f1
  
  meta "rewrite_def" predicate inv'8
  
  function fin [@inline:trivial] (self: MutBorrow.t t_PtrOwn) : t_PtrOwn = self.final
  
  meta "rewrite_def" function fin
  
  let rec as_mut_ptr_own (self: MutBorrow.t (Slice64.slice t_T)) (return (x: tuple)) =
    {[@expl:as_mut_ptr_own 'self' type invariant] inv'3 self}
    any
    [ return (result: tuple) -> {inv'8 result}
      {result.f0 = Opaque.thin (ptr result.f1.current)}
      {self.current = val' result.f1.current}
      {self.final = val' (fin result.f1)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_as_mut_ptr_own (s: MutBorrow.t (Slice64.slice t_T)) (return (x: tuple)) =
    {[@expl:slice_as_mut_ptr_own 's' type invariant] inv'3 s}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 s.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {s.current} {MutBorrow.get_id s}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_3 <- _ret ] -{inv'2 _ret.final}-
            [ &s <- { s with current = _ret.final } ] s1)
      | s1 = as_mut_ptr_own {_3} (fun (_ret: tuple) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'3 s} s1 | s1 = -{resolve s}- s2 | s2 = return {_0} ] ]
    [ & _0: tuple = Any.any_l ()
    | & s: MutBorrow.t (Slice64.slice t_T) = s
    | & _3: MutBorrow.t (Slice64.slice t_T) = Any.any_l () ])
    [ return (result: tuple) -> {[@expl:slice_as_mut_ptr_own result type invariant] inv'8 result} (! return {result}) ]
end
