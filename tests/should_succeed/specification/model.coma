module M_test_arc
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  type t_Arc_usize_Global
  
  predicate inv_Arc_usize_Global (_1: t_Arc_usize_Global)
  
  predicate resolve_Arc_usize_Global (_1: t_Arc_usize_Global)
  
  function view_Box_usize_Global [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function view_Box_usize_Global
  
  function view_Arc_usize_Global (self: t_Arc_usize_Global) : UInt64.t
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_arc (a: t_Arc_usize_Global) (return (x: ())) =
    {[@expl:test_arc 'a' type invariant] inv_Arc_usize_Global a}
    {[@expl:test_arc requires] view_Box_usize_Global (view_Arc_usize_Global a) = 0}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv_Arc_usize_Global a} s1 | s1 = -{resolve_Arc_usize_Global a}- s2 | s2 = bb1 ]
    | bb1 = return {_0} ] [ & _0: () = Any.any_l () | & a: t_Arc_usize_Global = a ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_test_rc
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  type t_Rc_usize_Global
  
  predicate inv_Rc_usize_Global (_1: t_Rc_usize_Global)
  
  predicate resolve_Rc_usize_Global (_1: t_Rc_usize_Global)
  
  function view_Box_usize_Global [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function view_Box_usize_Global
  
  function view_Rc_usize_Global (self: t_Rc_usize_Global) : UInt64.t
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_rc (v: t_Rc_usize_Global) (return (x: ())) = {[@expl:test_rc 'v' type invariant] inv_Rc_usize_Global v}
    {[@expl:test_rc requires] view_Box_usize_Global (view_Rc_usize_Global v) = 0}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv_Rc_usize_Global v} s1 | s1 = -{resolve_Rc_usize_Global v}- s2 | s2 = bb1 ]
    | bb1 = return {_0} ] [ & _0: () = Any.any_l () | & v: t_Rc_usize_Global = v ])
    [ return (result: ()) -> (! return {result}) ]
end
