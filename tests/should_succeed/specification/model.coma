module M_model__test_arc
  use creusot.prelude.Any
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Arc = { t_Arc__ptr: t_NonNull; t_Arc__phantom: (); t_Arc__alloc: () }
  
  function view [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function view
  
  function view'0 (self: t_Arc) : UInt64.t
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_arc (a: t_Arc) (return (x: ())) = {[@expl:test_arc requires] view (view'0 a) = 0}
    (! bb0
    [ bb0 = bb1 | bb1 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_model__test_rc
  use creusot.prelude.Any
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Rc = { t_Rc__ptr: t_NonNull; t_Rc__phantom: (); t_Rc__alloc: () }
  
  function view [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function view
  
  function view'0 (self: t_Rc) : UInt64.t
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_rc (v: t_Rc) (return (x: ())) = {[@expl:test_rc requires] view (view'0 v) = 0}
    (! bb0
    [ bb0 = bb1 | bb1 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
