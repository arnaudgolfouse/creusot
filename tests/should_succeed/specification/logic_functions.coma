module M_use_logic
  use creusot.prelude.Any
  
  predicate logic = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec use' (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:use_logic ensures] logic} (! return {result}) ]
end
module M_use_logic_pearlite
  use creusot.prelude.Any
  
  predicate logic_pearlite = 0 = 0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec use_logic_pearlite (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:use_logic_pearlite ensures] logic_pearlite} (! return {result}) ]
end
module M_use_quatorze
  use creusot.prelude.Any
  
  constant quatorze: int = 14
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec use_quatorze (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:use_quatorze ensures] quatorze = 14} (! return {result}) ]
end
