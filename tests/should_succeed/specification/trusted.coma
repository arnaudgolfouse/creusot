module M_trusted__victim_of_lie
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  let rec lie (return' (x: UInt32.t)) = any
    [ return''0 (result: UInt32.t) -> {result = (10: UInt32.t)} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec victim_of_lie (return' (x: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = lie (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: UInt32.t = Any.any_l () ])
    [ return''0 (result: UInt32.t) -> {[@expl:victim_of_lie ensures] result = (10: UInt32.t)} (! return' {result}) ]
end
module M_trusted__innocent_victim
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  let rec my_unverified_code (return' (x: UInt32.t)) = any
    [ return''0 (result: UInt32.t) -> {false} (! return' {result}) ]
  
  let rec im_out_of_control (return' (x: UInt32.t)) = any
    [ return''0 (result: UInt32.t) -> {false} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec innocent_victim (return' (x: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = my_unverified_code (fun (_ret: UInt32.t) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = im_out_of_control (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: UInt32.t = Any.any_l () | & _2: UInt32.t = Any.any_l () ])
    [ return''0 (result: UInt32.t) -> {[@expl:innocent_victim ensures] result = (10: UInt32.t)} (! return' {result}) ]
end
