module M_loops__while_loop_variant
  use mach.int.Int
  use creusot.prelude.Any
  
  predicate well_founded_relation [@inline:trivial] (self: int) (other: int) = self >= 0 /\ self > other
  
  meta "rewrite_def" predicate well_founded_relation
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec while_loop_variant (x: bool) (return (x'0: ())) = {[@expl:while_loop_variant requires] not x}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1invariant
      [ bb1 = {[@expl:loop variant] well_founded_relation variant_old_bb1 0} bb1invariant
      | bb1invariant = (! [ &variant_old_bb1 <- 0 ] s0
        [ s0 = bb2 ])
        [ bb2 = any [ br0 -> {x = false} (! bb4) | br1 -> {x} (! bb1) ] ] ]
    | bb4 = return {_0} ] [ & _0: () = Any.any_l () | & x: bool = x | & variant_old_bb1: int = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
