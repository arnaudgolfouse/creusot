module M_division__divide
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec divide (y: UInt32.t) (x: UInt32.t) (return (x'0: UInt32.t)) = {[@expl:divide requires] x <> (0: UInt32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- x ] s1
      | s1 = [ &_6 <- _5 = (0: UInt32.t) ] s2
      | s2 = {[@expl:division by zero] not _6} s3
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = UInt32.div {y} {_5} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & y: UInt32.t = y
    | & x: UInt32.t = x
    | & _5: UInt32.t = Any.any_l ()
    | & _6: bool = Any.any_l () ]) [ return (result: UInt32.t) -> (! return {result}) ]
end
