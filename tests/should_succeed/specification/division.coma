module M_division__divide [#"division.rs" 6 0 6 36]
  let%span sdivision = "division.rs" 7 4 7 9
  let%span sdivision'0 = "division.rs" 5 11 5 20
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec divide[#"division.rs" 6 0 6 36] (y:UInt32.t) (x:UInt32.t) (return'  (x'0:UInt32.t))= {[@expl:divide requires] [%#sdivision'0] x
    <> (0: UInt32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- x'0 ] s1
      | s1 =  [ &_6 <- _5 = ([%#sdivision] (0: UInt32.t)) ] s2
      | s2 = {[@expl:division by zero] [%#sdivision] not _6} s3
      | s3 = bb1 ]
    
    | bb1 = s0 [ s0 = UInt32.div {y'0} {_5} (fun (_ret:UInt32.t) ->  [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ]  ]
    )
    [ & _0: UInt32.t = Any.any_l ()
    | & y'0: UInt32.t = y
    | & x'0: UInt32.t = x
    | & _5: UInt32.t = Any.any_l ()
    | & _6: bool = Any.any_l () ]
     [ return''0 (result:UInt32.t)-> (! return' {result}) ] 
end
