module M_simple_trigger__id [#"simple_trigger.rs" 10 0 10 24]
  let%span ssimple_trigger = "simple_trigger.rs" 7 11 7 17
  let%span ssimple_trigger'0 = "simple_trigger.rs" 9 10 9 32
  let%span ssimple_trigger'1 = "simple_trigger.rs" 8 10 8 11
  let%span ssimple_trigger'2 = "simple_trigger.rs" 11 4 11 42
  
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant i  : int
  
  function id [#"simple_trigger.rs" 10 0 10 24] (i'0: int) : int
  
  goal vc_id: ([%#ssimple_trigger] i >= 0)
   -> (if i = 0 then
    [@expl:id ensures] [%#ssimple_trigger'0] i = 0  -> 0 = 0
  else
    (([@expl:id requires] [%#ssimple_trigger] i - 1 >= 0)
    /\ 0 <= ([%#ssimple_trigger'1] i) /\ ([%#ssimple_trigger'1] i - 1) < ([%#ssimple_trigger'1] i))
    /\ (([%#ssimple_trigger'0] i - 1 = 0  -> id (i - 1) = 0)
     -> ([@expl:id ensures] [%#ssimple_trigger'0] i = 0  -> id (i - 1) + 1 = 0))
  )
end
module M_simple_trigger__test [#"simple_trigger.rs" 15 0 15 13]
  let%span ssimple_trigger = "simple_trigger.rs" 14 10 14 20
  let%span ssimple_trigger'0 = "simple_trigger.rs" 7 11 7 17
  let%span ssimple_trigger'1 = "simple_trigger.rs" 9 10 9 32
  let%span ssimple_trigger'2 = "simple_trigger.rs" 8 10 8 11
  let%span ssimple_trigger'3 = "simple_trigger.rs" 11 4 11 42
  
  use creusot.prelude.Any
  use mach.int.Int
  
  function id [#"simple_trigger.rs" 10 0 10 24] (i: int) : int
  
  function id_lim (i: int) : int
  
  axiom id_def: forall i: int [id i]. ([%#ssimple_trigger'0] i >= 0)
   -> id i = ([%#ssimple_trigger'3] if i = 0 then 0 else id (i - 1) + 1)
  
  axiom id_def_lim: forall i: int [id i]. ([%#ssimple_trigger'0] i >= 0)  -> id i = id_lim i
  
  axiom id_lim_spec: forall i: int [id_lim i]. ([%#ssimple_trigger'0] i >= 0)
   -> ([%#ssimple_trigger'1] i = 0  -> id_lim i = 0)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test[#"simple_trigger.rs" 15 0 15 13] (return'  (x:()))= (! bb0 [ bb0 = return''0 {_0} ] 
    [ & _0: () = Any.any_l () ]
    ) [ return''0 (result:())-> {[@expl:test ensures] [%#ssimple_trigger] id 1 = 1} (! return' {result}) ] 
end
