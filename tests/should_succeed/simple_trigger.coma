module M_simple_trigger__id
  use mach.int.Int
  
  predicate well_founded_relation [@inline:trivial] (self: int) (other: int) = self >= 0 /\ self > other
  
  meta "rewrite_def" predicate well_founded_relation
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant i : int
  
  function id (i'0: int) : int
  
  goal vc_id: i >= 0
    -> (if i = 0 then
      [@expl:id ensures] i = 0 -> 0 = 0
    else
      (([@expl:id requires] i - 1 >= 0) /\ well_founded_relation i (i - 1))
      /\ (i - 1 = 0 -> id (i - 1) = 0 -> ([@expl:id ensures] i = 0 -> id (i - 1) + 1 = 0))
    )
end
module M_simple_trigger__test
  use creusot.prelude.Any
  use mach.int.Int
  
  function id (i: int) : int
  
  function id_lim (i: int) : int
  
  axiom id_def: forall i: int [id i]. i >= 0 -> id i = (if i = 0 then 0 else id (i - 1) + 1)
  
  axiom id_def_lim: forall i: int [id i]. i >= 0 -> id i = id_lim i
  
  axiom id_lim_spec: forall i: int [id_lim i]. i >= 0 -> i = 0 -> id_lim i = 0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:test ensures] id 1 = 1} (! return' {result}) ]
end
