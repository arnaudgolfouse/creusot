module M_projection_toggle__proj_toggle
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_T) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_T) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec proj_toggle (toggle: bool) (a: MutBorrow.t t_T) (b: MutBorrow.t t_T) (return (x: MutBorrow.t t_T)) =
    {[@expl:proj_toggle 'a' type invariant] inv'0 a}
    {[@expl:proj_toggle 'b' type invariant] inv'0 b}
    (! bb0
    [ bb0 = any [ br0 -> {toggle = false} (! bb2) | br1 -> {toggle} (! bb1) ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 b} s1
      | s1 = -{resolve'0 b}- s2
      | s2 = {inv a.current}
        MutBorrow.borrow_final <t_T> {a.current} {MutBorrow.get_id a}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_8 <- _ret ] -{inv _ret.final}-
            [ &a <- { a with current = _ret.final } ] s3)
      | s3 = {inv _8.current}
        MutBorrow.borrow_final <t_T> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_6 <- _ret ] -{inv _ret.final}-
            [ &_8 <- { _8 with current = _ret.final } ] s4)
      | s4 = {[@expl:type invariant] inv'0 _8} s5
      | s5 = -{resolve'0 _8}- s6
      | s6 = bb3 ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 = -{resolve'0 a}- s2
      | s2 = {inv b.current}
        MutBorrow.borrow_final <t_T> {b.current} {MutBorrow.get_id b}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_6 <- _ret ] -{inv _ret.final}-
            [ &b <- { b with current = _ret.final } ] s3)
      | s3 = bb3 ]
    | bb3 = s0
      [ s0 = {inv _6.current}
        MutBorrow.borrow_final <t_T> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_4 <- _ret ] -{inv _ret.final}-
            [ &_6 <- { _6 with current = _ret.final } ] s1)
      | s1 = {inv _4.current}
        MutBorrow.borrow_final <t_T> {_4.current} {MutBorrow.get_id _4}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_0 <- _ret ] -{inv _ret.final}-
            [ &_4 <- { _4 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv'0 _6} s3
      | s3 = -{resolve'0 _6}- s4
      | s4 = {[@expl:type invariant] inv'0 _4} s5
      | s5 = -{resolve'0 _4}- s6
      | s6 = {[@expl:type invariant] inv'0 b} s7
      | s7 = -{resolve'0 b}- s8
      | s8 = {[@expl:type invariant] inv'0 a} s9
      | s9 = -{resolve'0 a}- s10
      | s10 = return {_0} ] ]
    [ & _0: MutBorrow.t t_T = Any.any_l ()
    | & toggle: bool = toggle
    | & a: MutBorrow.t t_T = a
    | & b: MutBorrow.t t_T = b
    | & _4: MutBorrow.t t_T = Any.any_l ()
    | & _6: MutBorrow.t t_T = Any.any_l ()
    | & _8: MutBorrow.t t_T = Any.any_l () ])
    [ return (result: MutBorrow.t t_T) -> {[@expl:proj_toggle result type invariant] inv'0 result}
      {[@expl:proj_toggle ensures] if toggle then
        result = a /\ b.final = b.current
      else
        result = b /\ a.final = a.current
      }
      (! return {result}) ]
end
module M_projection_toggle__f
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  let rec proj_toggle (toggle: bool) (a: MutBorrow.t Int32.t) (b: MutBorrow.t Int32.t)
    (return (x: MutBorrow.t Int32.t)) = any
    [ return' (result: MutBorrow.t Int32.t) -> {if toggle then
        result = a /\ b.final = b.current
      else
        result = b /\ a.final = a.current
      }
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- (10: Int32.t) ] s1
      | s1 = [ &b <- (5: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <Int32.t> {a}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_5 <- _ret ] [ &a <- _ret.final ] s3)
      | s3 = MutBorrow.borrow_mut <Int32.t> {b}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_7 <- _ret ] [ &b <- _ret.final ] s4)
      | s4 = MutBorrow.borrow_final <Int32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_4 <- _ret ] [ &_5 <- { _5 with current = _ret.final } ] s5)
      | s5 = MutBorrow.borrow_final <Int32.t> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_6 <- _ret ] [ &_7 <- { _7 with current = _ret.final } ] s6)
      | s6 = proj_toggle {true} {_4} {_6} (fun (_ret: MutBorrow.t Int32.t) -> [ &x <- _ret ] s7)
      | s7 = bb1 ]
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = Int32.add {x.current} {(5: Int32.t)} (fun (_ret: Int32.t) -> [ &x <- { x with current = _ret } ] s3)
      | s3 = -{resolve'0 x}- s4
      | s4 = [ &_9 <- a = (15: Int32.t) ] s5
      | s5 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ] ]
    | bb2 = return {_0}
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & x: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: MutBorrow.t Int32.t = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l ()
    | & _7: MutBorrow.t Int32.t = Any.any_l ()
    | & _9: bool = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
