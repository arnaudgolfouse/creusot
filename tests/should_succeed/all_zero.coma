module M_all_zero__all_zero
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  function len (self: t_List) : int = match self with
      | C_Cons _ ls -> 1 + len ls
      | C_Nil -> 0
      end
  
  function fin [@inline:trivial] (self: MutBorrow.t t_List) : t_List = self.final
  
  meta "rewrite_def" function fin
  
  type t_Option = C_None | C_Some UInt32.t
  
  function get (self: t_List) (ix: int) : t_Option = match self with
      | C_Cons x ls -> if ix = 0 then C_Some x else get ls (ix - 1)
      | C_Nil -> C_None
      end
  
  let rec v_Cons (input: t_List) (ret (field_0: UInt32.t) (field_1: t_List)) = any
    [ good (field_0: UInt32.t) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: UInt32.t, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1
        <> input}
      (! {false}
      any) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t UInt32.t) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_List) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_List) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_List) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: MutBorrow.t t_List) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec all_zero (l: MutBorrow.t t_List) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &old_l <- l ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &loop_l <- l ] s1 | s1 = bb2 ]
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant #0] (forall i: int. 0 <= i /\ i < len loop_l.current
            -> get loop_l.final i = C_Some (0: UInt32.t))
        -> (forall i: int. 0 <= i /\ i < len old_l.current -> get (fin old_l) i = C_Some (0: UInt32.t))}
        {[@expl:loop invariant #1] len loop_l.final = len loop_l.current -> len (fin old_l) = len old_l.current}
        (! s0)
        [ s0 = bb3 ]
        [ bb3 = any
          [ br0 (x0: UInt32.t) (x1: t_List) -> {loop_l.current = C_Cons x0 x1} (! bb5)
          | br1 -> {loop_l.current = C_Nil} (! bb6) ]
        | bb5 = s0
          [ s0 = v_Cons {loop_l.current}
              (fun (r0: UInt32.t) (r1: t_List) ->
                MutBorrow.borrow_final <UInt32.t> {r0} {MutBorrow.inherit_id (MutBorrow.get_id loop_l) 1}
                  (fun (_ret: MutBorrow.t UInt32.t) ->
                    [ &value <- _ret ] [ &loop_l <- { loop_l with current = C_Cons _ret.final r1 } ] s1))
          | s1 = v_Cons {loop_l.current}
              (fun (r0: UInt32.t) (r1: t_List) ->
                MutBorrow.borrow_final <t_List> {r1} {MutBorrow.inherit_id (MutBorrow.get_id loop_l) 2}
                  (fun (_ret: MutBorrow.t t_List) ->
                    [ &next <- _ret ] [ &loop_l <- { loop_l with current = C_Cons r0 _ret.final } ] s2))
          | s2 = [ &value <- { value with current = (0: UInt32.t) } ] s3
          | s3 = -{resolve'0 value}- s4
          | s4 = MutBorrow.borrow_final <t_List> {next.current} {MutBorrow.get_id next}
              (fun (_ret: MutBorrow.t t_List) -> [ &_14 <- _ret ] [ &next <- { next with current = _ret.final } ] s5)
          | s5 = -{resolve'2 loop_l}- s6
          | s6 = [ &loop_l <- _14 ] s7
          | s7 = -{resolve'4 next}- s8
          | s8 = bb2 ] ] ]
    | bb6 = s0 [ s0 = -{resolve'2 loop_l}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & l: MutBorrow.t t_List = l
    | & old_l: MutBorrow.t t_List = Any.any_l ()
    | & loop_l: MutBorrow.t t_List = Any.any_l ()
    | & value: MutBorrow.t UInt32.t = Any.any_l ()
    | & next: MutBorrow.t t_List = Any.any_l ()
    | & _14: MutBorrow.t t_List = Any.any_l () ])
    [ return (result: ()) -> {[@expl:all_zero ensures #0] forall i: int. 0 <= i /\ i < len l.current
        -> get l.final i = C_Some (0: UInt32.t)}
      {[@expl:all_zero ensures #1] len l.current = len l.final}
      (! return {result}) ]
end
