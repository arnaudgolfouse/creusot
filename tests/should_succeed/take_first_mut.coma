module M_take_first_mut__take_first_mut
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''1 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'2 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) =
    inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: ()) (result: MutBorrow.t (Slice64.slice t_T)) =
    let () = args in Slice64.view result.final = (Seq.empty: Seq.seq t_T)
    /\ Slice64.view result.current = (Seq.empty: Seq.seq t_T) /\ inv'3 result
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: MutBorrow.t (Slice64.slice t_T)) =
    let () = args in Slice64.view result.final = (Seq.empty: Seq.seq t_T)
    /\ Slice64.view result.current = (Seq.empty: Seq.seq t_T) /\ inv'3 result
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: ()) (res: MutBorrow.t (Slice64.slice t_T)) : ()
  
  axiom fn_mut_once_spec:
    forall self: (), args: (), res: MutBorrow.t (Slice64.slice t_T). postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: ()) (res_state: ()) (res: MutBorrow.t (Slice64.slice t_T)) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: (), res_state: (), res: MutBorrow.t (Slice64.slice t_T). postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: ()) (args: ()) (result: MutBorrow.t (Slice64.slice t_T)) =
    let () = args in Slice64.view result.final = (Seq.empty: Seq.seq t_T)
    /\ Slice64.view result.current = (Seq.empty: Seq.seq t_T) /\ inv'3 result
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: ()) (args: ()) (res: MutBorrow.t (Slice64.slice t_T)) : ()
  
  axiom fn_once_spec: forall self: (), args: (), res: MutBorrow.t (Slice64.slice t_T). postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: ()) (res_state: ()) (res: MutBorrow.t (Slice64.slice t_T)) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: (), res_state: (), res: MutBorrow.t (Slice64.slice t_T). postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec default (return (x: MutBorrow.t (Slice64.slice t_T))) = any
    [ return (result: MutBorrow.t (Slice64.slice t_T)) -> {inv'3 result}
      {Slice64.view result.current = (Seq.empty: Seq.seq t_T)}
      {Slice64.view result.final = (Seq.empty: Seq.seq t_T)}
      (! return {result}) ]
  
  let rec take (dest: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:take 'dest' type invariant] inv'4 dest}
    any
    [ return (result: MutBorrow.t (Slice64.slice t_T)) -> {inv'3 result}
      {result = dest.current}
      {postcondition () () dest.final}
      (! return {result}) ]
  
  type tuple = { f0: MutBorrow.t t_T; f1: MutBorrow.t (Slice64.slice t_T) }
  
  type t_Option = C_None | C_Some tuple
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 [@inline:trivial] (_1: MutBorrow.t t_T) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'5
  
  predicate inv'6 [@inline:trivial] (_1: tuple) = inv'5 _1.f0 /\ inv'3 _1.f1
  
  meta "rewrite_def" predicate inv'6
  
  predicate inv'7 (_1: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'7 x]. inv'7 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'6 a_0
        end
  
  function index_logic [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  function tail (self: Seq.seq t_T) : Seq.seq t_T = Seq.([..]) self 1 (Seq.length self)
  
  let rec split_first_mut (self_: MutBorrow.t (Slice64.slice t_T)) (return (x: t_Option)) =
    {[@expl:split_first_mut 'self_' type invariant] inv'3 self_}
    any
    [ return (result: t_Option) -> {inv'7 result}
      {match result with
        | C_Some {f0 = first; f1 = tail'0} -> first.current = index_logic self_.current 0
        /\ first.final = index_logic self_.final 0
        /\ Seq.length (Slice64.view self_.current) > 0
        /\ Seq.length (Slice64.view self_.final) > 0
        /\ Slice64.view tail'0.current = tail (Slice64.view self_.current)
        /\ Slice64.view tail'0.final = tail (Slice64.view self_.final)
        | C_None -> Seq.length (Slice64.view self_.current) = 0
        /\ self_.final = self_.current /\ Slice64.view self_.current = (Seq.empty: Seq.seq t_T)
        end}
      (! return {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: tuple)) = any
    [ good (field_0: tuple) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: tuple [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'1
  
  type t_Option'0 = C_None'0 | C_Some'0 (MutBorrow.t t_T)
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'2
  
  predicate inv'8 (_1: t_Option'0)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option'0 [inv'8 x]. inv'8 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'5 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_first_mut (self_: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) (return (x: t_Option'0)) =
    {[@expl:take_first_mut 'self_' type invariant] inv'4 self_}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'3 self_.current}
        MutBorrow.borrow_mut <MutBorrow.t (Slice64.slice t_T)> {self_.current}
          (fun (_ret: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) ->
            [ &_6 <- _ret ] -{inv'3 _ret.final}-
            [ &self_ <- { self_ with current = _ret.final } ] s1)
      | s1 = take {_6} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'2 _5.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_4 <- _ret ] -{inv'2 _ret.final}-
            [ &_5 <- { _5 with current = _ret.final } ] s1)
      | s1 = split_first_mut {_4} (fun (_ret: t_Option) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_3 = C_None} (! bb4) | br1 (x0: tuple) -> {_3 = C_Some x0} (! bb5) ]
    | bb5 = s0
      [ s0 = v_Some {_3} (fun (r0: tuple) -> [ &first <- r0.f0 ] s1)
      | s1 = v_Some {_3} (fun (r0: tuple) -> [ &rem <- r0.f1 ] s2)
      | s2 = {inv'2 rem.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {rem.current} {MutBorrow.get_id rem}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_11 <- _ret ] -{inv'2 _ret.final}-
            [ &rem <- { rem with current = _ret.final } ] s3)
      | s3 = {[@expl:type invariant] inv'3 self_.current} s4
      | s4 = -{resolve'0 self_.current}- s5
      | s5 = [ &self_ <- { self_ with current = _11 } ] s6
      | s6 = {[@expl:type invariant] inv'4 self_} s7
      | s7 = -{resolve'1 self_}- s8
      | s8 = {inv first.current}
        MutBorrow.borrow_final <t_T> {first.current} {MutBorrow.get_id first}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_12 <- _ret ] -{inv _ret.final}-
            [ &first <- { first with current = _ret.final } ] s9)
      | s9 = [ &_0 <- C_Some'0 _12 ] s10
      | s10 = {[@expl:type invariant] inv'3 rem} s11
      | s11 = -{resolve'0 rem}- s12
      | s12 = {[@expl:type invariant] inv'5 first} s13
      | s13 = -{resolve'2 first}- s14
      | s14 = {[@expl:type invariant] inv'3 _5} s15
      | s15 = -{resolve'0 _5}- s16
      | s16 = bb7 ]
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'4 self_} s1 | s1 = -{resolve'1 self_}- s2 | s2 = bb6 ]
    | bb6 = s0
      [ s0 = [ &_0 <- C_None'0 ] s1 | s1 = {[@expl:type invariant] inv'3 _5} s2 | s2 = -{resolve'0 _5}- s3 | s3 = bb7 ]
    | bb7 = return {_0} ]
    [ & _0: t_Option'0 = Any.any_l ()
    | & self_: MutBorrow.t (MutBorrow.t (Slice64.slice t_T)) = self_
    | & _3: t_Option = Any.any_l ()
    | & _4: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _5: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _6: MutBorrow.t (MutBorrow.t (Slice64.slice t_T)) = Any.any_l ()
    | & first: MutBorrow.t t_T = Any.any_l ()
    | & rem: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _11: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _12: MutBorrow.t t_T = Any.any_l () ])
    [ return (result: t_Option'0) -> {[@expl:take_first_mut result type invariant] inv'8 result}
      {[@expl:take_first_mut ensures] match result with
        | C_Some'0 r -> r.current = index_logic self_.current.current 0
        /\ r.final = index_logic self_.current.final 0
        /\ Seq.length (Slice64.view self_.current.current) > 0
        /\ Seq.length (Slice64.view self_.current.final) > 0
        /\ Slice64.view self_.final.current = tail (Slice64.view self_.current.current)
        /\ Slice64.view self_.final.final = tail (Slice64.view self_.current.final)
        | C_None'0 -> Slice64.view self_.final.current = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.current.final = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.current.current = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.final.final = (Seq.empty: Seq.seq t_T)
        end}
      (! return {result}) ]
end
