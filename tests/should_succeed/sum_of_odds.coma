module M_sum_of_odd
  use mach.int.Int
  
  predicate well_founded_relation_Int [@inline:trivial] (self: int) (other: int) = self >= 0 /\ self > other
  
  meta "rewrite_def" predicate well_founded_relation_Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant x : int
  
  function sum_of_odd (x: int) : int
  
  goal vc_sum_of_odd: if x <= 0 then true else well_founded_relation_Int x (x - 1)
end
module M_sum_of_odd_is_sqr
  use mach.int.Int
  
  function sum_of_odd (x: int) : int
  
  axiom sum_of_odd_def: forall x: int. sum_of_odd x = (if x <= 0 then 0 else sum_of_odd (x - 1) + 2 * x - 1)
  
  function sqr (x: int) : int = x * x
  
  predicate well_founded_relation_Int [@inline:trivial] (self: int) (other: int) = self >= 0 /\ self > other
  
  meta "rewrite_def" predicate well_founded_relation_Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant x : int
  
  function sum_of_odd_is_sqr (x: int) : ()
  
  goal vc_sum_of_odd_is_sqr: x >= 0
    -> (if x > 0 then
      (([@expl:sum_of_odd_is_sqr requires] x - 1 >= 0) /\ well_founded_relation_Int x (x - 1))
      /\ (sum_of_odd (x - 1) = sqr (x - 1) -> ([@expl:sum_of_odd_is_sqr ensures] sum_of_odd x = sqr x))
    else
      [@expl:sum_of_odd_is_sqr ensures] sum_of_odd x = sqr x
    )
end
module M_compute_sum_of_odd
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Range_u32 = { start: UInt32.t; end': UInt32.t }
  
  let rec into_iter_Range_u32 (self_: t_Range_u32) (return (x: t_Range_u32)) = any
    [ return (result: t_Range_u32) -> {result = self_} (! return {result}) ]
  
  function sum_of_odd (x: int) : int
  
  axiom sum_of_odd_def: forall x: int. sum_of_odd x = (if x <= 0 then 0 else sum_of_odd (x - 1) + 2 * x - 1)
  
  function deep_model_u32 [@inline:trivial] (self: UInt32.t) : int = UInt32.t'int self
  
  meta "rewrite_def" function deep_model_u32
  
  predicate produces_Range_u32 (self: t_Range_u32) (visited: Seq.seq UInt32.t) (o: t_Range_u32) =
    self.end' = o.end'
    /\ deep_model_u32 self.start <= deep_model_u32 o.start
    /\ (Seq.length visited > 0 -> deep_model_u32 o.start <= deep_model_u32 o.end')
    /\ Seq.length visited = deep_model_u32 o.start - deep_model_u32 self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_u32 (Seq.get visited i) = deep_model_u32 self.start + i)
  
  function produces_trans_Range_u32 (a: t_Range_u32) (ab: Seq.seq UInt32.t) (b: t_Range_u32) (bc: Seq.seq UInt32.t) (c: t_Range_u32) : ()
  
  axiom produces_trans_Range_u32_spec:
    forall a: t_Range_u32, ab: Seq.seq UInt32.t, b: t_Range_u32, bc: Seq.seq UInt32.t, c: t_Range_u32. produces_Range_u32 a ab b
      -> produces_Range_u32 b bc c -> produces_Range_u32 a (Seq.(++) ab bc) c
  
  function produces_refl_Range_u32 (self: t_Range_u32) : ()
  
  axiom produces_refl_Range_u32_spec:
    forall self: t_Range_u32. produces_Range_u32 self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate inv_Range_u32 [@inline:trivial] (_1: t_Range_u32) = true
  
  meta "rewrite_def" predicate inv_Range_u32
  
  predicate inv_Seq_u32 [@inline:trivial] (_1: Seq.seq UInt32.t) = true
  
  meta "rewrite_def" predicate inv_Seq_u32
  
  type t_Option_u32 = None | Some UInt32.t
  
  predicate resolve_ref_Range_u32 [@inline:trivial] (_1: MutBorrow.t t_Range_u32) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_u32
  
  predicate completed_Range_u32 (self: MutBorrow.t t_Range_u32) =
    resolve_ref_Range_u32 self /\ deep_model_u32 self.current.start >= deep_model_u32 self.current.end'
  
  let rec next_Range_u32 (self_: MutBorrow.t t_Range_u32) (return (x: t_Option_u32)) = any
    [ return (result: t_Option_u32) -> {match result with
        | None -> completed_Range_u32 self_
        | Some v -> produces_Range_u32 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_u32) (ret (f0: UInt32.t)) = any
    [ good (f0: UInt32.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: UInt32.t [Some f0: t_Option_u32]. Some f0 <> input} (! {false} any) ]
  
  function sqr (x: int) : int = x * x
  
  function sum_of_odd_is_sqr (x: int) : ()
  
  axiom sum_of_odd_is_sqr_def: forall x: int. x >= 0
      -> sum_of_odd_is_sqr x = (if x > 0 then sum_of_odd_is_sqr (x - 1) else ())
  
  axiom sum_of_odd_is_sqr_spec: forall x: int. x >= 0 -> sum_of_odd x = sqr x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec compute_sum_of_odd (x: UInt32.t) (return (x'0: UInt32.t)) =
    {[@expl:compute_sum_of_odd requires] UInt32.t'int x < 65536}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &s <- (0: UInt32.t) ] s1
      | s1 = [ &_8 <- { start = (0: UInt32.t); end' = x } ] s2
      | s2 = into_iter_Range_u32 {_8} (fun (_ret: t_Range_u32) -> [ &iter <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt32.t ] s1 | s1 = bb4 ]
    | bb4 = bb4
      [ bb4 = {[@expl:for invariant] inv_Seq_u32 produced}
        {[@expl:for invariant] inv_Range_u32 iter}
        {[@expl:for invariant] produces_Range_u32 iter_old produced iter}
        {[@expl:loop invariant] UInt32.t'int s = sum_of_odd (Seq.length produced)}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_u32> {iter}
              (fun (_ret: MutBorrow.t t_Range_u32) -> [ &_22 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_u32> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret: MutBorrow.t t_Range_u32) -> [ &_21 <- _ret ] [ &_22 <- { _22 with current = _ret.final } ] s2)
          | s2 = next_Range_u32 {_21} (fun (_ret: t_Option_u32) -> [ &_20 <- _ret ] s3)
          | s3 = bb6 ]
        | bb6 = s0
          [ s0 = -{resolve_ref_Range_u32 _22}- s1
          | s1 = any [ br0 -> {_20 = None} (! bb9) | br1 (x0: UInt32.t) -> {_20 = Some x0} (! bb10) ] ]
        | bb10 = s0
          [ s0 = elim_Some {_20} (fun (r0: UInt32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_25 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb11 ]
        | bb11 = s0
          [ s0 = [ &produced <- _25 ] s1
          | s1 = [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = {[@expl:assertion] let _ = sum_of_odd_is_sqr (UInt32.t'int i) in true} s3
          | s3 = UInt32.mul {(2: UInt32.t)} {i} (fun (_ret: UInt32.t) -> [ &_31 <- _ret ] s4)
          | s4 = UInt32.add {_31} {(1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_30 <- _ret ] s5)
          | s5 = UInt32.add {s} {_30} (fun (_ret: UInt32.t) -> [ &s <- _ret ] s6)
          | s6 = bb4 ] ] ]
    | bb9 = s0 [ s0 = [ &_0 <- s ] s1 | s1 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x: UInt32.t = x
    | & s: UInt32.t = Any.any_l ()
    | & iter: t_Range_u32 = Any.any_l ()
    | & _8: t_Range_u32 = Any.any_l ()
    | & iter_old: t_Range_u32 = Any.any_l ()
    | & produced: Seq.seq UInt32.t = Any.any_l ()
    | & _20: t_Option_u32 = Any.any_l ()
    | & _21: MutBorrow.t t_Range_u32 = Any.any_l ()
    | & _22: MutBorrow.t t_Range_u32 = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt32.t = Any.any_l ()
    | & _25: Seq.seq UInt32.t = Any.any_l ()
    | & i: UInt32.t = Any.any_l ()
    | & _30: UInt32.t = Any.any_l ()
    | & _31: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> {[@expl:compute_sum_of_odd ensures] UInt32.t'int result
      = sum_of_odd (UInt32.t'int x)}
      (! return {result}) ]
end
module M_test
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  function sum_of_odd (x: int) : int
  
  axiom sum_of_odd_def: forall x: int. sum_of_odd x = (if x <= 0 then 0 else sum_of_odd (x - 1) + 2 * x - 1)
  
  let rec compute_sum_of_odd (x: UInt32.t) (return (x'0: UInt32.t)) =
    {[@expl:compute_sum_of_odd requires] UInt32.t'int x < 65536}
    any [ return (result: UInt32.t) -> {UInt32.t'int result = sum_of_odd (UInt32.t'int x)} (! return {result}) ]
  
  function sqr (x: int) : int = x * x
  
  function sum_of_odd_is_sqr (x: int) : ()
  
  axiom sum_of_odd_is_sqr_def: forall x: int. x >= 0
      -> sum_of_odd_is_sqr x = (if x > 0 then sum_of_odd_is_sqr (x - 1) else ())
  
  axiom sum_of_odd_is_sqr_spec: forall x: int. x >= 0 -> sum_of_odd x = sqr x
  
  predicate is_square (y: int) = exists z: int. y = sqr z
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (x: UInt32.t) (return (x'0: ())) = {[@expl:test requires] UInt32.t'int x < 65536}
    (! bb0
    [ bb0 = s0 [ s0 = compute_sum_of_odd {x} (fun (_ret: UInt32.t) -> [ &y <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] let _ = sum_of_odd_is_sqr (UInt32.t'int x) in is_square (UInt32.t'int y)} s1
      | s1 = return {_0} ] ] [ & _0: () = Any.any_l () | & x: UInt32.t = x | & y: UInt32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
