module M_mapping_indexing__foo
  use map.Map
  use creusot.prelude.Any
  
  function index_logic [@inline:trivial] (self: Map.map int int) (a: int) : int = Map.get self a
  
  meta "rewrite_def" function index_logic
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &mapping <- fun (__0: int) -> 42 ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_3 <- Map.set mapping 0 10 ] s1 | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &mapping <- _3 ] s1
      | s1 = {[@expl:assertion] index_logic mapping 0 = 10} s2
      | s2 = {[@expl:assertion] index_logic mapping 1 = 42} s3
      | s3 = [ &_9 <- Map.set mapping 1 11 ] s4
      | s4 = bb3 ]
    | bb3 = s0
      [ s0 = [ &mapping <- _9 ] s1
      | s1 = {[@expl:assertion] index_logic mapping 0 = 10} s2
      | s2 = {[@expl:assertion] index_logic mapping 1 = 11} s3
      | s3 = [ &_15 <- Map.set mapping 0 12 ] s4
      | s4 = bb4 ]
    | bb4 = s0
      [ s0 = [ &mapping <- _15 ] s1
      | s1 = {[@expl:assertion] index_logic mapping 0 = 12} s2
      | s2 = {[@expl:assertion] index_logic mapping 1 = 11} s3
      | s3 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & mapping: Map.map int int = Any.any_l ()
    | & _3: Map.map int int = Any.any_l ()
    | & _9: Map.map int int = Any.any_l ()
    | & _15: Map.map int int = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
