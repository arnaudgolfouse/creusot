module M_mapping_indexing__foo [#"mapping_indexing.rs" 4 0 4 12]
  let%span smapping_indexing = "mapping_indexing.rs" 5 22 5 39
  let%span smapping_indexing'0 = "mapping_indexing.rs" 7 14 7 43
  let%span smapping_indexing'1 = "mapping_indexing.rs" 8 18 8 34
  let%span smapping_indexing'2 = "mapping_indexing.rs" 9 18 9 34
  let%span smapping_indexing'3 = "mapping_indexing.rs" 10 14 10 43
  let%span smapping_indexing'4 = "mapping_indexing.rs" 11 18 11 34
  let%span smapping_indexing'5 = "mapping_indexing.rs" 12 18 12 34
  let%span smapping_indexing'6 = "mapping_indexing.rs" 13 14 13 43
  let%span smapping_indexing'7 = "mapping_indexing.rs" 14 18 14 34
  let%span smapping_indexing'8 = "mapping_indexing.rs" 15 18 15 34
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 70 8 70 19
  
  use map.Map
  use creusot.prelude.Any
  
  function index_logic (self: Map.map int int) (a: int) : int =
    [%#smapping] Map.get self a
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo[#"mapping_indexing.rs" 4 0 4 12] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &mapping <- [%#smapping_indexing] fun (__0: int) -> 42 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_3 <- [%#smapping_indexing'0] Map.set mapping 0 10 ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &mapping <- _3 ] s1
      | s1 = {[@expl:assertion] [%#smapping_indexing'1] index_logic mapping 0 = 10} s2
      | s2 = {[@expl:assertion] [%#smapping_indexing'2] index_logic mapping 1 = 42} s3
      | s3 =  [ &_9 <- [%#smapping_indexing'3] Map.set mapping 1 11 ] s4
      | s4 = bb3 ]
    
    | bb3 = s0
      [ s0 =  [ &mapping <- _9 ] s1
      | s1 = {[@expl:assertion] [%#smapping_indexing'4] index_logic mapping 0 = 10} s2
      | s2 = {[@expl:assertion] [%#smapping_indexing'5] index_logic mapping 1 = 11} s3
      | s3 =  [ &_15 <- [%#smapping_indexing'6] Map.set mapping 0 12 ] s4
      | s4 = bb4 ]
    
    | bb4 = s0
      [ s0 =  [ &mapping <- _15 ] s1
      | s1 = {[@expl:assertion] [%#smapping_indexing'7] index_logic mapping 0 = 12} s2
      | s2 = {[@expl:assertion] [%#smapping_indexing'8] index_logic mapping 1 = 11} s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & mapping: Map.map int int = Any.any_l ()
    | & _3: Map.map int int = Any.any_l ()
    | & _9: Map.map int int = Any.any_l ()
    | & _15: Map.map int int = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
