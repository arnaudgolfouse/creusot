module M_ex
  use seq.Seq
  use mach.int.Int
  
  function tail_Int (self: Seq.seq int) : Seq.seq int = Seq.([..]) self 1 (Seq.length self)
  
  predicate well_founded_relation_Int [@inline:trivial] (self: int) (other: int) = self >= 0 /\ self > other
  
  meta "rewrite_def" predicate well_founded_relation_Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant c : Seq.seq int
  
  constant a : int
  
  function ex (c: Seq.seq int) (a: int) : int
  
  goal vc_ex: if Seq.length c = 0 then true else well_founded_relation_Int (Seq.length c) (Seq.length (tail_Int c))
end
