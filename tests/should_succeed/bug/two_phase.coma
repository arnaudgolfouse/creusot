module M_two_phase__test [#"two_phase.rs" 6 0 6 31]
  let%span stwo_phase = "two_phase.rs" 5 10 5 37
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 80 26 80 48
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 84 26 84 56
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 20 14 20 41
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 53 20 53 34
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)
  
  function view'0 (self : t_Vec) : Seq.seq UInt64.t =
    [%#smodel'0] view self
  
  let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  
  function view'1 (self : MutBorrow.t t_Vec) : Seq.seq UInt64.t =
    [%#smodel] view self.current
  
  let rec push (self_:MutBorrow.t t_Vec) (v:UInt64.t) (return'  (x:()))= any
    [ return''0 (result:())-> {[%#svec'0] view self_.final = Seq.snoc (view'1 self_) v} (! return' {result}) ]
  
  
  predicate resolve (self : MutBorrow.t t_Vec) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t t_Vec) =
    resolve _0
  
  function index_logic [@inline:trivial] (self : t_Vec) (ix : int) : UInt64.t =
    [%#sindex] Seq.get (view self) ix
  
  meta "compute_max_steps" 1000000
  
  let rec test[#"two_phase.rs" 6 0 6 31] (v:MutBorrow.t t_Vec) (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = len {v'0.current} (fun (_ret:UInt64.t) ->  [ &_5 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec> {v'0.current} {MutBorrow.get_id v'0}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_4 <- _ret ]  [ &v'0 <- { v'0 with current = _ret.final } ] s1)
      | s1 = push {_4} {_5} (fun (_ret:()) ->  [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 = -{resolve'0 v'0}- s1 | s1 = return''0 {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & v'0 : MutBorrow.t t_Vec = v
    | & _3 : () = Any.any_l ()
    | & _4 : MutBorrow.t t_Vec = Any.any_l ()
    | & _5 : UInt64.t = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:test ensures] [%#stwo_phase] UInt64.t'int (index_logic v.final (Seq.length (view'1 v)))
      = Seq.length (view'1 v)}
      (! return' {result}) ]

end
module M_two_phase__qyi14099956410468907124__insert [#"two_phase.rs" 21 4 21 28] (* VacantEntry<'_, K> *)
  let%span stwo_phase = "two_phase.rs" 21 23 21 27
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 103 16 103 17
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 108 51 108 58
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 104 26 104 59
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 105 26 105 87
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 106 26 106 52
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 107 26 107 103
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 20 14 20 41
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 62 20 62 41
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 53 20 53 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 100 20 100 44
  let%span sinvariant'0 = "../../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 673 20 673 95
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_K
  
  type t_VacantEntry  =
    { t_VacantEntry__map: MutBorrow.t t_Vec; t_VacantEntry__key: t_K; t_VacantEntry__index: UInt64.t }
  
  predicate inv (_0 : t_K)
  
  predicate invariant' (self : t_K) =
    [%#sinvariant'0] inv self
  
  predicate inv'0 (_0 : t_K)
  
  axiom inv_axiom [@rewrite] : forall x : t_K [inv'0 x] . inv'0 x = invariant' x
  
  predicate precondition (self : ()) (args : t_K)
  
  axiom precondition_fndef : forall args : t_K [precondition () args] . (let self_ = args in inv'0 self_)
   -> precondition () args
  
  predicate postcondition_once (self : ()) (args : t_K) (result : t_K)
  
  axiom postcondition_fndef : forall args : t_K, res : t_K [postcondition_once () args res] . postcondition_once () args res
   -> (let self_ = args in res = self_ /\ inv res)
  
  let rec clone' (self_:t_K) (return'  (x:t_K))= {[@expl:clone requires] precondition () self_}
    any [ return''0 (result:t_K)-> {postcondition_once () self_ result} (! return' {result}) ] 
  
  predicate invariant''0 (self : t_K) =
    [%#sboxed] inv self
  
  predicate inv'1 (_0 : t_K)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_K [inv'1 x] . inv'1 x = invariant''0 x
  
  predicate invariant''1 (self : Seq.seq t_K) =
    [%#sseq] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'1 (Seq.get self i)
  
  predicate inv'2 (_0 : Seq.seq t_K)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_K [inv'2 x] . inv'2 x = invariant''1 x
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : t_Vec) : Seq.seq t_K
  
  axiom view_spec : forall self : t_Vec . [%#svec'5] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)
  
  predicate invariant''2 (self : t_Vec) =
    [%#svec'6] inv'2 (view self)
  
  predicate inv'3 (_0 : t_Vec)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec [inv'3 x] . inv'3 x = invariant''2 x
  
  predicate invariant''3 (self : MutBorrow.t t_Vec) =
    [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0 : MutBorrow.t t_Vec)
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t t_Vec [inv'4 x] . inv'4 x = invariant''3 x
  
  function view'0 (self : MutBorrow.t t_Vec) : Seq.seq t_K =
    [%#smodel] view self.current
  
  function index_logic [@inline:trivial] (self : t_Vec) (ix : int) : t_K =
    [%#sindex] Seq.get (view self) ix
  
  let rec insert (self_:MutBorrow.t t_Vec) (index:UInt64.t) (element:t_K) (return'  (x:()))= {[@expl:insert 'self_' type invariant] [%#svec] inv'4 self_}
    {[@expl:insert 'element' type invariant] [%#svec'0] inv element}
    any
    [ return''0 (result:())-> {[%#svec'1] Seq.length (view self_.final) = Seq.length (view'0 self_) + 1}
      {[%#svec'2] forall i : int . 0 <= i /\ i < UInt64.t'int index
       -> index_logic self_.final i = index_logic self_.current i}
      {[%#svec'3] index_logic self_.final (UInt64.t'int index) = element}
      {[%#svec'4] forall i : int . UInt64.t'int index < i /\ i < Seq.length (view self_.final)
       -> index_logic self_.final i = index_logic self_.current (i - 1)}
      (! return' {result}) ]
  
  
  predicate inv'5 (_0 : t_VacantEntry)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_VacantEntry [inv'5 x] . inv'5 x
  = match x with
    | {t_VacantEntry__map = map ; t_VacantEntry__key = key ; t_VacantEntry__index = index} -> inv'4 map /\ inv key
    end
  
  predicate invariant''4 (self : MutBorrow.t t_VacantEntry) =
    [%#sinvariant] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'6 (_0 : MutBorrow.t t_VacantEntry)
  
  axiom inv_axiom'5 [@rewrite] : forall x : MutBorrow.t t_VacantEntry [inv'6 x] . inv'6 x = invariant''4 x
  
  predicate resolve (self : MutBorrow.t t_VacantEntry) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t t_VacantEntry) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec insert'0[#"two_phase.rs" 21 4 21 28] (self:MutBorrow.t t_VacantEntry) (return'  (x:()))= {[@expl:insert 'self' type invariant] [%#stwo_phase] inv'6 self}
    (! bb0
    [ bb0 = s0 [ s0 = clone' {(self'0.current).t_VacantEntry__key} (fun (_ret:t_K) ->  [ &_4 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {inv'3 ((self'0.current).t_VacantEntry__map).current}
        MutBorrow.borrow_mut <t_Vec> {((self'0.current).t_VacantEntry__map).current}
          (fun (_ret:MutBorrow.t t_Vec) ->
             [ &_2 <- _ret ] 
            -{inv'3 _ret.final}-
            
            [ &self'0 <- { self'0 with current = { self'0.current with t_VacantEntry__map = { (self'0.current).t_VacantEntry__map with current = _ret.final } } } ]
            
            s1)
      | s1 = insert {_2} {(self'0.current).t_VacantEntry__index} {_4} (fun (_ret:()) ->  [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'6 self'0} s1 | s1 = -{resolve'0 self'0}- s2 | s2 = return''0 {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & self'0 : MutBorrow.t t_VacantEntry = self
    | & _2 : MutBorrow.t t_Vec = Any.any_l ()
    | & _4 : t_K = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
