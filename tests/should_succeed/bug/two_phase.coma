module M_two_phase__test
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec len (self_: t_Vec) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  let rec push (self_: MutBorrow.t t_Vec) (v: UInt64.t) (return (x: ())) = any
    [ return (result: ()) -> {view self_.final = Seq.snoc (view self_.current) v} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Vec) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Vec) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : UInt64.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (v: MutBorrow.t t_Vec) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = len {v.current} (fun (_ret: UInt64.t) -> [ &_5 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec> {v.current} {MutBorrow.get_id v}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_4 <- _ret ] [ &v <- { v with current = _ret.final } ] s1)
      | s1 = push {_4} {_5} (fun (_ret: ()) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = -{resolve'0 v}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & _3: () = Any.any_l ()
    | & _4: MutBorrow.t t_Vec = Any.any_l ()
    | & _5: UInt64.t = Any.any_l () ])
    [ return (result: ()) -> {[@expl:test ensures] UInt64.t'int (index_logic v.final (Seq.length (view v.current)))
      = Seq.length (view v.current)}
      (! return {result}) ]
end
module M_two_phase__qyi14099956410468907124__insert (* VacantEntry<'_, K> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_K
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_VacantEntry = {
    t_VacantEntry__map: MutBorrow.t t_Vec;
    t_VacantEntry__key: t_K;
    t_VacantEntry__index: UInt64.t }
  
  predicate inv (_1: t_K)
  
  predicate invariant' [@inline:trivial] (self: t_K) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: t_K)
  
  axiom inv_axiom [@rewrite]: forall x: t_K [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_K)
  
  axiom precondition_fndef: forall args: t_K [precondition () args]. (let self_ = args in inv'0 self_)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_K) (result: t_K)
  
  axiom postcondition_fndef: forall args: t_K, res: t_K [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  let rec clone' (self_: t_K) (return (x: t_K)) = {[@expl:clone requires] precondition () self_}
    any [ return (result: t_K) -> {postcondition_once () self_ result} (! return {result}) ]
  
  predicate invariant''0 (self: t_K) = inv self
  
  predicate inv'1 (_1: t_K)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_K [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_K) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'1 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'2 (_1: Seq.seq t_K)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Seq.seq t_K [inv'2 x]. inv'2 x = invariant''1 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_K
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''2 (self: t_Vec) = inv'2 (view self)
  
  predicate inv'3 (_1: t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 (_1: MutBorrow.t t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'4 x]. inv'4 x = invariant''3 x
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_K = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  let rec insert (self_: MutBorrow.t t_Vec) (index: UInt64.t) (element: t_K) (return (x: ())) =
    {[@expl:insert 'self_' type invariant] inv'4 self_}
    {[@expl:insert 'element' type invariant] inv element}
    any
    [ return (result: ()) -> {Seq.length (view self_.final) = Seq.length (view self_.current) + 1}
      {forall i: int. 0 <= i /\ i < UInt64.t'int index -> index_logic self_.final i = index_logic self_.current i}
      {index_logic self_.final (UInt64.t'int index) = element}
      {forall i: int. UInt64.t'int index < i /\ i < Seq.length (view self_.final)
        -> index_logic self_.final i = index_logic self_.current (i - 1)}
      (! return {result}) ]
  
  predicate inv'5 (_1: t_VacantEntry)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_VacantEntry [inv'5 x]. inv'5 x
      = match x with
        | {t_VacantEntry__map = map; t_VacantEntry__key = key; t_VacantEntry__index = index} -> inv'4 map /\ inv key
        end
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_VacantEntry) = inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'6 (_1: MutBorrow.t t_VacantEntry)
  
  axiom inv_axiom'5 [@rewrite]: forall x: MutBorrow.t t_VacantEntry [inv'6 x]. inv'6 x = invariant''4 x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_VacantEntry) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_VacantEntry) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec insert'0 (self: MutBorrow.t t_VacantEntry) (return (x: ())) =
    {[@expl:insert 'self' type invariant] inv'6 self}
    (! bb0
    [ bb0 = s0 [ s0 = clone' {self.current.t_VacantEntry__key} (fun (_ret: t_K) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'3 self.current.t_VacantEntry__map.current}
        MutBorrow.borrow_mut <t_Vec> {self.current.t_VacantEntry__map.current}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_2 <- _ret ] -{inv'3 _ret.final}-
            [ &self <- { self with current = { self.current with t_VacantEntry__map = { self.current.t_VacantEntry__map with current = _ret.final } } } ]
            s1)
      | s1 = insert {_2} {self.current.t_VacantEntry__index} {_4} (fun (_ret: ()) -> [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'6 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_VacantEntry = self
    | & _2: MutBorrow.t t_Vec = Any.any_l ()
    | & _4: t_K = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
