module M_test
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_usize_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_usize_Global (self: t_Vec_usize_Global) : Seq.seq UInt64.t
  
  axiom view_Vec_usize_Global_spec: forall self: t_Vec_usize_Global. Seq.length (view_Vec_usize_Global self)
      <= UInt64.t'int const_MAX
  
  let rec len_usize (self_: t_Vec_usize_Global) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_usize_Global self_)}
      (! return {result}) ]
  
  let rec push_usize (self_: MutBorrow.t t_Vec_usize_Global) (v: UInt64.t) (return (x: ())) = any
    [ return (result: ()) -> {view_Vec_usize_Global self_.final = Seq.snoc (view_Vec_usize_Global self_.current) v}
      (! return {result}) ]
  
  predicate resolve_ref_Vec_usize_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_usize_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_usize_Global
  
  function index_Vec_usize_Global [@inline:trivial] (self: t_Vec_usize_Global) (ix: int) : UInt64.t =
    Seq.get (view_Vec_usize_Global self) ix
  
  meta "rewrite_def" function index_Vec_usize_Global
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (v: MutBorrow.t t_Vec_usize_Global) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = len_usize {v.current} (fun (_ret: UInt64.t) -> [ &_5 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec_usize_Global> {v.current} {MutBorrow.get_id v}
          (fun (_ret: MutBorrow.t t_Vec_usize_Global) -> [ &_4 <- _ret ] [ &v <- { v with current = _ret.final } ] s1)
      | s1 = push_usize {_4} {_5} (fun (_ret: ()) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = -{resolve_ref_Vec_usize_Global v}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec_usize_Global = v
    | & _3: () = Any.any_l ()
    | & _4: MutBorrow.t t_Vec_usize_Global = Any.any_l ()
    | & _5: UInt64.t = Any.any_l () ])
    [ return (result: ()) ->
    {[@expl:test ensures] UInt64.t'int (index_Vec_usize_Global v.final (Seq.length (view_Vec_usize_Global v.current)))
      = Seq.length (view_Vec_usize_Global v.current)}
      (! return {result}) ]
end
module M_impl_VacantEntry_K__insert (* VacantEntry<'_, K> *)
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_K
  
  type t_Vec_K_Global
  
  type t_VacantEntry_K = { map: MutBorrow.t t_Vec_K_Global; key: t_K; index: UInt64.t }
  
  predicate inv_K (_1: t_K)
  
  predicate invariant_ref_K [@inline:trivial] (self: t_K) = inv_K self
  
  meta "rewrite_def" predicate invariant_ref_K
  
  predicate inv_ref_K [@inline:trivial] (_1: t_K) = invariant_ref_K _1
  
  meta "rewrite_def" predicate inv_ref_K
  
  predicate precondition_clone (self: ()) (args: t_K)
  
  axiom precondition_fndef: forall args: t_K [precondition_clone () args]. (let self_ = args in inv_ref_K self_)
      -> precondition_clone () args
  
  predicate postcondition_once_clone (self: ()) (args: t_K) (result: t_K)
  
  axiom postcondition_fndef:
    forall args: t_K, res: t_K [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_K res)
  
  let rec clone_K (self_: t_K) (return (x: t_K)) = {[@expl:clone requires] precondition_clone () self_}
    any [ return (result: t_K) -> {postcondition_once_clone () self_ result} (! return {result}) ]
  
  predicate invariant_Box_K_Global (self: t_K) = inv_K self
  
  predicate inv_Box_K_Global [@inline:trivial] (_1: t_K) = invariant_Box_K_Global _1
  
  meta "rewrite_def" predicate inv_Box_K_Global
  
  predicate invariant_Seq_K [@inline:trivial] (self: Seq.seq t_K) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_K_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_K
  
  predicate inv_Seq_K [@inline:trivial] (_1: Seq.seq t_K) = invariant_Seq_K _1
  
  meta "rewrite_def" predicate inv_Seq_K
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_K_Global (self: t_Vec_K_Global) : Seq.seq t_K
  
  axiom view_Vec_K_Global_spec: forall self: t_Vec_K_Global. Seq.length (view_Vec_K_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_K_Global (self: t_Vec_K_Global) = inv_Seq_K (view_Vec_K_Global self)
  
  predicate inv_Vec_K_Global (_1: t_Vec_K_Global)
  
  axiom inv_axiom: forall x: t_Vec_K_Global [inv_Vec_K_Global x]. inv_Vec_K_Global x -> invariant_Vec_K_Global x
  
  predicate invariant_ref_Vec_K_Global [@inline:trivial] (self: MutBorrow.t t_Vec_K_Global) =
    inv_Vec_K_Global self.current /\ inv_Vec_K_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_K_Global
  
  predicate inv_ref_Vec_K_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_K_Global) = invariant_ref_Vec_K_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_K_Global
  
  function index_Vec_K_Global [@inline:trivial] (self: t_Vec_K_Global) (ix: int) : t_K =
    Seq.get (view_Vec_K_Global self) ix
  
  meta "rewrite_def" function index_Vec_K_Global
  
  let rec insert_K (self_: MutBorrow.t t_Vec_K_Global) (index'0: UInt64.t) (element: t_K) (return (x: ())) =
    {[@expl:insert 'self_' type invariant] inv_ref_Vec_K_Global self_}
    {[@expl:insert 'element' type invariant] inv_K element}
    any
    [ return (result: ()) -> {Seq.length (view_Vec_K_Global self_.final)
      = Seq.length (view_Vec_K_Global self_.current) + 1}
      {forall i: int. 0 <= i /\ i < UInt64.t'int index'0
        -> index_Vec_K_Global self_.final i = index_Vec_K_Global self_.current i}
      {index_Vec_K_Global self_.final (UInt64.t'int index'0) = element}
      {forall i: int. UInt64.t'int index'0 < i /\ i < Seq.length (view_Vec_K_Global self_.final)
        -> index_Vec_K_Global self_.final i = index_Vec_K_Global self_.current (i - 1)}
      (! return {result}) ]
  
  predicate inv_VacantEntry_K (_1: t_VacantEntry_K)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_VacantEntry_K [inv_VacantEntry_K x]. inv_VacantEntry_K x
      = (inv_ref_Vec_K_Global x.map /\ inv_K x.key)
  
  predicate invariant_ref_VacantEntry_K [@inline:trivial] (self: MutBorrow.t t_VacantEntry_K) =
    inv_VacantEntry_K self.current /\ inv_VacantEntry_K self.final
  
  meta "rewrite_def" predicate invariant_ref_VacantEntry_K
  
  predicate inv_ref_VacantEntry_K [@inline:trivial] (_1: MutBorrow.t t_VacantEntry_K) = invariant_ref_VacantEntry_K _1
  
  meta "rewrite_def" predicate inv_ref_VacantEntry_K
  
  predicate resolve_ref_VacantEntry_K [@inline:trivial] (_1: MutBorrow.t t_VacantEntry_K) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_VacantEntry_K
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec insert_K'0 (self: MutBorrow.t t_VacantEntry_K) (return (x: ())) =
    {[@expl:insert 'self' type invariant] inv_ref_VacantEntry_K self}
    (! bb0
    [ bb0 = s0 [ s0 = clone_K {self.current.key} (fun (_ret: t_K) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {inv_Vec_K_Global self.current.map.current}
        MutBorrow.borrow_mut <t_Vec_K_Global> {self.current.map.current}
          (fun (_ret: MutBorrow.t t_Vec_K_Global) ->
            [ &_2 <- _ret ] -{inv_Vec_K_Global _ret.final}-
            [ &self <- { self with current = { self.current with map = { self.current.map with current = _ret.final } } } ]
            s1)
      | s1 = insert_K {_2} {self.current.index} {_4} (fun (_ret: ()) -> [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv_ref_VacantEntry_K self} s1
      | s1 = -{resolve_ref_VacantEntry_K self}- s2
      | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_VacantEntry_K = self
    | & _2: MutBorrow.t t_Vec_K_Global = Any.any_l ()
    | & _4: t_K = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
