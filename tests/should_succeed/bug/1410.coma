module M_1410__bar
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Range = { t_Range__start: Int32.t; t_Range__end: Int32.t }
  
  let rec into_iter (self_: t_Range) (return (x: t_Range)) = any
    [ return' (result: t_Range) -> {result = self_} (! return {result}) ]
  
  type t_F
  
  predicate precondition (self: t_F) (args: ())
  
  predicate inv (_1: t_F)
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  predicate produces (self: t_Range) (visited: Seq.seq Int32.t) (o: t_Range) =
    self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq Int32.t) (b: t_Range) (bc: Seq.seq Int32.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq Int32.t, b: t_Range, bc: Seq.seq Int32.t, c: t_Range. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. produces self (Seq.empty: Seq.seq Int32.t) self
  
  predicate inv'0 (_1: t_Range)
  
  axiom inv_axiom [@rewrite]: forall x: t_Range [inv'0 x]. inv'0 x = true
  
  predicate inv'1 (_1: Seq.seq Int32.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq Int32.t [inv'1 x]. inv'1 x = true
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Range) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_Range) =
    resolve self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  let rec next (self_: MutBorrow.t t_Range) (return (x: t_Option)) = any
    [ return' (result: t_Option) -> {match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Range) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Some (input: t_Option) (ret (field_0: Int32.t)) = any
    [ good (field_0: Int32.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: Int32.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_F) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'2 (_1: MutBorrow.t t_F)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_F [inv'2 x]. inv'2 x = invariant' x
  
  predicate postcondition_once (self: t_F) (args: ()) (result: ())
  
  predicate resolve'1 (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: ()) (result_state: t_F) (result: ())
  
  function fn_mut_once (self: t_F) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: (), res: (). postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: ()) (res_state: t_F) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: (), res_state: t_F, res: (). postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec call_mut (self_: MutBorrow.t t_F) (arg: ()) (return (x: ())) =
    {[@expl:call_mut 'self_' type invariant] inv'2 self_}
    {[@expl:call_mut requires] precondition self_.current arg}
    any [ return' (result: ()) -> {postcondition_mut self_.current arg self_.final result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec bar (f: t_F) (return (x: ())) = {[@expl:bar 'f' type invariant] inv f}
    {[@expl:bar requires] precondition f ()}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- { t_Range__start = (0: Int32.t); t_Range__end = (1: Int32.t) } ] s1
      | s1 = into_iter {_4} (fun (_ret: t_Range) -> [ &iter <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq Int32.t ] s1 | s1 = bb4 ]
    | bb4 = bb4
      [ bb4 = {[@expl:for invariant] inv'1 produced}
        {[@expl:for invariant] inv'0 iter}
        {[@expl:for invariant] produces iter_old produced iter}
        {[@expl:loop invariant #0] inv f}
        {[@expl:loop invariant #1] Seq.length produced = 0 -> precondition f ()}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_18 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_18.current} {MutBorrow.get_id _18}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_17 <- _ret ] [ &_18 <- { _18 with current = _ret.final } ] s2)
          | s2 = next {_17} (fun (_ret: t_Option) -> [ &_16 <- _ret ] s3)
          | s3 = bb6 ]
        | bb6 = s0
          [ s0 = -{resolve'0 _18}- s1
          | s1 = any [ br0 -> {_16 = C_None} (! bb9) | br1 (x0: Int32.t) -> {_16 = C_Some x0} (! bb10) ] ]
        | bb10 = s0
          [ s0 = v_Some {_16} (fun (r0: Int32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_21 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb11 ]
        | bb11 = s0
          [ s0 = [ &produced <- _21 ] s1
          | s1 = {inv f}
            MutBorrow.borrow_mut <t_F> {f}
              (fun (_ret: MutBorrow.t t_F) -> [ &_24 <- _ret ] -{inv _ret.final}- [ &f <- _ret.final ] s2)
          | s2 = call_mut {_24} {_25} (fun (_ret: ()) -> [ &_23 <- _ret ] s3)
          | s3 = bb4 ] ] ]
    | bb9 = s0 [ s0 = {[@expl:type invariant] inv f} s1 | s1 = -{resolve'1 f}- s2 | s2 = bb13 ]
    | bb13 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & f: t_F = f
    | & iter: t_Range = Any.any_l ()
    | & _4: t_Range = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq Int32.t = Any.any_l ()
    | & _16: t_Option = Any.any_l ()
    | & _17: MutBorrow.t t_Range = Any.any_l ()
    | & _18: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: Int32.t = Any.any_l ()
    | & _21: Seq.seq Int32.t = Any.any_l ()
    | & _23: () = Any.any_l ()
    | & _24: MutBorrow.t t_F = Any.any_l ()
    | & _25: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
