module M_510__test_bool
  use creusot.int.UInt8
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_bool (inp: bool) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_bing <- UInt8.of_bool inp ] s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & inp: bool = inp | & _bing: UInt8.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_510__test_char
  use creusot.int.UInt8
  use creusot.prelude.Char
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_char (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = Char.of_int {UInt8.t'int (22: UInt8.t)} (fun (_ret_from: Char.t) -> [ &_1 <- _ret_from ] s1)
      | s1 = return {_0} ] ] [ & _0: () = Any.any_l () | & _1: Char.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
