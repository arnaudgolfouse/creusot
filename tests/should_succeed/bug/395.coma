module M_395__signed_division [#"395.rs" 3 0 3 24]
  let%span s395 = "395.rs" 4 12 4 14
  let%span s395'0 = "395.rs" 5 12 5 13
  let%span s395'1 = "395.rs" 7 12 7 17
  let%span s395'2 = "395.rs" 7 21 7 23
  let%span s395'3 = "395.rs" 7 4 7 24
  
  use creusot.int.Int32
  use creusot.prelude.Bool
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec signed_division[#"395.rs" 3 0 3 24] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s395] (10: Int32.t) ] s1
      | s1 =  [ &y <- [%#s395'0] (1: Int32.t) ] s2
      | s2 =  [ &_6 <- x ] s3
      | s3 =  [ &_7 <- y ] s4
      | s4 =  [ &_8 <- _7 = ([%#s395'1] (0: Int32.t)) ] s5
      | s5 = {[@expl:division by zero] [%#s395'1] not _8} s6
      | s6 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_9 <- _7 = ([%#s395'1] (-1: Int32.t)) ] s1
      | s1 =  [ &_10 <- _6 = ([%#s395'1] (-2147483648: Int32.t)) ] s2
      | s2 =  [ &_11 <- Bool.bw_and _9 _10 ] s3
      | s3 = {[@expl:Div overflow] [%#s395'1] not _11} s4
      | s4 = bb2 ]
    
    | bb2 = s0
      [ s0 = Int32.div {_6} {_7} (fun (_ret:Int32.t) ->  [ &_5 <- _ret ] s1)
      | s1 =  [ &_4 <- _5 = ([%#s395'2] (10: Int32.t)) ] s2
      | s2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]  ]
    
    | bb3 = return''0 {_0}
    | bb4 = {[%#s395'3] false} any ]
    
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & y: Int32.t = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: Int32.t = Any.any_l ()
    | & _7: Int32.t = Any.any_l ()
    | & _8: bool = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: bool = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
