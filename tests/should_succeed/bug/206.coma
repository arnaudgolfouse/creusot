module M_u2
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_Vec_usize_Global
  
  type t_A = { f0: t_Vec_usize_Global }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_usize_Global (self: t_Vec_usize_Global) : Seq.seq UInt64.t
  
  axiom view_Vec_usize_Global_spec: forall self: t_Vec_usize_Global. Seq.length (view_Vec_usize_Global self)
      <= UInt64.t'int const_MAX
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_A
  
  function u2 (a: t_A) : ()
  
  goal vc_u2: [@expl:u2 ensures] view_Vec_usize_Global a.f0 = view_Vec_usize_Global a.f0
end
module M_ex
  use creusot.prelude.Any
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_Vec_usize_Global
  
  type t_A = { f0: t_Vec_usize_Global }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_usize_Global (self: t_Vec_usize_Global) : Seq.seq UInt64.t
  
  axiom view_Vec_usize_Global_spec: forall self: t_Vec_usize_Global. Seq.length (view_Vec_usize_Global self)
      <= UInt64.t'int const_MAX
  
  function u2 (a: t_A) : () = ()
  
  axiom u2_spec: forall a: t_A. view_Vec_usize_Global a.f0 = view_Vec_usize_Global a.f0
  
  function u (a: t_A) : () = u2 a
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ex (a: t_A) (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:ex ensures] u a = u a} (! return {result}) ]
end
