module M_206__u2 [#"206.rs" 9 0 9 11]
  let%span s206 = "206.rs" 8 10 8 22
  let%span s206'0 = "206.rs" 9 12 9 14
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_A  =
    { t_A__0: t_Vec }
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)
  
  constant a  : t_A
  
  function u2 [#"206.rs" 9 0 9 11] (a'0 : t_A) : ()
  
  goal vc_u2 : [%#s206] view a.t_A__0 = view a.t_A__0
end
module M_206__ex [#"206.rs" 20 0 20 16]
  let%span s206 = "206.rs" 19 10 19 26
  let%span s206'0 = "206.rs" 15 8 15 13
  let%span s206'1 = "206.rs" 8 10 8 22
  let%span s206'2 = "206.rs" 9 12 9 14
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_A  =
    { t_A__0: t_Vec }
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)
  
  function u2 [#"206.rs" 9 0 9 11] (a : t_A) : () =
    [%#s206'2] ()
  
  axiom u2_spec : forall a : t_A . [%#s206'1] view a.t_A__0 = view a.t_A__0
  
  function u [#"206.rs" 13 0 13 14] (a : t_A) : () =
    [%#s206'0] u2 a
  
  meta "compute_max_steps" 1000000
  
  let rec ex[#"206.rs" 20 0 20 16] (a:t_A) (return'  (x:()))= (! bb0 [ bb0 = return''0 {_0} ] )
    [ & _0 : () = Any.any_l () ]
     [ return''0 (result:())-> {[@expl:ex ensures] [%#s206] u a = u a} (! return' {result}) ] 
end
