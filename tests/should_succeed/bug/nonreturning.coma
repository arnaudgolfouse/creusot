module M_f
  predicate inv_never [@inline:trivial] (_1: ()) = false
  
  meta "rewrite_def" predicate inv_never
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = bb1 | bb1 = bb1 [ bb1 = (! bb1) ] ])
    [ return (result: ()) -> {[@expl:f result type invariant] inv_never result} (! return {result}) ]
end
module M_g
  use creusot.prelude.Any
  
  predicate inv_never [@inline:trivial] (_1: ()) = false
  
  meta "rewrite_def" predicate inv_never
  
  let rec f (return (x: ())) = any [ return (result: ()) -> {inv_never result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g (b: bool) (return (x: ())) = (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ]
    | bb1 = s0 [ s0 = f (fun (_ret: ()) -> [ &_5 <- _ret ] s1) | s1 = {false} any ]
    | bb2 = return {_0} ] [ & _0: () = Any.any_l () | & b: bool = b | & _5: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:g ensures] not b} (! return {result}) ]
end
