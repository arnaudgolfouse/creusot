module M_eq_panic__omg
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: t_T) = inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  type t_DeepModelTy
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function deep_model'0 [@inline:trivial] (self: t_T) : t_DeepModelTy = deep_model self
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_T) : t_DeepModelTy = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_T) (rhs: t_T) (return' (x: bool)) = {[@expl:eq 'self_' type invariant] inv'1 self_}
    {[@expl:eq 'rhs' type invariant] inv'1 rhs}
    any [ return''0 (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec omg (x: t_T) (y: t_T) (return' (x'0: bool)) = {[@expl:omg 'x' type invariant] inv'0 x}
    {[@expl:omg 'y' type invariant] inv'0 y}
    (! bb0
    [ bb0 = s0 [ s0 = eq {x'0} {y'0} (fun (_ret: bool) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: bool = Any.any_l () | & x'0: t_T = x | & y'0: t_T = y ])
    [ return''0 (result: bool) -> (! return' {result}) ]
end
