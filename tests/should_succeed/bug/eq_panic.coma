module M_eq_panic__omg [#"eq_panic.rs" 6 0 6 51]
  let%span seq_panic = "eq_panic.rs" 6 30 6 31
  let%span seq_panic'0 = "eq_panic.rs" 6 37 6 38
  let%span scmp = "../../../creusot-contracts/src/std/cmp.rs" 11 16 11 17
  let%span scmp'0 = "../../../creusot-contracts/src/std/cmp.rs" 12 29 12 32
  let%span scmp'1 = "../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span smodel = "../../../creusot-contracts/src/model.rs" 36 8 36 28
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 93 8 93 18
  
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = [%#sinvariant] inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 (self: t_T) = [%#sinvariant] inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  type t_DeepModelTy
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function deep_model'0 (self: t_T) : t_DeepModelTy = [%#smodel] deep_model self
  
  function deep_model'1 (self: t_T) : t_DeepModelTy = [%#smodel] deep_model'0 self
  
  let rec eq (self_: t_T) (rhs: t_T) (return' (x: bool)) = {[@expl:eq 'self_' type invariant] [%#scmp] inv'1 self_}
    {[@expl:eq 'rhs' type invariant] [%#scmp'0] inv'1 rhs}
    any
    [ return''0 (result: bool) -> {[%#scmp'1] result = (deep_model'1 self_ = deep_model'1 rhs)} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec omg [#"eq_panic.rs" 6 0 6 51] (x: t_T) (y: t_T) (return' (x'0: bool)) =
    {[@expl:omg 'x' type invariant] [%#seq_panic] inv'0 x}
    {[@expl:omg 'y' type invariant] [%#seq_panic'0] inv'0 y}
    (! bb0
    [ bb0 = s0 [ s0 = eq {x'0} {y'0} (fun (_ret: bool) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: bool = Any.any_l () | & x'0: t_T = x | & y'0: t_T = y ])
    [ return''0 (result: bool) -> (! return' {result}) ]
end
