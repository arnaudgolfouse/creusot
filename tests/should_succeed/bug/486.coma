module M_486__test
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_HasMutRef = { t_HasMutRef__0: MutBorrow.t UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t UInt32.t) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (x: t_HasMutRef) (return (x'0: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- { t_HasMutRef__0 = { x.t_HasMutRef__0 with current = (5: UInt32.t) } } ] s1
      | s1 = -{resolve'0 x.t_HasMutRef__0}- s2
      | s2 = return {_0} ] ] [ & _0: () = Any.any_l () | & x: t_HasMutRef = x ])
    [ return (result: ()) -> {[@expl:test ensures] UInt32.t'int (x.t_HasMutRef__0).final = 5} (! return {result}) ]
end
