module M_594__test_program [#"594.rs" 11 0 11 46]
  let%span s594 = "594.rs" 10 10 10 21
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type tuple  =
    { _p0: UInt32.t; _p1: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_program[#"594.rs" 11 0 11 46] (_0:tuple) (return'  (x:UInt32.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- _1._p0 ] s1 | s1 =  [ &_0'0 <- x ] s2 | s2 = return''0 {_0'0} ]  ]
     [ & _0'0: UInt32.t = Any.any_l () | & _1: tuple = _0 | & x: UInt32.t = Any.any_l () ] )
    [ return''0 (result:UInt32.t)-> {[@expl:test_program ensures] [%#s594] let {_p0 = x} = _0 in result = x}
      (! return' {result}) ]

end
module M_594__test_closure [#"594.rs" 15 0 15 21]
  let%span s594 = "594.rs" 20 23 20 24
  let%span s594'0 = "594.rs" 20 26 20 27
  let%span s594'1 = "594.rs" 20 19 20 20
  let%span s594'2 = "594.rs" 21 20 21 21
  let%span s594'3 = "594.rs" 21 23 21 24
  let%span s594'4 = "594.rs" 16 24 16 35
  let%span s594'5 = "594.rs" 18 24 18 35
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple  =
    { _p0: Int32.t; _p1: Int32.t }
  
  let rec closure0[#"594.rs" 16 14 16 37] (self:()) (_c:Int32.t) (_1:tuple) (return'  (x:Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_a <- _3._p0 ] s1
      | s1 =  [ &b <- _3._p1 ] s2
      | s2 =  [ &res <- b ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return''0 {_0} ]
     ]
    
    [ & _0: Int32.t = Any.any_l ()
    | & _3: tuple = _1
    | & _a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & res: Int32.t = Any.any_l () ]
    )
    [ return''0 (result:Int32.t)-> {[@expl:closure ensures] [%#s594'4] let {_p0 = _a ; _p1 = b} = _1 in result = b}
      (! return' {result}) ]
  
  
  let rec closure1[#"594.rs" 18 14 18 37] (self:()) (_0:tuple) (return'  (x:Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_a <- _2._p0 ] s1
      | s1 =  [ &b <- _2._p1 ] s2
      | s2 =  [ &res <- b ] s3
      | s3 =  [ &_0'0 <- res ] s4
      | s4 = return''0 {_0'0} ]
     ]
    
    [ & _0'0: Int32.t = Any.any_l ()
    | & _2: tuple = _0
    | & _a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & res: Int32.t = Any.any_l () ]
    )
    [ return''0 (result:Int32.t)-> {[@expl:closure ensures] [%#s594'5] let {_p0 = _a ; _p1 = b} = _0 in result = b}
      (! return' {result}) ]
  
  
  type tuple'0  =
    { _p0'0: Int32.t; _p1'0: tuple }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_closure[#"594.rs" 15 0 15 21] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &cl1 <- () ] s1
      | s1 =  [ &cl2 <- () ] s2
      | s2 =  [ &_6 <- { _p0 = ([%#s594] (0: Int32.t)); _p1 = ([%#s594'0] (3: Int32.t)) } ] s3
      | s3 =  [ &_5 <- { _p0'0 = ([%#s594'1] (4: Int32.t)); _p1'0 = _6 } ] s4
      | s4 = closure0 {cl1} {_5._p0'0} {_5._p1'0} (fun (_ret:Int32.t) ->  [ &_a <- _ret ] s5)
      | s5 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_10 <- { _p0 = ([%#s594'2] (0: Int32.t)); _p1 = ([%#s594'3] (4: Int32.t)) } ] s1
      | s1 =  [ &_9 <- _10 ] s2
      | s2 = closure1 {cl2} {_9} (fun (_ret:Int32.t) ->  [ &_b <- _ret ] s3)
      | s3 = bb2 ]
    
    | bb2 = return''0 {_0} ]
    
    [ & _0: () = Any.any_l ()
    | & cl1: () = Any.any_l ()
    | & cl2: () = Any.any_l ()
    | & _a: Int32.t = Any.any_l ()
    | & _5: tuple'0 = Any.any_l ()
    | & _6: tuple = Any.any_l ()
    | & _b: Int32.t = Any.any_l ()
    | & _9: tuple = Any.any_l ()
    | & _10: tuple = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_594__qyi1704796797730763899__test_method [#"594.rs" 33 4 33 55] (* T *)
  let%span s594 = "594.rs" 32 14 32 25
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type tuple  =
    { _p0: UInt32.t; _p1: UInt32.t }
  
  type t_T  =
    { t_T__0: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_method[#"594.rs" 33 4 33 55] (self:t_T) (_1:tuple) (return'  (x:UInt32.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- _2._p0 ] s1 | s1 =  [ &_0 <- x ] s2 | s2 = return''0 {_0} ]  ]
     [ & _0: UInt32.t = Any.any_l () | & _2: tuple = _1 | & x: UInt32.t = Any.any_l () ] )
    [ return''0 (result:UInt32.t)-> {[@expl:test_method ensures] [%#s594] let {_p0 = x} = _1 in result = x}
      (! return' {result}) ]

end
