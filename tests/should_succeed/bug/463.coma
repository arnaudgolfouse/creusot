module M_463__test [#"463.rs" 3 0 3 13]
  let%span s463 = "463.rs" 9 14 9 15
  let%span s463'0 = "463.rs" 10 18 10 25
  let%span s463'1 = "463.rs" 7 23 7 24
  let%span s463'2 = "463.rs" 5 19 5 28
  let%span s463'3 = "463.rs" 6 18 6 35
  
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  let rec closure0[#"463.rs" 6 8 6 37] (self:()) (x:UInt64.t) (return'  (x'0:UInt64.t))= {[@expl:closure requires] [%#s463'2] UInt64.t'int x
    < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt64.add {x'0} {[%#s463'1] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &res'0 <- _ret ] s1)
      | s1 =  [ &res <- res'0 ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: UInt64.t = Any.any_l ()
    | & x'0: UInt64.t = x
    | & res: UInt64.t = Any.any_l ()
    | & res'0: UInt64.t = Any.any_l () ]
    
    [ return''0 (result:UInt64.t)-> {[@expl:closure ensures] [%#s463'3] UInt64.t'int result = UInt64.t'int x + 1}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec test[#"463.rs" 3 0 3 13] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &c <- () ] s1
      | s1 =  [ &_4 <- [%#s463] (2: UInt64.t) ] s2
      | s2 = closure0 {c} {_4} (fun (_ret:UInt64.t) ->  [ &y <- _ret ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s463'0] UInt64.t'int y = 3} s1 | s1 = return''0 {_0} ]  ]
    )
    [ & _0: () = Any.any_l () | & c: () = Any.any_l () | & y: UInt64.t = Any.any_l () | & _4: UInt64.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
