module M_256__u8_safe
  use creusot.int.UInt8
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec u8_safe (u: UInt8.t) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = UInt8.add {u} {(0: UInt8.t)} (fun (_ret: UInt8.t) -> [ &_2 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & u: UInt8.t = u | & _2: UInt8.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_256__bug_256
  use creusot.prelude.Any
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_String = { t_String__vec: t_Vec }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec bug_256 (_x: t_String) (return (x: ())) = (! bb0
    [ bb0 = bb1 | bb1 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
