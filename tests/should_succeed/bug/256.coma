module M_256__u8_safe
  use creusot.int.UInt8
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec u8_safe (u: UInt8.t) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = UInt8.add {u} {(0: UInt8.t)} (fun (_ret: UInt8.t) -> [ &_2 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & u: UInt8.t = u | & _2: UInt8.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_256__bug_256
  use creusot.prelude.Any
  
  type t_String
  
  predicate inv (_1: t_String)
  
  predicate resolve (_1: t_String)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec bug_256 (_x: t_String) (return (x: ())) = {[@expl:bug_256 '_x' type invariant] inv _x}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv _x} s1 | s1 = -{resolve _x}- s2 | s2 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & _x: t_String = _x ]) [ return (result: ()) -> (! return {result}) ]
end
