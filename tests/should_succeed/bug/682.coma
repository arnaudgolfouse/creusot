module M_add_some
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use mach.int.Int
  
  predicate resolve_ref_u64 [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u64
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_u64 (self: UInt64.t) (o: UInt64.t) : t_Ordering = if UInt64.lt self o then
      Less
    else
      if self = o then Equal else Greater
  
  
  function eq_cmp_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_u64_spec: forall x: UInt64.t, y: UInt64.t. (x = y) = (cmp_log_u64 x y = Equal)
  
  function antisym2_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_u64_spec: forall x: UInt64.t, y: UInt64.t. cmp_log_u64 x y = Greater -> cmp_log_u64 y x = Less
  
  function antisym1_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_u64_spec: forall x: UInt64.t, y: UInt64.t. cmp_log_u64 x y = Less -> cmp_log_u64 y x = Greater
  
  function trans_u64 (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_u64_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. cmp_log_u64 x y = o
      -> cmp_log_u64 y z = o -> cmp_log_u64 x z = o
  
  function refl_u64 (x: UInt64.t) : ()
  
  axiom refl_u64_spec: forall x: UInt64.t. cmp_log_u64 x x = Equal
  
  function cmp_gt_log_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_u64_spec: forall x: UInt64.t, y: UInt64.t. UInt64.gt x y = (cmp_log_u64 x y = Greater)
  
  function cmp_ge_log_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_u64_spec: forall x: UInt64.t, y: UInt64.t. UInt64.ge x y = (cmp_log_u64 x y <> Less)
  
  function cmp_lt_log_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_u64_spec: forall x: UInt64.t, y: UInt64.t. UInt64.lt x y = (cmp_log_u64 x y = Less)
  
  function cmp_le_log_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_u64_spec: forall x: UInt64.t, y: UInt64.t. UInt64.le x y = (cmp_log_u64 x y <> Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add_some (a: MutBorrow.t UInt64.t) (return (x: ())) = {[@expl:add_some requires] UInt64.t'int a.current
    <= Int.div (UInt64.t'int const_MAX) 2}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt64.add {a.current} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &a <- { a with current = _ret } ] s1)
      | s1 = -{resolve_ref_u64 a}- s2
      | s2 = return {_0} ] ] [ & _0: () = Any.any_l () | & a: MutBorrow.t UInt64.t = a ])
    [ return (result: ()) -> {[@expl:add_some ensures] UInt64.gt a.final a.current} (! return {result}) ]
end
module M_foo
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_u64 (self: UInt64.t) (o: UInt64.t) : t_Ordering = if UInt64.lt self o then
      Less
    else
      if self = o then Equal else Greater
  
  
  function eq_cmp_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_u64_spec: forall x: UInt64.t, y: UInt64.t. (x = y) = (cmp_log_u64 x y = Equal)
  
  function antisym2_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_u64_spec: forall x: UInt64.t, y: UInt64.t. cmp_log_u64 x y = Greater -> cmp_log_u64 y x = Less
  
  function antisym1_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_u64_spec: forall x: UInt64.t, y: UInt64.t. cmp_log_u64 x y = Less -> cmp_log_u64 y x = Greater
  
  function trans_u64 (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_u64_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. cmp_log_u64 x y = o
      -> cmp_log_u64 y z = o -> cmp_log_u64 x z = o
  
  function refl_u64 (x: UInt64.t) : ()
  
  axiom refl_u64_spec: forall x: UInt64.t. cmp_log_u64 x x = Equal
  
  function cmp_gt_log_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_u64_spec: forall x: UInt64.t, y: UInt64.t. UInt64.gt x y = (cmp_log_u64 x y = Greater)
  
  function cmp_ge_log_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_u64_spec: forall x: UInt64.t, y: UInt64.t. UInt64.ge x y = (cmp_log_u64 x y <> Less)
  
  function cmp_lt_log_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_u64_spec: forall x: UInt64.t, y: UInt64.t. UInt64.lt x y = (cmp_log_u64 x y = Less)
  
  function cmp_le_log_u64 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_u64_spec: forall x: UInt64.t, y: UInt64.t. UInt64.le x y = (cmp_log_u64 x y <> Greater)
  
  let rec add_some (a: MutBorrow.t UInt64.t) (return (x: ())) = {[@expl:add_some requires] UInt64.t'int a.current
    <= Int.div (UInt64.t'int const_MAX) 2}
    any [ return (result: ()) -> {UInt64.gt a.final a.current} (! return {result}) ]
  
  predicate resolve_ref_u64 [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u64
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo (a: MutBorrow.t UInt64.t) (return (x: ())) = {[@expl:foo requires] a.current = (3: UInt64.t)}
    (! bb0
    [ bb0 = s0 [ s0 = [ &a_p <- a.current ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <UInt64.t> {a.current} {MutBorrow.get_id a}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &_7 <- _ret ] [ &a <- { a with current = _ret.final } ] s1)
      | s1 = add_some {_7} (fun (_ret: ()) -> [ &_6 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = -{resolve_ref_u64 a}- s1 | s1 = {[@expl:assertion] UInt64.gt a.current a_p} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: MutBorrow.t UInt64.t = a
    | & a_p: UInt64.t = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: MutBorrow.t UInt64.t = Any.any_l () ])
    [ return (result: ()) -> {[@expl:foo ensures] UInt64.gt a.final a.current} (! return {result}) ]
end
