module M_387__use_tree
  use creusot.prelude.Any
  use creusot.int.UInt32
  
  type t_Node = { t_Node__left: t_Tree; t_Node__val: UInt32.t; t_Node__right: t_Tree }
  with t_Option = C_None | C_Some t_Node
  with t_Tree = { t_Tree__0: t_Option }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec use_tree (_1: t_Tree) (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_387__qyi16446429885017832241__height (* Tree *)
  use creusot.int.UInt32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Tree = { t_Tree__0: t_Option }
  with t_Node = { t_Node__left: t_Tree; t_Node__val: UInt32.t; t_Node__right: t_Tree }
  with t_Option = C_None | C_Some t_Node
  
  let rec v_Some (input: t_Option) (ret (field_0: t_Node)) = any
    [ good (field_0: t_Node) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Node [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  let rec max (self_: UInt64.t) (o: UInt64.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {deep_model result >= deep_model self_}
      {deep_model result >= deep_model o}
      {result = self_ \/ result = o}
      {deep_model self_ <= deep_model o -> result = o}
      {deep_model o < deep_model self_ -> result = self_}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec height (self: t_Tree) (return (x: UInt64.t)) = (! bb0
    [ bb0 = any [ br0 -> {self.t_Tree__0 = C_None} (! bb4) | br1 (x0: t_Node) -> {self.t_Tree__0 = C_Some x0} (! bb3) ]
    | bb3 = s0
      [ s0 = v_Some {self.t_Tree__0} (fun (r0: t_Node) -> [ &n <- r0 ] s1)
      | s1 = height {n.t_Node__left} (fun (_ret: UInt64.t) -> [ &_5 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0 [ s0 = height {n.t_Node__right} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0 [ s0 = max {_5} {_7} (fun (_ret: UInt64.t) -> [ &_4 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0 [ s0 = UInt64.add {_4} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = bb8 ]
    | bb4 = s0 [ s0 = [ &_0 <- (0: UInt64.t) ] s1 | s1 = bb8 ]
    | bb8 = return {_0} ]
    [ & _0: UInt64.t = Any.any_l ()
    | & self: t_Tree = self
    | & n: t_Node = Any.any_l ()
    | & _4: UInt64.t = Any.any_l ()
    | & _5: UInt64.t = Any.any_l ()
    | & _7: UInt64.t = Any.any_l () ]) [ return (result: UInt64.t) -> (! return {result}) ]
end
