module M_impl_List_T__foo (* List<T> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Rc_PermCell_List_T_Global
  
  type t_Node_T = { next: t_Rc_PermCell_List_T_Global }
  
  type t_Option_Node_T = None | Some t_Node_T
  
  type t_List_T = { head: t_Option_Node_T }
  
  predicate inv_Rc_PermCell_List_T_Global (_1: t_Rc_PermCell_List_T_Global)
  
  predicate inv_Node_T (_1: t_Node_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Node_T [inv_Node_T x]. inv_Node_T x = inv_Rc_PermCell_List_T_Global x.next
  
  predicate inv_Option_Node_T (_1: t_Option_Node_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_Node_T [inv_Option_Node_T x]. inv_Option_Node_T x
      = match x with
        | None -> true
        | Some f0 -> inv_Node_T f0
        end
  
  predicate invariant_ref_Option_Node_T [@inline:trivial] (self: t_Option_Node_T) = inv_Option_Node_T self
  
  meta "rewrite_def" predicate invariant_ref_Option_Node_T
  
  predicate inv_ref_Option_Node_T [@inline:trivial] (_1: t_Option_Node_T) = invariant_ref_Option_Node_T _1
  
  meta "rewrite_def" predicate inv_ref_Option_Node_T
  
  let rec is_none_Node_T (self_: t_Option_Node_T) (return (x: bool)) =
    {[@expl:is_none 'self_' type invariant] inv_ref_Option_Node_T self_}
    any [ return (result: bool) -> {result = (self_ = None)} (! return {result}) ]
  
  predicate invariant_ref_Option_Node_T'0 [@inline:trivial] (self: MutBorrow.t t_Option_Node_T) =
    inv_Option_Node_T self.current /\ inv_Option_Node_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Option_Node_T'0
  
  predicate inv_ref_Option_Node_T'0 [@inline:trivial] (_1: MutBorrow.t t_Option_Node_T) =
    invariant_ref_Option_Node_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_Option_Node_T'0
  
  let rec take_Node_T (self_: MutBorrow.t t_Option_Node_T) (return (x: t_Option_Node_T)) =
    {[@expl:take 'self_' type invariant] inv_ref_Option_Node_T'0 self_}
    any
    [ return (result: t_Option_Node_T) -> {inv_Option_Node_T result}
      {result = self_.current /\ self_.final = None}
      (! return {result}) ]
  
  predicate inv_List_T (_1: t_List_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List_T [inv_List_T x]. inv_List_T x = inv_Option_Node_T x.head
  
  predicate invariant_ref_List_T [@inline:trivial] (self: MutBorrow.t t_List_T) =
    inv_List_T self.current /\ inv_List_T self.final
  
  meta "rewrite_def" predicate invariant_ref_List_T
  
  predicate inv_ref_List_T [@inline:trivial] (_1: MutBorrow.t t_List_T) = invariant_ref_List_T _1
  
  meta "rewrite_def" predicate inv_ref_List_T
  
  predicate resolve_ref_List_T [@inline:trivial] (_1: MutBorrow.t t_List_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_List_T
  
  let rec unwrap_Node_T (self_: t_Option_Node_T) (return (x: t_Node_T)) =
    {[@expl:unwrap 'self_' type invariant] inv_Option_Node_T self_}
    {[@expl:unwrap requires] self_ <> None}
    any [ return (result: t_Node_T) -> {inv_Node_T result} {Some result = self_} (! return {result}) ]
  
  predicate resolve_Rc_PermCell_List_T_Global (_1: t_Rc_PermCell_List_T_Global)
  
  predicate resolve_Node_T (_1: t_Node_T)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Node_T [resolve_Node_T x]. resolve_Node_T x
      = resolve_Rc_PermCell_List_T_Global x.next
  
  predicate invariant_ref_Rc_PermCell_List_T_Global [@inline:trivial] (self: t_Rc_PermCell_List_T_Global) =
    inv_Rc_PermCell_List_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_PermCell_List_T_Global
  
  predicate inv_ref_Rc_PermCell_List_T_Global [@inline:trivial] (_1: t_Rc_PermCell_List_T_Global) =
    invariant_ref_Rc_PermCell_List_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_PermCell_List_T_Global
  
  let rec clone_Rc_PermCell_List_T_Global (self_: t_Rc_PermCell_List_T_Global)
    (return (x: t_Rc_PermCell_List_T_Global)) =
    {[@expl:clone 'self_' type invariant] inv_ref_Rc_PermCell_List_T_Global self_}
    any
    [ return (result: t_Rc_PermCell_List_T_Global) -> {inv_Rc_PermCell_List_T_Global result}
      {result = self_}
      (! return {result}) ]
  
  type t_PermCell_List_T
  
  function view_Rc_PermCell_List_T_Global (self: t_Rc_PermCell_List_T_Global) : t_PermCell_List_T
  
  let rec as_ref_Rc_PermCell_List_T_Global (self_: t_Rc_PermCell_List_T_Global) (return (x: t_PermCell_List_T)) =
    {[@expl:as_ref 'self_' type invariant] inv_ref_Rc_PermCell_List_T_Global self_}
    any [ return (result: t_PermCell_List_T) -> {result = view_Rc_PermCell_List_T_Global self_} (! return {result}) ]
  
  type t_PermCellOwn_List_T
  
  predicate invariant_ref_List_T'0 [@inline:trivial] (self: t_List_T) = inv_List_T self
  
  meta "rewrite_def" predicate invariant_ref_List_T'0
  
  predicate inv_ref_List_T'0 [@inline:trivial] (_1: t_List_T) = invariant_ref_List_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_List_T'0
  
  function val_List_T (self: t_PermCellOwn_List_T) : t_List_T
  
  predicate invariant_PermCellOwn_List_T [@inline:trivial] (self: t_PermCellOwn_List_T) =
    inv_ref_List_T'0 (val_List_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_List_T
  
  predicate inv_PermCellOwn_List_T (_1: t_PermCellOwn_List_T)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PermCellOwn_List_T [inv_PermCellOwn_List_T x]. inv_PermCellOwn_List_T x
      = invariant_PermCellOwn_List_T x
  
  predicate invariant_Ghost_PermCellOwn_List_T [@inline:trivial] (self: t_PermCellOwn_List_T) =
    inv_PermCellOwn_List_T self
  
  meta "rewrite_def" predicate invariant_Ghost_PermCellOwn_List_T
  
  predicate inv_Ghost_PermCellOwn_List_T [@inline:trivial] (_1: t_PermCellOwn_List_T) =
    invariant_Ghost_PermCellOwn_List_T _1
  
  meta "rewrite_def" predicate inv_Ghost_PermCellOwn_List_T
  
  predicate invariant_ref_Ghost_PermCellOwn_List_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_List_T) =
    inv_Ghost_PermCellOwn_List_T self.current /\ inv_Ghost_PermCellOwn_List_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_PermCellOwn_List_T
  
  predicate inv_ref_Ghost_PermCellOwn_List_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_List_T) =
    invariant_ref_Ghost_PermCellOwn_List_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_PermCellOwn_List_T
  
  predicate invariant_ref_PermCellOwn_List_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_List_T) =
    inv_PermCellOwn_List_T self.current /\ inv_PermCellOwn_List_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_List_T
  
  predicate inv_ref_PermCellOwn_List_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_List_T) =
    invariant_ref_PermCellOwn_List_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_List_T
  
  predicate invariant_Ghost_ref_PermCellOwn_List_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_List_T) =
    inv_ref_PermCellOwn_List_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PermCellOwn_List_T
  
  predicate inv_Ghost_ref_PermCellOwn_List_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_List_T) =
    invariant_Ghost_ref_PermCellOwn_List_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PermCellOwn_List_T
  
  let rec borrow_mut_PermCellOwn_List_T (self: MutBorrow.t t_PermCellOwn_List_T)
    (return (x: MutBorrow.t t_PermCellOwn_List_T)) =
    {[@expl:borrow_mut 'self' type invariant] inv_ref_Ghost_PermCellOwn_List_T self}
    any
    [ return (result: MutBorrow.t t_PermCellOwn_List_T) -> {inv_Ghost_ref_PermCellOwn_List_T result}
      {result = self}
      (! return {result}) ]
  
  type t_Id
  
  function id_List_T (self: t_PermCell_List_T) : t_Id
  
  function id_List_T'0 (self: t_PermCellOwn_List_T) : t_Id
  
  function fin_Ghost_ref_PermCellOwn_List_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_List_T) : t_PermCellOwn_List_T
   = self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PermCellOwn_List_T
  
  function view_PermCellOwn_List_T [@inline:trivial] (self: t_PermCellOwn_List_T) : t_List_T = val_List_T self
  
  meta "rewrite_def" function view_PermCellOwn_List_T
  
  let rec borrow_mut_List_T (self: t_PermCell_List_T) (perm: MutBorrow.t t_PermCellOwn_List_T)
    (return (x: MutBorrow.t t_List_T)) =
    {[@expl:borrow_mut 'perm' type invariant] inv_Ghost_ref_PermCellOwn_List_T perm}
    {[@expl:borrow_mut requires] id_List_T self = id_List_T'0 perm.current}
    any
    [ return (result: MutBorrow.t t_List_T) -> {inv_ref_List_T result}
      {id_List_T self = id_List_T'0 (fin_Ghost_ref_PermCellOwn_List_T perm)}
      {result.current = view_PermCellOwn_List_T perm.current}
      {result.final = view_PermCellOwn_List_T (fin_Ghost_ref_PermCellOwn_List_T perm)}
      (! return {result}) ]
  
  predicate resolve_ref_List_T'0 [@inline:trivial] (_1: t_List_T) = true
  
  meta "rewrite_def" predicate resolve_ref_List_T'0
  
  predicate resolve_PermCellOwn_List_T [@inline:trivial] (self: t_PermCellOwn_List_T) =
    resolve_ref_List_T'0 (val_List_T self)
  
  meta "rewrite_def" predicate resolve_PermCellOwn_List_T
  
  predicate resolve_PermCellOwn_List_T'0 (_1: t_PermCellOwn_List_T)
  
  axiom resolve_axiom'0: forall x: t_PermCellOwn_List_T [resolve_PermCellOwn_List_T'0 x]. resolve_PermCellOwn_List_T'0 x
      -> resolve_PermCellOwn_List_T x
  
  predicate resolve_Ghost_PermCellOwn_List_T [@inline:trivial] (_1: t_PermCellOwn_List_T) =
    resolve_PermCellOwn_List_T'0 _1
  
  meta "rewrite_def" predicate resolve_Ghost_PermCellOwn_List_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo_T (self: MutBorrow.t t_List_T) (perm: t_PermCellOwn_List_T) (return (x: ())) =
    {[@expl:foo 'self' type invariant] inv_ref_List_T self}
    {[@expl:foo 'perm' type invariant] inv_Ghost_PermCellOwn_List_T perm}
    {[@expl:foo requires] false}
    (! bb0
    [ bb0 = s0 [ s0 = [ &p <- self ] s1 | s1 = bb2 ]
    | bb2 = bb2
      [ bb2 = (! s0
        [ s0 = is_none_Node_T {p.current.head} (fun (_ret: bool) -> [ &_7 <- _ret ] s1) | s1 = bb3 ])
        [ bb3 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb4) ]
        | bb5 = s0
          [ s0 = {inv_Option_Node_T p.current.head}
            MutBorrow.borrow_final <t_Option_Node_T> {p.current.head} {MutBorrow.inherit_id (MutBorrow.get_id p) 1}
              (fun (_ret: MutBorrow.t t_Option_Node_T) ->
                [ &_11 <- _ret ] -{inv_Option_Node_T _ret.final}-
                [ &p <- { p with current = { head = _ret.final } } ] s1)
          | s1 = take_Node_T {_11} (fun (_ret: t_Option_Node_T) -> [ &_10 <- _ret ] s2)
          | s2 = bb6 ]
        | bb6 = s0
          [ s0 = {[@expl:type invariant] inv_ref_List_T p} s1
          | s1 = -{resolve_ref_List_T p}- s2
          | s2 = unwrap_Node_T {_10} (fun (_ret: t_Node_T) -> [ &curr <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = {[@expl:type invariant] inv_Node_T curr} s1
          | s1 = -{resolve_Node_T curr}- s2
          | s2 = clone_Rc_PermCell_List_T_Global {curr.next}
              (fun (_ret: t_Rc_PermCell_List_T_Global) -> [ &_12 <- _ret ] s3)
          | s3 = bb9 ]
        | bb9 = s0 [ s0 = [ &next'0 <- _12 ] s1 | s1 = bb11 ]
        | bb11 = s0
          [ s0 = {[@expl:type invariant] inv_Rc_PermCell_List_T_Global next'0} s1
          | s1 = -{resolve_Rc_PermCell_List_T_Global next'0}- s2
          | s2 = as_ref_Rc_PermCell_List_T_Global {next'0} (fun (_ret: t_PermCell_List_T) -> [ &_17 <- _ret ] s3)
          | s3 = bb12 ]
        | bb12 = s0
          [ s0 = {inv_Ghost_PermCellOwn_List_T perm}
            MutBorrow.borrow_mut <t_PermCellOwn_List_T> {perm}
              (fun (_ret: MutBorrow.t t_PermCellOwn_List_T) ->
                [ &_20 <- _ret ] -{inv_Ghost_PermCellOwn_List_T _ret.final}-
                [ &perm <- _ret.final ] s1)
          | s1 = borrow_mut_PermCellOwn_List_T {_20}
              (fun (_ret: MutBorrow.t t_PermCellOwn_List_T) -> [ &_19 <- _ret ] s2)
          | s2 = bb13 ]
        | bb13 = s0
          [ s0 = borrow_mut_List_T {_17} {_19} (fun (_ret: MutBorrow.t t_List_T) -> [ &_15 <- _ret ] s1) | s1 = bb14 ]
        | bb14 = s0
          [ s0 = {inv_List_T _15.current}
            MutBorrow.borrow_final <t_List_T> {_15.current} {MutBorrow.get_id _15}
              (fun (_ret: MutBorrow.t t_List_T) ->
                [ &_14 <- _ret ] -{inv_List_T _ret.final}-
                [ &_15 <- { _15 with current = _ret.final } ] s1)
          | s1 = [ &p <- _14 ] s2
          | s2 = {[@expl:type invariant] inv_ref_List_T _15} s3
          | s3 = -{resolve_ref_List_T _15}- s4
          | s4 = bb2 ] ] ]
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv_ref_List_T p} s1
      | s1 = -{resolve_ref_List_T p}- s2
      | s2 = {[@expl:type invariant] inv_Ghost_PermCellOwn_List_T perm} s3
      | s3 = -{resolve_Ghost_PermCellOwn_List_T perm}- s4
      | s4 = bb16 ]
    | bb16 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_List_T = self
    | & perm: t_PermCellOwn_List_T = perm
    | & p: MutBorrow.t t_List_T = Any.any_l ()
    | & next'0: t_Rc_PermCell_List_T_Global = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & curr: t_Node_T = Any.any_l ()
    | & _10: t_Option_Node_T = Any.any_l ()
    | & _11: MutBorrow.t t_Option_Node_T = Any.any_l ()
    | & _12: t_Rc_PermCell_List_T_Global = Any.any_l ()
    | & _14: MutBorrow.t t_List_T = Any.any_l ()
    | & _15: MutBorrow.t t_List_T = Any.any_l ()
    | & _17: t_PermCell_List_T = Any.any_l ()
    | & _19: MutBorrow.t t_PermCellOwn_List_T = Any.any_l ()
    | & _20: MutBorrow.t t_PermCellOwn_List_T = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
