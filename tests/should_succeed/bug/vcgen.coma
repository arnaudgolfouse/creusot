module M_vcgen__set_max
  use set.Fset
  use mach.int.Int
  
  predicate contains [@inline:trivial] (self: Fset.fset int) (e: int) = Fset.mem e self
  
  meta "rewrite_def" predicate contains
  
  function remove [@inline:trivial] (self: Fset.fset int) (e: int) : Fset.fset int = Fset.remove e self
  
  meta "rewrite_def" function remove
  
  predicate well_founded_relation [@inline:trivial] (self: int) (other: int) = self >= 0 /\ self > other
  
  meta "rewrite_def" predicate well_founded_relation
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant s : Fset.fset int
  
  function set_max (s: Fset.fset int) : int
  
  goal vc_set_max: not Fset.is_empty s
    -> (let x = Fset.pick s in let s'0 = remove s x in if Fset.is_empty s'0 then
      let result = x in ([@expl:set_max ensures #0] contains s result)
      && ([@expl:set_max ensures #1] forall o: int. contains s o -> o <= result)
    else
      (([@expl:set_max requires] not Fset.is_empty s'0) /\ well_founded_relation (Fset.cardinal s) (Fset.cardinal s'0))
      /\ (contains s'0 (set_max s'0) && (forall o: int. contains s'0 o -> o <= set_max s'0)
      -> (let rec' = set_max s'0 in if x >= rec' then
        let result = x in ([@expl:set_max ensures #0] contains s result)
        && ([@expl:set_max ensures #1] forall o: int. contains s o -> o <= result)
      else
        let result = rec' in ([@expl:set_max ensures #0] contains s result)
        && ([@expl:set_max ensures #1] forall o: int. contains s o -> o <= result)
      ))
    )
end
