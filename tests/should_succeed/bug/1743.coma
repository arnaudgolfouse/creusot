module M_1743__qyi7570507176118332595__minimize [#"1743.rs" 12 4 12 30] (* S *)
  let%span s1743 = "1743.rs" 14 20 14 41
  let%span s1743'0 = "1743.rs" 12 25 12 29
  let%span s1743'1 = "1743.rs" 10 15 10 36
  let%span s1743'2 = "1743.rs" 11 15 11 42
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 80 14 80 18
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 80 4 80 36
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 78 14 78 31
  let%span sghost'2 = "../../../creusot-contracts/src/ghost.rs" 181 15 181 16
  let%span sghost'3 = "../../../creusot-contracts/src/ghost.rs" 181 4 183 17
  let%span sghost'4 = "../../../creusot-contracts/src/ghost.rs" 179 14 179 26
  let%span sghost'5 = "../../../creusot-contracts/src/ghost.rs" 118 8 118 18
  let%span sptr_own = "../../../creusot-contracts/src/ghost/ptr_own.rs" 138 40 138 43
  let%span sptr_own'0 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 134 15 134 31
  let%span sptr_own'1 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 135 14 135 35
  let%span sptr_own'2 = "../../../creusot-contracts/src/ghost/ptr_own.rs" 44 4 44 26
  let%span smodel = "../../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  let%span sinvariant'0 = "../../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sptr = "../../../creusot-contracts/src/std/ptr.rs" 129 8 129 35
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.Int32
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: Int32.t }
  
  type t_S = { t_S__perm: t_PtrOwn; t_S__ptr: Opaque.ptr }
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr] Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches (_value: Int32.t) (_metadata: ()) = true
  
  function val' (self: t_PtrOwn) : Int32.t
  
  function metadata_logic (_0: Opaque.ptr) : ()
  
  predicate invariant' [@inline:trivial] (self: t_PtrOwn) =
    [%#sptr_own'2] not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self /\ metadata_matches (val' self) (metadata_logic (ptr self))
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv (_0: t_PtrOwn)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> true
        end)
  
  predicate invariant''0 [@inline:trivial] (self: t_PtrOwn) = [%#sghost'5] inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 (_0: t_PtrOwn)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate inv'1 (_0: t_S)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_S [inv'1 x]. inv'1 x
      = match x with
        | {t_S__perm = perm; t_S__ptr = ptr'0} -> inv'0 perm
        end
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_S) =
    [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'2 (_0: MutBorrow.t t_S)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_S [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_S) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_S) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate invariant''2 [@inline:trivial] (self: t_PtrOwn) = [%#sinvariant'0] inv'0 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x = invariant''2 x
  
  predicate invariant''3 [@inline:trivial] (self: t_PtrOwn) = [%#sinvariant'0] inv self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 (_0: t_PtrOwn)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_PtrOwn [inv'4 x]. inv'4 x = invariant''3 x
  
  let rec deref (self: t_PtrOwn) (return' (x: t_PtrOwn)) = {[@expl:deref 'self' type invariant] [%#sghost] inv'3 self}
    any
    [ return''0 (result: t_PtrOwn) -> {[%#sghost'0] inv'4 result} {[%#sghost'1] result = self} (! return' {result}) ]
  
  predicate invariant''4 [@inline:trivial] (self: t_PtrOwn) = [%#sghost'5] inv'4 self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 (_0: t_PtrOwn)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_PtrOwn [inv'5 x]. inv'5 x = invariant''4 x
  
  let rec new (x: t_PtrOwn) (return' (x'0: t_PtrOwn)) = {[@expl:new 'x' type invariant] [%#sghost'2] inv'4 x}
    any [ return''0 (result: t_PtrOwn) -> {[%#sghost'3] inv'5 result} {[%#sghost'4] result = x} (! return' {result}) ]
  
  let rec as_ref (ptr'0: Opaque.ptr) (own: t_PtrOwn) (return' (x: Int32.t)) =
    {[@expl:as_ref 'own' type invariant] [%#sptr_own] inv'5 own}
    {[@expl:as_ref requires] [%#sptr_own'0] ptr'0 = ptr own}
    any [ return''0 (result: Int32.t) -> {[%#sptr_own'1] result = val' own} (! return' {result}) ]
  
  function view [@inline:trivial] (self: Int32.t) : int = [%#smodel] Int32.to_int self
  
  meta "rewrite_def" function view
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec minimize [#"1743.rs" 12 4 12 30] (self: MutBorrow.t t_S) (return' (x: ())) =
    {[@expl:minimize 'self' type invariant] [%#s1743'0] inv'2 self}
    {[@expl:minimize requires #0] [%#s1743'1] view (val' (self.current).t_S__perm) = 1}
    {[@expl:minimize requires #1] [%#s1743'2] ptr (self.current).t_S__perm = (self.current).t_S__ptr}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'2 self'0} s1
      | s1 = -{resolve'0 self'0}- s2
      | s2 = deref {(self'0.current).t_S__perm} (fun (_ret: t_PtrOwn) -> [ &_9 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = [ &_8 <- _9 ] s1 | s1 = new {_8} (fun (_ret: t_PtrOwn) -> [ &_6 <- _ret ] s2) | s2 = bb2 ]
    | bb2 = s0 [ s0 = as_ref {(self'0.current).t_S__ptr} {_6} (fun (_ret: Int32.t) -> [ &r <- _ret ] s1) | s1 = bb4 ]
    | bb4 = bb4'0
      [ bb4'0 = {[@expl:loop invariant] [%#s1743] 0 <= view (val' (self'0.current).t_S__perm)} (! s0) [ s0 = bb4'0 ] ] ]
    [ & self'0: MutBorrow.t t_S = self
    | & r: Int32.t = Any.any_l ()
    | & _6: t_PtrOwn = Any.any_l ()
    | & _8: t_PtrOwn = Any.any_l ()
    | & _9: t_PtrOwn = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
