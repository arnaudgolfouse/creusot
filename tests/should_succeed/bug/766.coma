module M_766__Trait__goo
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Self
  
  predicate inv (_1: t_Self)
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Self) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: MutBorrow.t t_Self)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_Self [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_Self)
  
  axiom precondition_fndef: forall args: MutBorrow.t t_Self [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  type t_FMap
  
  function deep_model (self: t_Self) : t_FMap
  
  function deep_model'0 [@inline:trivial] (self: MutBorrow.t t_Self) : t_FMap = deep_model self.current
  
  meta "rewrite_def" function deep_model'0
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_Self) (result: ())
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_Self, res: () [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in deep_model'0 self = deep_model'0 self)
  
  let rec f (self: MutBorrow.t t_Self) (return (x: ())) = {[@expl:f requires] precondition () self}
    any [ return' (result: ()) -> {postcondition_once () self result} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Self) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Self) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate precondition'0 (self: ()) (args: MutBorrow.t t_Self)
  
  axiom precondition_fndef'0: forall args: MutBorrow.t t_Self [precondition'0 () args]. (let self = args in inv'0 self)
      -> precondition'0 () args
  
  predicate postcondition_once'0 (self: ()) (args: MutBorrow.t t_Self) (result: ())
  
  axiom postcondition_fndef'0:
    forall args: MutBorrow.t t_Self, res: () [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let self = args in true)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec goo (self: MutBorrow.t t_Self) (return (x: ())) = {[@expl:goo 'self' type invariant] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv self.current}
        MutBorrow.borrow_final <t_Self> {self.current} {MutBorrow.get_id self}
          (fun (_ret: MutBorrow.t t_Self) ->
            [ &_2 <- _ret ] -{inv _ret.final}-
            [ &self <- { self with current = _ret.final } ] s1)
      | s1 = f {_2} (fun (_ret: ()) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & self: MutBorrow.t t_Self = self | & _2: MutBorrow.t t_Self = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
