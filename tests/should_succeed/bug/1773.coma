module M_1773__qyi4955777472957043900__f (* <S as Tr<45>> *)
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_1773__qyi4955777472957043900__g (* <S as Tr<45>> *)
  use creusot.slice.Slice64
  use creusot.int.UInt64
  use seq.Seq
  use creusot.prelude.Any
  
  let rec len (self_: Slice64.slice UInt64.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {Seq.length (Slice64.view self_) = UInt64.t'int result} (! return {result}) ]
  
  predicate inv [@inline:trivial] (_1: Seq.seq UInt64.t) = true
  
  meta "rewrite_def" predicate inv
  
  predicate invariant' (self: Slice64.array UInt64.t) =
    inv (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (45: UInt64.t)
  
  predicate inv'0 [@inline:trivial] (_1: Slice64.array UInt64.t) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g (x: Slice64.array UInt64.t) (return (x'0: UInt64.t)) = {[@expl:g 'x' type invariant] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 = len {x} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: UInt64.t = Any.any_l () | & x: Slice64.array UInt64.t = x ])
    [ return (result: UInt64.t) -> (! return {result}) ]
end
module M_1773__qyi4955777472957043900__g__refines (* <S as Tr<45>> *)
  use creusot.slice.Slice64
  use creusot.int.UInt64
  use seq.Seq
  
  predicate inv [@inline:trivial] (_1: Seq.seq UInt64.t) = true
  
  meta "rewrite_def" predicate inv
  
  predicate invariant' (self: Slice64.array UInt64.t) =
    inv (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (45: UInt64.t)
  
  predicate inv'0 [@inline:trivial] (_1: Slice64.array UInt64.t) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall x: Slice64.array UInt64.t. inv'0 x -> inv'0 x
end
