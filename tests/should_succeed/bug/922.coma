module M_922__g
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { f0: Int32.t; f1: MutBorrow.t Int32.t }
  
  type tuple'0 = { f0'0: tuple; f1'0: Int32.t }
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: tuple) = resolve _1.f1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: tuple'0) = resolve'0 _1.f0'0
  
  meta "rewrite_def" predicate resolve'1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g (x: tuple'0) (return (x'0: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <Int32.t> {x.f0'0.f1.current} {MutBorrow.get_id x.f0'0.f1}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_4 <- _ret ] [ &x <- { x with f0'0 = { x.f0'0 with f1 = { x.f0'0.f1 with current = _ret.final } } } ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_4.current} {MutBorrow.get_id _4}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_4 <- { _4 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve _4}- s4
      | s4 = -{resolve _2}- s5
      | s5 = -{resolve'1 x}- s6
      | s6 = return {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x: tuple'0 = x
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: MutBorrow.t Int32.t) -> {[@expl:g ensures] result = x.f0'0.f1} (! return {result}) ]
end
module M_922__f1
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { f0: Int32.t; f1: MutBorrow.t Int32.t }
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t tuple) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f1'0 (b: MutBorrow.t tuple) (return (x: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {b.current.f1.current}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_6 <- _ret ]
            [ &b <- { b with current = { b.current with f1 = { b.current.f1 with current = _ret.final } } } ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve _6}- s4
      | s4 = -{resolve _2}- s5
      | s5 = -{resolve'0 b}- s6
      | s6 = return {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & b: MutBorrow.t tuple = b
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: MutBorrow.t Int32.t) -> {[@expl:f1 ensures #0] result.current = b.current.f1.current}
      {[@expl:f1 ensures #1] result.final = b.final.f1.current}
      {[@expl:f1 ensures #2] b.current.f1.final = b.final.f1.final}
      (! return {result}) ]
end
module M_922__f2
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { f0: Int32.t; f1: MutBorrow.t Int32.t }
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t tuple) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f2 (x0: MutBorrow.t tuple) (return (x: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {x0.current.f1.current}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_6 <- _ret ]
            [ &x0 <- { x0 with current = { x0.current with f1 = { x0.current.f1 with current = _ret.final } } } ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve _6}- s4
      | s4 = -{resolve _2}- s5
      | s5 = -{resolve'0 x0}- s6
      | s6 = return {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x0: MutBorrow.t tuple = x0
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: MutBorrow.t Int32.t) -> {[@expl:f2 ensures #0] result.current = x0.current.f1.current}
      {[@expl:f2 ensures #1] result.final = x0.final.f1.current}
      {[@expl:f2 ensures #2] x0.current.f1.final = x0.final.f1.final}
      (! return {result}) ]
end
module M_922__f3
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { f0: Int32.t; f1: MutBorrow.t Int32.t }
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t tuple) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f3 (x1: MutBorrow.t tuple) (return (x: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {x1.current.f1.current}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_6 <- _ret ]
            [ &x1 <- { x1 with current = { x1.current with f1 = { x1.current.f1 with current = _ret.final } } } ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve _6}- s4
      | s4 = -{resolve _2}- s5
      | s5 = -{resolve'0 x1}- s6
      | s6 = return {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x1: MutBorrow.t tuple = x1
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: MutBorrow.t Int32.t) -> {[@expl:f3 ensures #0] result.current = x1.current.f1.current}
      {[@expl:f3 ensures #1] result.final = x1.final.f1.current}
      {[@expl:f3 ensures #2] x1.current.f1.final = x1.final.f1.final}
      (! return {result}) ]
end
module M_922__f4
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { f0: Int32.t; f1: MutBorrow.t Int32.t }
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t tuple) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f4 (x2: MutBorrow.t tuple) (return (x: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {x2.current.f1.current}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_6 <- _ret ]
            [ &x2 <- { x2 with current = { x2.current with f1 = { x2.current.f1 with current = _ret.final } } } ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve _6}- s4
      | s4 = -{resolve _2}- s5
      | s5 = -{resolve'0 x2}- s6
      | s6 = return {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x2: MutBorrow.t tuple = x2
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: MutBorrow.t Int32.t) -> {[@expl:f4 ensures #0] result.current = x2.current.f1.current}
      {[@expl:f4 ensures #1] result.final = x2.final.f1.current}
      {[@expl:f4 ensures #2] x2.current.f1.final = x2.final.f1.final}
      (! return {result}) ]
end
