module M_922__g [#"922.rs" 5 0 5 57]
  let%span s922 = "922.rs" 4 0 4 27
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  let%span sresolve'0 = "../../../creusot-contracts/src/resolve.rs" 34 8 34 42
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { _p0: Int32.t; _p1: MutBorrow.t Int32.t }
  
  type tuple'0 = { _p0'0: tuple; _p1'0: Int32.t }
  
  predicate resolve (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) = resolve _0
  
  predicate resolve'1 (_0: Int32.t) = true
  
  predicate resolve'2 (self: tuple) = [%#sresolve'0] resolve'1 self._p0 /\ resolve'0 self._p1
  
  predicate resolve'3 (_0: tuple) = resolve'2 _0
  
  predicate resolve'4 (self: tuple'0) = [%#sresolve'0] resolve'3 self._p0'0 /\ resolve'1 self._p1'0
  
  predicate resolve'5 (_0: tuple'0) = resolve'4 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g [#"922.rs" 5 0 5 57] (x: tuple'0) (return' (x'0: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <Int32.t> {((x'0._p0'0)._p1).current} {MutBorrow.get_id (x'0._p0'0)._p1}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_4 <- _ret ]
            [ &x'0 <- { x'0 with _p0'0 = { x'0._p0'0 with _p1 = { (x'0._p0'0)._p1 with current = _ret.final } } } ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_4.current} {MutBorrow.get_id _4}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_4 <- { _4 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _4}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'5 x'0}- s6
      | s6 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x'0: tuple'0 = x
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: MutBorrow.t Int32.t = Any.any_l () ])
    [ return''0 (result: MutBorrow.t Int32.t) -> {[@expl:g ensures] [%#s922] result = (x._p0'0)._p1}
      (! return' {result}) ]
end
module M_922__f1 [#"922.rs" 12 0 12 59]
  let%span s922 = "922.rs" 9 10 9 28
  let%span s922'0 = "922.rs" 10 10 10 28
  let%span s922'1 = "922.rs" 11 10 11 28
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { _p0: Int32.t; _p1: MutBorrow.t Int32.t }
  
  predicate resolve (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t tuple) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t tuple) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f1 [#"922.rs" 12 0 12 59] (b: MutBorrow.t tuple) (return' (x: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {((b'0.current)._p1).current}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_6 <- _ret ]
            [ &b'0 <- { b'0 with current = { b'0.current with _p1 = { (b'0.current)._p1 with current = _ret.final } } } ]
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'2 b'0}- s6
      | s6 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & b'0: MutBorrow.t tuple = b
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return''0 (result: MutBorrow.t Int32.t) -> {[@expl:f1 ensures #0] [%#s922] result.current
      = ((b.current)._p1).current}
      {[@expl:f1 ensures #1] [%#s922'0] result.final = ((b.final)._p1).current}
      {[@expl:f1 ensures #2] [%#s922'1] ((b.current)._p1).final = ((b.final)._p1).final}
      (! return' {result}) ]
end
module M_922__f2 [#"922.rs" 19 0 19 60]
  let%span s922 = "922.rs" 16 10 16 29
  let%span s922'0 = "922.rs" 17 10 17 29
  let%span s922'1 = "922.rs" 18 10 18 30
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { _p0: Int32.t; _p1: MutBorrow.t Int32.t }
  
  predicate resolve (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t tuple) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t tuple) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f2 [#"922.rs" 19 0 19 60] (x0: MutBorrow.t tuple) (return' (x: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {((x0'0.current)._p1).current}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_6 <- _ret ]
            [ &x0'0 <- { x0'0 with current = { x0'0.current with _p1 = { (x0'0.current)._p1 with current = _ret.final } } } ]
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'2 x0'0}- s6
      | s6 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x0'0: MutBorrow.t tuple = x0
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return''0 (result: MutBorrow.t Int32.t) -> {[@expl:f2 ensures #0] [%#s922] result.current
      = ((x0.current)._p1).current}
      {[@expl:f2 ensures #1] [%#s922'0] result.final = ((x0.final)._p1).current}
      {[@expl:f2 ensures #2] [%#s922'1] ((x0.current)._p1).final = ((x0.final)._p1).final}
      (! return' {result}) ]
end
module M_922__f3 [#"922.rs" 26 0 26 60]
  let%span s922 = "922.rs" 23 10 23 29
  let%span s922'0 = "922.rs" 24 10 24 29
  let%span s922'1 = "922.rs" 25 10 25 30
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { _p0: Int32.t; _p1: MutBorrow.t Int32.t }
  
  predicate resolve (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t tuple) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t tuple) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f3 [#"922.rs" 26 0 26 60] (x1: MutBorrow.t tuple) (return' (x: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {((x1'0.current)._p1).current}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_6 <- _ret ]
            [ &x1'0 <- { x1'0 with current = { x1'0.current with _p1 = { (x1'0.current)._p1 with current = _ret.final } } } ]
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'2 x1'0}- s6
      | s6 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x1'0: MutBorrow.t tuple = x1
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return''0 (result: MutBorrow.t Int32.t) -> {[@expl:f3 ensures #0] [%#s922] result.current
      = ((x1.current)._p1).current}
      {[@expl:f3 ensures #1] [%#s922'0] result.final = ((x1.final)._p1).current}
      {[@expl:f3 ensures #2] [%#s922'1] ((x1.current)._p1).final = ((x1.final)._p1).final}
      (! return' {result}) ]
end
module M_922__f4 [#"922.rs" 33 0 33 60]
  let%span s922 = "922.rs" 30 10 30 29
  let%span s922'0 = "922.rs" 31 10 31 29
  let%span s922'1 = "922.rs" 32 10 32 30
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { _p0: Int32.t; _p1: MutBorrow.t Int32.t }
  
  predicate resolve (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t tuple) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t tuple) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f4 [#"922.rs" 33 0 33 60] (x2: MutBorrow.t tuple) (return' (x: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {((x2'0.current)._p1).current}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &_6 <- _ret ]
            [ &x2'0 <- { x2'0 with current = { x2'0.current with _p1 = { (x2'0.current)._p1 with current = _ret.final } } } ]
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'2 x2'0}- s6
      | s6 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x2'0: MutBorrow.t tuple = x2
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return''0 (result: MutBorrow.t Int32.t) -> {[@expl:f4 ensures #0] [%#s922] result.current
      = ((x2.current)._p1).current}
      {[@expl:f4 ensures #1] [%#s922'0] result.final = ((x2.final)._p1).current}
      {[@expl:f4 ensures #2] [%#s922'1] ((x2.current)._p1).final = ((x2.final)._p1).final}
      (! return' {result}) ]
end
