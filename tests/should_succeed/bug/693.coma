module M_693__f [#"693.rs" 3 0 3 21]
  use creusot.prelude.Any
  
  type t_IfC
  
  predicate inv (_0: t_IfC)
  
  predicate resolve (_0: t_IfC)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f[#"693.rs" 3 0 3 21] (_0:t_IfC) (return'  (x:()))= {[@expl:f '_0' type invariant] inv _0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv _1} s1 | s1 = -{resolve _1}- s2 | s2 = bb1 ] 
    | bb1 = return''0 {_0'0} ]
     [ & _0'0: () = Any.any_l () | & _1: t_IfC = _0 ] ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_693__g [#"693.rs" 5 0 5 10]
  let%span s693 = "693.rs" 6 6 6 7
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec f (_0:Int32.t) (return'  (x:()))= any [ return''0 (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g[#"693.rs" 5 0 5 10] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = f {[%#s693] (0: Int32.t)} (fun (_ret:()) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = return''0 {_0} ]
     [ & _0: () = Any.any_l () ] ) [ return''0 (result:())-> (! return' {result}) ] 
end
