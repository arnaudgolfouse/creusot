module M_693__f
  use creusot.prelude.Any
  
  type t_IfC
  
  predicate inv (_0: t_IfC)
  
  predicate resolve (_0: t_IfC)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (_0: t_IfC) (return (x: ())) = {[@expl:f '_0' type invariant] inv _0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv _0} s1 | s1 = -{resolve _0}- s2 | s2 = bb1 ] | bb1 = return {_0'0} ]
    [ & _0'0: () = Any.any_l () | & _0: t_IfC = _0 ]) [ return (result: ()) -> (! return {result}) ]
end
module M_693__g
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec f (_0: Int32.t) (return (x: ())) = any [ return' (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = f {(0: Int32.t)} (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
