module M_apply_once
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv_F (_1: t_F)
  
  predicate precondition_F (self: t_F) (args: ())
  
  predicate postcondition_once_F (self: t_F) (args: ()) (result: ())
  
  let rec call_once_F (self_: t_F) (arg: ()) (return (x: ())) = {[@expl:call_once 'self_' type invariant] inv_F self_}
    {[@expl:call_once requires] precondition_F self_ arg}
    any [ return (result: ()) -> {postcondition_once_F self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec apply_once_F (f: t_F) (return (x: ())) = {[@expl:apply_once 'f' type invariant] inv_F f}
    {[@expl:apply_once requires] precondition_F f ()}
    (! bb0
    [ bb0 = s0 [ s0 = call_once_F {f} {_5} (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb2 ] | bb2 = return {_0} ]
    [ & _0: () = Any.any_l () | & f: t_F = f | & _5: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:apply_once ensures] postcondition_once_F f () ()} (! return {result}) ]
end
module M_apply_mut
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv_F (_1: t_F)
  
  predicate invariant_ref_F [@inline:trivial] (self: MutBorrow.t t_F) = inv_F self.current /\ inv_F self.final
  
  meta "rewrite_def" predicate invariant_ref_F
  
  predicate inv_ref_F [@inline:trivial] (_1: MutBorrow.t t_F) = invariant_ref_F _1
  
  meta "rewrite_def" predicate inv_ref_F
  
  predicate precondition_F (self: t_F) (args: ())
  
  predicate postcondition_once_F (self: t_F) (args: ()) (result: ())
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: ()) (result_state: t_F) (result: ())
  
  function fn_mut_once_F (self: t_F) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: (), res: (). postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: ()) (res_state: t_F) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: (), res_state: t_F, res: (). postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  let rec call_mut_F (self_: MutBorrow.t t_F) (arg: ()) (return (x: ())) =
    {[@expl:call_mut 'self_' type invariant] inv_ref_F self_}
    {[@expl:call_mut requires] precondition_F self_.current arg}
    any [ return (result: ()) -> {postcondition_mut_F self_.current arg self_.final result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec apply_mut_F (f: t_F) (return (x: ())) = {[@expl:apply_mut 'f' type invariant] inv_F f}
    {[@expl:apply_mut requires] precondition_F f ()}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_F f}
        MutBorrow.borrow_mut <t_F> {f}
          (fun (_ret: MutBorrow.t t_F) -> [ &_4 <- _ret ] -{inv_F _ret.final}- [ &f <- _ret.final ] s1)
      | s1 = call_mut_F {_4} {_5} (fun (_ret: ()) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv_F f} s1 | s1 = -{resolve_F f}- s2 | s2 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: () = Any.any_l () | & f: t_F = f | & _4: MutBorrow.t t_F = Any.any_l () | & _5: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:apply_mut ensures] exists g: t_F. postcondition_mut_F f () g () /\ resolve_F g}
      (! return {result}) ]
end
module M_foo1
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Range_i32 = { start: Int32.t; end': Int32.t }
  
  let rec into_iter_Range_i32 (self_: t_Range_i32) (return (x: t_Range_i32)) = any
    [ return (result: t_Range_i32) -> {result = self_} (! return {result}) ]
  
  function deep_model_i32 [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model_i32
  
  predicate produces_Range_i32 (self: t_Range_i32) (visited: Seq.seq Int32.t) (o: t_Range_i32) =
    self.end' = o.end'
    /\ deep_model_i32 self.start <= deep_model_i32 o.start
    /\ (Seq.length visited > 0 -> deep_model_i32 o.start <= deep_model_i32 o.end')
    /\ Seq.length visited = deep_model_i32 o.start - deep_model_i32 self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_i32 (Seq.get visited i) = deep_model_i32 self.start + i)
  
  function produces_trans_Range_i32 (a: t_Range_i32) (ab: Seq.seq Int32.t) (b: t_Range_i32) (bc: Seq.seq Int32.t) (c: t_Range_i32) : ()
  
  axiom produces_trans_Range_i32_spec:
    forall a: t_Range_i32, ab: Seq.seq Int32.t, b: t_Range_i32, bc: Seq.seq Int32.t, c: t_Range_i32. produces_Range_i32 a ab b
      -> produces_Range_i32 b bc c -> produces_Range_i32 a (Seq.(++) ab bc) c
  
  function produces_refl_Range_i32 (self: t_Range_i32) : ()
  
  axiom produces_refl_Range_i32_spec:
    forall self: t_Range_i32. produces_Range_i32 self (Seq.empty: Seq.seq Int32.t) self
  
  predicate inv_Range_i32 [@inline:trivial] (_1: t_Range_i32) = true
  
  meta "rewrite_def" predicate inv_Range_i32
  
  predicate inv_Seq_i32 [@inline:trivial] (_1: Seq.seq Int32.t) = true
  
  meta "rewrite_def" predicate inv_Seq_i32
  
  type t_Option_i32 = None | Some Int32.t
  
  predicate resolve_ref_Range_i32 [@inline:trivial] (_1: MutBorrow.t t_Range_i32) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_i32
  
  predicate completed_Range_i32 (self: MutBorrow.t t_Range_i32) =
    resolve_ref_Range_i32 self /\ deep_model_i32 self.current.start >= deep_model_i32 self.current.end'
  
  let rec next_Range_i32 (self_: MutBorrow.t t_Range_i32) (return (x: t_Option_i32)) = any
    [ return (result: t_Option_i32) -> {match result with
        | None -> completed_Range_i32 self_
        | Some v -> produces_Range_i32 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_i32) (ret (f0: Int32.t)) = any
    [ good (f0: Int32.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: Int32.t [Some f0: t_Option_i32]. Some f0 <> input} (! {false} any) ]
  
  type closure10 = { c0: MutBorrow.t Int32.t }
  
  predicate resolve_ref_closure10 [@inline:trivial] (_1: MutBorrow.t closure10) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure10
  
  predicate postcondition_once_closure10 [@inline:trivial] (self: closure10) (args: ()) (result: ()) =
    Int32.to_int self.c0.current + 1 = Int32.to_int self.c0.final
  
  meta "rewrite_def" predicate postcondition_once_closure10
  
  predicate resolve_ref_i32 [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_i32
  
  predicate resolve_closure10 [@inline:trivial] (_1: closure10) = resolve_ref_i32 _1.c0
  
  meta "rewrite_def" predicate resolve_closure10
  
  predicate hist_inv_closure10 [@inline:trivial] (self: closure10) (result_state: closure10) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure10
  
  predicate postcondition_mut_closure10 [@inline:trivial] (self: closure10) (args: ()) (result_state: closure10) (result: ()) =
    Int32.to_int self.c0.current + 1 = Int32.to_int result_state.c0.current /\ hist_inv_closure10 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure10
  
  function fn_mut_once_closure10 (self: closure10) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_closure10_spec:
    forall self: closure10, args: (), res: (). postcondition_once_closure10 self args res
      = (exists res_state: closure10. postcondition_mut_closure10 self args res_state res
        /\ resolve_closure10 res_state)
  
  function hist_inv_trans_closure10 (self: closure10) (b: closure10) (c: closure10) : ()
  
  axiom hist_inv_trans_closure10_spec: forall self: closure10, b: closure10, c: closure10. hist_inv_closure10 self b
      -> hist_inv_closure10 b c -> hist_inv_closure10 self c
  
  function hist_inv_refl_closure10 (self: closure10) : ()
  
  axiom hist_inv_refl_closure10_spec: forall self: closure10. hist_inv_closure10 self self
  
  function postcondition_mut_hist_inv_closure10 (self: closure10) (args: ()) (res_state: closure10) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_closure10_spec:
    forall self: closure10, args: (), res_state: closure10, res: (). postcondition_mut_closure10 self args res_state res
      -> hist_inv_closure10 self res_state
  
  let rec closure10 (self: MutBorrow.t closure10) (return (x: ())) =
    {[@expl:closure requires] Int32.to_int self.current.c0.current < 42}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {self.current.c0.current} {(1: Int32.t)}
          (fun (_ret: Int32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve_ref_closure10 self}- s2
      | s2 = return {_0} ] ] [ & _0: () = Any.any_l () | & self: MutBorrow.t closure10 = self ])
    [ return (result: ()) -> {[@expl:closure ensures] Int32.to_int self.current.c0.current + 1
      = Int32.to_int self.final.c0.current}
      {[@expl:closure hist_inv post] hist_inv_closure10 self.current self.final}
      (! return {result}) ]
  
  predicate precondition_closure10 [@inline:trivial] (self: closure10) (args: ()) = Int32.to_int self.c0.current < 42
  
  meta "rewrite_def" predicate precondition_closure10
  
  let rec apply_mut_closure10 (f: closure10) (return (x: ())) = {[@expl:apply_mut requires] precondition_closure10 f ()}
    any
    [ return (result: ()) -> {exists g: closure10. postcondition_mut_closure10 f () g () /\ resolve_closure10 g}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo1 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (13: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &r <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = [ &snap_r <- r ] s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = Int32.sub {(42: Int32.t)} {(13: Int32.t)} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1)
      | s1 = [ &_7 <- { start = (0: Int32.t); end' = _8 } ] s2
      | s2 = into_iter_Range_i32 {_7} (fun (_ret: t_Range_i32) -> [ &iter <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq Int32.t ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &old_5_0 <- r ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:mut invariant] old_5_0.final = r.final}
        {[@expl:for invariant] inv_Seq_i32 produced}
        {[@expl:for invariant] inv_Range_i32 iter}
        {[@expl:for invariant] produces_Range_i32 iter_old produced iter}
        {[@expl:loop invariant #0] Int32.to_int r.current = 13 + Seq.length produced}
        {[@expl:loop invariant #1] snap_r.final = r.final}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_i32> {iter}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_22 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_i32> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_21 <- _ret ] [ &_22 <- { _22 with current = _ret.final } ] s2)
          | s2 = next_Range_i32 {_21} (fun (_ret: t_Option_i32) -> [ &_20 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve_ref_Range_i32 _22}- s1
          | s1 = any [ br0 -> {_20 = None} (! bb10) | br1 (x0: Int32.t) -> {_20 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_20} (fun (r0: Int32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_25 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _25 ] s1
          | s1 = MutBorrow.borrow_mut <Int32.t> {r.current}
              (fun (_ret: MutBorrow.t Int32.t) -> [ &_29 <- _ret ] [ &r <- { r with current = _ret.final } ] s2)
          | s2 = [ &_28 <- { c0 = _29 } ] s3
          | s3 = apply_mut_closure10 {_28} (fun (_ret: ()) -> [ &_27 <- _ret ] s4)
          | s4 = bb5 ] ] ]
    | bb10 = s0 [ s0 = -{resolve_ref_i32 r}- s1 | s1 = {[@expl:assertion] Int32.to_int x = 42} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & r: MutBorrow.t Int32.t = Any.any_l ()
    | & snap_r: MutBorrow.t Int32.t = Any.any_l ()
    | & iter: t_Range_i32 = Any.any_l ()
    | & _7: t_Range_i32 = Any.any_l ()
    | & _8: Int32.t = Any.any_l ()
    | & iter_old: t_Range_i32 = Any.any_l ()
    | & produced: Seq.seq Int32.t = Any.any_l ()
    | & _20: t_Option_i32 = Any.any_l ()
    | & _21: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & _22: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & __creusot_proc_iter_elem: Int32.t = Any.any_l ()
    | & _25: Seq.seq Int32.t = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: closure10 = Any.any_l ()
    | & _29: MutBorrow.t Int32.t = Any.any_l ()
    | & old_5_0: MutBorrow.t Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_foo2
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Range_i32 = { start: Int32.t; end': Int32.t }
  
  let rec into_iter_Range_i32 (self_: t_Range_i32) (return (x: t_Range_i32)) = any
    [ return (result: t_Range_i32) -> {result = self_} (! return {result}) ]
  
  function deep_model_i32 [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model_i32
  
  predicate produces_Range_i32 (self: t_Range_i32) (visited: Seq.seq Int32.t) (o: t_Range_i32) =
    self.end' = o.end'
    /\ deep_model_i32 self.start <= deep_model_i32 o.start
    /\ (Seq.length visited > 0 -> deep_model_i32 o.start <= deep_model_i32 o.end')
    /\ Seq.length visited = deep_model_i32 o.start - deep_model_i32 self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_i32 (Seq.get visited i) = deep_model_i32 self.start + i)
  
  function produces_trans_Range_i32 (a: t_Range_i32) (ab: Seq.seq Int32.t) (b: t_Range_i32) (bc: Seq.seq Int32.t) (c: t_Range_i32) : ()
  
  axiom produces_trans_Range_i32_spec:
    forall a: t_Range_i32, ab: Seq.seq Int32.t, b: t_Range_i32, bc: Seq.seq Int32.t, c: t_Range_i32. produces_Range_i32 a ab b
      -> produces_Range_i32 b bc c -> produces_Range_i32 a (Seq.(++) ab bc) c
  
  function produces_refl_Range_i32 (self: t_Range_i32) : ()
  
  axiom produces_refl_Range_i32_spec:
    forall self: t_Range_i32. produces_Range_i32 self (Seq.empty: Seq.seq Int32.t) self
  
  predicate inv_Range_i32 [@inline:trivial] (_1: t_Range_i32) = true
  
  meta "rewrite_def" predicate inv_Range_i32
  
  predicate inv_Seq_i32 [@inline:trivial] (_1: Seq.seq Int32.t) = true
  
  meta "rewrite_def" predicate inv_Seq_i32
  
  type t_Option_i32 = None | Some Int32.t
  
  predicate resolve_ref_Range_i32 [@inline:trivial] (_1: MutBorrow.t t_Range_i32) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_i32
  
  predicate completed_Range_i32 (self: MutBorrow.t t_Range_i32) =
    resolve_ref_Range_i32 self /\ deep_model_i32 self.current.start >= deep_model_i32 self.current.end'
  
  let rec next_Range_i32 (self_: MutBorrow.t t_Range_i32) (return (x: t_Option_i32)) = any
    [ return (result: t_Option_i32) -> {match result with
        | None -> completed_Range_i32 self_
        | Some v -> produces_Range_i32 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_i32) (ret (f0: Int32.t)) = any
    [ good (f0: Int32.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: Int32.t [Some f0: t_Option_i32]. Some f0 <> input} (! {false} any) ]
  
  type closure10 = { c0: MutBorrow.t (MutBorrow.t Int32.t) }
  
  predicate resolve_ref_closure10 [@inline:trivial] (_1: MutBorrow.t closure10) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure10
  
  predicate postcondition_once_closure10 [@inline:trivial] (self: closure10) (args: ()) (result: ()) =
    self.c0.current.final = self.c0.final.final
    /\ Int32.to_int self.c0.current.current + 1 = Int32.to_int self.c0.final.current
  
  meta "rewrite_def" predicate postcondition_once_closure10
  
  predicate resolve_ref_ref_i32 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t Int32.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_ref_i32
  
  predicate resolve_closure10 [@inline:trivial] (_1: closure10) = resolve_ref_ref_i32 _1.c0
  
  meta "rewrite_def" predicate resolve_closure10
  
  predicate hist_inv_closure10 [@inline:trivial] (self: closure10) (result_state: closure10) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure10
  
  predicate postcondition_mut_closure10 [@inline:trivial] (self: closure10) (args: ()) (result_state: closure10) (result: ()) =
    self.c0.current.final = result_state.c0.current.final
    /\ Int32.to_int self.c0.current.current + 1 = Int32.to_int result_state.c0.current.current
    /\ hist_inv_closure10 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure10
  
  function fn_mut_once_closure10 (self: closure10) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_closure10_spec:
    forall self: closure10, args: (), res: (). postcondition_once_closure10 self args res
      = (exists res_state: closure10. postcondition_mut_closure10 self args res_state res
        /\ resolve_closure10 res_state)
  
  function hist_inv_trans_closure10 (self: closure10) (b: closure10) (c: closure10) : ()
  
  axiom hist_inv_trans_closure10_spec: forall self: closure10, b: closure10, c: closure10. hist_inv_closure10 self b
      -> hist_inv_closure10 b c -> hist_inv_closure10 self c
  
  function hist_inv_refl_closure10 (self: closure10) : ()
  
  axiom hist_inv_refl_closure10_spec: forall self: closure10. hist_inv_closure10 self self
  
  function postcondition_mut_hist_inv_closure10 (self: closure10) (args: ()) (res_state: closure10) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_closure10_spec:
    forall self: closure10, args: (), res_state: closure10, res: (). postcondition_mut_closure10 self args res_state res
      -> hist_inv_closure10 self res_state
  
  let rec closure10 (self: MutBorrow.t closure10) (return (x: ())) =
    {[@expl:closure requires] Int32.to_int self.current.c0.current.current < 42}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {self.current.c0.current.current} {(1: Int32.t)}
          (fun (_ret: Int32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = { self.current.c0.current with current = _ret } } } } ]
            s1)
      | s1 = -{resolve_ref_closure10 self}- s2
      | s2 = return {_0} ] ] [ & _0: () = Any.any_l () | & self: MutBorrow.t closure10 = self ])
    [ return (result: ()) -> {[@expl:closure ensures #0] Int32.to_int self.current.c0.current.current + 1
      = Int32.to_int self.final.c0.current.current}
      {[@expl:closure ensures #1] self.current.c0.current.final = self.final.c0.current.final}
      {[@expl:closure hist_inv post] hist_inv_closure10 self.current self.final}
      (! return {result}) ]
  
  predicate precondition_closure10 [@inline:trivial] (self: closure10) (args: ()) =
    Int32.to_int self.c0.current.current < 42
  
  meta "rewrite_def" predicate precondition_closure10
  
  let rec apply_mut_closure10 (f: closure10) (return (x: ())) = {[@expl:apply_mut requires] precondition_closure10 f ()}
    any
    [ return (result: ()) -> {exists g: closure10. postcondition_mut_closure10 f () g () /\ resolve_closure10 g}
      (! return {result}) ]
  
  predicate resolve_ref_i32 [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_i32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (13: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &r <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = [ &snap_r <- r ] s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = Int32.sub {(42: Int32.t)} {(13: Int32.t)} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1)
      | s1 = [ &_7 <- { start = (0: Int32.t); end' = _8 } ] s2
      | s2 = into_iter_Range_i32 {_7} (fun (_ret: t_Range_i32) -> [ &iter <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq Int32.t ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] inv_Seq_i32 produced}
        {[@expl:for invariant] inv_Range_i32 iter}
        {[@expl:for invariant] produces_Range_i32 iter_old produced iter}
        {[@expl:loop invariant #0] Int32.to_int r.current = 13 + Seq.length produced}
        {[@expl:loop invariant #1] snap_r.final = r.final}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_i32> {iter}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_22 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_i32> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_21 <- _ret ] [ &_22 <- { _22 with current = _ret.final } ] s2)
          | s2 = next_Range_i32 {_21} (fun (_ret: t_Option_i32) -> [ &_20 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve_ref_Range_i32 _22}- s1
          | s1 = any [ br0 -> {_20 = None} (! bb10) | br1 (x0: Int32.t) -> {_20 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_20} (fun (r0: Int32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_25 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _25 ] s1
          | s1 = MutBorrow.borrow_mut <MutBorrow.t Int32.t> {r}
              (fun (_ret: MutBorrow.t (MutBorrow.t Int32.t)) -> [ &_29 <- _ret ] [ &r <- _ret.final ] s2)
          | s2 = [ &_28 <- { c0 = _29 } ] s3
          | s3 = apply_mut_closure10 {_28} (fun (_ret: ()) -> [ &_27 <- _ret ] s4)
          | s4 = bb5 ] ] ]
    | bb10 = s0 [ s0 = -{resolve_ref_i32 r}- s1 | s1 = {[@expl:assertion] Int32.to_int x = 42} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & r: MutBorrow.t Int32.t = Any.any_l ()
    | & snap_r: MutBorrow.t Int32.t = Any.any_l ()
    | & iter: t_Range_i32 = Any.any_l ()
    | & _7: t_Range_i32 = Any.any_l ()
    | & _8: Int32.t = Any.any_l ()
    | & iter_old: t_Range_i32 = Any.any_l ()
    | & produced: Seq.seq Int32.t = Any.any_l ()
    | & _20: t_Option_i32 = Any.any_l ()
    | & _21: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & _22: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & __creusot_proc_iter_elem: Int32.t = Any.any_l ()
    | & _25: Seq.seq Int32.t = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: closure10 = Any.any_l ()
    | & _29: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_foo3
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Range_i32 = { start: Int32.t; end': Int32.t }
  
  let rec into_iter_Range_i32 (self_: t_Range_i32) (return (x: t_Range_i32)) = any
    [ return (result: t_Range_i32) -> {result = self_} (! return {result}) ]
  
  function deep_model_i32 [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model_i32
  
  predicate produces_Range_i32 (self: t_Range_i32) (visited: Seq.seq Int32.t) (o: t_Range_i32) =
    self.end' = o.end'
    /\ deep_model_i32 self.start <= deep_model_i32 o.start
    /\ (Seq.length visited > 0 -> deep_model_i32 o.start <= deep_model_i32 o.end')
    /\ Seq.length visited = deep_model_i32 o.start - deep_model_i32 self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_i32 (Seq.get visited i) = deep_model_i32 self.start + i)
  
  function produces_trans_Range_i32 (a: t_Range_i32) (ab: Seq.seq Int32.t) (b: t_Range_i32) (bc: Seq.seq Int32.t) (c: t_Range_i32) : ()
  
  axiom produces_trans_Range_i32_spec:
    forall a: t_Range_i32, ab: Seq.seq Int32.t, b: t_Range_i32, bc: Seq.seq Int32.t, c: t_Range_i32. produces_Range_i32 a ab b
      -> produces_Range_i32 b bc c -> produces_Range_i32 a (Seq.(++) ab bc) c
  
  function produces_refl_Range_i32 (self: t_Range_i32) : ()
  
  axiom produces_refl_Range_i32_spec:
    forall self: t_Range_i32. produces_Range_i32 self (Seq.empty: Seq.seq Int32.t) self
  
  predicate inv_Range_i32 [@inline:trivial] (_1: t_Range_i32) = true
  
  meta "rewrite_def" predicate inv_Range_i32
  
  predicate inv_Seq_i32 [@inline:trivial] (_1: Seq.seq Int32.t) = true
  
  meta "rewrite_def" predicate inv_Seq_i32
  
  type t_Option_i32 = None | Some Int32.t
  
  predicate resolve_ref_Range_i32 [@inline:trivial] (_1: MutBorrow.t t_Range_i32) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_i32
  
  predicate completed_Range_i32 (self: MutBorrow.t t_Range_i32) =
    resolve_ref_Range_i32 self /\ deep_model_i32 self.current.start >= deep_model_i32 self.current.end'
  
  let rec next_Range_i32 (self_: MutBorrow.t t_Range_i32) (return (x: t_Option_i32)) = any
    [ return (result: t_Option_i32) -> {match result with
        | None -> completed_Range_i32 self_
        | Some v -> produces_Range_i32 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_i32) (ret (f0: Int32.t)) = any
    [ good (f0: Int32.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: Int32.t [Some f0: t_Option_i32]. Some f0 <> input} (! {false} any) ]
  
  type closure1 = { c0: MutBorrow.t Int32.t }
  
  predicate resolve_ref_closure1 [@inline:trivial] (_1: MutBorrow.t closure1) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure1
  
  predicate resolve_ref_i32 [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_i32
  
  predicate resolve_closure1 [@inline:trivial] (_1: closure1) = resolve_ref_i32 _1.c0
  
  meta "rewrite_def" predicate resolve_closure1
  
  predicate hist_inv_closure1 [@inline:trivial] (self: closure1) (result_state: closure1) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure1
  
  let rec closure1 [@coma:extspec] (self: MutBorrow.t closure1) (return (x: ())) = bb0
    [ bb0 = s0
      [ s0 = Int32.add {self.current.c0.current} {(1: Int32.t)}
          (fun (_ret: Int32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve_ref_closure1 self}- s2
      | s2 = return {_0} ] ] [ & _0: () = Any.any_l () | & self: MutBorrow.t closure1 = self ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate postcondition_once_closure1 [@inline:trivial] (self: closure1) (args: ()) (result: ()) =
    exists e: closure1. (exists bor_self: MutBorrow.t closure1. bor_self.current = self
          /\ bor_self.final = e /\ closure1'post'return bor_self result /\ hist_inv_closure1 self e)
      /\ resolve_closure1 e
  
  meta "rewrite_def" predicate postcondition_once_closure1
  
  predicate postcondition_mut_closure1 [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: ()) =
    exists bor_self: MutBorrow.t closure1. bor_self.current = self
      /\ bor_self.final = result_state /\ closure1'post'return bor_self result /\ hist_inv_closure1 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure1
  
  function fn_mut_once_closure1 (self: closure1) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_closure1_spec: forall self: closure1, args: (), res: (). postcondition_once_closure1 self args res
      = (exists res_state: closure1. postcondition_mut_closure1 self args res_state res /\ resolve_closure1 res_state)
  
  function hist_inv_trans_closure1 (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_closure1_spec: forall self: closure1, b: closure1, c: closure1. hist_inv_closure1 self b
      -> hist_inv_closure1 b c -> hist_inv_closure1 self c
  
  function hist_inv_refl_closure1 (self: closure1) : ()
  
  axiom hist_inv_refl_closure1_spec: forall self: closure1. hist_inv_closure1 self self
  
  function postcondition_mut_hist_inv_closure1 (self: closure1) (args: ()) (res_state: closure1) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_closure1_spec:
    forall self: closure1, args: (), res_state: closure1, res: (). postcondition_mut_closure1 self args res_state res
      -> hist_inv_closure1 self res_state
  
  predicate precondition_closure1 [@inline:trivial] (self: closure1) (args: ()) =
    forall bor_self: MutBorrow.t closure1. bor_self.current = self -> closure1'pre bor_self
  
  meta "rewrite_def" predicate precondition_closure1
  
  let rec apply_mut_closure1 (f: closure1) (return (x: ())) = {[@expl:apply_mut requires] precondition_closure1 f ()}
    any
    [ return (result: ()) -> {exists g: closure1. postcondition_mut_closure1 f () g () /\ resolve_closure1 g}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo3 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (13: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &r <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = [ &snap_r <- r ] s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = Int32.sub {(42: Int32.t)} {(13: Int32.t)} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1)
      | s1 = [ &_7 <- { start = (0: Int32.t); end' = _8 } ] s2
      | s2 = into_iter_Range_i32 {_7} (fun (_ret: t_Range_i32) -> [ &iter <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq Int32.t ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &old_5_0 <- r ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:mut invariant] old_5_0.final = r.final}
        {[@expl:for invariant] inv_Seq_i32 produced}
        {[@expl:for invariant] inv_Range_i32 iter}
        {[@expl:for invariant] produces_Range_i32 iter_old produced iter}
        {[@expl:loop invariant #0] Int32.to_int r.current = 13 + Seq.length produced}
        {[@expl:loop invariant #1] snap_r.final = r.final}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_i32> {iter}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_22 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_i32> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_21 <- _ret ] [ &_22 <- { _22 with current = _ret.final } ] s2)
          | s2 = next_Range_i32 {_21} (fun (_ret: t_Option_i32) -> [ &_20 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve_ref_Range_i32 _22}- s1
          | s1 = any [ br0 -> {_20 = None} (! bb10) | br1 (x0: Int32.t) -> {_20 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_20} (fun (r0: Int32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_25 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _25 ] s1
          | s1 = MutBorrow.borrow_mut <Int32.t> {r.current}
              (fun (_ret: MutBorrow.t Int32.t) -> [ &_29 <- _ret ] [ &r <- { r with current = _ret.final } ] s2)
          | s2 = [ &_28 <- { c0 = _29 } ] s3
          | s3 = apply_mut_closure1 {_28} (fun (_ret: ()) -> [ &_27 <- _ret ] s4)
          | s4 = bb5 ] ] ]
    | bb10 = s0 [ s0 = -{resolve_ref_i32 r}- s1 | s1 = {[@expl:assertion] Int32.to_int x = 42} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & r: MutBorrow.t Int32.t = Any.any_l ()
    | & snap_r: MutBorrow.t Int32.t = Any.any_l ()
    | & iter: t_Range_i32 = Any.any_l ()
    | & _7: t_Range_i32 = Any.any_l ()
    | & _8: Int32.t = Any.any_l ()
    | & iter_old: t_Range_i32 = Any.any_l ()
    | & produced: Seq.seq Int32.t = Any.any_l ()
    | & _20: t_Option_i32 = Any.any_l ()
    | & _21: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & _22: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & __creusot_proc_iter_elem: Int32.t = Any.any_l ()
    | & _25: Seq.seq Int32.t = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: closure1 = Any.any_l ()
    | & _29: MutBorrow.t Int32.t = Any.any_l ()
    | & old_5_0: MutBorrow.t Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_foo4
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Range_i32 = { start: Int32.t; end': Int32.t }
  
  let rec into_iter_Range_i32 (self_: t_Range_i32) (return (x: t_Range_i32)) = any
    [ return (result: t_Range_i32) -> {result = self_} (! return {result}) ]
  
  function deep_model_i32 [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model_i32
  
  predicate produces_Range_i32 (self: t_Range_i32) (visited: Seq.seq Int32.t) (o: t_Range_i32) =
    self.end' = o.end'
    /\ deep_model_i32 self.start <= deep_model_i32 o.start
    /\ (Seq.length visited > 0 -> deep_model_i32 o.start <= deep_model_i32 o.end')
    /\ Seq.length visited = deep_model_i32 o.start - deep_model_i32 self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_i32 (Seq.get visited i) = deep_model_i32 self.start + i)
  
  function produces_trans_Range_i32 (a: t_Range_i32) (ab: Seq.seq Int32.t) (b: t_Range_i32) (bc: Seq.seq Int32.t) (c: t_Range_i32) : ()
  
  axiom produces_trans_Range_i32_spec:
    forall a: t_Range_i32, ab: Seq.seq Int32.t, b: t_Range_i32, bc: Seq.seq Int32.t, c: t_Range_i32. produces_Range_i32 a ab b
      -> produces_Range_i32 b bc c -> produces_Range_i32 a (Seq.(++) ab bc) c
  
  function produces_refl_Range_i32 (self: t_Range_i32) : ()
  
  axiom produces_refl_Range_i32_spec:
    forall self: t_Range_i32. produces_Range_i32 self (Seq.empty: Seq.seq Int32.t) self
  
  predicate inv_Range_i32 [@inline:trivial] (_1: t_Range_i32) = true
  
  meta "rewrite_def" predicate inv_Range_i32
  
  predicate inv_Seq_i32 [@inline:trivial] (_1: Seq.seq Int32.t) = true
  
  meta "rewrite_def" predicate inv_Seq_i32
  
  type t_Option_i32 = None | Some Int32.t
  
  predicate resolve_ref_Range_i32 [@inline:trivial] (_1: MutBorrow.t t_Range_i32) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_i32
  
  predicate completed_Range_i32 (self: MutBorrow.t t_Range_i32) =
    resolve_ref_Range_i32 self /\ deep_model_i32 self.current.start >= deep_model_i32 self.current.end'
  
  let rec next_Range_i32 (self_: MutBorrow.t t_Range_i32) (return (x: t_Option_i32)) = any
    [ return (result: t_Option_i32) -> {match result with
        | None -> completed_Range_i32 self_
        | Some v -> produces_Range_i32 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_i32) (ret (f0: Int32.t)) = any
    [ good (f0: Int32.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: Int32.t [Some f0: t_Option_i32]. Some f0 <> input} (! {false} any) ]
  
  type closure10 = { c0: MutBorrow.t Int32.t }
  
  predicate resolve_ref_i32 [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_i32
  
  let rec closure10 (self: closure10) (return (x: ())) = {[@expl:closure requires] Int32.to_int self.c0.current < 42}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {self.c0.current} {(1: Int32.t)}
          (fun (_ret: Int32.t) -> [ &self <- { c0 = { self.c0 with current = _ret } } ] s1)
      | s1 = -{match self with
          | {c0 = x} -> resolve_ref_i32 x
          | _ -> true
          end}-
        s2
      | s2 = return {_0} ] ] [ & _0: () = Any.any_l () | & self: closure10 = self ])
    [ return (result: ()) -> {[@expl:closure ensures] Int32.to_int self.c0.current + 1 = Int32.to_int self.c0.final}
      (! return {result}) ]
  
  predicate precondition_closure10 [@inline:trivial] (self: closure10) (args: ()) = Int32.to_int self.c0.current < 42
  
  meta "rewrite_def" predicate precondition_closure10
  
  predicate postcondition_once_closure10 [@inline:trivial] (self: closure10) (args: ()) (result: ()) =
    Int32.to_int self.c0.current + 1 = Int32.to_int self.c0.final
  
  meta "rewrite_def" predicate postcondition_once_closure10
  
  let rec apply_once_closure10 (f: closure10) (return (x: ())) =
    {[@expl:apply_once requires] precondition_closure10 f ()}
    any [ return (result: ()) -> {postcondition_once_closure10 f () ()} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo4 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (13: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &r <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = [ &snap_r <- r ] s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = Int32.sub {(42: Int32.t)} {(13: Int32.t)} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1)
      | s1 = [ &_7 <- { start = (0: Int32.t); end' = _8 } ] s2
      | s2 = into_iter_Range_i32 {_7} (fun (_ret: t_Range_i32) -> [ &iter <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq Int32.t ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &old_5_0 <- r ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:mut invariant] old_5_0.final = r.final}
        {[@expl:for invariant] inv_Seq_i32 produced}
        {[@expl:for invariant] inv_Range_i32 iter}
        {[@expl:for invariant] produces_Range_i32 iter_old produced iter}
        {[@expl:loop invariant #0] Int32.to_int r.current = 13 + Seq.length produced}
        {[@expl:loop invariant #1] snap_r.final = r.final}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_i32> {iter}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_22 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_i32> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_21 <- _ret ] [ &_22 <- { _22 with current = _ret.final } ] s2)
          | s2 = next_Range_i32 {_21} (fun (_ret: t_Option_i32) -> [ &_20 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve_ref_Range_i32 _22}- s1
          | s1 = any [ br0 -> {_20 = None} (! bb10) | br1 (x0: Int32.t) -> {_20 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_20} (fun (r0: Int32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_25 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _25 ] s1
          | s1 = MutBorrow.borrow_mut <Int32.t> {r.current}
              (fun (_ret: MutBorrow.t Int32.t) -> [ &_29 <- _ret ] [ &r <- { r with current = _ret.final } ] s2)
          | s2 = [ &_28 <- { c0 = _29 } ] s3
          | s3 = apply_once_closure10 {_28} (fun (_ret: ()) -> [ &_27 <- _ret ] s4)
          | s4 = bb5 ] ] ]
    | bb10 = s0 [ s0 = -{resolve_ref_i32 r}- s1 | s1 = {[@expl:assertion] Int32.to_int x = 42} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & r: MutBorrow.t Int32.t = Any.any_l ()
    | & snap_r: MutBorrow.t Int32.t = Any.any_l ()
    | & iter: t_Range_i32 = Any.any_l ()
    | & _7: t_Range_i32 = Any.any_l ()
    | & _8: Int32.t = Any.any_l ()
    | & iter_old: t_Range_i32 = Any.any_l ()
    | & produced: Seq.seq Int32.t = Any.any_l ()
    | & _20: t_Option_i32 = Any.any_l ()
    | & _21: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & _22: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & __creusot_proc_iter_elem: Int32.t = Any.any_l ()
    | & _25: Seq.seq Int32.t = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: closure10 = Any.any_l ()
    | & _29: MutBorrow.t Int32.t = Any.any_l ()
    | & old_5_0: MutBorrow.t Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_foo5
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Range_i32 = { start: Int32.t; end': Int32.t }
  
  let rec into_iter_Range_i32 (self_: t_Range_i32) (return (x: t_Range_i32)) = any
    [ return (result: t_Range_i32) -> {result = self_} (! return {result}) ]
  
  function deep_model_i32 [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model_i32
  
  predicate produces_Range_i32 (self: t_Range_i32) (visited: Seq.seq Int32.t) (o: t_Range_i32) =
    self.end' = o.end'
    /\ deep_model_i32 self.start <= deep_model_i32 o.start
    /\ (Seq.length visited > 0 -> deep_model_i32 o.start <= deep_model_i32 o.end')
    /\ Seq.length visited = deep_model_i32 o.start - deep_model_i32 self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_i32 (Seq.get visited i) = deep_model_i32 self.start + i)
  
  function produces_trans_Range_i32 (a: t_Range_i32) (ab: Seq.seq Int32.t) (b: t_Range_i32) (bc: Seq.seq Int32.t) (c: t_Range_i32) : ()
  
  axiom produces_trans_Range_i32_spec:
    forall a: t_Range_i32, ab: Seq.seq Int32.t, b: t_Range_i32, bc: Seq.seq Int32.t, c: t_Range_i32. produces_Range_i32 a ab b
      -> produces_Range_i32 b bc c -> produces_Range_i32 a (Seq.(++) ab bc) c
  
  function produces_refl_Range_i32 (self: t_Range_i32) : ()
  
  axiom produces_refl_Range_i32_spec:
    forall self: t_Range_i32. produces_Range_i32 self (Seq.empty: Seq.seq Int32.t) self
  
  predicate inv_Range_i32 [@inline:trivial] (_1: t_Range_i32) = true
  
  meta "rewrite_def" predicate inv_Range_i32
  
  predicate inv_Seq_i32 [@inline:trivial] (_1: Seq.seq Int32.t) = true
  
  meta "rewrite_def" predicate inv_Seq_i32
  
  type t_Option_i32 = None | Some Int32.t
  
  predicate resolve_ref_Range_i32 [@inline:trivial] (_1: MutBorrow.t t_Range_i32) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_i32
  
  predicate completed_Range_i32 (self: MutBorrow.t t_Range_i32) =
    resolve_ref_Range_i32 self /\ deep_model_i32 self.current.start >= deep_model_i32 self.current.end'
  
  let rec next_Range_i32 (self_: MutBorrow.t t_Range_i32) (return (x: t_Option_i32)) = any
    [ return (result: t_Option_i32) -> {match result with
        | None -> completed_Range_i32 self_
        | Some v -> produces_Range_i32 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_i32) (ret (f0: Int32.t)) = any
    [ good (f0: Int32.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: Int32.t [Some f0: t_Option_i32]. Some f0 <> input} (! {false} any) ]
  
  type closure10 = { c0: MutBorrow.t Int32.t }
  
  predicate resolve_ref_i32 [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_i32
  
  let rec closure10 (self: closure10) (return (x: ())) = {[@expl:closure requires] Int32.to_int self.c0.current < 42}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {self.c0.current} {(1: Int32.t)}
          (fun (_ret: Int32.t) -> [ &self <- { c0 = { self.c0 with current = _ret } } ] s1)
      | s1 = -{match self with
          | {c0 = x} -> resolve_ref_i32 x
          | _ -> true
          end}-
        s2
      | s2 = return {_0} ] ] [ & _0: () = Any.any_l () | & self: closure10 = self ])
    [ return (result: ()) -> {[@expl:closure ensures] Int32.to_int self.c0.current + 1 = Int32.to_int self.c0.final}
      (! return {result}) ]
  
  predicate precondition_closure10 [@inline:trivial] (self: closure10) (args: ()) = Int32.to_int self.c0.current < 42
  
  meta "rewrite_def" predicate precondition_closure10
  
  predicate postcondition_once_closure10 [@inline:trivial] (self: closure10) (args: ()) (result: ()) =
    Int32.to_int self.c0.current + 1 = Int32.to_int self.c0.final
  
  meta "rewrite_def" predicate postcondition_once_closure10
  
  let rec apply_once_closure10 (f: closure10) (return (x: ())) =
    {[@expl:apply_once requires] precondition_closure10 f ()}
    any [ return (result: ()) -> {postcondition_once_closure10 f () ()} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo5 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (13: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &r <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = [ &snap_r <- r ] s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = Int32.sub {(42: Int32.t)} {(13: Int32.t)} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1)
      | s1 = [ &_7 <- { start = (0: Int32.t); end' = _8 } ] s2
      | s2 = into_iter_Range_i32 {_7} (fun (_ret: t_Range_i32) -> [ &iter <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq Int32.t ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &old_5_0 <- r ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:mut invariant] old_5_0.final = r.final}
        {[@expl:for invariant] inv_Seq_i32 produced}
        {[@expl:for invariant] inv_Range_i32 iter}
        {[@expl:for invariant] produces_Range_i32 iter_old produced iter}
        {[@expl:loop invariant #0] Int32.to_int r.current = 13 + Seq.length produced}
        {[@expl:loop invariant #1] snap_r.final = r.final}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_i32> {iter}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_22 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_i32> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret: MutBorrow.t t_Range_i32) -> [ &_21 <- _ret ] [ &_22 <- { _22 with current = _ret.final } ] s2)
          | s2 = next_Range_i32 {_21} (fun (_ret: t_Option_i32) -> [ &_20 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve_ref_Range_i32 _22}- s1
          | s1 = any [ br0 -> {_20 = None} (! bb10) | br1 (x0: Int32.t) -> {_20 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_20} (fun (r0: Int32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_25 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _25 ] s1
          | s1 = MutBorrow.borrow_mut <Int32.t> {r.current}
              (fun (_ret: MutBorrow.t Int32.t) -> [ &_29 <- _ret ] [ &r <- { r with current = _ret.final } ] s2)
          | s2 = [ &_28 <- { c0 = _29 } ] s3
          | s3 = apply_once_closure10 {_28} (fun (_ret: ()) -> [ &_27 <- _ret ] s4)
          | s4 = bb5 ] ] ]
    | bb10 = s0 [ s0 = -{resolve_ref_i32 r}- s1 | s1 = {[@expl:assertion] Int32.to_int x = 42} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & r: MutBorrow.t Int32.t = Any.any_l ()
    | & snap_r: MutBorrow.t Int32.t = Any.any_l ()
    | & iter: t_Range_i32 = Any.any_l ()
    | & _7: t_Range_i32 = Any.any_l ()
    | & _8: Int32.t = Any.any_l ()
    | & iter_old: t_Range_i32 = Any.any_l ()
    | & produced: Seq.seq Int32.t = Any.any_l ()
    | & _20: t_Option_i32 = Any.any_l ()
    | & _21: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & _22: MutBorrow.t t_Range_i32 = Any.any_l ()
    | & __creusot_proc_iter_elem: Int32.t = Any.any_l ()
    | & _25: Seq.seq Int32.t = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: closure10 = Any.any_l ()
    | & _29: MutBorrow.t Int32.t = Any.any_l ()
    | & old_5_0: MutBorrow.t Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
