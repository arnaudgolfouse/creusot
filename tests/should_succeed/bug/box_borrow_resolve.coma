module M_box_borrow_resolve__borrow_in_box
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec borrow_in_box (x: MutBorrow.t Int32.t) (return (x'0: MutBorrow.t Int32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <Int32.t> {x.current} {MutBorrow.get_id x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_4 <- _ret ] [ &x <- { x with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_4.current} {MutBorrow.get_id _4}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_2 <- _ret ] [ &_4 <- { _4 with current = _ret.final } ] s2)
      | s2 = -{resolve _4}- s3
      | s3 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s4)
      | s4 = -{resolve _2}- s5
      | s5 = -{resolve'0 x}- s6
      | s6 = bb1 ]
    | bb1 = return {_0} ]
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & x: MutBorrow.t Int32.t = x
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: MutBorrow.t Int32.t) -> {[@expl:borrow_in_box ensures] result = x} (! return {result}) ]
end
