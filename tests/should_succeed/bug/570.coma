module M_test_program
  use creusot.prelude.Any
  use creusot.int.Int32
  
  type t_S1 = { f: Int32.t }
  
  type t_S2 = { s1: t_S1 }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_program (s: t_S2) (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () | & s: t_S2 = s ]) [ return (result: ()) -> (! return {result}) ]
end
module M_test_assign
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_S1 = { f: Int32.t }
  
  type t_S2 = { s1: t_S1 }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_assign (s: t_S2) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &s <- { s1 = { f = (2: Int32.t) } } ] s1'0 | s1'0 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & s: t_S2 = s ]) [ return (result: ()) -> (! return {result}) ]
end
