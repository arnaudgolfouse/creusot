module M_impl_Debug_for_T__fmt (* <T as std::fmt::Debug> *)
  use creusot.int.Int8
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T = A Int8.t Int8.t | B Int8.t Int8.t Int8.t Int8.t Int8.t Int8.t
  
  let rec elim_B (input: t_T) (ret (f0: Int8.t) (f1: Int8.t) (f2: Int8.t) (f3: Int8.t) (f4: Int8.t) (f5: Int8.t)) = any
    [ good (f0: Int8.t) (f1: Int8.t) (f2: Int8.t) (f3: Int8.t) (f4: Int8.t) (f5: Int8.t) -> {B f0 f1 f2 f3 f4 f5
      = input}
      (! ret {f0} {f1} {f2} {f3} {f4} {f5})
    | bad ->
    {forall f0: Int8.t, f1: Int8.t, f2: Int8.t, f3: Int8.t, f4: Int8.t, f5: Int8.t [B f0 f1 f2 f3 f4 f5: t_T]. B f0 f1 f2 f3 f4 f5
        <> input}
      (! {false}
      any) ]
  
  type dyn_Debug
  
  function dyn_Debug_of_i8 (x: Int8.t) : dyn_Debug
  
  function dyn_Debug_of_ref_i8 (x: Int8.t) : dyn_Debug
  
  type t_Formatter
  
  predicate inv_Formatter (_1: t_Formatter)
  
  type t_Result_unit_Error = Ok () | Err ()
  
  predicate invariant_ref_Formatter [@inline:trivial] (self: MutBorrow.t t_Formatter) =
    inv_Formatter self.current /\ inv_Formatter self.final
  
  meta "rewrite_def" predicate invariant_ref_Formatter
  
  predicate inv_ref_Formatter [@inline:trivial] (_1: MutBorrow.t t_Formatter) = invariant_ref_Formatter _1
  
  meta "rewrite_def" predicate inv_ref_Formatter
  
  let rec debug_tuple_fields_finish (self_: MutBorrow.t t_Formatter) (name: string) (values: Slice64.slice dyn_Debug)
    (return (x: t_Result_unit_Error)) =
    {[@expl:debug_tuple_fields_finish 'self_' type invariant] inv_ref_Formatter self_}
    {[@expl:debug_tuple_fields_finish requires] true}
    any [ return (result: t_Result_unit_Error) -> (! return {result}) ]
  
  predicate resolve_ref_Formatter [@inline:trivial] (_1: MutBorrow.t t_Formatter) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Formatter
  
  let rec elim_A (input: t_T) (ret (x: Int8.t) (y: Int8.t)) = any
    [ good (x: Int8.t) (y: Int8.t) -> {A x y = input} (! ret {x} {y})
    | bad -> {forall x: Int8.t, y: Int8.t [A x y: t_T]. A x y <> input} (! {false} any) ]
  
  let rec debug_struct_field2_finish (self_: MutBorrow.t t_Formatter) (name: string) (name1: string) (value1: dyn_Debug)
    (name2: string) (value2: dyn_Debug) (return (x: t_Result_unit_Error)) =
    {[@expl:debug_struct_field2_finish 'self_' type invariant] inv_ref_Formatter self_}
    {[@expl:debug_struct_field2_finish requires] true}
    any [ return (result: t_Result_unit_Error) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec fmt_T (self: t_T) (f: MutBorrow.t t_Formatter) (return (x: t_Result_unit_Error)) =
    {[@expl:fmt 'f' type invariant] inv_ref_Formatter f}
    (! bb0
    [ bb0 = any
      [ br0 (x0: Int8.t) (x1: Int8.t) -> {self = A x0 x1} (! bb4)
      | br1 (x0: Int8.t) (x1: Int8.t) (x2: Int8.t) (x3: Int8.t) (x4: Int8.t) (x5: Int8.t) -> {self
        = B x0 x1 x2 x3 x4 x5}
        (! bb3) ]
    | bb3 = s0
      [ s0 = elim_B {self}
          (fun (r0: Int8.t) (r1: Int8.t) (r2: Int8.t) (r3: Int8.t) (r4: Int8.t) (r5: Int8.t) ->
            [ &__self_0'0 <- r0 ] s1)
      | s1 = elim_B {self}
          (fun (r0: Int8.t) (r1: Int8.t) (r2: Int8.t) (r3: Int8.t) (r4: Int8.t) (r5: Int8.t) ->
            [ &__self_1'0 <- r1 ] s2)
      | s2 = elim_B {self}
          (fun (r0: Int8.t) (r1: Int8.t) (r2: Int8.t) (r3: Int8.t) (r4: Int8.t) (r5: Int8.t) -> [ &__self_2 <- r2 ] s3)
      | s3 = elim_B {self}
          (fun (r0: Int8.t) (r1: Int8.t) (r2: Int8.t) (r3: Int8.t) (r4: Int8.t) (r5: Int8.t) -> [ &__self_3 <- r3 ] s4)
      | s4 = elim_B {self}
          (fun (r0: Int8.t) (r1: Int8.t) (r2: Int8.t) (r3: Int8.t) (r4: Int8.t) (r5: Int8.t) -> [ &__self_4 <- r4 ] s5)
      | s5 = elim_B {self}
          (fun (r0: Int8.t) (r1: Int8.t) (r2: Int8.t) (r3: Int8.t) (r4: Int8.t) (r5: Int8.t) -> [ &__self_5 <- r5 ] s6)
      | s6 = [ &_28 <- dyn_Debug_of_i8 __self_0'0 ] s7
      | s7 = [ &_30 <- dyn_Debug_of_i8 __self_1'0 ] s8
      | s8 = [ &_32 <- dyn_Debug_of_i8 __self_2 ] s9
      | s9 = [ &_34 <- dyn_Debug_of_i8 __self_3 ] s10
      | s10 = [ &_36 <- dyn_Debug_of_i8 __self_4 ] s11
      | s11 = [ &_40 <- __self_5 ] s12
      | s12 = [ &_38 <- dyn_Debug_of_ref_i8 _40 ] s13
      | s13 = any
        [ any_ (__arr_temp: Slice64.array dyn_Debug) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = _28
          /\ Seq.get __arr_temp.Slice64.elts 1 = _30
          /\ Seq.get __arr_temp.Slice64.elts 2 = _32
          /\ Seq.get __arr_temp.Slice64.elts 3 = _34
          /\ Seq.get __arr_temp.Slice64.elts 4 = _36
          /\ Seq.get __arr_temp.Slice64.elts 5 = _38 /\ Seq.length __arr_temp.Slice64.elts = 6}-
          [ &_27 <- __arr_temp ] s14) ]
      | s14 = [ &_26 <- _27 ] s15
      | s15 = [ &values <- _26 ] s16
      | s16 = [ &_43 <- "B" ] s17
      | s17 = {inv_Formatter f.current}
        MutBorrow.borrow_final <t_Formatter> {f.current} {MutBorrow.get_id f}
          (fun (_ret: MutBorrow.t t_Formatter) ->
            [ &_41 <- _ret ] -{inv_Formatter _ret.final}-
            [ &f <- { f with current = _ret.final } ] s18)
      | s18 = debug_tuple_fields_finish {_41} {_43} {values} (fun (_ret: t_Result_unit_Error) -> [ &_0 <- _ret ] s19)
      | s19 = bb6 ]
    | bb6 = s0 [ s0 = {[@expl:type invariant] inv_ref_Formatter f} s1 | s1 = -{resolve_ref_Formatter f}- s2 | s2 = bb7 ]
    | bb4 = s0
      [ s0 = elim_A {self} (fun (rx: Int8.t) (ry: Int8.t) -> [ &__self_0 <- rx ] s1)
      | s1 = elim_A {self} (fun (rx: Int8.t) (ry: Int8.t) -> [ &__self_1 <- ry ] s2)
      | s2 = [ &_8 <- "A" ] s3
      | s3 = [ &_10 <- "x" ] s4
      | s4 = [ &_11 <- dyn_Debug_of_i8 __self_0 ] s5
      | s5 = [ &_14 <- "y" ] s6
      | s6 = [ &_17 <- __self_1 ] s7
      | s7 = [ &_15 <- dyn_Debug_of_ref_i8 _17 ] s8
      | s8 = {inv_Formatter f.current}
        MutBorrow.borrow_final <t_Formatter> {f.current} {MutBorrow.get_id f}
          (fun (_ret: MutBorrow.t t_Formatter) ->
            [ &_6 <- _ret ] -{inv_Formatter _ret.final}-
            [ &f <- { f with current = _ret.final } ] s9)
      | s9 = debug_struct_field2_finish {_6} {_8} {_10} {_11} {_14} {_15}
          (fun (_ret: t_Result_unit_Error) -> [ &_0 <- _ret ] s10)
      | s10 = bb5 ]
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv_ref_Formatter f} s1 | s1 = -{resolve_ref_Formatter f}- s2 | s2 = bb7 ]
    | bb7 = return {_0} ]
    [ & _0: t_Result_unit_Error = Any.any_l ()
    | & self: t_T = self
    | & f: MutBorrow.t t_Formatter = f
    | & __self_0: Int8.t = Any.any_l ()
    | & __self_1: Int8.t = Any.any_l ()
    | & _6: MutBorrow.t t_Formatter = Any.any_l ()
    | & _8: string = Any.any_l ()
    | & _10: string = Any.any_l ()
    | & _11: dyn_Debug = Any.any_l ()
    | & _14: string = Any.any_l ()
    | & _15: dyn_Debug = Any.any_l ()
    | & _17: Int8.t = Any.any_l ()
    | & __self_0'0: Int8.t = Any.any_l ()
    | & __self_1'0: Int8.t = Any.any_l ()
    | & __self_2: Int8.t = Any.any_l ()
    | & __self_3: Int8.t = Any.any_l ()
    | & __self_4: Int8.t = Any.any_l ()
    | & __self_5: Int8.t = Any.any_l ()
    | & values: Slice64.slice dyn_Debug = Any.any_l ()
    | & _26: Slice64.array dyn_Debug = Any.any_l ()
    | & _27: Slice64.array dyn_Debug = Any.any_l ()
    | & _28: dyn_Debug = Any.any_l ()
    | & _30: dyn_Debug = Any.any_l ()
    | & _32: dyn_Debug = Any.any_l ()
    | & _34: dyn_Debug = Any.any_l ()
    | & _36: dyn_Debug = Any.any_l ()
    | & _38: dyn_Debug = Any.any_l ()
    | & _40: Int8.t = Any.any_l ()
    | & _41: MutBorrow.t t_Formatter = Any.any_l ()
    | & _43: string = Any.any_l () ]) [ return (result: t_Result_unit_Error) -> (! return {result}) ]
end
