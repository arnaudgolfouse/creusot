module M_164__main [#"164.rs" 5 0 5 13]
  let%span s164 = "164.rs" 6 16 6 17
  let%span s164'0 = "164.rs" 8 16 8 27
  let%span s164'1 = "164.rs" 9 15 9 16
  let%span s164'2 = "164.rs" 10 12 10 13
  let%span s164'3 = "164.rs" 14 16 14 27
  let%span s164'4 = "164.rs" 15 26 15 27
  let%span s164'5 = "164.rs" 16 12 16 13
  let%span s164'6 = "164.rs" 22 16 22 20
  let%span s164'7 = "164.rs" 30 16 30 27
  let%span s164'8 = "164.rs" 32 19 32 20
  let%span s164'9 = "164.rs" 33 16 33 17
  let%span s164'10 = "164.rs" 39 16 39 27
  let%span s164'11 = "164.rs" 40 14 40 15
  let%span s164'12 = "164.rs" 41 20 41 31
  let%span s164'13 = "164.rs" 45 12 45 13
  let%span s164'14 = "164.rs" 46 21 46 22
  let%span s164'15 = "164.rs" 46 16 46 22
  let%span s164'16 = "164.rs" 50 17 50 28
  let%span s164'17 = "164.rs" 52 19 52 20
  let%span s164'18 = "164.rs" 53 16 53 17
  let%span s164'19 = "164.rs" 55 8 55 12
  let%span s164'20 = "164.rs" 61 13 61 14
  let%span s164'21 = "164.rs" 61 16 61 18
  let%span s164'22 = "164.rs" 61 4 61 7
  let%span s164'23 = "164.rs" 61 4 61 7
  let%span s164'24 = "164.rs" 61 4 61 7
  let%span s164'25 = "164.rs" 60 16 60 27
  let%span s164'26 = "164.rs" 61 4 61 7
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 215 18 215 32
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 93 26 96 17
  let%span srange = "../../../creusot-contracts/src/std/iter/range.rs" 23 12 27 70
  let%span srange'0 = "../../../creusot-contracts/src/std/iter/range.rs" 32 4 32 49
  let%span srange'1 = "../../../creusot-contracts/src/std/iter/range.rs" 36 4 36 34
  let%span srange'2 = "../../../creusot-contracts/src/std/iter/range.rs" 37 4 37 34
  let%span srange'3 = "../../../creusot-contracts/src/std/iter/range.rs" 38 4 38 44
  let%span srange'4 = "../../../creusot-contracts/src/std/iter/range.rs" 15 8 17 9
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 23 28 23 33
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.int.UInt64
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering = [%#sord'12] if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)
  
  type t_Range = { t_Range__start: Int32.t; t_Range__end: Int32.t }
  
  let rec into_iter (self_: t_Range) (return' (x: t_Range)) = any
    [ return''0 (result: t_Range) -> {[%#siter] result = self_} (! return' {result}) ]
  
  predicate inv (_0: Seq.seq Int32.t)
  
  axiom inv_axiom [@rewrite]: forall x: Seq.seq Int32.t [inv x]. inv x = true
  
  predicate inv'0 (_0: t_Range)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Range [inv'0 x]. inv'0 x = true
  
  function deep_model (self: Int32.t) : int = [%#snum] Int32.to_int self
  
  predicate produces (self: t_Range) (visited: Seq.seq Int32.t) (o: t_Range) =
    [%#srange] self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq Int32.t) (b: t_Range) (bc: Seq.seq Int32.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq Int32.t, b: t_Range, bc: Seq.seq Int32.t, c: t_Range. ([%#srange'1] produces a ab b)
      -> ([%#srange'2] produces b bc c) -> ([%#srange'3] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#srange'0] produces self (Seq.empty: Seq.seq Int32.t) self
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Range) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_Range) =
    [%#srange'4] resolve self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  let rec next (self_: MutBorrow.t t_Range) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#siter'0] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Range) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Some (input: t_Option) (ret (field_0: Int32.t)) = any
    [ good (field_0: Int32.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: Int32.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec main [#"164.rs" 5 0 5 13] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &x <- [%#s164] (0: UInt64.t) ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:loop invariant] [%#s164'0] x = (0: UInt64.t)} s1
      | s1 = [ &_6 <- x = ([%#s164'1] (0: UInt64.t)) ] s2
      | s2 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb2) ] ]
    | bb2 = s0 [ s0 = [ &x <- [%#s164'2] (1: UInt64.t) ] s1 | s1 = bb5 ]
    | bb5 = s0
      [ s0 = {[@expl:loop invariant] [%#s164'3] x = (1: UInt64.t)} s1
      | s1 = [ &_13 <- x = ([%#s164'4] (1: UInt64.t)) ] s2
      | s2 = any [ br0 -> {_13 = false} (! bb10) | br1 -> {_13} (! bb7) ] ]
    | bb7 = s0 [ s0 = [ &x <- [%#s164'5] (2: UInt64.t) ] s1 | s1 = bb10 ]
    | bb10 = s0 [ s0 = {[@expl:loop invariant] [%#s164'6] true} s1 | s1 = bb14 ]
    | bb14 = s0 [ s0 = {[@expl:loop invariant] [%#s164'7] x = (2: UInt64.t)} s1 | s1 = bb16 ]
    | bb16 = bb16'0
      [ bb16'0 = (! s0
        [ s0 = [ &_27 <- x <> ([%#s164'8] (3: UInt64.t)) ] s1
        | s1 = any [ br0 -> {_27 = false} (! bb19) | br1 -> {_27} (! bb17) ] ])
        [ bb17 = s0 [ s0 = [ &x <- [%#s164'9] (3: UInt64.t) ] s1 | s1 = bb16'0 ] ] ]
    | bb19 = bb19'0
      [ bb19'0 = {[@expl:loop invariant] [%#s164'10] UInt64.le x (4: UInt64.t)}
        (! s0)
        [ s0 = bb20 ]
        [ bb20 = s0
          [ s0 = [ &_35 <- UInt64.lt x ([%#s164'11] (4: UInt64.t)) ] s1
          | s1 = any [ br0 -> {_35 = false} (! bb27) | br1 -> {_35} (! bb22) ] ]
        | bb22 = s0
          [ s0 = {[@expl:loop invariant] [%#s164'12] UInt64.le x (3: UInt64.t)} s1
          | s1 = [ &x <- [%#s164'13] (4: UInt64.t) ] s2
          | s2 = [ &_40 <- x = ([%#s164'14] (4: UInt64.t)) ] s3
          | s3 = any [ br0 -> {_40 = false} (! bb23) | br1 -> {_40} (! bb19'0) ] ] ] ]
    | bb23 = {[%#s164'15] false} any
    | bb27 = s0 [ s0 = {[@expl:loop invariant] [%#s164'16] x = (4: UInt64.t)} s1 | s1 = bb29 ]
    | bb29 = bb29'0
      [ bb29'0 = (! s0
        [ s0 = [ &_49 <- x <> ([%#s164'17] (5: UInt64.t)) ] s1
        | s1 = any [ br0 -> {_49 = false} (! bb31) | br1 -> {_49} (! bb30) ] ])
        [ bb30 = s0 [ s0 = [ &x <- [%#s164'18] (5: UInt64.t) ] s1 | s1 = bb29'0 ] ] ]
    | bb31 = any [ br0 -> {false} (! bb34) | br1 -> {true} (! bb34) ]
    | bb34 = s0
      [ s0 = [ &_57 <- { t_Range__start = ([%#s164'20] (0: Int32.t)); t_Range__end = ([%#s164'21] (10: Int32.t)) } ] s1
      | s1 = into_iter {_57} (fun (_ret: t_Range) -> [ &iter <- _ret ] s2)
      | s2 = bb35 ]
    | bb35 = s0 [ s0 = [ &iter_old <- [%#s164'22] iter ] s1 | s1 = bb36 ]
    | bb36 = s0 [ s0 = [ &produced <- [%#s164'23] Seq.empty: Seq.seq Int32.t ] s1 | s1 = bb38 ]
    | bb38 = s0
      [ s0 = {[@expl:for invariant] [%#s164'24] inv produced} s1
      | s1 = {[@expl:for invariant] [%#s164'24] inv'0 iter} s2
      | s2 = {[@expl:for invariant] [%#s164'24] produces iter_old produced iter} s3
      | s3 = {[@expl:loop invariant] [%#s164'25] x = (5: UInt64.t)} s4
      | s4 = MutBorrow.borrow_mut <t_Range> {iter}
          (fun (_ret: MutBorrow.t t_Range) -> [ &_69 <- _ret ] [ &iter <- _ret.final ] s5)
      | s5 = MutBorrow.borrow_final <t_Range> {_69.current} {MutBorrow.get_id _69}
          (fun (_ret: MutBorrow.t t_Range) -> [ &_68 <- _ret ] [ &_69 <- { _69 with current = _ret.final } ] s6)
      | s6 = next {_68} (fun (_ret: t_Option) -> [ &_67 <- _ret ] s7)
      | s7 = bb39 ]
    | bb39 = s0
      [ s0 = -{resolve'0 _69}- s1
      | s1 = any [ br0 -> {_67 = C_None} (! bb45) | br1 (x0: Int32.t) -> {_67 = C_Some x0} (! bb43) ] ]
    | bb43 = s0
      [ s0 = v_Some {_67} (fun (r0: Int32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
      | s1 = [ &_72 <- [%#s164'26] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
      | s2 = bb44 ]
    | bb44 = s0 [ s0 = [ &produced <- _72 ] s1 | s1 = bb45 ]
    | bb45 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & x: UInt64.t = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _27: bool = Any.any_l ()
    | & _35: bool = Any.any_l ()
    | & _40: bool = Any.any_l ()
    | & _49: bool = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _57: t_Range = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq Int32.t = Any.any_l ()
    | & _67: t_Option = Any.any_l ()
    | & _68: MutBorrow.t t_Range = Any.any_l ()
    | & _69: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: Int32.t = Any.any_l ()
    | & _72: Seq.seq Int32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
