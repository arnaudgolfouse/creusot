module M_164__main
  use creusot.int.UInt64
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering = if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. UInt64.le x y = (cmp_log x y <> C_Greater)
  
  type t_Range = { t_Range__start: Int32.t; t_Range__end: Int32.t }
  
  let rec into_iter (self_: t_Range) (return (x: t_Range)) = any
    [ return (result: t_Range) -> {result = self_} (! return {result}) ]
  
  predicate inv [@inline:trivial] (_1: Seq.seq Int32.t) = true
  
  meta "rewrite_def" predicate inv
  
  predicate inv'0 [@inline:trivial] (_1: t_Range) = true
  
  meta "rewrite_def" predicate inv'0
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  predicate produces (self: t_Range) (visited: Seq.seq Int32.t) (o: t_Range) =
    self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq Int32.t) (b: t_Range) (bc: Seq.seq Int32.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq Int32.t, b: t_Range, bc: Seq.seq Int32.t, c: t_Range. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. produces self (Seq.empty: Seq.seq Int32.t) self
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_Range) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_Range) =
    resolve self /\ deep_model self.current.t_Range__start >= deep_model self.current.t_Range__end
  
  let rec next (self_: MutBorrow.t t_Range) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: Int32.t)) = any
    [ good (field_0: Int32.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: Int32.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec main (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &x <- (0: UInt64.t) ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:loop invariant] x = (0: UInt64.t)} s1
      | s1 = [ &_6 <- x = (0: UInt64.t) ] s2
      | s2 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb2) ] ]
    | bb2 = s0 [ s0 = [ &x <- (1: UInt64.t) ] s1 | s1 = bb5 ]
    | bb5 = s0
      [ s0 = {[@expl:loop invariant] x = (1: UInt64.t)} s1
      | s1 = [ &_13 <- x = (1: UInt64.t) ] s2
      | s2 = any [ br0 -> {_13 = false} (! bb10) | br1 -> {_13} (! bb7) ] ]
    | bb7 = s0 [ s0 = [ &x <- (2: UInt64.t) ] s1 | s1 = bb10 ]
    | bb10 = s0 [ s0 = {[@expl:loop invariant] true} s1 | s1 = bb14 ]
    | bb14 = s0 [ s0 = {[@expl:loop invariant] x = (2: UInt64.t)} s1 | s1 = bb16 ]
    | bb16 = bb16
      [ bb16 = (! s0
        [ s0 = [ &_27 <- x <> (3: UInt64.t) ] s1 | s1 = any [ br0 -> {_27 = false} (! bb19) | br1 -> {_27} (! bb17) ] ])
        [ bb17 = s0 [ s0 = [ &x <- (3: UInt64.t) ] s1 | s1 = bb16 ] ] ]
    | bb19 = bb19
      [ bb19 = {[@expl:loop invariant] UInt64.le x (4: UInt64.t)}
        (! s0)
        [ s0 = bb20 ]
        [ bb20 = s0
          [ s0 = [ &_35 <- UInt64.lt x (4: UInt64.t) ] s1
          | s1 = any [ br0 -> {_35 = false} (! bb26) | br1 -> {_35} (! bb22) ] ]
        | bb22 = s0
          [ s0 = {[@expl:loop invariant] UInt64.le x (3: UInt64.t)} s1
          | s1 = [ &x <- (4: UInt64.t) ] s2
          | s2 = [ &_40 <- x = (4: UInt64.t) ] s3
          | s3 = any [ br0 -> {_40 = false} (! bb24) | br1 -> {_40} (! bb19) ] ] ] ]
    | bb24 = {false} any
    | bb26 = s0 [ s0 = {[@expl:loop invariant] x = (4: UInt64.t)} s1 | s1 = bb28 ]
    | bb28 = bb28
      [ bb28 = (! s0
        [ s0 = [ &_49 <- x <> (5: UInt64.t) ] s1 | s1 = any [ br0 -> {_49 = false} (! bb30) | br1 -> {_49} (! bb29) ] ])
        [ bb29 = s0 [ s0 = [ &x <- (5: UInt64.t) ] s1 | s1 = bb28 ] ] ]
    | bb30 = any [ br0 -> {false} (! bb33) | br1 -> {true} (! bb33) ]
    | bb33 = s0
      [ s0 = [ &_57 <- { t_Range__start = (0: Int32.t); t_Range__end = (10: Int32.t) } ] s1
      | s1 = into_iter {_57} (fun (_ret: t_Range) -> [ &iter <- _ret ] s2)
      | s2 = bb34 ]
    | bb34 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb35 ]
    | bb35 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq Int32.t ] s1 | s1 = bb37 ]
    | bb37 = s0
      [ s0 = {[@expl:for invariant] inv produced} s1
      | s1 = {[@expl:for invariant] inv'0 iter} s2
      | s2 = {[@expl:for invariant] produces iter_old produced iter} s3
      | s3 = {[@expl:loop invariant] x = (5: UInt64.t)} s4
      | s4 = MutBorrow.borrow_mut <t_Range> {iter}
          (fun (_ret: MutBorrow.t t_Range) -> [ &_69 <- _ret ] [ &iter <- _ret.final ] s5)
      | s5 = MutBorrow.borrow_final <t_Range> {_69.current} {MutBorrow.get_id _69}
          (fun (_ret: MutBorrow.t t_Range) -> [ &_68 <- _ret ] [ &_69 <- { _69 with current = _ret.final } ] s6)
      | s6 = next {_68} (fun (_ret: t_Option) -> [ &_67 <- _ret ] s7)
      | s7 = bb38 ]
    | bb38 = s0
      [ s0 = -{resolve _69}- s1
      | s1 = any [ br0 -> {_67 = C_None} (! bb44) | br1 (x0: Int32.t) -> {_67 = C_Some x0} (! bb42) ] ]
    | bb42 = s0
      [ s0 = v_Some {_67} (fun (r0: Int32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
      | s1 = [ &_72 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
      | s2 = bb43 ]
    | bb43 = s0 [ s0 = [ &produced <- _72 ] s1 | s1 = bb44 ]
    | bb44 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & x: UInt64.t = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _27: bool = Any.any_l ()
    | & _35: bool = Any.any_l ()
    | & _40: bool = Any.any_l ()
    | & _49: bool = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _57: t_Range = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq Int32.t = Any.any_l ()
    | & _67: t_Option = Any.any_l ()
    | & _68: MutBorrow.t t_Range = Any.any_l ()
    | & _69: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: Int32.t = Any.any_l ()
    | & _72: Seq.seq Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
