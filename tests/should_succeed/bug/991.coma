module M_991__qyi6256438357931963096__love_and_hope (* Formula *)
  use creusot.prelude.Any
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_Formula = { t_Formula__vec: t_Vec; t_Formula__b: bool }
  
  type tuple = { f0: Seq.seq UInt64.t; f1: bool }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: t_Formula) : tuple = { f0 = view self.t_Formula__vec; f1 = self.t_Formula__b }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec love_and_hope (self: t_Formula) (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:love_and_hope ensures] view'0 self = view'0 self} (! return {result}) ]
end
