module M_991__qyi6256438357931963096__love_and_hope [#"991.rs" 22 4 22 27] (* Formula *)
  let%span s991 = "991.rs" 21 14 21 28
  let%span s991'0 = "991.rs" 16 8 16 33
  let%span smodel = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_Formula  =
    { t_Formula__vec: t_Vec; t_Formula__b: bool }
  
  type tuple  =
    { _p0: Seq.seq UInt64.t; _p1: bool }
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)
  
  function view'0 [#"991.rs" 15 4 15 33] (self : t_Formula) : tuple =
    [%#s991'0] { _p0 = view self.t_Formula__vec; _p1 = self.t_Formula__b }
  
  function view'1 (self : t_Formula) : tuple =
    [%#smodel] view'0 self
  
  meta "compute_max_steps" 1000000
  
  let rec love_and_hope[#"991.rs" 22 4 22 27] (self:t_Formula) (return'  (x:()))= (! bb0 [ bb0 = return''0 {_0} ] )
    [ & _0 : () = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:love_and_hope ensures] [%#s991] view'1 self = view'1 self} (! return' {result}) ]

end
