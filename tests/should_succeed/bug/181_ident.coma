module M_181_ident__max_usize [#"181_ident.rs" 13 0 13 45]
  let%span s181_ident = "181_ident.rs" 12 10 12 36
  let%span s181_ident'0 = "181_ident.rs" 9 4 9 29
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  function max_int [#"181_ident.rs" 8 0 8 37] (a: int) (b: int) : int =
    [%#s181_ident'0] if a < b then b else a
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec max_usize[#"181_ident.rs" 13 0 13 45] (a:UInt64.t) (b:UInt64.t) (return'  (x:UInt64.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- UInt64.lt a'0 b'0 ] s1 | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
    
    | bb1 = s0 [ s0 =  [ &_0 <- b'0 ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a'0 ] s1 | s1 = bb3 ] 
    | bb3 = return''0 {_0} ]
     [ & _0: UInt64.t = Any.any_l () | & a'0: UInt64.t = a | & b'0: UInt64.t = b | & _4: bool = Any.any_l () ] )
    [ return''0 (result:UInt64.t)-> {[@expl:max_usize ensures] [%#s181_ident] UInt64.t'int result
      = max_int (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]

end
