module M_simple_recursion__custom_variant__qyi3916446837208929355__no_infinite_decreasing_sequence (* <custom_variant::CustomVariant as creusot_contracts::logic::WellFounded> *)
  use creusot.int.UInt32
  use map.Map
  use mach.int.Int
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation (self: t_CustomVariant) (other: t_CustomVariant) =
    UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  function index_logic [@inline:trivial] (self: Map.map int t_CustomVariant) (a: int) : t_CustomVariant = Map.get self a
  
  meta "rewrite_def" function index_logic
  
  predicate well_founded_relation'0 [@inline:trivial] (self: UInt32.t) (other: UInt32.t) = UInt32.gt self other
  
  meta "rewrite_def" predicate well_founded_relation'0
  
  function index_logic'0 [@inline:trivial] (self: Map.map int UInt32.t) (a: int) : UInt32.t = Map.get self a
  
  meta "rewrite_def" function index_logic'0
  
  function no_infinite_decreasing_sequence (s: Map.map int UInt32.t) : int
  
  axiom no_infinite_decreasing_sequence_spec: forall s: Map.map int UInt32.t. no_infinite_decreasing_sequence s >= 0
  
  axiom no_infinite_decreasing_sequence_spec'0:
    forall s: Map.map int UInt32.t. not well_founded_relation'0 (index_logic'0 s (no_infinite_decreasing_sequence s)) (index_logic'0 s (no_infinite_decreasing_sequence s
      + 1))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant s : Map.map int t_CustomVariant
  
  function no_infinite_decreasing_sequence'0 (s: Map.map int t_CustomVariant) : int
  
  goal vc_no_infinite_decreasing_sequence:
    no_infinite_decreasing_sequence (fun (i: int) -> (index_logic s i).t_CustomVariant__0) >= 0
      && not well_founded_relation'0 (index_logic'0 (fun (i: int) -> (index_logic s i).t_CustomVariant__0) (no_infinite_decreasing_sequence (fun (i: int) -> (index_logic s i).t_CustomVariant__0))) (index_logic'0 (fun (i: int) -> (index_logic s i).t_CustomVariant__0) (no_infinite_decreasing_sequence (fun (i: int) -> (index_logic s i).t_CustomVariant__0)
      + 1))
    -> (let result = no_infinite_decreasing_sequence (fun (i: int) -> (index_logic s i).t_CustomVariant__0) in ([@expl:no_infinite_decreasing_sequence ensures #0] result
      >= 0)
    && ([@expl:no_infinite_decreasing_sequence ensures #1] not well_founded_relation (index_logic s result) (index_logic s (result
    + 1))))
end
module M_simple_recursion__variant_int
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation [@inline:trivial] (self: UInt32.t) (other: UInt32.t) = UInt32.gt self other
  
  meta "rewrite_def" predicate well_founded_relation
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec variant_int (x: UInt32.t) (return (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_4 <- x = (0: UInt32.t) ] s1 | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ] ]
    | bb1 = s0 [ s0 = [ &_0 <- (0: UInt32.t) ] s1 | s1 = bb4 ]
    | bb2 = s0
      [ s0 = UInt32.sub {x} {(1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_7 <- _ret ] s1)
      | s1 = variant_int {_7} (fun (_ret: UInt32.t) -> [ &_6 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = UInt32.add {(1: UInt32.t)} {_6} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = return {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x: UInt32.t = x
    | & _4: bool = Any.any_l ()
    | & _6: UInt32.t = Any.any_l ()
    | & _7: UInt32.t = Any.any_l () ]
    [ variant_int (x: UInt32.t) (_ret (_r: UInt32.t)) ->
    {[@expl:function variant] well_founded_relation function_variant x}
      variant_int {x} (_ret) ] [ function_variant: UInt32.t = x ])
    [ return (result: UInt32.t) -> {[@expl:variant_int ensures] result = x} (! return {result}) ]
end
module M_simple_recursion__custom_variant
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation (self: t_CustomVariant) (other: t_CustomVariant) =
    UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec custom_variant (x: t_CustomVariant) (return (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- x.t_CustomVariant__0 = (0: UInt32.t) ] s1
      | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb4) ] ]
    | bb2 = s0
      [ s0 = [ &_6 <- x.t_CustomVariant__1 = (0: UInt32.t) ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb4) ] ]
    | bb4 = s0 [ s0 = [ &_0 <- (0: UInt32.t) ] s1 | s1 = bb7 ]
    | bb5 = s0
      [ s0 = UInt32.sub {x.t_CustomVariant__0} {(1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_9 <- _ret ] s1)
      | s1 = UInt32.sub {x.t_CustomVariant__1} {(1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s2)
      | s2 = [ &_8 <- { t_CustomVariant__0 = _9; t_CustomVariant__1 = _11 } ] s3
      | s3 = custom_variant {_8} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s4)
      | s4 = bb7 ]
    | bb7 = return {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x: t_CustomVariant = x
    | & _4: bool = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _8: t_CustomVariant = Any.any_l ()
    | & _9: UInt32.t = Any.any_l ()
    | & _11: UInt32.t = Any.any_l () ]
    [ custom_variant (x: t_CustomVariant) (_ret (_r: UInt32.t)) ->
    {[@expl:function variant] well_founded_relation function_variant x}
      custom_variant {x} (_ret) ] [ function_variant: t_CustomVariant = x ])
    [ return (result: UInt32.t) -> {[@expl:custom_variant ensures] result = (0: UInt32.t)} (! return {result}) ]
end
module M_simple_recursion__custom_variant__qyi3916446837208929355__no_infinite_decreasing_sequence__refines (* <custom_variant::CustomVariant as creusot_contracts::logic::WellFounded> *)
  use creusot.int.UInt32
  use map.Map
  use mach.int.Int
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation (self: t_CustomVariant) (other: t_CustomVariant) =
    UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  function index_logic [@inline:trivial] (self: Map.map int t_CustomVariant) (a: int) : t_CustomVariant = Map.get self a
  
  meta "rewrite_def" function index_logic
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall s: Map.map int t_CustomVariant. forall result: int. not well_founded_relation (index_logic s result) (index_logic s (result
            + 1))
          /\ result >= 0 -> not well_founded_relation (index_logic s result) (index_logic s (result + 1)) /\ result >= 0
end
