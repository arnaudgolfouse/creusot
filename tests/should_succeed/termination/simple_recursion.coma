module M_simple_recursion__custom_variant__qyi3916446837208929355__no_infinite_decreasing_sequence [#"custom_variant.rs" 20 4 20 68] (* <custom_variant::CustomVariant as creusot_contracts::logic::WellFounded> *)
  let%span scustom_variant = "custom_variant.rs" 18 14 18 25
  let%span scustom_variant'0 = "custom_variant.rs" 19 14 19 68
  let%span scustom_variant'1 = "custom_variant.rs" 17 4 17 12
  let%span scustom_variant'2 = "custom_variant.rs" 23 8 23 61
  let%span scustom_variant'3 = "custom_variant.rs" 14 8 14 44
  let%span swell_founded = "../../../creusot-contracts/src/logic/well_founded.rs" 69 22 69 33
  let%span swell_founded'0 = "../../../creusot-contracts/src/logic/well_founded.rs" 70 22 70 76
  let%span swell_founded'1 = "../../../creusot-contracts/src/logic/well_founded.rs" 65 16 65 28
  let%span smapping = "../../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 260 16 266 17
  
  use creusot.int.UInt32
  use map.Map
  use mach.int.Int
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation [#"custom_variant.rs" 13 4 13 55] (self: t_CustomVariant) (other: t_CustomVariant) =
    [%#scustom_variant'3] UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  function index_logic (self: Map.map int t_CustomVariant) (a: int) : t_CustomVariant = [%#smapping] Map.get self a
  
  predicate well_founded_relation'0 (self: UInt32.t) (other: UInt32.t) = [%#swell_founded'1] UInt32.gt self other
  
  function index_logic'0 (self: Map.map int UInt32.t) (a: int) : UInt32.t = [%#smapping] Map.get self a
  
  function no_infinite_decreasing_sequence (s: Map.map int UInt32.t) : int
  
  axiom no_infinite_decreasing_sequence_spec:
    forall s: Map.map int UInt32.t. [%#swell_founded] no_infinite_decreasing_sequence s >= 0
  
  axiom no_infinite_decreasing_sequence_spec'0:
    forall s: Map.map int UInt32.t. [%#swell_founded'0] not well_founded_relation'0 (index_logic'0 s (no_infinite_decreasing_sequence s)) (index_logic'0 s (no_infinite_decreasing_sequence s
      + 1))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant s : Map.map int t_CustomVariant
  
  function no_infinite_decreasing_sequence'0 [#"custom_variant.rs" 20 4 20 68] (s'0: Map.map int t_CustomVariant) : int
  
  goal vc_no_infinite_decreasing_sequence:
    ([%#swell_founded] no_infinite_decreasing_sequence ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0)
        >= 0)
      && ([%#swell_founded'0] not well_founded_relation'0 (index_logic'0 ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0) (no_infinite_decreasing_sequence ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0))) (index_logic'0 ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0) (no_infinite_decreasing_sequence ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0)
      + 1)))
    -> (let result = no_infinite_decreasing_sequence ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0) in ([@expl:no_infinite_decreasing_sequence ensures #0] [%#scustom_variant] result
      >= 0)
    && ([@expl:no_infinite_decreasing_sequence ensures #1] [%#scustom_variant'0] not well_founded_relation (index_logic s result) (index_logic s (result
    + 1))))
end
module M_simple_recursion__variant_int [#"simple_recursion.rs" 10 0 10 33]
  let%span swell_founded = "../../../creusot-contracts/src/logic/well_founded.rs" 65 16 65 28
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 260 16 266 17
  let%span ssimple_recursion = "simple_recursion.rs" 11 12 11 13
  let%span ssimple_recursion'0 = "simple_recursion.rs" 11 16 11 17
  let%span ssimple_recursion'1 = "simple_recursion.rs" 11 47 11 48
  let%span ssimple_recursion'2 = "simple_recursion.rs" 11 27 11 28
  let%span ssimple_recursion'3 = "simple_recursion.rs" 8 10 8 11
  let%span ssimple_recursion'4 = "simple_recursion.rs" 9 10 9 21
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation (self: UInt32.t) (other: UInt32.t) = [%#swell_founded] UInt32.gt self other
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec variant_int [#"simple_recursion.rs" 10 0 10 33] (x: UInt32.t) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- x'0 = ([%#ssimple_recursion] (0: UInt32.t)) ] s1
      | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ] ]
    | bb1 = s0 [ s0 = [ &_0 <- [%#ssimple_recursion'0] (0: UInt32.t) ] s1 | s1 = bb4 ]
    | bb2 = s0
      [ s0 = UInt32.sub {x'0} {[%#ssimple_recursion'1] (1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_7 <- _ret ] s1)
      | s1 = variant_int'0 {_7} (fun (_ret: UInt32.t) -> [ &_6 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = UInt32.add {[%#ssimple_recursion'2] (1: UInt32.t)} {_6} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1)
      | s1 = bb4 ]
    | bb4 = return''0 {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x'0: UInt32.t = x
    | & _4: bool = Any.any_l ()
    | & _6: UInt32.t = Any.any_l ()
    | & _7: UInt32.t = Any.any_l () ]
    [ variant_int'0 (x'0: UInt32.t) (_ret (_r: UInt32.t)) ->
    {[@expl:function variant] well_founded_relation function_variant x'0}
      variant_int {x'0} (_ret) ] [ function_variant: UInt32.t = [%#ssimple_recursion'3] x ])
    [ return''0 (result: UInt32.t) -> {[@expl:variant_int ensures] [%#ssimple_recursion'4] result = x}
      (! return' {result}) ]
end
module M_simple_recursion__custom_variant [#"simple_recursion.rs" 17 0 17 46]
  let%span scustom_variant = "custom_variant.rs" 14 8 14 44
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 260 16 266 17
  let%span ssimple_recursion = "simple_recursion.rs" 18 14 18 15
  let%span ssimple_recursion'0 = "simple_recursion.rs" 18 26 18 27
  let%span ssimple_recursion'1 = "simple_recursion.rs" 18 30 18 31
  let%span ssimple_recursion'2 = "simple_recursion.rs" 18 76 18 77
  let%span ssimple_recursion'3 = "simple_recursion.rs" 18 85 18 86
  let%span ssimple_recursion'4 = "simple_recursion.rs" 15 10 15 11
  let%span ssimple_recursion'5 = "simple_recursion.rs" 16 10 16 24
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation [#"custom_variant.rs" 13 4 13 55] (self: t_CustomVariant) (other: t_CustomVariant) =
    [%#scustom_variant] UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec custom_variant [#"simple_recursion.rs" 17 0 17 46] (x: t_CustomVariant) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- x'0.t_CustomVariant__0 = ([%#ssimple_recursion] (0: UInt32.t)) ] s1
      | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb4) ] ]
    | bb2 = s0
      [ s0 = [ &_6 <- x'0.t_CustomVariant__1 = ([%#ssimple_recursion'0] (0: UInt32.t)) ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb4) ] ]
    | bb4 = s0 [ s0 = [ &_0 <- [%#ssimple_recursion'1] (0: UInt32.t) ] s1 | s1 = bb7 ]
    | bb5 = s0
      [ s0 = UInt32.sub {x'0.t_CustomVariant__0} {[%#ssimple_recursion'2] (1: UInt32.t)}
          (fun (_ret: UInt32.t) -> [ &_9 <- _ret ] s1)
      | s1 = UInt32.sub {x'0.t_CustomVariant__1} {[%#ssimple_recursion'3] (1: UInt32.t)}
          (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s2)
      | s2 = [ &_8 <- { t_CustomVariant__0 = _9; t_CustomVariant__1 = _11 } ] s3
      | s3 = custom_variant'0 {_8} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s4)
      | s4 = bb7 ]
    | bb7 = return''0 {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x'0: t_CustomVariant = x
    | & _4: bool = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _8: t_CustomVariant = Any.any_l ()
    | & _9: UInt32.t = Any.any_l ()
    | & _11: UInt32.t = Any.any_l () ]
    [ custom_variant'0 (x'0: t_CustomVariant) (_ret (_r: UInt32.t)) ->
    {[@expl:function variant] well_founded_relation function_variant x'0}
      custom_variant {x'0} (_ret) ] [ function_variant: t_CustomVariant = [%#ssimple_recursion'4] x ])
    [ return''0 (result: UInt32.t) -> {[@expl:custom_variant ensures] [%#ssimple_recursion'5] result = (0: UInt32.t)}
      (! return' {result}) ]
end
module M_simple_recursion__custom_variant__qyi3916446837208929355__no_infinite_decreasing_sequence__refines [#"custom_variant.rs" 20 4 20 68] (* <custom_variant::CustomVariant as creusot_contracts::logic::WellFounded> *)
  let%span scustom_variant = "custom_variant.rs" 20 4 20 68
  let%span scustom_variant'0 = "custom_variant.rs" 14 8 14 44
  let%span smapping = "../../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 260 16 266 17
  
  use creusot.int.UInt32
  use map.Map
  use mach.int.Int
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation [#"custom_variant.rs" 13 4 13 55] (self: t_CustomVariant) (other: t_CustomVariant) =
    [%#scustom_variant'0] UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  function index_logic (self: Map.map int t_CustomVariant) (a: int) : t_CustomVariant = [%#smapping] Map.get self a
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#scustom_variant] forall s: Map.map int t_CustomVariant. forall result: int. not well_founded_relation (index_logic s result) (index_logic s (result
            + 1))
          /\ result >= 0 -> not well_founded_relation (index_logic s result) (index_logic s (result + 1)) /\ result >= 0
end
