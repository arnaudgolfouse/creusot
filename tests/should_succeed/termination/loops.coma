module M_loops__custom_variant__qyi15996144741290779837__no_infinite_decreasing_sequence [#"custom_variant.rs" 19 4 19 68] (* <custom_variant::CustomVariant as creusot_contracts::logic::WellFounded> *)
  let%span scustom_variant = "custom_variant.rs" 17 14 17 25
  let%span scustom_variant'0 = "custom_variant.rs" 18 14 18 68
  let%span scustom_variant'1 = "custom_variant.rs" 16 4 16 12
  let%span scustom_variant'2 = "custom_variant.rs" 22 8 22 61
  let%span scustom_variant'3 = "custom_variant.rs" 13 8 13 44
  let%span swell_founded = "../../../creusot-contracts/src/logic/well_founded.rs" 66 22 66 33
  let%span swell_founded'0 = "../../../creusot-contracts/src/logic/well_founded.rs" 67 22 67 76
  let%span swell_founded'1 = "../../../creusot-contracts/src/logic/well_founded.rs" 62 16 62 28
  let%span smapping = "../../../creusot-contracts/src/logic/mapping.rs" 62 4 62 26
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  
  use creusot.int.UInt32
  use map.Map
  use mach.int.Int
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation [#"custom_variant.rs" 12 4 12 55] (self: t_CustomVariant) (other: t_CustomVariant) =
    [%#scustom_variant'3] UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  function index_logic [@inline:trivial] (self: Map.map int t_CustomVariant) (a: int) : t_CustomVariant =
    [%#smapping] Map.get self a
  
  meta "rewrite_def" function index_logic
  
  predicate well_founded_relation'0 [@inline:trivial] (self: UInt32.t) (other: UInt32.t) =
    [%#swell_founded'1] UInt32.gt self other
  
  meta "rewrite_def" predicate well_founded_relation'0
  
  function index_logic'0 [@inline:trivial] (self: Map.map int UInt32.t) (a: int) : UInt32.t =
    [%#smapping] Map.get self a
  
  meta "rewrite_def" function index_logic'0
  
  function no_infinite_decreasing_sequence (s: Map.map int UInt32.t) : int
  
  axiom no_infinite_decreasing_sequence_spec:
    forall s: Map.map int UInt32.t. [%#swell_founded] no_infinite_decreasing_sequence s >= 0
  
  axiom no_infinite_decreasing_sequence_spec'0:
    forall s: Map.map int UInt32.t. [%#swell_founded'0] not well_founded_relation'0 (index_logic'0 s (no_infinite_decreasing_sequence s)) (index_logic'0 s (no_infinite_decreasing_sequence s
      + 1))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant s : Map.map int t_CustomVariant
  
  function no_infinite_decreasing_sequence'0 [#"custom_variant.rs" 19 4 19 68] (s'0: Map.map int t_CustomVariant) : int
  
  goal vc_no_infinite_decreasing_sequence:
    ([%#swell_founded] no_infinite_decreasing_sequence ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0)
        >= 0)
      && ([%#swell_founded'0] not well_founded_relation'0 (index_logic'0 ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0) (no_infinite_decreasing_sequence ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0))) (index_logic'0 ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0) (no_infinite_decreasing_sequence ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0)
      + 1)))
    -> (let result = no_infinite_decreasing_sequence ([%#scustom_variant'1] fun (i: int) -> (index_logic s i).t_CustomVariant__0) in ([@expl:no_infinite_decreasing_sequence ensures #0] [%#scustom_variant] result
      >= 0)
    && ([@expl:no_infinite_decreasing_sequence ensures #1] [%#scustom_variant'0] not well_founded_relation (index_logic s result) (index_logic s (result
    + 1))))
end
module M_loops__variant_int [#"loops.rs" 9 0 9 37]
  let%span swell_founded = "../../../creusot-contracts/src/logic/well_founded.rs" 62 16 62 28
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  let%span sloops = "loops.rs" 10 21 10 22
  let%span sloops'0 = "loops.rs" 11 26 11 28
  let%span sloops'1 = "loops.rs" 12 14 12 15
  let%span sloops'2 = "loops.rs" 13 16 13 38
  let%span sloops'3 = "loops.rs" 14 14 14 15
  let%span sloops'4 = "loops.rs" 15 13 15 14
  let%span sloops'5 = "loops.rs" 16 18 16 19
  let%span sloops'6 = "loops.rs" 8 10 8 21
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation [@inline:trivial] (self: UInt32.t) (other: UInt32.t) =
    [%#swell_founded] UInt32.gt self other
  
  meta "rewrite_def" predicate well_founded_relation
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec variant_int [#"loops.rs" 9 0 9 37] (x: UInt32.t) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &result <- [%#sloops] (0: UInt32.t) ] s1
      | s1 = [ &total <- [%#sloops'0] UInt32.t'int x'0 ] s2
      | s2 = bb2 ]
    | bb2 = bb2invariant
      [ bb2'0 = {[@expl:loop variant] well_founded_relation variant_old_bb2 x'0} bb2invariant
      | bb2invariant = {[@expl:loop invariant] [%#sloops'2] total = UInt32.t'int x'0 + UInt32.t'int result}
        (! [ &variant_old_bb2 <- [%#sloops'1] x'0 ] s0)
        [ s0 = bb3 ]
        [ bb3 = s0
          [ s0 = [ &_11 <- UInt32.gt x'0 ([%#sloops'3] (0: UInt32.t)) ] s1
          | s1 = any [ br0 -> {_11 = false} (! bb5) | br1 -> {_11} (! bb4) ] ]
        | bb4 = s0
          [ s0 = UInt32.sub {x'0} {[%#sloops'4] (1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &x'0 <- _ret ] s1)
          | s1 = UInt32.add {result} {[%#sloops'5] (1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &result <- _ret ] s2)
          | s2 = bb2'0 ] ] ]
    | bb5 = s0 [ s0 = [ &_0 <- result ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x'0: UInt32.t = x
    | & result: UInt32.t = Any.any_l ()
    | & total: int = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & variant_old_bb2: UInt32.t = Any.any_l () ])
    [ return''0 (result: UInt32.t) -> {[@expl:variant_int ensures] [%#sloops'6] result = x} (! return' {result}) ]
end
module M_loops__custom_variant [#"loops.rs" 23 0 23 50]
  let%span scustom_variant = "custom_variant.rs" 13 8 13 44
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  let%span sloops = "loops.rs" 24 21 24 22
  let%span sloops'0 = "loops.rs" 25 24 25 44
  let%span sloops'1 = "loops.rs" 26 14 26 15
  let%span sloops'2 = "loops.rs" 27 16 27 54
  let%span sloops'3 = "loops.rs" 28 16 28 17
  let%span sloops'4 = "loops.rs" 28 27 28 28
  let%span sloops'5 = "loops.rs" 29 15 29 16
  let%span sloops'6 = "loops.rs" 30 15 30 16
  let%span sloops'7 = "loops.rs" 31 18 31 19
  let%span sloops'8 = "loops.rs" 22 10 22 41
  
  use creusot.int.UInt32
  use int.MinMax
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation [#"custom_variant.rs" 12 4 12 55] (self: t_CustomVariant) (other: t_CustomVariant) =
    [%#scustom_variant] UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec custom_variant [#"loops.rs" 23 0 23 50] (x: t_CustomVariant) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &result <- [%#sloops] (0: UInt32.t) ] s1
      | s1 =
        [ &res <- [%#sloops'0] MinMax.min (UInt32.t'int x'0.t_CustomVariant__0) (UInt32.t'int x'0.t_CustomVariant__1) ]
        s2
      | s2 = bb2 ]
    | bb2 = bb2invariant
      [ bb2'0 = {[@expl:loop variant] well_founded_relation variant_old_bb2 x'0} bb2invariant
      | bb2invariant =
        {[@expl:loop invariant] [%#sloops'2] MinMax.min (UInt32.t'int x'0.t_CustomVariant__0) (UInt32.t'int x'0.t_CustomVariant__1)
          + UInt32.t'int result
        = res}
        (! [ &variant_old_bb2 <- [%#sloops'1] x'0 ] s0)
        [ s0 = bb3 ]
        [ bb3 = s0
          [ s0 = [ &_11 <- UInt32.gt x'0.t_CustomVariant__0 ([%#sloops'3] (0: UInt32.t)) ] s1
          | s1 = any [ br0 -> {_11 = false} (! bb8) | br1 -> {_11} (! bb4) ] ]
        | bb4 = s0
          [ s0 = [ &_13 <- UInt32.gt x'0.t_CustomVariant__1 ([%#sloops'4] (0: UInt32.t)) ] s1
          | s1 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb5) ] ]
        | bb5 = s0
          [ s0 = UInt32.sub {x'0.t_CustomVariant__0} {[%#sloops'5] (1: UInt32.t)}
              (fun (_ret: UInt32.t) -> [ &x'0 <- { x'0 with t_CustomVariant__0 = _ret } ] s1)
          | s1 = UInt32.sub {x'0.t_CustomVariant__1} {[%#sloops'6] (1: UInt32.t)}
              (fun (_ret: UInt32.t) -> [ &x'0 <- { x'0 with t_CustomVariant__1 = _ret } ] s2)
          | s2 = UInt32.add {result} {[%#sloops'7] (1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &result <- _ret ] s3)
          | s3 = bb2'0 ] ] ]
    | bb8 = s0 [ s0 = [ &_0 <- result ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x'0: t_CustomVariant = x
    | & result: UInt32.t = Any.any_l ()
    | & res: int = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & variant_old_bb2: t_CustomVariant = Any.any_l () ])
    [ return''0 (result: UInt32.t) -> {[@expl:custom_variant ensures] [%#sloops'8] UInt32.t'int result
      = MinMax.min (UInt32.t'int x.t_CustomVariant__0) (UInt32.t'int x.t_CustomVariant__1)}
      (! return' {result}) ]
end
module M_loops__custom_variant__qyi15996144741290779837__no_infinite_decreasing_sequence__refines [#"custom_variant.rs" 19 4 19 68] (* <custom_variant::CustomVariant as creusot_contracts::logic::WellFounded> *)
  let%span scustom_variant = "custom_variant.rs" 19 4 19 68
  let%span scustom_variant'0 = "custom_variant.rs" 13 8 13 44
  let%span smapping = "../../../creusot-contracts/src/logic/mapping.rs" 62 4 62 26
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  
  use creusot.int.UInt32
  use map.Map
  use mach.int.Int
  
  type t_CustomVariant = { t_CustomVariant__0: UInt32.t; t_CustomVariant__1: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation [#"custom_variant.rs" 12 4 12 55] (self: t_CustomVariant) (other: t_CustomVariant) =
    [%#scustom_variant'0] UInt32.gt self.t_CustomVariant__0 other.t_CustomVariant__0
    /\ UInt32.gt self.t_CustomVariant__1 other.t_CustomVariant__1
  
  function index_logic [@inline:trivial] (self: Map.map int t_CustomVariant) (a: int) : t_CustomVariant =
    [%#smapping] Map.get self a
  
  meta "rewrite_def" function index_logic
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#scustom_variant] forall s: Map.map int t_CustomVariant. forall result: int. not well_founded_relation (index_logic s result) (index_logic s (result
            + 1))
          /\ result >= 0 -> not well_founded_relation (index_logic s result) (index_logic s (result + 1)) /\ result >= 0
end
