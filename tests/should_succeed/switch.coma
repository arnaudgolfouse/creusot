module M_switch__test [#"switch.rs" 9 0 9 35]
  let%span sswitch = "switch.rs" 12 16 12 21
  let%span sswitch'0 = "switch.rs" 11 23 11 24
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Option  =
    | C_Some UInt32.t
    | C_None
  
  let rec v_Some (input:t_Option) (ret  (field_0:UInt32.t))= any
    [ good (field_0:UInt32.t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt32.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec test[#"switch.rs" 9 0 9 35] (o:t_Option) (return'  (x:bool))= (! bb0
    [ bb0 = any [ br0 (x0:UInt32.t)-> {o'0 = C_Some x0} (! bb2) | br1 -> {o'0 = C_None} (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sswitch] false ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Some {o'0} (fun (r0:UInt32.t) ->  [ &x <- r0 ] s1)
      | s1 =  [ &_0 <- UInt32.gt x ([%#sswitch'0] (0: UInt32.t)) ] s2
      | s2 = bb5 ]
    
    | bb5 = return''0 {_0} ]
    ) [ & _0: bool = Any.any_l () | & o'0: t_Option = o | & x: UInt32.t = Any.any_l () ] 
    [ return''0 (result:bool)-> (! return' {result}) ]

end
module M_switch__test2 [#"switch.rs" 16 0 16 42]
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Option  =
    | C_Some UInt32.t
    | C_None
  
  type tuple  =
    { _p0: t_Option; _p1: UInt32.t }
  
  let rec v_Some (input:t_Option) (ret  (field_0:UInt32.t))= any
    [ good (field_0:UInt32.t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt32.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec test2[#"switch.rs" 16 0 16 42] (o:tuple) (return'  (x:UInt32.t))= (! bb0
    [ bb0 = any [ br0 (x0:UInt32.t)-> {o'0._p0 = C_Some x0} (! bb2) | br1 -> {o'0._p0 = C_None} (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- o'0._p1 ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0 [ s0 = v_Some {o'0._p0} (fun (r0:UInt32.t) ->  [ &x <- r0 ] s1) | s1 =  [ &_0 <- x ] s2 | s2 = bb5 ] 
    | bb5 = return''0 {_0} ]
    ) [ & _0: UInt32.t = Any.any_l () | & o'0: tuple = o | & x: UInt32.t = Any.any_l () ] 
    [ return''0 (result:UInt32.t)-> (! return' {result}) ]

end
