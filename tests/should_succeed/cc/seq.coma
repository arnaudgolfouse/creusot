module M_seq__f
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.int.Int128
  use mach.int.Int
  use creusot.prelude.Any
  
  let rec new (return (x: Seq.seq (MutBorrow.t UInt64.t))) = any
    [ return' (result: Seq.seq (MutBorrow.t UInt64.t)) -> {result = (Seq.empty: Seq.seq (MutBorrow.t UInt64.t))}
      (! return {result}) ]
  
  let rec into_inner (self: Seq.seq (MutBorrow.t UInt64.t)) (return (x: Seq.seq (MutBorrow.t UInt64.t))) = any
    [ return' (result: Seq.seq (MutBorrow.t UInt64.t)) -> {result = self} (! return {result}) ]
  
  function push_front [@inline:trivial] (self: Seq.seq (MutBorrow.t UInt64.t)) (x: MutBorrow.t UInt64.t) : Seq.seq (MutBorrow.t UInt64.t)
   = Seq.cons x self
  
  meta "rewrite_def" function push_front
  
  let rec push_front_ghost (self: MutBorrow.t (Seq.seq (MutBorrow.t UInt64.t))) (x: MutBorrow.t UInt64.t)
    (return (x'0: ())) = any [ return' (result: ()) -> {self.final = push_front self.current x} (! return {result}) ]
  
  let rec new'0 (value: Int128.t) (return (x: int)) = any
    [ return' (result: int) -> {result = Int128.to_int value} (! return {result}) ]
  
  let rec deref (self: int) (return (x: int)) = any [ return' (result: int) -> {result = self} (! return {result}) ]
  
  type t_Option = C_None | C_Some (MutBorrow.t (MutBorrow.t UInt64.t))
  
  type t_Option'0 = C_None'0 | C_Some'0 (MutBorrow.t UInt64.t)
  
  function get (self: Seq.seq (MutBorrow.t UInt64.t)) (ix: int) : t_Option'0 = if 0 <= ix /\ ix < Seq.length self then
      C_Some'0 (Seq.get self ix)
    else
      C_None'0
  
  
  let rec get_mut_ghost (self: MutBorrow.t (Seq.seq (MutBorrow.t UInt64.t))) (index: int) (return (x: t_Option)) = any
    [ return' (result: t_Option) -> {match result with
        | C_None -> get self.current index = C_None'0 /\ self.current = self.final
        | C_Some r -> get self.current index = C_Some'0 (r.current) /\ r.final = Seq.get self.final index
        end}
      {forall i: int. i <> index -> get self.current i = get self.final i}
      {Seq.length self.current = Seq.length self.final}
      (! return {result}) ]
  
  let rec unwrap (self_: t_Option) (return (x: MutBorrow.t (MutBorrow.t UInt64.t))) = {[@expl:unwrap requires] self_
    <> C_None}
    any [ return' (result: MutBorrow.t (MutBorrow.t UInt64.t)) -> {C_Some result = self_} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t (MutBorrow.t UInt64.t)) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t UInt64.t)) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt64.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt64.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (self: t_Option'0) =
    match self with
      | C_Some'0 x -> resolve'2 x
      | C_None'0 -> true
      end
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_1: t_Option'0) = resolve'3 _1
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 (self: Seq.seq (MutBorrow.t UInt64.t)) = forall i: int. resolve'4 (get self i)
  
  predicate resolve'6 [@inline:trivial] (_1: Seq.seq (MutBorrow.t UInt64.t)) = resolve'5 _1
  
  meta "rewrite_def" predicate resolve'6
  
  let rec new'1 (x: UInt64.t) (return (x'0: UInt64.t)) = any
    [ return' (result: UInt64.t) -> {result = x} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: UInt64.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (0: UInt64.t) ] s1
      | s1 = new (fun (_ret: Seq.seq (MutBorrow.t UInt64.t)) -> [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = into_inner {_5} (fun (_ret: Seq.seq (MutBorrow.t UInt64.t)) -> [ &s <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <UInt64.t> {x}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &_8 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_mut <Seq.seq (MutBorrow.t UInt64.t)> {s}
          (fun (_ret: MutBorrow.t (Seq.seq (MutBorrow.t UInt64.t))) -> [ &_7 <- _ret ] [ &s <- _ret.final ] s2)
      | s2 = push_front_ghost {_7} {_8} (fun (_ret: ()) -> [ &_6 <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0 [ s0 = new'0 {(0: Int128.t)} (fun (_ret: int) -> [ &_15 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = deref {_15} (fun (_ret: int) -> [ &_13 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = MutBorrow.borrow_mut <Seq.seq (MutBorrow.t UInt64.t)> {s}
          (fun (_ret: MutBorrow.t (Seq.seq (MutBorrow.t UInt64.t))) -> [ &_11 <- _ret ] [ &s <- _ret.final ] s1)
      | s1 = get_mut_ghost {_11} {_13} (fun (_ret: t_Option) -> [ &_10 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0 [ s0 = unwrap {_10} (fun (_ret: MutBorrow.t (MutBorrow.t UInt64.t)) -> [ &_9 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_9 <- { _9 with current = { _9.current with current = (1: UInt64.t) } } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'6 s}- s3
      | s3 = new'1 {x} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s4)
      | s4 = bb8 ]
    | bb8 = return {_0} ]
    [ & _0: UInt64.t = Any.any_l ()
    | & x: UInt64.t = Any.any_l ()
    | & s: Seq.seq (MutBorrow.t UInt64.t) = Any.any_l ()
    | & _5: Seq.seq (MutBorrow.t UInt64.t) = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: MutBorrow.t (Seq.seq (MutBorrow.t UInt64.t)) = Any.any_l ()
    | & _8: MutBorrow.t UInt64.t = Any.any_l ()
    | & _9: MutBorrow.t (MutBorrow.t UInt64.t) = Any.any_l ()
    | & _10: t_Option = Any.any_l ()
    | & _11: MutBorrow.t (Seq.seq (MutBorrow.t UInt64.t)) = Any.any_l ()
    | & _13: int = Any.any_l ()
    | & _15: int = Any.any_l () ])
    [ return (result: UInt64.t) -> {[@expl:f ensures] result = (1: UInt64.t)} (! return {result}) ]
end
