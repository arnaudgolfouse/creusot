module M_fset__map_spec [#"fset.rs" 8 0 8 23]
  let%span sfset = "fset.rs" 7 10 7 123
  let%span sfset'0 = "../../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfset'1 = "../../../creusot-contracts/src/logic/fset.rs" 233 8 233 27
  
  use set.Fset
  use map.Map
  use creusot.prelude.Any
  
  type t_U
  
  predicate contains [@inline:trivial] (self: Fset.fset t_U) (e: t_U) =
    [%#sfset'0] Fset.mem e self
  
  type t_T
  
  function map (self: Fset.fset t_T) (f: Map.map t_T t_U) : Fset.fset t_U =
    [%#sfset'1] Fset.map f self
  
  predicate contains'0 [@inline:trivial] (self: Fset.fset t_T) (e: t_T) =
    [%#sfset'0] Fset.mem e self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec map_spec[#"fset.rs" 8 0 8 23] (return'  (x:()))= (! bb0 [ bb0 = return''0 {_0} ] )
    [ & _0: () = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:map_spec ensures] [%#sfset] forall xs: Fset.fset t_T, f: Map.map t_T t_U, y: t_U. contains (map xs f) y
      = (exists x: t_T. contains'0 xs x /\ Map.get f x = y)}
      (! return' {result}) ]

end
module M_fset__filter_spec [#"fset.rs" 11 0 11 23]
  let%span sfset = "fset.rs" 10 10 10 113
  let%span sfset'0 = "../../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  
  use set.Fset
  use map.Map
  use creusot.prelude.Any
  
  type t_T
  
  predicate contains [@inline:trivial] (self: Fset.fset t_T) (e: t_T) =
    [%#sfset'0] Fset.mem e self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec filter_spec[#"fset.rs" 11 0 11 23] (return'  (x:()))= (! bb0 [ bb0 = return''0 {_0} ] )
    [ & _0: () = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:filter_spec ensures] [%#sfset] forall xs: Fset.fset t_T, f: Map.map t_T bool, x: t_T. contains (Fset.filter xs f) x
      = (contains xs x /\ Map.get f x)}
      (! return' {result}) ]

end
module M_fset__interval_spec [#"fset.rs" 14 0 14 22]
  let%span sfset = "fset.rs" 13 10 13 79
  let%span sfset'0 = "../../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  
  use set.Fset
  use set.FsetInt
  use mach.int.Int
  use creusot.prelude.Any
  
  predicate contains [@inline:trivial] (self: Fset.fset int) (e: int) =
    [%#sfset'0] Fset.mem e self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec interval_spec[#"fset.rs" 14 0 14 22] (return'  (x:()))= (! bb0 [ bb0 = return''0 {_0} ] )
    [ & _0: () = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:interval_spec ensures] [%#sfset] forall i: int, j: int, k: int. contains (FsetInt.interval i j) k
      = (i <= k /\ k < j)}
      (! return' {result}) ]

end
