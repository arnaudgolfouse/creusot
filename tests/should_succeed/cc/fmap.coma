module M_fmap__resolves
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use map.Map
  use mach.int.Int
  use map.Const
  use seq.Seq
  use creusot.prelude.Any
  
  type t_FMap
  
  type t_Option = C_None | C_Some (MutBorrow.t UInt64.t)
  
  function view (self: t_FMap) : Map.map (MutBorrow.t UInt64.t) t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: MutBorrow.t UInt64.t) : t_Option = Map.get (view self) k
  
  meta "rewrite_def" function get
  
  predicate ext_eq (self: t_FMap) (other: t_FMap) = forall k: MutBorrow.t UInt64.t. get self k = get other k
  
  axiom ext_eq_spec: forall self: t_FMap, other: t_FMap. ext_eq self other = (self = other)
  
  function len (self: t_FMap) : int
  
  axiom len_spec: forall self: t_FMap. len self >= 0
  
  constant empty : t_FMap
  
  axiom empty_spec: len empty = 0
  
  axiom empty_spec'0: view empty = Const.const (C_None)
  
  predicate is_empty (self: t_FMap) = ext_eq self empty
  
  let rec new (return (x: t_FMap)) = any [ return (result: t_FMap) -> {is_empty result} (! return {result}) ]
  
  let rec into_inner (self: t_FMap) (return (x: t_FMap)) = any
    [ return (result: t_FMap) -> {result = self} (! return {result}) ]
  
  predicate contains [@inline:trivial] (self: t_FMap) (k: MutBorrow.t UInt64.t) = get self k <> C_None
  
  meta "rewrite_def" predicate contains
  
  function insert (self: t_FMap) (k: MutBorrow.t UInt64.t) (v: MutBorrow.t UInt64.t) : t_FMap
  
  axiom insert_spec: forall self: t_FMap, k: MutBorrow.t UInt64.t, v: MutBorrow.t UInt64.t. view (insert self k v)
      = Map.set (view self) k (C_Some v)
  
  axiom insert_spec'0: forall self: t_FMap, k: MutBorrow.t UInt64.t, v: MutBorrow.t UInt64.t. len (insert self k v)
      = (if contains self k then len self else len self + 1)
  
  let rec insert_ghost (self: MutBorrow.t t_FMap) (key: MutBorrow.t UInt64.t) (value: MutBorrow.t UInt64.t)
    (return (x: t_Option)) = any
    [ return (result: t_Option) -> {self.final = insert self.current key value}
      {result = get self.current key}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt64.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t UInt64.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve'0 x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: t_Option) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  type t_FMapIter
  
  predicate inv (_1: t_FMapIter)
  
  function view'0 (self: t_FMapIter) : t_FMap
  
  let rec into_iter (self: t_FMap) (return (x: t_FMapIter)) = any
    [ return (result: t_FMapIter) -> {inv result} {view'0 result = self} (! return {result}) ]
  
  type tuple = { f0: MutBorrow.t UInt64.t; f1: MutBorrow.t UInt64.t }
  
  predicate well_founded_relation [@inline:trivial] (self: int) (other: int) = self >= 0 /\ self > other
  
  meta "rewrite_def" predicate well_founded_relation
  
  function fin [@inline:trivial] (self: MutBorrow.t UInt64.t) : UInt64.t = self.final
  
  meta "rewrite_def" function fin
  
  type t_Option'0 = C_None'0 | C_Some'0 tuple
  
  function get'0 (self: Seq.seq tuple) (ix: int) : t_Option'0 = if 0 <= ix /\ ix < Seq.length self then
      C_Some'0 (Seq.get self ix)
    else
      C_None'0
  
  
  predicate produces (self: t_FMapIter) (visited: Seq.seq tuple) (o: t_FMapIter) =
    (forall i: int, j: int. 0 <= i /\ i < j /\ j < Seq.length visited
        -> (Seq.get visited i).f0 <> (Seq.get visited j).f0)
    /\ (forall k: MutBorrow.t UInt64.t, v: MutBorrow.t UInt64.t, i: int. get'0 visited i = C_Some'0 { f0 = k; f1 = v }
        -> not contains (view'0 o) k /\ get (view'0 self) k = C_Some v)
    /\ len (view'0 self) = Seq.length visited + len (view'0 o)
    /\ (forall k: MutBorrow.t UInt64.t. (forall i: int. 0 <= i /\ i < Seq.length visited -> (Seq.get visited i).f0 <> k)
      -> get (view'0 o) k = get (view'0 self) k)
  
  function produces_trans (a: t_FMapIter) (ab: Seq.seq tuple) (b: t_FMapIter) (bc: Seq.seq tuple) (c: t_FMapIter) : ()
  
  axiom produces_trans_spec:
    forall a: t_FMapIter, ab: Seq.seq tuple, b: t_FMapIter, bc: Seq.seq tuple, c: t_FMapIter. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_FMapIter) : ()
  
  axiom produces_refl_spec: forall self: t_FMapIter. produces self (Seq.empty: Seq.seq tuple) self
  
  predicate inv'0 (_1: Seq.seq tuple)
  
  axiom inv_axiom [@rewrite]: forall x: Seq.seq tuple [inv'0 x]. inv'0 x = true
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_FMapIter) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 (_1: MutBorrow.t t_FMapIter)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_FMapIter [inv'1 x]. inv'1 x = invariant' x
  
  predicate completed (self: MutBorrow.t t_FMapIter) = is_empty (view'0 self.current)
  
  let rec next (self: MutBorrow.t t_FMapIter) (return (x: t_Option'0)) = {[@expl:next 'self' type invariant] inv'1 self}
    any
    [ return (result: t_Option'0) -> {match result with
        | C_None'0 -> completed self
        | C_Some'0 {f0 = k; f1 = v} -> produces self.current (Seq.singleton { f0 = k; f1 = v }) self.final
        /\ view'0 self.current = insert (view'0 self.final) k v
        end}
      (! return {result}) ]
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_FMapIter) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_1: MutBorrow.t t_FMapIter) = resolve'3 _1
  
  meta "rewrite_def" predicate resolve'4
  
  let rec v_Some (input: t_Option'0) (ret (field_0: tuple)) = any
    [ good (field_0: tuple) -> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: tuple [C_Some'0 field_0: t_Option'0]. C_Some'0 field_0 <> input} (! {false} any) ]
  
  predicate resolve'5 (self: t_FMap) =
    forall k: MutBorrow.t UInt64.t, v: MutBorrow.t UInt64.t. get self k = C_Some v -> resolve'0 k /\ resolve'0 v
  
  predicate resolve'6 [@inline:trivial] (_1: t_FMap) = resolve'5 _1
  
  meta "rewrite_def" predicate resolve'6
  
  predicate resolve'7 (self: t_FMapIter) = resolve'6 (view'0 self)
  
  predicate resolve'8 [@inline:trivial] (_1: t_FMapIter) = resolve'7 _1
  
  meta "rewrite_def" predicate resolve'8
  
  let rec new'0 (x: UInt64.t) (return (x'0: UInt64.t)) = any
    [ return (result: UInt64.t) -> {result = x} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec resolves (return (x: UInt64.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &k <- (0: UInt64.t) ] s1
      | s1 = [ &v <- (0: UInt64.t) ] s2
      | s2 = new (fun (_ret: t_FMap) -> [ &_6 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = into_inner {_6} (fun (_ret: t_FMap) -> [ &s <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <UInt64.t> {k}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &bor_k <- _ret ] [ &k <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_mut <UInt64.t> {v}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &bor_v <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = [ &snap_k <- bor_k ] s3
      | s3 = bb3 ]
    | bb3 = s0 [ s0 = [ &snap_v <- bor_v ] s1 | s1 = bb4 ]
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <t_FMap> {s}
          (fun (_ret: MutBorrow.t t_FMap) -> [ &_14 <- _ret ] [ &s <- _ret.final ] s1)
      | s1 = insert_ghost {_14} {bor_k} {bor_v} (fun (_ret: t_Option) -> [ &_13 <- _ret ] s2)
      | s2 = -{resolve'2 _13}- s3
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = into_iter {s} (fun (_ret: t_FMapIter) -> [ &iter <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb7 ]
    | bb7 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq tuple ] s1 | s1 = bb9 ]
    | bb9 = bb9invariant
      [ bb9 = {[@expl:loop variant] well_founded_relation variant_old_bb9 (1 - Seq.length produced)} bb9invariant
      | bb9invariant = {[@expl:for invariant] inv'0 produced}
        {[@expl:for invariant] inv iter}
        {[@expl:for invariant] produces iter_old produced iter}
        {[@expl:loop invariant #0] Seq.length produced <= 1}
        {[@expl:loop invariant #1] Seq.length produced = 0 \/ fin snap_k = (1: UInt64.t) /\ fin snap_v = (1: UInt64.t)}
        (! [ &variant_old_bb9 <- 1 - Seq.length produced ] s0)
        [ s0 = bb10 ]
        [ bb10 = s0
          [ s0 = {inv iter}
            MutBorrow.borrow_mut <t_FMapIter> {iter}
              (fun (_ret: MutBorrow.t t_FMapIter) -> [ &_34 <- _ret ] -{inv _ret.final}- [ &iter <- _ret.final ] s1)
          | s1 = {inv _34.current}
            MutBorrow.borrow_final <t_FMapIter> {_34.current} {MutBorrow.get_id _34}
              (fun (_ret: MutBorrow.t t_FMapIter) ->
                [ &_33 <- _ret ] -{inv _ret.final}-
                [ &_34 <- { _34 with current = _ret.final } ] s2)
          | s2 = next {_33} (fun (_ret: t_Option'0) -> [ &_32 <- _ret ] s3)
          | s3 = bb11 ]
        | bb11 = s0
          [ s0 = {[@expl:type invariant] inv'1 _34} s1
          | s1 = -{resolve'4 _34}- s2
          | s2 = any [ br0 -> {_32 = C_None'0} (! bb14) | br1 (x0: tuple) -> {_32 = C_Some'0 x0} (! bb15) ] ]
        | bb15 = s0
          [ s0 = v_Some {_32} (fun (r0: tuple) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_37 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb16 ]
        | bb16 = s0
          [ s0 = [ &produced <- _37 ] s1
          | s1 = [ &k2 <- __creusot_proc_iter_elem.f0 ] s2
          | s2 = [ &v2 <- __creusot_proc_iter_elem.f1 ] s3
          | s3 = [ &k2 <- { k2 with current = (1: UInt64.t) } ] s4
          | s4 = -{resolve'0 k2}- s5
          | s5 = [ &v2 <- { v2 with current = (1: UInt64.t) } ] s6
          | s6 = -{resolve'0 v2}- s7
          | s7 = bb9 ] ] ]
    | bb14 = s0
      [ s0 = {[@expl:type invariant] inv iter} s1
      | s1 = -{resolve'8 iter}- s2
      | s2 = UInt64.add {k} {v} (fun (_ret: UInt64.t) -> [ &_2 <- _ret ] s3)
      | s3 = new'0 {_2} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s4)
      | s4 = bb17 ]
    | bb17 = return {_0} ]
    [ & _0: UInt64.t = Any.any_l ()
    | & _2: UInt64.t = Any.any_l ()
    | & k: UInt64.t = Any.any_l ()
    | & v: UInt64.t = Any.any_l ()
    | & s: t_FMap = Any.any_l ()
    | & _6: t_FMap = Any.any_l ()
    | & bor_k: MutBorrow.t UInt64.t = Any.any_l ()
    | & bor_v: MutBorrow.t UInt64.t = Any.any_l ()
    | & snap_k: MutBorrow.t UInt64.t = Any.any_l ()
    | & snap_v: MutBorrow.t UInt64.t = Any.any_l ()
    | & _13: t_Option = Any.any_l ()
    | & _14: MutBorrow.t t_FMap = Any.any_l ()
    | & iter: t_FMapIter = Any.any_l ()
    | & iter_old: t_FMapIter = Any.any_l ()
    | & produced: Seq.seq tuple = Any.any_l ()
    | & _32: t_Option'0 = Any.any_l ()
    | & _33: MutBorrow.t t_FMapIter = Any.any_l ()
    | & _34: MutBorrow.t t_FMapIter = Any.any_l ()
    | & __creusot_proc_iter_elem: tuple = Any.any_l ()
    | & _37: Seq.seq tuple = Any.any_l ()
    | & k2: MutBorrow.t UInt64.t = Any.any_l ()
    | & v2: MutBorrow.t UInt64.t = Any.any_l ()
    | & variant_old_bb9: int = Any.any_l () ])
    [ return (result: UInt64.t) -> {[@expl:resolves ensures] result = (2: UInt64.t)} (! return {result}) ]
end
