module M_index_range__create_arr
  use seq.Seq
  use creusot.int.Int32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec new (return (x: t_Vec)) = any [ return (result: t_Vec) -> {Seq.length (view result) = 0} (! return {result}) ]
  
  let rec push (self_: MutBorrow.t t_Vec) (v: Int32.t) (return (x: ())) = any
    [ return (result: ()) -> {view self_.final = Seq.snoc (view self_.current) v} (! return {result}) ]
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec create_arr (return (x: t_Vec)) = (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: t_Vec) -> [ &arr <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_4 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = push {_4} {(0: Int32.t)} (fun (_ret: ()) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_6 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = push {_6} {(1: Int32.t)} (fun (_ret: ()) -> [ &_5 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_8 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = push {_8} {(2: Int32.t)} (fun (_ret: ()) -> [ &_7 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_10 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = push {_10} {(3: Int32.t)} (fun (_ret: ()) -> [ &_9 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_12 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = push {_12} {(4: Int32.t)} (fun (_ret: ()) -> [ &_11 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0 [ s0 = [ &_0 <- arr ] s1 | s1 = bb7 ]
    | bb7 = return {_0} ]
    [ & _0: t_Vec = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & _3: () = Any.any_l ()
    | & _4: MutBorrow.t t_Vec = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _6: MutBorrow.t t_Vec = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t t_Vec = Any.any_l ()
    | & _9: () = Any.any_l ()
    | & _10: MutBorrow.t t_Vec = Any.any_l ()
    | & _11: () = Any.any_l ()
    | & _12: MutBorrow.t t_Vec = Any.any_l () ])
    [ return (result: t_Vec) -> {[@expl:create_arr ensures] Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return {result}) ]
end
module M_index_range__test_range
  use seq.Seq
  use creusot.int.Int32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_Vec
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  let rec create_arr (return (x: t_Vec)) = any
    [ return (result: t_Vec) -> {Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return {result}) ]
  
  type t_Range = { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  predicate in_bounds (self: t_Range) (seq: Seq.seq Int32.t) =
    UInt64.t'int self.t_Range__start <= UInt64.t'int self.t_Range__end
    /\ UInt64.t'int self.t_Range__end <= Seq.length seq
  
  predicate has_value (self: t_Range) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    Seq.([..]) seq (UInt64.t'int self.t_Range__start) (UInt64.t'int self.t_Range__end) = Slice64.view out
  
  let rec index (self_: t_Vec) (ix: t_Range) (return (x: Slice64.slice Int32.t)) =
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return (result: Slice64.slice Int32.t) -> {has_value ix (view self_) result} (! return {result}) ]
  
  let rec len (self_: Slice64.slice Int32.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {Seq.length (Slice64.view self_) = UInt64.t'int result} (! return {result}) ]
  
  let rec deref (self_: t_Vec) (return (x: Slice64.slice Int32.t)) = any
    [ return (result: Slice64.slice Int32.t) -> {Slice64.view result = view self_} (! return {result}) ]
  
  type t_Option = C_None | C_Some (Slice64.slice Int32.t)
  
  let rec get (self_: Slice64.slice Int32.t) (ix: t_Range) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {in_bounds ix (Slice64.view self_)
      -> (exists r: Slice64.slice Int32.t. result = C_Some r /\ has_value ix (Slice64.view self_) r)}
      {in_bounds ix (Slice64.view self_) \/ result = C_None}
      (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  predicate resolve_elswhere (self: t_Range) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    forall i: int. 0 <= i
        /\ (i < UInt64.t'int self.t_Range__start \/ UInt64.t'int self.t_Range__end <= i) /\ i < Seq.length old'
      -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: t_Range) (return (x: MutBorrow.t (Slice64.slice Int32.t))) =
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return (result: MutBorrow.t (Slice64.slice Int32.t)) -> {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice Int32.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  let rec len'0 (self_: t_Vec) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds'0
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value'0
  
  let rec index'0 (self_: t_Vec) (ix: UInt64.t) (return (x: Int32.t)) =
    {[@expl:index requires] in_bounds'0 ix (view self_)}
    any [ return (result: Int32.t) -> {has_value'0 ix (view self_) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_range (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret: t_Vec) -> [ &arr <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_5 <- { t_Range__start = (0: UInt64.t); t_Range__end = (2: UInt64.t) } ] s1
      | s1 = index {arr} {_5} (fun (_ret: Slice64.slice Int32.t) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s2) | s2 = bb3 ]
    | bb3 = s0
      [ s0 = [ &_7 <- _8 = (2: UInt64.t) ] s1 | s1 = any [ br0 -> {_7 = false} (! bb12) | br1 -> {_7} (! bb4) ] ]
    | bb4 = s0
      [ s0 = [ &_12 <- (0: UInt64.t) ] s1
      | s1 = [ &_13 <- Slice64.length s ] s2
      | s2 = [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] _14} s4
      | s4 = bb5 ]
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r: Int32.t) -> [ &_10 <- r = (0: Int32.t) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb12) | br1 -> {_10} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_17 <- (1: UInt64.t) ] s1
      | s1 = [ &_18 <- Slice64.length s ] s2
      | s2 = [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] _19} s4
      | s4 = bb7 ]
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r: Int32.t) -> [ &_15 <- r = (1: Int32.t) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb12) | br1 -> {_15} (! bb8) ] ]
    | bb8 = s0
      [ s0 = [ &_24 <- { t_Range__start = (3: UInt64.t); t_Range__end = (5: UInt64.t) } ] s1
      | s1 = index {arr} {_24} (fun (_ret: Slice64.slice Int32.t) -> [ &_22 <- _ret ] s2)
      | s2 = bb13 ]
    | bb13 = s0 [ s0 = [ &s'0 <- _22 ] s1 | s1 = len {s'0} (fun (_ret: UInt64.t) -> [ &_27 <- _ret ] s2) | s2 = bb14 ]
    | bb14 = s0
      [ s0 = [ &_26 <- _27 = (2: UInt64.t) ] s1 | s1 = any [ br0 -> {_26 = false} (! bb23) | br1 -> {_26} (! bb15) ] ]
    | bb15 = s0
      [ s0 = [ &_31 <- (0: UInt64.t) ] s1
      | s1 = [ &_32 <- Slice64.length s'0 ] s2
      | s2 = [ &_33 <- UInt64.lt _31 _32 ] s3
      | s3 = {[@expl:index in bounds] _33} s4
      | s4 = bb16 ]
    | bb16 = s0
      [ s0 = Slice64.get <Int32.t> {s'0} {_31} (fun (r: Int32.t) -> [ &_29 <- r = (3: Int32.t) ] s1)
      | s1 = any [ br0 -> {_29 = false} (! bb23) | br1 -> {_29} (! bb17) ] ]
    | bb17 = s0
      [ s0 = [ &_36 <- (1: UInt64.t) ] s1
      | s1 = [ &_37 <- Slice64.length s'0 ] s2
      | s2 = [ &_38 <- UInt64.lt _36 _37 ] s3
      | s3 = {[@expl:index in bounds] _38} s4
      | s4 = bb18 ]
    | bb18 = s0
      [ s0 = Slice64.get <Int32.t> {s'0} {_36} (fun (r: Int32.t) -> [ &_34 <- r = (4: Int32.t) ] s1)
      | s1 = any [ br0 -> {_34 = false} (! bb23) | br1 -> {_34} (! bb19) ] ]
    | bb19 = s0
      [ s0 = [ &_46 <- { t_Range__start = (2: UInt64.t); t_Range__end = (2: UInt64.t) } ] s1
      | s1 = index {arr} {_46} (fun (_ret: Slice64.slice Int32.t) -> [ &_44 <- _ret ] s2)
      | s2 = bb24 ]
    | bb24 = s0 [ s0 = len {_44} (fun (_ret: UInt64.t) -> [ &_42 <- _ret ] s1) | s1 = bb25 ]
    | bb25 = s0
      [ s0 = [ &_41 <- _42 = (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_41 = false} (! bb27) | br1 -> {_41} (! bb26) ] ]
    | bb26 = s0
      [ s0 = [ &_54 <- { t_Range__start = (5: UInt64.t); t_Range__end = (5: UInt64.t) } ] s1
      | s1 = index {arr} {_54} (fun (_ret: Slice64.slice Int32.t) -> [ &_52 <- _ret ] s2)
      | s2 = bb28 ]
    | bb28 = s0 [ s0 = len {_52} (fun (_ret: UInt64.t) -> [ &_50 <- _ret ] s1) | s1 = bb29 ]
    | bb29 = s0
      [ s0 = [ &_49 <- _50 = (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_49 = false} (! bb31) | br1 -> {_49} (! bb30) ] ]
    | bb30 = s0 [ s0 = deref {arr} (fun (_ret: Slice64.slice Int32.t) -> [ &_61 <- _ret ] s1) | s1 = bb32 ]
    | bb32 = s0
      [ s0 = [ &_63 <- { t_Range__start = (2: UInt64.t); t_Range__end = (6: UInt64.t) } ] s1
      | s1 = get {_61} {_63} (fun (_ret: t_Option) -> [ &_59 <- _ret ] s2)
      | s2 = bb33 ]
    | bb33 = s0 [ s0 = is_none {_59} (fun (_ret: bool) -> [ &_57 <- _ret ] s1) | s1 = bb34 ]
    | bb34 = any [ br0 -> {_57 = false} (! bb36) | br1 -> {_57} (! bb35) ]
    | bb35 = s0 [ s0 = deref {arr} (fun (_ret: Slice64.slice Int32.t) -> [ &_70 <- _ret ] s1) | s1 = bb37 ]
    | bb37 = s0
      [ s0 = [ &_72 <- { t_Range__start = (2: UInt64.t); t_Range__end = (1: UInt64.t) } ] s1
      | s1 = get {_70} {_72} (fun (_ret: t_Option) -> [ &_68 <- _ret ] s2)
      | s2 = bb38 ]
    | bb38 = s0 [ s0 = is_none {_68} (fun (_ret: bool) -> [ &_66 <- _ret ] s1) | s1 = bb39 ]
    | bb39 = any [ br0 -> {_66 = false} (! bb41) | br1 -> {_66} (! bb40) ]
    | bb40 = s0 [ s0 = deref {arr} (fun (_ret: Slice64.slice Int32.t) -> [ &_79 <- _ret ] s1) | s1 = bb42 ]
    | bb42 = s0
      [ s0 = [ &_81 <- { t_Range__start = (6: UInt64.t); t_Range__end = (6: UInt64.t) } ] s1
      | s1 = get {_79} {_81} (fun (_ret: t_Option) -> [ &_77 <- _ret ] s2)
      | s2 = bb43 ]
    | bb43 = s0 [ s0 = is_none {_77} (fun (_ret: bool) -> [ &_75 <- _ret ] s1) | s1 = bb44 ]
    | bb44 = any [ br0 -> {_75 = false} (! bb46) | br1 -> {_75} (! bb45) ]
    | bb45 = s0 [ s0 = deref {arr} (fun (_ret: Slice64.slice Int32.t) -> [ &_88 <- _ret ] s1) | s1 = bb47 ]
    | bb47 = s0
      [ s0 = [ &_90 <- { t_Range__start = (10: UInt64.t); t_Range__end = (10: UInt64.t) } ] s1
      | s1 = get {_88} {_90} (fun (_ret: t_Option) -> [ &_86 <- _ret ] s2)
      | s2 = bb48 ]
    | bb48 = s0 [ s0 = is_none {_86} (fun (_ret: bool) -> [ &_84 <- _ret ] s1) | s1 = bb49 ]
    | bb49 = any [ br0 -> {_84 = false} (! bb51) | br1 -> {_84} (! bb50) ]
    | bb50 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_94 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = [ &_95 <- { t_Range__start = (1: UInt64.t); t_Range__end = (4: UInt64.t) } ] s2
      | s2 = index_mut {_94} {_95} (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) -> [ &_93 <- _ret ] s3)
      | s3 = bb52 ]
    | bb52 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_93.current} {MutBorrow.get_id _93}
          (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) ->
            [ &s'1 <- _ret ] [ &_93 <- { _93 with current = _ret.final } ] s1)
      | s1 = len {s'1.current} (fun (_ret: UInt64.t) -> [ &_98 <- _ret ] s2)
      | s2 = bb53 ]
    | bb53 = s0
      [ s0 = [ &_97 <- _98 = (3: UInt64.t) ] s1 | s1 = any [ br0 -> {_97 = false} (! bb55) | br1 -> {_97} (! bb54) ] ]
    | bb54 = s0
      [ s0 = [ &_101 <- (0: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'1.current}- [ &_102 <- _ptr ] s2)
      | s2 = [ &_103 <- Slice64.slice_ptr_len _102 ] s3
      | s3 = [ &_104 <- UInt64.lt _101 _103 ] s4
      | s4 = {[@expl:index in bounds] _104} s5
      | s5 = bb56 ]
    | bb56 = s0
      [ s0 = Slice64.set <Int32.t> {s'1.current} {_101} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'1 <- { s'1 with current = r } ] s1)
      | s1 = [ &_105 <- (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'1.current}- [ &_106 <- _ptr ] s3)
      | s3 = [ &_107 <- Slice64.slice_ptr_len _106 ] s4
      | s4 = [ &_108 <- UInt64.lt _105 _107 ] s5
      | s5 = {[@expl:index in bounds] _108} s6
      | s6 = bb57 ]
    | bb57 = s0
      [ s0 = Slice64.set <Int32.t> {s'1.current} {_105} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'1 <- { s'1 with current = r } ] s1)
      | s1 = [ &_112 <- (2: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'1.current}- [ &_113 <- _ptr ] s3)
      | s3 = [ &_114 <- Slice64.slice_ptr_len _113 ] s4
      | s4 = [ &_115 <- UInt64.lt _112 _114 ] s5
      | s5 = {[@expl:index in bounds] _115} s6
      | s6 = bb58 ]
    | bb58 = s0
      [ s0 = -{resolve s'1}- s1
      | s1 = -{resolve _93}- s2
      | s2 = Slice64.get <Int32.t> {s'1.current} {_112} (fun (r: Int32.t) -> [ &_110 <- r = (3: Int32.t) ] s3)
      | s3 = any [ br0 -> {_110 = false} (! bb60) | br1 -> {_110} (! bb59) ] ]
    | bb59 = s0 [ s0 = len'0 {arr} (fun (_ret: UInt64.t) -> [ &_119 <- _ret ] s1) | s1 = bb61 ]
    | bb61 = s0
      [ s0 = [ &_118 <- _119 = (5: UInt64.t) ] s1
      | s1 = any [ br0 -> {_118 = false} (! bb63) | br1 -> {_118} (! bb62) ] ]
    | bb62 = s0 [ s0 = index'0 {arr} {(0: UInt64.t)} (fun (_ret: Int32.t) -> [ &_125 <- _ret ] s1) | s1 = bb64 ]
    | bb64 = s0
      [ s0 = [ &_123 <- _125 = (0: Int32.t) ] s1
      | s1 = any [ br0 -> {_123 = false} (! bb66) | br1 -> {_123} (! bb65) ] ]
    | bb65 = s0 [ s0 = index'0 {arr} {(1: UInt64.t)} (fun (_ret: Int32.t) -> [ &_131 <- _ret ] s1) | s1 = bb67 ]
    | bb67 = s0
      [ s0 = [ &_129 <- _131 = (-1: Int32.t) ] s1
      | s1 = any [ br0 -> {_129 = false} (! bb69) | br1 -> {_129} (! bb68) ] ]
    | bb68 = s0 [ s0 = index'0 {arr} {(2: UInt64.t)} (fun (_ret: Int32.t) -> [ &_137 <- _ret ] s1) | s1 = bb70 ]
    | bb70 = s0
      [ s0 = [ &_135 <- _137 = (-1: Int32.t) ] s1
      | s1 = any [ br0 -> {_135 = false} (! bb72) | br1 -> {_135} (! bb71) ] ]
    | bb71 = s0 [ s0 = index'0 {arr} {(3: UInt64.t)} (fun (_ret: Int32.t) -> [ &_143 <- _ret ] s1) | s1 = bb73 ]
    | bb73 = s0
      [ s0 = [ &_141 <- _143 = (3: Int32.t) ] s1
      | s1 = any [ br0 -> {_141 = false} (! bb75) | br1 -> {_141} (! bb74) ] ]
    | bb74 = s0 [ s0 = index'0 {arr} {(4: UInt64.t)} (fun (_ret: Int32.t) -> [ &_149 <- _ret ] s1) | s1 = bb76 ]
    | bb76 = s0
      [ s0 = [ &_147 <- _149 = (4: Int32.t) ] s1
      | s1 = any [ br0 -> {_147 = false} (! bb78) | br1 -> {_147} (! bb79) ] ]
    | bb79 = return {_0}
    | bb78 = {false} any
    | bb75 = {false} any
    | bb72 = {false} any
    | bb69 = {false} any
    | bb66 = {false} any
    | bb63 = {false} any
    | bb60 = {false} any
    | bb55 = s0 [ s0 = -{resolve s'1}- s1 | s1 = -{resolve _93}- s2 | s2 = {false} any ]
    | bb51 = {false} any
    | bb46 = {false} any
    | bb41 = {false} any
    | bb36 = {false} any
    | bb31 = {false} any
    | bb27 = {false} any
    | bb23 = {false} any
    | bb12 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: t_Range = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & s'0: Slice64.slice Int32.t = Any.any_l ()
    | & _22: Slice64.slice Int32.t = Any.any_l ()
    | & _24: t_Range = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _27: UInt64.t = Any.any_l ()
    | & _29: bool = Any.any_l ()
    | & _31: UInt64.t = Any.any_l ()
    | & _32: UInt64.t = Any.any_l ()
    | & _33: bool = Any.any_l ()
    | & _34: bool = Any.any_l ()
    | & _36: UInt64.t = Any.any_l ()
    | & _37: UInt64.t = Any.any_l ()
    | & _38: bool = Any.any_l ()
    | & _41: bool = Any.any_l ()
    | & _42: UInt64.t = Any.any_l ()
    | & _44: Slice64.slice Int32.t = Any.any_l ()
    | & _46: t_Range = Any.any_l ()
    | & _49: bool = Any.any_l ()
    | & _50: UInt64.t = Any.any_l ()
    | & _52: Slice64.slice Int32.t = Any.any_l ()
    | & _54: t_Range = Any.any_l ()
    | & _57: bool = Any.any_l ()
    | & _59: t_Option = Any.any_l ()
    | & _61: Slice64.slice Int32.t = Any.any_l ()
    | & _63: t_Range = Any.any_l ()
    | & _66: bool = Any.any_l ()
    | & _68: t_Option = Any.any_l ()
    | & _70: Slice64.slice Int32.t = Any.any_l ()
    | & _72: t_Range = Any.any_l ()
    | & _75: bool = Any.any_l ()
    | & _77: t_Option = Any.any_l ()
    | & _79: Slice64.slice Int32.t = Any.any_l ()
    | & _81: t_Range = Any.any_l ()
    | & _84: bool = Any.any_l ()
    | & _86: t_Option = Any.any_l ()
    | & _88: Slice64.slice Int32.t = Any.any_l ()
    | & _90: t_Range = Any.any_l ()
    | & s'1: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _93: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _94: MutBorrow.t t_Vec = Any.any_l ()
    | & _95: t_Range = Any.any_l ()
    | & _97: bool = Any.any_l ()
    | & _98: UInt64.t = Any.any_l ()
    | & _101: UInt64.t = Any.any_l ()
    | & _102: Opaque.ptr = Any.any_l ()
    | & _103: UInt64.t = Any.any_l ()
    | & _104: bool = Any.any_l ()
    | & _105: UInt64.t = Any.any_l ()
    | & _106: Opaque.ptr = Any.any_l ()
    | & _107: UInt64.t = Any.any_l ()
    | & _108: bool = Any.any_l ()
    | & _110: bool = Any.any_l ()
    | & _112: UInt64.t = Any.any_l ()
    | & _113: Opaque.ptr = Any.any_l ()
    | & _114: UInt64.t = Any.any_l ()
    | & _115: bool = Any.any_l ()
    | & _118: bool = Any.any_l ()
    | & _119: UInt64.t = Any.any_l ()
    | & _123: bool = Any.any_l ()
    | & _125: Int32.t = Any.any_l ()
    | & _129: bool = Any.any_l ()
    | & _131: Int32.t = Any.any_l ()
    | & _135: bool = Any.any_l ()
    | & _137: Int32.t = Any.any_l ()
    | & _141: bool = Any.any_l ()
    | & _143: Int32.t = Any.any_l ()
    | & _147: bool = Any.any_l ()
    | & _149: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_index_range__test_range_to
  use seq.Seq
  use creusot.int.Int32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_Vec
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  let rec create_arr (return (x: t_Vec)) = any
    [ return (result: t_Vec) -> {Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return {result}) ]
  
  type t_RangeTo = { t_RangeTo__end: UInt64.t }
  
  predicate in_bounds (self: t_RangeTo) (seq: Seq.seq Int32.t) = UInt64.t'int self.t_RangeTo__end <= Seq.length seq
  
  predicate has_value (self: t_RangeTo) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    Seq.([..]) seq 0 (UInt64.t'int self.t_RangeTo__end) = Slice64.view out
  
  let rec index (self_: t_Vec) (ix: t_RangeTo) (return (x: Slice64.slice Int32.t)) =
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return (result: Slice64.slice Int32.t) -> {has_value ix (view self_) result} (! return {result}) ]
  
  let rec len (self_: Slice64.slice Int32.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {Seq.length (Slice64.view self_) = UInt64.t'int result} (! return {result}) ]
  
  let rec deref (self_: t_Vec) (return (x: Slice64.slice Int32.t)) = any
    [ return (result: Slice64.slice Int32.t) -> {Slice64.view result = view self_} (! return {result}) ]
  
  type t_Option = C_None | C_Some (Slice64.slice Int32.t)
  
  let rec get (self_: Slice64.slice Int32.t) (ix: t_RangeTo) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {in_bounds ix (Slice64.view self_)
      -> (exists r: Slice64.slice Int32.t. result = C_Some r /\ has_value ix (Slice64.view self_) r)}
      {in_bounds ix (Slice64.view self_) \/ result = C_None}
      (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  predicate resolve_elswhere (self: t_RangeTo) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    forall i: int. UInt64.t'int self.t_RangeTo__end <= i /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: t_RangeTo) (return (x: MutBorrow.t (Slice64.slice Int32.t))) =
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return (result: MutBorrow.t (Slice64.slice Int32.t)) -> {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice Int32.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  let rec len'0 (self_: t_Vec) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds'0
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value'0
  
  let rec index'0 (self_: t_Vec) (ix: UInt64.t) (return (x: Int32.t)) =
    {[@expl:index requires] in_bounds'0 ix (view self_)}
    any [ return (result: Int32.t) -> {has_value'0 ix (view self_) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_range_to (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret: t_Vec) -> [ &arr <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_5 <- { t_RangeTo__end = (2: UInt64.t) } ] s1
      | s1 = index {arr} {_5} (fun (_ret: Slice64.slice Int32.t) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s2) | s2 = bb3 ]
    | bb3 = s0
      [ s0 = [ &_7 <- _8 = (2: UInt64.t) ] s1 | s1 = any [ br0 -> {_7 = false} (! bb12) | br1 -> {_7} (! bb4) ] ]
    | bb4 = s0
      [ s0 = [ &_12 <- (0: UInt64.t) ] s1
      | s1 = [ &_13 <- Slice64.length s ] s2
      | s2 = [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] _14} s4
      | s4 = bb5 ]
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r: Int32.t) -> [ &_10 <- r = (0: Int32.t) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb12) | br1 -> {_10} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_17 <- (1: UInt64.t) ] s1
      | s1 = [ &_18 <- Slice64.length s ] s2
      | s2 = [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] _19} s4
      | s4 = bb7 ]
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r: Int32.t) -> [ &_15 <- r = (1: Int32.t) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb12) | br1 -> {_15} (! bb8) ] ]
    | bb8 = s0
      [ s0 = [ &_27 <- { t_RangeTo__end = (0: UInt64.t) } ] s1
      | s1 = index {arr} {_27} (fun (_ret: Slice64.slice Int32.t) -> [ &_25 <- _ret ] s2)
      | s2 = bb13 ]
    | bb13 = s0 [ s0 = len {_25} (fun (_ret: UInt64.t) -> [ &_23 <- _ret ] s1) | s1 = bb14 ]
    | bb14 = s0
      [ s0 = [ &_22 <- _23 = (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_22 = false} (! bb16) | br1 -> {_22} (! bb15) ] ]
    | bb15 = s0 [ s0 = deref {arr} (fun (_ret: Slice64.slice Int32.t) -> [ &_34 <- _ret ] s1) | s1 = bb17 ]
    | bb17 = s0
      [ s0 = [ &_36 <- { t_RangeTo__end = (6: UInt64.t) } ] s1
      | s1 = get {_34} {_36} (fun (_ret: t_Option) -> [ &_32 <- _ret ] s2)
      | s2 = bb18 ]
    | bb18 = s0 [ s0 = is_none {_32} (fun (_ret: bool) -> [ &_30 <- _ret ] s1) | s1 = bb19 ]
    | bb19 = any [ br0 -> {_30 = false} (! bb21) | br1 -> {_30} (! bb20) ]
    | bb20 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_40 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = [ &_41 <- { t_RangeTo__end = (3: UInt64.t) } ] s2
      | s2 = index_mut {_40} {_41} (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) -> [ &_39 <- _ret ] s3)
      | s3 = bb22 ]
    | bb22 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_39.current} {MutBorrow.get_id _39}
          (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) ->
            [ &s'0 <- _ret ] [ &_39 <- { _39 with current = _ret.final } ] s1)
      | s1 = len {s'0.current} (fun (_ret: UInt64.t) -> [ &_44 <- _ret ] s2)
      | s2 = bb23 ]
    | bb23 = s0
      [ s0 = [ &_43 <- _44 = (3: UInt64.t) ] s1 | s1 = any [ br0 -> {_43 = false} (! bb25) | br1 -> {_43} (! bb24) ] ]
    | bb24 = s0
      [ s0 = [ &_47 <- (0: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_48 <- _ptr ] s2)
      | s2 = [ &_49 <- Slice64.slice_ptr_len _48 ] s3
      | s3 = [ &_50 <- UInt64.lt _47 _49 ] s4
      | s4 = {[@expl:index in bounds] _50} s5
      | s5 = bb26 ]
    | bb26 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_47} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = [ &_51 <- (2: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_52 <- _ptr ] s3)
      | s3 = [ &_53 <- Slice64.slice_ptr_len _52 ] s4
      | s4 = [ &_54 <- UInt64.lt _51 _53 ] s5
      | s5 = {[@expl:index in bounds] _54} s6
      | s6 = bb27 ]
    | bb27 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_51} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = [ &_58 <- (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_59 <- _ptr ] s3)
      | s3 = [ &_60 <- Slice64.slice_ptr_len _59 ] s4
      | s4 = [ &_61 <- UInt64.lt _58 _60 ] s5
      | s5 = {[@expl:index in bounds] _61} s6
      | s6 = bb28 ]
    | bb28 = s0
      [ s0 = -{resolve s'0}- s1
      | s1 = -{resolve _39}- s2
      | s2 = Slice64.get <Int32.t> {s'0.current} {_58} (fun (r: Int32.t) -> [ &_56 <- r = (1: Int32.t) ] s3)
      | s3 = any [ br0 -> {_56 = false} (! bb30) | br1 -> {_56} (! bb29) ] ]
    | bb29 = s0 [ s0 = len'0 {arr} (fun (_ret: UInt64.t) -> [ &_65 <- _ret ] s1) | s1 = bb31 ]
    | bb31 = s0
      [ s0 = [ &_64 <- _65 = (5: UInt64.t) ] s1 | s1 = any [ br0 -> {_64 = false} (! bb33) | br1 -> {_64} (! bb32) ] ]
    | bb32 = s0 [ s0 = index'0 {arr} {(0: UInt64.t)} (fun (_ret: Int32.t) -> [ &_71 <- _ret ] s1) | s1 = bb34 ]
    | bb34 = s0
      [ s0 = [ &_69 <- _71 = (-1: Int32.t) ] s1 | s1 = any [ br0 -> {_69 = false} (! bb36) | br1 -> {_69} (! bb35) ] ]
    | bb35 = s0 [ s0 = index'0 {arr} {(1: UInt64.t)} (fun (_ret: Int32.t) -> [ &_77 <- _ret ] s1) | s1 = bb37 ]
    | bb37 = s0
      [ s0 = [ &_75 <- _77 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_75 = false} (! bb39) | br1 -> {_75} (! bb38) ] ]
    | bb38 = s0 [ s0 = index'0 {arr} {(2: UInt64.t)} (fun (_ret: Int32.t) -> [ &_83 <- _ret ] s1) | s1 = bb40 ]
    | bb40 = s0
      [ s0 = [ &_81 <- _83 = (-1: Int32.t) ] s1 | s1 = any [ br0 -> {_81 = false} (! bb42) | br1 -> {_81} (! bb41) ] ]
    | bb41 = s0 [ s0 = index'0 {arr} {(3: UInt64.t)} (fun (_ret: Int32.t) -> [ &_89 <- _ret ] s1) | s1 = bb43 ]
    | bb43 = s0
      [ s0 = [ &_87 <- _89 = (3: Int32.t) ] s1 | s1 = any [ br0 -> {_87 = false} (! bb45) | br1 -> {_87} (! bb44) ] ]
    | bb44 = s0 [ s0 = index'0 {arr} {(4: UInt64.t)} (fun (_ret: Int32.t) -> [ &_95 <- _ret ] s1) | s1 = bb46 ]
    | bb46 = s0
      [ s0 = [ &_93 <- _95 = (4: Int32.t) ] s1 | s1 = any [ br0 -> {_93 = false} (! bb48) | br1 -> {_93} (! bb49) ] ]
    | bb49 = return {_0}
    | bb48 = {false} any
    | bb45 = {false} any
    | bb42 = {false} any
    | bb39 = {false} any
    | bb36 = {false} any
    | bb33 = {false} any
    | bb30 = {false} any
    | bb25 = s0 [ s0 = -{resolve s'0}- s1 | s1 = -{resolve _39}- s2 | s2 = {false} any ]
    | bb21 = {false} any
    | bb16 = {false} any
    | bb12 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: t_RangeTo = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _23: UInt64.t = Any.any_l ()
    | & _25: Slice64.slice Int32.t = Any.any_l ()
    | & _27: t_RangeTo = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _32: t_Option = Any.any_l ()
    | & _34: Slice64.slice Int32.t = Any.any_l ()
    | & _36: t_RangeTo = Any.any_l ()
    | & s'0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _39: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _40: MutBorrow.t t_Vec = Any.any_l ()
    | & _41: t_RangeTo = Any.any_l ()
    | & _43: bool = Any.any_l ()
    | & _44: UInt64.t = Any.any_l ()
    | & _47: UInt64.t = Any.any_l ()
    | & _48: Opaque.ptr = Any.any_l ()
    | & _49: UInt64.t = Any.any_l ()
    | & _50: bool = Any.any_l ()
    | & _51: UInt64.t = Any.any_l ()
    | & _52: Opaque.ptr = Any.any_l ()
    | & _53: UInt64.t = Any.any_l ()
    | & _54: bool = Any.any_l ()
    | & _56: bool = Any.any_l ()
    | & _58: UInt64.t = Any.any_l ()
    | & _59: Opaque.ptr = Any.any_l ()
    | & _60: UInt64.t = Any.any_l ()
    | & _61: bool = Any.any_l ()
    | & _64: bool = Any.any_l ()
    | & _65: UInt64.t = Any.any_l ()
    | & _69: bool = Any.any_l ()
    | & _71: Int32.t = Any.any_l ()
    | & _75: bool = Any.any_l ()
    | & _77: Int32.t = Any.any_l ()
    | & _81: bool = Any.any_l ()
    | & _83: Int32.t = Any.any_l ()
    | & _87: bool = Any.any_l ()
    | & _89: Int32.t = Any.any_l ()
    | & _93: bool = Any.any_l ()
    | & _95: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_index_range__test_range_from
  use seq.Seq
  use creusot.int.Int32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_Vec
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  let rec create_arr (return (x: t_Vec)) = any
    [ return (result: t_Vec) -> {Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return {result}) ]
  
  type t_RangeFrom = { t_RangeFrom__start: UInt64.t }
  
  predicate in_bounds (self: t_RangeFrom) (seq: Seq.seq Int32.t) =
    UInt64.t'int self.t_RangeFrom__start <= Seq.length seq
  
  predicate has_value (self: t_RangeFrom) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    Seq.([..]) seq (UInt64.t'int self.t_RangeFrom__start) (Seq.length seq) = Slice64.view out
  
  let rec index (self_: t_Vec) (ix: t_RangeFrom) (return (x: Slice64.slice Int32.t)) =
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return (result: Slice64.slice Int32.t) -> {has_value ix (view self_) result} (! return {result}) ]
  
  let rec len (self_: Slice64.slice Int32.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {Seq.length (Slice64.view self_) = UInt64.t'int result} (! return {result}) ]
  
  let rec deref (self_: t_Vec) (return (x: Slice64.slice Int32.t)) = any
    [ return (result: Slice64.slice Int32.t) -> {Slice64.view result = view self_} (! return {result}) ]
  
  type t_Option = C_None | C_Some (Slice64.slice Int32.t)
  
  let rec get (self_: Slice64.slice Int32.t) (ix: t_RangeFrom) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {in_bounds ix (Slice64.view self_)
      -> (exists r: Slice64.slice Int32.t. result = C_Some r /\ has_value ix (Slice64.view self_) r)}
      {in_bounds ix (Slice64.view self_) \/ result = C_None}
      (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  predicate resolve_elswhere (self: t_RangeFrom) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    forall i: int. 0 <= i /\ i < UInt64.t'int self.t_RangeFrom__start /\ i < Seq.length old'
      -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: t_RangeFrom) (return (x: MutBorrow.t (Slice64.slice Int32.t))) =
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return (result: MutBorrow.t (Slice64.slice Int32.t)) -> {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice Int32.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  let rec len'0 (self_: t_Vec) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds'0
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value'0
  
  let rec index'0 (self_: t_Vec) (ix: UInt64.t) (return (x: Int32.t)) =
    {[@expl:index requires] in_bounds'0 ix (view self_)}
    any [ return (result: Int32.t) -> {has_value'0 ix (view self_) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_range_from (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret: t_Vec) -> [ &arr <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_5 <- { t_RangeFrom__start = (3: UInt64.t) } ] s1
      | s1 = index {arr} {_5} (fun (_ret: Slice64.slice Int32.t) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s2) | s2 = bb3 ]
    | bb3 = s0
      [ s0 = [ &_7 <- _8 = (2: UInt64.t) ] s1 | s1 = any [ br0 -> {_7 = false} (! bb12) | br1 -> {_7} (! bb4) ] ]
    | bb4 = s0
      [ s0 = [ &_12 <- (0: UInt64.t) ] s1
      | s1 = [ &_13 <- Slice64.length s ] s2
      | s2 = [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] _14} s4
      | s4 = bb5 ]
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r: Int32.t) -> [ &_10 <- r = (3: Int32.t) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb12) | br1 -> {_10} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_17 <- (1: UInt64.t) ] s1
      | s1 = [ &_18 <- Slice64.length s ] s2
      | s2 = [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] _19} s4
      | s4 = bb7 ]
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r: Int32.t) -> [ &_15 <- r = (4: Int32.t) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb12) | br1 -> {_15} (! bb8) ] ]
    | bb8 = s0
      [ s0 = [ &_27 <- { t_RangeFrom__start = (5: UInt64.t) } ] s1
      | s1 = index {arr} {_27} (fun (_ret: Slice64.slice Int32.t) -> [ &_25 <- _ret ] s2)
      | s2 = bb13 ]
    | bb13 = s0 [ s0 = len {_25} (fun (_ret: UInt64.t) -> [ &_23 <- _ret ] s1) | s1 = bb14 ]
    | bb14 = s0
      [ s0 = [ &_22 <- _23 = (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_22 = false} (! bb16) | br1 -> {_22} (! bb15) ] ]
    | bb15 = s0 [ s0 = deref {arr} (fun (_ret: Slice64.slice Int32.t) -> [ &_34 <- _ret ] s1) | s1 = bb17 ]
    | bb17 = s0
      [ s0 = [ &_36 <- { t_RangeFrom__start = (6: UInt64.t) } ] s1
      | s1 = get {_34} {_36} (fun (_ret: t_Option) -> [ &_32 <- _ret ] s2)
      | s2 = bb18 ]
    | bb18 = s0 [ s0 = is_none {_32} (fun (_ret: bool) -> [ &_30 <- _ret ] s1) | s1 = bb19 ]
    | bb19 = any [ br0 -> {_30 = false} (! bb21) | br1 -> {_30} (! bb20) ]
    | bb20 = s0 [ s0 = deref {arr} (fun (_ret: Slice64.slice Int32.t) -> [ &_43 <- _ret ] s1) | s1 = bb22 ]
    | bb22 = s0
      [ s0 = [ &_45 <- { t_RangeFrom__start = (10: UInt64.t) } ] s1
      | s1 = get {_43} {_45} (fun (_ret: t_Option) -> [ &_41 <- _ret ] s2)
      | s2 = bb23 ]
    | bb23 = s0 [ s0 = is_none {_41} (fun (_ret: bool) -> [ &_39 <- _ret ] s1) | s1 = bb24 ]
    | bb24 = any [ br0 -> {_39 = false} (! bb26) | br1 -> {_39} (! bb25) ]
    | bb25 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_49 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = [ &_50 <- { t_RangeFrom__start = (2: UInt64.t) } ] s2
      | s2 = index_mut {_49} {_50} (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) -> [ &_48 <- _ret ] s3)
      | s3 = bb27 ]
    | bb27 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_48.current} {MutBorrow.get_id _48}
          (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) ->
            [ &s'0 <- _ret ] [ &_48 <- { _48 with current = _ret.final } ] s1)
      | s1 = len {s'0.current} (fun (_ret: UInt64.t) -> [ &_53 <- _ret ] s2)
      | s2 = bb28 ]
    | bb28 = s0
      [ s0 = [ &_52 <- _53 = (3: UInt64.t) ] s1 | s1 = any [ br0 -> {_52 = false} (! bb30) | br1 -> {_52} (! bb29) ] ]
    | bb29 = s0
      [ s0 = [ &_56 <- (0: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_57 <- _ptr ] s2)
      | s2 = [ &_58 <- Slice64.slice_ptr_len _57 ] s3
      | s3 = [ &_59 <- UInt64.lt _56 _58 ] s4
      | s4 = {[@expl:index in bounds] _59} s5
      | s5 = bb31 ]
    | bb31 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_56} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = [ &_60 <- (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_61 <- _ptr ] s3)
      | s3 = [ &_62 <- Slice64.slice_ptr_len _61 ] s4
      | s4 = [ &_63 <- UInt64.lt _60 _62 ] s5
      | s5 = {[@expl:index in bounds] _63} s6
      | s6 = bb32 ]
    | bb32 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_60} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = [ &_67 <- (2: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_68 <- _ptr ] s3)
      | s3 = [ &_69 <- Slice64.slice_ptr_len _68 ] s4
      | s4 = [ &_70 <- UInt64.lt _67 _69 ] s5
      | s5 = {[@expl:index in bounds] _70} s6
      | s6 = bb33 ]
    | bb33 = s0
      [ s0 = -{resolve s'0}- s1
      | s1 = -{resolve _48}- s2
      | s2 = Slice64.get <Int32.t> {s'0.current} {_67} (fun (r: Int32.t) -> [ &_65 <- r = (4: Int32.t) ] s3)
      | s3 = any [ br0 -> {_65 = false} (! bb35) | br1 -> {_65} (! bb34) ] ]
    | bb34 = s0 [ s0 = len'0 {arr} (fun (_ret: UInt64.t) -> [ &_74 <- _ret ] s1) | s1 = bb36 ]
    | bb36 = s0
      [ s0 = [ &_73 <- _74 = (5: UInt64.t) ] s1 | s1 = any [ br0 -> {_73 = false} (! bb38) | br1 -> {_73} (! bb37) ] ]
    | bb37 = s0 [ s0 = index'0 {arr} {(0: UInt64.t)} (fun (_ret: Int32.t) -> [ &_80 <- _ret ] s1) | s1 = bb39 ]
    | bb39 = s0
      [ s0 = [ &_78 <- _80 = (0: Int32.t) ] s1 | s1 = any [ br0 -> {_78 = false} (! bb41) | br1 -> {_78} (! bb40) ] ]
    | bb40 = s0 [ s0 = index'0 {arr} {(1: UInt64.t)} (fun (_ret: Int32.t) -> [ &_86 <- _ret ] s1) | s1 = bb42 ]
    | bb42 = s0
      [ s0 = [ &_84 <- _86 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_84 = false} (! bb44) | br1 -> {_84} (! bb43) ] ]
    | bb43 = s0 [ s0 = index'0 {arr} {(2: UInt64.t)} (fun (_ret: Int32.t) -> [ &_92 <- _ret ] s1) | s1 = bb45 ]
    | bb45 = s0
      [ s0 = [ &_90 <- _92 = (-1: Int32.t) ] s1 | s1 = any [ br0 -> {_90 = false} (! bb47) | br1 -> {_90} (! bb46) ] ]
    | bb46 = s0 [ s0 = index'0 {arr} {(3: UInt64.t)} (fun (_ret: Int32.t) -> [ &_98 <- _ret ] s1) | s1 = bb48 ]
    | bb48 = s0
      [ s0 = [ &_96 <- _98 = (-1: Int32.t) ] s1 | s1 = any [ br0 -> {_96 = false} (! bb50) | br1 -> {_96} (! bb49) ] ]
    | bb49 = s0 [ s0 = index'0 {arr} {(4: UInt64.t)} (fun (_ret: Int32.t) -> [ &_104 <- _ret ] s1) | s1 = bb51 ]
    | bb51 = s0
      [ s0 = [ &_102 <- _104 = (4: Int32.t) ] s1
      | s1 = any [ br0 -> {_102 = false} (! bb53) | br1 -> {_102} (! bb54) ] ]
    | bb54 = return {_0}
    | bb53 = {false} any
    | bb50 = {false} any
    | bb47 = {false} any
    | bb44 = {false} any
    | bb41 = {false} any
    | bb38 = {false} any
    | bb35 = {false} any
    | bb30 = s0 [ s0 = -{resolve s'0}- s1 | s1 = -{resolve _48}- s2 | s2 = {false} any ]
    | bb26 = {false} any
    | bb21 = {false} any
    | bb16 = {false} any
    | bb12 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: t_RangeFrom = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _23: UInt64.t = Any.any_l ()
    | & _25: Slice64.slice Int32.t = Any.any_l ()
    | & _27: t_RangeFrom = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _32: t_Option = Any.any_l ()
    | & _34: Slice64.slice Int32.t = Any.any_l ()
    | & _36: t_RangeFrom = Any.any_l ()
    | & _39: bool = Any.any_l ()
    | & _41: t_Option = Any.any_l ()
    | & _43: Slice64.slice Int32.t = Any.any_l ()
    | & _45: t_RangeFrom = Any.any_l ()
    | & s'0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _48: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _49: MutBorrow.t t_Vec = Any.any_l ()
    | & _50: t_RangeFrom = Any.any_l ()
    | & _52: bool = Any.any_l ()
    | & _53: UInt64.t = Any.any_l ()
    | & _56: UInt64.t = Any.any_l ()
    | & _57: Opaque.ptr = Any.any_l ()
    | & _58: UInt64.t = Any.any_l ()
    | & _59: bool = Any.any_l ()
    | & _60: UInt64.t = Any.any_l ()
    | & _61: Opaque.ptr = Any.any_l ()
    | & _62: UInt64.t = Any.any_l ()
    | & _63: bool = Any.any_l ()
    | & _65: bool = Any.any_l ()
    | & _67: UInt64.t = Any.any_l ()
    | & _68: Opaque.ptr = Any.any_l ()
    | & _69: UInt64.t = Any.any_l ()
    | & _70: bool = Any.any_l ()
    | & _73: bool = Any.any_l ()
    | & _74: UInt64.t = Any.any_l ()
    | & _78: bool = Any.any_l ()
    | & _80: Int32.t = Any.any_l ()
    | & _84: bool = Any.any_l ()
    | & _86: Int32.t = Any.any_l ()
    | & _90: bool = Any.any_l ()
    | & _92: Int32.t = Any.any_l ()
    | & _96: bool = Any.any_l ()
    | & _98: Int32.t = Any.any_l ()
    | & _102: bool = Any.any_l ()
    | & _104: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_index_range__test_range_full
  use seq.Seq
  use creusot.int.Int32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_Vec
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  let rec create_arr (return (x: t_Vec)) = any
    [ return (result: t_Vec) -> {Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return {result}) ]
  
  predicate in_bounds (self: ()) (_seq: Seq.seq Int32.t) = true
  
  predicate has_value (self: ()) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) = seq = Slice64.view out
  
  let rec index (self_: t_Vec) (ix: ()) (return (x: Slice64.slice Int32.t)) =
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return (result: Slice64.slice Int32.t) -> {has_value ix (view self_) result} (! return {result}) ]
  
  let rec len (self_: Slice64.slice Int32.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {Seq.length (Slice64.view self_) = UInt64.t'int result} (! return {result}) ]
  
  predicate resolve_elswhere (self: ()) (_old: Seq.seq Int32.t) (_fin: Seq.seq Int32.t) = true
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: ()) (return (x: MutBorrow.t (Slice64.slice Int32.t))) =
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return (result: MutBorrow.t (Slice64.slice Int32.t)) -> {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice Int32.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  let rec len'0 (self_: t_Vec) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds'0
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value'0
  
  let rec index'0 (self_: t_Vec) (ix: UInt64.t) (return (x: Int32.t)) =
    {[@expl:index requires] in_bounds'0 ix (view self_)}
    any [ return (result: Int32.t) -> {has_value'0 ix (view self_) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_range_full (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret: t_Vec) -> [ &arr <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_5 <- () ] s1
      | s1 = index {arr} {_5} (fun (_ret: Slice64.slice Int32.t) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s2) | s2 = bb3 ]
    | bb3 = s0
      [ s0 = [ &_7 <- _8 = (5: UInt64.t) ] s1 | s1 = any [ br0 -> {_7 = false} (! bb21) | br1 -> {_7} (! bb4) ] ]
    | bb4 = s0
      [ s0 = [ &_12 <- (0: UInt64.t) ] s1
      | s1 = [ &_13 <- Slice64.length s ] s2
      | s2 = [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] _14} s4
      | s4 = bb5 ]
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r: Int32.t) -> [ &_10 <- r = (0: Int32.t) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb21) | br1 -> {_10} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_17 <- (1: UInt64.t) ] s1
      | s1 = [ &_18 <- Slice64.length s ] s2
      | s2 = [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] _19} s4
      | s4 = bb7 ]
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r: Int32.t) -> [ &_15 <- r = (1: Int32.t) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb21) | br1 -> {_15} (! bb8) ] ]
    | bb8 = s0
      [ s0 = [ &_22 <- (2: UInt64.t) ] s1
      | s1 = [ &_23 <- Slice64.length s ] s2
      | s2 = [ &_24 <- UInt64.lt _22 _23 ] s3
      | s3 = {[@expl:index in bounds] _24} s4
      | s4 = bb9 ]
    | bb9 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_22} (fun (r: Int32.t) -> [ &_20 <- r = (2: Int32.t) ] s1)
      | s1 = any [ br0 -> {_20 = false} (! bb21) | br1 -> {_20} (! bb10) ] ]
    | bb10 = s0
      [ s0 = [ &_27 <- (3: UInt64.t) ] s1
      | s1 = [ &_28 <- Slice64.length s ] s2
      | s2 = [ &_29 <- UInt64.lt _27 _28 ] s3
      | s3 = {[@expl:index in bounds] _29} s4
      | s4 = bb11 ]
    | bb11 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_27} (fun (r: Int32.t) -> [ &_25 <- r = (3: Int32.t) ] s1)
      | s1 = any [ br0 -> {_25 = false} (! bb21) | br1 -> {_25} (! bb12) ] ]
    | bb12 = s0
      [ s0 = [ &_32 <- (4: UInt64.t) ] s1
      | s1 = [ &_33 <- Slice64.length s ] s2
      | s2 = [ &_34 <- UInt64.lt _32 _33 ] s3
      | s3 = {[@expl:index in bounds] _34} s4
      | s4 = bb13 ]
    | bb13 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_32} (fun (r: Int32.t) -> [ &_30 <- r = (4: Int32.t) ] s1)
      | s1 = any [ br0 -> {_30 = false} (! bb21) | br1 -> {_30} (! bb14) ] ]
    | bb14 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_38 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = [ &_39 <- () ] s2
      | s2 = index_mut {_38} {_39} (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) -> [ &_37 <- _ret ] s3)
      | s3 = bb22 ]
    | bb22 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_37.current} {MutBorrow.get_id _37}
          (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) ->
            [ &s'0 <- _ret ] [ &_37 <- { _37 with current = _ret.final } ] s1)
      | s1 = len {s'0.current} (fun (_ret: UInt64.t) -> [ &_42 <- _ret ] s2)
      | s2 = bb23 ]
    | bb23 = s0
      [ s0 = [ &_41 <- _42 = (5: UInt64.t) ] s1 | s1 = any [ br0 -> {_41 = false} (! bb25) | br1 -> {_41} (! bb24) ] ]
    | bb24 = s0
      [ s0 = [ &_45 <- (1: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_46 <- _ptr ] s2)
      | s2 = [ &_47 <- Slice64.slice_ptr_len _46 ] s3
      | s3 = [ &_48 <- UInt64.lt _45 _47 ] s4
      | s4 = {[@expl:index in bounds] _48} s5
      | s5 = bb26 ]
    | bb26 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_45} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = [ &_49 <- (3: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_50 <- _ptr ] s3)
      | s3 = [ &_51 <- Slice64.slice_ptr_len _50 ] s4
      | s4 = [ &_52 <- UInt64.lt _49 _51 ] s5
      | s5 = {[@expl:index in bounds] _52} s6
      | s6 = bb27 ]
    | bb27 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_49} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = -{resolve s'0}- s2
      | s2 = -{resolve _37}- s3
      | s3 = len'0 {arr} (fun (_ret: UInt64.t) -> [ &_55 <- _ret ] s4)
      | s4 = bb28 ]
    | bb28 = s0
      [ s0 = [ &_54 <- _55 = (5: UInt64.t) ] s1 | s1 = any [ br0 -> {_54 = false} (! bb30) | br1 -> {_54} (! bb29) ] ]
    | bb29 = s0 [ s0 = index'0 {arr} {(0: UInt64.t)} (fun (_ret: Int32.t) -> [ &_61 <- _ret ] s1) | s1 = bb31 ]
    | bb31 = s0
      [ s0 = [ &_59 <- _61 = (0: Int32.t) ] s1 | s1 = any [ br0 -> {_59 = false} (! bb33) | br1 -> {_59} (! bb32) ] ]
    | bb32 = s0 [ s0 = index'0 {arr} {(1: UInt64.t)} (fun (_ret: Int32.t) -> [ &_67 <- _ret ] s1) | s1 = bb34 ]
    | bb34 = s0
      [ s0 = [ &_65 <- _67 = (-1: Int32.t) ] s1 | s1 = any [ br0 -> {_65 = false} (! bb36) | br1 -> {_65} (! bb35) ] ]
    | bb35 = s0 [ s0 = index'0 {arr} {(2: UInt64.t)} (fun (_ret: Int32.t) -> [ &_73 <- _ret ] s1) | s1 = bb37 ]
    | bb37 = s0
      [ s0 = [ &_71 <- _73 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_71 = false} (! bb39) | br1 -> {_71} (! bb38) ] ]
    | bb38 = s0 [ s0 = index'0 {arr} {(3: UInt64.t)} (fun (_ret: Int32.t) -> [ &_79 <- _ret ] s1) | s1 = bb40 ]
    | bb40 = s0
      [ s0 = [ &_77 <- _79 = (-1: Int32.t) ] s1 | s1 = any [ br0 -> {_77 = false} (! bb42) | br1 -> {_77} (! bb41) ] ]
    | bb41 = s0 [ s0 = index'0 {arr} {(4: UInt64.t)} (fun (_ret: Int32.t) -> [ &_85 <- _ret ] s1) | s1 = bb43 ]
    | bb43 = s0
      [ s0 = [ &_83 <- _85 = (4: Int32.t) ] s1 | s1 = any [ br0 -> {_83 = false} (! bb45) | br1 -> {_83} (! bb46) ] ]
    | bb46 = return {_0}
    | bb45 = {false} any
    | bb42 = {false} any
    | bb39 = {false} any
    | bb36 = {false} any
    | bb33 = {false} any
    | bb30 = {false} any
    | bb25 = s0 [ s0 = -{resolve s'0}- s1 | s1 = -{resolve _37}- s2 | s2 = {false} any ]
    | bb21 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _20: bool = Any.any_l ()
    | & _22: UInt64.t = Any.any_l ()
    | & _23: UInt64.t = Any.any_l ()
    | & _24: bool = Any.any_l ()
    | & _25: bool = Any.any_l ()
    | & _27: UInt64.t = Any.any_l ()
    | & _28: UInt64.t = Any.any_l ()
    | & _29: bool = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _32: UInt64.t = Any.any_l ()
    | & _33: UInt64.t = Any.any_l ()
    | & _34: bool = Any.any_l ()
    | & s'0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _37: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _38: MutBorrow.t t_Vec = Any.any_l ()
    | & _39: () = Any.any_l ()
    | & _41: bool = Any.any_l ()
    | & _42: UInt64.t = Any.any_l ()
    | & _45: UInt64.t = Any.any_l ()
    | & _46: Opaque.ptr = Any.any_l ()
    | & _47: UInt64.t = Any.any_l ()
    | & _48: bool = Any.any_l ()
    | & _49: UInt64.t = Any.any_l ()
    | & _50: Opaque.ptr = Any.any_l ()
    | & _51: UInt64.t = Any.any_l ()
    | & _52: bool = Any.any_l ()
    | & _54: bool = Any.any_l ()
    | & _55: UInt64.t = Any.any_l ()
    | & _59: bool = Any.any_l ()
    | & _61: Int32.t = Any.any_l ()
    | & _65: bool = Any.any_l ()
    | & _67: Int32.t = Any.any_l ()
    | & _71: bool = Any.any_l ()
    | & _73: Int32.t = Any.any_l ()
    | & _77: bool = Any.any_l ()
    | & _79: Int32.t = Any.any_l ()
    | & _83: bool = Any.any_l ()
    | & _85: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_index_range__test_range_to_inclusive
  use seq.Seq
  use creusot.int.Int32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_Vec
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  let rec create_arr (return (x: t_Vec)) = any
    [ return (result: t_Vec) -> {Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return {result}) ]
  
  type t_RangeToInclusive = { t_RangeToInclusive__end: UInt64.t }
  
  predicate in_bounds (self: t_RangeToInclusive) (seq: Seq.seq Int32.t) =
    UInt64.t'int self.t_RangeToInclusive__end < Seq.length seq
  
  predicate has_value (self: t_RangeToInclusive) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    Seq.([..]) seq 0 (UInt64.t'int self.t_RangeToInclusive__end + 1) = Slice64.view out
  
  let rec index (self_: t_Vec) (ix: t_RangeToInclusive) (return (x: Slice64.slice Int32.t)) =
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return (result: Slice64.slice Int32.t) -> {has_value ix (view self_) result} (! return {result}) ]
  
  let rec len (self_: Slice64.slice Int32.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {Seq.length (Slice64.view self_) = UInt64.t'int result} (! return {result}) ]
  
  let rec deref (self_: t_Vec) (return (x: Slice64.slice Int32.t)) = any
    [ return (result: Slice64.slice Int32.t) -> {Slice64.view result = view self_} (! return {result}) ]
  
  type t_Option = C_None | C_Some (Slice64.slice Int32.t)
  
  let rec get (self_: Slice64.slice Int32.t) (ix: t_RangeToInclusive) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {in_bounds ix (Slice64.view self_)
      -> (exists r: Slice64.slice Int32.t. result = C_Some r /\ has_value ix (Slice64.view self_) r)}
      {in_bounds ix (Slice64.view self_) \/ result = C_None}
      (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  predicate resolve_elswhere (self: t_RangeToInclusive) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    forall i: int. UInt64.t'int self.t_RangeToInclusive__end < i /\ i < Seq.length old'
      -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: t_RangeToInclusive)
    (return (x: MutBorrow.t (Slice64.slice Int32.t))) = {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return (result: MutBorrow.t (Slice64.slice Int32.t)) -> {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice Int32.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  let rec len'0 (self_: t_Vec) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds'0
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value'0
  
  let rec index'0 (self_: t_Vec) (ix: UInt64.t) (return (x: Int32.t)) =
    {[@expl:index requires] in_bounds'0 ix (view self_)}
    any [ return (result: Int32.t) -> {has_value'0 ix (view self_) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_range_to_inclusive (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret: t_Vec) -> [ &arr <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_5 <- { t_RangeToInclusive__end = (1: UInt64.t) } ] s1
      | s1 = index {arr} {_5} (fun (_ret: Slice64.slice Int32.t) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s2) | s2 = bb3 ]
    | bb3 = s0
      [ s0 = [ &_7 <- _8 = (2: UInt64.t) ] s1 | s1 = any [ br0 -> {_7 = false} (! bb12) | br1 -> {_7} (! bb4) ] ]
    | bb4 = s0
      [ s0 = [ &_12 <- (0: UInt64.t) ] s1
      | s1 = [ &_13 <- Slice64.length s ] s2
      | s2 = [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] _14} s4
      | s4 = bb5 ]
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r: Int32.t) -> [ &_10 <- r = (0: Int32.t) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb12) | br1 -> {_10} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_17 <- (1: UInt64.t) ] s1
      | s1 = [ &_18 <- Slice64.length s ] s2
      | s2 = [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] _19} s4
      | s4 = bb7 ]
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r: Int32.t) -> [ &_15 <- r = (1: Int32.t) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb12) | br1 -> {_15} (! bb8) ] ]
    | bb8 = s0 [ s0 = deref {arr} (fun (_ret: Slice64.slice Int32.t) -> [ &_26 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0
      [ s0 = [ &_28 <- { t_RangeToInclusive__end = (5: UInt64.t) } ] s1
      | s1 = get {_26} {_28} (fun (_ret: t_Option) -> [ &_24 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = s0 [ s0 = is_none {_24} (fun (_ret: bool) -> [ &_22 <- _ret ] s1) | s1 = bb15 ]
    | bb15 = any [ br0 -> {_22 = false} (! bb17) | br1 -> {_22} (! bb16) ]
    | bb16 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_32 <- _ret ] [ &arr <- _ret.final ] s1)
      | s1 = [ &_33 <- { t_RangeToInclusive__end = (2: UInt64.t) } ] s2
      | s2 = index_mut {_32} {_33} (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) -> [ &_31 <- _ret ] s3)
      | s3 = bb18 ]
    | bb18 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_31.current} {MutBorrow.get_id _31}
          (fun (_ret: MutBorrow.t (Slice64.slice Int32.t)) ->
            [ &s'0 <- _ret ] [ &_31 <- { _31 with current = _ret.final } ] s1)
      | s1 = len {s'0.current} (fun (_ret: UInt64.t) -> [ &_36 <- _ret ] s2)
      | s2 = bb19 ]
    | bb19 = s0
      [ s0 = [ &_35 <- _36 = (3: UInt64.t) ] s1 | s1 = any [ br0 -> {_35 = false} (! bb21) | br1 -> {_35} (! bb20) ] ]
    | bb20 = s0
      [ s0 = [ &_39 <- (0: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_40 <- _ptr ] s2)
      | s2 = [ &_41 <- Slice64.slice_ptr_len _40 ] s3
      | s3 = [ &_42 <- UInt64.lt _39 _41 ] s4
      | s4 = {[@expl:index in bounds] _42} s5
      | s5 = bb22 ]
    | bb22 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_39} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = [ &_43 <- (2: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_44 <- _ptr ] s3)
      | s3 = [ &_45 <- Slice64.slice_ptr_len _44 ] s4
      | s4 = [ &_46 <- UInt64.lt _43 _45 ] s5
      | s5 = {[@expl:index in bounds] _46} s6
      | s6 = bb23 ]
    | bb23 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_43} {(-1: Int32.t)}
          (fun (r: Slice64.slice Int32.t) -> [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = [ &_50 <- (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}- [ &_51 <- _ptr ] s3)
      | s3 = [ &_52 <- Slice64.slice_ptr_len _51 ] s4
      | s4 = [ &_53 <- UInt64.lt _50 _52 ] s5
      | s5 = {[@expl:index in bounds] _53} s6
      | s6 = bb24 ]
    | bb24 = s0
      [ s0 = -{resolve s'0}- s1
      | s1 = -{resolve _31}- s2
      | s2 = Slice64.get <Int32.t> {s'0.current} {_50} (fun (r: Int32.t) -> [ &_48 <- r = (1: Int32.t) ] s3)
      | s3 = any [ br0 -> {_48 = false} (! bb26) | br1 -> {_48} (! bb25) ] ]
    | bb25 = s0 [ s0 = len'0 {arr} (fun (_ret: UInt64.t) -> [ &_57 <- _ret ] s1) | s1 = bb27 ]
    | bb27 = s0
      [ s0 = [ &_56 <- _57 = (5: UInt64.t) ] s1 | s1 = any [ br0 -> {_56 = false} (! bb29) | br1 -> {_56} (! bb28) ] ]
    | bb28 = s0 [ s0 = index'0 {arr} {(0: UInt64.t)} (fun (_ret: Int32.t) -> [ &_63 <- _ret ] s1) | s1 = bb30 ]
    | bb30 = s0
      [ s0 = [ &_61 <- _63 = (-1: Int32.t) ] s1 | s1 = any [ br0 -> {_61 = false} (! bb32) | br1 -> {_61} (! bb31) ] ]
    | bb31 = s0 [ s0 = index'0 {arr} {(1: UInt64.t)} (fun (_ret: Int32.t) -> [ &_69 <- _ret ] s1) | s1 = bb33 ]
    | bb33 = s0
      [ s0 = [ &_67 <- _69 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_67 = false} (! bb35) | br1 -> {_67} (! bb34) ] ]
    | bb34 = s0 [ s0 = index'0 {arr} {(2: UInt64.t)} (fun (_ret: Int32.t) -> [ &_75 <- _ret ] s1) | s1 = bb36 ]
    | bb36 = s0
      [ s0 = [ &_73 <- _75 = (-1: Int32.t) ] s1 | s1 = any [ br0 -> {_73 = false} (! bb38) | br1 -> {_73} (! bb37) ] ]
    | bb37 = s0 [ s0 = index'0 {arr} {(3: UInt64.t)} (fun (_ret: Int32.t) -> [ &_81 <- _ret ] s1) | s1 = bb39 ]
    | bb39 = s0
      [ s0 = [ &_79 <- _81 = (3: Int32.t) ] s1 | s1 = any [ br0 -> {_79 = false} (! bb41) | br1 -> {_79} (! bb40) ] ]
    | bb40 = s0 [ s0 = index'0 {arr} {(4: UInt64.t)} (fun (_ret: Int32.t) -> [ &_87 <- _ret ] s1) | s1 = bb42 ]
    | bb42 = s0
      [ s0 = [ &_85 <- _87 = (4: Int32.t) ] s1 | s1 = any [ br0 -> {_85 = false} (! bb44) | br1 -> {_85} (! bb45) ] ]
    | bb45 = return {_0}
    | bb44 = {false} any
    | bb41 = {false} any
    | bb38 = {false} any
    | bb35 = {false} any
    | bb32 = {false} any
    | bb29 = {false} any
    | bb26 = {false} any
    | bb21 = s0 [ s0 = -{resolve s'0}- s1 | s1 = -{resolve _31}- s2 | s2 = {false} any ]
    | bb17 = {false} any
    | bb12 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: t_RangeToInclusive = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _26: Slice64.slice Int32.t = Any.any_l ()
    | & _28: t_RangeToInclusive = Any.any_l ()
    | & s'0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _31: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _32: MutBorrow.t t_Vec = Any.any_l ()
    | & _33: t_RangeToInclusive = Any.any_l ()
    | & _35: bool = Any.any_l ()
    | & _36: UInt64.t = Any.any_l ()
    | & _39: UInt64.t = Any.any_l ()
    | & _40: Opaque.ptr = Any.any_l ()
    | & _41: UInt64.t = Any.any_l ()
    | & _42: bool = Any.any_l ()
    | & _43: UInt64.t = Any.any_l ()
    | & _44: Opaque.ptr = Any.any_l ()
    | & _45: UInt64.t = Any.any_l ()
    | & _46: bool = Any.any_l ()
    | & _48: bool = Any.any_l ()
    | & _50: UInt64.t = Any.any_l ()
    | & _51: Opaque.ptr = Any.any_l ()
    | & _52: UInt64.t = Any.any_l ()
    | & _53: bool = Any.any_l ()
    | & _56: bool = Any.any_l ()
    | & _57: UInt64.t = Any.any_l ()
    | & _61: bool = Any.any_l ()
    | & _63: Int32.t = Any.any_l ()
    | & _67: bool = Any.any_l ()
    | & _69: Int32.t = Any.any_l ()
    | & _73: bool = Any.any_l ()
    | & _75: Int32.t = Any.any_l ()
    | & _79: bool = Any.any_l ()
    | & _81: Int32.t = Any.any_l ()
    | & _85: bool = Any.any_l ()
    | & _87: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
