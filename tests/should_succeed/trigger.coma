module M_inner__id_mono
  use mach.int.Int
  
  function id (i: int) : int = i
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  function id_mono : ()
  
  goal vc_id_mono: [@expl:id_mono ensures] forall i: int, j: int [id i, id j]. i <= j -> id i <= id j
end
module M_test
  use mach.int.Int
  use creusot.prelude.Any
  
  function id (i: int) : int
  
  constant id_mono : ()
  
  axiom id_mono_spec: forall i: int, j: int [id i, id j]. i <= j -> id i <= id j
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_2 <- () ] s1 | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & _2: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:test ensures] id 5 >= id 2} (! return {result}) ]
end
