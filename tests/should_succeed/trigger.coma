module M_trigger__inner__id_mono [#"trigger.rs" 17 4 17 20]
  let%span strigger = "trigger.rs" 16 14 16 87
  let%span strigger'0 = "trigger.rs" 17 21 17 23
  let%span strigger'1 = "trigger.rs" 11 8 11 9
  
  use mach.int.Int
  
  function id [#"trigger.rs" 10 4 10 28] (i : int) : int =
    [%#strigger'1] i
  
  function id_mono [#"trigger.rs" 17 4 17 20]  : ()
  
  goal vc_id_mono : [%#strigger] forall i : int, j : int [id i, id j] . i <= j  -> id i <= id j
end
module M_trigger__test [#"trigger.rs" 22 0 22 13]
  let%span strigger = "trigger.rs" 23 4 23 22
  let%span strigger'0 = "trigger.rs" 21 10 21 24
  let%span strigger'1 = "trigger.rs" 16 14 16 87
  
  use mach.int.Int
  use creusot.prelude.Any
  
  function id [#"trigger.rs" 10 4 10 28] (i : int) : int
  
  constant id_mono [#"trigger.rs" 17 4 17 20]  : ()
  
  axiom id_mono_spec : [%#strigger'1] forall i : int, j : int [id i, id j] . i <= j  -> id i <= id j
  
  meta "compute_max_steps" 1000000
  
  let rec test[#"trigger.rs" 22 0 22 13] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_2 <- [%#strigger] () ] s1 | s1 = bb1 ]  | bb1 = return''0 {_0} ]
    ) [ & _0 : () = Any.any_l () | & _2 : () = Any.any_l () ] 
    [ return''0 (result:())-> {[@expl:test ensures] [%#strigger'0] id 5 >= id 2} (! return' {result}) ]

end
