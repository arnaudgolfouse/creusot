module M_trigger__inner__id_mono [#"trigger.rs" 15 4 15 20]
  let%span strigger = "trigger.rs" 14 14 14 77
  let%span strigger'0 = "trigger.rs" 15 21 15 23
  let%span strigger'1 = "trigger.rs" 10 8 10 9
  
  use mach.int.Int
  
  function id [#"trigger.rs" 9 4 9 28] (i: int) : int = [%#strigger'1] i
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  function id_mono [#"trigger.rs" 15 4 15 20] : ()
  
  goal vc_id_mono: [@expl:id_mono ensures] [%#strigger] forall i: int, j: int [id i, id j]. i <= j -> id i <= id j
end
module M_trigger__test [#"trigger.rs" 20 0 20 13]
  let%span strigger = "trigger.rs" 21 4 21 22
  let%span strigger'0 = "trigger.rs" 19 10 19 24
  let%span strigger'1 = "trigger.rs" 14 14 14 77
  
  use mach.int.Int
  use creusot.prelude.Any
  
  function id [#"trigger.rs" 9 4 9 28] (i: int) : int
  
  constant id_mono [#"trigger.rs" 15 4 15 20] : ()
  
  axiom id_mono_spec: [%#strigger'1] forall i: int, j: int [id i, id j]. i <= j -> id i <= id j
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test [#"trigger.rs" 20 0 20 13] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_2 <- [%#strigger] () ] s1 | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & _2: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:test ensures] [%#strigger'0] id 5 >= id 2} (! return' {result}) ]
end
