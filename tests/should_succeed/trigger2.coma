module M_trigger2__resolve_seq
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  
  type t_Vec
  
  type t_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq (MutBorrow.t t_T)
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : MutBorrow.t t_T = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate resolve'0 [@inline:trivial] (self: t_Vec) =
    forall i: int. 0 <= i /\ i < Seq.length (view self) -> resolve (index_logic self i)
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 (_1: t_Vec)
  
  axiom resolve_axiom: forall x: t_Vec [resolve'1 x]. resolve'1 x -> resolve'0 x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant seq : t_Vec
  
  predicate resolve_seq (seq: t_Vec)
  
  goal vc_resolve_seq: [@expl:resolve_seq ensures] resolve'1 seq
    -> (forall i: int [Seq.get (view seq) i]. 0 <= i /\ i < Seq.length (view seq)
      -> (Seq.get (view seq) i).current = (Seq.get (view seq) i).final)
end
module M_trigger2__resolve_seq2
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  
  type t_Vec
  
  type t_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq (MutBorrow.t t_T)
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : MutBorrow.t t_T = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate resolve'0 [@inline:trivial] (self: t_Vec) =
    forall i: int. 0 <= i /\ i < Seq.length (view self) -> resolve (index_logic self i)
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 (_1: t_Vec)
  
  axiom resolve_axiom: forall x: t_Vec [resolve'1 x]. resolve'1 x -> resolve'0 x
  
  predicate resolve_seq (seq: t_Vec) =
    forall i: int [Seq.get (view seq) i]. 0 <= i /\ i < Seq.length (view seq)
      -> (Seq.get (view seq) i).current = (Seq.get (view seq) i).final
  
  axiom resolve_seq_spec: forall seq: t_Vec. resolve'1 seq -> resolve_seq seq
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant seq : t_Vec
  
  predicate resolve_seq2 (seq: t_Vec)
  
  goal vc_resolve_seq2: resolve'1 seq -> resolve_seq seq
    -> ([@expl:resolve_seq2 ensures] resolve'1 seq -> resolve_seq seq)
end
