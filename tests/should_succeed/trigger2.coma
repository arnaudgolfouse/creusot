module M_resolve_seq
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  
  type t_Vec_ref_T_Global
  
  type t_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_ref_T_Global (self: t_Vec_ref_T_Global) : Seq.seq (MutBorrow.t t_T)
  
  axiom view_Vec_ref_T_Global_spec: forall self: t_Vec_ref_T_Global. Seq.length (view_Vec_ref_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  function index_Vec_ref_T_Global [@inline:trivial] (self: t_Vec_ref_T_Global) (ix: int) : MutBorrow.t t_T =
    Seq.get (view_Vec_ref_T_Global self) ix
  
  meta "rewrite_def" function index_Vec_ref_T_Global
  
  predicate resolve_Vec_ref_T_Global [@inline:trivial] (self: t_Vec_ref_T_Global) =
    forall i: int. 0 <= i /\ i < Seq.length (view_Vec_ref_T_Global self)
      -> resolve_ref_T (index_Vec_ref_T_Global self i)
  
  meta "rewrite_def" predicate resolve_Vec_ref_T_Global
  
  predicate resolve_Vec_ref_T_Global'0 (_1: t_Vec_ref_T_Global)
  
  axiom resolve_axiom: forall x: t_Vec_ref_T_Global [resolve_Vec_ref_T_Global'0 x]. resolve_Vec_ref_T_Global'0 x
      -> resolve_Vec_ref_T_Global x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant seq : t_Vec_ref_T_Global
  
  predicate resolve_seq_T (seq: t_Vec_ref_T_Global)
  
  goal vc_resolve_seq_T: [@expl:resolve_seq ensures] resolve_Vec_ref_T_Global'0 seq
    -> (forall i: int [Seq.get (view_Vec_ref_T_Global seq) i]. 0 <= i /\ i < Seq.length (view_Vec_ref_T_Global seq)
      -> (Seq.get (view_Vec_ref_T_Global seq) i).current = (Seq.get (view_Vec_ref_T_Global seq) i).final)
end
module M_resolve_seq2
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  
  type t_Vec_ref_T_Global
  
  type t_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_ref_T_Global (self: t_Vec_ref_T_Global) : Seq.seq (MutBorrow.t t_T)
  
  axiom view_Vec_ref_T_Global_spec: forall self: t_Vec_ref_T_Global. Seq.length (view_Vec_ref_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  function index_Vec_ref_T_Global [@inline:trivial] (self: t_Vec_ref_T_Global) (ix: int) : MutBorrow.t t_T =
    Seq.get (view_Vec_ref_T_Global self) ix
  
  meta "rewrite_def" function index_Vec_ref_T_Global
  
  predicate resolve_Vec_ref_T_Global [@inline:trivial] (self: t_Vec_ref_T_Global) =
    forall i: int. 0 <= i /\ i < Seq.length (view_Vec_ref_T_Global self)
      -> resolve_ref_T (index_Vec_ref_T_Global self i)
  
  meta "rewrite_def" predicate resolve_Vec_ref_T_Global
  
  predicate resolve_Vec_ref_T_Global'0 (_1: t_Vec_ref_T_Global)
  
  axiom resolve_axiom: forall x: t_Vec_ref_T_Global [resolve_Vec_ref_T_Global'0 x]. resolve_Vec_ref_T_Global'0 x
      -> resolve_Vec_ref_T_Global x
  
  predicate resolve_seq_T (seq: t_Vec_ref_T_Global) =
    forall i: int [Seq.get (view_Vec_ref_T_Global seq) i]. 0 <= i /\ i < Seq.length (view_Vec_ref_T_Global seq)
      -> (Seq.get (view_Vec_ref_T_Global seq) i).current = (Seq.get (view_Vec_ref_T_Global seq) i).final
  
  axiom resolve_seq_T_spec: forall seq: t_Vec_ref_T_Global. resolve_Vec_ref_T_Global'0 seq -> resolve_seq_T seq
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant seq : t_Vec_ref_T_Global
  
  predicate resolve_seq2_T (seq: t_Vec_ref_T_Global)
  
  goal vc_resolve_seq2_T: resolve_Vec_ref_T_Global'0 seq -> resolve_seq_T seq
    -> ([@expl:resolve_seq2 ensures] resolve_Vec_ref_T_Global'0 seq -> resolve_seq_T seq)
end
