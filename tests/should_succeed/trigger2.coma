module M_trigger2__resolve_seq [#"trigger2.rs" 6 0 6 43]
  let%span strigger2 = "trigger2.rs" 5 10 5 33
  let%span strigger2'0 = "trigger2.rs" 8 8 9 32
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 77 20 77 76
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 48 8 48 31
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq (MutBorrow.t t_T)
  
  axiom view_spec: forall self: t_Vec. [%#svec] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate resolve (self: MutBorrow.t t_T) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) = resolve _0
  
  function index_logic (self: t_Vec) (ix: int) : MutBorrow.t t_T = [%#svec'1] Seq.get (view self) ix
  
  predicate resolve'1 (self: t_Vec) =
    [%#svec'0] forall i: int. 0 <= i /\ i < Seq.length (view self) -> resolve'0 (index_logic self i)
  
  predicate resolve'2 (_0: t_Vec) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant seq : t_Vec
  
  predicate resolve_seq [#"trigger2.rs" 6 0 6 43] (seq'0: t_Vec)
  
  goal vc_resolve_seq: [@expl:resolve_seq ensures] [%#strigger2] resolve'2 seq
    -> ([%#strigger2'0] forall i: int [Seq.get (view seq) i]. 0 <= i /\ i < Seq.length (view seq)
      -> (Seq.get (view seq) i).current = (Seq.get (view seq) i).final)
end
module M_trigger2__resolve_seq2 [#"trigger2.rs" 15 0 15 48]
  let%span strigger2 = "trigger2.rs" 14 10 14 33
  let%span strigger2'0 = "trigger2.rs" 5 10 5 33
  let%span strigger2'1 = "trigger2.rs" 16 4 16 20
  let%span strigger2'2 = "trigger2.rs" 8 8 9 32
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 77 20 77 76
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 48 8 48 31
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq (MutBorrow.t t_T)
  
  axiom view_spec: forall self: t_Vec. [%#svec'0] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate resolve (self: MutBorrow.t t_T) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) = resolve _0
  
  function index_logic (self: t_Vec) (ix: int) : MutBorrow.t t_T = [%#svec'1] Seq.get (view self) ix
  
  predicate resolve'1 (self: t_Vec) =
    [%#svec] forall i: int. 0 <= i /\ i < Seq.length (view self) -> resolve'0 (index_logic self i)
  
  predicate resolve'2 (_0: t_Vec) = resolve'1 _0
  
  predicate resolve_seq [#"trigger2.rs" 6 0 6 43] (seq: t_Vec) =
    [%#strigger2'2] forall i: int [Seq.get (view seq) i]. 0 <= i /\ i < Seq.length (view seq)
      -> (Seq.get (view seq) i).current = (Seq.get (view seq) i).final
  
  axiom resolve_seq_spec: forall seq: t_Vec. [%#strigger2'0] resolve'2 seq -> resolve_seq seq
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant seq : t_Vec
  
  predicate resolve_seq2 [#"trigger2.rs" 15 0 15 48] (seq'0: t_Vec)
  
  goal vc_resolve_seq2: ([%#strigger2'0] resolve'2 seq -> resolve_seq seq)
    -> ([@expl:resolve_seq2 ensures] [%#strigger2] resolve'2 seq -> resolve_seq seq)
end
