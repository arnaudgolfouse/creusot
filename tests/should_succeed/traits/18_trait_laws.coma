module M_uses_op
  type t_T
  
  function op_T (self: t_T) (_2: t_T) : t_T
  
  function reflexive_T (a: t_T) (b: t_T) : ()
  
  axiom reflexive_T_spec: forall a: t_T, b: t_T. op_T a b = op_T b a
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant x : t_T
  
  constant y : t_T
  
  predicate uses_op_T (x: t_T) (y: t_T)
  
  goal vc_uses_op_T: [@expl:uses_op ensures] (op_T x y = op_T y x) = true
end
module M_impl_Symmetric_for_unit__reflexive (* <() as Symmetric> *)
  function op_unit (self: ()) (_2: ()) : () = ()
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : ()
  
  constant b : ()
  
  function reflexive_unit (a: ()) (b: ()) : ()
  
  goal vc_reflexive_unit: [@expl:reflexive ensures] op_unit a b = op_unit b a
end
module M_impl_laws
  function op_unit (self: ()) (_2: ()) : () = ()
  
  function reflexive_unit (a: ()) (b: ()) : () = ()
  
  axiom reflexive_unit_spec: forall a: (), b: (). op_unit a b = op_unit b a
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  predicate impl_laws
  
  goal vc_impl_laws: [@expl:impl_laws ensures] (op_unit () () = op_unit () ()) = true
end
module M_impl_Symmetric_for_unit__reflexive__refines (* <() as Symmetric> *)
  function op_unit (self: ()) (_2: ()) : () = ()
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall a: (). forall b: (). forall result: (). op_unit a b = op_unit b a -> op_unit a b = op_unit b a
end
