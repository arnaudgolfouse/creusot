module M_04__user
  use creusot.prelude.Any
  
  type t_T
  
  type tuple = { f0: t_T; f1: t_T }
  
  predicate inv (_1: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef: forall args: tuple [precondition () args]. (let {f0 = self; f1 = o} = args in inv'0 o
        /\ inv'0 self) -> precondition () args
  
  predicate postcondition_once (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef:
    forall args: tuple, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let {f0 = self; f1 = o} = args in true)
  
  let rec func1 (self: t_T) (o: t_T) (return (x: bool)) = {[@expl:func1 requires] precondition () { f0 = self; f1 = o }}
    any [ return' (result: bool) -> {postcondition_once () { f0 = self; f1 = o } result} (! return {result}) ]
  
  predicate precondition'0 (self: ()) (args: tuple)
  
  axiom precondition_fndef'0: forall args: tuple [precondition'0 () args]. (let {f0 = self; f1 = o} = args in inv'0 o
        /\ inv'0 self) -> precondition'0 () args
  
  predicate postcondition_once'0 (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef'0:
    forall args: tuple, res: bool [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let {f0 = self; f1 = o} = args in true)
  
  let rec func2 (self: t_T) (o: t_T) (return (x: bool)) = {[@expl:func2 requires] precondition'0 () { f0 = self;
                                                                                                      f1 = o }}
    any [ return' (result: bool) -> {postcondition_once'0 () { f0 = self; f1 = o } result} (! return {result}) ]
  
  predicate precondition'1 (self: ()) (args: tuple)
  
  axiom precondition_fndef'1: forall args: tuple [precondition'1 () args]. (let {f0 = self; f1 = o} = args in inv'0 o
        /\ inv'0 self) -> precondition'1 () args
  
  predicate postcondition_once'1 (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef'1:
    forall args: tuple, res: bool [postcondition_once'1 () args res]. postcondition_once'1 () args res
      -> (let {f0 = self; f1 = o} = args in true)
  
  let rec func3 (self: t_T) (o: t_T) (return (x: bool)) = {[@expl:func3 requires] precondition'1 () { f0 = self;
                                                                                                      f1 = o }}
    any [ return' (result: bool) -> {postcondition_once'1 () { f0 = self; f1 = o } result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec user (a: t_T) (b: t_T) (return (x: bool)) = {[@expl:user 'a' type invariant] inv'0 a}
    {[@expl:user 'b' type invariant] inv'0 b}
    (! bb0
    [ bb0 = s0 [ s0 = func1 {a} {b} (fun (_ret: bool) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = any [ br0 -> {_4 = false} (! bb7) | br1 -> {_4} (! bb2) ]
    | bb2 = s0 [ s0 = func2 {b} {a} (fun (_ret: bool) -> [ &_7 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = any [ br0 -> {_7 = false} (! bb7) | br1 -> {_7} (! bb4) ]
    | bb4 = s0 [ s0 = func3 {a} {b} (fun (_ret: bool) -> [ &_0 <- _ret ] s1) | s1 = bb9 ]
    | bb7 = s0 [ s0 = [ &_0 <- false ] s1 | s1 = bb9 ]
    | bb9 = return {_0} ]
    [ & _0: bool = Any.any_l () | & a: t_T = a | & b: t_T = b | & _4: bool = Any.any_l () | & _7: bool = Any.any_l () ])
    [ return (result: bool) -> {[@expl:user ensures] result = false} (! return {result}) ]
end
