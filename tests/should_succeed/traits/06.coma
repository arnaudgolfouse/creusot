module M_06__test
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_T
  
  type t_Tgt
  
  type tuple = { f0: t_T; f1: UInt64.t }
  
  predicate inv (_0: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef: forall args: tuple [precondition () args]. (let {f0 = self; f1 = ix} = args in inv'0 self)
      -> precondition () args
  
  predicate inv'1 (_0: t_Tgt)
  
  predicate postcondition_once (self: ()) (args: tuple) (result: t_Tgt)
  
  axiom postcondition_fndef:
    forall args: tuple, res: t_Tgt [postcondition_once () args res]. postcondition_once () args res
      -> (let {f0 = self; f1 = ix} = args in inv'1 res)
  
  let rec ix (self: t_T) (ix'0: UInt64.t) (return (x: t_Tgt)) = {[@expl:ix requires] precondition () { f0 = self;
                                                                                                       f1 = ix'0 }}
    any [ return' (result: t_Tgt) -> {postcondition_once () { f0 = self; f1 = ix'0 } result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (a: t_T) (return (x: t_Tgt)) = {[@expl:test 'a' type invariant] inv'0 a}
    (! bb0
    [ bb0 = s0 [ s0 = ix {a} {(0: UInt64.t)} (fun (_ret: t_Tgt) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = return {_0} ] [ & _0: t_Tgt = Any.any_l () | & a: t_T = a ])
    [ return (result: t_Tgt) -> {[@expl:test result type invariant] inv'1 result} (! return {result}) ]
end
