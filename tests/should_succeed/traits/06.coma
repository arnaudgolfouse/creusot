module M_test
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_T
  
  type t_Tgt
  
  type tup2_ref_T_usize = { f0: t_T; f1: UInt64.t }
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate precondition_ix (self: ()) (args: tup2_ref_T_usize)
  
  axiom precondition_fndef:
    forall args: tup2_ref_T_usize [precondition_ix () args]. (let {f0 = self; f1 = ix} = args in inv_ref_T self)
      -> precondition_ix () args
  
  predicate inv_Tgt (_1: t_Tgt)
  
  predicate postcondition_once_ix (self: ()) (args: tup2_ref_T_usize) (result: t_Tgt)
  
  axiom postcondition_fndef:
    forall args: tup2_ref_T_usize, res: t_Tgt [postcondition_once_ix () args res]. postcondition_once_ix () args res
      -> (let {f0 = self; f1 = ix} = args in inv_Tgt res)
  
  let rec ix_T (self: t_T) (ix: UInt64.t) (return (x: t_Tgt)) = {[@expl:ix requires] precondition_ix () { f0 = self;
                                                                                                          f1 = ix }}
    any [ return (result: t_Tgt) -> {postcondition_once_ix () { f0 = self; f1 = ix } result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_T (a: t_T) (return (x: t_Tgt)) = {[@expl:test 'a' type invariant] inv_ref_T a}
    (! bb0
    [ bb0 = s0 [ s0 = ix_T {a} {(0: UInt64.t)} (fun (_ret: t_Tgt) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = return {_0} ] [ & _0: t_Tgt = Any.any_l () | & a: t_T = a ])
    [ return (result: t_Tgt) -> {[@expl:test result type invariant] inv_Tgt result} (! return {result}) ]
end
