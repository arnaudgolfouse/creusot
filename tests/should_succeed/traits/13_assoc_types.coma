module M_impl_Model_for_ref_T__model (* <&T as Model> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_ModelTy
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate inv_ModelTy (_1: t_ModelTy)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec model_ref_T (self: t_T) (return (x: t_ModelTy)) = {[@expl:model 'self' type invariant] inv_ref_T self}
    (! bb0
    [ bb0 = s0 [ s0 = model_ref_T {self} (fun (_ret: t_ModelTy) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = return {_0} ] [ & _0: t_ModelTy = Any.any_l () | & self: t_T = self ])
    [ return (result: t_ModelTy) -> {[@expl:model result type invariant] inv_ModelTy result} (! return {result}) ]
end
module M_impl_Model_for_ref_T__model__refines (* <&T as Model> *)
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  type t_ModelTy
  
  predicate inv_ModelTy (_1: t_ModelTy)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_T. inv_ref_T self
      -> inv_ref_T self /\ (forall result: t_ModelTy. inv_ModelTy result -> inv_ModelTy result)
end
