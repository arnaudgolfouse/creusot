module M_test
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Vec_T_Global
  
  type t_Vec_T = { f0: t_Vec_T_Global }
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate inv_Vec_T (_1: t_Vec_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Vec_T [inv_Vec_T x]. inv_Vec_T x = inv_Vec_T_Global x.f0
  
  predicate invariant_ref_Vec_T [@inline:trivial] (self: MutBorrow.t t_Vec_T) =
    inv_Vec_T self.current /\ inv_Vec_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_T
  
  predicate inv_ref_Vec_T [@inline:trivial] (_1: MutBorrow.t t_Vec_T) = invariant_ref_Vec_T _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T
  
  predicate resolve_ref_Vec_T [@inline:trivial] (_1: MutBorrow.t t_Vec_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_T
  
  function view_Vec_T (self: t_Vec_T) : Seq.seq t_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_T (x: MutBorrow.t t_Vec_T) (return (x'0: ())) = {[@expl:test 'x' type invariant] inv_ref_Vec_T x}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Vec_T x} s1 | s1 = -{resolve_ref_Vec_T x}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & x: MutBorrow.t t_Vec_T = x ])
    [ return (result: ()) -> {[@expl:test ensures] view_Vec_T x.current = view_Vec_T x.current} (! return {result}) ]
end
