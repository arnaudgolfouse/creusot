module M_16_impl_cloning__test [#"16_impl_cloning.rs" 16 0 16 30]
  let%span s16_impl_cloning = "16_impl_cloning.rs" 16 15 16 16
  let%span s16_impl_cloning'0 = "16_impl_cloning.rs" 15 10 15 21
  let%span smodel = "../../../creusot-contracts/src/model.rs" 63 8 63 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 50 20 50 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 99 20 99 41
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 686 20 686 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_Vec'0 = { t_Vec__0: t_Vec }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'0] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = [%#svec] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Vec'0 [inv'3 x]. inv'3 x
      = match x with
        | {t_Vec__0 = a_0} -> inv'2 a_0
        end
  
  predicate invariant''2 (self: MutBorrow.t t_Vec'0) = [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0: MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_Vec'0 [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate resolve (self: MutBorrow.t t_Vec'0) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_Vec'0) = resolve _0
  
  function view'0 [#"16_impl_cloning.rs" 10 4 10 33] (self: t_Vec'0) : Seq.seq t_T
  
  function view'1 (self: MutBorrow.t t_Vec'0) : Seq.seq t_T = [%#smodel] view'0 self.current
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test [#"16_impl_cloning.rs" 16 0 16 30] (x: MutBorrow.t t_Vec'0) (return' (x'0: ())) =
    {[@expl:test 'x' type invariant] [%#s16_impl_cloning] inv'4 x}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'4 x'0} s1 | s1 = -{resolve'0 x'0}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l () | & x'0: MutBorrow.t t_Vec'0 = x ])
    [ return''0 (result: ()) -> {[@expl:test ensures] [%#s16_impl_cloning'0] view'1 x = view'0 x.current}
      (! return' {result}) ]
end
