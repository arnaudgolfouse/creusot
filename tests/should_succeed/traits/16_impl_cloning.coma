module M_16_impl_cloning__test
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_Vec'0 = { t_Vec__0: t_Vec }
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom: forall x: t_Vec [inv'2 x]. inv'2 x -> invariant''1 x
  
  predicate inv'3 (_1: t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Vec'0 [inv'3 x]. inv'3 x = inv'2 x.t_Vec__0
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec'0) = inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'4 [@inline:trivial] (_1: MutBorrow.t t_Vec'0) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_Vec'0) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  function view'0 (self: t_Vec'0) : Seq.seq t_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (x: MutBorrow.t t_Vec'0) (return (x'0: ())) = {[@expl:test 'x' type invariant] inv'4 x}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'4 x} s1 | s1 = -{resolve x}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & x: MutBorrow.t t_Vec'0 = x ])
    [ return (result: ()) -> {[@expl:test ensures] view'0 x.current = view'0 x.current} (! return {result}) ]
end
