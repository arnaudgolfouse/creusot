module M_12_default_method__T__default [#"12_default_method.rs" 6 4 6 28]
  let%span s12_default_method = "12_default_method.rs" 7 8 7 9
  let%span s12_default_method'0 = "12_default_method.rs" 6 16 6 20
  let%span s12_default_method'1 = "12_default_method.rs" 1 0 6 4
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 93 8 93 18
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Self
  
  predicate inv (_0: t_Self)
  
  predicate invariant' (self: t_Self) = [%#sinvariant] inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: t_Self)
  
  axiom inv_axiom [@rewrite]: forall x: t_Self [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_Self)
  
  axiom precondition_fndef:
    [%#s12_default_method'1] forall args: t_Self [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_Self) (result: UInt32.t)
  
  axiom postcondition_fndef:
    [%#s12_default_method'1] forall args: t_Self, res: UInt32.t [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in true)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec default [#"12_default_method.rs" 6 4 6 28] (self: t_Self) (return' (x: UInt32.t)) =
    {[@expl:default 'self' type invariant] [%#s12_default_method'0] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- [%#s12_default_method] (0: UInt32.t) ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: UInt32.t = Any.any_l () ]) [ return''0 (result: UInt32.t) -> (! return' {result}) ]
end
module M_12_default_method__should_use_impl [#"12_default_method.rs" 19 0 19 30]
  let%span s12_default_method = "12_default_method.rs" 18 0 18 29
  let%span s12_default_method'0 = "12_default_method.rs" 12 8 12 12
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  let rec default (self: UInt32.t) (return' (x: UInt32.t)) = any
    [ return''0 (result: UInt32.t) -> (! return' {result}) ]
  
  predicate logic_default [#"12_default_method.rs" 11 4 11 34] (self: UInt32.t) = [%#s12_default_method'0] true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec should_use_impl [#"12_default_method.rs" 19 0 19 30] (x: UInt32.t) (return' (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = default {x'0} (fun (_ret: UInt32.t) -> [ &_3 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & x'0: UInt32.t = x | & _3: UInt32.t = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:should_use_impl ensures] [%#s12_default_method] logic_default x}
      (! return' {result}) ]
end
