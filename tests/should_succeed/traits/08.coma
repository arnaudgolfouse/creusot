module M_08__Tr__program
  use creusot.prelude.Any
  
  type t_Self
  
  predicate inv (_1: t_Self)
  
  predicate invariant' [@inline:trivial] (self: t_Self) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: t_Self)
  
  axiom inv_axiom [@rewrite]: forall x: t_Self [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_Self)
  
  axiom precondition_fndef: forall args: t_Self [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_Self) (result: ())
  
  axiom postcondition_fndef:
    forall args: t_Self, res: () [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in true)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec program (self: t_Self) (return (x: ())) = {[@expl:program 'self' type invariant] inv'0 self}
    (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_08__test
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate resolve (_1: t_T)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (_1: t_T) (return (x: ())) = {[@expl:test '_1' type invariant] inv _1}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv _1} s1 | s1 = -{resolve _1}- s2 | s2 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & _1: t_T = _1 ]) [ return (result: ()) -> (! return {result}) ]
end
