module M_test
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_T (t: UInt32.t) (return (x: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = UInt32.add {t} {(0: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l () | & t: UInt32.t = t ]) [ return (result: UInt32.t) -> (! return {result}) ]
end
module M_test2
  use creusot.prelude.Any
  
  type t_X
  
  predicate inv_X (_1: t_X)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test2_T (t: t_X) (return (x: t_X)) = {[@expl:test2 't' type invariant] inv_X t}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- t ] s1 | s1 = bb1 ] | bb1 = return {_0} ] [ & _0: t_X = Any.any_l () | & t: t_X = t ])
    [ return (result: t_X) -> {[@expl:test2 result type invariant] inv_X result} (! return {result}) ]
end
