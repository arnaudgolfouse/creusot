module M_10__qyi9986317399101135331__resolve_coherence [#"10.rs" 6 9 6 16] (* <Pair<T, U> as creusot_contracts::Resolve> *)
  let%span s10 = "10.rs" 6 9 6 16
  let%span s10'0 = "10.rs" 7 22 7 34
  
  type t_T
  
  type t_U
  
  type t_Pair  =
    { t_Pair__0: t_T; t_Pair__1: t_U }
  
  predicate resolve (_0: t_U)
  
  predicate resolve'0 (_0: t_T)
  
  predicate structural_resolve (_0: t_Pair) =
    match _0 with
      | {t_Pair__0 = x0 ; t_Pair__1 = x1} -> resolve x1 /\ resolve'0 x0
      end
  
  predicate resolve'1 [#"10.rs" 6 9 6 16] (self: t_Pair) =
    [%#s10'0] resolve'0 self.t_Pair__0 /\ resolve self.t_Pair__1
  
  constant self  : t_Pair
  
  function resolve_coherence [#"10.rs" 6 9 6 16] (self'0: t_Pair) : ()
  
  goal vc_resolve_coherence: ([%#s10] structural_resolve self)  -> ([%#s10] resolve'1 self)
end
module M_10__qyi9986317399101135331__resolve_coherence__refines [#"10.rs" 6 9 6 16] (* <Pair<T, U> as creusot_contracts::Resolve> *)
  let%span s10 = "10.rs" 6 9 6 16
  let%span s10'0 = "10.rs" 7 22 7 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  type t_T
  
  type t_U
  
  type t_Pair  =
    { t_Pair__0: t_T; t_Pair__1: t_U }
  
  predicate resolve (_0: t_U)
  
  predicate resolve'0 (_0: t_T)
  
  predicate structural_resolve (_0: t_Pair) =
    match _0 with
      | {t_Pair__0 = x0 ; t_Pair__1 = x1} -> resolve x1 /\ resolve'0 x0
      end
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_U)
  
  predicate inv'1 (_0: t_Pair)
  
  axiom inv_axiom [@rewrite]: forall x: t_Pair [inv'1 x]. inv'1 x
  = match x with
    | {t_Pair__0 = a_0 ; t_Pair__1 = a_1} -> inv a_0 /\ inv'0 a_1
    end
  
  predicate invariant' (self: t_Pair) =
    [%#sinvariant] inv'1 self
  
  predicate inv'2 (_0: t_Pair)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Pair [inv'2 x]. inv'2 x = invariant' x
  
  predicate resolve'1 [#"10.rs" 6 9 6 16] (self: t_Pair) =
    [%#s10'0] resolve'0 self.t_Pair__0 /\ resolve self.t_Pair__1
  
  goal refines: [%#s10] forall self: t_Pair. structural_resolve self /\ inv'2 self
   -> structural_resolve self /\ (forall result: (). resolve'1 self  -> resolve'1 self)
end
