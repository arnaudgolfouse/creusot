module M_07__qyi5864428518595652275__ix [#"07.rs" 11 4 11 36] (* <i32 as Ix> *)
  use creusot.prelude.Any
  use creusot.int.Int32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ix [#"07.rs" 11 4 11 36] (self: Int32.t) (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_07__test [#"07.rs" 16 0 16 81]
  let%span s07 = "07.rs" 17 4 17 8
  
  use creusot.prelude.Any
  use creusot.int.UInt32
  use creusot.int.UInt64
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test [#"07.rs" 16 0 16 81] (_a: UInt32.t) (_b: UInt64.t) (return' (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- [%#s07] true ] s1 | s1 = return''0 {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return''0 (result: bool) -> (! return' {result}) ]
end
module M_07__test2 [#"07.rs" 20 0 20 21]
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec ix (self: Int32.t) (return' (x: ())) = any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test2 [#"07.rs" 20 0 20 21] (a: Int32.t) (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = ix {a'0} (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & a'0: Int32.t = a ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
