module M_impl_Ix_for_i32__ix (* <i32 as Ix> *)
  use creusot.prelude.Any
  use creusot.int.Int32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ix_i32 (self: Int32.t) (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_test
  use creusot.prelude.Any
  use creusot.int.UInt32
  use creusot.int.UInt64
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_G (_a: UInt32.t) (_b: UInt64.t) (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = return {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return (result: bool) -> (! return {result}) ]
end
module M_test2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec ix_i32 (self: Int32.t) (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test2 (a: Int32.t) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = ix_i32 {a} (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & a: Int32.t = a ]) [ return (result: ()) -> (! return {result}) ]
end
