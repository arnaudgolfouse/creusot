module M_02__omg
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate resolve (_1: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_T)
  
  axiom precondition_fndef: forall args: t_T [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_T) (result: bool)
  
  axiom postcondition_fndef:
    forall args: t_T, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in res = true)
  
  let rec is_true (self: t_T) (return (x: bool)) = {[@expl:is_true requires] precondition () self}
    any [ return (result: bool) -> {postcondition_once () self result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec omg (a: t_T) (return (x: bool)) = {[@expl:omg 'a' type invariant] inv a}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv a} s1
      | s1 = -{resolve a}- s2
      | s2 = is_true {a} (fun (_ret: bool) -> [ &_0 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = return {_0} ] [ & _0: bool = Any.any_l () | & a: t_T = a ])
    [ return (result: bool) -> {[@expl:omg ensures] result = true} (! return {result}) ]
end
