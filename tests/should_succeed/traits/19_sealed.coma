module M_19_sealed__p [#"19_sealed.rs" 16 0 16 29]
  let%span s19_sealed = "19_sealed.rs" 16 16 16 17
  let%span s19_sealed'0 = "19_sealed.rs" 15 10 15 30
  let%span s19_sealed'1 = "19_sealed.rs" 11 8 11 21
  
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate resolve (_0: t_T)
  
  function f [#"19_sealed.rs" 6 4 6 30] (self: t_T) (x: int) : int
  
  function g [#"19_sealed.rs" 10 4 10 29] (self: t_T) (x: int) : int =
    [%#s19_sealed'1] f self x + 1
  
  meta "compute_max_steps" 1000000
  
  let rec p[#"19_sealed.rs" 16 0 16 29] (x:t_T) (y:int) (return'  (x'0:()))= {[@expl:p 'x' type invariant] [%#s19_sealed] inv x}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv x'0} s1 | s1 = -{resolve x'0}- s2 | s2 = bb2 ] 
    | bb2 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () | & x'0: t_T = x ] 
    [ return''0 (result:())-> {[@expl:p ensures] [%#s19_sealed'0] g x y = f x y + 1} (! return' {result}) ]

end
