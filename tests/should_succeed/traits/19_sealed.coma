module M_19_sealed__p
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate resolve (_0: t_T)
  
  function f (self: t_T) (x: int) : int
  
  function g (self: t_T) (x: int) : int = f self x + 1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec p (x: t_T) (y: int) (return (x'0: ())) = {[@expl:p 'x' type invariant] inv x}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv x} s1 | s1 = -{resolve x}- s2 | s2 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & x: t_T = x ])
    [ return (result: ()) -> {[@expl:p ensures] g x y = f x y + 1} (! return {result}) ]
end
