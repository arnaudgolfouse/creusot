module M_unnest__unnest [#"unnest.rs" 8 0 8 64]
  let%span sunnest = "unnest.rs" 5 10 5 24
  let%span sunnest'0 = "unnest.rs" 6 10 6 24
  let%span sunnest'1 = "unnest.rs" 7 10 7 20
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 48 20 48 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t (MutBorrow.t UInt32.t)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: MutBorrow.t (MutBorrow.t UInt32.t)) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unnest [#"unnest.rs" 8 0 8 64] (x: MutBorrow.t (MutBorrow.t UInt32.t)) (return' (x'0: MutBorrow.t UInt32.t)) =
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {(x'0.current).current}
          (fun (_ret: MutBorrow.t UInt32.t) ->
            [ &_2 <- _ret ] [ &x'0 <- { x'0 with current = { x'0.current with current = _ret.final } } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s2)
      | s2 = -{resolve'0 _2}- s3
      | s3 = -{resolve'2 x'0}- s4
      | s4 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & x'0: MutBorrow.t (MutBorrow.t UInt32.t) = x
    | & _2: MutBorrow.t UInt32.t = Any.any_l () ])
    [ return''0 (result: MutBorrow.t UInt32.t) -> {[@expl:unnest ensures #0] [%#sunnest] result.current
      = (x.current).current}
      {[@expl:unnest ensures #1] [%#sunnest'0] result.final = (x.final).current}
      {[@expl:unnest ensures #2] [%#sunnest'1] (x.current).final = (x.final).final}
      (! return' {result}) ]
end
