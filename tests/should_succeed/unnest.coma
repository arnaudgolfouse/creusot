module M_unnest__unnest
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t UInt32.t)) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t UInt32.t)) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unnest (x: MutBorrow.t (MutBorrow.t UInt32.t)) (return (x'0: MutBorrow.t UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x.current.current}
          (fun (_ret: MutBorrow.t UInt32.t) ->
            [ &_2 <- _ret ] [ &x <- { x with current = { x.current with current = _ret.final } } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s2)
      | s2 = -{resolve'0 _2}- s3
      | s3 = -{resolve'2 x}- s4
      | s4 = return {_0} ] ]
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & x: MutBorrow.t (MutBorrow.t UInt32.t) = x
    | & _2: MutBorrow.t UInt32.t = Any.any_l () ])
    [ return (result: MutBorrow.t UInt32.t) -> {[@expl:unnest ensures #0] result.current = x.current.current}
      {[@expl:unnest ensures #1] result.final = x.final.current}
      {[@expl:unnest ensures #2] x.current.final = x.final.final}
      (! return {result}) ]
end
