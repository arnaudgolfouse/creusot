module M_one_side_update__f [#"one_side_update.rs" 5 0 5 10]
  let%span sone_side_update = "one_side_update.rs" 6 22 6 24
  let%span sone_side_update'0 = "one_side_update.rs" 8 7 8 11
  let%span sone_side_update'1 = "one_side_update.rs" 11 19 11 20
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MyInt  =
    { t_MyInt__0: UInt64.t }
  
  predicate resolve (self: MutBorrow.t t_MyInt) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_MyInt) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f[#"one_side_update.rs" 5 0 5 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- { t_MyInt__0 = ([%#sone_side_update] (10: UInt64.t)) } ] s1
      | s1 = MutBorrow.borrow_mut <t_MyInt> {a}
          (fun (_ret:MutBorrow.t t_MyInt) ->  [ &b <- _ret ]  [ &a <- _ret.final ] s2)
      | s2 = any [ br0 -> {false} (! bb2) | br1 -> {true} (! bb1) ]  ]
    
    | bb1 = s0 [ s0 = -{resolve'0 b}- s1 | s1 = bb3 ] 
    | bb2 = s0
      [ s0 =  [ &_6 <- { t_MyInt__0 = ([%#sone_side_update'1] (5: UInt64.t)) } ] s1
      | s1 =  [ &b <- { b with current = _6 } ] s2
      | s2 = -{resolve'0 b}- s3
      | s3 = bb3 ]
    
    | bb3 = return''0 {_0} ]
    
    [ & _0: () = Any.any_l ()
    | & a: t_MyInt = Any.any_l ()
    | & b: MutBorrow.t t_MyInt = Any.any_l ()
    | & _6: t_MyInt = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
