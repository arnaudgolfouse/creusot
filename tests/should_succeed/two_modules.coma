module M_mod2__x
  use creusot.prelude.Any
  
  type t_T = A | B | C
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x (_t: t_T) (return (x'0: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = return {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return (result: bool) -> (! return {result}) ]
end
module M_f
  use creusot.prelude.Any
  
  type t_T = A | B | C
  
  let rec x (_t: t_T) (return (x'0: bool)) = any [ return (result: bool) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_2 <- B ] s1 | s1 = x {_2} (fun (_ret: bool) -> [ &_1 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = return {_0} ] [ & _0: () = Any.any_l () | & _1: bool = Any.any_l () | & _2: t_T = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
