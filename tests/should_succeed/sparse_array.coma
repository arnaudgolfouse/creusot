module M_sparse_array__qyi1714485913065586857__view [#"sparse_array.rs" 38 4 38 33] (* <Sparse<T, SIZE> as creusot_contracts::View> *)
  let%span ssparse_array = "sparse_array.rs" 37 14 37 35
  let%span ssparse_array'0 = "sparse_array.rs" 41 21 41 81
  let%span ssparse_array'1 = "sparse_array.rs" 40 12 41 82
  let%span ssparse_array'2 = "sparse_array.rs" 81 20 81 75
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array t_T;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  type t_Option = C_None | C_Some t_T
  
  constant const_SIZE [#"sparse_array.rs" 33 8 33 25] : UInt64.t
  
  function index_logic [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate is_elt [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse) (i: int) =
    [%#ssparse_array'2] UInt64.t'int (index_logic self.t_Sparse__idx i) < UInt64.t'int self.t_Sparse__n
    /\ UInt64.t'int (index_logic self.t_Sparse__back (UInt64.t'int (index_logic self.t_Sparse__idx i))) = i
  
  function index_logic'0 [@inline:trivial] (self: Slice64.array t_T) (ix: int) : t_T =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Sparse
  
  function view [#"sparse_array.rs" 38 4 38 33] (self'0: t_Sparse) : Seq.seq t_Option
  
  goal vc_view:
    [@expl:view ensures] [%#ssparse_array] Seq.length (Seq.create (UInt64.t'int const_SIZE) ([%#ssparse_array'0] fun (i: int) -> if is_elt self i then
        C_Some (index_logic'0 self.t_Sparse__values i)
      else
        C_None
      ))
    = UInt64.t'int const_SIZE
end
module M_sparse_array__qyi15600151499664207324__resolve_coherence [#"sparse_array.rs" 58 4 58 30] (* <Sparse<T, SIZE> as creusot_contracts::Resolve> *)
  let%span ssparse_array = "sparse_array.rs" 55 15 55 24
  let%span ssparse_array'0 = "sparse_array.rs" 56 15 56 39
  let%span ssparse_array'1 = "sparse_array.rs" 57 4 57 30
  let%span ssparse_array'2 = "sparse_array.rs" 58 31 58 33
  let%span ssparse_array'3 = "sparse_array.rs" 50 12 50 63
  let%span ssparse_array'4 = "sparse_array.rs" 37 14 37 35
  let%span ssparse_array'5 = "sparse_array.rs" 40 12 41 82
  let%span ssparse_array'6 = "sparse_array.rs" 65 12 68 63
  let%span ssparse_array'7 = "sparse_array.rs" 81 20 81 75
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 41 20 41 73
  let%span sarray'0 = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  let%span sarray'1 = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  let%span soption = "../../creusot-contracts/src/std/option.rs" 772 8 775 9
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 691 20 691 91
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use mach.int.Int
  use seq.Seq
  
  type t_T
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array t_T;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  constant const_SIZE [#"sparse_array.rs" 46 8 46 25] : UInt64.t
  
  function index_logic [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray'0] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate invariant' [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse) =
    [%#ssparse_array'6] UInt64.t'int self.t_Sparse__n <= UInt64.t'int const_SIZE
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n
      -> (let j = index_logic self.t_Sparse__back i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int const_SIZE
      /\ UInt64.t'int (index_logic self.t_Sparse__idx (UInt64.t'int j)) = i))
  
  predicate inv (_0: t_T)
  
  predicate invariant''0 (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.array t_T) =
    [%#sarray'1] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'2 (_0: Slice64.array t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.array t_T [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate inv'3 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq UInt64.t [inv'3 x]. inv'3 x = true
  
  predicate invariant''3 (self: Slice64.array UInt64.t) =
    [%#sarray'1] inv'3 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'4 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.array UInt64.t [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate inv'5 (_0: t_Sparse)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Sparse [inv'5 x]. inv'5 x
      = (invariant' x
      /\ match x with
        | {t_Sparse__n = n; t_Sparse__values = values; t_Sparse__idx = idx; t_Sparse__back = back} -> inv'2 values
        /\ inv'4 idx /\ inv'4 back
        end)
  
  predicate resolve [@inline:trivial] (_0: UInt64.t) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (self: Slice64.array UInt64.t) =
    [%#sarray] forall i: int. 0 <= i /\ i < UInt64.t'int const_SIZE -> resolve (Seq.get (Slice64.view self) i)
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: Slice64.array UInt64.t) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: t_T)
  
  predicate resolve'3 [@inline:trivial] (self: Slice64.array t_T) =
    [%#sarray] forall i: int. 0 <= i /\ i < UInt64.t'int const_SIZE -> resolve'2 (Seq.get (Slice64.view self) i)
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: Slice64.array t_T) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  predicate structural_resolve (_0: t_Sparse) =
    match _0 with
      | {t_Sparse__n = x0; t_Sparse__values = x1; t_Sparse__idx = x2; t_Sparse__back = x3} -> resolve'1 x3
      /\ resolve'1 x2 /\ resolve'4 x1
      end
  
  type t_Option = C_None | C_Some t_T
  
  predicate resolve'5 [@inline:trivial] (self: t_Option) =
    [%#soption] match self with
      | C_Some x -> resolve'2 x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 [@inline:trivial] (_0: t_Option) = resolve'5 _0
  
  meta "rewrite_def" predicate resolve'6
  
  predicate is_elt [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse) (i: int) =
    [%#ssparse_array'7] UInt64.t'int (index_logic self.t_Sparse__idx i) < UInt64.t'int self.t_Sparse__n
    /\ UInt64.t'int (index_logic self.t_Sparse__back (UInt64.t'int (index_logic self.t_Sparse__idx i))) = i
  
  function index_logic'0 [@inline:trivial] (self: Slice64.array t_T) (ix: int) : t_T =
    [%#sarray'0] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'0
  
  function view [#"sparse_array.rs" 38 4 38 33] (self: t_Sparse) : Seq.seq t_Option =
    [%#ssparse_array'5] Seq.create (UInt64.t'int const_SIZE) (fun (i: int) -> if is_elt self i then
      C_Some (index_logic'0 self.t_Sparse__values i)
    else
      C_None
    )
  
  axiom view_spec: forall self: t_Sparse. [%#ssparse_array'4] Seq.length (view self) = UInt64.t'int const_SIZE
  
  predicate resolve'7 [#"sparse_array.rs" 48 4 48 28] (self: t_Sparse) =
    [%#ssparse_array'3] forall i: int. 0 <= i /\ i < UInt64.t'int const_SIZE -> resolve'6 (Seq.get (view self) i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Sparse
  
  function resolve_coherence [#"sparse_array.rs" 58 4 58 30] (self'0: t_Sparse) : ()
  
  goal vc_resolve_coherence: ([%#ssparse_array] inv'5 self)
    -> ([%#ssparse_array'0] structural_resolve self)
    -> ([@expl:resolve_coherence ensures] [%#ssparse_array'1] resolve'7 self)
end
module M_sparse_array__qyi495551203689118095__get [#"sparse_array.rs" 95 4 95 45] (* Sparse<T, SIZE> *)
  let%span ssparse_array = "sparse_array.rs" 96 20 96 31
  let%span ssparse_array'0 = "sparse_array.rs" 97 29 97 45
  let%span ssparse_array'1 = "sparse_array.rs" 97 59 97 73
  let%span ssparse_array'2 = "sparse_array.rs" 95 16 95 20
  let%span ssparse_array'3 = "sparse_array.rs" 86 15 86 25
  let%span ssparse_array'4 = "sparse_array.rs" 95 35 95 45
  let%span ssparse_array'5 = "sparse_array.rs" 87 14 90 5
  let%span ssparse_array'6 = "sparse_array.rs" 91 14 94 5
  let%span ssparse_array'7 = "sparse_array.rs" 37 14 37 35
  let%span ssparse_array'8 = "sparse_array.rs" 40 12 41 82
  let%span ssparse_array'9 = "sparse_array.rs" 81 20 81 75
  let%span ssparse_array'10 = "sparse_array.rs" 65 12 68 63
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  let%span sarray'0 = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 691 20 691 91
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  let%span smodel = "../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 90 8 90 18
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use creusot.prelude.Any
  use mach.int.Int
  use seq.Seq
  
  constant const_SIZE [#"sparse_array.rs" 73 8 73 25] : UInt64.t
  
  type t_T
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array t_T;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  type t_Option = C_None | C_Some t_T
  
  function index_logic [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate invariant' [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse) =
    [%#ssparse_array'10] UInt64.t'int self.t_Sparse__n <= UInt64.t'int const_SIZE
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n
      -> (let j = index_logic self.t_Sparse__back i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int const_SIZE
      /\ UInt64.t'int (index_logic self.t_Sparse__idx (UInt64.t'int j)) = i))
  
  predicate inv (_0: t_T)
  
  predicate invariant''0 (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.array t_T) =
    [%#sarray'0] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'2 (_0: Slice64.array t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.array t_T [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate inv'3 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq UInt64.t [inv'3 x]. inv'3 x = true
  
  predicate invariant''3 (self: Slice64.array UInt64.t) =
    [%#sarray'0] inv'3 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'4 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.array UInt64.t [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate inv'5 (_0: t_Sparse)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Sparse [inv'5 x]. inv'5 x
      = (invariant' x
      /\ match x with
        | {t_Sparse__n = n; t_Sparse__values = values; t_Sparse__idx = idx; t_Sparse__back = back} -> inv'2 values
        /\ inv'4 idx /\ inv'4 back
        end)
  
  predicate invariant''4 [@inline:trivial] (self: t_Sparse) = [%#sinvariant] inv'5 self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'6 (_0: t_Sparse)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_Sparse [inv'6 x]. inv'6 x = invariant''4 x
  
  predicate invariant''5 [@inline:trivial] (self: t_T) = [%#sinvariant] inv self
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'7 (_0: t_T)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_T [inv'7 x]. inv'7 x = invariant''5 x
  
  predicate inv'8 (_0: t_Option)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_Option [inv'8 x]. inv'8 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'7 a_0
        end
  
  type t_Option'0 = C_None'0 | C_Some'0 t_T
  
  predicate is_elt [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse) (i: int) =
    [%#ssparse_array'9] UInt64.t'int (index_logic self.t_Sparse__idx i) < UInt64.t'int self.t_Sparse__n
    /\ UInt64.t'int (index_logic self.t_Sparse__back (UInt64.t'int (index_logic self.t_Sparse__idx i))) = i
  
  function index_logic'0 [@inline:trivial] (self: Slice64.array t_T) (ix: int) : t_T =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'0
  
  function view [#"sparse_array.rs" 38 4 38 33] (self: t_Sparse) : Seq.seq t_Option'0 =
    [%#ssparse_array'8] Seq.create (UInt64.t'int const_SIZE) (fun (i: int) -> if is_elt self i then
      C_Some'0 (index_logic'0 self.t_Sparse__values i)
    else
      C_None'0
    )
  
  axiom view_spec: forall self: t_Sparse. [%#ssparse_array'7] Seq.length (view self) = UInt64.t'int const_SIZE
  
  function view'0 [@inline:trivial] (self: t_Sparse) : Seq.seq t_Option'0 = [%#smodel] view self
  
  meta "rewrite_def" function view'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get [#"sparse_array.rs" 95 4 95 45] (self: t_Sparse) (i: UInt64.t) (return' (x: t_Option)) =
    {[@expl:get 'self' type invariant] [%#ssparse_array'2] inv'6 self}
    {[@expl:get requires] [%#ssparse_array'3] UInt64.t'int i < UInt64.t'int const_SIZE}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_7 <- i'0 ] s1
      | s1 = [ &_8 <- UInt64.lt _7 ([%#ssparse_array] const_SIZE) ] s2
      | s2 = {[@expl:index in bounds] [%#ssparse_array] _8} s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = Slice64.get <UInt64.t> {self'0.t_Sparse__idx} {_7} (fun (r: UInt64.t) -> [ &index <- r ] s1)
      | s1 = [ &_9 <- UInt64.lt index self'0.t_Sparse__n ] s2
      | s2 = any [ br0 -> {_9 = false} (! bb8) | br1 -> {_9} (! bb2) ] ]
    | bb2 = s0
      [ s0 = [ &_14 <- index ] s1
      | s1 = [ &_15 <- UInt64.lt _14 ([%#ssparse_array'0] const_SIZE) ] s2
      | s2 = {[@expl:index in bounds] [%#ssparse_array'0] _15} s3
      | s3 = bb3 ]
    | bb3 = s0
      [ s0 = Slice64.get <UInt64.t> {self'0.t_Sparse__back} {_14} (fun (r: UInt64.t) -> [ &_12 <- r = i'0 ] s1)
      | s1 = any [ br0 -> {_12 = false} (! bb8) | br1 -> {_12} (! bb4) ] ]
    | bb4 = s0
      [ s0 = [ &_19 <- i'0 ] s1
      | s1 = [ &_20 <- UInt64.lt _19 ([%#ssparse_array'1] const_SIZE) ] s2
      | s2 = {[@expl:index in bounds] [%#ssparse_array'1] _20} s3
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = Slice64.get <t_T> {self'0.t_Sparse__values} {_19} (fun (r: t_T) -> [ &_18 <- r ] s1)
      | s1 = [ &_0 <- C_Some _18 ] s2
      | s2 = bb9 ]
    | bb8 = s0 [ s0 = [ &_0 <- C_None ] s1 | s1 = bb9 ]
    | bb9 = return''0 {_0} ]
    [ & _0: t_Option = Any.any_l ()
    | & self'0: t_Sparse = self
    | & i'0: UInt64.t = i
    | & index: UInt64.t = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & _8: bool = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _14: UInt64.t = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _18: t_T = Any.any_l ()
    | & _19: UInt64.t = Any.any_l ()
    | & _20: bool = Any.any_l () ])
    [ return''0 (result: t_Option) -> {[@expl:get result type invariant] [%#ssparse_array'4] inv'8 result}
      {[@expl:get ensures #0] [%#ssparse_array'5] match result with
        | C_None -> Seq.get (view'0 self) (UInt64.t'int i) = C_None'0
        | C_Some x -> Seq.get (view'0 self) (UInt64.t'int i) = C_Some'0 x
        end}
      {[@expl:get ensures #1] [%#ssparse_array'6] match Seq.get (view'0 self) (UInt64.t'int i) with
        | C_None'0 -> result = C_None
        | C_Some'0 _ -> true
        end}
      (! return' {result}) ]
end
module M_sparse_array__qyi495551203689118095__lemma_permutation [#"sparse_array.rs" 107 4 107 38] (* Sparse<T, SIZE> *)
  let%span ssparse_array = "sparse_array.rs" 103 15 103 24
  let%span ssparse_array'0 = "sparse_array.rs" 104 15 104 29
  let%span ssparse_array'1 = "sparse_array.rs" 105 15 105 34
  let%span ssparse_array'2 = "sparse_array.rs" 106 4 106 30
  let%span ssparse_array'3 = "sparse_array.rs" 113 15 113 24
  let%span ssparse_array'4 = "sparse_array.rs" 114 15 114 29
  let%span ssparse_array'5 = "sparse_array.rs" 115 15 115 38
  let%span ssparse_array'6 = "sparse_array.rs" 116 15 118 47
  let%span ssparse_array'7 = "sparse_array.rs" 119 15 119 78
  let%span ssparse_array'8 = "sparse_array.rs" 120 4 120 36
  let%span ssparse_array'9 = "sparse_array.rs" 121 14 121 43
  let%span ssparse_array'10 = "sparse_array.rs" 122 14 122 37
  let%span ssparse_array'11 = "sparse_array.rs" 102 4 102 12
  let%span ssparse_array'12 = "sparse_array.rs" 81 20 81 75
  let%span ssparse_array'13 = "sparse_array.rs" 112 14 112 32
  let%span ssparse_array'14 = "sparse_array.rs" 125 12 130 13
  let%span ssparse_array'15 = "sparse_array.rs" 135 14 135 17
  let%span ssparse_array'16 = "sparse_array.rs" 136 15 136 60
  let%span ssparse_array'17 = "sparse_array.rs" 137 15 137 23
  let%span ssparse_array'18 = "sparse_array.rs" 138 14 138 28
  let%span ssparse_array'19 = "sparse_array.rs" 140 8 142 9
  let%span ssparse_array'20 = "sparse_array.rs" 65 12 68 63
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  let%span sarray'0 = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 691 20 691 91
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 39 8 39 26
  let%span sfset'0 = "../../creusot-contracts/src/logic/fset.rs" 55 8 55 26
  let%span sfset'1 = "../../creusot-contracts/src/logic/fset.rs" 78 8 78 26
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use mach.int.Int
  use seq.Seq
  use set.Fset
  
  type t_T
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array t_T;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  constant const_SIZE [#"sparse_array.rs" 73 8 73 25] : UInt64.t
  
  function index_logic [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate invariant' [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse) =
    [%#ssparse_array'20] UInt64.t'int self.t_Sparse__n <= UInt64.t'int const_SIZE
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n
      -> (let j = index_logic self.t_Sparse__back i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int const_SIZE
      /\ UInt64.t'int (index_logic self.t_Sparse__idx (UInt64.t'int j)) = i))
  
  predicate inv (_0: t_T)
  
  predicate invariant''0 (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.array t_T) =
    [%#sarray'0] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'2 (_0: Slice64.array t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.array t_T [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate inv'3 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq UInt64.t [inv'3 x]. inv'3 x = true
  
  predicate invariant''3 (self: Slice64.array UInt64.t) =
    [%#sarray'0] inv'3 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'4 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.array UInt64.t [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate inv'5 (_0: t_Sparse)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Sparse [inv'5 x]. inv'5 x
      = (invariant' x
      /\ match x with
        | {t_Sparse__n = n; t_Sparse__values = values; t_Sparse__idx = idx; t_Sparse__back = back} -> inv'2 values
        /\ inv'4 idx /\ inv'4 back
        end)
  
  predicate is_elt [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse) (i: int) =
    [%#ssparse_array'12] UInt64.t'int (index_logic self.t_Sparse__idx i) < UInt64.t'int self.t_Sparse__n
    /\ UInt64.t'int (index_logic self.t_Sparse__back (UInt64.t'int (index_logic self.t_Sparse__idx i))) = i
  
  predicate contains [@inline:trivial] (self: Fset.fset int) (e: int) = [%#sfset] Fset.mem e self
  
  meta "rewrite_def" predicate contains
  
  function remove [@inline:trivial] (self: Fset.fset int) (e: int) : Fset.fset int = [%#sfset'1] Fset.remove e self
  
  meta "rewrite_def" function remove
  
  function bounded_fset_len [#"sparse_array.rs" 139 4 139 47] (s: Fset.fset int) (bnd: int) : ()
  
  axiom bounded_fset_len_def: forall s: Fset.fset int, bnd: int. ([%#ssparse_array'16] forall x: int. contains s x
          -> 0 <= x /\ x < bnd)
      -> ([%#ssparse_array'17] bnd >= 0)
      -> bounded_fset_len s bnd
      = ([%#ssparse_array'19] if bnd > 0 then bounded_fset_len (remove s (bnd - 1)) (bnd - 1) else ())
  
  axiom bounded_fset_len_spec: forall s: Fset.fset int, bnd: int. ([%#ssparse_array'16] forall x: int. contains s x
          -> 0 <= x /\ x < bnd) -> ([%#ssparse_array'17] bnd >= 0) -> ([%#ssparse_array'18] Fset.cardinal s <= bnd)
  
  function insert [@inline:trivial] (self: Fset.fset int) (e: int) : Fset.fset int = [%#sfset'0] Fset.add e self
  
  meta "rewrite_def" function insert
  
  function lemma_permutation_aux [#"sparse_array.rs" 123 4 123 76] (self: t_Sparse) (seen: Fset.fset int) (i: int) (cur: int) : int
  
  axiom lemma_permutation_aux_def:
    forall self: t_Sparse, seen: Fset.fset int, i: int, cur: int. ([%#ssparse_array'3] inv'5 self)
      -> ([%#ssparse_array'4] self.t_Sparse__n = const_SIZE)
      -> ([%#ssparse_array'5] 0 <= cur /\ cur < UInt64.t'int const_SIZE)
      -> ([%#ssparse_array'6] forall k: int. contains seen k
          -> 0 <= k
          /\ k < UInt64.t'int const_SIZE /\ (k = i \/ contains seen (UInt64.t'int (index_logic self.t_Sparse__idx k))))
      -> ([%#ssparse_array'7] i = cur
        \/ contains seen i /\ contains seen (UInt64.t'int (index_logic self.t_Sparse__idx cur)))
      -> ([%#ssparse_array'8] not contains seen cur)
      -> lemma_permutation_aux self seen i cur
      = ([%#ssparse_array'14] if UInt64.t'int (index_logic self.t_Sparse__back cur) = i then
        cur
      else
        let _ = bounded_fset_len seen (UInt64.t'int const_SIZE) in lemma_permutation_aux self (insert seen cur) i (UInt64.t'int (index_logic self.t_Sparse__back cur))
      )
  
  axiom lemma_permutation_aux_spec:
    forall self: t_Sparse, seen: Fset.fset int, i: int, cur: int. ([%#ssparse_array'3] inv'5 self)
      -> ([%#ssparse_array'4] self.t_Sparse__n = const_SIZE)
      -> ([%#ssparse_array'5] 0 <= cur /\ cur < UInt64.t'int const_SIZE)
      -> ([%#ssparse_array'6] forall k: int. contains seen k
          -> 0 <= k
          /\ k < UInt64.t'int const_SIZE /\ (k = i \/ contains seen (UInt64.t'int (index_logic self.t_Sparse__idx k))))
      -> ([%#ssparse_array'7] i = cur
        \/ contains seen i /\ contains seen (UInt64.t'int (index_logic self.t_Sparse__idx cur)))
      -> ([%#ssparse_array'8] not contains seen cur)
      -> ([%#ssparse_array'9] 0 <= lemma_permutation_aux self seen i cur
      /\ lemma_permutation_aux self seen i cur < UInt64.t'int const_SIZE)
  
  axiom lemma_permutation_aux_spec'0:
    forall self: t_Sparse, seen: Fset.fset int, i: int, cur: int. ([%#ssparse_array'3] inv'5 self)
      -> ([%#ssparse_array'4] self.t_Sparse__n = const_SIZE)
      -> ([%#ssparse_array'5] 0 <= cur /\ cur < UInt64.t'int const_SIZE)
      -> ([%#ssparse_array'6] forall k: int. contains seen k
          -> 0 <= k
          /\ k < UInt64.t'int const_SIZE /\ (k = i \/ contains seen (UInt64.t'int (index_logic self.t_Sparse__idx k))))
      -> ([%#ssparse_array'7] i = cur
        \/ contains seen i /\ contains seen (UInt64.t'int (index_logic self.t_Sparse__idx cur)))
      -> ([%#ssparse_array'8] not contains seen cur)
      -> ([%#ssparse_array'10] UInt64.t'int (index_logic self.t_Sparse__back (lemma_permutation_aux self seen i cur))
      = i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Sparse
  
  constant i : int
  
  function lemma_permutation [#"sparse_array.rs" 107 4 107 38] (self'0: t_Sparse) (i'0: int) : ()
  
  goal vc_lemma_permutation: ([%#ssparse_array] inv'5 self)
    -> ([%#ssparse_array'0] self.t_Sparse__n = const_SIZE)
    -> ([%#ssparse_array'1] 0 <= i /\ i < UInt64.t'int const_SIZE)
    -> (([@expl:lemma_permutation_aux requires #0] [%#ssparse_array'3] inv'5 self)
      && ([@expl:lemma_permutation_aux requires #1] [%#ssparse_array'4] self.t_Sparse__n = const_SIZE)
      && ([@expl:lemma_permutation_aux requires #2] [%#ssparse_array'5] 0 <= i /\ i < UInt64.t'int const_SIZE)
      && ([@expl:lemma_permutation_aux requires #3] [%#ssparse_array'6] forall k: int. contains (Fset.empty: Fset.fset int) k
          -> 0 <= k
          /\ k < UInt64.t'int const_SIZE
          /\ (k = i \/ contains (Fset.empty: Fset.fset int) (UInt64.t'int (index_logic self.t_Sparse__idx k))))
      && ([@expl:lemma_permutation_aux requires #4] [%#ssparse_array'7] i = i
        \/ contains (Fset.empty: Fset.fset int) i
        /\ contains (Fset.empty: Fset.fset int) (UInt64.t'int (index_logic self.t_Sparse__idx i)))
      && ([@expl:lemma_permutation_aux requires #5] [%#ssparse_array'8] not contains (Fset.empty: Fset.fset int) i))
    /\ (([%#ssparse_array'9] 0 <= lemma_permutation_aux self (Fset.empty: Fset.fset int) i i
        /\ lemma_permutation_aux self (Fset.empty: Fset.fset int) i i < UInt64.t'int const_SIZE)
      && ([%#ssparse_array'10] UInt64.t'int (index_logic self.t_Sparse__back (lemma_permutation_aux self (Fset.empty: Fset.fset int) i i))
      = i)
    -> (let _ = lemma_permutation_aux self (Fset.empty: Fset.fset int) i i in [@expl:lemma_permutation ensures] [%#ssparse_array'2] is_elt self i))
end
module M_sparse_array__qyi495551203689118095__lemma_permutation_aux [#"sparse_array.rs" 123 4 123 76] (* Sparse<T, SIZE> *)
  let%span ssparse_array = "sparse_array.rs" 112 14 112 32
  let%span ssparse_array'0 = "sparse_array.rs" 113 15 113 24
  let%span ssparse_array'1 = "sparse_array.rs" 114 15 114 29
  let%span ssparse_array'2 = "sparse_array.rs" 115 15 115 38
  let%span ssparse_array'3 = "sparse_array.rs" 116 15 118 47
  let%span ssparse_array'4 = "sparse_array.rs" 119 15 119 78
  let%span ssparse_array'5 = "sparse_array.rs" 120 4 120 36
  let%span ssparse_array'6 = "sparse_array.rs" 121 14 121 43
  let%span ssparse_array'7 = "sparse_array.rs" 122 14 122 37
  let%span ssparse_array'8 = "sparse_array.rs" 136 15 136 60
  let%span ssparse_array'9 = "sparse_array.rs" 137 15 137 23
  let%span ssparse_array'10 = "sparse_array.rs" 138 14 138 28
  let%span ssparse_array'11 = "sparse_array.rs" 125 12 130 13
  let%span ssparse_array'12 = "sparse_array.rs" 135 14 135 17
  let%span ssparse_array'13 = "sparse_array.rs" 140 8 142 9
  let%span ssparse_array'14 = "sparse_array.rs" 65 12 68 63
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  let%span sarray'0 = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 691 20 691 91
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 39 8 39 26
  let%span sfset'0 = "../../creusot-contracts/src/logic/fset.rs" 55 8 55 26
  let%span sfset'1 = "../../creusot-contracts/src/logic/fset.rs" 78 8 78 26
  let%span swell_founded = "../../creusot-contracts/src/logic/well_founded.rs" 43 8 43 33
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use set.Fset
  use mach.int.Int
  use seq.Seq
  
  type t_T
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array t_T;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  constant const_SIZE [#"sparse_array.rs" 73 8 73 25] : UInt64.t
  
  function index_logic [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate invariant' [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse) =
    [%#ssparse_array'14] UInt64.t'int self.t_Sparse__n <= UInt64.t'int const_SIZE
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n
      -> (let j = index_logic self.t_Sparse__back i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int const_SIZE
      /\ UInt64.t'int (index_logic self.t_Sparse__idx (UInt64.t'int j)) = i))
  
  predicate inv (_0: t_T)
  
  predicate invariant''0 (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.array t_T) =
    [%#sarray'0] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'2 (_0: Slice64.array t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.array t_T [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate inv'3 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq UInt64.t [inv'3 x]. inv'3 x = true
  
  predicate invariant''3 (self: Slice64.array UInt64.t) =
    [%#sarray'0] inv'3 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'4 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.array UInt64.t [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate inv'5 (_0: t_Sparse)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Sparse [inv'5 x]. inv'5 x
      = (invariant' x
      /\ match x with
        | {t_Sparse__n = n; t_Sparse__values = values; t_Sparse__idx = idx; t_Sparse__back = back} -> inv'2 values
        /\ inv'4 idx /\ inv'4 back
        end)
  
  predicate contains [@inline:trivial] (self: Fset.fset int) (e: int) = [%#sfset] Fset.mem e self
  
  meta "rewrite_def" predicate contains
  
  function remove [@inline:trivial] (self: Fset.fset int) (e: int) : Fset.fset int = [%#sfset'1] Fset.remove e self
  
  meta "rewrite_def" function remove
  
  function bounded_fset_len [#"sparse_array.rs" 139 4 139 47] (s: Fset.fset int) (bnd: int) : ()
  
  axiom bounded_fset_len_def: forall s: Fset.fset int, bnd: int. ([%#ssparse_array'8] forall x: int. contains s x
          -> 0 <= x /\ x < bnd)
      -> ([%#ssparse_array'9] bnd >= 0)
      -> bounded_fset_len s bnd
      = ([%#ssparse_array'13] if bnd > 0 then bounded_fset_len (remove s (bnd - 1)) (bnd - 1) else ())
  
  axiom bounded_fset_len_spec: forall s: Fset.fset int, bnd: int. ([%#ssparse_array'8] forall x: int. contains s x
          -> 0 <= x /\ x < bnd) -> ([%#ssparse_array'9] bnd >= 0) -> ([%#ssparse_array'10] Fset.cardinal s <= bnd)
  
  function insert [@inline:trivial] (self: Fset.fset int) (e: int) : Fset.fset int = [%#sfset'0] Fset.add e self
  
  meta "rewrite_def" function insert
  
  predicate well_founded_relation (self: int) (other: int) = [%#swell_founded] self >= 0 /\ self > other
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Sparse
  
  constant seen : Fset.fset int
  
  constant i : int
  
  constant cur : int
  
  function lemma_permutation_aux [#"sparse_array.rs" 123 4 123 76] (self'0: t_Sparse) (seen'0: Fset.fset int) (i'0: int) (cur'0: int) : int
  
  goal vc_lemma_permutation_aux: ([%#ssparse_array'0] inv'5 self)
    -> ([%#ssparse_array'1] self.t_Sparse__n = const_SIZE)
    -> ([%#ssparse_array'2] 0 <= cur /\ cur < UInt64.t'int const_SIZE)
    -> ([%#ssparse_array'3] forall k: int. contains seen k
        -> 0 <= k
        /\ k < UInt64.t'int const_SIZE /\ (k = i \/ contains seen (UInt64.t'int (index_logic self.t_Sparse__idx k))))
    -> ([%#ssparse_array'4] i = cur
      \/ contains seen i /\ contains seen (UInt64.t'int (index_logic self.t_Sparse__idx cur)))
    -> ([%#ssparse_array'5] not contains seen cur)
    -> (if UInt64.t'int (index_logic self.t_Sparse__back cur) = i then
      let result = cur in ([@expl:lemma_permutation_aux ensures #0] [%#ssparse_array'6] 0 <= result
        /\ result < UInt64.t'int const_SIZE)
      && ([@expl:lemma_permutation_aux ensures #1] [%#ssparse_array'7] UInt64.t'int (index_logic self.t_Sparse__back result)
      = i)
    else
      (([@expl:bounded_fset_len requires #0] [%#ssparse_array'8] forall x: int. contains seen x
            -> 0 <= x /\ x < UInt64.t'int const_SIZE)
        && ([@expl:bounded_fset_len requires #1] [%#ssparse_array'9] UInt64.t'int const_SIZE >= 0))
      /\ (([%#ssparse_array'10] Fset.cardinal seen <= UInt64.t'int const_SIZE)
      -> (let _ = bounded_fset_len seen (UInt64.t'int const_SIZE) in ((([@expl:lemma_permutation_aux requires #0] [%#ssparse_array'0] inv'5 self)
          && ([@expl:lemma_permutation_aux requires #1] [%#ssparse_array'1] self.t_Sparse__n = const_SIZE)
          && ([@expl:lemma_permutation_aux requires #2] [%#ssparse_array'2] 0
              <= UInt64.t'int (index_logic self.t_Sparse__back cur)
            /\ UInt64.t'int (index_logic self.t_Sparse__back cur) < UInt64.t'int const_SIZE)
          && ([@expl:lemma_permutation_aux requires #3] [%#ssparse_array'3] forall k: int. contains (insert seen cur) k
              -> 0 <= k
              /\ k < UInt64.t'int const_SIZE
              /\ (k = i \/ contains (insert seen cur) (UInt64.t'int (index_logic self.t_Sparse__idx k))))
          && ([@expl:lemma_permutation_aux requires #4] [%#ssparse_array'4] i
              = UInt64.t'int (index_logic self.t_Sparse__back cur)
            \/ contains (insert seen cur) i
            /\ contains (insert seen cur) (UInt64.t'int (index_logic self.t_Sparse__idx (UInt64.t'int (index_logic self.t_Sparse__back cur)))))
          && ([@expl:lemma_permutation_aux requires #5] [%#ssparse_array'5] not contains (insert seen cur) (UInt64.t'int (index_logic self.t_Sparse__back cur))))
        /\ well_founded_relation ([%#ssparse_array] UInt64.t'int const_SIZE
        - Fset.cardinal seen) ([%#ssparse_array] UInt64.t'int const_SIZE - Fset.cardinal (insert seen cur)))
      /\ (([%#ssparse_array'6] 0
            <= lemma_permutation_aux self (insert seen cur) i (UInt64.t'int (index_logic self.t_Sparse__back cur))
          /\ lemma_permutation_aux self (insert seen cur) i (UInt64.t'int (index_logic self.t_Sparse__back cur))
          < UInt64.t'int const_SIZE)
        && ([%#ssparse_array'7] UInt64.t'int (index_logic self.t_Sparse__back (lemma_permutation_aux self (insert seen cur) i (UInt64.t'int (index_logic self.t_Sparse__back cur))))
        = i)
      -> (let result = lemma_permutation_aux self (insert seen cur) i (UInt64.t'int (index_logic self.t_Sparse__back cur)) in ([@expl:lemma_permutation_aux ensures #0] [%#ssparse_array'6] 0
          <= result
        /\ result < UInt64.t'int const_SIZE)
      && ([@expl:lemma_permutation_aux ensures #1] [%#ssparse_array'7] UInt64.t'int (index_logic self.t_Sparse__back result)
      = i)))))
    )
end
module M_sparse_array__qyi495551203689118095__bounded_fset_len [#"sparse_array.rs" 139 4 139 47] (* Sparse<T, SIZE> *)
  let%span ssparse_array = "sparse_array.rs" 135 14 135 17
  let%span ssparse_array'0 = "sparse_array.rs" 136 15 136 60
  let%span ssparse_array'1 = "sparse_array.rs" 137 15 137 23
  let%span ssparse_array'2 = "sparse_array.rs" 138 14 138 28
  let%span ssparse_array'3 = "sparse_array.rs" 140 8 142 9
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 39 8 39 26
  let%span sfset'0 = "../../creusot-contracts/src/logic/fset.rs" 78 8 78 26
  let%span swell_founded = "../../creusot-contracts/src/logic/well_founded.rs" 43 8 43 33
  
  use set.Fset
  use mach.int.Int
  
  predicate contains [@inline:trivial] (self: Fset.fset int) (e: int) = [%#sfset] Fset.mem e self
  
  meta "rewrite_def" predicate contains
  
  function remove [@inline:trivial] (self: Fset.fset int) (e: int) : Fset.fset int = [%#sfset'0] Fset.remove e self
  
  meta "rewrite_def" function remove
  
  predicate well_founded_relation (self: int) (other: int) = [%#swell_founded] self >= 0 /\ self > other
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant s : Fset.fset int
  
  constant bnd : int
  
  function bounded_fset_len [#"sparse_array.rs" 139 4 139 47] (s'0: Fset.fset int) (bnd'0: int) : ()
  
  goal vc_bounded_fset_len: ([%#ssparse_array'0] forall x: int. contains s x -> 0 <= x /\ x < bnd)
    -> ([%#ssparse_array'1] bnd >= 0)
    -> (if bnd > 0 then
      ((([@expl:bounded_fset_len requires #0] [%#ssparse_array'0] forall x: int. contains (remove s (bnd - 1)) x
              -> 0 <= x /\ x < bnd - 1)
          && ([@expl:bounded_fset_len requires #1] [%#ssparse_array'1] bnd - 1 >= 0))
        /\ well_founded_relation ([%#ssparse_array] bnd) ([%#ssparse_array] bnd - 1))
      /\ (([%#ssparse_array'2] Fset.cardinal (remove s (bnd - 1)) <= bnd - 1)
      -> ([@expl:bounded_fset_len ensures] [%#ssparse_array'2] Fset.cardinal s <= bnd))
    else
      [@expl:bounded_fset_len ensures] [%#ssparse_array'2] Fset.cardinal s <= bnd
    )
end
module M_sparse_array__qyi495551203689118095__set [#"sparse_array.rs" 150 4 150 41] (* Sparse<T, SIZE> *)
  let%span ssparse_array = "sparse_array.rs" 151 8 151 22
  let%span ssparse_array'0 = "sparse_array.rs" 152 20 152 31
  let%span ssparse_array'1 = "sparse_array.rs" 153 31 153 47
  let%span ssparse_array'2 = "sparse_array.rs" 155 12 155 46
  let%span ssparse_array'3 = "sparse_array.rs" 156 26 156 41
  let%span ssparse_array'4 = "sparse_array.rs" 158 12 158 23
  let%span ssparse_array'5 = "sparse_array.rs" 159 12 159 29
  let%span ssparse_array'6 = "sparse_array.rs" 160 22 160 23
  let%span ssparse_array'7 = "sparse_array.rs" 150 20 150 24
  let%span ssparse_array'8 = "sparse_array.rs" 150 36 150 37
  let%span ssparse_array'9 = "sparse_array.rs" 147 15 147 25
  let%span ssparse_array'10 = "sparse_array.rs" 148 14 148 82
  let%span ssparse_array'11 = "sparse_array.rs" 149 14 149 37
  let%span ssparse_array'12 = "sparse_array.rs" 103 15 103 24
  let%span ssparse_array'13 = "sparse_array.rs" 104 15 104 29
  let%span ssparse_array'14 = "sparse_array.rs" 105 15 105 34
  let%span ssparse_array'15 = "sparse_array.rs" 106 4 106 30
  let%span ssparse_array'16 = "sparse_array.rs" 102 4 102 12
  let%span ssparse_array'17 = "sparse_array.rs" 37 14 37 35
  let%span ssparse_array'18 = "sparse_array.rs" 40 12 41 82
  let%span ssparse_array'19 = "sparse_array.rs" 81 20 81 75
  let%span ssparse_array'20 = "sparse_array.rs" 112 14 112 32
  let%span ssparse_array'21 = "sparse_array.rs" 113 15 113 24
  let%span ssparse_array'22 = "sparse_array.rs" 114 15 114 29
  let%span ssparse_array'23 = "sparse_array.rs" 115 15 115 38
  let%span ssparse_array'24 = "sparse_array.rs" 116 15 118 47
  let%span ssparse_array'25 = "sparse_array.rs" 119 15 119 78
  let%span ssparse_array'26 = "sparse_array.rs" 120 4 120 36
  let%span ssparse_array'27 = "sparse_array.rs" 121 14 121 43
  let%span ssparse_array'28 = "sparse_array.rs" 122 14 122 37
  let%span ssparse_array'29 = "sparse_array.rs" 125 12 130 13
  let%span ssparse_array'30 = "sparse_array.rs" 135 14 135 17
  let%span ssparse_array'31 = "sparse_array.rs" 136 15 136 60
  let%span ssparse_array'32 = "sparse_array.rs" 137 15 137 23
  let%span ssparse_array'33 = "sparse_array.rs" 138 14 138 28
  let%span ssparse_array'34 = "sparse_array.rs" 140 8 142 9
  let%span ssparse_array'35 = "sparse_array.rs" 65 12 68 63
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 65 8 65 32
  let%span sarray'0 = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  let%span sarray'1 = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 691 20 691 91
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  let%span smodel = "../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 99 20 99 44
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 39 8 39 26
  let%span sfset'0 = "../../creusot-contracts/src/logic/fset.rs" 55 8 55 26
  let%span sfset'1 = "../../creusot-contracts/src/logic/fset.rs" 78 8 78 26
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use seq.Seq
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use set.Fset
  use creusot.prelude.Any
  
  constant const_SIZE [#"sparse_array.rs" 73 8 73 25] : UInt64.t
  
  type t_T
  
  predicate inv (_0: t_T)
  
  function index_logic [@inline:trivial] (self: Slice64.array t_T) (ix: UInt64.t) : t_T =
    [%#sarray] Seq.get (Slice64.view self) (UInt64.t'int ix)
  
  meta "rewrite_def" function index_logic
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array t_T;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  predicate resolve (_0: t_T)
  
  function index_logic'0 [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray'0] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'0
  
  predicate invariant' [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse) =
    [%#ssparse_array'35] UInt64.t'int self.t_Sparse__n <= UInt64.t'int const_SIZE
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n
      -> (let j = index_logic'0 self.t_Sparse__back i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int const_SIZE
      /\ UInt64.t'int (index_logic'0 self.t_Sparse__idx (UInt64.t'int j)) = i))
  
  predicate invariant''0 (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.array t_T) =
    [%#sarray'1] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'2 (_0: Slice64.array t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.array t_T [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate inv'3 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq UInt64.t [inv'3 x]. inv'3 x = true
  
  predicate invariant''3 (self: Slice64.array UInt64.t) =
    [%#sarray'1] inv'3 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'4 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.array UInt64.t [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate inv'5 (_0: t_Sparse)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Sparse [inv'5 x]. inv'5 x
      = (invariant' x
      /\ match x with
        | {t_Sparse__n = n; t_Sparse__values = values; t_Sparse__idx = idx; t_Sparse__back = back} -> inv'2 values
        /\ inv'4 idx /\ inv'4 back
        end)
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_Sparse) =
    [%#sinvariant] inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'6 (_0: MutBorrow.t t_Sparse)
  
  axiom inv_axiom'5 [@rewrite]: forall x: MutBorrow.t t_Sparse [inv'6 x]. inv'6 x = invariant''4 x
  
  predicate resolve'0 [@inline:trivial] (self: MutBorrow.t t_Sparse) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: MutBorrow.t t_Sparse) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate is_elt [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse) (i: int) =
    [%#ssparse_array'19] UInt64.t'int (index_logic'0 self.t_Sparse__idx i) < UInt64.t'int self.t_Sparse__n
    /\ UInt64.t'int (index_logic'0 self.t_Sparse__back (UInt64.t'int (index_logic'0 self.t_Sparse__idx i))) = i
  
  predicate contains [@inline:trivial] (self: Fset.fset int) (e: int) = [%#sfset] Fset.mem e self
  
  meta "rewrite_def" predicate contains
  
  function remove [@inline:trivial] (self: Fset.fset int) (e: int) : Fset.fset int = [%#sfset'1] Fset.remove e self
  
  meta "rewrite_def" function remove
  
  function bounded_fset_len [#"sparse_array.rs" 139 4 139 47] (s: Fset.fset int) (bnd: int) : ()
  
  axiom bounded_fset_len_def: forall s: Fset.fset int, bnd: int. ([%#ssparse_array'31] forall x: int. contains s x
          -> 0 <= x /\ x < bnd)
      -> ([%#ssparse_array'32] bnd >= 0)
      -> bounded_fset_len s bnd
      = ([%#ssparse_array'34] if bnd > 0 then bounded_fset_len (remove s (bnd - 1)) (bnd - 1) else ())
  
  axiom bounded_fset_len_spec: forall s: Fset.fset int, bnd: int. ([%#ssparse_array'31] forall x: int. contains s x
          -> 0 <= x /\ x < bnd) -> ([%#ssparse_array'32] bnd >= 0) -> ([%#ssparse_array'33] Fset.cardinal s <= bnd)
  
  function insert [@inline:trivial] (self: Fset.fset int) (e: int) : Fset.fset int = [%#sfset'0] Fset.add e self
  
  meta "rewrite_def" function insert
  
  function lemma_permutation_aux [#"sparse_array.rs" 123 4 123 76] (self: t_Sparse) (seen: Fset.fset int) (i: int) (cur: int) : int
  
  axiom lemma_permutation_aux_def:
    forall self: t_Sparse, seen: Fset.fset int, i: int, cur: int. ([%#ssparse_array'21] inv'5 self)
      -> ([%#ssparse_array'22] self.t_Sparse__n = const_SIZE)
      -> ([%#ssparse_array'23] 0 <= cur /\ cur < UInt64.t'int const_SIZE)
      -> ([%#ssparse_array'24] forall k: int. contains seen k
          -> 0 <= k
          /\ k < UInt64.t'int const_SIZE
          /\ (k = i \/ contains seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx k))))
      -> ([%#ssparse_array'25] i = cur
        \/ contains seen i /\ contains seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx cur)))
      -> ([%#ssparse_array'26] not contains seen cur)
      -> lemma_permutation_aux self seen i cur
      = ([%#ssparse_array'29] if UInt64.t'int (index_logic'0 self.t_Sparse__back cur) = i then
        cur
      else
        let _ = bounded_fset_len seen (UInt64.t'int const_SIZE) in lemma_permutation_aux self (insert seen cur) i (UInt64.t'int (index_logic'0 self.t_Sparse__back cur))
      )
  
  axiom lemma_permutation_aux_spec:
    forall self: t_Sparse, seen: Fset.fset int, i: int, cur: int. ([%#ssparse_array'21] inv'5 self)
      -> ([%#ssparse_array'22] self.t_Sparse__n = const_SIZE)
      -> ([%#ssparse_array'23] 0 <= cur /\ cur < UInt64.t'int const_SIZE)
      -> ([%#ssparse_array'24] forall k: int. contains seen k
          -> 0 <= k
          /\ k < UInt64.t'int const_SIZE
          /\ (k = i \/ contains seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx k))))
      -> ([%#ssparse_array'25] i = cur
        \/ contains seen i /\ contains seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx cur)))
      -> ([%#ssparse_array'26] not contains seen cur)
      -> ([%#ssparse_array'27] 0 <= lemma_permutation_aux self seen i cur
      /\ lemma_permutation_aux self seen i cur < UInt64.t'int const_SIZE)
  
  axiom lemma_permutation_aux_spec'0:
    forall self: t_Sparse, seen: Fset.fset int, i: int, cur: int. ([%#ssparse_array'21] inv'5 self)
      -> ([%#ssparse_array'22] self.t_Sparse__n = const_SIZE)
      -> ([%#ssparse_array'23] 0 <= cur /\ cur < UInt64.t'int const_SIZE)
      -> ([%#ssparse_array'24] forall k: int. contains seen k
          -> 0 <= k
          /\ k < UInt64.t'int const_SIZE
          /\ (k = i \/ contains seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx k))))
      -> ([%#ssparse_array'25] i = cur
        \/ contains seen i /\ contains seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx cur)))
      -> ([%#ssparse_array'26] not contains seen cur)
      -> ([%#ssparse_array'28] UInt64.t'int (index_logic'0 self.t_Sparse__back (lemma_permutation_aux self seen i cur))
      = i)
  
  function lemma_permutation [#"sparse_array.rs" 107 4 107 38] (self: t_Sparse) (i: int) : () =
    [%#ssparse_array'16] let _ = lemma_permutation_aux self (Fset.empty: Fset.fset int) i i in ()
  
  axiom lemma_permutation_spec: forall self: t_Sparse, i: int. ([%#ssparse_array'12] inv'5 self)
      -> ([%#ssparse_array'13] self.t_Sparse__n = const_SIZE)
      -> ([%#ssparse_array'14] 0 <= i /\ i < UInt64.t'int const_SIZE) -> ([%#ssparse_array'15] is_elt self i)
  
  type t_Option = C_None | C_Some t_T
  
  function index_logic'1 [@inline:trivial] (self: Slice64.array t_T) (ix: int) : t_T =
    [%#sarray'0] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'1
  
  function view [#"sparse_array.rs" 38 4 38 33] (self: t_Sparse) : Seq.seq t_Option =
    [%#ssparse_array'18] Seq.create (UInt64.t'int const_SIZE) (fun (i: int) -> if is_elt self i then
      C_Some (index_logic'1 self.t_Sparse__values i)
    else
      C_None
    )
  
  axiom view_spec: forall self: t_Sparse. [%#ssparse_array'17] Seq.length (view self) = UInt64.t'int const_SIZE
  
  function view'0 [@inline:trivial] (self: MutBorrow.t t_Sparse) : Seq.seq t_Option = [%#smodel] view self.current
  
  meta "rewrite_def" function view'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec set [#"sparse_array.rs" 150 4 150 41] (self: MutBorrow.t t_Sparse) (i: UInt64.t) (v: t_T) (return' (x: ())) =
    {[@expl:set 'self' type invariant] [%#ssparse_array'7] inv'6 self}
    {[@expl:set 'v' type invariant] [%#ssparse_array'8] inv v}
    {[@expl:set requires] [%#ssparse_array'9] UInt64.t'int i < UInt64.t'int const_SIZE}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_8 <- i'0 ] s1
      | s1 = [ &_9 <- UInt64.lt _8 ([%#ssparse_array] const_SIZE) ] s2
      | s2 = {[@expl:index in bounds] [%#ssparse_array] _9} s3
      | s3 = bb2 ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv (index_logic (self'0.current).t_Sparse__values _8)} s1
      | s1 = -{resolve (index_logic (self'0.current).t_Sparse__values _8)}- s2
      | s2 = Slice64.set <t_T> {(self'0.current).t_Sparse__values} {_8} {v'0}
          (fun (r: Slice64.array t_T) ->
            [ &self'0 <- { self'0 with current = { self'0.current with t_Sparse__values = r } } ] s3)
      | s3 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_11 <- i'0 ] s1
      | s1 = [ &_12 <- UInt64.lt _11 ([%#ssparse_array'0] const_SIZE) ] s2
      | s2 = {[@expl:index in bounds] [%#ssparse_array'0] _12} s3
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = Slice64.get <UInt64.t> {(self'0.current).t_Sparse__idx} {_11} (fun (r: UInt64.t) -> [ &index <- r ] s1)
      | s1 = [ &_13 <- UInt64.lt index (self'0.current).t_Sparse__n ] s2
      | s2 = any [ br0 -> {_13 = false} (! bb11) | br1 -> {_13} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_18 <- index ] s1
      | s1 = [ &_19 <- UInt64.lt _18 ([%#ssparse_array'1] const_SIZE) ] s2
      | s2 = {[@expl:index in bounds] [%#ssparse_array'1] _19} s3
      | s3 = bb7 ]
    | bb7 = s0
      [ s0 = Slice64.get <UInt64.t> {(self'0.current).t_Sparse__back} {_18}
          (fun (r: UInt64.t) -> [ &_16 <- r = i'0 ] s1)
      | s1 = any [ br0 -> {_16 = false} (! bb11) | br1 -> {_16} (! bb8) ] ]
    | bb8 = s0 [ s0 = {[@expl:type invariant] inv'6 self'0} s1 | s1 = -{resolve'1 self'0}- s2 | s2 = bb16 ]
    | bb11 = s0 [ s0 = [ &_21 <- [%#ssparse_array'2] () ] s1 | s1 = bb12 ]
    | bb12 = s0
      [ s0 = {[@expl:assertion] [%#ssparse_array'3] UInt64.t'int (self'0.current).t_Sparse__n < UInt64.t'int const_SIZE}
        s1
      | s1 = [ &_26 <- i'0 ] s2
      | s2 = [ &_27 <- UInt64.lt _26 ([%#ssparse_array'4] const_SIZE) ] s3
      | s3 = {[@expl:index in bounds] [%#ssparse_array'4] _27} s4
      | s4 = bb13 ]
    | bb13 = s0
      [ s0 = Slice64.set <UInt64.t> {(self'0.current).t_Sparse__idx} {_26} {(self'0.current).t_Sparse__n}
          (fun (r: Slice64.array UInt64.t) ->
            [ &self'0 <- { self'0 with current = { self'0.current with t_Sparse__idx = r } } ] s1)
      | s1 = [ &_29 <- (self'0.current).t_Sparse__n ] s2
      | s2 = [ &_30 <- UInt64.lt _29 ([%#ssparse_array'5] const_SIZE) ] s3
      | s3 = {[@expl:index in bounds] [%#ssparse_array'5] _30} s4
      | s4 = bb14 ]
    | bb14 = s0
      [ s0 = Slice64.set <UInt64.t> {(self'0.current).t_Sparse__back} {_29} {i'0}
          (fun (r: Slice64.array UInt64.t) ->
            [ &self'0 <- { self'0 with current = { self'0.current with t_Sparse__back = r } } ] s1)
      | s1 = UInt64.add {(self'0.current).t_Sparse__n} {[%#ssparse_array'6] (1: UInt64.t)}
          (fun (_ret: UInt64.t) ->
            [ &self'0 <- { self'0 with current = { self'0.current with t_Sparse__n = _ret } } ] s2)
      | s2 = {[@expl:type invariant] inv'6 self'0} s3
      | s3 = -{resolve'1 self'0}- s4
      | s4 = bb16 ]
    | bb16 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & self'0: MutBorrow.t t_Sparse = self
    | & i'0: UInt64.t = i
    | & v'0: t_T = v
    | & _8: UInt64.t = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & index: UInt64.t = Any.any_l ()
    | & _11: UInt64.t = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _21: () = Any.any_l ()
    | & _26: UInt64.t = Any.any_l ()
    | & _27: bool = Any.any_l ()
    | & _29: UInt64.t = Any.any_l ()
    | & _30: bool = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:set ensures #0] [%#ssparse_array'10] forall j: int. 0 <= j
          /\ j < UInt64.t'int const_SIZE /\ j <> UInt64.t'int i
        -> Seq.get (view self.final) j = Seq.get (view'0 self) j}
      {[@expl:set ensures #1] [%#ssparse_array'11] Seq.get (view self.final) (UInt64.t'int i) = C_Some v}
      (! return' {result}) ]
end
module M_sparse_array__create [#"sparse_array.rs" 171 0 171 70]
  let%span ssparse_array = "sparse_array.rs" 172 27 172 40
  let%span ssparse_array'0 = "sparse_array.rs" 172 47 172 56
  let%span ssparse_array'1 = "sparse_array.rs" 172 48 172 49
  let%span ssparse_array'2 = "sparse_array.rs" 172 64 172 73
  let%span ssparse_array'3 = "sparse_array.rs" 172 65 172 66
  let%span ssparse_array'4 = "sparse_array.rs" 172 16 172 17
  let%span ssparse_array'5 = "sparse_array.rs" 171 42 171 47
  let%span ssparse_array'6 = "sparse_array.rs" 171 55 171 70
  let%span ssparse_array'7 = "sparse_array.rs" 170 10 170 62
  let%span ssparse_array'8 = "sparse_array.rs" 37 14 37 35
  let%span ssparse_array'9 = "sparse_array.rs" 40 12 41 82
  let%span ssparse_array'10 = "sparse_array.rs" 81 20 81 75
  let%span ssparse_array'11 = "sparse_array.rs" 65 12 68 63
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  let%span sarray'0 = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 691 20 691 91
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use creusot.prelude.Any
  use mach.int.Int
  use seq.Seq
  
  type t_T
  
  constant const_SIZE [#"sparse_array.rs" 171 23 171 40] : UInt64.t
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array t_T;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  predicate inv (_0: t_T)
  
  function index_logic [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate invariant' [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse) =
    [%#ssparse_array'11] UInt64.t'int self.t_Sparse__n <= UInt64.t'int const_SIZE
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n
      -> (let j = index_logic self.t_Sparse__back i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int const_SIZE
      /\ UInt64.t'int (index_logic self.t_Sparse__idx (UInt64.t'int j)) = i))
  
  predicate invariant''0 (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.array t_T) =
    [%#sarray'0] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'2 (_0: Slice64.array t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.array t_T [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate inv'3 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq UInt64.t [inv'3 x]. inv'3 x = true
  
  predicate invariant''3 (self: Slice64.array UInt64.t) =
    [%#sarray'0] inv'3 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'4 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.array UInt64.t [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate inv'5 (_0: t_Sparse)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Sparse [inv'5 x]. inv'5 x
      = (invariant' x
      /\ match x with
        | {t_Sparse__n = n; t_Sparse__values = values; t_Sparse__idx = idx; t_Sparse__back = back} -> inv'2 values
        /\ inv'4 idx /\ inv'4 back
        end)
  
  type t_Option = C_None | C_Some t_T
  
  predicate is_elt [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse) (i: int) =
    [%#ssparse_array'10] UInt64.t'int (index_logic self.t_Sparse__idx i) < UInt64.t'int self.t_Sparse__n
    /\ UInt64.t'int (index_logic self.t_Sparse__back (UInt64.t'int (index_logic self.t_Sparse__idx i))) = i
  
  function index_logic'0 [@inline:trivial] (self: Slice64.array t_T) (ix: int) : t_T =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'0
  
  function view [#"sparse_array.rs" 38 4 38 33] (self: t_Sparse) : Seq.seq t_Option =
    [%#ssparse_array'9] Seq.create (UInt64.t'int const_SIZE) (fun (i: int) -> if is_elt self i then
      C_Some (index_logic'0 self.t_Sparse__values i)
    else
      C_None
    )
  
  axiom view_spec: forall self: t_Sparse. [%#ssparse_array'8] Seq.length (view self) = UInt64.t'int const_SIZE
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec create [#"sparse_array.rs" 171 0 171 70] (dummy: t_T) (return' (x: t_Sparse)) =
    {[@expl:create 'dummy' type invariant] [%#ssparse_array'5] inv dummy}
    (! bb0
    [ bb0 = s0
      [ s0 = Slice64.create <t_T> {[%#ssparse_array] const_SIZE} {fun (_: int) -> dummy'0}
          (fun (_res: Slice64.array t_T) -> [ &_3 <- _res ] s1)
      | s1 = Slice64.create <UInt64.t> {[%#ssparse_array'0] const_SIZE}
          {fun (_: int) -> [%#ssparse_array'1] (0: UInt64.t)} (fun (_res: Slice64.array UInt64.t) -> [ &_5 <- _res ] s2)
      | s2 = Slice64.create <UInt64.t> {[%#ssparse_array'2] const_SIZE}
          {fun (_: int) -> [%#ssparse_array'3] (0: UInt64.t)} (fun (_res: Slice64.array UInt64.t) -> [ &_6 <- _res ] s3)
      | s3 = [ &_0 <- { t_Sparse__n = ([%#ssparse_array'4] (0: UInt64.t));
                        t_Sparse__values = _3;
                        t_Sparse__idx = _5;
                        t_Sparse__back = _6 } ] s4
      | s4 = return''0 {_0} ] ]
    [ & _0: t_Sparse = Any.any_l ()
    | & dummy'0: t_T = dummy
    | & _3: Slice64.array t_T = Any.any_l ()
    | & _5: Slice64.array UInt64.t = Any.any_l ()
    | & _6: Slice64.array UInt64.t = Any.any_l () ])
    [ return''0 (result: t_Sparse) -> {[@expl:create result type invariant] [%#ssparse_array'6] inv'5 result}
      {[@expl:create ensures] [%#ssparse_array'7] forall i: int. 0 <= i /\ i < UInt64.t'int const_SIZE
        -> Seq.get (view result) i = C_None}
      (! return' {result}) ]
end
module M_sparse_array__f [#"sparse_array.rs" 177 0 177 10]
  let%span ssparse_array = "sparse_array.rs" 178 18 178 19
  let%span ssparse_array'0 = "sparse_array.rs" 181 22 181 23
  let%span ssparse_array'1 = "sparse_array.rs" 182 22 182 23
  let%span ssparse_array'2 = "sparse_array.rs" 183 18 183 40
  let%span ssparse_array'3 = "sparse_array.rs" 185 10 185 11
  let%span ssparse_array'4 = "sparse_array.rs" 185 13 185 14
  let%span ssparse_array'5 = "sparse_array.rs" 186 10 186 11
  let%span ssparse_array'6 = "sparse_array.rs" 186 13 186 14
  let%span ssparse_array'7 = "sparse_array.rs" 187 14 187 15
  let%span ssparse_array'8 = "sparse_array.rs" 188 14 188 15
  let%span ssparse_array'9 = "sparse_array.rs" 189 18 192 5
  let%span ssparse_array'10 = "sparse_array.rs" 193 18 196 5
  let%span ssparse_array'11 = "sparse_array.rs" 198 14 198 15
  let%span ssparse_array'12 = "sparse_array.rs" 199 14 199 15
  let%span ssparse_array'13 = "sparse_array.rs" 200 18 200 40
  let%span ssparse_array'14 = "sparse_array.rs" 202 14 202 15
  let%span ssparse_array'15 = "sparse_array.rs" 203 14 203 15
  let%span ssparse_array'16 = "sparse_array.rs" 204 18 204 40
  let%span ssparse_array'17 = "sparse_array.rs" 206 14 206 15
  let%span ssparse_array'18 = "sparse_array.rs" 207 14 207 15
  let%span ssparse_array'19 = "sparse_array.rs" 208 18 208 40
  let%span ssparse_array'20 = "sparse_array.rs" 171 55 171 70
  let%span ssparse_array'21 = "sparse_array.rs" 170 10 170 62
  let%span ssparse_array'22 = "sparse_array.rs" 95 16 95 20
  let%span ssparse_array'23 = "sparse_array.rs" 86 15 86 25
  let%span ssparse_array'24 = "sparse_array.rs" 87 14 90 5
  let%span ssparse_array'25 = "sparse_array.rs" 91 14 94 5
  let%span ssparse_array'26 = "sparse_array.rs" 150 20 150 24
  let%span ssparse_array'27 = "sparse_array.rs" 147 15 147 25
  let%span ssparse_array'28 = "sparse_array.rs" 148 14 148 82
  let%span ssparse_array'29 = "sparse_array.rs" 149 14 149 37
  let%span ssparse_array'30 = "sparse_array.rs" 37 14 37 35
  let%span ssparse_array'31 = "sparse_array.rs" 40 12 41 82
  let%span ssparse_array'32 = "sparse_array.rs" 81 20 81 75
  let%span ssparse_array'33 = "sparse_array.rs" 65 12 68 63
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  let%span sarray'0 = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  let%span smodel = "../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 99 20 99 44
  
  use creusot.int.Int32
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array Int32.t;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  function index_logic [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate invariant' [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse) =
    [%#ssparse_array'33] UInt64.t'int self.t_Sparse__n <= UInt64.t'int (10: UInt64.t)
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n
      -> (let j = index_logic self.t_Sparse__back i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int (10: UInt64.t)
      /\ UInt64.t'int (index_logic self.t_Sparse__idx (UInt64.t'int j)) = i))
  
  predicate inv (_0: Seq.seq Int32.t)
  
  axiom inv_axiom [@rewrite]: forall x: Seq.seq Int32.t [inv x]. inv x = true
  
  predicate invariant''0 (self: Slice64.array Int32.t) =
    [%#sarray'0] inv (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (10: UInt64.t)
  
  predicate inv'0 (_0: Slice64.array Int32.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Slice64.array Int32.t [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate inv'1 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Seq.seq UInt64.t [inv'1 x]. inv'1 x = true
  
  predicate invariant''1 (self: Slice64.array UInt64.t) =
    [%#sarray'0] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (10: UInt64.t)
  
  predicate inv'2 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Slice64.array UInt64.t [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_Sparse)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Sparse [inv'3 x]. inv'3 x
      = (invariant' x
      /\ match x with
        | {t_Sparse__n = n; t_Sparse__values = values; t_Sparse__idx = idx; t_Sparse__back = back} -> inv'0 values
        /\ inv'2 idx /\ inv'2 back
        end)
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate is_elt [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse) (i: int) =
    [%#ssparse_array'32] UInt64.t'int (index_logic self.t_Sparse__idx i) < UInt64.t'int self.t_Sparse__n
    /\ UInt64.t'int (index_logic self.t_Sparse__back (UInt64.t'int (index_logic self.t_Sparse__idx i))) = i
  
  function index_logic'0 [@inline:trivial] (self: Slice64.array Int32.t) (ix: int) : Int32.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'0
  
  function view [#"sparse_array.rs" 38 4 38 33] (self: t_Sparse) : Seq.seq t_Option =
    [%#ssparse_array'31] Seq.create (UInt64.t'int (10: UInt64.t)) (fun (i: int) -> if is_elt self i then
      C_Some (index_logic'0 self.t_Sparse__values i)
    else
      C_None
    )
  
  axiom view_spec: forall self: t_Sparse. [%#ssparse_array'30] Seq.length (view self) = UInt64.t'int (10: UInt64.t)
  
  let rec create (dummy: Int32.t) (return' (x: t_Sparse)) = any
    [ return''0 (result: t_Sparse) -> {[%#ssparse_array'20] inv'3 result}
      {[%#ssparse_array'21] forall i: int. 0 <= i /\ i < UInt64.t'int (10: UInt64.t)
        -> Seq.get (view result) i = C_None}
      (! return' {result}) ]
  
  type t_Sparse'0 = {
    t_Sparse__n'0: UInt64.t;
    t_Sparse__values'0: Slice64.array Int32.t;
    t_Sparse__idx'0: Slice64.array UInt64.t;
    t_Sparse__back'0: Slice64.array UInt64.t }
  
  function index_logic'1 [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'1
  
  predicate invariant''2 [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse'0) =
    [%#ssparse_array'33] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int (20: UInt64.t)
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
      -> (let j = index_logic'1 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int (20: UInt64.t)
      /\ UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  predicate invariant''3 (self: Slice64.array Int32.t) =
    [%#sarray'0] inv (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (20: UInt64.t)
  
  predicate inv'4 (_0: Slice64.array Int32.t)
  
  axiom inv_axiom'4 [@rewrite]: forall x: Slice64.array Int32.t [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate invariant''4 (self: Slice64.array UInt64.t) =
    [%#sarray'0] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (20: UInt64.t)
  
  predicate inv'5 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'5 [@rewrite]: forall x: Slice64.array UInt64.t [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate inv'6 (_0: t_Sparse'0)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_Sparse'0 [inv'6 x]. inv'6 x
      = (invariant''2 x
      /\ match x with
        | {t_Sparse__n'0 = n; t_Sparse__values'0 = values; t_Sparse__idx'0 = idx; t_Sparse__back'0 = back} -> inv'4 values
        /\ inv'5 idx /\ inv'5 back
        end)
  
  predicate is_elt'0 [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse'0) (i: int) =
    [%#ssparse_array'32] UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i) < UInt64.t'int self.t_Sparse__n'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__back'0 (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i))) = i
  
  function index_logic'2 [@inline:trivial] (self: Slice64.array Int32.t) (ix: int) : Int32.t =
    [%#sarray] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'2
  
  function view'0 [#"sparse_array.rs" 38 4 38 33] (self: t_Sparse'0) : Seq.seq t_Option =
    [%#ssparse_array'31] Seq.create (UInt64.t'int (20: UInt64.t)) (fun (i: int) -> if is_elt'0 self i then
      C_Some (index_logic'2 self.t_Sparse__values'0 i)
    else
      C_None
    )
  
  axiom view_spec'0: forall self: t_Sparse'0. [%#ssparse_array'30] Seq.length (view'0 self)
      = UInt64.t'int (20: UInt64.t)
  
  let rec create'0 (dummy: Int32.t) (return' (x: t_Sparse'0)) = any
    [ return''0 (result: t_Sparse'0) -> {[%#ssparse_array'20] inv'6 result}
      {[%#ssparse_array'21] forall i: int. 0 <= i /\ i < UInt64.t'int (20: UInt64.t)
        -> Seq.get (view'0 result) i = C_None}
      (! return' {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 Int32.t
  
  predicate invariant''5 [@inline:trivial] (self: t_Sparse) = [%#sinvariant] inv'3 self
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'7 (_0: t_Sparse)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_Sparse [inv'7 x]. inv'7 x = invariant''5 x
  
  function view'1 [@inline:trivial] (self: t_Sparse) : Seq.seq t_Option = [%#smodel] view self
  
  meta "rewrite_def" function view'1
  
  let rec get (self: t_Sparse) (i: UInt64.t) (return' (x: t_Option'0)) =
    {[@expl:get 'self' type invariant] [%#ssparse_array'22] inv'7 self}
    {[@expl:get requires] [%#ssparse_array'23] UInt64.t'int i < UInt64.t'int (10: UInt64.t)}
    any
    [ return''0 (result: t_Option'0) -> {[%#ssparse_array'24] match result with
        | C_None'0 -> Seq.get (view'1 self) (UInt64.t'int i) = C_None
        | C_Some'0 x -> Seq.get (view'1 self) (UInt64.t'int i) = C_Some x
        end}
      {[%#ssparse_array'25] match Seq.get (view'1 self) (UInt64.t'int i) with
        | C_None -> result = C_None'0
        | C_Some _ -> true
        end}
      (! return' {result}) ]
  
  predicate invariant''6 [@inline:trivial] (self: t_Sparse'0) = [%#sinvariant] inv'6 self
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'8 (_0: t_Sparse'0)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_Sparse'0 [inv'8 x]. inv'8 x = invariant''6 x
  
  function view'2 [@inline:trivial] (self: t_Sparse'0) : Seq.seq t_Option = [%#smodel] view'0 self
  
  meta "rewrite_def" function view'2
  
  let rec get'0 (self: t_Sparse'0) (i: UInt64.t) (return' (x: t_Option'0)) =
    {[@expl:get 'self' type invariant] [%#ssparse_array'22] inv'8 self}
    {[@expl:get requires] [%#ssparse_array'23] UInt64.t'int i < UInt64.t'int (20: UInt64.t)}
    any
    [ return''0 (result: t_Option'0) -> {[%#ssparse_array'24] match result with
        | C_None'0 -> Seq.get (view'2 self) (UInt64.t'int i) = C_None
        | C_Some'0 x -> Seq.get (view'2 self) (UInt64.t'int i) = C_Some x
        end}
      {[%#ssparse_array'25] match Seq.get (view'2 self) (UInt64.t'int i) with
        | C_None -> result = C_None'0
        | C_Some _ -> true
        end}
      (! return' {result}) ]
  
  predicate invariant''7 [@inline:trivial] (self: MutBorrow.t t_Sparse) =
    [%#sinvariant'0] inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'9 (_0: MutBorrow.t t_Sparse)
  
  axiom inv_axiom'9 [@rewrite]: forall x: MutBorrow.t t_Sparse [inv'9 x]. inv'9 x = invariant''7 x
  
  function view'3 [@inline:trivial] (self: MutBorrow.t t_Sparse) : Seq.seq t_Option = [%#smodel'0] view self.current
  
  meta "rewrite_def" function view'3
  
  let rec set (self: MutBorrow.t t_Sparse) (i: UInt64.t) (v: Int32.t) (return' (x: ())) =
    {[@expl:set 'self' type invariant] [%#ssparse_array'26] inv'9 self}
    {[@expl:set requires] [%#ssparse_array'27] UInt64.t'int i < UInt64.t'int (10: UInt64.t)}
    any
    [ return''0 (result: ()) -> {[%#ssparse_array'28] forall j: int. 0 <= j
          /\ j < UInt64.t'int (10: UInt64.t) /\ j <> UInt64.t'int i
        -> Seq.get (view self.final) j = Seq.get (view'3 self) j}
      {[%#ssparse_array'29] Seq.get (view self.final) (UInt64.t'int i) = C_Some v}
      (! return' {result}) ]
  
  predicate invariant''8 [@inline:trivial] (self: MutBorrow.t t_Sparse'0) =
    [%#sinvariant'0] inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''8
  
  predicate inv'10 (_0: MutBorrow.t t_Sparse'0)
  
  axiom inv_axiom'10 [@rewrite]: forall x: MutBorrow.t t_Sparse'0 [inv'10 x]. inv'10 x = invariant''8 x
  
  function view'4 [@inline:trivial] (self: MutBorrow.t t_Sparse'0) : Seq.seq t_Option = [%#smodel'0] view'0 self.current
  
  meta "rewrite_def" function view'4
  
  let rec set'0 (self: MutBorrow.t t_Sparse'0) (i: UInt64.t) (v: Int32.t) (return' (x: ())) =
    {[@expl:set 'self' type invariant] [%#ssparse_array'26] inv'10 self}
    {[@expl:set requires] [%#ssparse_array'27] UInt64.t'int i < UInt64.t'int (20: UInt64.t)}
    any
    [ return''0 (result: ()) -> {[%#ssparse_array'28] forall j: int. 0 <= j
          /\ j < UInt64.t'int (20: UInt64.t) /\ j <> UInt64.t'int i
        -> Seq.get (view'0 self.final) j = Seq.get (view'4 self) j}
      {[%#ssparse_array'29] Seq.get (view'0 self.final) (UInt64.t'int i) = C_Some v}
      (! return' {result}) ]
  
  function view'5 [@inline:trivial] (self: Int32.t) : int = [%#smodel] Int32.to_int self
  
  meta "rewrite_def" function view'5
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f [#"sparse_array.rs" 177 0 177 10] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &default <- [%#ssparse_array] (0: Int32.t) ] s1
      | s1 = create {default} (fun (_ret: t_Sparse) -> [ &a <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = create'0 {default} (fun (_ret: t_Sparse'0) -> [ &b <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = get {a} {[%#ssparse_array'0] (5: UInt64.t)} (fun (_ret: t_Option'0) -> [ &x <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = get'0 {b} {[%#ssparse_array'1] (7: UInt64.t)} (fun (_ret: t_Option'0) -> [ &y <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#ssparse_array'2] x = C_None'0 /\ y = C_None'0} s1
      | s1 = {inv'3 a}
        MutBorrow.borrow_mut <t_Sparse> {a}
          (fun (_ret: MutBorrow.t t_Sparse) -> [ &_13 <- _ret ] -{inv'3 _ret.final}- [ &a <- _ret.final ] s2)
      | s2 = set {_13} {[%#ssparse_array'3] (5: UInt64.t)} {[%#ssparse_array'4] (1: Int32.t)}
          (fun (_ret: ()) -> [ &_12 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = {inv'6 b}
        MutBorrow.borrow_mut <t_Sparse'0> {b}
          (fun (_ret: MutBorrow.t t_Sparse'0) -> [ &_15 <- _ret ] -{inv'6 _ret.final}- [ &b <- _ret.final ] s1)
      | s1 = set'0 {_15} {[%#ssparse_array'5] (7: UInt64.t)} {[%#ssparse_array'6] (2: Int32.t)}
          (fun (_ret: ()) -> [ &_14 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0
      [ s0 = get {a} {[%#ssparse_array'7] (5: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_16 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0
      [ s0 = [ &x <- _16 ] s1
      | s1 = get'0 {b} {[%#ssparse_array'8] (7: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_18 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0
      [ s0 = [ &y <- _18 ] s1
      | s1 = {[@expl:assertion] [%#ssparse_array'9] match x with
          | C_None'0 -> false
          | C_Some'0 z -> view'5 z = 1
          end}
        s2
      | s2 = {[@expl:assertion] [%#ssparse_array'10] match y with
          | C_None'0 -> false
          | C_Some'0 z -> view'5 z = 2
          end}
        s3
      | s3 = get {a} {[%#ssparse_array'11] (7: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_24 <- _ret ] s4)
      | s4 = bb9 ]
    | bb9 = s0
      [ s0 = [ &x <- _24 ] s1
      | s1 = get'0 {b} {[%#ssparse_array'12] (5: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_26 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = s0
      [ s0 = [ &y <- _26 ] s1
      | s1 = {[@expl:assertion] [%#ssparse_array'13] x = C_None'0 /\ y = C_None'0} s2
      | s2 = get {a} {[%#ssparse_array'14] (0: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_30 <- _ret ] s3)
      | s3 = bb11 ]
    | bb11 = s0
      [ s0 = [ &x <- _30 ] s1
      | s1 = get'0 {b} {[%#ssparse_array'15] (0: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_32 <- _ret ] s2)
      | s2 = bb12 ]
    | bb12 = s0
      [ s0 = [ &y <- _32 ] s1
      | s1 = {[@expl:assertion] [%#ssparse_array'16] x = C_None'0 /\ y = C_None'0} s2
      | s2 = get {a} {[%#ssparse_array'17] (9: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_36 <- _ret ] s3)
      | s3 = bb13 ]
    | bb13 = s0
      [ s0 = [ &x <- _36 ] s1
      | s1 = get'0 {b} {[%#ssparse_array'18] (9: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_38 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = s0
      [ s0 = [ &y <- _38 ] s1
      | s1 = {[@expl:assertion] [%#ssparse_array'19] x = C_None'0 /\ y = C_None'0} s2
      | s2 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & default: Int32.t = Any.any_l ()
    | & a: t_Sparse = Any.any_l ()
    | & b: t_Sparse'0 = Any.any_l ()
    | & x: t_Option'0 = Any.any_l ()
    | & y: t_Option'0 = Any.any_l ()
    | & _12: () = Any.any_l ()
    | & _13: MutBorrow.t t_Sparse = Any.any_l ()
    | & _14: () = Any.any_l ()
    | & _15: MutBorrow.t t_Sparse'0 = Any.any_l ()
    | & _16: t_Option'0 = Any.any_l ()
    | & _18: t_Option'0 = Any.any_l ()
    | & _24: t_Option'0 = Any.any_l ()
    | & _26: t_Option'0 = Any.any_l ()
    | & _30: t_Option'0 = Any.any_l ()
    | & _32: t_Option'0 = Any.any_l ()
    | & _36: t_Option'0 = Any.any_l ()
    | & _38: t_Option'0 = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_sparse_array__qyi15600151499664207324__resolve_coherence__refines [#"sparse_array.rs" 58 4 58 30] (* <Sparse<T, SIZE> as creusot_contracts::Resolve> *)
  let%span ssparse_array = "sparse_array.rs" 58 4 58 30
  let%span ssparse_array'0 = "sparse_array.rs" 50 12 50 63
  let%span ssparse_array'1 = "sparse_array.rs" 37 14 37 35
  let%span ssparse_array'2 = "sparse_array.rs" 40 12 41 82
  let%span ssparse_array'3 = "sparse_array.rs" 65 12 68 63
  let%span ssparse_array'4 = "sparse_array.rs" 81 20 81 75
  let%span sarray = "../../creusot-contracts/src/std/array.rs" 41 20 41 73
  let%span sarray'0 = "../../creusot-contracts/src/std/array.rs" 56 8 56 31
  let%span sarray'1 = "../../creusot-contracts/src/std/array.rs" 10 20 10 51
  let%span soption = "../../creusot-contracts/src/std/option.rs" 772 8 775 9
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 691 20 691 91
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use mach.int.Int
  use seq.Seq
  
  type t_T
  
  type t_Sparse = {
    t_Sparse__n: UInt64.t;
    t_Sparse__values: Slice64.array t_T;
    t_Sparse__idx: Slice64.array UInt64.t;
    t_Sparse__back: Slice64.array UInt64.t }
  
  constant const_SIZE [#"sparse_array.rs" 46 8 46 25] : UInt64.t
  
  predicate resolve [@inline:trivial] (_0: UInt64.t) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (self: Slice64.array UInt64.t) =
    [%#sarray] forall i: int. 0 <= i /\ i < UInt64.t'int const_SIZE -> resolve (Seq.get (Slice64.view self) i)
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: Slice64.array UInt64.t) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: t_T)
  
  predicate resolve'3 [@inline:trivial] (self: Slice64.array t_T) =
    [%#sarray] forall i: int. 0 <= i /\ i < UInt64.t'int const_SIZE -> resolve'2 (Seq.get (Slice64.view self) i)
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: Slice64.array t_T) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  predicate structural_resolve (_0: t_Sparse) =
    match _0 with
      | {t_Sparse__n = x0; t_Sparse__values = x1; t_Sparse__idx = x2; t_Sparse__back = x3} -> resolve'1 x3
      /\ resolve'1 x2 /\ resolve'4 x1
      end
  
  function index_logic [@inline:trivial] (self: Slice64.array UInt64.t) (ix: int) : UInt64.t =
    [%#sarray'0] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate invariant' [#"sparse_array.rs" 63 4 63 30] (self: t_Sparse) =
    [%#ssparse_array'3] UInt64.t'int self.t_Sparse__n <= UInt64.t'int const_SIZE
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Sparse__n
      -> (let j = index_logic self.t_Sparse__back i in 0 <= UInt64.t'int j
      /\ UInt64.t'int j < UInt64.t'int const_SIZE
      /\ UInt64.t'int (index_logic self.t_Sparse__idx (UInt64.t'int j)) = i))
  
  predicate inv (_0: t_T)
  
  predicate invariant''0 (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.array t_T) =
    [%#sarray'1] inv'1 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'2 (_0: Slice64.array t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.array t_T [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate inv'3 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq UInt64.t [inv'3 x]. inv'3 x = true
  
  predicate invariant''3 (self: Slice64.array UInt64.t) =
    [%#sarray'1] inv'3 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int const_SIZE
  
  predicate inv'4 (_0: Slice64.array UInt64.t)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.array UInt64.t [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate inv'5 (_0: t_Sparse)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Sparse [inv'5 x]. inv'5 x
      = (invariant' x
      /\ match x with
        | {t_Sparse__n = n; t_Sparse__values = values; t_Sparse__idx = idx; t_Sparse__back = back} -> inv'2 values
        /\ inv'4 idx /\ inv'4 back
        end)
  
  type t_Option = C_None | C_Some t_T
  
  predicate resolve'5 [@inline:trivial] (self: t_Option) =
    [%#soption] match self with
      | C_Some x -> resolve'2 x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 [@inline:trivial] (_0: t_Option) = resolve'5 _0
  
  meta "rewrite_def" predicate resolve'6
  
  predicate is_elt [#"sparse_array.rs" 80 4 80 36] (self: t_Sparse) (i: int) =
    [%#ssparse_array'4] UInt64.t'int (index_logic self.t_Sparse__idx i) < UInt64.t'int self.t_Sparse__n
    /\ UInt64.t'int (index_logic self.t_Sparse__back (UInt64.t'int (index_logic self.t_Sparse__idx i))) = i
  
  function index_logic'0 [@inline:trivial] (self: Slice64.array t_T) (ix: int) : t_T =
    [%#sarray'0] Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'0
  
  function view [#"sparse_array.rs" 38 4 38 33] (self: t_Sparse) : Seq.seq t_Option =
    [%#ssparse_array'2] Seq.create (UInt64.t'int const_SIZE) (fun (i: int) -> if is_elt self i then
      C_Some (index_logic'0 self.t_Sparse__values i)
    else
      C_None
    )
  
  axiom view_spec: forall self: t_Sparse. [%#ssparse_array'1] Seq.length (view self) = UInt64.t'int const_SIZE
  
  predicate resolve'7 [#"sparse_array.rs" 48 4 48 28] (self: t_Sparse) =
    [%#ssparse_array'0] forall i: int. 0 <= i /\ i < UInt64.t'int const_SIZE -> resolve'6 (Seq.get (view self) i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#ssparse_array] forall self: t_Sparse. structural_resolve self /\ inv'5 self
      -> structural_resolve self /\ inv'5 self /\ (forall result: (). resolve'7 self -> resolve'7 self)
end
