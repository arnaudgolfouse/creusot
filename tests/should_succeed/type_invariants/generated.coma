module M_generated__use_foo [#"generated.rs" 18 0 18 61]
  let%span sgenerated = "generated.rs" 19 18 19 35
  let%span sgenerated'0 = "generated.rs" 18 19 18 20
  let%span sgenerated'1 = "generated.rs" 9 20 9 43
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 103 20 103 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.int.UInt64
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Sum10 = { t_Sum10__0: Int32.t; t_Sum10__1: Int32.t }
  
  type t_Foo = C_A (MutBorrow.t t_Sum10) UInt64.t | C_B UInt32.t
  
  type tuple = { _p0: t_Foo; _p1: MutBorrow.t t_Sum10 }
  
  type t_Foo'0 = C_A'0 (MutBorrow.t t_Sum10) UInt64.t | C_B'0 tuple
  
  predicate invariant' [#"generated.rs" 8 4 8 30] (self: t_Sum10) =
    [%#sgenerated'1] Int32.to_int self.t_Sum10__0 + Int32.to_int self.t_Sum10__1 = 10
  
  predicate inv (_0: t_Sum10)
  
  axiom inv_axiom [@rewrite]: forall x: t_Sum10 [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_Sum10__0 = a_0; t_Sum10__1 = a_1} -> true
        end)
  
  predicate invariant''0 (self: MutBorrow.t t_Sum10) = [%#sinvariant] inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 (_0: MutBorrow.t t_Sum10)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Sum10 [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate inv'1 (_0: t_Foo)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Foo [inv'1 x]. inv'1 x
      = match x with
        | C_A f1 f2 -> inv'0 f1
        | C_B a_0 -> true
        end
  
  predicate inv'2 (_0: tuple)
  
  axiom inv_axiom'2 [@rewrite]: forall x: tuple [inv'2 x]. inv'2 x
      = (let {_p0 = x0; _p1 = x1} = x in inv'1 x0 /\ inv'0 x1)
  
  predicate inv'3 (_0: t_Foo'0)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Foo'0 [inv'3 x]. inv'3 x
      = match x with
        | C_A'0 f1 f2 -> inv'0 f1
        | C_B'0 a_0 -> inv'2 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec use_foo [#"generated.rs" 18 0 18 61] (x: t_Foo'0) (return' (x'0: ())) =
    {[@expl:use_foo 'x' type invariant] [%#sgenerated'0] inv'3 x}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'3 x'0} s1
      | s1 = {[@expl:assertion] [%#sgenerated] inv'3 x'0} s2
      | s2 = return''0 {_0} ] ] [ & _0: () = Any.any_l () | & x'0: t_Foo'0 = x ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
