module M_vec_inv__vec
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_SumTo10 = { t_SumTo10__a: Int32.t; t_SumTo10__b: Int32.t }
  
  predicate invariant' (self: t_SumTo10) = Int32.to_int self.t_SumTo10__a + Int32.to_int self.t_SumTo10__b = 10
  
  predicate inv (_1: t_SumTo10)
  
  axiom inv_axiom [@rewrite]: forall x: t_SumTo10 [inv x]. inv x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_SumTo10) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 [@inline:trivial] (_1: MutBorrow.t t_SumTo10) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''1 (self: MutBorrow.t t_SumTo10) = inv'0 self
  
  predicate inv'1 [@inline:trivial] (_1: MutBorrow.t t_SumTo10) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''2 [@inline:trivial] (self: Seq.seq (MutBorrow.t t_SumTo10)) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'1 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'2 [@inline:trivial] (_1: Seq.seq (MutBorrow.t t_SumTo10)) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'2
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq (MutBorrow.t t_SumTo10)
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''3 (self: t_Vec) = inv'2 (view self)
  
  predicate inv'3 (_1: t_Vec)
  
  axiom inv_axiom'0: forall x: t_Vec [inv'3 x]. inv'3 x -> invariant''3 x
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_SumTo10) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : MutBorrow.t t_SumTo10 = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate resolve'0 [@inline:trivial] (self: t_Vec) =
    forall i: int. 0 <= i /\ i < Seq.length (view self) -> resolve (index_logic self i)
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 (_1: t_Vec)
  
  axiom resolve_axiom: forall x: t_Vec [resolve'1 x]. resolve'1 x -> resolve'0 x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec vec (x: t_Vec) (return (x'0: ())) = {[@expl:vec 'x' type invariant] inv'3 x}
    {[@expl:vec requires] Seq.length (view x) > 0}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'3 x} s1
      | s1 = -{resolve'1 x}- s2
      | s2 = {[@expl:assertion] Int32.to_int (index_logic x 0).current.t_SumTo10__a
          + Int32.to_int (index_logic x 0).current.t_SumTo10__b
        = 10}
        s3
      | s3 = bb1 ]
    | bb1 = return {_0} ] [ & _0: () = Any.any_l () | & x: t_Vec = x ]) [ return (result: ()) -> (! return {result}) ]
end
