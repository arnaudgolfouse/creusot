module M_vec_inv__vec [#"vec_inv.rs" 18 0 18 32]
  let%span svec_inv = "vec_inv.rs" 19 20 19 43
  let%span svec_inv'0 = "vec_inv.rs" 18 11 18 12
  let%span svec_inv'1 = "vec_inv.rs" 17 11 17 23
  let%span svec_inv'2 = "vec_inv.rs" 13 20 13 43
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 50 8 50 31
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 82 20 82 76
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 99 20 99 41
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 686 20 686 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 104 20 104 44
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_SumTo10 = { t_SumTo10__a: Int32.t; t_SumTo10__b: Int32.t }
  
  predicate invariant' [#"vec_inv.rs" 12 4 12 30] (self: t_SumTo10) =
    [%#svec_inv'2] Int32.to_int self.t_SumTo10__a + Int32.to_int self.t_SumTo10__b = 10
  
  predicate inv (_0: t_SumTo10)
  
  axiom inv_axiom [@rewrite]: forall x: t_SumTo10 [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_SumTo10__a = a; t_SumTo10__b = b} -> true
        end)
  
  predicate invariant''0 (self: MutBorrow.t t_SumTo10) = [%#sinvariant] inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 (_0: MutBorrow.t t_SumTo10)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_SumTo10 [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 (self: MutBorrow.t t_SumTo10) = [%#sboxed] inv'0 self
  
  predicate inv'1 (_0: MutBorrow.t t_SumTo10)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_SumTo10 [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Seq.seq (MutBorrow.t t_SumTo10)) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'1 (Seq.get self i)
  
  predicate inv'2 (_0: Seq.seq (MutBorrow.t t_SumTo10))
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq (MutBorrow.t t_SumTo10) [inv'2 x]. inv'2 x = invariant''2 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq (MutBorrow.t t_SumTo10)
  
  axiom view_spec: forall self: t_Vec. [%#svec'0] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''3 (self: t_Vec) = [%#svec'2] inv'2 (view self)
  
  predicate inv'3 (_0: t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''3 x
  
  predicate resolve (self: MutBorrow.t t_SumTo10) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t t_SumTo10) = resolve _0
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : MutBorrow.t t_SumTo10 =
    [%#svec] Seq.get (view self) ix
  
  predicate resolve'1 (self: t_Vec) =
    [%#svec'1] forall i: int. 0 <= i /\ i < Seq.length (view self) -> resolve'0 (index_logic self i)
  
  predicate resolve'2 (_0: t_Vec) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec vec [#"vec_inv.rs" 18 0 18 32] (x: t_Vec) (return' (x'0: ())) =
    {[@expl:vec 'x' type invariant] [%#svec_inv'0] inv'3 x}
    {[@expl:vec requires] [%#svec_inv'1] Seq.length (view x) > 0}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'3 x'0} s1
      | s1 = -{resolve'2 x'0}- s2
      | s2 = {[@expl:assertion] [%#svec_inv] Int32.to_int ((index_logic x'0 0).current).t_SumTo10__a
          + Int32.to_int ((index_logic x'0 0).current).t_SumTo10__b
        = 10}
        s3
      | s3 = bb1 ]
    | bb1 = return''0 {_0} ] [ & _0: () = Any.any_l () | & x'0: t_Vec = x ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
