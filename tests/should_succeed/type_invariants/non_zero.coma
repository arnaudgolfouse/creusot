module M_impl_NonZeroU32__new (* NonZeroU32 *)
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_NonZeroU32 = { f0: UInt32.t }
  
  predicate invariant_NonZeroU32 (self: t_NonZeroU32) = UInt32.t'int self.f0 > 0
  
  predicate inv_NonZeroU32 (_1: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv_NonZeroU32 x]. inv_NonZeroU32 x = invariant_NonZeroU32 x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new (n: UInt32.t) (return (x: t_NonZeroU32)) = {[@expl:new requires] UInt32.t'int n > 0}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- { f0 = n } ] s1 | s1 = return {_0} ] ]
    [ & _0: t_NonZeroU32 = Any.any_l () | & n: UInt32.t = n ])
    [ return (result: t_NonZeroU32) -> {[@expl:new result type invariant] inv_NonZeroU32 result} (! return {result}) ]
end
module M_impl_NonZeroU32__add (* NonZeroU32 *)
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZeroU32 = { f0: UInt32.t }
  
  predicate invariant_NonZeroU32 (self: t_NonZeroU32) = UInt32.t'int self.f0 > 0
  
  predicate inv_NonZeroU32 (_1: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv_NonZeroU32 x]. inv_NonZeroU32 x = invariant_NonZeroU32 x
  
  constant const_MAX: UInt32.t = (4294967295: UInt32.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add (self: t_NonZeroU32) (rhs: t_NonZeroU32) (return (x: t_NonZeroU32)) =
    {[@expl:add 'self' type invariant] inv_NonZeroU32 self}
    {[@expl:add 'rhs' type invariant] inv_NonZeroU32 rhs}
    {[@expl:add requires] UInt32.t'int self.f0 + UInt32.t'int rhs.f0 <= UInt32.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv_NonZeroU32 self} s1
      | s1 = {[@expl:type invariant] inv_NonZeroU32 rhs} s2
      | s2 = UInt32.add {self.f0} {rhs.f0} (fun (_ret: UInt32.t) -> [ &_4 <- _ret ] s3)
      | s3 = [ &_0 <- { f0 = _4 } ] s4
      | s4 = return {_0} ] ]
    [ & _0: t_NonZeroU32 = Any.any_l ()
    | & self: t_NonZeroU32 = self
    | & rhs: t_NonZeroU32 = rhs
    | & _4: UInt32.t = Any.any_l () ])
    [ return (result: t_NonZeroU32) -> {[@expl:add result type invariant] inv_NonZeroU32 result} (! return {result}) ]
end
module M_impl_NonZeroU32__sub_pre_trans (* NonZeroU32 *)
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_NonZeroU32 = { f0: UInt32.t }
  
  predicate sub_pre (self: t_NonZeroU32) (rhs: t_NonZeroU32) = UInt32.t'int self.f0 > UInt32.t'int rhs.f0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_NonZeroU32
  
  constant b : t_NonZeroU32
  
  constant c : t_NonZeroU32
  
  function sub_pre_trans (a: t_NonZeroU32) (b: t_NonZeroU32) (c: t_NonZeroU32) : ()
  
  goal vc_sub_pre_trans: sub_pre a b -> sub_pre b c -> ([@expl:sub_pre_trans ensures] sub_pre a c)
end
module M_impl_NonZeroU32__sub (* NonZeroU32 *)
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZeroU32 = { f0: UInt32.t }
  
  predicate invariant_NonZeroU32 (self: t_NonZeroU32) = UInt32.t'int self.f0 > 0
  
  predicate inv_NonZeroU32 (_1: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv_NonZeroU32 x]. inv_NonZeroU32 x = invariant_NonZeroU32 x
  
  predicate sub_pre (self: t_NonZeroU32) (rhs: t_NonZeroU32) = UInt32.t'int self.f0 > UInt32.t'int rhs.f0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sub (self: t_NonZeroU32) (rhs: t_NonZeroU32) (return (x: t_NonZeroU32)) =
    {[@expl:sub 'self' type invariant] inv_NonZeroU32 self}
    {[@expl:sub 'rhs' type invariant] inv_NonZeroU32 rhs}
    {[@expl:sub requires] sub_pre self rhs}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv_NonZeroU32 self} s1
      | s1 = {[@expl:type invariant] inv_NonZeroU32 rhs} s2
      | s2 = UInt32.sub {self.f0} {rhs.f0} (fun (_ret: UInt32.t) -> [ &_4 <- _ret ] s3)
      | s3 = [ &_0 <- { f0 = _4 } ] s4
      | s4 = return {_0} ] ]
    [ & _0: t_NonZeroU32 = Any.any_l ()
    | & self: t_NonZeroU32 = self
    | & rhs: t_NonZeroU32 = rhs
    | & _4: UInt32.t = Any.any_l () ])
    [ return (result: t_NonZeroU32) -> {[@expl:sub result type invariant] inv_NonZeroU32 result} (! return {result}) ]
end
