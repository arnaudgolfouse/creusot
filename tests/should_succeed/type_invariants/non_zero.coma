module M_non_zero__qyi12916758414494363779__new [#"non_zero.rs" 16 4 16 30] (* NonZeroU32 *)
  let%span snon_zero = "non_zero.rs" 15 15 15 21
  let%span snon_zero'0 = "non_zero.rs" 16 26 16 30
  let%span snon_zero'1 = "non_zero.rs" 10 20 10 31
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZeroU32  =
    { t_NonZeroU32__0: UInt32.t }
  
  predicate invariant' [#"non_zero.rs" 9 4 9 30] (self: t_NonZeroU32) =
    [%#snon_zero'1] UInt32.t'int self.t_NonZeroU32__0 > 0
  
  predicate inv (_0: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZeroU32__0 = a_0} -> true
    end)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new[#"non_zero.rs" 16 4 16 30] (n:UInt32.t) (return'  (x:t_NonZeroU32))= {[@expl:new requires] [%#snon_zero] UInt32.t'int n
    > 0}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- { t_NonZeroU32__0 = n'0 } ] s1 | s1 = return''0 {_0} ]  ] )
    [ & _0: t_NonZeroU32 = Any.any_l () | & n'0: UInt32.t = n ]
    
    [ return''0 (result:t_NonZeroU32)-> {[@expl:new result type invariant] [%#snon_zero'0] inv result}
      (! return' {result}) ]

end
module M_non_zero__qyi12916758414494363779__add [#"non_zero.rs" 21 4 21 39] (* NonZeroU32 *)
  let%span snon_zero = "non_zero.rs" 21 15 21 19
  let%span snon_zero'0 = "non_zero.rs" 21 21 21 24
  let%span snon_zero'1 = "non_zero.rs" 20 15 20 44
  let%span snon_zero'2 = "non_zero.rs" 21 35 21 39
  let%span snon_zero'3 = "non_zero.rs" 10 20 10 31
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZeroU32  =
    { t_NonZeroU32__0: UInt32.t }
  
  predicate invariant' [#"non_zero.rs" 9 4 9 30] (self: t_NonZeroU32) =
    [%#snon_zero'3] UInt32.t'int self.t_NonZeroU32__0 > 0
  
  predicate inv (_0: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZeroU32__0 = a_0} -> true
    end)
  
  constant v_MAX: UInt32.t = (4294967295: UInt32.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add[#"non_zero.rs" 21 4 21 39] (self:t_NonZeroU32) (rhs:t_NonZeroU32) (return'  (x:t_NonZeroU32))= {[@expl:add 'self' type invariant] [%#snon_zero] inv self}
    {[@expl:add 'rhs' type invariant] [%#snon_zero'0] inv rhs}
    {[@expl:add requires] [%#snon_zero'1] UInt32.t'int self.t_NonZeroU32__0 + UInt32.t'int rhs.t_NonZeroU32__0
    <= UInt32.t'int v_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self'0.t_NonZeroU32__0} {rhs'0.t_NonZeroU32__0} (fun (_ret:UInt32.t) ->  [ &_4 <- _ret ] s1)
      | s1 =  [ &_0 <- { t_NonZeroU32__0 = _4 } ] s2
      | s2 = return''0 {_0} ]
     ]
    )
    [ & _0: t_NonZeroU32 = Any.any_l ()
    | & self'0: t_NonZeroU32 = self
    | & rhs'0: t_NonZeroU32 = rhs
    | & _4: UInt32.t = Any.any_l () ]
    
    [ return''0 (result:t_NonZeroU32)-> {[@expl:add result type invariant] [%#snon_zero'2] inv result}
      (! return' {result}) ]

end
module M_non_zero__qyi12916758414494363779__sub_pre_trans [#"non_zero.rs" 36 4 36 51] (* NonZeroU32 *)
  let%span snon_zero = "non_zero.rs" 33 15 33 27
  let%span snon_zero'0 = "non_zero.rs" 34 15 34 27
  let%span snon_zero'1 = "non_zero.rs" 35 14 35 26
  let%span snon_zero'2 = "non_zero.rs" 36 52 36 54
  let%span snon_zero'3 = "non_zero.rs" 28 20 28 36
  
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_NonZeroU32  =
    { t_NonZeroU32__0: UInt32.t }
  
  predicate sub_pre [#"non_zero.rs" 27 4 27 43] (self: t_NonZeroU32) (rhs: t_NonZeroU32) =
    [%#snon_zero'3] UInt32.t'int self.t_NonZeroU32__0 > UInt32.t'int rhs.t_NonZeroU32__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a  : t_NonZeroU32
  
  constant b  : t_NonZeroU32
  
  constant c  : t_NonZeroU32
  
  function sub_pre_trans [#"non_zero.rs" 36 4 36 51] (a'0: t_NonZeroU32) (b'0: t_NonZeroU32) (c'0: t_NonZeroU32) : ()
  
  goal vc_sub_pre_trans: ([%#snon_zero] sub_pre a b)
   -> ([%#snon_zero'0] sub_pre b c)  -> ([@expl:sub_pre_trans ensures] [%#snon_zero'1] sub_pre a c)
end
module M_non_zero__qyi12916758414494363779__sub [#"non_zero.rs" 40 4 40 39] (* NonZeroU32 *)
  let%span snon_zero = "non_zero.rs" 40 15 40 19
  let%span snon_zero'0 = "non_zero.rs" 40 21 40 24
  let%span snon_zero'1 = "non_zero.rs" 39 15 39 32
  let%span snon_zero'2 = "non_zero.rs" 40 35 40 39
  let%span snon_zero'3 = "non_zero.rs" 28 20 28 36
  let%span snon_zero'4 = "non_zero.rs" 10 20 10 31
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZeroU32  =
    { t_NonZeroU32__0: UInt32.t }
  
  predicate invariant' [#"non_zero.rs" 9 4 9 30] (self: t_NonZeroU32) =
    [%#snon_zero'4] UInt32.t'int self.t_NonZeroU32__0 > 0
  
  predicate inv (_0: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZeroU32__0 = a_0} -> true
    end)
  
  predicate sub_pre [#"non_zero.rs" 27 4 27 43] (self: t_NonZeroU32) (rhs: t_NonZeroU32) =
    [%#snon_zero'3] UInt32.t'int self.t_NonZeroU32__0 > UInt32.t'int rhs.t_NonZeroU32__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sub[#"non_zero.rs" 40 4 40 39] (self:t_NonZeroU32) (rhs:t_NonZeroU32) (return'  (x:t_NonZeroU32))= {[@expl:sub 'self' type invariant] [%#snon_zero] inv self}
    {[@expl:sub 'rhs' type invariant] [%#snon_zero'0] inv rhs}
    {[@expl:sub requires] [%#snon_zero'1] sub_pre self rhs}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.sub {self'0.t_NonZeroU32__0} {rhs'0.t_NonZeroU32__0} (fun (_ret:UInt32.t) ->  [ &_4 <- _ret ] s1)
      | s1 =  [ &_0 <- { t_NonZeroU32__0 = _4 } ] s2
      | s2 = return''0 {_0} ]
     ]
    )
    [ & _0: t_NonZeroU32 = Any.any_l ()
    | & self'0: t_NonZeroU32 = self
    | & rhs'0: t_NonZeroU32 = rhs
    | & _4: UInt32.t = Any.any_l () ]
    
    [ return''0 (result:t_NonZeroU32)-> {[@expl:sub result type invariant] [%#snon_zero'2] inv result}
      (! return' {result}) ]

end
