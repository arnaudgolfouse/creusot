module M_non_zero__qyi12916758414494363779__new (* NonZeroU32 *)
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_NonZeroU32 = { t_NonZeroU32__0: UInt32.t }
  
  predicate invariant' (self: t_NonZeroU32) = UInt32.t'int self.t_NonZeroU32__0 > 0
  
  predicate inv (_0: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_NonZeroU32__0 = a_0} -> true
        end)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new (n: UInt32.t) (return' (x: t_NonZeroU32)) = {[@expl:new requires] UInt32.t'int n > 0}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- { t_NonZeroU32__0 = n'0 } ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: t_NonZeroU32 = Any.any_l () | & n'0: UInt32.t = n ])
    [ return''0 (result: t_NonZeroU32) -> {[@expl:new result type invariant] inv result} (! return' {result}) ]
end
module M_non_zero__qyi12916758414494363779__add (* NonZeroU32 *)
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_NonZeroU32 = { t_NonZeroU32__0: UInt32.t }
  
  predicate invariant' (self: t_NonZeroU32) = UInt32.t'int self.t_NonZeroU32__0 > 0
  
  predicate inv (_0: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_NonZeroU32__0 = a_0} -> true
        end)
  
  constant const_MAX: UInt32.t = (4294967295: UInt32.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add (self: t_NonZeroU32) (rhs: t_NonZeroU32) (return' (x: t_NonZeroU32)) =
    {[@expl:add 'self' type invariant] inv self}
    {[@expl:add 'rhs' type invariant] inv rhs}
    {[@expl:add requires] UInt32.t'int self.t_NonZeroU32__0 + UInt32.t'int rhs.t_NonZeroU32__0
    <= UInt32.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self'0.t_NonZeroU32__0} {rhs'0.t_NonZeroU32__0} (fun (_ret: UInt32.t) -> [ &_4 <- _ret ] s1)
      | s1 = [ &_0 <- { t_NonZeroU32__0 = _4 } ] s2
      | s2 = return''0 {_0} ] ]
    [ & _0: t_NonZeroU32 = Any.any_l ()
    | & self'0: t_NonZeroU32 = self
    | & rhs'0: t_NonZeroU32 = rhs
    | & _4: UInt32.t = Any.any_l () ])
    [ return''0 (result: t_NonZeroU32) -> {[@expl:add result type invariant] inv result} (! return' {result}) ]
end
module M_non_zero__qyi12916758414494363779__sub_pre_trans (* NonZeroU32 *)
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_NonZeroU32 = { t_NonZeroU32__0: UInt32.t }
  
  predicate sub_pre (self: t_NonZeroU32) (rhs: t_NonZeroU32) =
    UInt32.t'int self.t_NonZeroU32__0 > UInt32.t'int rhs.t_NonZeroU32__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_NonZeroU32
  
  constant b : t_NonZeroU32
  
  constant c : t_NonZeroU32
  
  function sub_pre_trans (a'0: t_NonZeroU32) (b'0: t_NonZeroU32) (c'0: t_NonZeroU32) : ()
  
  goal vc_sub_pre_trans: sub_pre a b -> sub_pre b c -> ([@expl:sub_pre_trans ensures] sub_pre a c)
end
module M_non_zero__qyi12916758414494363779__sub (* NonZeroU32 *)
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_NonZeroU32 = { t_NonZeroU32__0: UInt32.t }
  
  predicate invariant' (self: t_NonZeroU32) = UInt32.t'int self.t_NonZeroU32__0 > 0
  
  predicate inv (_0: t_NonZeroU32)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZeroU32 [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_NonZeroU32__0 = a_0} -> true
        end)
  
  predicate sub_pre (self: t_NonZeroU32) (rhs: t_NonZeroU32) =
    UInt32.t'int self.t_NonZeroU32__0 > UInt32.t'int rhs.t_NonZeroU32__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sub (self: t_NonZeroU32) (rhs: t_NonZeroU32) (return' (x: t_NonZeroU32)) =
    {[@expl:sub 'self' type invariant] inv self}
    {[@expl:sub 'rhs' type invariant] inv rhs}
    {[@expl:sub requires] sub_pre self rhs}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.sub {self'0.t_NonZeroU32__0} {rhs'0.t_NonZeroU32__0} (fun (_ret: UInt32.t) -> [ &_4 <- _ret ] s1)
      | s1 = [ &_0 <- { t_NonZeroU32__0 = _4 } ] s2
      | s2 = return''0 {_0} ] ]
    [ & _0: t_NonZeroU32 = Any.any_l ()
    | & self'0: t_NonZeroU32 = self
    | & rhs'0: t_NonZeroU32 = rhs
    | & _4: UInt32.t = Any.any_l () ])
    [ return''0 (result: t_NonZeroU32) -> {[@expl:sub result type invariant] inv result} (! return' {result}) ]
end
