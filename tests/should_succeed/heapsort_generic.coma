module M_heapsort_generic__heap_frag_max
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  function parent (i: int) : int = Int.div (i + 1) 2 - 1
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: t_T) (other: t_T) : t_Ordering
  
  function eq_cmp (x: t_T) (y: t_T) : ()
  
  axiom eq_cmp_spec: forall x: t_T, y: t_T. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: t_T) (y: t_T) : ()
  
  axiom antisym2_spec: forall x: t_T, y: t_T. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: t_T) (y: t_T) : ()
  
  axiom antisym1_spec: forall x: t_T, y: t_T. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: t_T) (y: t_T) (z: t_T) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: t_T, y: t_T, z: t_T, o: t_Ordering. cmp_log x y = o -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: t_T) : ()
  
  axiom refl_spec: forall x: t_T. cmp_log x x = C_Equal
  
  predicate gt_log (self: t_T) (o: t_T)
  
  function cmp_gt_log (x: t_T) (y: t_T) : ()
  
  axiom cmp_gt_log_spec: forall x: t_T, y: t_T. gt_log x y = (cmp_log x y = C_Greater)
  
  predicate ge_log (self: t_T) (o: t_T)
  
  function cmp_ge_log (x: t_T) (y: t_T) : ()
  
  axiom cmp_ge_log_spec: forall x: t_T, y: t_T. ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self: t_T) (o: t_T)
  
  function cmp_lt_log (x: t_T) (y: t_T) : ()
  
  axiom cmp_lt_log_spec: forall x: t_T, y: t_T. lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self: t_T) (o: t_T)
  
  function cmp_le_log (x: t_T) (y: t_T) : ()
  
  axiom cmp_le_log_spec: forall x: t_T, y: t_T. le_log x y = (cmp_log x y <> C_Greater)
  
  predicate heap_frag (s: Seq.seq t_T) (start: int) (end': int) =
    forall i: int. start <= parent i /\ i < end' -> le_log (Seq.get s i) (Seq.get s (parent i))
  
  predicate well_founded_relation [@inline:trivial] (self: int) (other: int) = self >= 0 /\ self > other
  
  meta "rewrite_def" predicate well_founded_relation
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant s : Seq.seq t_T
  
  constant i : int
  
  constant end' : int
  
  function heap_frag_max (s: Seq.seq t_T) (i: int) (end': int) : ()
  
  goal vc_heap_frag_max: heap_frag s 0 end'
    -> 0 <= i /\ i < end'
    -> (if i > 0 then
      ((([@expl:heap_frag_max requires #0] heap_frag s 0 end')
          && ([@expl:heap_frag_max requires #1] 0 <= parent i /\ parent i < end'))
        /\ well_founded_relation i (parent i))
      /\ (le_log (Seq.get s (parent i)) (Seq.get s 0)
      -> ([@expl:heap_frag_max ensures] le_log (Seq.get s i) (Seq.get s 0)))
    else
      [@expl:heap_frag_max ensures] le_log (Seq.get s i) (Seq.get s 0)
    )
end
module M_heapsort_generic__sift_down
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use seq.Permut
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  function parent (i: int) : int = Int.div (i + 1) 2 - 1
  
  type t_DeepModelTy
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: t_DeepModelTy) (other: t_DeepModelTy) : t_Ordering
  
  function eq_cmp (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom eq_cmp_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym2_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym1_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: t_DeepModelTy) (y: t_DeepModelTy) (z: t_DeepModelTy) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: t_DeepModelTy, y: t_DeepModelTy, z: t_DeepModelTy, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: t_DeepModelTy) : ()
  
  axiom refl_spec: forall x: t_DeepModelTy. cmp_log x x = C_Equal
  
  predicate gt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_gt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_gt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. gt_log x y = (cmp_log x y = C_Greater)
  
  predicate ge_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_ge_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_ge_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_lt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_lt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_le_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_le_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. le_log x y = (cmp_log x y <> C_Greater)
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_T = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  function deep_model'0 (self: t_Vec) : Seq.seq t_DeepModelTy
  
  axiom deep_model_spec: forall self: t_Vec. Seq.length (view self) = Seq.length (deep_model'0 self)
  
  axiom deep_model_spec'0: forall self: t_Vec. forall i: int. 0 <= i /\ i < Seq.length (view self)
        -> Seq.get (deep_model'0 self) i = deep_model (index_logic self i)
  
  function deep_model'1 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_DeepModelTy = deep_model'0 self.current
  
  meta "rewrite_def" function deep_model'1
  
  predicate permutation_of (self: Seq.seq t_T) (other: Seq.seq t_T) = Permut.permut self other 0 (Seq.length self)
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  predicate invariant''3 [@inline:trivial] (self: t_Vec) = inv'2 self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 (_0: t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Vec [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate invariant''4 [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 (_0: t_T)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_T [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return (x: t_T)) = {[@expl:index 'self_' type invariant] inv'4 self_}
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return' (result: t_T) -> {inv'5 result} {has_value ix (view self_) result} (! return {result}) ]
  
  type tuple = { f0: t_T; f1: t_T }
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef:
    forall args: tuple [precondition () args]. (let {f0 = self_; f1 = other} = args in inv'5 other /\ inv'5 self_)
      -> precondition () args
  
  function deep_model'2 [@inline:trivial] (self: t_T) : t_DeepModelTy = deep_model self
  
  meta "rewrite_def" function deep_model'2
  
  predicate postcondition_once (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef:
    forall args: tuple, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let {f0 = self_; f1 = other} = args in res = lt_log (deep_model'2 self_) (deep_model'2 other))
  
  let rec lt (self_: t_T) (other: t_T) (return (x: bool)) = {[@expl:lt requires] precondition () { f0 = self_;
                                                                                                   f1 = other }}
    any [ return' (result: bool) -> {postcondition_once () { f0 = self_; f1 = other } result} (! return {result}) ]
  
  predicate precondition'0 (self: ()) (args: tuple)
  
  axiom precondition_fndef'0:
    forall args: tuple [precondition'0 () args]. (let {f0 = self_; f1 = other} = args in inv'5 other /\ inv'5 self_)
      -> precondition'0 () args
  
  predicate postcondition_once'0 (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef'0:
    forall args: tuple, res: bool [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let {f0 = self_; f1 = other} = args in res = le_log (deep_model'2 self_) (deep_model'2 other))
  
  let rec le (self_: t_T) (other: t_T) (return (x: bool)) = {[@expl:le requires] precondition'0 () { f0 = self_;
                                                                                                     f1 = other }}
    any [ return' (result: bool) -> {postcondition_once'0 () { f0 = self_; f1 = other } result} (! return {result}) ]
  
  predicate invariant''5 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'6 (_0: Slice64.slice t_T)
  
  axiom inv_axiom'5 [@rewrite]: forall x: Slice64.slice t_T [inv'6 x]. inv'6 x = invariant''5 x
  
  predicate invariant''6 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'7 (_0: MutBorrow.t (Slice64.slice t_T))
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t (Slice64.slice t_T) [inv'7 x]. inv'7 x = invariant''6 x
  
  let rec deref_mut (self_: MutBorrow.t t_Vec) (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:deref_mut 'self_' type invariant] inv'3 self_}
    any
    [ return' (result: MutBorrow.t (Slice64.slice t_T)) -> {inv'7 result}
      {Slice64.view result.current = view self_.current}
      {Slice64.view result.final = view self_.final}
      (! return {result}) ]
  
  let rec swap (self_: MutBorrow.t (Slice64.slice t_T)) (i: UInt64.t) (j: UInt64.t) (return (x: ())) =
    {[@expl:swap 'self_' type invariant] inv'7 self_}
    {[@expl:swap requires #0] UInt64.t'int i < Seq.length (Slice64.view self_.current)}
    {[@expl:swap requires #1] UInt64.t'int j < Seq.length (Slice64.view self_.current)}
    any
    [ return' (result: ()) ->
    {Permut.exchange (Slice64.view self_.final) (Slice64.view self_.current) (UInt64.t'int i) (UInt64.t'int j)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t (Slice64.slice t_T)) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_Vec) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_Vec) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate heap_frag (s: Seq.seq t_DeepModelTy) (start: int) (end': int) =
    forall i: int. start <= parent i /\ i < end' -> le_log (Seq.get s i) (Seq.get s (parent i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sift_down (v: MutBorrow.t t_Vec) (start: UInt64.t) (end': UInt64.t) (return (x: ())) =
    {[@expl:sift_down 'v' type invariant] inv'3 v}
    {[@expl:sift_down requires #0] heap_frag (deep_model'1 v) (UInt64.t'int start + 1) (UInt64.t'int end')}
    {[@expl:sift_down requires #1] UInt64.t'int start < UInt64.t'int end'}
    {[@expl:sift_down requires #2] UInt64.t'int end' <= Seq.length (view v.current)}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &i <- start ] s1 | s1 = [ &old_2_0 <- v ] s2 | s2 = bb2 ]
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] old_2_0.final = v.final}
        {[@expl:loop invariant #0] inv'3 v}
        {[@expl:loop invariant #1] permutation_of (view v.current) (view old_v.current)}
        {[@expl:loop invariant #2] UInt64.t'int start <= UInt64.t'int i /\ UInt64.t'int i < UInt64.t'int end'}
        {[@expl:loop invariant #3] forall j: int. 0 <= j /\ j < UInt64.t'int start
            \/ UInt64.t'int end' <= j /\ j < Seq.length (view v.current)
          -> index_logic old_v.current j = index_logic v.current j}
        {[@expl:loop invariant #4] forall m: t_DeepModelTy. (forall j: int. UInt64.t'int start <= j
                /\ j < UInt64.t'int end' -> le_log (Seq.get (deep_model'1 old_v) j) m)
          -> (forall j: int. UInt64.t'int start <= j /\ j < UInt64.t'int end' -> le_log (Seq.get (deep_model'1 v) j) m)}
        {[@expl:loop invariant #5] forall j: int. UInt64.t'int start <= parent j
            /\ j < UInt64.t'int end' /\ UInt64.t'int i <> parent j
          -> le_log (Seq.get (deep_model'1 v) j) (Seq.get (deep_model'1 v) (parent j))}
        {[@expl:loop invariant #6] let c = 2 * UInt64.t'int i + 1 in c < UInt64.t'int end'
          /\ UInt64.t'int start <= parent (UInt64.t'int i)
        -> le_log (Seq.get (deep_model'1 v) c) (Seq.get (deep_model'1 v) (parent (parent c)))}
        {[@expl:loop invariant #7] let c = 2 * UInt64.t'int i + 2 in c < UInt64.t'int end'
          /\ UInt64.t'int start <= parent (UInt64.t'int i)
        -> le_log (Seq.get (deep_model'1 v) c) (Seq.get (deep_model'1 v) (parent (parent c)))}
        (! s0)
        [ s0 = bb3 ]
        [ bb3 = s0
          [ s0 = [ &_30 <- (2: UInt64.t) = (0: UInt64.t) ] s1 | s1 = {[@expl:division by zero] not _30} s2 | s2 = bb4 ]
        | bb4 = s0
          [ s0 = UInt64.div {end'} {(2: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_28 <- _ret ] s1)
          | s1 = [ &_26 <- UInt64.ge i _28 ] s2
          | s2 = any [ br0 -> {_26 = false} (! bb6) | br1 -> {_26} (! bb5) ] ]
        | bb6 = s0
          [ s0 = UInt64.mul {(2: UInt64.t)} {i} (fun (_ret: UInt64.t) -> [ &_33 <- _ret ] s1)
          | s1 = UInt64.add {_33} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &child <- _ret ] s2)
          | s2 = UInt64.add {child} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_37 <- _ret ] s3)
          | s3 = [ &_36 <- UInt64.lt _37 end' ] s4
          | s4 = any [ br0 -> {_36 = false} (! bb15) | br1 -> {_36} (! bb7) ] ]
        | bb7 = s0 [ s0 = index {v.current} {child} (fun (_ret: t_T) -> [ &_42 <- _ret ] s1) | s1 = bb9 ]
        | bb9 = s0
          [ s0 = UInt64.add {child} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_48 <- _ret ] s1)
          | s1 = index {v.current} {_48} (fun (_ret: t_T) -> [ &_46 <- _ret ] s2)
          | s2 = bb10 ]
        | bb10 = s0 [ s0 = lt {_42} {_46} (fun (_ret: bool) -> [ &_40 <- _ret ] s1) | s1 = bb11 ]
        | bb11 = any [ br0 -> {_40 = false} (! bb15) | br1 -> {_40} (! bb12) ]
        | bb12 = s0
          [ s0 = UInt64.add {child} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &child <- _ret ] s1) | s1 = bb15 ]
        | bb15 = s0 [ s0 = index {v.current} {child} (fun (_ret: t_T) -> [ &_53 <- _ret ] s1) | s1 = bb16 ]
        | bb16 = s0 [ s0 = index {v.current} {i} (fun (_ret: t_T) -> [ &_57 <- _ret ] s1) | s1 = bb17 ]
        | bb17 = s0 [ s0 = le {_53} {_57} (fun (_ret: bool) -> [ &_51 <- _ret ] s1) | s1 = bb18 ]
        | bb18 = any [ br0 -> {_51 = false} (! bb20) | br1 -> {_51} (! bb19) ]
        | bb20 = s0
          [ s0 = {inv'2 v.current}
            MutBorrow.borrow_mut <t_Vec> {v.current}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_64 <- _ret ] -{inv'2 _ret.final}-
                [ &v <- { v with current = _ret.final } ] s1)
          | s1 = deref_mut {_64} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_63 <- _ret ] s2)
          | s2 = bb21 ]
        | bb21 = s0
          [ s0 = {inv'6 _63.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_63.current} {MutBorrow.get_id _63}
              (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
                [ &_62 <- _ret ] -{inv'6 _ret.final}-
                [ &_63 <- { _63 with current = _ret.final } ] s1)
          | s1 = swap {_62} {i} {child} (fun (_ret: ()) -> [ &_61 <- _ret ] s2)
          | s2 = bb22 ]
        | bb22 = s0
          [ s0 = {[@expl:type invariant] inv'7 _63} s1
          | s1 = -{resolve'0 _63}- s2
          | s2 = [ &i <- child ] s3
          | s3 = bb2 ] ] ]
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'3 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = bb23 ]
    | bb19 = s0 [ s0 = {[@expl:type invariant] inv'3 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = bb23 ]
    | bb23 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & start: UInt64.t = start
    | & end': UInt64.t = end'
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _28: UInt64.t = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & child: UInt64.t = Any.any_l ()
    | & _33: UInt64.t = Any.any_l ()
    | & _36: bool = Any.any_l ()
    | & _37: UInt64.t = Any.any_l ()
    | & _40: bool = Any.any_l ()
    | & _42: t_T = Any.any_l ()
    | & _46: t_T = Any.any_l ()
    | & _48: UInt64.t = Any.any_l ()
    | & _51: bool = Any.any_l ()
    | & _53: t_T = Any.any_l ()
    | & _57: t_T = Any.any_l ()
    | & _61: () = Any.any_l ()
    | & _62: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _63: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _64: MutBorrow.t t_Vec = Any.any_l ()
    | & old_2_0: MutBorrow.t t_Vec = Any.any_l () ])
    [ return (result: ()) ->
    {[@expl:sift_down ensures #0] heap_frag (deep_model'0 v.final) (UInt64.t'int start) (UInt64.t'int end')}
      {[@expl:sift_down ensures #1] permutation_of (view v.final) (view v.current)}
      {[@expl:sift_down ensures #2] forall i: int. 0 <= i /\ i < UInt64.t'int start
          \/ UInt64.t'int end' <= i /\ i < Seq.length (view v.current)
        -> index_logic v.current i = index_logic v.final i}
      {[@expl:sift_down ensures #3] forall m: t_DeepModelTy. (forall j: int. UInt64.t'int start <= j
              /\ j < UInt64.t'int end' -> le_log (Seq.get (deep_model'1 v) j) m)
        -> (forall j: int. UInt64.t'int start <= j /\ j < UInt64.t'int end'
          -> le_log (Seq.get (deep_model'0 v.final) j) m)}
      (! return {result}) ]
end
module M_heapsort_generic__heap_sort
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use seq.Permut
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: t_Vec) = inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  let rec len (self_: t_Vec) (return (x: UInt64.t)) = {[@expl:len 'self_' type invariant] inv'3 self_}
    any [ return' (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  type t_DeepModelTy
  
  function parent (i: int) : int = Int.div (i + 1) 2 - 1
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: t_DeepModelTy) (other: t_DeepModelTy) : t_Ordering
  
  function eq_cmp (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom eq_cmp_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym2_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym1_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: t_DeepModelTy) (y: t_DeepModelTy) (z: t_DeepModelTy) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: t_DeepModelTy, y: t_DeepModelTy, z: t_DeepModelTy, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: t_DeepModelTy) : ()
  
  axiom refl_spec: forall x: t_DeepModelTy. cmp_log x x = C_Equal
  
  predicate gt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_gt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_gt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. gt_log x y = (cmp_log x y = C_Greater)
  
  predicate ge_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_ge_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_ge_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_lt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_lt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_le_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_le_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. le_log x y = (cmp_log x y <> C_Greater)
  
  predicate heap_frag (s: Seq.seq t_DeepModelTy) (start: int) (end': int) =
    forall i: int. start <= parent i /\ i < end' -> le_log (Seq.get s i) (Seq.get s (parent i))
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_T = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  function deep_model'0 (self: t_Vec) : Seq.seq t_DeepModelTy
  
  axiom deep_model_spec: forall self: t_Vec. Seq.length (view self) = Seq.length (deep_model'0 self)
  
  axiom deep_model_spec'0: forall self: t_Vec. forall i: int. 0 <= i /\ i < Seq.length (view self)
        -> Seq.get (deep_model'0 self) i = deep_model (index_logic self i)
  
  function deep_model'1 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_DeepModelTy = deep_model'0 self.current
  
  meta "rewrite_def" function deep_model'1
  
  predicate permutation_of (self: Seq.seq t_T) (other: Seq.seq t_T) = Permut.permut self other 0 (Seq.length self)
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'4 x]. inv'4 x = invariant''3 x
  
  let rec sift_down (v: MutBorrow.t t_Vec) (start: UInt64.t) (end': UInt64.t) (return (x: ())) =
    {[@expl:sift_down 'v' type invariant] inv'4 v}
    {[@expl:sift_down requires #0] heap_frag (deep_model'1 v) (UInt64.t'int start + 1) (UInt64.t'int end')}
    {[@expl:sift_down requires #1] UInt64.t'int start < UInt64.t'int end'}
    {[@expl:sift_down requires #2] UInt64.t'int end' <= Seq.length (view v.current)}
    any
    [ return' (result: ()) -> {heap_frag (deep_model'0 v.final) (UInt64.t'int start) (UInt64.t'int end')}
      {permutation_of (view v.final) (view v.current)}
      {forall i: int. 0 <= i /\ i < UInt64.t'int start \/ UInt64.t'int end' <= i /\ i < Seq.length (view v.current)
        -> index_logic v.current i = index_logic v.final i}
      {forall m: t_DeepModelTy. (forall j: int. UInt64.t'int start <= j /\ j < UInt64.t'int end'
            -> le_log (Seq.get (deep_model'1 v) j) m)
        -> (forall j: int. UInt64.t'int start <= j /\ j < UInt64.t'int end'
          -> le_log (Seq.get (deep_model'0 v.final) j) m)}
      (! return {result}) ]
  
  predicate sorted_range (s: Seq.seq t_DeepModelTy) (l: int) (u: int) =
    forall i: int, j: int. l <= i /\ i < j /\ j < u -> le_log (Seq.get s i) (Seq.get s j)
  
  predicate invariant''4 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'5 (_0: Slice64.slice t_T)
  
  axiom inv_axiom'4 [@rewrite]: forall x: Slice64.slice t_T [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate invariant''5 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'6 (_0: MutBorrow.t (Slice64.slice t_T))
  
  axiom inv_axiom'5 [@rewrite]: forall x: MutBorrow.t (Slice64.slice t_T) [inv'6 x]. inv'6 x = invariant''5 x
  
  let rec deref_mut (self_: MutBorrow.t t_Vec) (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:deref_mut 'self_' type invariant] inv'4 self_}
    any
    [ return' (result: MutBorrow.t (Slice64.slice t_T)) -> {inv'6 result}
      {Slice64.view result.current = view self_.current}
      {Slice64.view result.final = view self_.final}
      (! return {result}) ]
  
  let rec swap (self_: MutBorrow.t (Slice64.slice t_T)) (i: UInt64.t) (j: UInt64.t) (return (x: ())) =
    {[@expl:swap 'self_' type invariant] inv'6 self_}
    {[@expl:swap requires #0] UInt64.t'int i < Seq.length (Slice64.view self_.current)}
    {[@expl:swap requires #1] UInt64.t'int j < Seq.length (Slice64.view self_.current)}
    any
    [ return' (result: ()) ->
    {Permut.exchange (Slice64.view self_.final) (Slice64.view self_.current) (UInt64.t'int i) (UInt64.t'int j)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t (Slice64.slice t_T)) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  function heap_frag_max (s: Seq.seq t_DeepModelTy) (i: int) (end': int) : ()
  
  axiom heap_frag_max_def: forall s: Seq.seq t_DeepModelTy, i: int, end': int. heap_frag s 0 end'
      -> 0 <= i /\ i < end' -> heap_frag_max s i end' = (if i > 0 then heap_frag_max s (parent i) end' else ())
  
  axiom heap_frag_max_spec: forall s: Seq.seq t_DeepModelTy, i: int, end': int. heap_frag s 0 end'
      -> 0 <= i /\ i < end' -> le_log (Seq.get s i) (Seq.get s 0)
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_Vec) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_Vec) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate sorted (s: Seq.seq t_DeepModelTy) = sorted_range s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec heap_sort (v: MutBorrow.t t_Vec) (return (x: ())) = {[@expl:heap_sort 'v' type invariant] inv'4 v}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = len {v.current} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_9 <- (2: UInt64.t) = (0: UInt64.t) ] s1 | s1 = {[@expl:division by zero] not _9} s2 | s2 = bb3 ]
    | bb3 = s0
      [ s0 = UInt64.div {_7} {(2: UInt64.t)} (fun (_ret: UInt64.t) -> [ &start <- _ret ] s1)
      | s1 = [ &old_4_0 <- v ] s2
      | s2 = bb4 ]
    | bb4 = bb4
      [ bb4 = {[@expl:mut invariant] old_4_0.final = v.final}
        {[@expl:loop invariant #0] permutation_of (view v.current) (view old_v.current)}
        {[@expl:loop invariant #1] heap_frag (deep_model'1 v) (UInt64.t'int start) (Seq.length (view v.current))}
        {[@expl:loop invariant #2] UInt64.t'int start <= Int.div (Seq.length (view v.current)) 2}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = [ &_16 <- UInt64.gt start (0: UInt64.t) ] s1
          | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb6) ] ]
        | bb6 = s0
          [ s0 = UInt64.sub {start} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &start <- _ret ] s1)
          | s1 = len {v.current} (fun (_ret: UInt64.t) -> [ &_21 <- _ret ] s2)
          | s2 = bb7 ]
        | bb7 = s0
          [ s0 = {inv'2 v.current}
            MutBorrow.borrow_mut <t_Vec> {v.current}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_19 <- _ret ] -{inv'2 _ret.final}-
                [ &v <- { v with current = _ret.final } ] s1)
          | s1 = sift_down {_19} {start} {_21} (fun (_ret: ()) -> [ &_18 <- _ret ] s2)
          | s2 = bb4 ] ] ]
    | bb9 = s0 [ s0 = len {v.current} (fun (_ret: UInt64.t) -> [ &end' <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0 [ s0 = [ &old_11_0 <- v ] s1 | s1 = bb11 ]
    | bb11 = bb11
      [ bb11 = {[@expl:mut invariant] old_11_0.final = v.final}
        {[@expl:loop invariant #0] UInt64.t'int end' <= Seq.length (view v.current)}
        {[@expl:loop invariant #1] permutation_of (view v.current) (view old_v.current)}
        {[@expl:loop invariant #2] heap_frag (deep_model'1 v) 0 (UInt64.t'int end')}
        {[@expl:loop invariant #3] sorted_range (deep_model'1 v) (UInt64.t'int end') (Seq.length (view v.current))}
        {[@expl:loop invariant #4] forall i: int, j: int. 0 <= i
            /\ i < UInt64.t'int end' /\ UInt64.t'int end' <= j /\ j < Seq.length (view v.current)
          -> le_log (Seq.get (deep_model'1 v) i) (Seq.get (deep_model'1 v) j)}
        (! s0)
        [ s0 = bb12 ]
        [ bb12 = s0
          [ s0 = [ &_32 <- UInt64.gt end' (1: UInt64.t) ] s1
          | s1 = any [ br0 -> {_32 = false} (! bb17) | br1 -> {_32} (! bb13) ] ]
        | bb13 = s0
          [ s0 = UInt64.sub {end'} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &end' <- _ret ] s1)
          | s1 = {inv'2 v.current}
            MutBorrow.borrow_mut <t_Vec> {v.current}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_37 <- _ret ] -{inv'2 _ret.final}-
                [ &v <- { v with current = _ret.final } ] s2)
          | s2 = deref_mut {_37} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_36 <- _ret ] s3)
          | s3 = bb14 ]
        | bb14 = s0
          [ s0 = {inv'5 _36.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_36.current} {MutBorrow.get_id _36}
              (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
                [ &_35 <- _ret ] -{inv'5 _ret.final}-
                [ &_36 <- { _36 with current = _ret.final } ] s1)
          | s1 = swap {_35} {(0: UInt64.t)} {end'} (fun (_ret: ()) -> [ &_34 <- _ret ] s2)
          | s2 = bb15 ]
        | bb15 = s0
          [ s0 = {[@expl:type invariant] inv'6 _36} s1
          | s1 = -{resolve'0 _36}- s2
          | s2 =
            {[@expl:assertion] let _ = heap_frag_max (deep_model'1 v) 0 (UInt64.t'int end') in forall i: int, j: int. 0
                  <= i
                /\ i < UInt64.t'int end' /\ UInt64.t'int end' <= j /\ j < Seq.length (view v.current)
              -> le_log (Seq.get (deep_model'1 v) i) (Seq.get (deep_model'1 v) j)}
            s3
          | s3 = {inv'2 v.current}
            MutBorrow.borrow_mut <t_Vec> {v.current}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_42 <- _ret ] -{inv'2 _ret.final}-
                [ &v <- { v with current = _ret.final } ] s4)
          | s4 = sift_down {_42} {(0: UInt64.t)} {end'} (fun (_ret: ()) -> [ &_41 <- _ret ] s5)
          | s5 = bb11 ] ] ]
    | bb17 = s0 [ s0 = {[@expl:type invariant] inv'4 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & start: UInt64.t = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _18: () = Any.any_l ()
    | & _19: MutBorrow.t t_Vec = Any.any_l ()
    | & _21: UInt64.t = Any.any_l ()
    | & end': UInt64.t = Any.any_l ()
    | & _32: bool = Any.any_l ()
    | & _34: () = Any.any_l ()
    | & _35: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _36: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _37: MutBorrow.t t_Vec = Any.any_l ()
    | & _41: () = Any.any_l ()
    | & _42: MutBorrow.t t_Vec = Any.any_l ()
    | & old_4_0: MutBorrow.t t_Vec = Any.any_l ()
    | & old_11_0: MutBorrow.t t_Vec = Any.any_l () ])
    [ return (result: ()) -> {[@expl:heap_sort ensures #0] sorted (deep_model'0 v.final)}
      {[@expl:heap_sort ensures #1] permutation_of (view v.final) (view v.current)}
      (! return {result}) ]
end
