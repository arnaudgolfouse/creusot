module M_permcell__foo [#"permcell.rs" 5 0 5 19]
  let%span spermcell = "permcell.rs" 6 37 6 41
  let%span spermcell'0 = "permcell.rs" 8 50 8 51
  let%span spermcell'1 = "permcell.rs" 11 42 11 43
  let%span spermcell'2 = "permcell.rs" 13 50 13 51
  let%span spermcell'3 = "permcell.rs" 15 49 15 50
  let%span spermcell'4 = "permcell.rs" 15 57 15 58
  let%span spermcell'5 = "permcell.rs" 15 4 15 59
  let%span spermcell'6 = "permcell.rs" 13 4 13 52
  let%span spermcell'7 = "permcell.rs" 8 4 8 52
  let%span spermcell'8 = "permcell.rs" 4 10 4 22
  let%span spermcell'9 = "../../creusot-contracts/src/cell/permcell.rs" 95 14 95 44
  let%span spermcell'10 = "../../creusot-contracts/src/cell/permcell.rs" 96 14 96 35
  let%span spermcell'11 = "../../creusot-contracts/src/cell/permcell.rs" 165 15 165 37
  let%span spermcell'12 = "../../creusot-contracts/src/cell/permcell.rs" 166 14 166 30
  let%span spermcell'13 = "../../creusot-contracts/src/cell/permcell.rs" 185 15 185 37
  let%span spermcell'14 = "../../creusot-contracts/src/cell/permcell.rs" 186 14 186 39
  let%span spermcell'15 = "../../creusot-contracts/src/cell/permcell.rs" 187 14 187 30
  let%span spermcell'16 = "../../creusot-contracts/src/cell/permcell.rs" 188 14 188 33
  let%span spermcell'17 = "../../creusot-contracts/src/cell/permcell.rs" 134 15 134 37
  let%span spermcell'18 = "../../creusot-contracts/src/cell/permcell.rs" 135 14 135 29
  let%span spermcell'19 = "../../creusot-contracts/src/cell/permcell.rs" 136 14 136 29
  let%span spermcell'20 = "../../creusot-contracts/src/cell/permcell.rs" 137 14 137 39
  let%span spermcell'21 = "../../creusot-contracts/src/cell/permcell.rs" 145 15 145 37
  let%span spermcell'22 = "../../creusot-contracts/src/cell/permcell.rs" 146 14 146 29
  let%span spermcell'23 = "../../creusot-contracts/src/cell/permcell.rs" 34 4 34 26
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 139 14 139 32
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 148 14 148 36
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 100 8 100 22
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span smodel = "../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 59 8 59 22
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_PermCell
  
  type t_PermCellOwn
  
  type tuple = { _p0: t_PermCell; _p1: t_PermCellOwn }
  
  type t_Id
  
  function id (self: t_PermCell) : t_Id
  
  function id'0 (self: t_PermCellOwn) : t_Id
  
  function val' (self: t_PermCellOwn) : Int32.t
  
  function view [@inline:trivial] (self: t_PermCellOwn) : Int32.t = [%#spermcell'23] val' self
  
  meta "rewrite_def" function view
  
  let rec new (value: Int32.t) (return' (x: tuple)) = any
    [ return''0 (result: tuple) -> {[%#spermcell'9] id result._p0 = id'0 result._p1}
      {[%#spermcell'10] view result._p1 = value}
      (! return' {result}) ]
  
  let rec borrow (self: t_PermCellOwn) (return' (x: t_PermCellOwn)) = any
    [ return''0 (result: t_PermCellOwn) -> {[%#sghost] result = self} (! return' {result}) ]
  
  function view'0 [@inline:trivial] (self: t_PermCellOwn) : Int32.t = [%#smodel] view self
  
  meta "rewrite_def" function view'0
  
  function view'1 [@inline:trivial] (self: t_PermCellOwn) : Int32.t = [%#sghost'1] view'0 self
  
  meta "rewrite_def" function view'1
  
  let rec borrow'0 (self: t_PermCell) (perm: t_PermCellOwn) (return' (x: Int32.t)) =
    {[@expl:borrow requires] [%#spermcell'11] id self = id'0 perm}
    any [ return''0 (result: Int32.t) -> {[%#spermcell'12] result = view'1 perm} (! return' {result}) ]
  
  let rec borrow_mut (self: MutBorrow.t t_PermCellOwn) (return' (x: MutBorrow.t t_PermCellOwn)) = any
    [ return''0 (result: MutBorrow.t t_PermCellOwn) -> {[%#sghost'0] result = self} (! return' {result}) ]
  
  function fin [@inline:trivial] (self: MutBorrow.t t_PermCellOwn) : t_PermCellOwn = [%#sghost'2] self.final
  
  meta "rewrite_def" function fin
  
  function view'2 [@inline:trivial] (self: MutBorrow.t t_PermCellOwn) : Int32.t = [%#smodel'0] view self.current
  
  meta "rewrite_def" function view'2
  
  function view'3 [@inline:trivial] (self: MutBorrow.t t_PermCellOwn) : Int32.t = [%#sghost'1] view'2 self
  
  meta "rewrite_def" function view'3
  
  let rec borrow_mut'0 (self: t_PermCell) (perm: MutBorrow.t t_PermCellOwn) (return' (x: MutBorrow.t Int32.t)) =
    {[@expl:borrow_mut requires] [%#spermcell'13] id self = id'0 perm.current}
    any
    [ return''0 (result: MutBorrow.t Int32.t) -> {[%#spermcell'14] id self = id'0 (fin perm)}
      {[%#spermcell'15] result.current = view'3 perm}
      {[%#spermcell'16] result.final = view (fin perm)}
      (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t Int32.t) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec replace (self: t_PermCell) (perm: MutBorrow.t t_PermCellOwn) (val''0: Int32.t) (return' (x: Int32.t)) =
    {[@expl:replace requires] [%#spermcell'17] id self = id'0 perm.current}
    any
    [ return''0 (result: Int32.t) -> {[%#spermcell'18] val''0 = view (fin perm)}
      {[%#spermcell'19] result = view'3 perm}
      {[%#spermcell'20] id self = id'0 (fin perm)}
      (! return' {result}) ]
  
  function view'4 [@inline:trivial] (self: t_PermCellOwn) : Int32.t = [%#sghost'1] view self
  
  meta "rewrite_def" function view'4
  
  let rec into_inner (self: t_PermCell) (perm: t_PermCellOwn) (return' (x: Int32.t)) =
    {[@expl:into_inner requires] [%#spermcell'21] id self = id'0 perm}
    any [ return''0 (result: Int32.t) -> {[%#spermcell'22] result = view'4 perm} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo [#"permcell.rs" 5 0 5 19] (return' (x: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = new {[%#spermcell] (1: Int32.t)} (fun (_ret: tuple) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &p <- _4._p0 ] s1
      | s1 = [ &own <- _4._p1 ] s2
      | s2 = borrow {own} (fun (_ret: t_PermCellOwn) -> [ &_10 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = borrow'0 {p} {_10} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = [ &_6 <- _8 = ([%#spermcell'0] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb4) ] ]
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <t_PermCellOwn> {own}
          (fun (_ret: MutBorrow.t t_PermCellOwn) -> [ &_17 <- _ret ] [ &own <- _ret.final ] s1)
      | s1 = borrow_mut {_17} (fun (_ret: MutBorrow.t t_PermCellOwn) -> [ &_16 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0 [ s0 = borrow_mut'0 {p} {_16} (fun (_ret: MutBorrow.t Int32.t) -> [ &_14 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_14 <- { _14 with current = ([%#spermcell'1] (2: Int32.t)) } ] s1
      | s1 = -{resolve'0 _14}- s2
      | s2 = borrow {own} (fun (_ret: t_PermCellOwn) -> [ &_23 <- _ret ] s3)
      | s3 = bb8 ]
    | bb8 = s0 [ s0 = borrow'0 {p} {_23} (fun (_ret: Int32.t) -> [ &_21 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = [ &_19 <- _21 = ([%#spermcell'2] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_19 = false} (! bb11) | br1 -> {_19} (! bb10) ] ]
    | bb10 = s0
      [ s0 = MutBorrow.borrow_mut <t_PermCellOwn> {own}
          (fun (_ret: MutBorrow.t t_PermCellOwn) -> [ &_31 <- _ret ] [ &own <- _ret.final ] s1)
      | s1 = borrow_mut {_31} (fun (_ret: MutBorrow.t t_PermCellOwn) -> [ &_30 <- _ret ] s2)
      | s2 = bb12 ]
    | bb12 = s0
      [ s0 = replace {p} {_30} {[%#spermcell'3] (3: Int32.t)} (fun (_ret: Int32.t) -> [ &_28 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0
      [ s0 = [ &_27 <- _28 = ([%#spermcell'4] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_27 = false} (! bb15) | br1 -> {_27} (! bb14) ] ]
    | bb14 = s0 [ s0 = into_inner {p} {own} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb16 ]
    | bb16 = return''0 {_0}
    | bb15 = {[%#spermcell'5] false} any
    | bb11 = {[%#spermcell'6] false} any
    | bb5 = {[%#spermcell'7] false} any ]
    [ & _0: Int32.t = Any.any_l ()
    | & p: t_PermCell = Any.any_l ()
    | & own: t_PermCellOwn = Any.any_l ()
    | & _4: tuple = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _8: Int32.t = Any.any_l ()
    | & _10: t_PermCellOwn = Any.any_l ()
    | & _14: MutBorrow.t Int32.t = Any.any_l ()
    | & _16: MutBorrow.t t_PermCellOwn = Any.any_l ()
    | & _17: MutBorrow.t t_PermCellOwn = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _21: Int32.t = Any.any_l ()
    | & _23: t_PermCellOwn = Any.any_l ()
    | & _27: bool = Any.any_l ()
    | & _28: Int32.t = Any.any_l ()
    | & _30: MutBorrow.t t_PermCellOwn = Any.any_l ()
    | & _31: MutBorrow.t t_PermCellOwn = Any.any_l () ])
    [ return''0 (result: Int32.t) -> {[@expl:foo ensures] [%#spermcell'8] Int32.to_int result = 3}
      (! return' {result}) ]
end
