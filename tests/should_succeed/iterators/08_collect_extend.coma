module M_08_collect_extend__extend [#"08_collect_extend.rs" 21 0 21 66]
  let%span s08_collect_extend = "08_collect_extend.rs" 22 18 22 35
  let%span s08_collect_extend'0 = "08_collect_extend.rs" 26 4 26 7
  let%span s08_collect_extend'1 = "08_collect_extend.rs" 26 4 26 7
  let%span s08_collect_extend'2 = "08_collect_extend.rs" 25 16 25 55
  let%span s08_collect_extend'3 = "08_collect_extend.rs" 24 16 24 24
  let%span s08_collect_extend'4 = "08_collect_extend.rs" 26 4 26 7
  let%span s08_collect_extend'5 = "08_collect_extend.rs" 26 4 26 7
  let%span s08_collect_extend'6 = "08_collect_extend.rs" 21 40 21 43
  let%span s08_collect_extend'7 = "08_collect_extend.rs" 21 58 21 62
  let%span s08_collect_extend'8 = "08_collect_extend.rs" 18 2 19 82
  let%span s08_collect_extend'9 = "08_collect_extend.rs" 1 0 75 4
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 212 8 212 9
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 212 18 212 32
  let%span siter'1 = "../../../creusot-contracts/src/std/iter.rs" 42 4 42 49
  let%span siter'2 = "../../../creusot-contracts/src/std/iter.rs" 46 4 46 34
  let%span siter'3 = "../../../creusot-contracts/src/std/iter.rs" 47 4 47 34
  let%span siter'4 = "../../../creusot-contracts/src/std/iter.rs" 48 4 48 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span ssnapshot = "../../../creusot-contracts/src/snapshot.rs" 59 4 59 12
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 120 16 120 17
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 122 35 122 36
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 121 26 121 56
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 99 20 99 41
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 683 20 683 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_I
  
  predicate inv (_0: t_I)
  
  let rec into_iter (self_: t_I) (return' (x: t_I)) = {[@expl:into_iter 'self_' type invariant] [%#siter] inv self_}
    any [ return''0 (result: t_I) -> {inv result} {[%#siter'0] result = self_} (! return' {result}) ]
  
  type t_T
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'2] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: MutBorrow.t t_Vec) : Seq.seq t_T = [%#smodel] view self.current
  
  function view'1 (self: MutBorrow.t t_Vec) : Seq.seq t_T = [%#smodel'0] view'0 self
  
  function view'2 (self: MutBorrow.t t_Vec) : Seq.seq t_T = [%#ssnapshot] view'1 self
  
  predicate inv'0 (_0: t_T)
  
  predicate invariant' (self: t_T) = [%#sboxed] inv'0 self
  
  predicate inv'1 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'1 x]. inv'1 x = invariant' x
  
  predicate invariant''0 (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'1 (Seq.get self i)
  
  predicate inv'2 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate invariant''1 (self: t_Vec) = [%#svec'3] inv'2 (view self)
  
  predicate inv'3 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''1 x
  
  predicate invariant''2 (self: MutBorrow.t t_Vec) = [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate produces (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. ([%#siter'2] produces a ab b)
      -> ([%#siter'3] produces b bc c) -> ([%#siter'4] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#siter'1] produces self (Seq.empty: Seq.seq t_T) self
  
  type t_Option = C_None | C_Some t_T
  
  predicate invariant''3 (self: MutBorrow.t t_I) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'5 (_0: MutBorrow.t t_I)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_I [inv'5 x]. inv'5 x = invariant''3 x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    [%#s08_collect_extend'9] forall args: MutBorrow.t t_I [precondition () args]. (let self_ = args in inv'5 self_)
      -> precondition () args
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate inv'6 (_0: t_Option)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Option [inv'6 x]. inv'6 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'0 a_0
        end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    [%#s08_collect_extend'9] forall args: MutBorrow.t t_I, res: t_Option [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in match res with
          | C_None -> completed self_
          | C_Some v -> produces self_.current (Seq.singleton v) self_.final
          end
      /\ inv'6 res)
  
  let rec next (self_: MutBorrow.t t_I) (return' (x: t_Option)) = {[@expl:next requires] precondition () self_}
    any [ return''0 (result: t_Option) -> {postcondition_once () self_ result} (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t t_I) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_I) = resolve _0
  
  let rec v_Some (input: t_Option) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  let rec push (self_: MutBorrow.t t_Vec) (v: t_T) (return' (x: ())) =
    {[@expl:push 'self_' type invariant] [%#svec] inv'4 self_}
    {[@expl:push 'v' type invariant] [%#svec'0] inv'0 v}
    any [ return''0 (result: ()) -> {[%#svec'1] view self_.final = Seq.snoc (view'0 self_) v} (! return' {result}) ]
  
  predicate resolve'1 (_0: t_I)
  
  predicate resolve'2 (self: MutBorrow.t t_Vec) = [%#sresolve] self.final = self.current
  
  predicate resolve'3 (_0: MutBorrow.t t_Vec) = resolve'2 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec extend [#"08_collect_extend.rs" 21 0 21 66] (vec: MutBorrow.t t_Vec) (iter: t_I) (return' (x: ())) =
    {[@expl:extend 'vec' type invariant] [%#s08_collect_extend'6] inv'4 vec}
    {[@expl:extend 'iter' type invariant] [%#s08_collect_extend'7] inv iter}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_vec <- [%#s08_collect_extend] vec'0 ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = into_iter {iter'0} (fun (_ret: t_I) -> [ &iter'1 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- [%#s08_collect_extend'0] iter'1 ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- [%#s08_collect_extend'1] Seq.empty: Seq.seq t_T ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &old_5_0 <- vec'0 ] s1 | s1 = bb5 ]
    | bb5 = bb5'0
      [ bb5'0 = {[@expl:mut invariant] old_5_0.final = vec'0.final}
        {[@expl:for invariant] [%#s08_collect_extend'4] inv'2 produced}
        {[@expl:for invariant] [%#s08_collect_extend'4] inv iter'1}
        {[@expl:for invariant] [%#s08_collect_extend'4] produces iter_old produced iter'1}
        {[@expl:loop invariant #0] [%#s08_collect_extend'3] inv'4 vec'0}
        {[@expl:loop invariant #1] [%#s08_collect_extend'2] Seq.(==) (view'0 vec'0) (Seq.(++) (view'2 old_vec) produced)}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = {inv iter'1}
            MutBorrow.borrow_mut <t_I> {iter'1}
              (fun (_ret: MutBorrow.t t_I) -> [ &_21 <- _ret ] -{inv _ret.final}- [ &iter'1 <- _ret.final ] s1)
          | s1 = {inv _21.current}
            MutBorrow.borrow_final <t_I> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret: MutBorrow.t t_I) ->
                [ &_20 <- _ret ] -{inv _ret.final}-
                [ &_21 <- { _21 with current = _ret.final } ] s2)
          | s2 = next {_20} (fun (_ret: t_Option) -> [ &_19 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = {[@expl:type invariant] inv'5 _21} s1
          | s1 = -{resolve'0 _21}- s2
          | s2 = any [ br0 -> {_19 = C_None} (! bb10) | br1 (x0: t_T) -> {_19 = C_Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = v_Some {_19} (fun (r0: t_T) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_24 <- [%#s08_collect_extend'5] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _24 ] s1
          | s1 = [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = {inv'3 vec'0.current}
            MutBorrow.borrow_mut <t_Vec> {vec'0.current}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_28 <- _ret ] -{inv'3 _ret.final}-
                [ &vec'0 <- { vec'0 with current = _ret.final } ] s3)
          | s3 = push {_28} {x} (fun (_ret: ()) -> [ &_27 <- _ret ] s4)
          | s4 = bb5'0 ] ] ]
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv iter'1} s1
      | s1 = -{resolve'1 iter'1}- s2
      | s2 = {[@expl:type invariant] inv'4 vec'0} s3
      | s3 = -{resolve'3 vec'0}- s4
      | s4 = bb19 ]
    | bb19 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & vec'0: MutBorrow.t t_Vec = vec
    | & iter'0: t_I = iter
    | & old_vec: MutBorrow.t t_Vec = Any.any_l ()
    | & iter'1: t_I = Any.any_l ()
    | & iter_old: t_I = Any.any_l ()
    | & produced: Seq.seq t_T = Any.any_l ()
    | & _19: t_Option = Any.any_l ()
    | & _20: MutBorrow.t t_I = Any.any_l ()
    | & _21: MutBorrow.t t_I = Any.any_l ()
    | & __creusot_proc_iter_elem: t_T = Any.any_l ()
    | & _24: Seq.seq t_T = Any.any_l ()
    | & x: t_T = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: MutBorrow.t t_Vec = Any.any_l ()
    | & old_5_0: MutBorrow.t t_Vec = Any.any_l () ])
    [ return''0 (result: ()) ->
    {[@expl:extend ensures] [%#s08_collect_extend'8] exists done': MutBorrow.t t_I, prod: Seq.seq t_T. completed done'
        /\ produces iter prod done'.current /\ view vec.final = Seq.(++) (view'0 vec) prod}
      (! return' {result}) ]
end
module M_08_collect_extend__collect [#"08_collect_extend.rs" 39 0 39 52]
  let%span s08_collect_extend = "08_collect_extend.rs" 44 4 44 7
  let%span s08_collect_extend'0 = "08_collect_extend.rs" 44 4 44 7
  let%span s08_collect_extend'1 = "08_collect_extend.rs" 43 16 43 38
  let%span s08_collect_extend'2 = "08_collect_extend.rs" 42 16 42 24
  let%span s08_collect_extend'3 = "08_collect_extend.rs" 44 4 44 7
  let%span s08_collect_extend'4 = "08_collect_extend.rs" 44 4 44 7
  let%span s08_collect_extend'5 = "08_collect_extend.rs" 39 28 39 32
  let%span s08_collect_extend'6 = "08_collect_extend.rs" 39 40 39 52
  let%span s08_collect_extend'7 = "08_collect_extend.rs" 36 2 37 87
  let%span s08_collect_extend'8 = "08_collect_extend.rs" 1 0 75 4
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 212 8 212 9
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 212 18 212 32
  let%span siter'1 = "../../../creusot-contracts/src/std/iter.rs" 42 4 42 49
  let%span siter'2 = "../../../creusot-contracts/src/std/iter.rs" 46 4 46 34
  let%span siter'3 = "../../../creusot-contracts/src/std/iter.rs" 47 4 47 34
  let%span siter'4 = "../../../creusot-contracts/src/std/iter.rs" 48 4 48 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 108 26 108 44
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 120 16 120 17
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 122 35 122 36
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 121 26 121 56
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 99 20 99 41
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 683 20 683 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_Item
  
  predicate inv (_0: t_Item)
  
  predicate invariant' (self: t_Item) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_Item)
  
  axiom inv_axiom [@rewrite]: forall x: t_Item [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 (self: Seq.seq t_Item) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  predicate inv'1 (_0: Seq.seq t_Item)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_Item [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_Item
  
  axiom view_spec: forall self: t_Vec. [%#svec'0] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = [%#svec'4] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  let rec new (return' (x: t_Vec)) = any
    [ return''0 (result: t_Vec) -> {inv'2 result} {[%#svec] Seq.length (view result) = 0} (! return' {result}) ]
  
  type t_I
  
  predicate inv'3 (_0: t_I)
  
  let rec into_iter (self_: t_I) (return' (x: t_I)) = {[@expl:into_iter 'self_' type invariant] [%#siter] inv'3 self_}
    any [ return''0 (result: t_I) -> {inv'3 result} {[%#siter'0] result = self_} (! return' {result}) ]
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#siter'2] produces a ab b)
      -> ([%#siter'3] produces b bc c) -> ([%#siter'4] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#siter'1] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option = C_None | C_Some t_Item
  
  predicate invariant''2 (self: MutBorrow.t t_I) = [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0: MutBorrow.t t_I)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_I [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    [%#s08_collect_extend'8] forall args: MutBorrow.t t_I [precondition () args]. (let self_ = args in inv'4 self_)
      -> precondition () args
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate inv'5 (_0: t_Option)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Option [inv'5 x]. inv'5 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    [%#s08_collect_extend'8] forall args: MutBorrow.t t_I, res: t_Option [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in match res with
          | C_None -> completed self_
          | C_Some v -> produces self_.current (Seq.singleton v) self_.final
          end
      /\ inv'5 res)
  
  let rec next (self_: MutBorrow.t t_I) (return' (x: t_Option)) = {[@expl:next requires] precondition () self_}
    any [ return''0 (result: t_Option) -> {postcondition_once () self_ result} (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t t_I) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_I) = resolve _0
  
  let rec v_Some (input: t_Option) (ret (field_0: t_Item)) = any
    [ good (field_0: t_Item) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate invariant''3 (self: MutBorrow.t t_Vec) = [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'6 x]. inv'6 x = invariant''3 x
  
  function view'0 (self: MutBorrow.t t_Vec) : Seq.seq t_Item = [%#smodel] view self.current
  
  let rec push (self_: MutBorrow.t t_Vec) (v: t_Item) (return' (x: ())) =
    {[@expl:push 'self_' type invariant] [%#svec'1] inv'6 self_}
    {[@expl:push 'v' type invariant] [%#svec'2] inv v}
    any [ return''0 (result: ()) -> {[%#svec'3] view self_.final = Seq.snoc (view'0 self_) v} (! return' {result}) ]
  
  predicate resolve'1 (_0: t_I)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec collect [#"08_collect_extend.rs" 39 0 39 52] (iter: t_I) (return' (x: t_Vec)) =
    {[@expl:collect 'iter' type invariant] [%#s08_collect_extend'5] inv'3 iter}
    (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: t_Vec) -> [ &res <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = into_iter {iter'0} (fun (_ret: t_I) -> [ &iter'1 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- [%#s08_collect_extend] iter'1 ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- [%#s08_collect_extend'0] Seq.empty: Seq.seq t_Item ] s1 | s1 = bb5 ]
    | bb5 = bb5'0
      [ bb5'0 = {[@expl:for invariant] [%#s08_collect_extend'3] inv'1 produced}
        {[@expl:for invariant] [%#s08_collect_extend'3] inv'3 iter'1}
        {[@expl:for invariant] [%#s08_collect_extend'3] produces iter_old produced iter'1}
        {[@expl:loop invariant #0] [%#s08_collect_extend'2] inv'2 res}
        {[@expl:loop invariant #1] [%#s08_collect_extend'1] Seq.(==) (view res) produced}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = {inv'3 iter'1}
            MutBorrow.borrow_mut <t_I> {iter'1}
              (fun (_ret: MutBorrow.t t_I) -> [ &_20 <- _ret ] -{inv'3 _ret.final}- [ &iter'1 <- _ret.final ] s1)
          | s1 = {inv'3 _20.current}
            MutBorrow.borrow_final <t_I> {_20.current} {MutBorrow.get_id _20}
              (fun (_ret: MutBorrow.t t_I) ->
                [ &_19 <- _ret ] -{inv'3 _ret.final}-
                [ &_20 <- { _20 with current = _ret.final } ] s2)
          | s2 = next {_19} (fun (_ret: t_Option) -> [ &_18 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = {[@expl:type invariant] inv'4 _20} s1
          | s1 = -{resolve'0 _20}- s2
          | s2 = any [ br0 -> {_18 = C_None} (! bb10) | br1 (x0: t_Item) -> {_18 = C_Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = v_Some {_18} (fun (r0: t_Item) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_23 <- [%#s08_collect_extend'4] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _23 ] s1
          | s1 = [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = {inv'2 res}
            MutBorrow.borrow_mut <t_Vec> {res}
              (fun (_ret: MutBorrow.t t_Vec) -> [ &_27 <- _ret ] -{inv'2 _ret.final}- [ &res <- _ret.final ] s3)
          | s3 = push {_27} {x} (fun (_ret: ()) -> [ &_26 <- _ret ] s4)
          | s4 = bb5'0 ] ] ]
    | bb10 = s0 [ s0 = {[@expl:type invariant] inv'3 iter'1} s1 | s1 = -{resolve'1 iter'1}- s2 | s2 = bb18 ]
    | bb18 = s0 [ s0 = [ &_0 <- res ] s1 | s1 = bb20 ]
    | bb20 = return''0 {_0} ]
    [ & _0: t_Vec = Any.any_l ()
    | & iter'0: t_I = iter
    | & res: t_Vec = Any.any_l ()
    | & iter'1: t_I = Any.any_l ()
    | & iter_old: t_I = Any.any_l ()
    | & produced: Seq.seq t_Item = Any.any_l ()
    | & _18: t_Option = Any.any_l ()
    | & _19: MutBorrow.t t_I = Any.any_l ()
    | & _20: MutBorrow.t t_I = Any.any_l ()
    | & __creusot_proc_iter_elem: t_Item = Any.any_l ()
    | & _23: Seq.seq t_Item = Any.any_l ()
    | & x: t_Item = Any.any_l ()
    | & _26: () = Any.any_l ()
    | & _27: MutBorrow.t t_Vec = Any.any_l () ])
    [ return''0 (result: t_Vec) -> {[@expl:collect result type invariant] [%#s08_collect_extend'6] inv'2 result}
      {[@expl:collect ensures] [%#s08_collect_extend'7] exists done': MutBorrow.t t_I, prod: Seq.seq t_Item. resolve'1 done'.final
        /\ completed done' /\ produces iter prod done'.current /\ view result = prod}
      (! return' {result}) ]
end
module M_08_collect_extend__extend_index [#"08_collect_extend.rs" 50 0 50 51]
  let%span s08_collect_extend = "08_collect_extend.rs" 51 16 51 32
  let%span s08_collect_extend'0 = "08_collect_extend.rs" 52 16 52 32
  let%span s08_collect_extend'1 = "08_collect_extend.rs" 55 20 55 53
  let%span s08_collect_extend'2 = "08_collect_extend.rs" 18 2 19 82
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span ssnapshot = "../../../creusot-contracts/src/snapshot.rs" 59 4 59 12
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 221 18 221 34
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 278 8 278 61
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 285 12 285 41
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 291 4 291 49
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 292 27 292 29
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 296 4 296 34
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 297 4 297 34
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 298 4 298 44
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 299 73 299 75
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_NonNull'0 = { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_ManuallyDrop = { t_ManuallyDrop__value: () }
  
  type t_IntoIter = {
    t_IntoIter__buf: t_NonNull'0;
    t_IntoIter__phantom: ();
    t_IntoIter__cap: UInt64.t;
    t_IntoIter__alloc: t_ManuallyDrop;
    t_IntoIter__ptr: t_NonNull'0;
    t_IntoIter__end: Opaque.ptr }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'0] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: t_IntoIter) : Seq.seq UInt32.t
  
  let rec into_iter (self_: t_Vec) (return' (x: t_IntoIter)) = any
    [ return''0 (result: t_IntoIter) -> {[%#svec] view self_ = view'0 result} (! return' {result}) ]
  
  predicate produces (self: t_IntoIter) (visited: Seq.seq UInt32.t) (rhs: t_IntoIter) =
    [%#svec'2] view'0 self = Seq.(++) visited (view'0 rhs)
  
  function produces_trans (a: t_IntoIter) (ab: Seq.seq UInt32.t) (b: t_IntoIter) (bc: Seq.seq UInt32.t) (c: t_IntoIter) : ()
   = [%#svec'8] ()
  
  axiom produces_trans_spec:
    forall a: t_IntoIter, ab: Seq.seq UInt32.t, b: t_IntoIter, bc: Seq.seq UInt32.t, c: t_IntoIter. ([%#svec'5] produces a ab b)
      -> ([%#svec'6] produces b bc c) -> ([%#svec'7] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_IntoIter) : () = [%#svec'4] ()
  
  axiom produces_refl_spec: forall self: t_IntoIter. [%#svec'3] produces self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate resolve (self: MutBorrow.t t_IntoIter) = [%#sresolve] self.final = self.current
  
  function view'1 (self: MutBorrow.t t_IntoIter) : Seq.seq UInt32.t = [%#smodel] view'0 self.current
  
  predicate completed (self: MutBorrow.t t_IntoIter) =
    [%#svec'1] resolve self /\ view'1 self = (Seq.empty: Seq.seq UInt32.t)
  
  function view'2 (self: MutBorrow.t t_Vec) : Seq.seq UInt32.t = [%#smodel] view self.current
  
  let rec extend (vec: MutBorrow.t t_Vec) (iter: t_IntoIter) (return' (x: ())) = any
    [ return''0 (result: ()) ->
    {[%#s08_collect_extend'2] exists done': MutBorrow.t t_IntoIter, prod: Seq.seq UInt32.t. completed done'
        /\ produces iter prod done'.current /\ view vec.final = Seq.(++) (view'2 vec) prod}
      (! return' {result}) ]
  
  predicate resolve'0 (self: MutBorrow.t t_Vec) = [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t t_Vec) = resolve'0 _0
  
  function view'3 (self: t_Vec) : Seq.seq UInt32.t = [%#smodel'0] view self
  
  function view'4 (self: t_Vec) : Seq.seq UInt32.t = [%#ssnapshot] view'3 self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec extend_index [#"08_collect_extend.rs" 50 0 50 51] (v1: t_Vec) (v2: t_Vec) (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &oldv1 <- [%#s08_collect_extend] v1'0 ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &oldv2 <- [%#s08_collect_extend'0] v2'0 ] s1 | s1 = bb2 ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {v1'0}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_9 <- _ret ] [ &v1'0 <- _ret.final ] s1)
      | s1 = into_iter {v2'0} (fun (_ret: t_IntoIter) -> [ &_10 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_8 <- _ret ] [ &_9 <- { _9 with current = _ret.final } ] s1)
      | s1 = extend {_8} {_10} (fun (_ret: ()) -> [ &_7 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0
      [ s0 = -{resolve'1 _9}- s1
      | s1 = {[@expl:assertion] [%#s08_collect_extend'1] Seq.(==) (view v1'0) (Seq.(++) (view'4 oldv1) (view'4 oldv2))}
        s2
      | s2 = bb6 ]
    | bb6 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & v1'0: t_Vec = v1
    | & v2'0: t_Vec = v2
    | & oldv1: t_Vec = Any.any_l ()
    | & oldv2: t_Vec = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t t_Vec = Any.any_l ()
    | & _9: MutBorrow.t t_Vec = Any.any_l ()
    | & _10: t_IntoIter = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_08_collect_extend__collect_example [#"08_collect_extend.rs" 60 0 60 56]
  let%span s08_collect_extend = "08_collect_extend.rs" 63 20 63 67
  let%span s08_collect_extend'0 = "08_collect_extend.rs" 60 48 60 52
  let%span s08_collect_extend'1 = "08_collect_extend.rs" 58 11 59 64
  let%span s08_collect_extend'2 = "08_collect_extend.rs" 39 28 39 32
  let%span s08_collect_extend'3 = "08_collect_extend.rs" 36 2 37 87
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 42 4 42 49
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 46 4 46 34
  let%span siter'1 = "../../../creusot-contracts/src/std/iter.rs" 47 4 47 34
  let%span siter'2 = "../../../creusot-contracts/src/std/iter.rs" 48 4 48 44
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 50 8 50 31
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_I
  
  predicate inv (_0: t_I)
  
  predicate resolve (_0: t_I)
  
  predicate produces (self: t_I) (visited: Seq.seq UInt32.t) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq UInt32.t) (b: t_I) (bc: Seq.seq UInt32.t) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq UInt32.t, b: t_I, bc: Seq.seq UInt32.t, c: t_I. ([%#siter'0] produces a ab b)
      -> ([%#siter'1] produces b bc c) -> ([%#siter'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#siter] produces self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate completed (self: MutBorrow.t t_I)
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec] Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec collect (iter: t_I) (return' (x: t_Vec)) =
    {[@expl:collect 'iter' type invariant] [%#s08_collect_extend'2] inv iter}
    any
    [ return''0 (result: t_Vec) ->
    {[%#s08_collect_extend'3] exists done': MutBorrow.t t_I, prod: Seq.seq UInt32.t. resolve done'.final
        /\ completed done' /\ produces iter prod done'.current /\ view result = prod}
      (! return' {result}) ]
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : UInt32.t = [%#svec'0] Seq.get (view self) ix
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec collect_example [#"08_collect_extend.rs" 60 0 60 56] (iter: t_I) (return' (x: ())) =
    {[@expl:collect_example 'iter' type invariant] [%#s08_collect_extend'0] inv iter}
    {[@expl:collect_example requires] [%#s08_collect_extend'1] forall prod: Seq.seq UInt32.t, fin: t_I. produces iter prod fin
      -> (forall i: int. 0 <= i /\ i < Seq.length prod -> UInt32.t'int (Seq.get prod i) = i)}
    (! bb0
    [ bb0 = s0 [ s0 = collect {iter'0} (fun (_ret: t_Vec) -> [ &v <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#s08_collect_extend] forall i: int. 0 <= i /\ i < Seq.length (view v)
          -> UInt32.t'int (index_logic v i) = i}
        s1
      | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: () = Any.any_l () | & iter'0: t_I = iter | & v: t_Vec = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
