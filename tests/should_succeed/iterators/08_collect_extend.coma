module M_extend
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_I
  
  predicate inv_I (_1: t_I)
  
  let rec into_iter_I (self_: t_I) (return (x: t_I)) = {[@expl:into_iter 'self_' type invariant] inv_I self_}
    any [ return (result: t_I) -> {inv_I result} {result = self_} (! return {result}) ]
  
  type t_T
  
  type t_Vec_T_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate invariant_ref_Vec_T_Global [@inline:trivial] (self: MutBorrow.t t_Vec_T_Global) =
    inv_Vec_T_Global self.current /\ inv_Vec_T_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global
  
  predicate inv_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = invariant_ref_Vec_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_T) self
  
  type t_Option_T = None | Some t_T
  
  predicate invariant_ref_I [@inline:trivial] (self: MutBorrow.t t_I) = inv_I self.current /\ inv_I self.final
  
  meta "rewrite_def" predicate invariant_ref_I
  
  predicate inv_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = invariant_ref_I _1
  
  meta "rewrite_def" predicate inv_ref_I
  
  predicate precondition_next (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    forall args: MutBorrow.t t_I [precondition_next () args]. (let self_ = args in inv_ref_I self_)
      -> precondition_next () args
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate inv_Option_T (_1: t_Option_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_T [inv_Option_T x]. inv_Option_T x
      = match x with
        | None -> true
        | Some f0 -> inv_T f0
        end
  
  predicate postcondition_once_next (self: ()) (args: MutBorrow.t t_I) (result: t_Option_T)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option_T [postcondition_once_next () args res]. postcondition_once_next () args res
      -> (let self_ = args in match res with
          | None -> completed_I self_
          | Some v -> produces_I self_.current (Seq.singleton v) self_.final
          end
      /\ inv_Option_T res)
  
  let rec next_I (self_: MutBorrow.t t_I) (return (x: t_Option_T)) = {[@expl:next requires] precondition_next () self_}
    any [ return (result: t_Option_T) -> {postcondition_once_next () self_ result} (! return {result}) ]
  
  predicate resolve_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_I
  
  let rec elim_Some (input: t_Option_T) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Some f0: t_Option_T]. Some f0 <> input} (! {false} any) ]
  
  let rec push_T (self_: MutBorrow.t t_Vec_T_Global) (v: t_T) (return (x: ())) =
    {[@expl:push 'self_' type invariant] inv_ref_Vec_T_Global self_}
    {[@expl:push 'v' type invariant] inv_T v}
    any
    [ return (result: ()) -> {view_Vec_T_Global self_.final = Seq.snoc (view_Vec_T_Global self_.current) v}
      (! return {result}) ]
  
  predicate resolve_I (_1: t_I)
  
  predicate resolve_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_T_Global
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec extend_T (vec: MutBorrow.t t_Vec_T_Global) (iter: t_I) (return (x: ())) =
    {[@expl:extend 'vec' type invariant] inv_ref_Vec_T_Global vec}
    {[@expl:extend 'iter' type invariant] inv_I iter}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_vec <- vec ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = into_iter_I {iter} (fun (_ret: t_I) -> [ &iter'0 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter'0 ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq t_T ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &old_5_0 <- vec ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:mut invariant] old_5_0.final = vec.final}
        {[@expl:for invariant] inv_Seq_T produced}
        {[@expl:for invariant] inv_I iter'0}
        {[@expl:for invariant] produces_I iter_old produced iter'0}
        {[@expl:loop invariant #0] inv_ref_Vec_T_Global vec}
        {[@expl:loop invariant #1] Seq.(==) (view_Vec_T_Global vec.current) (Seq.(++) (view_Vec_T_Global old_vec.current) produced)}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = {inv_I iter'0}
            MutBorrow.borrow_mut <t_I> {iter'0}
              (fun (_ret: MutBorrow.t t_I) -> [ &_21 <- _ret ] -{inv_I _ret.final}- [ &iter'0 <- _ret.final ] s1)
          | s1 = {inv_I _21.current}
            MutBorrow.borrow_final <t_I> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret: MutBorrow.t t_I) ->
                [ &_20 <- _ret ] -{inv_I _ret.final}-
                [ &_21 <- { _21 with current = _ret.final } ] s2)
          | s2 = next_I {_20} (fun (_ret: t_Option_T) -> [ &_19 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = {[@expl:type invariant] inv_ref_I _21} s1
          | s1 = -{resolve_ref_I _21}- s2
          | s2 = any [ br0 -> {_19 = None} (! bb10) | br1 (x0: t_T) -> {_19 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_19} (fun (r0: t_T) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_24 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _24 ] s1
          | s1 = [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = {inv_Vec_T_Global vec.current}
            MutBorrow.borrow_mut <t_Vec_T_Global> {vec.current}
              (fun (_ret: MutBorrow.t t_Vec_T_Global) ->
                [ &_28 <- _ret ] -{inv_Vec_T_Global _ret.final}-
                [ &vec <- { vec with current = _ret.final } ] s3)
          | s3 = push_T {_28} {x} (fun (_ret: ()) -> [ &_27 <- _ret ] s4)
          | s4 = bb5 ] ] ]
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv_I iter'0} s1
      | s1 = -{resolve_I iter'0}- s2
      | s2 = {[@expl:type invariant] inv_ref_Vec_T_Global vec} s3
      | s3 = -{resolve_ref_Vec_T_Global vec}- s4
      | s4 = bb19 ]
    | bb19 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & vec: MutBorrow.t t_Vec_T_Global = vec
    | & iter: t_I = iter
    | & old_vec: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & iter'0: t_I = Any.any_l ()
    | & iter_old: t_I = Any.any_l ()
    | & produced: Seq.seq t_T = Any.any_l ()
    | & _19: t_Option_T = Any.any_l ()
    | & _20: MutBorrow.t t_I = Any.any_l ()
    | & _21: MutBorrow.t t_I = Any.any_l ()
    | & __creusot_proc_iter_elem: t_T = Any.any_l ()
    | & _24: Seq.seq t_T = Any.any_l ()
    | & x: t_T = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & old_5_0: MutBorrow.t t_Vec_T_Global = Any.any_l () ])
    [ return (result: ()) -> {[@expl:extend ensures] exists done': MutBorrow.t t_I, prod: Seq.seq t_T. completed_I done'
        /\ produces_I iter prod done'.current
        /\ view_Vec_T_Global vec.final = Seq.(++) (view_Vec_T_Global vec.current) prod}
      (! return {result}) ]
end
module M_collect
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_Item_Global
  
  type t_Item
  
  predicate inv_Item (_1: t_Item)
  
  predicate invariant_Box_Item_Global (self: t_Item) = inv_Item self
  
  predicate inv_Box_Item_Global [@inline:trivial] (_1: t_Item) = invariant_Box_Item_Global _1
  
  meta "rewrite_def" predicate inv_Box_Item_Global
  
  predicate invariant_Seq_Item [@inline:trivial] (self: Seq.seq t_Item) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_Item_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_Item
  
  predicate inv_Seq_Item [@inline:trivial] (_1: Seq.seq t_Item) = invariant_Seq_Item _1
  
  meta "rewrite_def" predicate inv_Seq_Item
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_Item_Global (self: t_Vec_Item_Global) : Seq.seq t_Item
  
  axiom view_Vec_Item_Global_spec: forall self: t_Vec_Item_Global. Seq.length (view_Vec_Item_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_Item_Global (self: t_Vec_Item_Global) = inv_Seq_Item (view_Vec_Item_Global self)
  
  predicate inv_Vec_Item_Global (_1: t_Vec_Item_Global)
  
  axiom inv_axiom: forall x: t_Vec_Item_Global [inv_Vec_Item_Global x]. inv_Vec_Item_Global x
      -> invariant_Vec_Item_Global x
  
  let rec new_Item (return (x: t_Vec_Item_Global)) = any
    [ return (result: t_Vec_Item_Global) -> {inv_Vec_Item_Global result}
      {Seq.length (view_Vec_Item_Global result) = 0}
      (! return {result}) ]
  
  type t_I
  
  predicate inv_I (_1: t_I)
  
  let rec into_iter_I (self_: t_I) (return (x: t_I)) = {[@expl:into_iter 'self_' type invariant] inv_I self_}
    any [ return (result: t_I) -> {inv_I result} {result = self_} (! return {result}) ]
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option_Item = None | Some t_Item
  
  predicate invariant_ref_I [@inline:trivial] (self: MutBorrow.t t_I) = inv_I self.current /\ inv_I self.final
  
  meta "rewrite_def" predicate invariant_ref_I
  
  predicate inv_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = invariant_ref_I _1
  
  meta "rewrite_def" predicate inv_ref_I
  
  predicate precondition_next (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    forall args: MutBorrow.t t_I [precondition_next () args]. (let self_ = args in inv_ref_I self_)
      -> precondition_next () args
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate inv_Option_Item (_1: t_Option_Item)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_Item [inv_Option_Item x]. inv_Option_Item x
      = match x with
        | None -> true
        | Some f0 -> inv_Item f0
        end
  
  predicate postcondition_once_next (self: ()) (args: MutBorrow.t t_I) (result: t_Option_Item)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option_Item [postcondition_once_next () args res]. postcondition_once_next () args res
      -> (let self_ = args in match res with
          | None -> completed_I self_
          | Some v -> produces_I self_.current (Seq.singleton v) self_.final
          end
      /\ inv_Option_Item res)
  
  let rec next_I (self_: MutBorrow.t t_I) (return (x: t_Option_Item)) =
    {[@expl:next requires] precondition_next () self_}
    any [ return (result: t_Option_Item) -> {postcondition_once_next () self_ result} (! return {result}) ]
  
  predicate resolve_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_I
  
  let rec elim_Some (input: t_Option_Item) (ret (f0: t_Item)) = any
    [ good (f0: t_Item) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: t_Item [Some f0: t_Option_Item]. Some f0 <> input} (! {false} any) ]
  
  predicate invariant_ref_Vec_Item_Global [@inline:trivial] (self: MutBorrow.t t_Vec_Item_Global) =
    inv_Vec_Item_Global self.current /\ inv_Vec_Item_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_Item_Global
  
  predicate inv_ref_Vec_Item_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_Item_Global) =
    invariant_ref_Vec_Item_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_Item_Global
  
  let rec push_Item (self_: MutBorrow.t t_Vec_Item_Global) (v: t_Item) (return (x: ())) =
    {[@expl:push 'self_' type invariant] inv_ref_Vec_Item_Global self_}
    {[@expl:push 'v' type invariant] inv_Item v}
    any
    [ return (result: ()) -> {view_Vec_Item_Global self_.final = Seq.snoc (view_Vec_Item_Global self_.current) v}
      (! return {result}) ]
  
  predicate resolve_I (_1: t_I)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec collect_I (iter: t_I) (return (x: t_Vec_Item_Global)) = {[@expl:collect 'iter' type invariant] inv_I iter}
    (! bb0
    [ bb0 = s0 [ s0 = new_Item (fun (_ret: t_Vec_Item_Global) -> [ &res <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = into_iter_I {iter} (fun (_ret: t_I) -> [ &iter'0 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter'0 ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq t_Item ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] inv_Seq_Item produced}
        {[@expl:for invariant] inv_I iter'0}
        {[@expl:for invariant] produces_I iter_old produced iter'0}
        {[@expl:loop invariant #0] inv_Vec_Item_Global res}
        {[@expl:loop invariant #1] Seq.(==) (view_Vec_Item_Global res) produced}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = {inv_I iter'0}
            MutBorrow.borrow_mut <t_I> {iter'0}
              (fun (_ret: MutBorrow.t t_I) -> [ &_20 <- _ret ] -{inv_I _ret.final}- [ &iter'0 <- _ret.final ] s1)
          | s1 = {inv_I _20.current}
            MutBorrow.borrow_final <t_I> {_20.current} {MutBorrow.get_id _20}
              (fun (_ret: MutBorrow.t t_I) ->
                [ &_19 <- _ret ] -{inv_I _ret.final}-
                [ &_20 <- { _20 with current = _ret.final } ] s2)
          | s2 = next_I {_19} (fun (_ret: t_Option_Item) -> [ &_18 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = {[@expl:type invariant] inv_ref_I _20} s1
          | s1 = -{resolve_ref_I _20}- s2
          | s2 = any [ br0 -> {_18 = None} (! bb10) | br1 (x0: t_Item) -> {_18 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_18} (fun (r0: t_Item) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_23 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _23 ] s1
          | s1 = [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = {inv_Vec_Item_Global res}
            MutBorrow.borrow_mut <t_Vec_Item_Global> {res}
              (fun (_ret: MutBorrow.t t_Vec_Item_Global) ->
                [ &_27 <- _ret ] -{inv_Vec_Item_Global _ret.final}-
                [ &res <- _ret.final ] s3)
          | s3 = push_Item {_27} {x} (fun (_ret: ()) -> [ &_26 <- _ret ] s4)
          | s4 = bb5 ] ] ]
    | bb10 = s0 [ s0 = {[@expl:type invariant] inv_I iter'0} s1 | s1 = -{resolve_I iter'0}- s2 | s2 = bb18 ]
    | bb18 = s0 [ s0 = [ &_0 <- res ] s1 | s1 = bb20 ]
    | bb20 = return {_0} ]
    [ & _0: t_Vec_Item_Global = Any.any_l ()
    | & iter: t_I = iter
    | & res: t_Vec_Item_Global = Any.any_l ()
    | & iter'0: t_I = Any.any_l ()
    | & iter_old: t_I = Any.any_l ()
    | & produced: Seq.seq t_Item = Any.any_l ()
    | & _18: t_Option_Item = Any.any_l ()
    | & _19: MutBorrow.t t_I = Any.any_l ()
    | & _20: MutBorrow.t t_I = Any.any_l ()
    | & __creusot_proc_iter_elem: t_Item = Any.any_l ()
    | & _23: Seq.seq t_Item = Any.any_l ()
    | & x: t_Item = Any.any_l ()
    | & _26: () = Any.any_l ()
    | & _27: MutBorrow.t t_Vec_Item_Global = Any.any_l () ])
    [ return (result: t_Vec_Item_Global) -> {[@expl:collect result type invariant] inv_Vec_Item_Global result}
      {[@expl:collect ensures] exists done': MutBorrow.t t_I, prod: Seq.seq t_Item. resolve_I done'.final
        /\ completed_I done' /\ produces_I iter prod done'.current /\ view_Vec_Item_Global result = prod}
      (! return {result}) ]
end
module M_extend_index
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Vec_u32_Global
  
  type t_IntoIter_u32_Global
  
  predicate inv_IntoIter_u32_Global (_1: t_IntoIter_u32_Global)
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_u32_Global (self: t_Vec_u32_Global) : Seq.seq UInt32.t
  
  axiom view_Vec_u32_Global_spec: forall self: t_Vec_u32_Global. Seq.length (view_Vec_u32_Global self)
      <= UInt64.t'int const_MAX
  
  function view_IntoIter_u32_Global (self: t_IntoIter_u32_Global) : Seq.seq UInt32.t
  
  let rec into_iter_Vec_u32_Global (self_: t_Vec_u32_Global) (return (x: t_IntoIter_u32_Global)) = any
    [ return (result: t_IntoIter_u32_Global) -> {inv_IntoIter_u32_Global result}
      {view_Vec_u32_Global self_ = view_IntoIter_u32_Global result}
      (! return {result}) ]
  
  predicate produces_IntoIter_u32_Global (self: t_IntoIter_u32_Global) (visited: Seq.seq UInt32.t) (rhs: t_IntoIter_u32_Global) =
    view_IntoIter_u32_Global self = Seq.(++) visited (view_IntoIter_u32_Global rhs)
  
  function produces_trans_IntoIter_u32_Global (a: t_IntoIter_u32_Global) (ab: Seq.seq UInt32.t) (b: t_IntoIter_u32_Global) (bc: Seq.seq UInt32.t) (c: t_IntoIter_u32_Global) : ()
   = ()
  
  axiom produces_trans_IntoIter_u32_Global_spec:
    forall a: t_IntoIter_u32_Global, ab: Seq.seq UInt32.t, b: t_IntoIter_u32_Global, bc: Seq.seq UInt32.t, c: t_IntoIter_u32_Global. produces_IntoIter_u32_Global a ab b
      -> produces_IntoIter_u32_Global b bc c -> produces_IntoIter_u32_Global a (Seq.(++) ab bc) c
  
  function produces_refl_IntoIter_u32_Global (self: t_IntoIter_u32_Global) : () = ()
  
  axiom produces_refl_IntoIter_u32_Global_spec:
    forall self: t_IntoIter_u32_Global. produces_IntoIter_u32_Global self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate resolve_ref_IntoIter_u32_Global [@inline:trivial] (_1: MutBorrow.t t_IntoIter_u32_Global) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_IntoIter_u32_Global
  
  predicate completed_IntoIter_u32_Global (self: MutBorrow.t t_IntoIter_u32_Global) =
    resolve_ref_IntoIter_u32_Global self /\ view_IntoIter_u32_Global self.current = (Seq.empty: Seq.seq UInt32.t)
  
  let rec extend_u32 (vec: MutBorrow.t t_Vec_u32_Global) (iter: t_IntoIter_u32_Global) (return (x: ())) =
    {[@expl:extend 'iter' type invariant] inv_IntoIter_u32_Global iter}
    any
    [ return (result: ()) ->
    {exists done': MutBorrow.t t_IntoIter_u32_Global, prod: Seq.seq UInt32.t. completed_IntoIter_u32_Global done'
        /\ produces_IntoIter_u32_Global iter prod done'.current
        /\ view_Vec_u32_Global vec.final = Seq.(++) (view_Vec_u32_Global vec.current) prod}
      (! return {result}) ]
  
  predicate resolve_ref_Vec_u32_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_u32_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_u32_Global
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec extend_index (v1: t_Vec_u32_Global) (v2: t_Vec_u32_Global) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &oldv1 <- v1 ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &oldv2 <- v2 ] s1 | s1 = bb2 ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec_u32_Global> {v1}
          (fun (_ret: MutBorrow.t t_Vec_u32_Global) -> [ &_9 <- _ret ] [ &v1 <- _ret.final ] s1)
      | s1 = into_iter_Vec_u32_Global {v2} (fun (_ret: t_IntoIter_u32_Global) -> [ &_10 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec_u32_Global> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret: MutBorrow.t t_Vec_u32_Global) -> [ &_8 <- _ret ] [ &_9 <- { _9 with current = _ret.final } ] s1)
      | s1 = extend_u32 {_8} {_10} (fun (_ret: ()) -> [ &_7 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0
      [ s0 = -{resolve_ref_Vec_u32_Global _9}- s1
      | s1 =
        {[@expl:assertion] Seq.(==) (view_Vec_u32_Global v1) (Seq.(++) (view_Vec_u32_Global oldv1) (view_Vec_u32_Global oldv2))}
        s2
      | s2 = bb6 ]
    | bb6 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & v1: t_Vec_u32_Global = v1
    | & v2: t_Vec_u32_Global = v2
    | & oldv1: t_Vec_u32_Global = Any.any_l ()
    | & oldv2: t_Vec_u32_Global = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t t_Vec_u32_Global = Any.any_l ()
    | & _9: MutBorrow.t t_Vec_u32_Global = Any.any_l ()
    | & _10: t_IntoIter_u32_Global = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_collect_example
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_I
  
  type t_Vec_u32_Global
  
  predicate inv_I (_1: t_I)
  
  predicate resolve_I (_1: t_I)
  
  predicate produces_I (self: t_I) (visited: Seq.seq UInt32.t) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq UInt32.t) (b: t_I) (bc: Seq.seq UInt32.t) (c: t_I) : ()
  
  axiom produces_trans_I_spec:
    forall a: t_I, ab: Seq.seq UInt32.t, b: t_I, bc: Seq.seq UInt32.t, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_u32_Global (self: t_Vec_u32_Global) : Seq.seq UInt32.t
  
  axiom view_Vec_u32_Global_spec: forall self: t_Vec_u32_Global. Seq.length (view_Vec_u32_Global self)
      <= UInt64.t'int const_MAX
  
  let rec collect_I (iter: t_I) (return (x: t_Vec_u32_Global)) = {[@expl:collect 'iter' type invariant] inv_I iter}
    any
    [ return (result: t_Vec_u32_Global) -> {exists done': MutBorrow.t t_I, prod: Seq.seq UInt32.t. resolve_I done'.final
        /\ completed_I done' /\ produces_I iter prod done'.current /\ view_Vec_u32_Global result = prod}
      (! return {result}) ]
  
  function index_Vec_u32_Global [@inline:trivial] (self: t_Vec_u32_Global) (ix: int) : UInt32.t =
    Seq.get (view_Vec_u32_Global self) ix
  
  meta "rewrite_def" function index_Vec_u32_Global
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec collect_example_I (iter: t_I) (return (x: ())) = {[@expl:collect_example 'iter' type invariant] inv_I iter}
    {[@expl:collect_example requires] forall prod: Seq.seq UInt32.t, fin: t_I. produces_I iter prod fin
      -> (forall i: int. 0 <= i /\ i < Seq.length prod -> UInt32.t'int (Seq.get prod i) = i)}
    (! bb0
    [ bb0 = s0 [ s0 = collect_I {iter} (fun (_ret: t_Vec_u32_Global) -> [ &v <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] forall i: int. 0 <= i /\ i < Seq.length (view_Vec_u32_Global v)
          -> UInt32.t'int (index_Vec_u32_Global v i) = i}
        s1
      | s1 = bb3 ]
    | bb3 = return {_0} ] [ & _0: () = Any.any_l () | & iter: t_I = iter | & v: t_Vec_u32_Global = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
