module M_16_take__qyi7075277913804895985__resolve_coherence [#"16_take.rs" 9 9 9 16] (* <Take<I> as creusot_contracts::Resolve> *)
  let%span s16_take = "16_take.rs" 9 9 9 16
  let%span s16_take'0 = "16_take.rs" 11 4 12 16
  
  use creusot.int.UInt64
  
  type t_I
  
  type t_Take = { t_Take__iter: t_I; t_Take__n: UInt64.t }
  
  predicate resolve (_0: t_I)
  
  predicate structural_resolve (_0: t_Take) =
    match _0 with
      | {t_Take__iter = x0; t_Take__n = x1} -> resolve x0
      end
  
  predicate resolve'0 (_0: UInt64.t) = true
  
  predicate resolve'1 [#"16_take.rs" 9 9 9 16] (self: t_Take) =
    [%#s16_take'0] resolve self.t_Take__iter /\ resolve'0 self.t_Take__n
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Take
  
  function resolve_coherence [#"16_take.rs" 9 9 9 16] (self'0: t_Take) : ()
  
  goal vc_resolve_coherence: ([%#s16_take] structural_resolve self)
    -> ([@expl:resolve_coherence ensures] [%#s16_take] resolve'1 self)
end
module M_16_take__qyi12677911356865036795__produces_refl [#"16_take.rs" 41 4 41 26] (* <Take<I> as common::Iterator> *)
  let%span s16_take = "16_take.rs" 40 14 40 47
  let%span s16_take'0 = "16_take.rs" 41 27 41 29
  let%span s16_take'1 = "16_take.rs" 33 8 35 9
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Take = { t_Take__iter: t_I; t_Take__n: UInt64.t }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"16_take.rs" 32 4 32 64] (self: t_Take) (visited: Seq.seq t_Item) (o: t_Take) =
    [%#s16_take'1] UInt64.t'int self.t_Take__n = UInt64.t'int o.t_Take__n + Seq.length visited
    /\ produces self.t_Take__iter visited o.t_Take__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Take
  
  function produces_refl'0 [#"16_take.rs" 41 4 41 26] (self'0: t_Take) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] [%#s16_take] produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_16_take__qyi12677911356865036795__produces_trans [#"16_take.rs" 48 4 48 90] (* <Take<I> as common::Iterator> *)
  let%span s16_take = "16_take.rs" 45 15 45 32
  let%span s16_take'0 = "16_take.rs" 46 15 46 32
  let%span s16_take'1 = "16_take.rs" 47 14 47 42
  let%span s16_take'2 = "16_take.rs" 48 91 48 93
  let%span s16_take'3 = "16_take.rs" 33 8 35 9
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Take = { t_Take__iter: t_I; t_Take__n: UInt64.t }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"16_take.rs" 32 4 32 64] (self: t_Take) (visited: Seq.seq t_Item) (o: t_Take) =
    [%#s16_take'3] UInt64.t'int self.t_Take__n = UInt64.t'int o.t_Take__n + Seq.length visited
    /\ produces self.t_Take__iter visited o.t_Take__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Take
  
  constant ab : Seq.seq t_Item
  
  constant b : t_Take
  
  constant bc : Seq.seq t_Item
  
  constant c : t_Take
  
  function produces_trans'0 [#"16_take.rs" 48 4 48 90] (a'0: t_Take) (ab'0: Seq.seq t_Item) (b'0: t_Take) (bc'0: Seq.seq t_Item) (c'0: t_Take) : ()
  
  goal vc_produces_trans: ([%#s16_take] produces'0 a ab b)
    -> ([%#s16_take'0] produces'0 b bc c)
    -> ([@expl:produces_trans ensures] [%#s16_take'1] produces'0 a (Seq.(++) ab bc) c)
end
module M_16_take__qyi12677911356865036795__next [#"16_take.rs" 54 4 54 41] (* <Take<I> as common::Iterator> *)
  let%span s16_take = "16_take.rs" 55 21 55 22
  let%span s16_take'0 = "16_take.rs" 56 22 56 23
  let%span s16_take'1 = "16_take.rs" 54 17 54 21
  let%span s16_take'2 = "16_take.rs" 54 26 54 41
  let%span s16_take'3 = "16_take.rs" 50 14 53 5
  let%span s16_take'4 = "16_take.rs" 24 8 27 9
  let%span s16_take'5 = "16_take.rs" 33 8 35 9
  let%span s16_take'6 = "16_take.rs" 1 0 27 4
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_I
  
  type t_Take = { t_Take__iter: t_I; t_Take__n: UInt64.t }
  
  predicate inv (_0: t_I)
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option = C_None | C_Some t_Item
  
  predicate invariant' (self: MutBorrow.t t_I) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_I)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_I [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    [%#s16_take'6] forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate inv'1 (_0: t_Item)
  
  predicate inv'2 (_0: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'1 a_0
        end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    [%#s16_take'6] forall args: MutBorrow.t t_I, res: t_Option [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in match res with
          | C_None -> completed self
          | C_Some v -> produces self.current (Seq.singleton v) self.final
          end
      /\ inv'2 res)
  
  let rec next (self: MutBorrow.t t_I) (return' (x: t_Option)) = {[@expl:next requires] precondition () self}
    any [ return''0 (result: t_Option) -> {postcondition_once () self result} (! return' {result}) ]
  
  predicate inv'3 (_0: t_Take)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Take [inv'3 x]. inv'3 x
      = match x with
        | {t_Take__iter = iter; t_Take__n = n} -> inv iter
        end
  
  predicate invariant''0 (self: MutBorrow.t t_Take) = [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0: MutBorrow.t t_Take)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Take [inv'4 x]. inv'4 x = invariant''0 x
  
  predicate resolve (self: MutBorrow.t t_Take) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_Take) = resolve _0
  
  predicate completed'0 [#"16_take.rs" 23 4 23 35] (self: MutBorrow.t t_Take) =
    [%#s16_take'4] UInt64.t'int (self.current).t_Take__n = 0 /\ resolve self
    \/ UInt64.t'int (self.current).t_Take__n > 0
    /\ UInt64.t'int (self.current).t_Take__n = UInt64.t'int (self.final).t_Take__n + 1
    /\ completed (MutBorrow.borrow_logic (self.current).t_Take__iter (self.final).t_Take__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
  
  predicate produces'0 [#"16_take.rs" 32 4 32 64] (self: t_Take) (visited: Seq.seq t_Item) (o: t_Take) =
    [%#s16_take'5] UInt64.t'int self.t_Take__n = UInt64.t'int o.t_Take__n + Seq.length visited
    /\ produces self.t_Take__iter visited o.t_Take__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'0 [#"16_take.rs" 54 4 54 41] (self: MutBorrow.t t_Take) (return' (x: t_Option)) =
    {[@expl:next 'self' type invariant] [%#s16_take'1] inv'4 self}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_3 <- (self'0.current).t_Take__n <> ([%#s16_take] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_3 = false} (! bb3) | br1 -> {_3} (! bb1) ] ]
    | bb1 = s0
      [ s0 = UInt64.sub {(self'0.current).t_Take__n} {[%#s16_take'0] (1: UInt64.t)}
          (fun (_ret: UInt64.t) -> [ &self'0 <- { self'0 with current = { self'0.current with t_Take__n = _ret } } ] s1)
      | s1 = {inv (self'0.current).t_Take__iter}
        MutBorrow.borrow_final <t_I> {(self'0.current).t_Take__iter} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_5 <- _ret ] -{inv _ret.final}-
            [ &self'0 <- { self'0 with current = { self'0.current with t_Take__iter = _ret.final } } ] s2)
      | s2 = next {_5} (fun (_ret: t_Option) -> [ &_0 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'4 self'0} s1 | s1 = -{resolve'0 self'0}- s2 | s2 = bb4 ]
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'4 self'0} s1
      | s1 = -{resolve'0 self'0}- s2
      | s2 = [ &_0 <- C_None ] s3
      | s3 = bb4 ]
    | bb4 = return''0 {_0} ]
    [ & _0: t_Option = Any.any_l ()
    | & self'0: MutBorrow.t t_Take = self
    | & _3: bool = Any.any_l ()
    | & _5: MutBorrow.t t_I = Any.any_l () ])
    [ return''0 (result: t_Option) -> {[@expl:next result type invariant] [%#s16_take'2] inv'2 result}
      {[@expl:next ensures] [%#s16_take'3] match result with
        | C_None -> completed'0 self
        | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
end
module M_16_take__qyi7075277913804895985__resolve_coherence__refines [#"16_take.rs" 9 9 9 16] (* <Take<I> as creusot_contracts::Resolve> *)
  let%span s16_take = "16_take.rs" 9 9 9 16
  let%span s16_take'0 = "16_take.rs" 11 4 12 16
  
  use creusot.int.UInt64
  
  type t_I
  
  type t_Take = { t_Take__iter: t_I; t_Take__n: UInt64.t }
  
  predicate resolve (_0: t_I)
  
  predicate structural_resolve (_0: t_Take) =
    match _0 with
      | {t_Take__iter = x0; t_Take__n = x1} -> resolve x0
      end
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_Take)
  
  axiom inv_axiom [@rewrite]: forall x: t_Take [inv'0 x]. inv'0 x
      = match x with
        | {t_Take__iter = iter; t_Take__n = n} -> inv iter
        end
  
  predicate resolve'0 (_0: UInt64.t) = true
  
  predicate resolve'1 [#"16_take.rs" 9 9 9 16] (self: t_Take) =
    [%#s16_take'0] resolve self.t_Take__iter /\ resolve'0 self.t_Take__n
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s16_take] forall self: t_Take. structural_resolve self /\ inv'0 self
      -> structural_resolve self /\ (forall result: (). resolve'1 self -> resolve'1 self)
end
module M_16_take__qyi12677911356865036795__next__refines [#"16_take.rs" 54 4 54 41] (* <Take<I> as common::Iterator> *)
  let%span s16_take = "16_take.rs" 54 4 54 41
  let%span s16_take'0 = "16_take.rs" 24 8 27 9
  let%span s16_take'1 = "16_take.rs" 33 8 35 9
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Take = { t_Take__iter: t_I; t_Take__n: UInt64.t }
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_Take)
  
  axiom inv_axiom [@rewrite]: forall x: t_Take [inv'0 x]. inv'0 x
      = match x with
        | {t_Take__iter = iter; t_Take__n = n} -> inv iter
        end
  
  predicate invariant' (self: MutBorrow.t t_Take) = [%#sinvariant] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_0: MutBorrow.t t_Take)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Take [inv'1 x]. inv'1 x = invariant' x
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option = C_None | C_Some t_Item
  
  predicate resolve (self: MutBorrow.t t_Take) = [%#sresolve] self.final = self.current
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate completed'0 [#"16_take.rs" 23 4 23 35] (self: MutBorrow.t t_Take) =
    [%#s16_take'0] UInt64.t'int (self.current).t_Take__n = 0 /\ resolve self
    \/ UInt64.t'int (self.current).t_Take__n > 0
    /\ UInt64.t'int (self.current).t_Take__n = UInt64.t'int (self.final).t_Take__n + 1
    /\ completed (MutBorrow.borrow_logic (self.current).t_Take__iter (self.final).t_Take__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
  
  predicate produces'0 [#"16_take.rs" 32 4 32 64] (self: t_Take) (visited: Seq.seq t_Item) (o: t_Take) =
    [%#s16_take'1] UInt64.t'int self.t_Take__n = UInt64.t'int o.t_Take__n + Seq.length visited
    /\ produces self.t_Take__iter visited o.t_Take__iter
  
  predicate inv'2 (_0: t_Item)
  
  predicate inv'3 (_0: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'3 x]. inv'3 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'2 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s16_take] forall self: MutBorrow.t t_Take. inv'1 self
      -> inv'1 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed'0 self
              | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
              end
          /\ inv'3 result
        -> match result with
            | C_None -> completed'0 self
            | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
            end
        /\ inv'3 result)
end
module M_16_take__qyi12677911356865036795__produces_refl__refines [#"16_take.rs" 41 4 41 26] (* <Take<I> as common::Iterator> *)
  let%span s16_take = "16_take.rs" 41 4 41 26
  let%span s16_take'0 = "16_take.rs" 33 8 35 9
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Take = { t_Take__iter: t_I; t_Take__n: UInt64.t }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"16_take.rs" 32 4 32 64] (self: t_Take) (visited: Seq.seq t_Item) (o: t_Take) =
    [%#s16_take'0] UInt64.t'int self.t_Take__n = UInt64.t'int o.t_Take__n + Seq.length visited
    /\ produces self.t_Take__iter visited o.t_Take__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s16_take] forall self: t_Take. forall result: (). produces'0 self (Seq.empty: Seq.seq t_Item) self
        -> produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_16_take__qyi12677911356865036795__produces_trans__refines [#"16_take.rs" 48 4 48 90] (* <Take<I> as common::Iterator> *)
  let%span s16_take = "16_take.rs" 48 4 48 90
  let%span s16_take'0 = "16_take.rs" 33 8 35 9
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Take = { t_Take__iter: t_I; t_Take__n: UInt64.t }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"16_take.rs" 32 4 32 64] (self: t_Take) (visited: Seq.seq t_Item) (o: t_Take) =
    [%#s16_take'0] UInt64.t'int self.t_Take__n = UInt64.t'int o.t_Take__n + Seq.length visited
    /\ produces self.t_Take__iter visited o.t_Take__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#s16_take] forall a: t_Take. forall ab: Seq.seq t_Item. forall b: t_Take. forall bc: Seq.seq t_Item. forall c: t_Take. produces'0 b bc c
                /\ produces'0 a ab b
              -> produces'0 b bc c
              /\ produces'0 a ab b
              /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c -> produces'0 a (Seq.(++) ab bc) c)
end
