module M_04_skip__qyi13909329693910717997__resolve_coherence [#"04_skip.rs" 10 9 10 16] (* <Skip<I> as creusot_contracts::Resolve> *)
  let%span s04_skip = "04_skip.rs" 10 9 10 16
  let%span s04_skip'0 = "04_skip.rs" 12 4 13 16
  
  use creusot.int.UInt64
  
  type t_I
  
  type t_Skip  =
    { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  predicate resolve (_0: t_I)
  
  predicate structural_resolve (_0: t_Skip) =
    match _0 with
      | {t_Skip__iter = x0 ; t_Skip__n = x1} -> resolve x0
      end
  
  predicate resolve'0 (_0: UInt64.t) =
    true
  
  predicate resolve'1 [#"04_skip.rs" 10 9 10 16] (self: t_Skip) =
    [%#s04_skip'0] resolve self.t_Skip__iter /\ resolve'0 self.t_Skip__n
  
  constant self  : t_Skip
  
  function resolve_coherence [#"04_skip.rs" 10 9 10 16] (self'0: t_Skip) : ()
  
  goal vc_resolve_coherence: ([%#s04_skip] structural_resolve self)  -> ([%#s04_skip] resolve'1 self)
end
module M_04_skip__qyi11393468722733824414__produces_refl [#"04_skip.rs" 52 4 52 26] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip = "04_skip.rs" 51 14 51 47
  let%span s04_skip'0 = "04_skip.rs" 52 27 52 29
  let%span s04_skip'1 = "04_skip.rs" 40 12 45 69
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip  =
    { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve (_0: t_Item)
  
  predicate produces'0 [#"04_skip.rs" 38 4 38 64] (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    [%#s04_skip'1] visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
    /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
    /\ (forall i: int. 0 <= i /\ i < Seq.length s  -> resolve (Seq.get s i)))
  
  constant self  : t_Skip
  
  function produces_refl'0 [#"04_skip.rs" 52 4 52 26] (self'0: t_Skip) : ()
  
  goal vc_produces_refl: [%#s04_skip] produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_04_skip__qyi11393468722733824414__produces_trans [#"04_skip.rs" 59 4 59 90] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip = "04_skip.rs" 56 15 56 32
  let%span s04_skip'0 = "04_skip.rs" 57 15 57 32
  let%span s04_skip'1 = "04_skip.rs" 58 14 58 42
  let%span s04_skip'2 = "04_skip.rs" 59 91 59 93
  let%span s04_skip'3 = "04_skip.rs" 40 12 45 69
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip  =
    { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve (_0: t_Item)
  
  predicate produces'0 [#"04_skip.rs" 38 4 38 64] (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    [%#s04_skip'3] visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
    /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
    /\ (forall i: int. 0 <= i /\ i < Seq.length s  -> resolve (Seq.get s i)))
  
  constant a  : t_Skip
  
  constant ab  : Seq.seq t_Item
  
  constant b  : t_Skip
  
  constant bc  : Seq.seq t_Item
  
  constant c  : t_Skip
  
  function produces_trans'0 [#"04_skip.rs" 59 4 59 90] (a'0: t_Skip) (ab'0: Seq.seq t_Item) (b'0: t_Skip) (bc'0: Seq.seq t_Item) (c'0: t_Skip) : ()
  
  
  goal vc_produces_trans: ([%#s04_skip] produces'0 a ab b)
   -> ([%#s04_skip'0] produces'0 b bc c)  -> ([%#s04_skip'1] produces'0 a (Seq.(++) ab bc) c)
end
module M_04_skip__qyi11393468722733824414__next [#"04_skip.rs" 65 4 65 41] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip = "04_skip.rs" 66 23 66 41
  let%span s04_skip'0 = "04_skip.rs" 68 26 68 52
  let%span s04_skip'1 = "04_skip.rs" 74 20 74 35
  let%span s04_skip'2 = "04_skip.rs" 73 20 73 82
  let%span s04_skip'3 = "04_skip.rs" 70 8 70 31
  let%span s04_skip'4 = "04_skip.rs" 71 20 71 53
  let%span s04_skip'5 = "04_skip.rs" 70 20 70 29
  let%span s04_skip'6 = "04_skip.rs" 77 20 77 21
  let%span s04_skip'7 = "04_skip.rs" 81 26 81 73
  let%span s04_skip'8 = "04_skip.rs" 82 21 82 22
  let%span s04_skip'9 = "04_skip.rs" 65 17 65 21
  let%span s04_skip'10 = "04_skip.rs" 65 26 65 41
  let%span s04_skip'11 = "04_skip.rs" 61 14 64 5
  let%span s04_skip'12 = "04_skip.rs" 26 12 32 37
  let%span s04_skip'13 = "04_skip.rs" 40 12 45 69
  let%span s04_skip'14 = "04_skip.rs" 1 0 27 4
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span smem = "../../../creusot-contracts/src/std/mem.rs" 21 22 21 37
  let%span smem'0 = "../../../creusot-contracts/src/std/mem.rs" 22 22 22 57
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 96 8 96 33
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 30 26 30 41
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 158 14 158 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 163 14 163 101
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 168 14 168 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_I
  
  type t_Skip  =
    { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  predicate postcondition_once (self: ()) (args: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  predicate resolve (_0: ()) =
    true
  
  predicate postcondition_mut (self: ()) (args: ()) (result_state: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  function fn_mut_once (self: ()) (args: ()) (res: UInt64.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: (), res: UInt64.t. [%#sops'8] postcondition_once self args res
  = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) =
    true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
   -> ([%#sops'6] hist_inv b c)  -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: ()) (res_state: ()) (res: UInt64.t) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: (), args: (), res_state: (), res: UInt64.t. ([%#sops'2] postcondition_mut self args res_state res)
   -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  function fn_once (self: ()) (args: ()) (res: UInt64.t) : ()
  
  axiom fn_once_spec: forall self: (), args: (), res: UInt64.t. [%#sops'0] postcondition_once self args res
  = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: ()) (res_state: ()) (res: UInt64.t) : ()
  
  axiom fn_mut_spec: forall self: (), args: (), res_state: (), res: UInt64.t. [%#sops] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  let rec default (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#snum] result = (0: UInt64.t)} (! return' {result}) ]
  
  
  let rec take (dest:MutBorrow.t UInt64.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#smem] result = dest.current}
      {[%#smem'0] postcondition () () dest.final}
      (! return' {result}) ]
  
  
  predicate resolve'0 (self: MutBorrow.t UInt64.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t UInt64.t) =
    resolve'0 _0
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve'2 (_0: t_Item)
  
  function index_logic [@inline:trivial] (self: Seq.seq t_Item) (ix: int) : t_Item =
    [%#sindex] Seq.get self ix
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_Skip)
  
  axiom inv_axiom [@rewrite]: forall x: t_Skip [inv'0 x]. inv'0 x
  = match x with
    | {t_Skip__iter = iter ; t_Skip__n = n} -> inv iter
    end
  
  predicate invariant' (self: MutBorrow.t t_Skip) =
    [%#sinvariant] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_0: MutBorrow.t t_Skip)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Skip [inv'1 x]. inv'1 x = invariant' x
  
  type t_Option  =
    | C_None
    | C_Some t_Item
  
  predicate invariant''0 (self: MutBorrow.t t_I) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'2 (_0: MutBorrow.t t_I)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_I [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef: [%#s04_skip'14] forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'2 self)
   -> precondition () args
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate inv'3 (_0: t_Item)
  
  predicate inv'4 (_0: t_Option)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option [inv'4 x]. inv'4 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'3 a_0
    end
  
  predicate postcondition_once'0 (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef: [%#s04_skip'14] forall args: MutBorrow.t t_I, res: t_Option [postcondition_once'0 () args res]. postcondition_once'0 () args res
   -> (let self = args in match res with
    | C_None -> completed self
    | C_Some v -> produces self.current (Seq.singleton v) self.final
    end
  /\ inv'4 res)
  
  let rec next (self:MutBorrow.t t_I) (return'  (x:t_Option))= {[@expl:next requires] precondition () self}
    any [ return''0 (result:t_Option)-> {postcondition_once'0 () self result} (! return' {result}) ] 
  
  let rec v_Some (input:t_Option) (ret  (field_0:t_Item))= any
    [ good (field_0:t_Item)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  predicate resolve'3 (self: MutBorrow.t t_Skip) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0: MutBorrow.t t_Skip) =
    resolve'3 _0
  
  predicate completed'0 [#"04_skip.rs" 24 4 24 35] (self: MutBorrow.t t_Skip) =
    [%#s04_skip'12] UInt64.t'int (self.final).t_Skip__n = 0
    /\ (exists s: Seq.seq t_Item, i: MutBorrow.t t_I. Seq.length s <= UInt64.t'int (self.current).t_Skip__n
    /\ produces (self.current).t_Skip__iter s i.current
    /\ (forall i'0: int. 0 <= i'0 /\ i'0 < Seq.length s  -> resolve'2 (Seq.get s i'0))
    /\ completed i /\ i.final = (self.final).t_Skip__iter)
  
  predicate produces'0 [#"04_skip.rs" 38 4 38 64] (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    [%#s04_skip'13] visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
    /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
    /\ (forall i: int. 0 <= i /\ i < Seq.length s  -> resolve'2 (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  let rec next'0[#"04_skip.rs" 65 4 65 41] (self:MutBorrow.t t_Skip) (return'  (x:t_Option))= {[@expl:next 'self' type invariant] [%#s04_skip'9] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#s04_skip] self'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final
          <UInt64.t>
          {(self'0.current).t_Skip__n}
          {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
          (fun (_ret:MutBorrow.t UInt64.t) ->
             [ &_7 <- _ret ] 
             [ &self'0 <- { self'0 with current = { self'0.current with t_Skip__n = _ret.final } } ] 
            s1)
      | s1 = MutBorrow.borrow_final <UInt64.t> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret:MutBorrow.t UInt64.t) ->  [ &_6 <- _ret ]  [ &_7 <- { _7 with current = _ret.final } ] s2)
      | s2 = take {_6} (fun (_ret:UInt64.t) ->  [ &n <- _ret ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 = -{resolve'1 _7}- s1 | s1 =  [ &skipped <- [%#s04_skip'0] Seq.empty: Seq.seq t_Item ] s2 | s2 = bb3 ]
    
    | bb3 = s0 [ s0 =  [ &old_4_0 <- self'0 ] s1 | s1 = bb4 ] 
    | bb4 = bb4'0
      [ bb4'0 = {[@expl:mut invariant] old_4_0.final = self'0.final}
        {[@expl:loop invariant #0] [%#s04_skip'5] inv'1 self'0}
        {[@expl:loop invariant #1] [%#s04_skip'4] Seq.length skipped + UInt64.t'int n
        = UInt64.t'int (old_self.current).t_Skip__n}
        {[@expl:loop invariant #2] [%#s04_skip'3] produces (old_self.current).t_Skip__iter skipped (self'0.current).t_Skip__iter}
        {[@expl:loop invariant #3] [%#s04_skip'2] forall i: int. 0 <= i /\ i < Seq.length skipped
         -> resolve'2 (index_logic skipped i)}
        {[@expl:loop invariant #4] [%#s04_skip'1] UInt64.t'int (self'0.current).t_Skip__n = 0}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = {inv (self'0.current).t_Skip__iter}
            MutBorrow.borrow_mut <t_I> {(self'0.current).t_Skip__iter}
              (fun (_ret:MutBorrow.t t_I) ->
                 [ &_19 <- _ret ] 
                -{inv _ret.final}-
                 [ &self'0 <- { self'0 with current = { self'0.current with t_Skip__iter = _ret.final } } ] 
                s1)
          | s1 = next {_19} (fun (_ret:t_Option) ->  [ &r <- _ret ] s2)
          | s2 = bb6 ]
        
        | bb6 = s0
          [ s0 =  [ &_21 <- n = ([%#s04_skip'6] (0: UInt64.t)) ] s1
          | s1 = any [ br0 -> {_21 = false} (! bb8) | br1 -> {_21} (! bb7) ]  ]
        
        | bb8 = any [ br0 -> {r = C_None} (! bb9) | br1 (x0:t_Item)-> {r = C_Some x0} (! bb11) ] 
        | bb11 = s0
          [ s0 = v_Some {r} (fun (r0:t_Item) ->  [ &x <- r0 ] s1)
          | s1 = {[@expl:type invariant] inv'3 x} s2
          | s2 = -{resolve'2 x}- s3
          | s3 =  [ &_26 <- [%#s04_skip'7] Seq.(++) skipped (Seq.singleton x) ] s4
          | s4 = bb12 ]
        
        | bb12 = s0
          [ s0 =  [ &skipped <- _26 ] s1
          | s1 = UInt64.sub {n} {[%#s04_skip'8] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &n <- _ret ] s2)
          | s2 = bb4'0 ]
         ]
       ]
    
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 self'0} s1
      | s1 = -{resolve'4 self'0}- s2
      | s2 =  [ &_0 <- r ] s3
      | s3 = bb16 ]
    
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'1 self'0} s1
      | s1 = -{resolve'4 self'0}- s2
      | s2 =  [ &_0 <- r ] s3
      | s3 = bb16 ]
    
    | bb16 = return''0 {_0} ]
    )
    [ & _0: t_Option = Any.any_l ()
    | & self'0: MutBorrow.t t_Skip = self
    | & old_self: MutBorrow.t t_Skip = Any.any_l ()
    | & n: UInt64.t = Any.any_l ()
    | & _6: MutBorrow.t UInt64.t = Any.any_l ()
    | & _7: MutBorrow.t UInt64.t = Any.any_l ()
    | & skipped: Seq.seq t_Item = Any.any_l ()
    | & r: t_Option = Any.any_l ()
    | & _19: MutBorrow.t t_I = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & x: t_Item = Any.any_l ()
    | & _26: Seq.seq t_Item = Any.any_l ()
    | & old_4_0: MutBorrow.t t_Skip = Any.any_l () ]
    
    [ return''0 (result:t_Option)-> {[@expl:next result type invariant] [%#s04_skip'10] inv'4 result}
      {[@expl:next ensures] [%#s04_skip'11] match result with
        | C_None -> completed'0 self
        | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]

end
module M_04_skip__qyi13909329693910717997__resolve_coherence__refines [#"04_skip.rs" 10 9 10 16] (* <Skip<I> as creusot_contracts::Resolve> *)
  let%span s04_skip = "04_skip.rs" 10 9 10 16
  let%span s04_skip'0 = "04_skip.rs" 12 4 13 16
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.int.UInt64
  
  type t_I
  
  type t_Skip  =
    { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  predicate resolve (_0: t_I)
  
  predicate structural_resolve (_0: t_Skip) =
    match _0 with
      | {t_Skip__iter = x0 ; t_Skip__n = x1} -> resolve x0
      end
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_Skip)
  
  axiom inv_axiom [@rewrite]: forall x: t_Skip [inv'0 x]. inv'0 x
  = match x with
    | {t_Skip__iter = iter ; t_Skip__n = n} -> inv iter
    end
  
  predicate invariant' (self: t_Skip) =
    [%#sinvariant] inv'0 self
  
  predicate inv'1 (_0: t_Skip)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Skip [inv'1 x]. inv'1 x = invariant' x
  
  predicate resolve'0 (_0: UInt64.t) =
    true
  
  predicate resolve'1 [#"04_skip.rs" 10 9 10 16] (self: t_Skip) =
    [%#s04_skip'0] resolve self.t_Skip__iter /\ resolve'0 self.t_Skip__n
  
  goal refines: [%#s04_skip] forall self: t_Skip. structural_resolve self /\ inv'1 self
   -> structural_resolve self /\ (forall result: (). resolve'1 self  -> resolve'1 self)
end
module M_04_skip__qyi11393468722733824414__next__refines [#"04_skip.rs" 65 4 65 41] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip = "04_skip.rs" 65 4 65 41
  let%span s04_skip'0 = "04_skip.rs" 26 12 32 37
  let%span s04_skip'1 = "04_skip.rs" 40 12 45 69
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip  =
    { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_Skip)
  
  axiom inv_axiom [@rewrite]: forall x: t_Skip [inv'0 x]. inv'0 x
  = match x with
    | {t_Skip__iter = iter ; t_Skip__n = n} -> inv iter
    end
  
  predicate invariant' (self: MutBorrow.t t_Skip) =
    [%#sinvariant] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_0: MutBorrow.t t_Skip)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Skip [inv'1 x]. inv'1 x = invariant' x
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option  =
    | C_None
    | C_Some t_Item
  
  predicate resolve (_0: t_Item)
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate completed'0 [#"04_skip.rs" 24 4 24 35] (self: MutBorrow.t t_Skip) =
    [%#s04_skip'0] UInt64.t'int (self.final).t_Skip__n = 0
    /\ (exists s: Seq.seq t_Item, i: MutBorrow.t t_I. Seq.length s <= UInt64.t'int (self.current).t_Skip__n
    /\ produces (self.current).t_Skip__iter s i.current
    /\ (forall i'0: int. 0 <= i'0 /\ i'0 < Seq.length s  -> resolve (Seq.get s i'0))
    /\ completed i /\ i.final = (self.final).t_Skip__iter)
  
  predicate produces'0 [#"04_skip.rs" 38 4 38 64] (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    [%#s04_skip'1] visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
    /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
    /\ (forall i: int. 0 <= i /\ i < Seq.length s  -> resolve (Seq.get s i)))
  
  predicate inv'2 (_0: t_Item)
  
  predicate inv'3 (_0: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'3 x]. inv'3 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'2 a_0
    end
  
  goal refines: [%#s04_skip] forall self: MutBorrow.t t_Skip. inv'1 self
   -> inv'1 self
  /\ (forall result: t_Option. match result with
    | C_None -> completed'0 self
    | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'3 result
   -> match result with
    | C_None -> completed'0 self
    | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'3 result)
end
module M_04_skip__qyi11393468722733824414__produces_refl__refines [#"04_skip.rs" 52 4 52 26] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip = "04_skip.rs" 52 4 52 26
  let%span s04_skip'0 = "04_skip.rs" 40 12 45 69
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip  =
    { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve (_0: t_Item)
  
  predicate produces'0 [#"04_skip.rs" 38 4 38 64] (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    [%#s04_skip'0] visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
    /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
    /\ (forall i: int. 0 <= i /\ i < Seq.length s  -> resolve (Seq.get s i)))
  
  goal refines: [%#s04_skip] forall self: t_Skip. forall result: (). produces'0 self (Seq.empty: Seq.seq t_Item) self
   -> produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_04_skip__qyi11393468722733824414__produces_trans__refines [#"04_skip.rs" 59 4 59 90] (* <Skip<I> as common::Iterator> *)
  let%span s04_skip = "04_skip.rs" 59 4 59 90
  let%span s04_skip'0 = "04_skip.rs" 40 12 45 69
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip  =
    { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve (_0: t_Item)
  
  predicate produces'0 [#"04_skip.rs" 38 4 38 64] (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    [%#s04_skip'0] visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
    /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
    /\ (forall i: int. 0 <= i /\ i < Seq.length s  -> resolve (Seq.get s i)))
  
  goal refines: [%#s04_skip] forall a: t_Skip. forall ab: Seq.seq t_Item. forall b: t_Skip. forall bc: Seq.seq t_Item. forall c: t_Skip. produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
