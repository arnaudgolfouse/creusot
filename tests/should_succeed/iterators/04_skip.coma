module M_impl_Iterator_for_Skip_I__produces_refl (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip_I = { iter: t_I; n: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve_Item (_1: t_Item)
  
  predicate produces_Skip_I (self: t_Skip_I) (visited: Seq.seq t_Item) (o: t_Skip_I) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.n
      /\ produces_I self.iter (Seq.(++) s visited) o.iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve_Item (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Skip_I
  
  function produces_refl_Skip_I (self: t_Skip_I) : ()
  
  goal vc_produces_refl_Skip_I: [@expl:produces_refl ensures] produces_Skip_I self (Seq.empty: Seq.seq t_Item) self
end
module M_impl_Iterator_for_Skip_I__produces_trans (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip_I = { iter: t_I; n: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve_Item (_1: t_Item)
  
  predicate produces_Skip_I (self: t_Skip_I) (visited: Seq.seq t_Item) (o: t_Skip_I) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.n
      /\ produces_I self.iter (Seq.(++) s visited) o.iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve_Item (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Skip_I
  
  constant ab : Seq.seq t_Item
  
  constant b : t_Skip_I
  
  constant bc : Seq.seq t_Item
  
  constant c : t_Skip_I
  
  function produces_trans_Skip_I (a: t_Skip_I) (ab: Seq.seq t_Item) (b: t_Skip_I) (bc: Seq.seq t_Item) (c: t_Skip_I) : ()
  
  goal vc_produces_trans_Skip_I: produces_Skip_I a ab b
    -> produces_Skip_I b bc c -> ([@expl:produces_trans ensures] produces_Skip_I a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Skip_I__next (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_I
  
  type t_Skip_I = { iter: t_I; n: UInt64.t }
  
  predicate postcondition_once_default [@inline:trivial] (self: ()) (args: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  meta "rewrite_def" predicate postcondition_once_default
  
  predicate resolve_default [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default
  
  predicate postcondition_mut_default [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  meta "rewrite_def" predicate postcondition_mut_default
  
  function fn_mut_once_default (self: ()) (args: ()) (res: UInt64.t) : ()
  
  axiom fn_mut_once_default_spec: forall self: (), args: (), res: UInt64.t. postcondition_once_default self args res
      = (exists res_state: (). postcondition_mut_default self args res_state res /\ resolve_default res_state)
  
  predicate hist_inv_default [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default
  
  function hist_inv_trans_default (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec: forall self: (), b: (), c: (). hist_inv_default self b
      -> hist_inv_default b c -> hist_inv_default self c
  
  function hist_inv_refl_default (self: ()) : ()
  
  axiom hist_inv_refl_default_spec: forall self: (). hist_inv_default self self
  
  function postcondition_mut_hist_inv_default (self: ()) (args: ()) (res_state: ()) (res: UInt64.t) : ()
  
  axiom postcondition_mut_hist_inv_default_spec:
    forall self: (), args: (), res_state: (), res: UInt64.t. postcondition_mut_default self args res_state res
      -> hist_inv_default self res_state
  
  function fn_hist_inv_default (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec: forall self: (), res_state: (). hist_inv_default self res_state = (self = res_state)
  
  predicate postcondition_default [@inline:trivial] (self: ()) (args: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  meta "rewrite_def" predicate postcondition_default
  
  function fn_once_default (self: ()) (args: ()) (res: UInt64.t) : ()
  
  axiom fn_once_default_spec: forall self: (), args: (), res: UInt64.t. postcondition_once_default self args res
      = (postcondition_default self args res /\ resolve_default self)
  
  function fn_mut_default (self: ()) (args: ()) (res_state: ()) (res: UInt64.t) : ()
  
  axiom fn_mut_default_spec:
    forall self: (), args: (), res_state: (), res: UInt64.t. postcondition_mut_default self args res_state res
      = (postcondition_default self args res /\ self = res_state)
  
  let rec default_usize (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {result = (0: UInt64.t)} (! return {result}) ]
  
  let rec take_usize (dest: MutBorrow.t UInt64.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {result = dest.current}
      {postcondition_default () () dest.final}
      (! return {result}) ]
  
  predicate resolve_ref_usize [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_usize
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve_Item (_1: t_Item)
  
  predicate inv_I (_1: t_I)
  
  predicate inv_Skip_I (_1: t_Skip_I)
  
  axiom inv_axiom [@rewrite]: forall x: t_Skip_I [inv_Skip_I x]. inv_Skip_I x = inv_I x.iter
  
  predicate invariant_ref_Skip_I [@inline:trivial] (self: MutBorrow.t t_Skip_I) =
    inv_Skip_I self.current /\ inv_Skip_I self.final
  
  meta "rewrite_def" predicate invariant_ref_Skip_I
  
  predicate inv_ref_Skip_I [@inline:trivial] (_1: MutBorrow.t t_Skip_I) = invariant_ref_Skip_I _1
  
  meta "rewrite_def" predicate inv_ref_Skip_I
  
  type t_Option_Item = None | Some t_Item
  
  predicate invariant_ref_I [@inline:trivial] (self: MutBorrow.t t_I) = inv_I self.current /\ inv_I self.final
  
  meta "rewrite_def" predicate invariant_ref_I
  
  predicate inv_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = invariant_ref_I _1
  
  meta "rewrite_def" predicate inv_ref_I
  
  predicate precondition_next (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    forall args: MutBorrow.t t_I [precondition_next () args]. (let self = args in inv_ref_I self)
      -> precondition_next () args
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate inv_Item (_1: t_Item)
  
  predicate inv_Option_Item (_1: t_Option_Item)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_Item [inv_Option_Item x]. inv_Option_Item x
      = match x with
        | None -> true
        | Some f0 -> inv_Item f0
        end
  
  predicate postcondition_once_next (self: ()) (args: MutBorrow.t t_I) (result: t_Option_Item)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option_Item [postcondition_once_next () args res]. postcondition_once_next () args res
      -> (let self = args in match res with
          | None -> completed_I self
          | Some v -> produces_I self.current (Seq.singleton v) self.final
          end
      /\ inv_Option_Item res)
  
  let rec next_I (self: MutBorrow.t t_I) (return (x: t_Option_Item)) = {[@expl:next requires] precondition_next () self}
    any [ return (result: t_Option_Item) -> {postcondition_once_next () self result} (! return {result}) ]
  
  let rec elim_Some (input: t_Option_Item) (ret (f0: t_Item)) = any
    [ good (f0: t_Item) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: t_Item [Some f0: t_Option_Item]. Some f0 <> input} (! {false} any) ]
  
  predicate resolve_ref_Skip_I [@inline:trivial] (_1: MutBorrow.t t_Skip_I) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Skip_I
  
  predicate completed_Skip_I (self: MutBorrow.t t_Skip_I) =
    UInt64.t'int self.final.n = 0
    /\ (exists s: Seq.seq t_Item, i: MutBorrow.t t_I. Seq.length s <= UInt64.t'int self.current.n
      /\ produces_I self.current.iter s i.current
      /\ (forall i'0: int. 0 <= i'0 /\ i'0 < Seq.length s -> resolve_Item (Seq.get s i'0))
      /\ completed_I i /\ i.final = self.final.iter)
  
  predicate produces_Skip_I (self: t_Skip_I) (visited: Seq.seq t_Item) (o: t_Skip_I) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.n
      /\ produces_I self.iter (Seq.(++) s visited) o.iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve_Item (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_Skip_I (self: MutBorrow.t t_Skip_I) (return (x: t_Option_Item)) =
    {[@expl:next 'self' type invariant] inv_ref_Skip_I self}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_self <- self ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <UInt64.t> {self.current.n} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
          (fun (_ret: MutBorrow.t UInt64.t) ->
            [ &_7 <- _ret ] [ &self <- { self with current = { self.current with n = _ret.final } } ] s1)
      | s1 = MutBorrow.borrow_final <UInt64.t> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &_6 <- _ret ] [ &_7 <- { _7 with current = _ret.final } ] s2)
      | s2 = take_usize {_6} (fun (_ret: UInt64.t) -> [ &n'0 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = -{resolve_ref_usize _7}- s1 | s1 = [ &skipped <- Seq.empty: Seq.seq t_Item ] s2 | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &old_4_0 <- self ] s1 | s1 = bb4 ]
    | bb4 = bb4
      [ bb4 = {[@expl:mut invariant] old_4_0.final = self.final}
        {[@expl:loop invariant #0] inv_ref_Skip_I self}
        {[@expl:loop invariant #1] Seq.length skipped + UInt64.t'int n'0 = UInt64.t'int old_self.current.n}
        {[@expl:loop invariant #2] produces_I old_self.current.iter skipped self.current.iter}
        {[@expl:loop invariant #3] forall i: int. 0 <= i /\ i < Seq.length skipped -> resolve_Item (Seq.get skipped i)}
        {[@expl:loop invariant #4] UInt64.t'int self.current.n = 0}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = {inv_I self.current.iter}
            MutBorrow.borrow_mut <t_I> {self.current.iter}
              (fun (_ret: MutBorrow.t t_I) ->
                [ &_19 <- _ret ] -{inv_I _ret.final}-
                [ &self <- { self with current = { self.current with iter = _ret.final } } ] s1)
          | s1 = next_I {_19} (fun (_ret: t_Option_Item) -> [ &r <- _ret ] s2)
          | s2 = bb6 ]
        | bb6 = s0
          [ s0 = [ &_21 <- n'0 = (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_21 = false} (! bb8) | br1 -> {_21} (! bb7) ] ]
        | bb8 = any [ br0 -> {r = None} (! bb9) | br1 (x0: t_Item) -> {r = Some x0} (! bb11) ]
        | bb11 = s0
          [ s0 = elim_Some {r} (fun (r0: t_Item) -> [ &x <- r0 ] s1)
          | s1 = {[@expl:type invariant] inv_Item x} s2
          | s2 = -{resolve_Item x}- s3
          | s3 = [ &_26 <- Seq.(++) skipped (Seq.singleton x) ] s4
          | s4 = bb12 ]
        | bb12 = s0
          [ s0 = [ &skipped <- _26 ] s1
          | s1 = UInt64.sub {n'0} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &n'0 <- _ret ] s2)
          | s2 = bb4 ] ] ]
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Skip_I self} s1
      | s1 = -{resolve_ref_Skip_I self}- s2
      | s2 = [ &_0 <- r ] s3
      | s3 = bb16 ]
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Skip_I self} s1
      | s1 = -{resolve_ref_Skip_I self}- s2
      | s2 = [ &_0 <- r ] s3
      | s3 = bb16 ]
    | bb16 = return {_0} ]
    [ & _0: t_Option_Item = Any.any_l ()
    | & self: MutBorrow.t t_Skip_I = self
    | & old_self: MutBorrow.t t_Skip_I = Any.any_l ()
    | & n'0: UInt64.t = Any.any_l ()
    | & _6: MutBorrow.t UInt64.t = Any.any_l ()
    | & _7: MutBorrow.t UInt64.t = Any.any_l ()
    | & skipped: Seq.seq t_Item = Any.any_l ()
    | & r: t_Option_Item = Any.any_l ()
    | & _19: MutBorrow.t t_I = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & x: t_Item = Any.any_l ()
    | & _26: Seq.seq t_Item = Any.any_l ()
    | & old_4_0: MutBorrow.t t_Skip_I = Any.any_l () ])
    [ return (result: t_Option_Item) -> {[@expl:next result type invariant] inv_Option_Item result}
      {[@expl:next ensures] match result with
        | None -> completed_Skip_I self
        | Some v -> produces_Skip_I self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_impl_Iterator_for_Skip_I__next__refines (* <Skip<I> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip_I = { iter: t_I; n: UInt64.t }
  
  predicate inv_I (_1: t_I)
  
  predicate inv_Skip_I (_1: t_Skip_I)
  
  axiom inv_axiom [@rewrite]: forall x: t_Skip_I [inv_Skip_I x]. inv_Skip_I x = inv_I x.iter
  
  predicate invariant_ref_Skip_I [@inline:trivial] (self: MutBorrow.t t_Skip_I) =
    inv_Skip_I self.current /\ inv_Skip_I self.final
  
  meta "rewrite_def" predicate invariant_ref_Skip_I
  
  predicate inv_ref_Skip_I [@inline:trivial] (_1: MutBorrow.t t_Skip_I) = invariant_ref_Skip_I _1
  
  meta "rewrite_def" predicate inv_ref_Skip_I
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option_Item = None | Some t_Item
  
  predicate resolve_Item (_1: t_Item)
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate completed_Skip_I (self: MutBorrow.t t_Skip_I) =
    UInt64.t'int self.final.n = 0
    /\ (exists s: Seq.seq t_Item, i: MutBorrow.t t_I. Seq.length s <= UInt64.t'int self.current.n
      /\ produces_I self.current.iter s i.current
      /\ (forall i'0: int. 0 <= i'0 /\ i'0 < Seq.length s -> resolve_Item (Seq.get s i'0))
      /\ completed_I i /\ i.final = self.final.iter)
  
  predicate produces_Skip_I (self: t_Skip_I) (visited: Seq.seq t_Item) (o: t_Skip_I) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.n
      /\ produces_I self.iter (Seq.(++) s visited) o.iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve_Item (Seq.get s i)))
  
  predicate inv_Item (_1: t_Item)
  
  predicate inv_Option_Item (_1: t_Option_Item)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_Item [inv_Option_Item x]. inv_Option_Item x
      = match x with
        | None -> true
        | Some f0 -> inv_Item f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Skip_I. inv_ref_Skip_I self
      -> inv_ref_Skip_I self
      /\ (forall result: t_Option_Item. match result with
              | None -> completed_Skip_I self
              | Some v -> produces_Skip_I self.current (Seq.singleton v) self.final
              end
          /\ inv_Option_Item result
        -> match result with
            | None -> completed_Skip_I self
            | Some v -> produces_Skip_I self.current (Seq.singleton v) self.final
            end
        /\ inv_Option_Item result)
end
module M_impl_Iterator_for_Skip_I__produces_refl__refines (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip_I = { iter: t_I; n: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve_Item (_1: t_Item)
  
  predicate produces_Skip_I (self: t_Skip_I) (visited: Seq.seq t_Item) (o: t_Skip_I) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.n
      /\ produces_I self.iter (Seq.(++) s visited) o.iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve_Item (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Skip_I. forall result: (). produces_Skip_I self (Seq.empty: Seq.seq t_Item) self
        -> produces_Skip_I self (Seq.empty: Seq.seq t_Item) self
end
module M_impl_Iterator_for_Skip_I__produces_trans__refines (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip_I = { iter: t_I; n: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve_Item (_1: t_Item)
  
  predicate produces_Skip_I (self: t_Skip_I) (visited: Seq.seq t_Item) (o: t_Skip_I) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.n
      /\ produces_I self.iter (Seq.(++) s visited) o.iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve_Item (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Skip_I. forall ab: Seq.seq t_Item. forall b: t_Skip_I. forall bc: Seq.seq t_Item. forall c: t_Skip_I. produces_Skip_I b bc c
                /\ produces_Skip_I a ab b
              -> produces_Skip_I b bc c
              /\ produces_Skip_I a ab b
              /\ (forall result: (). produces_Skip_I a (Seq.(++) ab bc) c -> produces_Skip_I a (Seq.(++) ab bc) c)
end
