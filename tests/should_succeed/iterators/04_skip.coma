module M_04_skip__qyi13909329693910717997__resolve_coherence (* <Skip<I> as creusot_contracts::Resolve> *)
  use creusot.int.UInt64
  
  type t_I
  
  type t_Skip = { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  predicate resolve (_1: t_I)
  
  predicate structural_resolve (_1: t_Skip) =
    match _1 with
      | {t_Skip__iter = x0; t_Skip__n = x1} -> resolve x0
      end
  
  predicate resolve'0 [@inline:trivial] (_1: UInt64.t) = true
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 (self: t_Skip) = resolve self.t_Skip__iter /\ resolve'0 self.t_Skip__n
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Skip
  
  function resolve_coherence (self: t_Skip) : ()
  
  goal vc_resolve_coherence: structural_resolve self -> ([@expl:resolve_coherence ensures] resolve'1 self)
end
module M_04_skip__qyi11393468722733824414__produces_refl (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip = { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve (_1: t_Item)
  
  predicate produces'0 (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
      /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Skip
  
  function produces_refl'0 (self: t_Skip) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_04_skip__qyi11393468722733824414__produces_trans (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip = { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve (_1: t_Item)
  
  predicate produces'0 (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
      /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Skip
  
  constant ab : Seq.seq t_Item
  
  constant b : t_Skip
  
  constant bc : Seq.seq t_Item
  
  constant c : t_Skip
  
  function produces_trans'0 (a: t_Skip) (ab: Seq.seq t_Item) (b: t_Skip) (bc: Seq.seq t_Item) (c: t_Skip) : ()
  
  goal vc_produces_trans: produces'0 a ab b
    -> produces'0 b bc c -> ([@expl:produces_trans ensures] produces'0 a (Seq.(++) ab bc) c)
end
module M_04_skip__qyi11393468722733824414__next (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_I
  
  type t_Skip = { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: ()) (res: UInt64.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: (), res: UInt64.t. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: ()) (res_state: ()) (res: UInt64.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: (), res_state: (), res: UInt64.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: ()) (args: ()) (result: UInt64.t) =
    let () = args in result = (0: UInt64.t)
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: ()) (args: ()) (res: UInt64.t) : ()
  
  axiom fn_once_spec: forall self: (), args: (), res: UInt64.t. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: ()) (res_state: ()) (res: UInt64.t) : ()
  
  axiom fn_mut_spec: forall self: (), args: (), res_state: (), res: UInt64.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec default (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {result = (0: UInt64.t)} (! return {result}) ]
  
  let rec take (dest: MutBorrow.t UInt64.t) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {result = dest.current} {postcondition () () dest.final} (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (self: MutBorrow.t UInt64.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t UInt64.t) = resolve'0 _1
  
  meta "rewrite_def" predicate resolve'1
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve'2 (_1: t_Item)
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_Skip)
  
  axiom inv_axiom [@rewrite]: forall x: t_Skip [inv'0 x]. inv'0 x
      = match x with
        | {t_Skip__iter = iter; t_Skip__n = n} -> inv iter
        end
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Skip) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 (_1: MutBorrow.t t_Skip)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Skip [inv'1 x]. inv'1 x = invariant' x
  
  type t_Option = C_None | C_Some t_Item
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_I) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 (_1: MutBorrow.t t_I)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_I [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef: forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'2 self)
      -> precondition () args
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate inv'3 (_1: t_Item)
  
  predicate inv'4 (_1: t_Option)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option [inv'4 x]. inv'4 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'3 a_0
        end
  
  predicate postcondition_once'0 (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let self = args in match res with
          | C_None -> completed self
          | C_Some v -> produces self.current (Seq.singleton v) self.final
          end
      /\ inv'4 res)
  
  let rec next (self: MutBorrow.t t_I) (return (x: t_Option)) = {[@expl:next requires] precondition () self}
    any [ return (result: t_Option) -> {postcondition_once'0 () self result} (! return {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: t_Item)) = any
    [ good (field_0: t_Item) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_Skip) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_1: MutBorrow.t t_Skip) = resolve'3 _1
  
  meta "rewrite_def" predicate resolve'4
  
  predicate completed'0 (self: MutBorrow.t t_Skip) =
    UInt64.t'int self.final.t_Skip__n = 0
    /\ (exists s: Seq.seq t_Item, i: MutBorrow.t t_I. Seq.length s <= UInt64.t'int self.current.t_Skip__n
      /\ produces self.current.t_Skip__iter s i.current
      /\ (forall i'0: int. 0 <= i'0 /\ i'0 < Seq.length s -> resolve'2 (Seq.get s i'0))
      /\ completed i /\ i.final = self.final.t_Skip__iter)
  
  predicate produces'0 (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
      /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve'2 (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'0 (self: MutBorrow.t t_Skip) (return (x: t_Option)) = {[@expl:next 'self' type invariant] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_self <- self ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <UInt64.t> {self.current.t_Skip__n} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
          (fun (_ret: MutBorrow.t UInt64.t) ->
            [ &_7 <- _ret ] [ &self <- { self with current = { self.current with t_Skip__n = _ret.final } } ] s1)
      | s1 = MutBorrow.borrow_final <UInt64.t> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &_6 <- _ret ] [ &_7 <- { _7 with current = _ret.final } ] s2)
      | s2 = take {_6} (fun (_ret: UInt64.t) -> [ &n <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = -{resolve'1 _7}- s1 | s1 = [ &skipped <- Seq.empty: Seq.seq t_Item ] s2 | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &old_4_0 <- self ] s1 | s1 = bb4 ]
    | bb4 = bb4
      [ bb4 = {[@expl:mut invariant] old_4_0.final = self.final}
        {[@expl:loop invariant #0] inv'1 self}
        {[@expl:loop invariant #1] Seq.length skipped + UInt64.t'int n = UInt64.t'int old_self.current.t_Skip__n}
        {[@expl:loop invariant #2] produces old_self.current.t_Skip__iter skipped self.current.t_Skip__iter}
        {[@expl:loop invariant #3] forall i: int. 0 <= i /\ i < Seq.length skipped -> resolve'2 (Seq.get skipped i)}
        {[@expl:loop invariant #4] UInt64.t'int self.current.t_Skip__n = 0}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = {inv self.current.t_Skip__iter}
            MutBorrow.borrow_mut <t_I> {self.current.t_Skip__iter}
              (fun (_ret: MutBorrow.t t_I) ->
                [ &_19 <- _ret ] -{inv _ret.final}-
                [ &self <- { self with current = { self.current with t_Skip__iter = _ret.final } } ] s1)
          | s1 = next {_19} (fun (_ret: t_Option) -> [ &r <- _ret ] s2)
          | s2 = bb6 ]
        | bb6 = s0
          [ s0 = [ &_21 <- n = (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_21 = false} (! bb8) | br1 -> {_21} (! bb7) ] ]
        | bb8 = any [ br0 -> {r = C_None} (! bb9) | br1 (x0: t_Item) -> {r = C_Some x0} (! bb11) ]
        | bb11 = s0
          [ s0 = v_Some {r} (fun (r0: t_Item) -> [ &x <- r0 ] s1)
          | s1 = {[@expl:type invariant] inv'3 x} s2
          | s2 = -{resolve'2 x}- s3
          | s3 = [ &_26 <- Seq.(++) skipped (Seq.singleton x) ] s4
          | s4 = bb12 ]
        | bb12 = s0
          [ s0 = [ &skipped <- _26 ] s1
          | s1 = UInt64.sub {n} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &n <- _ret ] s2)
          | s2 = bb4 ] ] ]
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'4 self}- s2 | s2 = [ &_0 <- r ] s3 | s3 = bb16 ]
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'4 self}- s2 | s2 = [ &_0 <- r ] s3 | s3 = bb16 ]
    | bb16 = return {_0} ]
    [ & _0: t_Option = Any.any_l ()
    | & self: MutBorrow.t t_Skip = self
    | & old_self: MutBorrow.t t_Skip = Any.any_l ()
    | & n: UInt64.t = Any.any_l ()
    | & _6: MutBorrow.t UInt64.t = Any.any_l ()
    | & _7: MutBorrow.t UInt64.t = Any.any_l ()
    | & skipped: Seq.seq t_Item = Any.any_l ()
    | & r: t_Option = Any.any_l ()
    | & _19: MutBorrow.t t_I = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & x: t_Item = Any.any_l ()
    | & _26: Seq.seq t_Item = Any.any_l ()
    | & old_4_0: MutBorrow.t t_Skip = Any.any_l () ])
    [ return (result: t_Option) -> {[@expl:next result type invariant] inv'4 result}
      {[@expl:next ensures] match result with
        | C_None -> completed'0 self
        | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_04_skip__qyi13909329693910717997__resolve_coherence__refines (* <Skip<I> as creusot_contracts::Resolve> *)
  use creusot.int.UInt64
  
  type t_I
  
  type t_Skip = { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  predicate resolve (_1: t_I)
  
  predicate structural_resolve (_1: t_Skip) =
    match _1 with
      | {t_Skip__iter = x0; t_Skip__n = x1} -> resolve x0
      end
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_Skip)
  
  axiom inv_axiom [@rewrite]: forall x: t_Skip [inv'0 x]. inv'0 x
      = match x with
        | {t_Skip__iter = iter; t_Skip__n = n} -> inv iter
        end
  
  predicate resolve'0 [@inline:trivial] (_1: UInt64.t) = true
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 (self: t_Skip) = resolve self.t_Skip__iter /\ resolve'0 self.t_Skip__n
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Skip. structural_resolve self /\ inv'0 self
      -> structural_resolve self /\ (forall result: (). resolve'1 self -> resolve'1 self)
end
module M_04_skip__qyi11393468722733824414__next__refines (* <Skip<I> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip = { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_Skip)
  
  axiom inv_axiom [@rewrite]: forall x: t_Skip [inv'0 x]. inv'0 x
      = match x with
        | {t_Skip__iter = iter; t_Skip__n = n} -> inv iter
        end
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Skip) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 (_1: MutBorrow.t t_Skip)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Skip [inv'1 x]. inv'1 x = invariant' x
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option = C_None | C_Some t_Item
  
  predicate resolve (_1: t_Item)
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate completed'0 (self: MutBorrow.t t_Skip) =
    UInt64.t'int self.final.t_Skip__n = 0
    /\ (exists s: Seq.seq t_Item, i: MutBorrow.t t_I. Seq.length s <= UInt64.t'int self.current.t_Skip__n
      /\ produces self.current.t_Skip__iter s i.current
      /\ (forall i'0: int. 0 <= i'0 /\ i'0 < Seq.length s -> resolve (Seq.get s i'0))
      /\ completed i /\ i.final = self.final.t_Skip__iter)
  
  predicate produces'0 (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
      /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve (Seq.get s i)))
  
  predicate inv'2 (_1: t_Item)
  
  predicate inv'3 (_1: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'3 x]. inv'3 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'2 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Skip. inv'1 self
      -> inv'1 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed'0 self
              | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
              end
          /\ inv'3 result
        -> match result with
            | C_None -> completed'0 self
            | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
            end
        /\ inv'3 result)
end
module M_04_skip__qyi11393468722733824414__produces_refl__refines (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip = { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve (_1: t_Item)
  
  predicate produces'0 (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
      /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Skip. forall result: (). produces'0 self (Seq.empty: Seq.seq t_Item) self
        -> produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_04_skip__qyi11393468722733824414__produces_trans__refines (* <Skip<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Skip = { t_Skip__iter: t_I; t_Skip__n: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate resolve (_1: t_Item)
  
  predicate produces'0 (self: t_Skip) (visited: Seq.seq t_Item) (o: t_Skip) =
    visited = (Seq.empty: Seq.seq t_Item) /\ self = o
    \/ UInt64.t'int o.t_Skip__n = 0
    /\ Seq.length visited > 0
    /\ (exists s: Seq.seq t_Item. Seq.length s = UInt64.t'int self.t_Skip__n
      /\ produces self.t_Skip__iter (Seq.(++) s visited) o.t_Skip__iter
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> resolve (Seq.get s i)))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Skip. forall ab: Seq.seq t_Item. forall b: t_Skip. forall bc: Seq.seq t_Item. forall c: t_Skip. produces'0 b bc c
                /\ produces'0 a ab b
              -> produces'0 b bc c
              /\ produces'0 a ab b
              /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c -> produces'0 a (Seq.(++) ab bc) c)
end
