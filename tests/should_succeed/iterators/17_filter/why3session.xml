<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.15.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.6.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.3.1" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="coma" proved="true">
<path name=".."/><path name="17_filter.coma"/>
<theory name="M_impl_Iterator_for_Filter_I_F__produces_refl" proved="true">
 <goal name="vc_produces_refl_Filter_I_F" proved="true">
 <proof prover="0"><result status="valid" time="0.021906" steps="37611"/></proof>
 </goal>
</theory>
<theory name="M_impl_Iterator_for_Filter_I_F__produces_trans" proved="true">
 <goal name="vc_produces_trans_Filter_I_F" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="vc_produces_trans_Filter_I_F.0" expl="produces_trans ensures" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_trans_Filter_I_F.0.0" expl="produces_trans ensures" proved="true">
   <proof prover="3"><result status="valid" time="0.056400" steps="3779"/></proof>
   </goal>
   <goal name="vc_produces_trans_Filter_I_F.0.1" expl="produces_trans ensures" proved="true">
   <transf name="destruct_rec" proved="true" arg1="H3">
    <goal name="vc_produces_trans_Filter_I_F.0.1.0" expl="destruct premise" proved="true">
    <proof prover="1"><result status="valid" time="0.023561" steps="4"/></proof>
    </goal>
    <goal name="vc_produces_trans_Filter_I_F.0.1.1" expl="produces_trans ensures" proved="true">
    <transf name="destruct_rec" proved="true" arg1="H1">
     <goal name="vc_produces_trans_Filter_I_F.0.1.1.0" expl="destruct premise" proved="true">
     <proof prover="1"><result status="valid" time="0.018164" steps="31"/></proof>
     </goal>
     <goal name="vc_produces_trans_Filter_I_F.0.1.1.1" expl="produces_trans ensures" proved="true">
     <transf name="exists" proved="true" arg1="(s1++s)">
      <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0" proved="true">
      <transf name="exists" proved="true" arg1="(fun i -&gt; if i &lt; length ab then f1 i else (f (i - length ab) + length s1))">
       <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.029503" steps="5749"/></proof>
        </goal>
        <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.1" proved="true">
        <proof prover="2"><result status="valid" time="0.048232" steps="7322"/></proof>
        </goal>
        <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.2" proved="true">
        <proof prover="2"><result status="valid" time="0.071944" steps="8847"/></proof>
        </goal>
        <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.3" proved="true">
        <proof prover="3"><result status="valid" time="0.067108" steps="5022"/></proof>
        </goal>
        <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.4" proved="true">
        <proof prover="2"><result status="valid" time="0.073927" steps="9629"/></proof>
        </goal>
        <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.5" proved="true">
        <proof prover="3"><result status="valid" time="0.101003" steps="13677"/></proof>
        </goal>
        <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.6" proved="true">
        <transf name="case" proved="true" arg1="(i &lt; length s1)">
         <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.6.0" expl="true case" proved="true">
         <proof prover="3"><result status="valid" time="0.074677" steps="9283"/></proof>
         </goal>
         <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.6.1" expl="false case" proved="true">
         <transf name="instantiate" proved="true" arg1="H4" arg2="(i-length s1)">
          <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.6.1.0" expl="false case" proved="true">
          <transf name="replace" proved="true" arg1="b.func" arg2="a.func" arg3="in" arg4="Hinst">
           <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.6.1.0.0" expl="false case" proved="true">
           <proof prover="1"><result status="valid" time="0.070635" steps="292"/></proof>
           </goal>
           <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0.6.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="2"><result status="valid" time="0.032556" steps="6897"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_impl_Iterator_for_Filter_I_F__next" proved="true">
 <goal name="vc_next_Filter_I_F" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_next_Filter_I_F.0" expl="loop invariant #0" proved="true">
  <proof prover="1"><result status="valid" time="0.023530" steps="6"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.1" expl="loop invariant #2" proved="true">
  <proof prover="0"><result status="valid" time="0.009469" steps="3726"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.2" expl="loop invariant #3" proved="true">
  <proof prover="0"><result status="valid" time="0.006750" steps="25287"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.3" expl="loop invariant #4" proved="true">
  <proof prover="1"><result status="valid" time="0.026685" steps="10"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.4" proved="true">
  <proof prover="0"><result status="valid" time="0.008106" steps="24997"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.5" expl="next requires" proved="true">
  <proof prover="1"><result status="valid" time="0.036513" steps="26"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.009977" steps="3058"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.7" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.033707" steps="3582"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.8" expl="next result type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.011128" steps="30133"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.9" expl="next ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.031454" steps="99"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.10" expl="assertion" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="vc_next_Filter_I_F.10.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.045255" steps="60437"/></proof>
   <proof prover="1"><result status="valid" time="0.087278" steps="88"/></proof>
   <proof prover="2"><result status="valid" time="0.214156" steps="15721"/></proof>
   <proof prover="3"><result status="valid" time="0.122816" steps="6018"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next_Filter_I_F.11" proved="true">
  <proof prover="3"><result status="valid" time="0.049414" steps="3600"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.12" expl="call_mut &#39;self_&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.047871" steps="3297"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.13" expl="call_mut &#39;arg&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.078835" steps="4463"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.14" expl="call_mut requires" proved="true">
  <proof prover="1"><result status="valid" time="0.045621" steps="130"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.15" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.081077" steps="4558"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.16" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.072641" steps="7797"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.17" expl="loop invariant #0" proved="true">
  <proof prover="0"><result status="valid" time="0.034261" steps="41113"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.18" expl="loop invariant #1" proved="true">
  <proof prover="0"><result status="valid" time="0.035177" steps="39538"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.19" expl="loop invariant #2" proved="true">
  <proof prover="3"><result status="valid" time="0.082166" steps="4943"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.20" expl="loop invariant #3" proved="true">
  <proof prover="0"><result status="valid" time="0.008484" steps="2672"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.21" expl="loop invariant #4" proved="true">
  <proof prover="0"><result status="valid" time="0.020744" steps="21271"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.22" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.019278" steps="40948"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.23" expl="next result type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.021055" steps="38096"/></proof>
  </goal>
  <goal name="vc_next_Filter_I_F.24" expl="next ensures" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="vc_next_Filter_I_F.24.0" expl="next ensures" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="vc_next_Filter_I_F.24.0.0" expl="next ensures" proved="true">
    <proof prover="2"><result status="valid" time="0.045659" steps="8035"/></proof>
    </goal>
    <goal name="vc_next_Filter_I_F.24.0.1" expl="next ensures" proved="true">
    <transf name="exists" proved="true" arg1="(snoc produced f0)">
     <goal name="vc_next_Filter_I_F.24.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="(fun (_:int) -&gt; length produced)">
      <goal name="vc_next_Filter_I_F.24.0.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="vc_next_Filter_I_F.24.0.1.0.0.0" proved="true">
       <proof prover="3"><result status="valid" time="0.031837" steps="3572"/></proof>
       </goal>
       <goal name="vc_next_Filter_I_F.24.0.1.0.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.009160" steps="44353"/></proof>
       </goal>
       <goal name="vc_next_Filter_I_F.24.0.1.0.0.2" proved="true">
       <proof prover="0"><result status="valid" time="0.013354" steps="44762"/></proof>
       </goal>
       <goal name="vc_next_Filter_I_F.24.0.1.0.0.3" proved="true">
       <proof prover="0"><result status="valid" time="0.019685" steps="44520"/></proof>
       </goal>
       <goal name="vc_next_Filter_I_F.24.0.1.0.0.4" proved="true">
       <proof prover="1"><result status="valid" time="0.026356" steps="83"/></proof>
       </goal>
       <goal name="vc_next_Filter_I_F.24.0.1.0.0.5" proved="true">
       <proof prover="0"><result status="valid" time="0.023385" steps="46038"/></proof>
       </goal>
       <goal name="vc_next_Filter_I_F.24.0.1.0.0.6" proved="true">
       <proof prover="1"><result status="valid" time="0.152048" steps="1139"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next_Filter_I_F.25" proved="true">
  <proof prover="3"><result status="valid" time="0.066803" steps="2885"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_filter" proved="true">
 <goal name="vc_filter_I" proved="true">
 <proof prover="0"><result status="valid" time="0.008965" steps="15053"/></proof>
 </goal>
</theory>
<theory name="M_less_than" proved="true">
 <goal name="vc_closure2" proved="true">
 <proof prover="0"><result status="valid" time="0.008765" steps="21246"/></proof>
 </goal>
 <goal name="vc_less_than" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_less_than.0" expl="filter &#39;self_&#39; type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.023991" steps="4"/></proof>
  </goal>
  <goal name="vc_less_than.1" expl="filter requires #0" proved="true">
  <proof prover="3"><result status="valid" time="0.059443" steps="5627"/></proof>
  </goal>
  <goal name="vc_less_than.2" expl="filter requires #1" proved="true">
  <proof prover="1"><result status="valid" time="0.016562" steps="8"/></proof>
  </goal>
  <goal name="vc_less_than.3" expl="filter requires #2" proved="true">
  <proof prover="3"><result status="valid" time="0.035634" steps="5402"/></proof>
  </goal>
  <goal name="vc_less_than.4" expl="collect &#39;self_&#39; type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.000001" steps="3652"/></proof>
  </goal>
  <goal name="vc_less_than.5" expl="less_than ensures #0" proved="true">
  <proof prover="1"><result status="valid" time="0.039203" steps="195"/></proof>
  </goal>
  <goal name="vc_less_than.6" expl="less_than ensures #1" proved="true">
  <proof prover="3"><result status="valid" time="0.571219" steps="102714"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_impl_Iterator_for_Filter_I_F__next__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.000001" steps="1323"/></proof>
 </goal>
</theory>
<theory name="M_impl_Iterator_for_Filter_I_F__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.010998" steps="1129"/></proof>
 </goal>
</theory>
<theory name="M_impl_Iterator_for_Filter_I_F__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.014899" steps="1129"/></proof>
 </goal>
</theory>
</file>
</why3session>
