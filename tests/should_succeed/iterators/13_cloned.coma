module M_13_cloned__qyi15962217627105823597__resolve_coherence (* <Cloned<I> as creusot_contracts::Resolve> *)
  type t_I
  
  type t_Cloned = { t_Cloned__iter: t_I }
  
  predicate resolve (_1: t_I)
  
  predicate structural_resolve (_1: t_Cloned) =
    match _1 with
      | {t_Cloned__iter = x0} -> resolve x0
      end
  
  predicate resolve'0 (self: t_Cloned) = resolve self.t_Cloned__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Cloned
  
  function resolve_coherence (self: t_Cloned) : ()
  
  goal vc_resolve_coherence: structural_resolve self -> ([@expl:resolve_coherence ensures] resolve'0 self)
end
module M_13_cloned__qyi8249401513993331368__produces_refl (* <Cloned<I> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Cloned = { t_Cloned__iter: t_I }
  
  type t_T
  
  predicate produces (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_T) self
  
  predicate inv (_1: t_T)
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces'0 (self: t_Cloned) (visited: Seq.seq t_T) (o: t_Cloned) =
    exists s: Seq.seq t_T. produces self.t_Cloned__iter s o.t_Cloned__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> postcondition () (Seq.get s i) (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Cloned
  
  function produces_refl'0 (self: t_Cloned) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] produces'0 self (Seq.empty: Seq.seq t_T) self
end
module M_13_cloned__qyi8249401513993331368__produces_trans (* <Cloned<I> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Cloned = { t_Cloned__iter: t_I }
  
  type t_T
  
  predicate produces (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_T) self
  
  predicate inv (_1: t_T)
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces'0 (self: t_Cloned) (visited: Seq.seq t_T) (o: t_Cloned) =
    exists s: Seq.seq t_T. produces self.t_Cloned__iter s o.t_Cloned__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> postcondition () (Seq.get s i) (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Cloned
  
  constant ab : Seq.seq t_T
  
  constant b : t_Cloned
  
  constant bc : Seq.seq t_T
  
  constant c : t_Cloned
  
  function produces_trans'0 (a: t_Cloned) (ab: Seq.seq t_T) (b: t_Cloned) (bc: Seq.seq t_T) (c: t_Cloned) : ()
  
  goal vc_produces_trans: produces'0 a ab b
    -> produces'0 b bc c -> ([@expl:produces_trans ensures] produces'0 a (Seq.(++) ab bc) c)
end
module M_13_cloned__qyi8249401513993331368__next (* <Cloned<I> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_I
  
  type t_Cloned = { t_Cloned__iter: t_I }
  
  predicate inv (_1: t_I)
  
  type t_T
  
  predicate produces (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_T) self
  
  type t_Option = C_None | C_Some t_T
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_I) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: MutBorrow.t t_I)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_I [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef: forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate inv'1 (_1: t_T)
  
  predicate invariant''0 [@inline:trivial] (self: t_T) = inv'1 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 (_1: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate inv'3 (_1: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'3 x]. inv'3 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'2 a_0
        end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in match res with
          | C_None -> completed self
          | C_Some v -> produces self.current (Seq.singleton v) self.final
          end
      /\ inv'3 res)
  
  let rec next (self: MutBorrow.t t_I) (return (x: t_Option)) = {[@expl:next requires] precondition () self}
    any [ return (result: t_Option) -> {postcondition_once () self result} (! return {result}) ]
  
  predicate inv'4 (_1: t_Cloned)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Cloned [inv'4 x]. inv'4 x
      = match x with
        | {t_Cloned__iter = iter} -> inv iter
        end
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_Cloned) = inv'4 self.current /\ inv'4 self.final
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'5 (_1: MutBorrow.t t_Cloned)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_Cloned [inv'5 x]. inv'5 x = invariant''1 x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Cloned) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Cloned) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  type t_Option'0 = C_None'0 | C_Some'0 t_T
  
  predicate inv'6 (_1: t_Option'0)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Option'0 [inv'6 x]. inv'6 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'1 a_0
        end
  
  type tuple = { f0: t_Option; f1: t_Option'0 }
  
  predicate postcondition_once'0 (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let self_ = args in inv'1 res)
  
  predicate resolve'1 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve'1
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'1:
    forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv'1 res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once'0 self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'2: forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv'1 res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once'0 self args res
      = (postcondition self args res /\ resolve'1 self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate precondition'0 (self: ()) (args: t_T)
  
  axiom precondition_fndef'0: forall args: t_T [precondition'0 () args]. (let self_ = args in inv'2 self_)
      -> precondition'0 () args
  
  let rec clone' (self_: t_T) (return (x: t_T)) = {[@expl:clone requires] precondition'0 () self_}
    any [ return (result: t_T) -> {postcondition_once'0 () self_ result} (! return {result}) ]
  
  let rec cloned (self_: t_Option) (return (x: t_Option'0)) = {[@expl:cloned 'self_' type invariant] inv'3 self_}
    any
    [ return (result: t_Option'0) -> {inv'6 result}
      {match { f0 = self_; f1 = result } with
        | {f0 = C_None; f1 = C_None'0} -> true
        | {f0 = C_Some s; f1 = C_Some'0 r} -> postcondition () s r
        | _ -> false
        end}
      (! return {result}) ]
  
  predicate completed'0 (self: MutBorrow.t t_Cloned) =
    completed (MutBorrow.borrow_logic self.current.t_Cloned__iter self.final.t_Cloned__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
  
  predicate produces'0 (self: t_Cloned) (visited: Seq.seq t_T) (o: t_Cloned) =
    exists s: Seq.seq t_T. produces self.t_Cloned__iter s o.t_Cloned__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> postcondition () (Seq.get s i) (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'0 (self: MutBorrow.t t_Cloned) (return (x: t_Option'0)) = {[@expl:next 'self' type invariant] inv'5 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv self.current.t_Cloned__iter}
        MutBorrow.borrow_final <t_I> {self.current.t_Cloned__iter} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_4 <- _ret ] -{inv _ret.final}-
            [ &self <- { self with current = { t_Cloned__iter = _ret.final } } ] s1)
      | s1 = next {_4} (fun (_ret: t_Option) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'5 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = cloned {_3} (fun (_ret: t_Option'0) -> [ &_0 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: t_Option'0 = Any.any_l ()
    | & self: MutBorrow.t t_Cloned = self
    | & _3: t_Option = Any.any_l ()
    | & _4: MutBorrow.t t_I = Any.any_l () ])
    [ return (result: t_Option'0) -> {[@expl:next result type invariant] inv'6 result}
      {[@expl:next ensures] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_13_cloned__qyi15962217627105823597__resolve_coherence__refines (* <Cloned<I> as creusot_contracts::Resolve> *)
  type t_I
  
  type t_Cloned = { t_Cloned__iter: t_I }
  
  predicate resolve (_1: t_I)
  
  predicate structural_resolve (_1: t_Cloned) =
    match _1 with
      | {t_Cloned__iter = x0} -> resolve x0
      end
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_Cloned)
  
  axiom inv_axiom [@rewrite]: forall x: t_Cloned [inv'0 x]. inv'0 x
      = match x with
        | {t_Cloned__iter = iter} -> inv iter
        end
  
  predicate resolve'0 (self: t_Cloned) = resolve self.t_Cloned__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Cloned. structural_resolve self /\ inv'0 self
      -> structural_resolve self /\ (forall result: (). resolve'0 self -> resolve'0 self)
end
module M_13_cloned__qyi8249401513993331368__produces_trans__refines (* <Cloned<I> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Cloned = { t_Cloned__iter: t_I }
  
  type t_T
  
  predicate produces (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_T) self
  
  predicate inv (_1: t_T)
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces'0 (self: t_Cloned) (visited: Seq.seq t_T) (o: t_Cloned) =
    exists s: Seq.seq t_T. produces self.t_Cloned__iter s o.t_Cloned__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> postcondition () (Seq.get s i) (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Cloned. forall ab: Seq.seq t_T. forall b: t_Cloned. forall bc: Seq.seq t_T. forall c: t_Cloned. produces'0 b bc c
                /\ produces'0 a ab b
              -> produces'0 b bc c
              /\ produces'0 a ab b
              /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c -> produces'0 a (Seq.(++) ab bc) c)
end
module M_13_cloned__qyi8249401513993331368__produces_refl__refines (* <Cloned<I> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Cloned = { t_Cloned__iter: t_I }
  
  type t_T
  
  predicate produces (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_T) self
  
  predicate inv (_1: t_T)
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces'0 (self: t_Cloned) (visited: Seq.seq t_T) (o: t_Cloned) =
    exists s: Seq.seq t_T. produces self.t_Cloned__iter s o.t_Cloned__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> postcondition () (Seq.get s i) (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Cloned. forall result: (). produces'0 self (Seq.empty: Seq.seq t_T) self
        -> produces'0 self (Seq.empty: Seq.seq t_T) self
end
module M_13_cloned__qyi8249401513993331368__next__refines (* <Cloned<I> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Cloned = { t_Cloned__iter: t_I }
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_Cloned)
  
  axiom inv_axiom [@rewrite]: forall x: t_Cloned [inv'0 x]. inv'0 x
      = match x with
        | {t_Cloned__iter = iter} -> inv iter
        end
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Cloned) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 (_1: MutBorrow.t t_Cloned)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Cloned [inv'1 x]. inv'1 x = invariant' x
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  predicate produces (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_T) self
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate completed'0 (self: MutBorrow.t t_Cloned) =
    completed (MutBorrow.borrow_logic self.current.t_Cloned__iter self.final.t_Cloned__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
  
  predicate inv'2 (_1: t_T)
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv'2 res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv'2 res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv'2 res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces'0 (self: t_Cloned) (visited: Seq.seq t_T) (o: t_Cloned) =
    exists s: Seq.seq t_T. produces self.t_Cloned__iter s o.t_Cloned__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> postcondition () (Seq.get s i) (Seq.get visited i))
  
  predicate inv'3 (_1: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'3 x]. inv'3 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'2 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Cloned. inv'1 self
      -> inv'1 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed'0 self
              | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
              end
          /\ inv'3 result
        -> match result with
            | C_None -> completed'0 self
            | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
            end
        /\ inv'3 result)
end
