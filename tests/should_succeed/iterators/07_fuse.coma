module M_07_fuse__qyi12895370763345050582__resolve_coherence [#"07_fuse.rs" 8 9 8 16] (* <Fuse<I> as creusot_contracts::Resolve> *)
  let%span s07_fuse = "07_fuse.rs" 8 9 8 16
  let%span s07_fuse'0 = "07_fuse.rs" 8 9 8 16
  let%span s07_fuse'1 = "07_fuse.rs" 10 4 10 23
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 772 8 775 9
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  predicate resolve (_0: t_I)
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    [%#soption] match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: t_Option) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate structural_resolve (_0: t_Fuse) =
    match _0 with
      | {t_Fuse__iter = x0} -> resolve'1 x0
      end
  
  predicate resolve'2 [#"07_fuse.rs" 8 9 8 16] (self: t_Fuse) = [%#s07_fuse'1] resolve'1 self.t_Fuse__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Fuse
  
  function resolve_coherence [#"07_fuse.rs" 8 9 8 16] (self'0: t_Fuse) : ()
  
  goal vc_resolve_coherence: ([%#s07_fuse] structural_resolve self)
    -> ([@expl:resolve_coherence ensures] [%#s07_fuse'0] resolve'2 self)
end
module M_07_fuse__qyi15189554860034455533__next [#"07_fuse.rs" 39 4 39 44] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse = "07_fuse.rs" 39 17 39 21
  let%span s07_fuse'0 = "07_fuse.rs" 39 26 39 44
  let%span s07_fuse'1 = "07_fuse.rs" 35 14 38 5
  let%span s07_fuse'2 = "07_fuse.rs" 19 12 20 35
  let%span s07_fuse'3 = "07_fuse.rs" 26 8 32 9
  let%span s07_fuse'4 = "07_fuse.rs" 1 0 27 4
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 772 8 775 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  let rec v_Some (input: t_Option) (ret (field_0: t_I)) = any
    [ good (field_0: t_I) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_I [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option'0 = C_None'0 | C_Some'0 t_Item
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_I) = [%#sinvariant] inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 (_0: MutBorrow.t t_I)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_I [inv'1 x]. inv'1 x = invariant' x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    [%#s07_fuse'4] forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'1 self)
      -> precondition () args
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate inv'2 (_0: t_Item)
  
  predicate inv'3 (_0: t_Option'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option'0 [inv'3 x]. inv'3 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'2 a_0
        end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option'0)
  
  axiom postcondition_fndef:
    [%#s07_fuse'4] forall args: MutBorrow.t t_I, res: t_Option'0 [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in match res with
          | C_None'0 -> completed self
          | C_Some'0 v -> produces self.current (Seq.singleton v) self.final
          end
      /\ inv'3 res)
  
  let rec next (self: MutBorrow.t t_I) (return' (x: t_Option'0)) = {[@expl:next requires] precondition () self}
    any [ return''0 (result: t_Option'0) -> {postcondition_once () self result} (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_I) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_I) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_Option) =
    [%#sinvariant] inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'4 (_0: MutBorrow.t t_Option)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Option [inv'4 x]. inv'4 x = invariant''0 x
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_Option) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_Option) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate inv'5 (_0: t_Fuse)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Fuse [inv'5 x]. inv'5 x
      = match x with
        | {t_Fuse__iter = iter} -> inv'0 iter
        end
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_Fuse) =
    [%#sinvariant] inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'6 (_0: MutBorrow.t t_Fuse)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_Fuse [inv'6 x]. inv'6 x = invariant''1 x
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_Fuse) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: MutBorrow.t t_Fuse) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 (_0: t_Item)
  
  predicate resolve'6 [@inline:trivial] (self: t_Option'0) =
    [%#soption] match self with
      | C_Some'0 x -> resolve'5 x
      | C_None'0 -> true
      end
  
  meta "rewrite_def" predicate resolve'6
  
  predicate resolve'7 [@inline:trivial] (_0: t_Option'0) = resolve'6 _0
  
  meta "rewrite_def" predicate resolve'7
  
  predicate resolve'8 (_0: t_I)
  
  predicate resolve'9 [@inline:trivial] (self: t_Option) =
    [%#soption] match self with
      | C_Some x -> resolve'8 x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'9
  
  predicate resolve'10 [@inline:trivial] (_0: t_Option) = resolve'9 _0
  
  meta "rewrite_def" predicate resolve'10
  
  predicate completed'0 [#"07_fuse.rs" 17 4 17 35] (self: MutBorrow.t t_Fuse) =
    [%#s07_fuse'2] ((self.current).t_Fuse__iter = C_None
      \/ (exists it: MutBorrow.t t_I. completed it /\ (self.current).t_Fuse__iter = C_Some (it.current)))
    /\ (self.final).t_Fuse__iter = C_None
  
  predicate produces'0 [#"07_fuse.rs" 25 4 25 65] (self: t_Fuse) (prod: Seq.seq t_Item) (other: t_Fuse) =
    [%#s07_fuse'3] match self.t_Fuse__iter with
      | C_None -> prod = (Seq.empty: Seq.seq t_Item) /\ other.t_Fuse__iter = self.t_Fuse__iter
      | C_Some i -> match other.t_Fuse__iter with
        | C_Some i2 -> produces i prod i2
        | C_None -> false
        end
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'0 [#"07_fuse.rs" 39 4 39 44] (self: MutBorrow.t t_Fuse) (return' (x: t_Option'0)) =
    {[@expl:next 'self' type invariant] [%#s07_fuse] inv'6 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self'0.current).t_Fuse__iter}
        MutBorrow.borrow_mut <t_Option> {(self'0.current).t_Fuse__iter}
          (fun (_ret: MutBorrow.t t_Option) ->
            [ &_3 <- _ret ] -{inv'0 _ret.final}-
            [ &self'0 <- { self'0 with current = { t_Fuse__iter = _ret.final } } ] s1)
      | s1 = any [ br0 -> {_3.current = C_None} (! bb2) | br1 (x0: t_I) -> {_3.current = C_Some x0} (! bb3) ] ]
    | bb3 = s0
      [ s0 = v_Some {_3.current}
          (fun (r0: t_I) ->
            {inv r0}
            MutBorrow.borrow_final <t_I> {r0} {MutBorrow.inherit_id (MutBorrow.get_id _3) 1}
              (fun (_ret: MutBorrow.t t_I) ->
                [ &iter <- _ret ] -{inv _ret.final}-
                [ &_3 <- { _3 with current = C_Some _ret.final } ] s1))
      | s1 = {inv iter.current}
        MutBorrow.borrow_final <t_I> {iter.current} {MutBorrow.get_id iter}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_7 <- _ret ] -{inv _ret.final}-
            [ &iter <- { iter with current = _ret.final } ] s2)
      | s2 = next {_7} (fun (_ret: t_Option'0) -> [ &_6 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'1 iter} s1
      | s1 = -{resolve'0 iter}- s2
      | s2 = {[@expl:type invariant] inv'4 _3} s3
      | s3 = -{resolve'2 _3}- s4
      | s4 = any [ br0 -> {_6 = C_None'0} (! bb7) | br1 (x0: t_Item) -> {_6 = C_Some'0 x0} (! bb6) ] ]
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'6 self'0} s1
      | s1 = -{resolve'4 self'0}- s2
      | s2 = [ &x <- _6 ] s3
      | s3 = [ &_0 <- x ] s4
      | s4 = bb15 ]
    | bb7 = s0 [ s0 = {[@expl:type invariant] inv'3 _6} s1 | s1 = -{resolve'7 _6}- s2 | s2 = bb8 ]
    | bb8 = s0 [ s0 = [ &_9 <- C_None ] s1 | s1 = bb9 ]
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'0 (self'0.current).t_Fuse__iter} s1
      | s1 = -{resolve'10 (self'0.current).t_Fuse__iter}- s2
      | s2 = [ &self'0 <- { self'0 with current = { t_Fuse__iter = _9 } } ] s3
      | s3 = {[@expl:type invariant] inv'6 self'0} s4
      | s4 = -{resolve'4 self'0}- s5
      | s5 = bb11 ]
    | bb11 = s0 [ s0 = [ &_0 <- C_None'0 ] s1 | s1 = bb15 ]
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'4 _3} s1 | s1 = -{resolve'2 _3}- s2 | s2 = bb4 ]
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'6 self'0} s1
      | s1 = -{resolve'4 self'0}- s2
      | s2 = [ &_0 <- C_None'0 ] s3
      | s3 = bb15 ]
    | bb15 = return''0 {_0} ]
    [ & _0: t_Option'0 = Any.any_l ()
    | & self'0: MutBorrow.t t_Fuse = self
    | & _3: MutBorrow.t t_Option = Any.any_l ()
    | & iter: MutBorrow.t t_I = Any.any_l ()
    | & _6: t_Option'0 = Any.any_l ()
    | & _7: MutBorrow.t t_I = Any.any_l ()
    | & _9: t_Option = Any.any_l ()
    | & x: t_Option'0 = Any.any_l () ])
    [ return''0 (result: t_Option'0) -> {[@expl:next result type invariant] [%#s07_fuse'0] inv'3 result}
      {[@expl:next ensures] [%#s07_fuse'1] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
end
module M_07_fuse__qyi15189554860034455533__produces_refl [#"07_fuse.rs" 54 4 54 26] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse = "07_fuse.rs" 53 4 53 49
  let%span s07_fuse'0 = "07_fuse.rs" 54 27 54 29
  let%span s07_fuse'1 = "07_fuse.rs" 26 8 32 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  
  use seq.Seq
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"07_fuse.rs" 25 4 25 65] (self: t_Fuse) (prod: Seq.seq t_Item) (other: t_Fuse) =
    [%#s07_fuse'1] match self.t_Fuse__iter with
      | C_None -> prod = (Seq.empty: Seq.seq t_Item) /\ other.t_Fuse__iter = self.t_Fuse__iter
      | C_Some i -> match other.t_Fuse__iter with
        | C_Some i2 -> produces i prod i2
        | C_None -> false
        end
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Fuse
  
  function produces_refl'0 [#"07_fuse.rs" 54 4 54 26] (self'0: t_Fuse) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] [%#s07_fuse] produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_07_fuse__qyi15189554860034455533__produces_trans [#"07_fuse.rs" 60 4 60 90] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse = "07_fuse.rs" 57 4 57 34
  let%span s07_fuse'0 = "07_fuse.rs" 58 4 58 34
  let%span s07_fuse'1 = "07_fuse.rs" 59 4 59 44
  let%span s07_fuse'2 = "07_fuse.rs" 60 91 60 93
  let%span s07_fuse'3 = "07_fuse.rs" 26 8 32 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  
  use seq.Seq
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"07_fuse.rs" 25 4 25 65] (self: t_Fuse) (prod: Seq.seq t_Item) (other: t_Fuse) =
    [%#s07_fuse'3] match self.t_Fuse__iter with
      | C_None -> prod = (Seq.empty: Seq.seq t_Item) /\ other.t_Fuse__iter = self.t_Fuse__iter
      | C_Some i -> match other.t_Fuse__iter with
        | C_Some i2 -> produces i prod i2
        | C_None -> false
        end
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Fuse
  
  constant ab : Seq.seq t_Item
  
  constant b : t_Fuse
  
  constant bc : Seq.seq t_Item
  
  constant c : t_Fuse
  
  function produces_trans'0 [#"07_fuse.rs" 60 4 60 90] (a'0: t_Fuse) (ab'0: Seq.seq t_Item) (b'0: t_Fuse) (bc'0: Seq.seq t_Item) (c'0: t_Fuse) : ()
  
  goal vc_produces_trans: ([%#s07_fuse] produces'0 a ab b)
    -> ([%#s07_fuse'0] produces'0 b bc c)
    -> ([@expl:produces_trans ensures] [%#s07_fuse'1] produces'0 a (Seq.(++) ab bc) c)
end
module M_07_fuse__qyi9200450106079471696__is_fused [#"07_fuse.rs" 78 4 78 62] (* <Fuse<I> as FusedIterator> *)
  let%span s07_fuse = "07_fuse.rs" 75 4 75 33
  let%span s07_fuse'0 = "07_fuse.rs" 76 15 76 44
  let%span s07_fuse'1 = "07_fuse.rs" 77 14 77 52
  let%span s07_fuse'2 = "07_fuse.rs" 78 63 78 65
  let%span s07_fuse'3 = "07_fuse.rs" 19 12 20 35
  let%span s07_fuse'4 = "07_fuse.rs" 26 8 32 9
  let%span s07_fuse'5 = "07_fuse.rs" 53 4 53 49
  let%span s07_fuse'6 = "07_fuse.rs" 54 27 54 29
  let%span s07_fuse'7 = "07_fuse.rs" 57 4 57 34
  let%span s07_fuse'8 = "07_fuse.rs" 58 4 58 34
  let%span s07_fuse'9 = "07_fuse.rs" 59 4 59 44
  let%span s07_fuse'10 = "07_fuse.rs" 60 91 60 93
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"07_fuse.rs" 25 4 25 65] (self: t_Fuse) (prod: Seq.seq t_Item) (other: t_Fuse) =
    [%#s07_fuse'4] match self.t_Fuse__iter with
      | C_None -> prod = (Seq.empty: Seq.seq t_Item) /\ other.t_Fuse__iter = self.t_Fuse__iter
      | C_Some i -> match other.t_Fuse__iter with
        | C_Some i2 -> produces i prod i2
        | C_None -> false
        end
      end
  
  function produces_trans'0 [#"07_fuse.rs" 60 4 60 90] (a: t_Fuse) (ab: Seq.seq t_Item) (b: t_Fuse) (bc: Seq.seq t_Item) (c: t_Fuse) : ()
   = [%#s07_fuse'10] ()
  
  axiom produces_trans_spec'0:
    forall a: t_Fuse, ab: Seq.seq t_Item, b: t_Fuse, bc: Seq.seq t_Item, c: t_Fuse. ([%#s07_fuse'7] produces'0 a ab b)
      -> ([%#s07_fuse'8] produces'0 b bc c) -> ([%#s07_fuse'9] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"07_fuse.rs" 54 4 54 26] (self: t_Fuse) : () = [%#s07_fuse'6] ()
  
  axiom produces_refl_spec'0: forall self: t_Fuse. [%#s07_fuse'5] produces'0 self (Seq.empty: Seq.seq t_Item) self
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate completed'0 [#"07_fuse.rs" 17 4 17 35] (self: MutBorrow.t t_Fuse) =
    [%#s07_fuse'3] ((self.current).t_Fuse__iter = C_None
      \/ (exists it: MutBorrow.t t_I. completed it /\ (self.current).t_Fuse__iter = C_Some (it.current)))
    /\ (self.final).t_Fuse__iter = C_None
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : MutBorrow.t t_Fuse
  
  constant steps : Seq.seq t_Item
  
  constant next : t_Fuse
  
  function is_fused [#"07_fuse.rs" 78 4 78 62] (self'0: MutBorrow.t t_Fuse) (steps'0: Seq.seq t_Item) (next'0: t_Fuse) : ()
  
  goal vc_is_fused: ([%#s07_fuse] completed'0 self)
    -> ([%#s07_fuse'0] produces'0 self.final steps next)
    -> ([@expl:is_fused ensures] [%#s07_fuse'1] steps = (Seq.empty: Seq.seq t_Item) /\ self.final = next)
end
module M_07_fuse__qyi12895370763345050582__resolve_coherence__refines [#"07_fuse.rs" 8 9 8 16] (* <Fuse<I> as creusot_contracts::Resolve> *)
  let%span s07_fuse = "07_fuse.rs" 8 9 8 16
  let%span s07_fuse'0 = "07_fuse.rs" 10 4 10 23
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 772 8 775 9
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  predicate resolve (_0: t_I)
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    [%#soption] match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: t_Option) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate structural_resolve (_0: t_Fuse) =
    match _0 with
      | {t_Fuse__iter = x0} -> resolve'1 x0
      end
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate inv'1 (_0: t_Fuse)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Fuse [inv'1 x]. inv'1 x
      = match x with
        | {t_Fuse__iter = iter} -> inv'0 iter
        end
  
  predicate resolve'2 [#"07_fuse.rs" 8 9 8 16] (self: t_Fuse) = [%#s07_fuse'0] resolve'1 self.t_Fuse__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s07_fuse] forall self: t_Fuse. structural_resolve self /\ inv'1 self
      -> structural_resolve self /\ (forall result: (). resolve'2 self -> resolve'2 self)
end
module M_07_fuse__qyi15189554860034455533__produces_trans__refines [#"07_fuse.rs" 60 4 60 90] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse = "07_fuse.rs" 60 4 60 90
  let%span s07_fuse'0 = "07_fuse.rs" 26 8 32 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  
  use seq.Seq
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"07_fuse.rs" 25 4 25 65] (self: t_Fuse) (prod: Seq.seq t_Item) (other: t_Fuse) =
    [%#s07_fuse'0] match self.t_Fuse__iter with
      | C_None -> prod = (Seq.empty: Seq.seq t_Item) /\ other.t_Fuse__iter = self.t_Fuse__iter
      | C_Some i -> match other.t_Fuse__iter with
        | C_Some i2 -> produces i prod i2
        | C_None -> false
        end
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#s07_fuse] forall a: t_Fuse. forall ab: Seq.seq t_Item. forall b: t_Fuse. forall bc: Seq.seq t_Item. forall c: t_Fuse. produces'0 b bc c
                /\ produces'0 a ab b
              -> produces'0 b bc c
              /\ produces'0 a ab b
              /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c -> produces'0 a (Seq.(++) ab bc) c)
end
module M_07_fuse__qyi15189554860034455533__produces_refl__refines [#"07_fuse.rs" 54 4 54 26] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse = "07_fuse.rs" 54 4 54 26
  let%span s07_fuse'0 = "07_fuse.rs" 26 8 32 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  
  use seq.Seq
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"07_fuse.rs" 25 4 25 65] (self: t_Fuse) (prod: Seq.seq t_Item) (other: t_Fuse) =
    [%#s07_fuse'0] match self.t_Fuse__iter with
      | C_None -> prod = (Seq.empty: Seq.seq t_Item) /\ other.t_Fuse__iter = self.t_Fuse__iter
      | C_Some i -> match other.t_Fuse__iter with
        | C_Some i2 -> produces i prod i2
        | C_None -> false
        end
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s07_fuse] forall self: t_Fuse. forall result: (). produces'0 self (Seq.empty: Seq.seq t_Item) self
        -> produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_07_fuse__qyi15189554860034455533__next__refines [#"07_fuse.rs" 39 4 39 44] (* <Fuse<I> as common::Iterator> *)
  let%span s07_fuse = "07_fuse.rs" 39 4 39 44
  let%span s07_fuse'0 = "07_fuse.rs" 19 12 20 35
  let%span s07_fuse'1 = "07_fuse.rs" 26 8 32 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate inv'1 (_0: t_Fuse)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Fuse [inv'1 x]. inv'1 x
      = match x with
        | {t_Fuse__iter = iter} -> inv'0 iter
        end
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Fuse) =
    [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'2 (_0: MutBorrow.t t_Fuse)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_Fuse [inv'2 x]. inv'2 x = invariant' x
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option'0 = C_None'0 | C_Some'0 t_Item
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate completed'0 [#"07_fuse.rs" 17 4 17 35] (self: MutBorrow.t t_Fuse) =
    [%#s07_fuse'0] ((self.current).t_Fuse__iter = C_None
      \/ (exists it: MutBorrow.t t_I. completed it /\ (self.current).t_Fuse__iter = C_Some (it.current)))
    /\ (self.final).t_Fuse__iter = C_None
  
  predicate produces'0 [#"07_fuse.rs" 25 4 25 65] (self: t_Fuse) (prod: Seq.seq t_Item) (other: t_Fuse) =
    [%#s07_fuse'1] match self.t_Fuse__iter with
      | C_None -> prod = (Seq.empty: Seq.seq t_Item) /\ other.t_Fuse__iter = self.t_Fuse__iter
      | C_Some i -> match other.t_Fuse__iter with
        | C_Some i2 -> produces i prod i2
        | C_None -> false
        end
      end
  
  predicate inv'3 (_0: t_Item)
  
  predicate inv'4 (_0: t_Option'0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option'0 [inv'4 x]. inv'4 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'3 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s07_fuse] forall self: MutBorrow.t t_Fuse. inv'2 self
      -> inv'2 self
      /\ (forall result: t_Option'0. match result with
              | C_None'0 -> completed'0 self
              | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
              end
          /\ inv'4 result
        -> match result with
            | C_None'0 -> completed'0 self
            | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
            end
        /\ inv'4 result)
end
module M_07_fuse__qyi9200450106079471696__is_fused__refines [#"07_fuse.rs" 78 4 78 62] (* <Fuse<I> as FusedIterator> *)
  let%span s07_fuse = "07_fuse.rs" 78 4 78 62
  let%span s07_fuse'0 = "07_fuse.rs" 26 8 32 9
  let%span s07_fuse'1 = "07_fuse.rs" 19 12 20 35
  let%span s07_fuse'2 = "07_fuse.rs" 53 4 53 49
  let%span s07_fuse'3 = "07_fuse.rs" 54 27 54 29
  let%span s07_fuse'4 = "07_fuse.rs" 57 4 57 34
  let%span s07_fuse'5 = "07_fuse.rs" 58 4 58 34
  let%span s07_fuse'6 = "07_fuse.rs" 59 4 59 44
  let%span s07_fuse'7 = "07_fuse.rs" 60 91 60 93
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_Option = C_None | C_Some t_I
  
  type t_Fuse = { t_Fuse__iter: t_Option }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate produces'0 [#"07_fuse.rs" 25 4 25 65] (self: t_Fuse) (prod: Seq.seq t_Item) (other: t_Fuse) =
    [%#s07_fuse'0] match self.t_Fuse__iter with
      | C_None -> prod = (Seq.empty: Seq.seq t_Item) /\ other.t_Fuse__iter = self.t_Fuse__iter
      | C_Some i -> match other.t_Fuse__iter with
        | C_Some i2 -> produces i prod i2
        | C_None -> false
        end
      end
  
  function produces_trans'0 [#"07_fuse.rs" 60 4 60 90] (a: t_Fuse) (ab: Seq.seq t_Item) (b: t_Fuse) (bc: Seq.seq t_Item) (c: t_Fuse) : ()
   = [%#s07_fuse'7] ()
  
  axiom produces_trans_spec'0:
    forall a: t_Fuse, ab: Seq.seq t_Item, b: t_Fuse, bc: Seq.seq t_Item, c: t_Fuse. ([%#s07_fuse'4] produces'0 a ab b)
      -> ([%#s07_fuse'5] produces'0 b bc c) -> ([%#s07_fuse'6] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"07_fuse.rs" 54 4 54 26] (self: t_Fuse) : () = [%#s07_fuse'3] ()
  
  axiom produces_refl_spec'0: forall self: t_Fuse. [%#s07_fuse'2] produces'0 self (Seq.empty: Seq.seq t_Item) self
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate completed'0 [#"07_fuse.rs" 17 4 17 35] (self: MutBorrow.t t_Fuse) =
    [%#s07_fuse'1] ((self.current).t_Fuse__iter = C_None
      \/ (exists it: MutBorrow.t t_I. completed it /\ (self.current).t_Fuse__iter = C_Some (it.current)))
    /\ (self.final).t_Fuse__iter = C_None
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#s07_fuse] forall self: MutBorrow.t t_Fuse. forall steps: Seq.seq t_Item. forall next: t_Fuse. produces'0 self.final steps next
            /\ completed'0 self
          -> produces'0 self.final steps next
          /\ completed'0 self
          /\ (forall result: (). steps = (Seq.empty: Seq.seq t_Item) /\ self.final = next
            -> steps = (Seq.empty: Seq.seq t_Item) /\ self.final = next)
end
