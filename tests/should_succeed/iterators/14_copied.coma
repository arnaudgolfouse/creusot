module M_impl_Iterator_for_Copied_I__produces_refl (* <Copied<I> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Copied_I = { iter: t_I }
  
  type t_T
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_T) self
  
  predicate produces_Copied_I (self: t_Copied_I) (visited: Seq.seq t_T) (o: t_Copied_I) =
    exists s: Seq.seq t_T. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Copied_I
  
  function produces_refl_Copied_I (self: t_Copied_I) : ()
  
  goal vc_produces_refl_Copied_I: [@expl:produces_refl ensures] produces_Copied_I self (Seq.empty: Seq.seq t_T) self
end
module M_impl_Iterator_for_Copied_I__produces_trans (* <Copied<I> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Copied_I = { iter: t_I }
  
  type t_T
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_T) self
  
  predicate produces_Copied_I (self: t_Copied_I) (visited: Seq.seq t_T) (o: t_Copied_I) =
    exists s: Seq.seq t_T. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Copied_I
  
  constant ab : Seq.seq t_T
  
  constant b : t_Copied_I
  
  constant bc : Seq.seq t_T
  
  constant c : t_Copied_I
  
  function produces_trans_Copied_I (a: t_Copied_I) (ab: Seq.seq t_T) (b: t_Copied_I) (bc: Seq.seq t_T) (c: t_Copied_I) : ()
  
  goal vc_produces_trans_Copied_I: produces_Copied_I a ab b
    -> produces_Copied_I b bc c -> ([@expl:produces_trans ensures] produces_Copied_I a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Copied_I__next (* <Copied<I> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_I
  
  type t_Copied_I = { iter: t_I }
  
  predicate inv_I (_1: t_I)
  
  type t_T
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_T) self
  
  type t_Option_ref_T = None | Some t_T
  
  predicate invariant_ref_I [@inline:trivial] (self: MutBorrow.t t_I) = inv_I self.current /\ inv_I self.final
  
  meta "rewrite_def" predicate invariant_ref_I
  
  predicate inv_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = invariant_ref_I _1
  
  meta "rewrite_def" predicate inv_ref_I
  
  predicate precondition_next (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    forall args: MutBorrow.t t_I [precondition_next () args]. (let self = args in inv_ref_I self)
      -> precondition_next () args
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate inv_Option_ref_T (_1: t_Option_ref_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_ref_T [inv_Option_ref_T x]. inv_Option_ref_T x
      = match x with
        | None -> true
        | Some f0 -> inv_ref_T f0
        end
  
  predicate postcondition_once_next (self: ()) (args: MutBorrow.t t_I) (result: t_Option_ref_T)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option_ref_T [postcondition_once_next () args res]. postcondition_once_next () args res
      -> (let self = args in match res with
          | None -> completed_I self
          | Some v -> produces_I self.current (Seq.singleton v) self.final
          end
      /\ inv_Option_ref_T res)
  
  let rec next_I (self: MutBorrow.t t_I) (return (x: t_Option_ref_T)) =
    {[@expl:next requires] precondition_next () self}
    any [ return (result: t_Option_ref_T) -> {postcondition_once_next () self result} (! return {result}) ]
  
  predicate inv_Copied_I (_1: t_Copied_I)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Copied_I [inv_Copied_I x]. inv_Copied_I x = inv_I x.iter
  
  predicate invariant_ref_Copied_I [@inline:trivial] (self: MutBorrow.t t_Copied_I) =
    inv_Copied_I self.current /\ inv_Copied_I self.final
  
  meta "rewrite_def" predicate invariant_ref_Copied_I
  
  predicate inv_ref_Copied_I [@inline:trivial] (_1: MutBorrow.t t_Copied_I) = invariant_ref_Copied_I _1
  
  meta "rewrite_def" predicate inv_ref_Copied_I
  
  predicate resolve_ref_Copied_I [@inline:trivial] (_1: MutBorrow.t t_Copied_I) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Copied_I
  
  type t_Option_T = None'0 | Some'0 t_T
  
  predicate inv_Option_T (_1: t_Option_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option_T [inv_Option_T x]. inv_Option_T x
      = match x with
        | None'0 -> true
        | Some'0 f0 -> inv_T f0
        end
  
  let rec copied_T (self_: t_Option_ref_T) (return (x: t_Option_T)) =
    {[@expl:copied 'self_' type invariant] inv_Option_ref_T self_}
    any
    [ return (result: t_Option_T) -> {inv_Option_T result}
      {match self_ with
        | None -> result = None'0
        | Some s -> result = Some'0 s
        end}
      (! return {result}) ]
  
  predicate completed_Copied_I (self: MutBorrow.t t_Copied_I) =
    completed_I (MutBorrow.borrow_logic self.current.iter self.final.iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
  
  predicate produces_Copied_I (self: t_Copied_I) (visited: Seq.seq t_T) (o: t_Copied_I) =
    exists s: Seq.seq t_T. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_Copied_I (self: MutBorrow.t t_Copied_I) (return (x: t_Option_T)) =
    {[@expl:next 'self' type invariant] inv_ref_Copied_I self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_I self.current.iter}
        MutBorrow.borrow_final <t_I> {self.current.iter} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_4 <- _ret ] -{inv_I _ret.final}-
            [ &self <- { self with current = { iter = _ret.final } } ] s1)
      | s1 = next_I {_4} (fun (_ret: t_Option_ref_T) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Copied_I self} s1
      | s1 = -{resolve_ref_Copied_I self}- s2
      | s2 = copied_T {_3} (fun (_ret: t_Option_T) -> [ &_0 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: t_Option_T = Any.any_l ()
    | & self: MutBorrow.t t_Copied_I = self
    | & _3: t_Option_ref_T = Any.any_l ()
    | & _4: MutBorrow.t t_I = Any.any_l () ])
    [ return (result: t_Option_T) -> {[@expl:next result type invariant] inv_Option_T result}
      {[@expl:next ensures] match result with
        | None'0 -> completed_Copied_I self
        | Some'0 v -> produces_Copied_I self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_impl_Iterator_for_Copied_I__produces_trans__refines (* <Copied<I> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Copied_I = { iter: t_I }
  
  type t_T
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_T) self
  
  predicate produces_Copied_I (self: t_Copied_I) (visited: Seq.seq t_T) (o: t_Copied_I) =
    exists s: Seq.seq t_T. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Copied_I. forall ab: Seq.seq t_T. forall b: t_Copied_I. forall bc: Seq.seq t_T. forall c: t_Copied_I. produces_Copied_I b bc c
                /\ produces_Copied_I a ab b
              -> produces_Copied_I b bc c
              /\ produces_Copied_I a ab b
              /\ (forall result: (). produces_Copied_I a (Seq.(++) ab bc) c -> produces_Copied_I a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Copied_I__next__refines (* <Copied<I> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Copied_I = { iter: t_I }
  
  predicate inv_I (_1: t_I)
  
  predicate inv_Copied_I (_1: t_Copied_I)
  
  axiom inv_axiom [@rewrite]: forall x: t_Copied_I [inv_Copied_I x]. inv_Copied_I x = inv_I x.iter
  
  predicate invariant_ref_Copied_I [@inline:trivial] (self: MutBorrow.t t_Copied_I) =
    inv_Copied_I self.current /\ inv_Copied_I self.final
  
  meta "rewrite_def" predicate invariant_ref_Copied_I
  
  predicate inv_ref_Copied_I [@inline:trivial] (_1: MutBorrow.t t_Copied_I) = invariant_ref_Copied_I _1
  
  meta "rewrite_def" predicate inv_ref_Copied_I
  
  type t_T
  
  type t_Option_T = None | Some t_T
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_T) self
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate completed_Copied_I (self: MutBorrow.t t_Copied_I) =
    completed_I (MutBorrow.borrow_logic self.current.iter self.final.iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
  
  predicate produces_Copied_I (self: t_Copied_I) (visited: Seq.seq t_T) (o: t_Copied_I) =
    exists s: Seq.seq t_T. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  
  predicate inv_T (_1: t_T)
  
  predicate inv_Option_T (_1: t_Option_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_T [inv_Option_T x]. inv_Option_T x
      = match x with
        | None -> true
        | Some f0 -> inv_T f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Copied_I. inv_ref_Copied_I self
      -> inv_ref_Copied_I self
      /\ (forall result: t_Option_T. match result with
              | None -> completed_Copied_I self
              | Some v -> produces_Copied_I self.current (Seq.singleton v) self.final
              end
          /\ inv_Option_T result
        -> match result with
            | None -> completed_Copied_I self
            | Some v -> produces_Copied_I self.current (Seq.singleton v) self.final
            end
        /\ inv_Option_T result)
end
module M_impl_Iterator_for_Copied_I__produces_refl__refines (* <Copied<I> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Copied_I = { iter: t_I }
  
  type t_T
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_T) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_T) (b: t_I) (bc: Seq.seq t_T) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_T, b: t_I, bc: Seq.seq t_T, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_T) self
  
  predicate produces_Copied_I (self: t_Copied_I) (visited: Seq.seq t_T) (o: t_Copied_I) =
    exists s: Seq.seq t_T. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Copied_I. forall result: (). produces_Copied_I self (Seq.empty: Seq.seq t_T) self
        -> produces_Copied_I self (Seq.empty: Seq.seq t_T) self
end
