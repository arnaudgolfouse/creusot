module M_impl_Iterator_for_IterMut_T__produces_refl (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut_T = { inner: MutBorrow.t (Slice64.slice t_T) }
  
  function index_slice_T [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_T
  
  function to_mut_seq_slice_T (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_slice_T_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq_slice_T self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_slice_T_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq_slice_T self)
        -> Seq.get (to_mut_seq_slice_T self) i
        = MutBorrow.borrow_logic (index_slice_T self.current i) (index_slice_T self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces_IterMut_T (self: t_IterMut_T) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.current) = Seq.length visited + Seq.length (Slice64.view tl.inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.inner.current)
      -> (Seq.get (to_mut_seq_slice_T self.inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).current
      /\ (Seq.get (to_mut_seq_slice_T self.inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_IterMut_T
  
  function produces_refl_IterMut_T (self: t_IterMut_T) : ()
  
  goal vc_produces_refl_IterMut_T:
    [@expl:produces_refl ensures] produces_IterMut_T self (Seq.empty: Seq.seq (MutBorrow.t t_T)) self
end
module M_impl_Iterator_for_IterMut_T__produces_trans (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut_T = { inner: MutBorrow.t (Slice64.slice t_T) }
  
  function index_slice_T [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_T
  
  function to_mut_seq_slice_T (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_slice_T_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq_slice_T self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_slice_T_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq_slice_T self)
        -> Seq.get (to_mut_seq_slice_T self) i
        = MutBorrow.borrow_logic (index_slice_T self.current i) (index_slice_T self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces_IterMut_T (self: t_IterMut_T) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.current) = Seq.length visited + Seq.length (Slice64.view tl.inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.inner.current)
      -> (Seq.get (to_mut_seq_slice_T self.inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).current
      /\ (Seq.get (to_mut_seq_slice_T self.inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_IterMut_T
  
  constant ab : Seq.seq (MutBorrow.t t_T)
  
  constant b : t_IterMut_T
  
  constant bc : Seq.seq (MutBorrow.t t_T)
  
  constant c : t_IterMut_T
  
  function produces_trans_IterMut_T (a: t_IterMut_T) (ab: Seq.seq (MutBorrow.t t_T)) (b: t_IterMut_T) (bc: Seq.seq (MutBorrow.t t_T)) (c: t_IterMut_T) : ()
  
  goal vc_produces_trans_IterMut_T: produces_IterMut_T a ab b
    -> produces_IterMut_T b bc c -> ([@expl:produces_trans ensures] produces_IterMut_T a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_IterMut_T__next (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  type t_IterMut_T = { inner: MutBorrow.t (Slice64.slice t_T) }
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv_slice_T self.current /\ inv_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  type t_Option_ref_T = None | Some (MutBorrow.t t_T)
  
  predicate invariant_ref_ref_slice_T [@inline:trivial] (self: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) =
    inv_ref_slice_T self.current /\ inv_ref_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_ref_slice_T
  
  predicate inv_ref_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) =
    invariant_ref_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_ref_slice_T
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate inv_Option_ref_T (_1: t_Option_ref_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_ref_T [inv_Option_ref_T x]. inv_Option_ref_T x
      = match x with
        | None -> true
        | Some f0 -> inv_ref_T f0
        end
  
  function index_slice_T [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_T
  
  function tail_T (self: Seq.seq t_T) : Seq.seq t_T = Seq.([..]) self 1 (Seq.length self)
  
  let rec split_off_first_mut_T (self_: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) (return (x: t_Option_ref_T)) =
    {[@expl:split_off_first_mut 'self_' type invariant] inv_ref_ref_slice_T self_}
    any
    [ return (result: t_Option_ref_T) -> {inv_Option_ref_T result}
      {match result with
        | Some r -> r.current = index_slice_T self_.current.current 0
        /\ r.final = index_slice_T self_.current.final 0
        /\ Seq.length (Slice64.view self_.current.current) > 0
        /\ Seq.length (Slice64.view self_.current.final) > 0
        /\ Slice64.view self_.final.current = tail_T (Slice64.view self_.current.current)
        /\ Slice64.view self_.final.final = tail_T (Slice64.view self_.current.final)
        | None -> Slice64.view self_.final.current = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.current.final = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.current.current = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.final.final = (Seq.empty: Seq.seq t_T)
        end}
      (! return {result}) ]
  
  predicate invariant_IterMut_T (self: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.final) = Seq.length (Slice64.view self.inner.current)
  
  predicate inv_IterMut_T (_1: t_IterMut_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_IterMut_T [inv_IterMut_T x]. inv_IterMut_T x
      = (invariant_IterMut_T x /\ inv_ref_slice_T x.inner)
  
  predicate invariant_ref_IterMut_T [@inline:trivial] (self: MutBorrow.t t_IterMut_T) =
    inv_IterMut_T self.current /\ inv_IterMut_T self.final
  
  meta "rewrite_def" predicate invariant_ref_IterMut_T
  
  predicate inv_ref_IterMut_T [@inline:trivial] (_1: MutBorrow.t t_IterMut_T) = invariant_ref_IterMut_T _1
  
  meta "rewrite_def" predicate inv_ref_IterMut_T
  
  predicate resolve_ref_IterMut_T [@inline:trivial] (_1: MutBorrow.t t_IterMut_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_IterMut_T
  
  predicate resolve_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_T
  
  predicate completed_IterMut_T (self: MutBorrow.t t_IterMut_T) =
    resolve_ref_slice_T self.current.inner
    /\ Seq.(==) (Slice64.view self.current.inner.current) (Seq.empty: Seq.seq t_T)
  
  function to_mut_seq_slice_T (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_slice_T_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq_slice_T self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_slice_T_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq_slice_T self)
        -> Seq.get (to_mut_seq_slice_T self) i
        = MutBorrow.borrow_logic (index_slice_T self.current i) (index_slice_T self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces_IterMut_T (self: t_IterMut_T) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.current) = Seq.length visited + Seq.length (Slice64.view tl.inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.inner.current)
      -> (Seq.get (to_mut_seq_slice_T self.inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).current
      /\ (Seq.get (to_mut_seq_slice_T self.inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_IterMut_T (self: MutBorrow.t t_IterMut_T) (return (x: t_Option_ref_T)) =
    {[@expl:next 'self' type invariant] inv_ref_IterMut_T self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_ref_slice_T self.current.inner}
        MutBorrow.borrow_final <MutBorrow.t (Slice64.slice t_T)> {self.current.inner}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) ->
            [ &_3 <- _ret ] -{inv_ref_slice_T _ret.final}-
            [ &self <- { self with current = { inner = _ret.final } } ] s1)
      | s1 = split_off_first_mut_T {_3} (fun (_ret: t_Option_ref_T) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv_ref_IterMut_T self} s1
      | s1 = -{resolve_ref_IterMut_T self}- s2
      | s2 = return {_0} ] ]
    [ & _0: t_Option_ref_T = Any.any_l ()
    | & self: MutBorrow.t t_IterMut_T = self
    | & _3: MutBorrow.t (MutBorrow.t (Slice64.slice t_T)) = Any.any_l () ])
    [ return (result: t_Option_ref_T) -> {[@expl:next result type invariant] inv_Option_ref_T result}
      {[@expl:next ensures] match result with
        | None -> completed_IterMut_T self
        | Some v -> produces_IterMut_T self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_impl_IterMut_T__into_iter (* IterMut<'a, T> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut_T = { inner: MutBorrow.t (Slice64.slice t_T) }
  
  predicate invariant_IterMut_T (self: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.final) = Seq.length (Slice64.view self.inner.current)
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv_slice_T self.current /\ inv_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  predicate inv_IterMut_T (_1: t_IterMut_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_IterMut_T [inv_IterMut_T x]. inv_IterMut_T x
      = (invariant_IterMut_T x /\ inv_ref_slice_T x.inner)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec into_iter_T (self: t_IterMut_T) (return (x: t_IterMut_T)) =
    {[@expl:into_iter 'self' type invariant] inv_IterMut_T self}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- self ] s1 | s1 = return {_0} ] ]
    [ & _0: t_IterMut_T = Any.any_l () | & self: t_IterMut_T = self ])
    [ return (result: t_IterMut_T) -> {[@expl:into_iter result type invariant] inv_IterMut_T result}
      {[@expl:into_iter ensures] result = self}
      (! return {result}) ]
end
module M_iter_mut
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_Vec_T_Global
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate invariant_ref_Vec_T_Global [@inline:trivial] (self: MutBorrow.t t_Vec_T_Global) =
    inv_Vec_T_Global self.current /\ inv_Vec_T_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global
  
  predicate inv_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = invariant_ref_Vec_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global
  
  predicate in_bounds_RangeFull (self: ()) (_seq: Seq.seq t_T) = true
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv_slice_T self.current /\ inv_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  predicate has_value_RangeFull (self: ()) (seq: Seq.seq t_T) (out: Slice64.slice t_T) = seq = Slice64.view out
  
  predicate resolve_elswhere_RangeFull (self: ()) (_old: Seq.seq t_T) (_fin: Seq.seq t_T) = true
  
  let rec index_mut_Vec_T_Global (self_: MutBorrow.t t_Vec_T_Global) (ix: ())
    (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:index_mut 'self_' type invariant] inv_ref_Vec_T_Global self_}
    {[@expl:index_mut requires] in_bounds_RangeFull ix (view_Vec_T_Global self_.current)}
    any
    [ return (result: MutBorrow.t (Slice64.slice t_T)) -> {inv_ref_slice_T result}
      {has_value_RangeFull ix (view_Vec_T_Global self_.current) result.current}
      {has_value_RangeFull ix (view_Vec_T_Global self_.final) result.final}
      {resolve_elswhere_RangeFull ix (view_Vec_T_Global self_.current) (view_Vec_T_Global self_.final)}
      {Seq.length (view_Vec_T_Global self_.final) = Seq.length (view_Vec_T_Global self_.current)}
      (! return {result}) ]
  
  type t_IterMut_T = { inner: MutBorrow.t (Slice64.slice t_T) }
  
  predicate resolve_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_T
  
  predicate resolve_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_T_Global
  
  predicate invariant_IterMut_T (self: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.final) = Seq.length (Slice64.view self.inner.current)
  
  predicate inv_IterMut_T (_1: t_IterMut_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_IterMut_T [inv_IterMut_T x]. inv_IterMut_T x
      = (invariant_IterMut_T x /\ inv_ref_slice_T x.inner)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec iter_mut_T (v: MutBorrow.t t_Vec_T_Global) (return (x: t_IterMut_T)) =
    {[@expl:iter_mut 'v' type invariant] inv_ref_Vec_T_Global v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_Vec_T_Global v.current}
        MutBorrow.borrow_final <t_Vec_T_Global> {v.current} {MutBorrow.get_id v}
          (fun (_ret: MutBorrow.t t_Vec_T_Global) ->
            [ &_8 <- _ret ] -{inv_Vec_T_Global _ret.final}-
            [ &v <- { v with current = _ret.final } ] s1)
      | s1 = [ &_9 <- () ] s2
      | s2 = index_mut_Vec_T_Global {_8} {_9} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_7 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = {inv_slice_T _7.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_6 <- _ret ] -{inv_slice_T _ret.final}-
            [ &_7 <- { _7 with current = _ret.final } ] s1)
      | s1 = {inv_slice_T _6.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_5 <- _ret ] -{inv_slice_T _ret.final}-
            [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = [ &_0 <- { inner = _5 } ] s3
      | s3 = {[@expl:type invariant] inv_ref_slice_T _7} s4
      | s4 = -{resolve_ref_slice_T _7}- s5
      | s5 = {[@expl:type invariant] inv_ref_slice_T _6} s6
      | s6 = -{resolve_ref_slice_T _6}- s7
      | s7 = {[@expl:type invariant] inv_ref_Vec_T_Global v} s8
      | s8 = -{resolve_ref_Vec_T_Global v}- s9
      | s9 = return {_0} ] ]
    [ & _0: t_IterMut_T = Any.any_l ()
    | & v: MutBorrow.t t_Vec_T_Global = v
    | & _5: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _6: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _7: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _8: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & _9: () = Any.any_l () ])
    [ return (result: t_IterMut_T) -> {[@expl:iter_mut result type invariant] inv_IterMut_T result}
      {[@expl:iter_mut ensures #0] Slice64.view result.inner.current = view_Vec_T_Global v.current}
      {[@expl:iter_mut ensures #1] Slice64.view result.inner.final = view_Vec_T_Global v.final}
      {[@expl:iter_mut ensures #2] Seq.length (view_Vec_T_Global v.final) = Seq.length (view_Vec_T_Global v.current)}
      (! return {result}) ]
end
module M_all_zero
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Vec_usize_Global
  
  type t_IterMut_usize = { inner: MutBorrow.t (Slice64.slice UInt64.t) }
  
  predicate invariant_IterMut_usize (self: t_IterMut_usize) =
    Seq.length (Slice64.view self.inner.final) = Seq.length (Slice64.view self.inner.current)
  
  predicate inv_IterMut_usize (_1: t_IterMut_usize)
  
  axiom inv_axiom [@rewrite]: forall x: t_IterMut_usize [inv_IterMut_usize x]. inv_IterMut_usize x
      = invariant_IterMut_usize x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_usize_Global (self: t_Vec_usize_Global) : Seq.seq UInt64.t
  
  axiom view_Vec_usize_Global_spec: forall self: t_Vec_usize_Global. Seq.length (view_Vec_usize_Global self)
      <= UInt64.t'int const_MAX
  
  let rec iter_mut_usize (v: MutBorrow.t t_Vec_usize_Global) (return (x: t_IterMut_usize)) = any
    [ return (result: t_IterMut_usize) -> {inv_IterMut_usize result}
      {Slice64.view result.inner.current = view_Vec_usize_Global v.current}
      {Slice64.view result.inner.final = view_Vec_usize_Global v.final}
      {Seq.length (view_Vec_usize_Global v.final) = Seq.length (view_Vec_usize_Global v.current)}
      (! return {result}) ]
  
  let rec into_iter_usize (self: t_IterMut_usize) (return (x: t_IterMut_usize)) =
    {[@expl:into_iter 'self' type invariant] inv_IterMut_usize self}
    any [ return (result: t_IterMut_usize) -> {inv_IterMut_usize result} {result = self} (! return {result}) ]
  
  function index_slice_usize [@inline:trivial] (self: Slice64.slice UInt64.t) (ix: int) : UInt64.t =
    Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_usize
  
  function to_mut_seq_slice_usize (self: MutBorrow.t (Slice64.slice UInt64.t)) : Seq.seq (MutBorrow.t UInt64.t)
  
  axiom to_mut_seq_slice_usize_spec:
    forall self: MutBorrow.t (Slice64.slice UInt64.t). Seq.length (to_mut_seq_slice_usize self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_slice_usize_spec'0: forall self: MutBorrow.t (Slice64.slice UInt64.t). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq_slice_usize self)
        -> Seq.get (to_mut_seq_slice_usize self) i
        = MutBorrow.borrow_logic (index_slice_usize self.current i) (index_slice_usize self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces_IterMut_usize (self: t_IterMut_usize) (visited: Seq.seq (MutBorrow.t UInt64.t)) (tl: t_IterMut_usize) =
    Seq.length (Slice64.view self.inner.current) = Seq.length visited + Seq.length (Slice64.view tl.inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.inner.current)
      -> (Seq.get (to_mut_seq_slice_usize self.inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq_slice_usize tl.inner)) i).current
      /\ (Seq.get (to_mut_seq_slice_usize self.inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq_slice_usize tl.inner)) i).final)
  
  function produces_trans_IterMut_usize (a: t_IterMut_usize) (ab: Seq.seq (MutBorrow.t UInt64.t)) (b: t_IterMut_usize) (bc: Seq.seq (MutBorrow.t UInt64.t)) (c: t_IterMut_usize) : ()
   = ()
  
  axiom produces_trans_IterMut_usize_spec:
    forall a: t_IterMut_usize, ab: Seq.seq (MutBorrow.t UInt64.t), b: t_IterMut_usize, bc: Seq.seq (MutBorrow.t UInt64.t), c: t_IterMut_usize. produces_IterMut_usize a ab b
      -> produces_IterMut_usize b bc c -> produces_IterMut_usize a (Seq.(++) ab bc) c
  
  function produces_refl_IterMut_usize (self: t_IterMut_usize) : () = ()
  
  axiom produces_refl_IterMut_usize_spec:
    forall self: t_IterMut_usize. produces_IterMut_usize self (Seq.empty: Seq.seq (MutBorrow.t UInt64.t)) self
  
  type t_Option_ref_usize = None | Some (MutBorrow.t UInt64.t)
  
  predicate invariant_ref_IterMut_usize [@inline:trivial] (self: MutBorrow.t t_IterMut_usize) =
    inv_IterMut_usize self.current /\ inv_IterMut_usize self.final
  
  meta "rewrite_def" predicate invariant_ref_IterMut_usize
  
  predicate inv_ref_IterMut_usize [@inline:trivial] (_1: MutBorrow.t t_IterMut_usize) = invariant_ref_IterMut_usize _1
  
  meta "rewrite_def" predicate inv_ref_IterMut_usize
  
  predicate resolve_ref_slice_usize [@inline:trivial] (_1: MutBorrow.t (Slice64.slice UInt64.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_usize
  
  predicate completed_IterMut_usize (self: MutBorrow.t t_IterMut_usize) =
    resolve_ref_slice_usize self.current.inner
    /\ Seq.(==) (Slice64.view self.current.inner.current) (Seq.empty: Seq.seq UInt64.t)
  
  let rec next_IterMut_usize (self: MutBorrow.t t_IterMut_usize) (return (x: t_Option_ref_usize)) =
    {[@expl:next 'self' type invariant] inv_ref_IterMut_usize self}
    any
    [ return (result: t_Option_ref_usize) -> {match result with
        | None -> completed_IterMut_usize self
        | Some v -> produces_IterMut_usize self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_ref_usize) (ret (f0: MutBorrow.t UInt64.t)) = any
    [ good (f0: MutBorrow.t UInt64.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: MutBorrow.t UInt64.t [Some f0: t_Option_ref_usize]. Some f0 <> input} (! {false} any) ]
  
  predicate resolve_ref_usize [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_usize
  
  predicate resolve_IterMut_usize (_1: t_IterMut_usize)
  
  axiom resolve_axiom [@rewrite]: forall x: t_IterMut_usize [resolve_IterMut_usize x]. resolve_IterMut_usize x
      = resolve_ref_slice_usize x.inner
  
  predicate resolve_ref_Vec_usize_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_usize_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_usize_Global
  
  function index_Vec_usize_Global [@inline:trivial] (self: t_Vec_usize_Global) (ix: int) : UInt64.t =
    Seq.get (view_Vec_usize_Global self) ix
  
  meta "rewrite_def" function index_Vec_usize_Global
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec all_zero (v: MutBorrow.t t_Vec_usize_Global) (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec_usize_Global> {v.current} {MutBorrow.get_id v}
          (fun (_ret: MutBorrow.t t_Vec_usize_Global) -> [ &_6 <- _ret ] [ &v <- { v with current = _ret.final } ] s1)
      | s1 = iter_mut_usize {_6} (fun (_ret: t_IterMut_usize) -> [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = into_iter_usize {_5} (fun (_ret: t_IterMut_usize) -> [ &it <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- it ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq (MutBorrow.t UInt64.t) ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant #0] inv_IterMut_usize it}
        {[@expl:loop invariant #1] produces_IterMut_usize iter_old produced it}
        {[@expl:loop invariant #2] forall i: int. 0 <= i /\ i < Seq.length produced
          -> UInt64.t'int (Seq.get produced i).final = 0}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = {inv_IterMut_usize it}
            MutBorrow.borrow_mut <t_IterMut_usize> {it}
              (fun (_ret: MutBorrow.t t_IterMut_usize) ->
                [ &_17 <- _ret ] -{inv_IterMut_usize _ret.final}-
                [ &it <- _ret.final ] s1)
          | s1 = next_IterMut_usize {_17} (fun (_ret: t_Option_ref_usize) -> [ &_16 <- _ret ] s2)
          | s2 = bb7 ]
        | bb7 = any [ br0 -> {_16 = None} (! bb10) | br1 (x0: MutBorrow.t UInt64.t) -> {_16 = Some x0} (! bb11) ]
        | bb11 = s0
          [ s0 = elim_Some {_16} (fun (r0: MutBorrow.t UInt64.t) -> [ &x <- r0 ] s1)
          | s1 = [ &_20 <- Seq.(++) produced (Seq.singleton x) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _20 ] s1
          | s1 = [ &x <- { x with current = (0: UInt64.t) } ] s2
          | s2 = -{resolve_ref_usize x}- s3
          | s3 = bb5 ] ] ]
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv_IterMut_usize it} s1
      | s1 = -{resolve_IterMut_usize it}- s2
      | s2 = -{resolve_ref_Vec_usize_Global v}- s3
      | s3 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec_usize_Global = v
    | & it: t_IterMut_usize = Any.any_l ()
    | & _5: t_IterMut_usize = Any.any_l ()
    | & _6: MutBorrow.t t_Vec_usize_Global = Any.any_l ()
    | & iter_old: t_IterMut_usize = Any.any_l ()
    | & produced: Seq.seq (MutBorrow.t UInt64.t) = Any.any_l ()
    | & _16: t_Option_ref_usize = Any.any_l ()
    | & _17: MutBorrow.t t_IterMut_usize = Any.any_l ()
    | & x: MutBorrow.t UInt64.t = Any.any_l ()
    | & _20: Seq.seq (MutBorrow.t UInt64.t) = Any.any_l () ])
    [ return (result: ()) -> {[@expl:all_zero ensures #0] Seq.length (view_Vec_usize_Global v.final)
      = Seq.length (view_Vec_usize_Global v.current)}
      {[@expl:all_zero ensures #1] forall i: int. 0 <= i /\ i < Seq.length (view_Vec_usize_Global v.current)
        -> UInt64.t'int (index_Vec_usize_Global v.final i) = 0}
      (! return {result}) ]
end
module M_impl_Iterator_for_IterMut_T__produces_trans__refines (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut_T = { inner: MutBorrow.t (Slice64.slice t_T) }
  
  function index_slice_T [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_T
  
  function to_mut_seq_slice_T (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_slice_T_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq_slice_T self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_slice_T_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq_slice_T self)
        -> Seq.get (to_mut_seq_slice_T self) i
        = MutBorrow.borrow_logic (index_slice_T self.current i) (index_slice_T self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces_IterMut_T (self: t_IterMut_T) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.current) = Seq.length visited + Seq.length (Slice64.view tl.inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.inner.current)
      -> (Seq.get (to_mut_seq_slice_T self.inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).current
      /\ (Seq.get (to_mut_seq_slice_T self.inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_IterMut_T. forall ab: Seq.seq (MutBorrow.t t_T). forall b: t_IterMut_T. forall bc: Seq.seq (MutBorrow.t t_T). forall c: t_IterMut_T. produces_IterMut_T b bc c
                /\ produces_IterMut_T a ab b
              -> produces_IterMut_T b bc c
              /\ produces_IterMut_T a ab b
              /\ (forall result: (). produces_IterMut_T a (Seq.(++) ab bc) c -> produces_IterMut_T a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_IterMut_T__next__refines (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut_T = { inner: MutBorrow.t (Slice64.slice t_T) }
  
  predicate invariant_IterMut_T (self: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.final) = Seq.length (Slice64.view self.inner.current)
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv_slice_T self.current /\ inv_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  predicate inv_IterMut_T (_1: t_IterMut_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_IterMut_T [inv_IterMut_T x]. inv_IterMut_T x
      = (invariant_IterMut_T x /\ inv_ref_slice_T x.inner)
  
  predicate invariant_ref_IterMut_T [@inline:trivial] (self: MutBorrow.t t_IterMut_T) =
    inv_IterMut_T self.current /\ inv_IterMut_T self.final
  
  meta "rewrite_def" predicate invariant_ref_IterMut_T
  
  predicate inv_ref_IterMut_T [@inline:trivial] (_1: MutBorrow.t t_IterMut_T) = invariant_ref_IterMut_T _1
  
  meta "rewrite_def" predicate inv_ref_IterMut_T
  
  type t_Option_ref_T = None | Some (MutBorrow.t t_T)
  
  predicate resolve_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_T
  
  predicate completed_IterMut_T (self: MutBorrow.t t_IterMut_T) =
    resolve_ref_slice_T self.current.inner
    /\ Seq.(==) (Slice64.view self.current.inner.current) (Seq.empty: Seq.seq t_T)
  
  function index_slice_T [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_T
  
  function to_mut_seq_slice_T (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_slice_T_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq_slice_T self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_slice_T_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq_slice_T self)
        -> Seq.get (to_mut_seq_slice_T self) i
        = MutBorrow.borrow_logic (index_slice_T self.current i) (index_slice_T self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces_IterMut_T (self: t_IterMut_T) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.current) = Seq.length visited + Seq.length (Slice64.view tl.inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.inner.current)
      -> (Seq.get (to_mut_seq_slice_T self.inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).current
      /\ (Seq.get (to_mut_seq_slice_T self.inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).final)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate inv_Option_ref_T (_1: t_Option_ref_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_ref_T [inv_Option_ref_T x]. inv_Option_ref_T x
      = match x with
        | None -> true
        | Some f0 -> inv_ref_T f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_IterMut_T. inv_ref_IterMut_T self
      -> inv_ref_IterMut_T self
      /\ (forall result: t_Option_ref_T. match result with
              | None -> completed_IterMut_T self
              | Some v -> produces_IterMut_T self.current (Seq.singleton v) self.final
              end
          /\ inv_Option_ref_T result
        -> match result with
            | None -> completed_IterMut_T self
            | Some v -> produces_IterMut_T self.current (Seq.singleton v) self.final
            end
        /\ inv_Option_ref_T result)
end
module M_impl_Iterator_for_IterMut_T__produces_refl__refines (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut_T = { inner: MutBorrow.t (Slice64.slice t_T) }
  
  function index_slice_T [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_T
  
  function to_mut_seq_slice_T (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_slice_T_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq_slice_T self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_slice_T_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq_slice_T self)
        -> Seq.get (to_mut_seq_slice_T self) i
        = MutBorrow.borrow_logic (index_slice_T self.current i) (index_slice_T self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces_IterMut_T (self: t_IterMut_T) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut_T) =
    Seq.length (Slice64.view self.inner.current) = Seq.length visited + Seq.length (Slice64.view tl.inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.inner.current)
      -> (Seq.get (to_mut_seq_slice_T self.inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).current
      /\ (Seq.get (to_mut_seq_slice_T self.inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq_slice_T tl.inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall self: t_IterMut_T. forall result: (). produces_IterMut_T self (Seq.empty: Seq.seq (MutBorrow.t t_T)) self
        -> produces_IterMut_T self (Seq.empty: Seq.seq (MutBorrow.t t_T)) self
end
