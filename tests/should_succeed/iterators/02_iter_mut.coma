module M_02_iter_mut__qyi17529651713103399036__produces_refl (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice t_T) }
  
  function index_logic [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  function to_mut_seq (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq self)
        -> Seq.get (to_mut_seq self) i
        = MutBorrow.borrow_logic (index_logic self.current i) (index_logic self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces (self: t_IterMut) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.current)
      = Seq.length visited + Seq.length (Slice64.view tl.t_IterMut__inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.t_IterMut__inner.current)
      -> (Seq.get (to_mut_seq self.t_IterMut__inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).current
      /\ (Seq.get (to_mut_seq self.t_IterMut__inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_IterMut
  
  function produces_refl (self: t_IterMut) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] produces self (Seq.empty: Seq.seq (MutBorrow.t t_T)) self
end
module M_02_iter_mut__qyi17529651713103399036__produces_trans (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice t_T) }
  
  function index_logic [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  function to_mut_seq (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq self)
        -> Seq.get (to_mut_seq self) i
        = MutBorrow.borrow_logic (index_logic self.current i) (index_logic self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces (self: t_IterMut) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.current)
      = Seq.length visited + Seq.length (Slice64.view tl.t_IterMut__inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.t_IterMut__inner.current)
      -> (Seq.get (to_mut_seq self.t_IterMut__inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).current
      /\ (Seq.get (to_mut_seq self.t_IterMut__inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_IterMut
  
  constant ab : Seq.seq (MutBorrow.t t_T)
  
  constant b : t_IterMut
  
  constant bc : Seq.seq (MutBorrow.t t_T)
  
  constant c : t_IterMut
  
  function produces_trans (a: t_IterMut) (ab: Seq.seq (MutBorrow.t t_T)) (b: t_IterMut) (bc: Seq.seq (MutBorrow.t t_T)) (c: t_IterMut) : ()
  
  goal vc_produces_trans: produces a ab b
    -> produces b bc c -> ([@expl:produces_trans ensures] produces a (Seq.(++) ab bc) c)
end
module M_02_iter_mut__qyi17529651713103399036__next (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice t_T) }
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''1 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'2 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  type t_Option = C_None | C_Some (MutBorrow.t t_T)
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) =
    inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 [@inline:trivial] (_1: MutBorrow.t t_T) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'5
  
  predicate inv'6 (_1: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'6 x]. inv'6 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'5 a_0
        end
  
  function index_logic [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  function tail (self: Seq.seq t_T) : Seq.seq t_T = Seq.([..]) self 1 (Seq.length self)
  
  let rec split_off_first_mut (self_: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) (return (x: t_Option)) =
    {[@expl:split_off_first_mut 'self_' type invariant] inv'4 self_}
    any
    [ return (result: t_Option) -> {inv'6 result}
      {match result with
        | C_Some r -> r.current = index_logic self_.current.current 0
        /\ r.final = index_logic self_.current.final 0
        /\ Seq.length (Slice64.view self_.current.current) > 0
        /\ Seq.length (Slice64.view self_.current.final) > 0
        /\ Slice64.view self_.final.current = tail (Slice64.view self_.current.current)
        /\ Slice64.view self_.final.final = tail (Slice64.view self_.current.final)
        | C_None -> Slice64.view self_.final.current = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.current.final = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.current.current = (Seq.empty: Seq.seq t_T)
        /\ Slice64.view self_.final.final = (Seq.empty: Seq.seq t_T)
        end}
      (! return {result}) ]
  
  predicate invariant''5 (self: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.final) = Seq.length (Slice64.view self.t_IterMut__inner.current)
  
  predicate inv'7 (_1: t_IterMut)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_IterMut [inv'7 x]. inv'7 x = (invariant''5 x /\ inv'3 x.t_IterMut__inner)
  
  predicate invariant''6 [@inline:trivial] (self: MutBorrow.t t_IterMut) = inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'8 [@inline:trivial] (_1: MutBorrow.t t_IterMut) = invariant''6 _1
  
  meta "rewrite_def" predicate inv'8
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_IterMut) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate completed (self: MutBorrow.t t_IterMut) =
    resolve'0 self.current.t_IterMut__inner
    /\ Seq.(==) (Slice64.view self.current.t_IterMut__inner.current) (Seq.empty: Seq.seq t_T)
  
  function to_mut_seq (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq self)
        -> Seq.get (to_mut_seq self) i
        = MutBorrow.borrow_logic (index_logic self.current i) (index_logic self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces (self: t_IterMut) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.current)
      = Seq.length visited + Seq.length (Slice64.view tl.t_IterMut__inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.t_IterMut__inner.current)
      -> (Seq.get (to_mut_seq self.t_IterMut__inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).current
      /\ (Seq.get (to_mut_seq self.t_IterMut__inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next (self: MutBorrow.t t_IterMut) (return (x: t_Option)) = {[@expl:next 'self' type invariant] inv'8 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'3 self.current.t_IterMut__inner}
        MutBorrow.borrow_final <MutBorrow.t (Slice64.slice t_T)> {self.current.t_IterMut__inner}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) ->
            [ &_3 <- _ret ] -{inv'3 _ret.final}-
            [ &self <- { self with current = { t_IterMut__inner = _ret.final } } ] s1)
      | s1 = split_off_first_mut {_3} (fun (_ret: t_Option) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'8 self} s1 | s1 = -{resolve self}- s2 | s2 = return {_0} ] ]
    [ & _0: t_Option = Any.any_l ()
    | & self: MutBorrow.t t_IterMut = self
    | & _3: MutBorrow.t (MutBorrow.t (Slice64.slice t_T)) = Any.any_l () ])
    [ return (result: t_Option) -> {[@expl:next result type invariant] inv'6 result}
      {[@expl:next ensures] match result with
        | C_None -> completed self
        | C_Some v -> produces self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_02_iter_mut__qyi13152079231411878505__into_iter (* IterMut<'a, T> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice t_T) }
  
  predicate invariant' (self: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.final) = Seq.length (Slice64.view self.t_IterMut__inner.current)
  
  predicate inv (_1: t_T)
  
  predicate invariant''0 (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''2 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'2 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate inv'4 (_1: t_IterMut)
  
  axiom inv_axiom [@rewrite]: forall x: t_IterMut [inv'4 x]. inv'4 x = (invariant' x /\ inv'3 x.t_IterMut__inner)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec into_iter (self: t_IterMut) (return (x: t_IterMut)) = {[@expl:into_iter 'self' type invariant] inv'4 self}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- self ] s1 | s1 = return {_0} ] ]
    [ & _0: t_IterMut = Any.any_l () | & self: t_IterMut = self ])
    [ return (result: t_IterMut) -> {[@expl:into_iter result type invariant] inv'4 result}
      {[@expl:into_iter ensures] result = self}
      (! return {result}) ]
end
module M_02_iter_mut__iter_mut
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom: forall x: t_Vec [inv'2 x]. inv'2 x -> invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t t_Vec) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate in_bounds (self: ()) (_seq: Seq.seq t_T) = true
  
  predicate invariant''3 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'4 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'4 self.current /\ inv'4 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'5
  
  predicate has_value (self: ()) (seq: Seq.seq t_T) (out: Slice64.slice t_T) = seq = Slice64.view out
  
  predicate resolve_elswhere (self: ()) (_old: Seq.seq t_T) (_fin: Seq.seq t_T) = true
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: ()) (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:index_mut 'self_' type invariant] inv'3 self_}
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return (result: MutBorrow.t (Slice64.slice t_T)) -> {inv'5 result}
      {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return {result}) ]
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice t_T) }
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Vec) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate invariant''5 (self: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.final) = Seq.length (Slice64.view self.t_IterMut__inner.current)
  
  predicate inv'6 (_1: t_IterMut)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_IterMut [inv'6 x]. inv'6 x = (invariant''5 x /\ inv'5 x.t_IterMut__inner)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec iter_mut (v: MutBorrow.t t_Vec) (return (x: t_IterMut)) = {[@expl:iter_mut 'v' type invariant] inv'3 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 v.current}
        MutBorrow.borrow_final <t_Vec> {v.current} {MutBorrow.get_id v}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_8 <- _ret ] -{inv'2 _ret.final}-
            [ &v <- { v with current = _ret.final } ] s1)
      | s1 = [ &_9 <- () ] s2
      | s2 = index_mut {_8} {_9} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_7 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'4 _7.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_6 <- _ret ] -{inv'4 _ret.final}-
            [ &_7 <- { _7 with current = _ret.final } ] s1)
      | s1 = {inv'4 _6.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_5 <- _ret ] -{inv'4 _ret.final}-
            [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = [ &_0 <- { t_IterMut__inner = _5 } ] s3
      | s3 = {[@expl:type invariant] inv'5 _7} s4
      | s4 = -{resolve _7}- s5
      | s5 = {[@expl:type invariant] inv'5 _6} s6
      | s6 = -{resolve _6}- s7
      | s7 = {[@expl:type invariant] inv'3 v} s8
      | s8 = -{resolve'0 v}- s9
      | s9 = return {_0} ] ]
    [ & _0: t_IterMut = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & _5: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _6: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _7: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _8: MutBorrow.t t_Vec = Any.any_l ()
    | & _9: () = Any.any_l () ])
    [ return (result: t_IterMut) -> {[@expl:iter_mut result type invariant] inv'6 result}
      {[@expl:iter_mut ensures #0] Slice64.view result.t_IterMut__inner.current = view v.current}
      {[@expl:iter_mut ensures #1] Slice64.view result.t_IterMut__inner.final = view v.final}
      {[@expl:iter_mut ensures #2] Seq.length (view v.final) = Seq.length (view v.current)}
      (! return {result}) ]
end
module M_02_iter_mut__all_zero
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice UInt64.t) }
  
  predicate invariant' (self: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.final) = Seq.length (Slice64.view self.t_IterMut__inner.current)
  
  predicate inv (_1: t_IterMut)
  
  axiom inv_axiom [@rewrite]: forall x: t_IterMut [inv x]. inv x = invariant' x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec iter_mut (v: MutBorrow.t t_Vec) (return (x: t_IterMut)) = any
    [ return (result: t_IterMut) -> {inv result}
      {Slice64.view result.t_IterMut__inner.current = view v.current}
      {Slice64.view result.t_IterMut__inner.final = view v.final}
      {Seq.length (view v.final) = Seq.length (view v.current)}
      (! return {result}) ]
  
  let rec into_iter (self: t_IterMut) (return (x: t_IterMut)) = {[@expl:into_iter 'self' type invariant] inv self}
    any [ return (result: t_IterMut) -> {inv result} {result = self} (! return {result}) ]
  
  function index_logic [@inline:trivial] (self: Slice64.slice UInt64.t) (ix: int) : UInt64.t =
    Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  function to_mut_seq (self: MutBorrow.t (Slice64.slice UInt64.t)) : Seq.seq (MutBorrow.t UInt64.t)
  
  axiom to_mut_seq_spec: forall self: MutBorrow.t (Slice64.slice UInt64.t). Seq.length (to_mut_seq self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_spec'0: forall self: MutBorrow.t (Slice64.slice UInt64.t). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq self)
        -> Seq.get (to_mut_seq self) i
        = MutBorrow.borrow_logic (index_logic self.current i) (index_logic self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces (self: t_IterMut) (visited: Seq.seq (MutBorrow.t UInt64.t)) (tl: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.current)
      = Seq.length visited + Seq.length (Slice64.view tl.t_IterMut__inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.t_IterMut__inner.current)
      -> (Seq.get (to_mut_seq self.t_IterMut__inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).current
      /\ (Seq.get (to_mut_seq self.t_IterMut__inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).final)
  
  function produces_trans (a: t_IterMut) (ab: Seq.seq (MutBorrow.t UInt64.t)) (b: t_IterMut) (bc: Seq.seq (MutBorrow.t UInt64.t)) (c: t_IterMut) : ()
   = ()
  
  axiom produces_trans_spec:
    forall a: t_IterMut, ab: Seq.seq (MutBorrow.t UInt64.t), b: t_IterMut, bc: Seq.seq (MutBorrow.t UInt64.t), c: t_IterMut. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_IterMut) : () = ()
  
  axiom produces_refl_spec: forall self: t_IterMut. produces self (Seq.empty: Seq.seq (MutBorrow.t UInt64.t)) self
  
  type t_Option = C_None | C_Some (MutBorrow.t UInt64.t)
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_IterMut) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 [@inline:trivial] (_1: MutBorrow.t t_IterMut) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice UInt64.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_IterMut) =
    resolve self.current.t_IterMut__inner
    /\ Seq.(==) (Slice64.view self.current.t_IterMut__inner.current) (Seq.empty: Seq.seq UInt64.t)
  
  let rec next (self: MutBorrow.t t_IterMut) (return (x: t_Option)) = {[@expl:next 'self' type invariant] inv'0 self}
    any
    [ return (result: t_Option) -> {match result with
        | C_None -> completed self
        | C_Some v -> produces self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: MutBorrow.t UInt64.t)) = any
    [ good (field_0: MutBorrow.t UInt64.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: MutBorrow.t UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input}
      (! {false}
      any) ]
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 (_1: t_IterMut)
  
  axiom resolve_axiom [@rewrite]: forall x: t_IterMut [resolve'1 x]. resolve'1 x = resolve x.t_IterMut__inner
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t t_Vec) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'2
  
  function index_logic'0 [@inline:trivial] (self: t_Vec) (ix: int) : UInt64.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec all_zero (v: MutBorrow.t t_Vec) (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec> {v.current} {MutBorrow.get_id v}
          (fun (_ret: MutBorrow.t t_Vec) -> [ &_6 <- _ret ] [ &v <- { v with current = _ret.final } ] s1)
      | s1 = iter_mut {_6} (fun (_ret: t_IterMut) -> [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = into_iter {_5} (fun (_ret: t_IterMut) -> [ &it <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- it ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq (MutBorrow.t UInt64.t) ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant #0] inv it}
        {[@expl:loop invariant #1] produces iter_old produced it}
        {[@expl:loop invariant #2] forall i: int. 0 <= i /\ i < Seq.length produced
          -> UInt64.t'int (Seq.get produced i).final = 0}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = {inv it}
            MutBorrow.borrow_mut <t_IterMut> {it}
              (fun (_ret: MutBorrow.t t_IterMut) -> [ &_17 <- _ret ] -{inv _ret.final}- [ &it <- _ret.final ] s1)
          | s1 = next {_17} (fun (_ret: t_Option) -> [ &_16 <- _ret ] s2)
          | s2 = bb7 ]
        | bb7 = any [ br0 -> {_16 = C_None} (! bb10) | br1 (x0: MutBorrow.t UInt64.t) -> {_16 = C_Some x0} (! bb11) ]
        | bb11 = s0
          [ s0 = v_Some {_16} (fun (r0: MutBorrow.t UInt64.t) -> [ &x <- r0 ] s1)
          | s1 = [ &_20 <- Seq.(++) produced (Seq.singleton x) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _20 ] s1
          | s1 = [ &x <- { x with current = (0: UInt64.t) } ] s2
          | s2 = -{resolve'0 x}- s3
          | s3 = bb5 ] ] ]
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv it} s1
      | s1 = -{resolve'1 it}- s2
      | s2 = -{resolve'2 v}- s3
      | s3 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & it: t_IterMut = Any.any_l ()
    | & _5: t_IterMut = Any.any_l ()
    | & _6: MutBorrow.t t_Vec = Any.any_l ()
    | & iter_old: t_IterMut = Any.any_l ()
    | & produced: Seq.seq (MutBorrow.t UInt64.t) = Any.any_l ()
    | & _16: t_Option = Any.any_l ()
    | & _17: MutBorrow.t t_IterMut = Any.any_l ()
    | & x: MutBorrow.t UInt64.t = Any.any_l ()
    | & _20: Seq.seq (MutBorrow.t UInt64.t) = Any.any_l () ])
    [ return (result: ()) -> {[@expl:all_zero ensures #0] Seq.length (view v.final) = Seq.length (view v.current)}
      {[@expl:all_zero ensures #1] forall i: int. 0 <= i /\ i < Seq.length (view v.current)
        -> UInt64.t'int (index_logic'0 v.final i) = 0}
      (! return {result}) ]
end
module M_02_iter_mut__qyi17529651713103399036__produces_trans__refines (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice t_T) }
  
  function index_logic [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  function to_mut_seq (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq self)
        -> Seq.get (to_mut_seq self) i
        = MutBorrow.borrow_logic (index_logic self.current i) (index_logic self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces (self: t_IterMut) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.current)
      = Seq.length visited + Seq.length (Slice64.view tl.t_IterMut__inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.t_IterMut__inner.current)
      -> (Seq.get (to_mut_seq self.t_IterMut__inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).current
      /\ (Seq.get (to_mut_seq self.t_IterMut__inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_IterMut. forall ab: Seq.seq (MutBorrow.t t_T). forall b: t_IterMut. forall bc: Seq.seq (MutBorrow.t t_T). forall c: t_IterMut. produces b bc c
                /\ produces a ab b
              -> produces b bc c
              /\ produces a ab b /\ (forall result: (). produces a (Seq.(++) ab bc) c -> produces a (Seq.(++) ab bc) c)
end
module M_02_iter_mut__qyi17529651713103399036__next__refines (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice t_T) }
  
  predicate invariant' (self: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.final) = Seq.length (Slice64.view self.t_IterMut__inner.current)
  
  predicate inv (_1: t_T)
  
  predicate invariant''0 (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''2 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'2 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate inv'4 (_1: t_IterMut)
  
  axiom inv_axiom [@rewrite]: forall x: t_IterMut [inv'4 x]. inv'4 x = (invariant' x /\ inv'3 x.t_IterMut__inner)
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_IterMut) = inv'4 self.current /\ inv'4 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 [@inline:trivial] (_1: MutBorrow.t t_IterMut) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'5
  
  type t_Option = C_None | C_Some (MutBorrow.t t_T)
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_IterMut) =
    resolve self.current.t_IterMut__inner
    /\ Seq.(==) (Slice64.view self.current.t_IterMut__inner.current) (Seq.empty: Seq.seq t_T)
  
  function index_logic [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  function to_mut_seq (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq self)
        -> Seq.get (to_mut_seq self) i
        = MutBorrow.borrow_logic (index_logic self.current i) (index_logic self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces (self: t_IterMut) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.current)
      = Seq.length visited + Seq.length (Slice64.view tl.t_IterMut__inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.t_IterMut__inner.current)
      -> (Seq.get (to_mut_seq self.t_IterMut__inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).current
      /\ (Seq.get (to_mut_seq self.t_IterMut__inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).final)
  
  predicate invariant''5 [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'6 [@inline:trivial] (_1: MutBorrow.t t_T) = invariant''5 _1
  
  meta "rewrite_def" predicate inv'6
  
  predicate inv'7 (_1: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'7 x]. inv'7 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'6 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_IterMut. inv'5 self
      -> inv'5 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed self
              | C_Some v -> produces self.current (Seq.singleton v) self.final
              end
          /\ inv'7 result
        -> match result with
            | C_None -> completed self
            | C_Some v -> produces self.current (Seq.singleton v) self.final
            end
        /\ inv'7 result)
end
module M_02_iter_mut__qyi17529651713103399036__produces_refl__refines (* <IterMut<'a, T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  type t_T
  
  type t_IterMut = { t_IterMut__inner: MutBorrow.t (Slice64.slice t_T) }
  
  function index_logic [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  function to_mut_seq (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq (MutBorrow.t t_T)
  
  axiom to_mut_seq_spec: forall self: MutBorrow.t (Slice64.slice t_T). Seq.length (to_mut_seq self)
      = Seq.length (Slice64.view self.current)
  
  axiom to_mut_seq_spec'0: forall self: MutBorrow.t (Slice64.slice t_T). forall i: int. 0 <= i
          /\ i < Seq.length (to_mut_seq self)
        -> Seq.get (to_mut_seq self) i
        = MutBorrow.borrow_logic (index_logic self.current i) (index_logic self.final i) (MutBorrow.inherit_id (MutBorrow.get_id self) i)
  
  predicate produces (self: t_IterMut) (visited: Seq.seq (MutBorrow.t t_T)) (tl: t_IterMut) =
    Seq.length (Slice64.view self.t_IterMut__inner.current)
      = Seq.length visited + Seq.length (Slice64.view tl.t_IterMut__inner.current)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view self.t_IterMut__inner.current)
      -> (Seq.get (to_mut_seq self.t_IterMut__inner) i).current
        = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).current
      /\ (Seq.get (to_mut_seq self.t_IterMut__inner) i).final
      = (Seq.get (Seq.(++) visited (to_mut_seq tl.t_IterMut__inner)) i).final)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_IterMut. forall result: (). produces self (Seq.empty: Seq.seq (MutBorrow.t t_T)) self
        -> produces self (Seq.empty: Seq.seq (MutBorrow.t t_T)) self
end
