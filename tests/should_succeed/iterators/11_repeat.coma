module M_11_repeat__qyi12123383775959562970__produces_refl (* <Repeat<A> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat = { t_Repeat__element: t_A }
  
  predicate inv (_1: t_A)
  
  predicate postcondition_once (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef: forall args: t_A, res: t_A [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1: forall args: t_A, res: t_A [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces (self: t_Repeat) (visited: Seq.seq t_A) (o: t_Repeat) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition () self.t_Repeat__element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Repeat
  
  function produces_refl (self: t_Repeat) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] produces self (Seq.empty: Seq.seq t_A) self
end
module M_11_repeat__qyi12123383775959562970__produces_trans (* <Repeat<A> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat = { t_Repeat__element: t_A }
  
  predicate inv (_1: t_A)
  
  predicate postcondition_once (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef: forall args: t_A, res: t_A [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1: forall args: t_A, res: t_A [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces (self: t_Repeat) (visited: Seq.seq t_A) (o: t_Repeat) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition () self.t_Repeat__element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Repeat
  
  constant ab : Seq.seq t_A
  
  constant b : t_Repeat
  
  constant bc : Seq.seq t_A
  
  constant c : t_Repeat
  
  function produces_trans (a: t_Repeat) (ab: Seq.seq t_A) (b: t_Repeat) (bc: Seq.seq t_A) (c: t_Repeat) : ()
  
  goal vc_produces_trans: produces a ab b
    -> produces b bc c -> ([@expl:produces_trans ensures] produces a (Seq.(++) ab bc) c)
end
module M_11_repeat__qyi12123383775959562970__next (* <Repeat<A> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat = { t_Repeat__element: t_A }
  
  predicate inv (_1: t_A)
  
  predicate inv'0 (_1: t_Repeat)
  
  axiom inv_axiom [@rewrite]: forall x: t_Repeat [inv'0 x]. inv'0 x = inv x.t_Repeat__element
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Repeat) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 [@inline:trivial] (_1: MutBorrow.t t_Repeat) = invariant' _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_Repeat) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate invariant''0 [@inline:trivial] (self: t_A) = inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 [@inline:trivial] (_1: t_A) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate precondition (self: ()) (args: t_A)
  
  axiom precondition_fndef: forall args: t_A [precondition () args]. (let self_ = args in inv'2 self_)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef: forall args: t_A, res: t_A [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  let rec clone' (self_: t_A) (return (x: t_A)) = {[@expl:clone requires] precondition () self_}
    any [ return (result: t_A) -> {postcondition_once () self_ result} (! return {result}) ]
  
  type t_Option = C_None | C_Some t_A
  
  predicate inv'3 (_1: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'3 x]. inv'3 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate completed (self: MutBorrow.t t_Repeat) = false
  
  predicate resolve'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve'0
  
  predicate postcondition_mut (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1: forall args: t_A, res: t_A [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (postcondition self args res /\ resolve'0 self)
  
  function fn_mut (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces (self: t_Repeat) (visited: Seq.seq t_A) (o: t_Repeat) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition () self.t_Repeat__element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next (self: MutBorrow.t t_Repeat) (return (x: t_Option)) = {[@expl:next 'self' type invariant] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve self}- s2
      | s2 = clone' {self.current.t_Repeat__element} (fun (_ret: t_A) -> [ &_3 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- C_Some _3 ] s1 | s1 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: t_Option = Any.any_l () | & self: MutBorrow.t t_Repeat = self | & _3: t_A = Any.any_l () ])
    [ return (result: t_Option) -> {[@expl:next result type invariant] inv'3 result}
      {[@expl:next ensures] match result with
        | C_None -> completed self
        | C_Some v -> produces self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_11_repeat__qyi12123383775959562970__produces_refl__refines (* <Repeat<A> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat = { t_Repeat__element: t_A }
  
  predicate inv (_1: t_A)
  
  predicate postcondition_once (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef: forall args: t_A, res: t_A [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1: forall args: t_A, res: t_A [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces (self: t_Repeat) (visited: Seq.seq t_A) (o: t_Repeat) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition () self.t_Repeat__element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Repeat. forall result: (). produces self (Seq.empty: Seq.seq t_A) self
        -> produces self (Seq.empty: Seq.seq t_A) self
end
module M_11_repeat__qyi12123383775959562970__next__refines (* <Repeat<A> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat = { t_Repeat__element: t_A }
  
  predicate inv (_1: t_A)
  
  predicate inv'0 (_1: t_Repeat)
  
  axiom inv_axiom [@rewrite]: forall x: t_Repeat [inv'0 x]. inv'0 x = inv x.t_Repeat__element
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Repeat) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 [@inline:trivial] (_1: MutBorrow.t t_Repeat) = invariant' _1
  
  meta "rewrite_def" predicate inv'1
  
  type t_Option = C_None | C_Some t_A
  
  predicate completed (self: MutBorrow.t t_Repeat) = false
  
  predicate postcondition_once (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef: forall args: t_A, res: t_A [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1: forall args: t_A, res: t_A [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces (self: t_Repeat) (visited: Seq.seq t_A) (o: t_Repeat) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition () self.t_Repeat__element (Seq.get visited i))
  
  predicate inv'2 (_1: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Repeat. inv'1 self
      -> inv'1 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed self
              | C_Some v -> produces self.current (Seq.singleton v) self.final
              end
          /\ inv'2 result
        -> match result with
            | C_None -> completed self
            | C_Some v -> produces self.current (Seq.singleton v) self.final
            end
        /\ inv'2 result)
end
module M_11_repeat__qyi12123383775959562970__produces_trans__refines (* <Repeat<A> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat = { t_Repeat__element: t_A }
  
  predicate inv (_1: t_A)
  
  predicate postcondition_once (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef: forall args: t_A, res: t_A [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1: forall args: t_A, res: t_A [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_spec: forall self: (), args: t_A, res: t_A. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate produces (self: t_Repeat) (visited: Seq.seq t_A) (o: t_Repeat) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition () self.t_Repeat__element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Repeat. forall ab: Seq.seq t_A. forall b: t_Repeat. forall bc: Seq.seq t_A. forall c: t_Repeat. produces b bc c
                /\ produces a ab b
              -> produces b bc c
              /\ produces a ab b /\ (forall result: (). produces a (Seq.(++) ab bc) c -> produces a (Seq.(++) ab bc) c)
end
