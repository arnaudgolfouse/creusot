module M_impl_Iterator_for_Repeat_A__produces_refl (* <Repeat<A> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat_A = { element: t_A }
  
  predicate inv_A (_1: t_A)
  
  predicate postcondition_once_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef:
    forall args: t_A, res: t_A [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_A res)
  
  predicate resolve_clone [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_clone
  
  predicate postcondition_mut_clone (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut_clone () args () res]. postcondition_mut_clone () args () res
      -> (let self_ = args in inv_A res)
  
  function fn_mut_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (exists res_state: (). postcondition_mut_clone self args res_state res /\ resolve_clone res_state)
  
  predicate hist_inv_clone [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_clone
  
  function hist_inv_trans_clone (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_clone_spec: forall self: (), b: (), c: (). hist_inv_clone self b
      -> hist_inv_clone b c -> hist_inv_clone self c
  
  function hist_inv_refl_clone (self: ()) : ()
  
  axiom hist_inv_refl_clone_spec: forall self: (). hist_inv_clone self self
  
  function postcondition_mut_hist_inv_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      -> hist_inv_clone self res_state
  
  function fn_hist_inv_clone (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_clone_spec: forall self: (), res_state: (). hist_inv_clone self res_state = (self = res_state)
  
  predicate postcondition_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1:
    forall args: t_A, res: t_A [postcondition_clone () args res]. postcondition_clone () args res
      -> (let self_ = args in inv_A res)
  
  function fn_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (postcondition_clone self args res /\ resolve_clone self)
  
  function fn_mut_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      = (postcondition_clone self args res /\ self = res_state)
  
  predicate produces_Repeat_A (self: t_Repeat_A) (visited: Seq.seq t_A) (o: t_Repeat_A) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition_clone () self.element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Repeat_A
  
  function produces_refl_Repeat_A (self: t_Repeat_A) : ()
  
  goal vc_produces_refl_Repeat_A: [@expl:produces_refl ensures] produces_Repeat_A self (Seq.empty: Seq.seq t_A) self
end
module M_impl_Iterator_for_Repeat_A__produces_trans (* <Repeat<A> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat_A = { element: t_A }
  
  predicate inv_A (_1: t_A)
  
  predicate postcondition_once_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef:
    forall args: t_A, res: t_A [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_A res)
  
  predicate resolve_clone [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_clone
  
  predicate postcondition_mut_clone (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut_clone () args () res]. postcondition_mut_clone () args () res
      -> (let self_ = args in inv_A res)
  
  function fn_mut_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (exists res_state: (). postcondition_mut_clone self args res_state res /\ resolve_clone res_state)
  
  predicate hist_inv_clone [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_clone
  
  function hist_inv_trans_clone (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_clone_spec: forall self: (), b: (), c: (). hist_inv_clone self b
      -> hist_inv_clone b c -> hist_inv_clone self c
  
  function hist_inv_refl_clone (self: ()) : ()
  
  axiom hist_inv_refl_clone_spec: forall self: (). hist_inv_clone self self
  
  function postcondition_mut_hist_inv_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      -> hist_inv_clone self res_state
  
  function fn_hist_inv_clone (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_clone_spec: forall self: (), res_state: (). hist_inv_clone self res_state = (self = res_state)
  
  predicate postcondition_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1:
    forall args: t_A, res: t_A [postcondition_clone () args res]. postcondition_clone () args res
      -> (let self_ = args in inv_A res)
  
  function fn_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (postcondition_clone self args res /\ resolve_clone self)
  
  function fn_mut_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      = (postcondition_clone self args res /\ self = res_state)
  
  predicate produces_Repeat_A (self: t_Repeat_A) (visited: Seq.seq t_A) (o: t_Repeat_A) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition_clone () self.element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Repeat_A
  
  constant ab : Seq.seq t_A
  
  constant b : t_Repeat_A
  
  constant bc : Seq.seq t_A
  
  constant c : t_Repeat_A
  
  function produces_trans_Repeat_A (a: t_Repeat_A) (ab: Seq.seq t_A) (b: t_Repeat_A) (bc: Seq.seq t_A) (c: t_Repeat_A) : ()
  
  goal vc_produces_trans_Repeat_A: produces_Repeat_A a ab b
    -> produces_Repeat_A b bc c -> ([@expl:produces_trans ensures] produces_Repeat_A a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Repeat_A__next (* <Repeat<A> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat_A = { element: t_A }
  
  predicate inv_A (_1: t_A)
  
  predicate inv_Repeat_A (_1: t_Repeat_A)
  
  axiom inv_axiom [@rewrite]: forall x: t_Repeat_A [inv_Repeat_A x]. inv_Repeat_A x = inv_A x.element
  
  predicate invariant_ref_Repeat_A [@inline:trivial] (self: MutBorrow.t t_Repeat_A) =
    inv_Repeat_A self.current /\ inv_Repeat_A self.final
  
  meta "rewrite_def" predicate invariant_ref_Repeat_A
  
  predicate inv_ref_Repeat_A [@inline:trivial] (_1: MutBorrow.t t_Repeat_A) = invariant_ref_Repeat_A _1
  
  meta "rewrite_def" predicate inv_ref_Repeat_A
  
  predicate resolve_ref_Repeat_A [@inline:trivial] (_1: MutBorrow.t t_Repeat_A) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Repeat_A
  
  predicate invariant_ref_A [@inline:trivial] (self: t_A) = inv_A self
  
  meta "rewrite_def" predicate invariant_ref_A
  
  predicate inv_ref_A [@inline:trivial] (_1: t_A) = invariant_ref_A _1
  
  meta "rewrite_def" predicate inv_ref_A
  
  predicate precondition_clone (self: ()) (args: t_A)
  
  axiom precondition_fndef: forall args: t_A [precondition_clone () args]. (let self_ = args in inv_ref_A self_)
      -> precondition_clone () args
  
  predicate postcondition_once_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef:
    forall args: t_A, res: t_A [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_A res)
  
  let rec clone_A (self_: t_A) (return (x: t_A)) = {[@expl:clone requires] precondition_clone () self_}
    any [ return (result: t_A) -> {postcondition_once_clone () self_ result} (! return {result}) ]
  
  type t_Option_A = None | Some t_A
  
  predicate inv_Option_A (_1: t_Option_A)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_A [inv_Option_A x]. inv_Option_A x
      = match x with
        | None -> true
        | Some f0 -> inv_A f0
        end
  
  predicate completed_Repeat_A (self: MutBorrow.t t_Repeat_A) = false
  
  predicate resolve_clone [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_clone
  
  predicate postcondition_mut_clone (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut_clone () args () res]. postcondition_mut_clone () args () res
      -> (let self_ = args in inv_A res)
  
  function fn_mut_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (exists res_state: (). postcondition_mut_clone self args res_state res /\ resolve_clone res_state)
  
  predicate hist_inv_clone [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_clone
  
  function hist_inv_trans_clone (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_clone_spec: forall self: (), b: (), c: (). hist_inv_clone self b
      -> hist_inv_clone b c -> hist_inv_clone self c
  
  function hist_inv_refl_clone (self: ()) : ()
  
  axiom hist_inv_refl_clone_spec: forall self: (). hist_inv_clone self self
  
  function postcondition_mut_hist_inv_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      -> hist_inv_clone self res_state
  
  function fn_hist_inv_clone (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_clone_spec: forall self: (), res_state: (). hist_inv_clone self res_state = (self = res_state)
  
  predicate postcondition_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1:
    forall args: t_A, res: t_A [postcondition_clone () args res]. postcondition_clone () args res
      -> (let self_ = args in inv_A res)
  
  function fn_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (postcondition_clone self args res /\ resolve_clone self)
  
  function fn_mut_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      = (postcondition_clone self args res /\ self = res_state)
  
  predicate produces_Repeat_A (self: t_Repeat_A) (visited: Seq.seq t_A) (o: t_Repeat_A) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition_clone () self.element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_Repeat_A (self: MutBorrow.t t_Repeat_A) (return (x: t_Option_A)) =
    {[@expl:next 'self' type invariant] inv_ref_Repeat_A self}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Repeat_A self} s1
      | s1 = -{resolve_ref_Repeat_A self}- s2
      | s2 = clone_A {self.current.element} (fun (_ret: t_A) -> [ &_3 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- Some _3 ] s1 | s1 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: t_Option_A = Any.any_l () | & self: MutBorrow.t t_Repeat_A = self | & _3: t_A = Any.any_l () ])
    [ return (result: t_Option_A) -> {[@expl:next result type invariant] inv_Option_A result}
      {[@expl:next ensures] match result with
        | None -> completed_Repeat_A self
        | Some v -> produces_Repeat_A self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_impl_Iterator_for_Repeat_A__produces_refl__refines (* <Repeat<A> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat_A = { element: t_A }
  
  predicate inv_A (_1: t_A)
  
  predicate postcondition_once_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef:
    forall args: t_A, res: t_A [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_A res)
  
  predicate resolve_clone [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_clone
  
  predicate postcondition_mut_clone (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut_clone () args () res]. postcondition_mut_clone () args () res
      -> (let self_ = args in inv_A res)
  
  function fn_mut_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (exists res_state: (). postcondition_mut_clone self args res_state res /\ resolve_clone res_state)
  
  predicate hist_inv_clone [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_clone
  
  function hist_inv_trans_clone (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_clone_spec: forall self: (), b: (), c: (). hist_inv_clone self b
      -> hist_inv_clone b c -> hist_inv_clone self c
  
  function hist_inv_refl_clone (self: ()) : ()
  
  axiom hist_inv_refl_clone_spec: forall self: (). hist_inv_clone self self
  
  function postcondition_mut_hist_inv_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      -> hist_inv_clone self res_state
  
  function fn_hist_inv_clone (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_clone_spec: forall self: (), res_state: (). hist_inv_clone self res_state = (self = res_state)
  
  predicate postcondition_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1:
    forall args: t_A, res: t_A [postcondition_clone () args res]. postcondition_clone () args res
      -> (let self_ = args in inv_A res)
  
  function fn_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (postcondition_clone self args res /\ resolve_clone self)
  
  function fn_mut_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      = (postcondition_clone self args res /\ self = res_state)
  
  predicate produces_Repeat_A (self: t_Repeat_A) (visited: Seq.seq t_A) (o: t_Repeat_A) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition_clone () self.element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Repeat_A. forall result: (). produces_Repeat_A self (Seq.empty: Seq.seq t_A) self
        -> produces_Repeat_A self (Seq.empty: Seq.seq t_A) self
end
module M_impl_Iterator_for_Repeat_A__next__refines (* <Repeat<A> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat_A = { element: t_A }
  
  predicate inv_A (_1: t_A)
  
  predicate inv_Repeat_A (_1: t_Repeat_A)
  
  axiom inv_axiom [@rewrite]: forall x: t_Repeat_A [inv_Repeat_A x]. inv_Repeat_A x = inv_A x.element
  
  predicate invariant_ref_Repeat_A [@inline:trivial] (self: MutBorrow.t t_Repeat_A) =
    inv_Repeat_A self.current /\ inv_Repeat_A self.final
  
  meta "rewrite_def" predicate invariant_ref_Repeat_A
  
  predicate inv_ref_Repeat_A [@inline:trivial] (_1: MutBorrow.t t_Repeat_A) = invariant_ref_Repeat_A _1
  
  meta "rewrite_def" predicate inv_ref_Repeat_A
  
  type t_Option_A = None | Some t_A
  
  predicate completed_Repeat_A (self: MutBorrow.t t_Repeat_A) = false
  
  predicate postcondition_once_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef:
    forall args: t_A, res: t_A [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_A res)
  
  predicate resolve_clone [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_clone
  
  predicate postcondition_mut_clone (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut_clone () args () res]. postcondition_mut_clone () args () res
      -> (let self_ = args in inv_A res)
  
  function fn_mut_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (exists res_state: (). postcondition_mut_clone self args res_state res /\ resolve_clone res_state)
  
  predicate hist_inv_clone [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_clone
  
  function hist_inv_trans_clone (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_clone_spec: forall self: (), b: (), c: (). hist_inv_clone self b
      -> hist_inv_clone b c -> hist_inv_clone self c
  
  function hist_inv_refl_clone (self: ()) : ()
  
  axiom hist_inv_refl_clone_spec: forall self: (). hist_inv_clone self self
  
  function postcondition_mut_hist_inv_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      -> hist_inv_clone self res_state
  
  function fn_hist_inv_clone (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_clone_spec: forall self: (), res_state: (). hist_inv_clone self res_state = (self = res_state)
  
  predicate postcondition_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1:
    forall args: t_A, res: t_A [postcondition_clone () args res]. postcondition_clone () args res
      -> (let self_ = args in inv_A res)
  
  function fn_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (postcondition_clone self args res /\ resolve_clone self)
  
  function fn_mut_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      = (postcondition_clone self args res /\ self = res_state)
  
  predicate produces_Repeat_A (self: t_Repeat_A) (visited: Seq.seq t_A) (o: t_Repeat_A) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition_clone () self.element (Seq.get visited i))
  
  predicate inv_Option_A (_1: t_Option_A)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_A [inv_Option_A x]. inv_Option_A x
      = match x with
        | None -> true
        | Some f0 -> inv_A f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Repeat_A. inv_ref_Repeat_A self
      -> inv_ref_Repeat_A self
      /\ (forall result: t_Option_A. match result with
              | None -> completed_Repeat_A self
              | Some v -> produces_Repeat_A self.current (Seq.singleton v) self.final
              end
          /\ inv_Option_A result
        -> match result with
            | None -> completed_Repeat_A self
            | Some v -> produces_Repeat_A self.current (Seq.singleton v) self.final
            end
        /\ inv_Option_A result)
end
module M_impl_Iterator_for_Repeat_A__produces_trans__refines (* <Repeat<A> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_Repeat_A = { element: t_A }
  
  predicate inv_A (_1: t_A)
  
  predicate postcondition_once_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef:
    forall args: t_A, res: t_A [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_A res)
  
  predicate resolve_clone [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_clone
  
  predicate postcondition_mut_clone (self: ()) (args: t_A) (result_state: ()) (result: t_A)
  
  axiom postcondition_fndef'0:
    forall args: t_A, res: t_A [postcondition_mut_clone () args () res]. postcondition_mut_clone () args () res
      -> (let self_ = args in inv_A res)
  
  function fn_mut_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_mut_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (exists res_state: (). postcondition_mut_clone self args res_state res /\ resolve_clone res_state)
  
  predicate hist_inv_clone [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_clone
  
  function hist_inv_trans_clone (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_clone_spec: forall self: (), b: (), c: (). hist_inv_clone self b
      -> hist_inv_clone b c -> hist_inv_clone self c
  
  function hist_inv_refl_clone (self: ()) : ()
  
  axiom hist_inv_refl_clone_spec: forall self: (). hist_inv_clone self self
  
  function postcondition_mut_hist_inv_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom postcondition_mut_hist_inv_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      -> hist_inv_clone self res_state
  
  function fn_hist_inv_clone (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_clone_spec: forall self: (), res_state: (). hist_inv_clone self res_state = (self = res_state)
  
  predicate postcondition_clone (self: ()) (args: t_A) (result: t_A)
  
  axiom postcondition_fndef'1:
    forall args: t_A, res: t_A [postcondition_clone () args res]. postcondition_clone () args res
      -> (let self_ = args in inv_A res)
  
  function fn_once_clone (self: ()) (args: t_A) (res: t_A) : ()
  
  axiom fn_once_clone_spec: forall self: (), args: t_A, res: t_A. postcondition_once_clone self args res
      = (postcondition_clone self args res /\ resolve_clone self)
  
  function fn_mut_clone (self: ()) (args: t_A) (res_state: ()) (res: t_A) : ()
  
  axiom fn_mut_clone_spec:
    forall self: (), args: t_A, res_state: (), res: t_A. postcondition_mut_clone self args res_state res
      = (postcondition_clone self args res /\ self = res_state)
  
  predicate produces_Repeat_A (self: t_Repeat_A) (visited: Seq.seq t_A) (o: t_Repeat_A) =
    self = o
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> postcondition_clone () self.element (Seq.get visited i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Repeat_A. forall ab: Seq.seq t_A. forall b: t_Repeat_A. forall bc: Seq.seq t_A. forall c: t_Repeat_A. produces_Repeat_A b bc c
                /\ produces_Repeat_A a ab b
              -> produces_Repeat_A b bc c
              /\ produces_Repeat_A a ab b
              /\ (forall result: (). produces_Repeat_A a (Seq.(++) ab bc) c -> produces_Repeat_A a (Seq.(++) ab bc) c)
end
