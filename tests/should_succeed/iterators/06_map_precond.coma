module M_06_map_precond__qyi6490470836283789663__resolve_coherence [#"06_map_precond.rs" 10 9 10 16] (* <Map<I, F> as creusot_contracts::Resolve> *)
  let%span s06_map_precond = "06_map_precond.rs" 10 9 10 16
  let%span s06_map_precond'0 = "06_map_precond.rs" 10 9 10 16
  let%span s06_map_precond'1 = "06_map_precond.rs" 12 4 14 40
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  
  use seq.Seq
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  predicate resolve (_0: t_F)
  
  predicate resolve'0 (_0: t_I)
  
  predicate structural_resolve (_0: t_Map) =
    match _0 with
      | {t_Map__iter = x0; t_Map__func = x1; t_Map__produced = x2} -> resolve x1 /\ resolve'0 x0
      end
  
  predicate resolve'1 (_0: Seq.seq t_Item) = true
  
  predicate resolve'2 [#"06_map_precond.rs" 10 9 10 16] (self: t_Map) =
    [%#s06_map_precond'1] resolve'0 self.t_Map__iter /\ resolve self.t_Map__func /\ resolve'1 self.t_Map__produced
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map
  
  function resolve_coherence [#"06_map_precond.rs" 10 9 10 16] (self'0: t_Map) : ()
  
  goal vc_resolve_coherence: ([%#s06_map_precond] structural_resolve self)
    -> ([@expl:resolve_coherence ensures] [%#s06_map_precond'0] resolve'2 self)
end
module M_06_map_precond__qyi13778860181180212516__produces_refl [#"06_map_precond.rs" 32 4 32 26] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond = "06_map_precond.rs" 31 4 31 49
  let%span s06_map_precond'0 = "06_map_precond.rs" 32 27 32 29
  let%span s06_map_precond'1 = "06_map_precond.rs" 45 8 59 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 44 4 44 67] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    [%#s06_map_precond'1] hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { _p0 = Seq.get s i;
                                                   _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map
  
  function produces_refl'0 [#"06_map_precond.rs" 32 4 32 26] (self'0: t_Map) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] [%#s06_map_precond] produces'0 self (Seq.empty: Seq.seq t_B) self
end
module M_06_map_precond__qyi13778860181180212516__produces_trans [#"06_map_precond.rs" 39 4 39 90] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond = "06_map_precond.rs" 36 4 36 34
  let%span s06_map_precond'0 = "06_map_precond.rs" 37 4 37 34
  let%span s06_map_precond'1 = "06_map_precond.rs" 38 4 38 44
  let%span s06_map_precond'2 = "06_map_precond.rs" 39 91 39 93
  let%span s06_map_precond'3 = "06_map_precond.rs" 45 8 59 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 44 4 44 67] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    [%#s06_map_precond'3] hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { _p0 = Seq.get s i;
                                                   _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Map
  
  constant ab : Seq.seq t_B
  
  constant b : t_Map
  
  constant bc : Seq.seq t_B
  
  constant c : t_Map
  
  function produces_trans'0 [#"06_map_precond.rs" 39 4 39 90] (a'0: t_Map) (ab'0: Seq.seq t_B) (b'0: t_Map) (bc'0: Seq.seq t_B) (c'0: t_Map) : ()
  
  goal vc_produces_trans: ([%#s06_map_precond] produces'0 a ab b)
    -> ([%#s06_map_precond'0] produces'0 b bc c)
    -> ([@expl:produces_trans ensures] [%#s06_map_precond'1] produces'0 a (Seq.(++) ab bc) c)
end
module M_06_map_precond__qyi13778860181180212516__next [#"06_map_precond.rs" 66 4 66 44] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond = "06_map_precond.rs" 69 16 69 76
  let%span s06_map_precond'0 = "06_map_precond.rs" 70 31 70 71
  let%span s06_map_precond'1 = "06_map_precond.rs" 73 16 73 58
  let%span s06_map_precond'2 = "06_map_precond.rs" 77 32 77 58
  let%span s06_map_precond'3 = "06_map_precond.rs" 66 17 66 21
  let%span s06_map_precond'4 = "06_map_precond.rs" 66 26 66 44
  let%span s06_map_precond'5 = "06_map_precond.rs" 62 14 65 5
  let%span s06_map_precond'6 = "06_map_precond.rs" 135 4 135 33
  let%span s06_map_precond'7 = "06_map_precond.rs" 136 4 136 60
  let%span s06_map_precond'8 = "06_map_precond.rs" 137 15 137 30
  let%span s06_map_precond'9 = "06_map_precond.rs" 138 15 138 64
  let%span s06_map_precond'10 = "06_map_precond.rs" 139 14 139 74
  let%span s06_map_precond'11 = "06_map_precond.rs" 140 14 140 75
  let%span s06_map_precond'12 = "06_map_precond.rs" 142 8 146 9
  let%span s06_map_precond'13 = "06_map_precond.rs" 23 8 26 9
  let%span s06_map_precond'14 = "06_map_precond.rs" 151 14 151 68
  let%span s06_map_precond'15 = "06_map_precond.rs" 154 12 160 74
  let%span s06_map_precond'16 = "06_map_precond.rs" 1 0 27 4
  let%span s06_map_precond'17 = "06_map_precond.rs" 169 12 171 73
  let%span s06_map_precond'18 = "06_map_precond.rs" 97 14 97 83
  let%span s06_map_precond'19 = "06_map_precond.rs" 100 12 106 88
  let%span s06_map_precond'20 = "06_map_precond.rs" 89 12 92 63
  let%span s06_map_precond'21 = "06_map_precond.rs" 45 8 59 9
  let%span s06_map_precond'22 = "06_map_precond.rs" 127 12 130 47
  let%span s06_map_precond'23 = "06_map_precond.rs" 114 12 119 71
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 193 16 193 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 195 39 195 42
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 193 27 193 52
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 194 26 194 71
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'9 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  predicate inv (_0: t_I)
  
  type t_Option = C_None | C_Some t_Item
  
  predicate invariant' (self: MutBorrow.t t_I) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_I)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_I [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    [%#s06_map_precond'16] forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate inv'1 (_0: t_Item)
  
  predicate inv'2 (_0: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'1 a_0
        end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    [%#s06_map_precond'16] forall args: MutBorrow.t t_I, res: t_Option [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in match res with
          | C_None -> completed self
          | C_Some v -> produces self.current (Seq.singleton v) self.final
          end
      /\ inv'2 res)
  
  let rec next (self: MutBorrow.t t_I) (return' (x: t_Option)) = {[@expl:next requires] precondition () self}
    any [ return''0 (result: t_Option) -> {postcondition_once () self result} (! return' {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: t_Item)) = any
    [ good (field_0: t_Item) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate precondition'0 (self: t_F) (args: tuple)
  
  predicate inv'3 (_0: t_F)
  
  type t_B
  
  predicate invariant''0 (self: MutBorrow.t t_F) = [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0: MutBorrow.t t_F)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_F [inv'4 x]. inv'4 x = invariant''0 x
  
  predicate inv'5 (_0: tuple)
  
  axiom inv_axiom'2 [@rewrite]: forall x: tuple [inv'5 x]. inv'5 x = (let {_p0 = x0; _p1 = x1} = x in inv'1 x0)
  
  predicate inv'6 (_0: t_B)
  
  predicate postcondition_once'0 (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'9] postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'6] hist_inv self b)
      -> ([%#sops'7] hist_inv b c) -> ([%#sops'8] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'5] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops'3] postcondition_mut self args res_state res)
      -> ([%#sops'4] hist_inv self res_state)
  
  let rec call_mut (self_: MutBorrow.t t_F) (arg: tuple) (return' (x: t_B)) =
    {[@expl:call_mut 'self_' type invariant] [%#sops] inv'4 self_}
    {[@expl:call_mut 'arg' type invariant] [%#sops'0] inv'5 arg}
    {[@expl:call_mut requires] [%#sops'1] precondition'0 self_.current arg}
    any
    [ return''0 (result: t_B) -> {inv'6 result}
      {[%#sops'2] postcondition_mut self_.current arg self_.final result}
      (! return' {result}) ]
  
  predicate next_precondition [#"06_map_precond.rs" 87 4 87 78] (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'20] forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition'0 func { _p0 = e; _p1 = produced }
  
  predicate preservation [#"06_map_precond.rs" 112 4 112 49] (iter: t_I) (func: t_F) =
    [%#s06_map_precond'23] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition'0 f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition'0 f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  predicate reinitialize [#"06_map_precond.rs" 125 4 125 33] =
    [%#s06_map_precond'22] forall iter: MutBorrow.t t_I, func: t_F. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv [#"06_map_precond.rs" 98 4 98 73] (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'19] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { _p0 = e1;
                                                                                                                                                                                              _p1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition'0 f.current { _p0 = e1; _p1 = Seq.(++) produced s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = Seq.(++) produced s } f.final b
      -> precondition'0 f.final { _p0 = e2; _p1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: t_F, produced: Seq.seq t_Item. [%#s06_map_precond'18] produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant''1 [#"06_map_precond.rs" 167 4 167 30] (self: t_Map) =
    [%#s06_map_precond'17] reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'7 (_0: t_Map)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Map [inv'7 x]. inv'7 x
      = (invariant''1 x
      /\ match x with
        | {t_Map__iter = iter; t_Map__func = func; t_Map__produced = produced} -> inv iter /\ inv'3 func
        end)
  
  predicate invariant''2 (self: MutBorrow.t t_Map) = [%#sinvariant] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'8 (_0: MutBorrow.t t_Map)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_Map [inv'8 x]. inv'8 x = invariant''2 x
  
  predicate resolve'0 (self: MutBorrow.t t_Map) = [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t t_Map) = resolve'0 _0
  
  function produces_one_invariant [#"06_map_precond.rs" 141 4 141 73] (self: t_Map) (e: t_Item) (r: t_B) (f: MutBorrow.t t_F) (iter: t_I) : ()
   = [%#s06_map_precond'12] let _ = () in ()
  
  axiom produces_one_invariant_spec:
    forall self: t_Map, e: t_Item, r: t_B, f: MutBorrow.t t_F, iter: t_I. ([%#s06_map_precond'6] invariant''1 self)
      -> ([%#s06_map_precond'7] produces self.t_Map__iter (Seq.singleton e) iter)
      -> ([%#s06_map_precond'8] f.current = self.t_Map__func)
      -> ([%#s06_map_precond'9] postcondition_mut f.current { _p0 = e; _p1 = self.t_Map__produced } f.final r)
      -> ([%#s06_map_precond'10] preservation_inv iter f.final (Seq.snoc self.t_Map__produced e))
  
  axiom produces_one_invariant_spec'0:
    forall self: t_Map, e: t_Item, r: t_B, f: MutBorrow.t t_F, iter: t_I. ([%#s06_map_precond'6] invariant''1 self)
      -> ([%#s06_map_precond'7] produces self.t_Map__iter (Seq.singleton e) iter)
      -> ([%#s06_map_precond'8] f.current = self.t_Map__func)
      -> ([%#s06_map_precond'9] postcondition_mut f.current { _p0 = e; _p1 = self.t_Map__produced } f.final r)
      -> ([%#s06_map_precond'11] next_precondition iter f.final (Seq.snoc self.t_Map__produced e))
  
  type t_Option'0 = C_None'0 | C_Some'0 t_B
  
  predicate inv'9 (_0: t_Option'0)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_Option'0 [inv'9 x]. inv'9 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'6 a_0
        end
  
  predicate completed'0 [#"06_map_precond.rs" 22 4 22 35] (self: MutBorrow.t t_Map) =
    [%#s06_map_precond'13] (self.final).t_Map__produced = (Seq.empty: Seq.seq t_Item)
    /\ completed (MutBorrow.borrow_logic (self.current).t_Map__iter (self.final).t_Map__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ (self.current).t_Map__func = (self.final).t_Map__func
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 44 4 44 67] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    [%#s06_map_precond'21] hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition'0 (Seq.get fs i).current { _p0 = Seq.get s i;
                                                     _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  predicate produces_one [#"06_map_precond.rs" 152 4 152 61] (self: t_Map) (visited: t_B) (succ: t_Map) =
    [%#s06_map_precond'15] exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut f.current { _p0 = e;
                                                                                               _p1 = self.t_Map__produced } f.final visited]. f.current
        = self.t_Map__func
      /\ f.final = succ.t_Map__func
      /\ produces self.t_Map__iter (Seq.singleton e) succ.t_Map__iter
      /\ succ.t_Map__produced = Seq.snoc self.t_Map__produced e
      /\ precondition'0 f.current { _p0 = e; _p1 = self.t_Map__produced }
      /\ postcondition_mut f.current { _p0 = e; _p1 = self.t_Map__produced } f.final visited
  
  axiom produces_one_spec:
    forall self: t_Map, visited: t_B, succ: t_Map. [%#s06_map_precond'14] produces_one self visited succ
      = produces'0 self (Seq.singleton visited) succ
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'0 [#"06_map_precond.rs" 66 4 66 44] (self: MutBorrow.t t_Map) (return' (x: t_Option'0)) =
    {[@expl:next 'self' type invariant] [%#s06_map_precond'3] inv'8 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv (self'0.current).t_Map__iter}
        MutBorrow.borrow_final <t_I> {(self'0.current).t_Map__iter} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_4 <- _ret ] -{inv _ret.final}-
            [ &self'0 <- { self'0 with current = { self'0.current with t_Map__iter = _ret.final } } ] s1)
      | s1 = next {_4} (fun (_ret: t_Option) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = any [ br0 -> {_3 = C_None} (! bb4) | br1 (x0: t_Item) -> {_3 = C_Some x0} (! bb5) ]
    | bb5 = s0
      [ s0 = v_Some {_3} (fun (r0: t_Item) -> [ &v <- r0 ] s1)
      | s1 = {[@expl:assertion] [%#s06_map_precond] precondition'0 (self'0.current).t_Map__func { _p0 = v;
                                                                                                  _p1 = (self'0.current).t_Map__produced }}
        s2
      | s2 = [ &produced <- [%#s06_map_precond'0] Seq.snoc (self'0.current).t_Map__produced v ] s3
      | s3 = bb6 ]
    | bb6 = s0
      [ s0 = {inv'3 (self'0.current).t_Map__func}
        MutBorrow.borrow_final <t_F> {(self'0.current).t_Map__func} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
          (fun (_ret: MutBorrow.t t_F) ->
            [ &_12 <- _ret ] -{inv'3 _ret.final}-
            [ &self'0 <- { self'0 with current = { self'0.current with t_Map__func = _ret.final } } ] s1)
      | s1 = [ &_13 <- { _p0 = v; _p1 = (self'0.current).t_Map__produced } ] s2
      | s2 = call_mut {_12} {_13} (fun (_ret: t_B) -> [ &r <- _ret ] s3)
      | s3 = bb8 ]
    | bb8 = s0
      [ s0 = [ &self'0 <- { self'0 with current = { self'0.current with t_Map__produced = produced } } ] s1
      | s1 = {[@expl:type invariant] inv'8 self'0} s2
      | s2 = -{resolve'1 self'0}- s3
      | s3 = [ &_17 <- [%#s06_map_precond'1] () ] s4
      | s4 = bb9 ]
    | bb9 = s0 [ s0 = [ &_0 <- C_Some'0 r ] s1 | s1 = bb15 ]
    | bb4 = s0 [ s0 = [ &_20 <- [%#s06_map_precond'2] Seq.empty: Seq.seq t_Item ] s1 | s1 = bb13 ]
    | bb13 = s0
      [ s0 = [ &self'0 <- { self'0 with current = { self'0.current with t_Map__produced = _20 } } ] s1
      | s1 = {[@expl:type invariant] inv'8 self'0} s2
      | s2 = -{resolve'1 self'0}- s3
      | s3 = [ &_0 <- C_None'0 ] s4
      | s4 = bb15 ]
    | bb15 = return''0 {_0} ]
    [ & _0: t_Option'0 = Any.any_l ()
    | & self'0: MutBorrow.t t_Map = self
    | & _3: t_Option = Any.any_l ()
    | & _4: MutBorrow.t t_I = Any.any_l ()
    | & v: t_Item = Any.any_l ()
    | & produced: Seq.seq t_Item = Any.any_l ()
    | & r: t_B = Any.any_l ()
    | & _12: MutBorrow.t t_F = Any.any_l ()
    | & _13: tuple = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _20: Seq.seq t_Item = Any.any_l () ])
    [ return''0 (result: t_Option'0) -> {[@expl:next result type invariant] [%#s06_map_precond'4] inv'9 result}
      {[@expl:next ensures] [%#s06_map_precond'5] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces_one self.current v self.final
        end}
      (! return' {result}) ]
end
module M_06_map_precond__qyi10069788794515621353__preservation_inv [#"06_map_precond.rs" 98 4 98 73] (* Map<I, F> *)
  let%span s06_map_precond = "06_map_precond.rs" 97 14 97 83
  let%span s06_map_precond'0 = "06_map_precond.rs" 100 12 106 88
  let%span s06_map_precond'1 = "06_map_precond.rs" 114 12 119 71
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  type t_B
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate preservation [#"06_map_precond.rs" 112 4 112 49] (iter: t_I) (func: t_F) =
    [%#s06_map_precond'1] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant iter : t_I
  
  constant func : t_F
  
  constant produced : Seq.seq t_Item
  
  predicate preservation_inv [#"06_map_precond.rs" 98 4 98 73] (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item)
  
  goal vc_preservation_inv: [@expl:preservation_inv ensures] [%#s06_map_precond] produced = (Seq.empty: Seq.seq t_Item)
    -> ([%#s06_map_precond'0] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { _p0 = e1;
                                                                                                                                                                                                 _p1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
        -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
        -> precondition f.current { _p0 = e1; _p1 = Seq.(++) produced s }
        -> postcondition_mut f.current { _p0 = e1; _p1 = Seq.(++) produced s } f.final b
        -> precondition f.final { _p0 = e2; _p1 = Seq.snoc (Seq.(++) produced s) e1 })
    = preservation iter func
end
module M_06_map_precond__qyi10069788794515621353__produces_one_invariant [#"06_map_precond.rs" 141 4 141 73] (* Map<I, F> *)
  let%span s06_map_precond = "06_map_precond.rs" 135 4 135 33
  let%span s06_map_precond'0 = "06_map_precond.rs" 136 4 136 60
  let%span s06_map_precond'1 = "06_map_precond.rs" 137 15 137 30
  let%span s06_map_precond'2 = "06_map_precond.rs" 138 15 138 64
  let%span s06_map_precond'3 = "06_map_precond.rs" 139 14 139 74
  let%span s06_map_precond'4 = "06_map_precond.rs" 140 14 140 75
  let%span s06_map_precond'5 = "06_map_precond.rs" 143 12 145 94
  let%span s06_map_precond'6 = "06_map_precond.rs" 142 8 146 9
  let%span s06_map_precond'7 = "06_map_precond.rs" 169 12 171 73
  let%span s06_map_precond'8 = "06_map_precond.rs" 97 14 97 83
  let%span s06_map_precond'9 = "06_map_precond.rs" 100 12 106 88
  let%span s06_map_precond'10 = "06_map_precond.rs" 89 12 92 63
  let%span s06_map_precond'11 = "06_map_precond.rs" 127 12 130 47
  let%span s06_map_precond'12 = "06_map_precond.rs" 114 12 119 71
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate next_precondition [#"06_map_precond.rs" 87 4 87 78] (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'10] forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { _p0 = e; _p1 = produced }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate preservation [#"06_map_precond.rs" 112 4 112 49] (iter: t_I) (func: t_F) =
    [%#s06_map_precond'12] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  predicate reinitialize [#"06_map_precond.rs" 125 4 125 33] =
    [%#s06_map_precond'11] forall iter: MutBorrow.t t_I, func: t_F. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv [#"06_map_precond.rs" 98 4 98 73] (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'9] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { _p0 = e1;
                                                                                                                                                                                             _p1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = Seq.(++) produced s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = Seq.(++) produced s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: t_F, produced: Seq.seq t_Item. [%#s06_map_precond'8] produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' [#"06_map_precond.rs" 167 4 167 30] (self: t_Map) =
    [%#s06_map_precond'7] reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map
  
  constant e : t_Item
  
  constant r : t_B
  
  constant f : MutBorrow.t t_F
  
  constant iter : t_I
  
  function produces_one_invariant [#"06_map_precond.rs" 141 4 141 73] (self'0: t_Map) (e'0: t_Item) (r'0: t_B) (f'0: MutBorrow.t t_F) (iter'0: t_I) : ()
  
  goal vc_produces_one_invariant: ([%#s06_map_precond] invariant' self)
    -> ([%#s06_map_precond'0] produces self.t_Map__iter (Seq.singleton e) iter)
    -> ([%#s06_map_precond'1] f.current = self.t_Map__func)
    -> ([%#s06_map_precond'2] postcondition_mut f.current { _p0 = e; _p1 = self.t_Map__produced } f.final r)
    -> ([%#s06_map_precond'5] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, i: t_I. produces iter (Seq.snoc (Seq.snoc s e1) e2) i
        -> produces self.t_Map__iter (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
    && (let _ = () in ([@expl:produces_one_invariant ensures #0] [%#s06_map_precond'3] preservation_inv iter f.final (Seq.snoc self.t_Map__produced e))
    && ([@expl:produces_one_invariant ensures #1] [%#s06_map_precond'4] next_precondition iter f.final (Seq.snoc self.t_Map__produced e)))
end
module M_06_map_precond__qyi10069788794515621353__produces_one [#"06_map_precond.rs" 152 4 152 61] (* Map<I, F> *)
  let%span s06_map_precond = "06_map_precond.rs" 151 14 151 68
  let%span s06_map_precond'0 = "06_map_precond.rs" 154 12 160 74
  let%span s06_map_precond'1 = "06_map_precond.rs" 45 8 59 9
  let%span s06_map_precond'2 = "06_map_precond.rs" 31 4 31 49
  let%span s06_map_precond'3 = "06_map_precond.rs" 32 27 32 29
  let%span s06_map_precond'4 = "06_map_precond.rs" 36 4 36 34
  let%span s06_map_precond'5 = "06_map_precond.rs" 37 4 37 34
  let%span s06_map_precond'6 = "06_map_precond.rs" 38 4 38 44
  let%span s06_map_precond'7 = "06_map_precond.rs" 39 91 39 93
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 44 4 44 67] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    [%#s06_map_precond'1] hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { _p0 = Seq.get s i;
                                                   _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  function produces_trans'0 [#"06_map_precond.rs" 39 4 39 90] (a: t_Map) (ab: Seq.seq t_B) (b: t_Map) (bc: Seq.seq t_B) (c: t_Map) : ()
   = [%#s06_map_precond'7] ()
  
  axiom produces_trans_spec'0:
    forall a: t_Map, ab: Seq.seq t_B, b: t_Map, bc: Seq.seq t_B, c: t_Map. ([%#s06_map_precond'4] produces'0 a ab b)
      -> ([%#s06_map_precond'5] produces'0 b bc c) -> ([%#s06_map_precond'6] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"06_map_precond.rs" 32 4 32 26] (self: t_Map) : () = [%#s06_map_precond'3] ()
  
  axiom produces_refl_spec'0: forall self: t_Map. [%#s06_map_precond'2] produces'0 self (Seq.empty: Seq.seq t_B) self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map
  
  constant visited : t_B
  
  constant succ : t_Map
  
  predicate produces_one [#"06_map_precond.rs" 152 4 152 61] (self'0: t_Map) (visited'0: t_B) (succ'0: t_Map)
  
  goal vc_produces_one:
    [@expl:produces_one ensures] [%#s06_map_precond] ([%#s06_map_precond'0] exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut f.current { _p0 = e;
                                                                                                                                                _p1 = self.t_Map__produced } f.final visited]. f.current
          = self.t_Map__func
        /\ f.final = succ.t_Map__func
        /\ produces self.t_Map__iter (Seq.singleton e) succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.snoc self.t_Map__produced e
        /\ precondition f.current { _p0 = e; _p1 = self.t_Map__produced }
        /\ postcondition_mut f.current { _p0 = e; _p1 = self.t_Map__produced } f.final visited)
    = produces'0 self (Seq.singleton visited) succ
end
module M_06_map_precond__map [#"06_map_precond.rs" 182 0 185 14]
  let%span s06_map_precond = "06_map_precond.rs" 186 32 186 56
  let%span s06_map_precond'0 = "06_map_precond.rs" 183 4 183 8
  let%span s06_map_precond'1 = "06_map_precond.rs" 184 4 184 8
  let%span s06_map_precond'2 = "06_map_precond.rs" 176 11 178 67
  let%span s06_map_precond'3 = "06_map_precond.rs" 179 11 179 38
  let%span s06_map_precond'4 = "06_map_precond.rs" 180 11 180 48
  let%span s06_map_precond'5 = "06_map_precond.rs" 185 5 185 14
  let%span s06_map_precond'6 = "06_map_precond.rs" 181 10 181 77
  let%span s06_map_precond'7 = "06_map_precond.rs" 127 12 130 47
  let%span s06_map_precond'8 = "06_map_precond.rs" 114 12 119 71
  let%span s06_map_precond'9 = "06_map_precond.rs" 89 12 92 63
  let%span s06_map_precond'10 = "06_map_precond.rs" 169 12 171 73
  let%span s06_map_precond'11 = "06_map_precond.rs" 97 14 97 83
  let%span s06_map_precond'12 = "06_map_precond.rs" 100 12 106 88
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use seq.Seq
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_F
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_F)
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate next_precondition [#"06_map_precond.rs" 87 4 87 78] (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'9] forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { _p0 = e; _p1 = produced }
  
  type t_B
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate preservation [#"06_map_precond.rs" 112 4 112 49] (iter: t_I) (func: t_F) =
    [%#s06_map_precond'8] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  predicate reinitialize [#"06_map_precond.rs" 125 4 125 33] =
    [%#s06_map_precond'7] forall iter: MutBorrow.t t_I, func: t_F. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv [#"06_map_precond.rs" 98 4 98 73] (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'12] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { _p0 = e1;
                                                                                                                                                                                              _p1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = Seq.(++) produced s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = Seq.(++) produced s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: t_F, produced: Seq.seq t_Item. [%#s06_map_precond'11] produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' [#"06_map_precond.rs" 167 4 167 30] (self: t_Map) =
    [%#s06_map_precond'10] reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'1 (_0: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'1 x]. inv'1 x
      = (invariant' x
      /\ match x with
        | {t_Map__iter = iter; t_Map__func = func; t_Map__produced = produced} -> inv iter /\ inv'0 func
        end)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec map [#"06_map_precond.rs" 182 0 185 14] (iter: t_I) (func: t_F) (return' (x: t_Map)) =
    {[@expl:map 'iter' type invariant] [%#s06_map_precond'0] inv iter}
    {[@expl:map 'func' type invariant] [%#s06_map_precond'1] inv'0 func}
    {[@expl:map requires #0] [%#s06_map_precond'2] forall e: t_Item, i2: t_I. produces iter (Seq.singleton e) i2
      -> precondition func { _p0 = e; _p1 = Seq.empty: Seq.seq t_Item }}
    {[@expl:map requires #1] [%#s06_map_precond'3] reinitialize}
    {[@expl:map requires #2] [%#s06_map_precond'4] preservation iter func}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = [ &_9 <- [%#s06_map_precond] Seq.empty: Seq.seq t_Item ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- { t_Map__iter = iter'0; t_Map__func = func'0; t_Map__produced = _9 } ] s1 | s1 = bb6 ]
    | bb6 = return''0 {_0} ]
    [ & _0: t_Map = Any.any_l () | & iter'0: t_I = iter | & func'0: t_F = func | & _9: Seq.seq t_Item = Any.any_l () ])
    [ return''0 (result: t_Map) -> {[@expl:map result type invariant] [%#s06_map_precond'5] inv'1 result}
      {[@expl:map ensures] [%#s06_map_precond'6] result
      = { t_Map__iter = iter; t_Map__func = func; t_Map__produced = Seq.empty: Seq.seq t_Item }}
      (! return' {result}) ]
end
module M_06_map_precond__identity [#"06_map_precond.rs" 189 0 189 37]
  let%span s06_map_precond = "06_map_precond.rs" 189 29 189 33
  let%span s06_map_precond'0 = "06_map_precond.rs" 190 15 190 16
  let%span s06_map_precond'1 = "06_map_precond.rs" 190 14 190 20
  let%span s06_map_precond'2 = "06_map_precond.rs" 183 4 183 8
  let%span s06_map_precond'3 = "06_map_precond.rs" 176 11 178 67
  let%span s06_map_precond'4 = "06_map_precond.rs" 179 11 179 38
  let%span s06_map_precond'5 = "06_map_precond.rs" 180 11 180 48
  let%span s06_map_precond'6 = "06_map_precond.rs" 185 5 185 14
  let%span s06_map_precond'7 = "06_map_precond.rs" 181 10 181 77
  let%span s06_map_precond'8 = "06_map_precond.rs" 127 12 130 47
  let%span s06_map_precond'9 = "06_map_precond.rs" 114 12 119 71
  let%span s06_map_precond'10 = "06_map_precond.rs" 12 4 14 40
  let%span s06_map_precond'11 = "06_map_precond.rs" 89 12 92 63
  let%span s06_map_precond'12 = "06_map_precond.rs" 169 12 171 73
  let%span s06_map_precond'13 = "06_map_precond.rs" 97 14 97 83
  let%span s06_map_precond'14 = "06_map_precond.rs" 100 12 106 88
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t ()) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t ()) = resolve _0
  
  type t_I
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate inv (_0: t_Item)
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate resolve'1 (_0: ()) = true
  
  predicate hist_inv (self: ()) (result_state: ()) = [%#s06_map_precond'1] true
  
  let rec closure0 [#"06_map_precond.rs" 190 14 190 20] [@coma:extspec] (self: MutBorrow.t ()) (x: t_Item)
    (_1: Seq.seq t_Item) (return' (x'0: t_Item)) = bb0
    [ bb0 = s0 [ s0 = -{resolve'0 _1'0}- s1 | s1 = [ &_0 <- x'0 ] s2 | s2 = bb1 ] | bb1 = return' {_0} ]
    [ & _0: t_Item = Any.any_l () | & _1'0: MutBorrow.t () = self | & x'0: t_Item = x ]
  
  predicate postcondition_once (self: ()) (args: tuple) (result: t_Item) =
    [%#s06_map_precond'1] let {_p0 = x; _p1 = _1} = args in exists e: (). (exists bor_self: MutBorrow.t (). bor_self.current
            = self
          /\ bor_self.final = e /\ closure0'post'return' bor_self x _1 result /\ hist_inv self e)
      /\ resolve'1 e
  
  predicate postcondition_mut (self: ()) (args: tuple) (result_state: ()) (result: t_Item) =
    [%#s06_map_precond'1] let {_p0 = x; _p1 = _1} = args in exists bor_self: MutBorrow.t (). bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return' bor_self x _1 result /\ hist_inv self result_state
  
  function fn_mut_once (self: ()) (args: tuple) (res: t_Item) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: tuple, res: t_Item. [%#sops'5] postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: tuple) (res_state: ()) (res: t_Item) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: tuple, res_state: (), res: t_Item. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: (); t_Map__produced: Seq.seq t_Item }
  
  predicate inv'0 (_0: t_I)
  
  predicate precondition (self: ()) (args: tuple) =
    [%#s06_map_precond'1] let {_p0 = x; _p1 = _1} = args in forall bor_self: MutBorrow.t (). bor_self.current = self
      -> closure0'pre bor_self x _1
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate next_precondition [#"06_map_precond.rs" 87 4 87 78] (iter: t_I) (func: ()) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'11] forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { _p0 = e; _p1 = produced }
  
  predicate preservation [#"06_map_precond.rs" 112 4 112 49] (iter: t_I) (func: ()) =
    [%#s06_map_precond'9] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t (), b: t_Item, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  predicate reinitialize [#"06_map_precond.rs" 125 4 125 33] =
    [%#s06_map_precond'8] forall iter: MutBorrow.t t_I, func: (). completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv [#"06_map_precond.rs" 98 4 98 73] (iter: t_I) (func: ()) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'14] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t (), b: t_Item, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { _p0 = e1;
                                                                                                                                                                                                _p1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = Seq.(++) produced s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = Seq.(++) produced s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: (), produced: Seq.seq t_Item. [%#s06_map_precond'13] produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' [#"06_map_precond.rs" 167 4 167 30] (self: t_Map) =
    [%#s06_map_precond'12] reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'1 (_0: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'1 x]. inv'1 x
      = (invariant' x
      /\ match x with
        | {t_Map__iter = iter; t_Map__func = func; t_Map__produced = produced} -> inv'0 iter
        end)
  
  let rec map (iter: t_I) (func: ()) (return' (x: t_Map)) =
    {[@expl:map 'iter' type invariant] [%#s06_map_precond'2] inv'0 iter}
    {[@expl:map requires #0] [%#s06_map_precond'3] forall e: t_Item, i2: t_I. produces iter (Seq.singleton e) i2
      -> precondition func { _p0 = e; _p1 = Seq.empty: Seq.seq t_Item }}
    {[@expl:map requires #1] [%#s06_map_precond'4] reinitialize}
    {[@expl:map requires #2] [%#s06_map_precond'5] preservation iter func}
    any
    [ return''0 (result: t_Map) -> {[%#s06_map_precond'6] inv'1 result}
      {[%#s06_map_precond'7] result
      = { t_Map__iter = iter; t_Map__func = func; t_Map__produced = Seq.empty: Seq.seq t_Item }}
      (! return' {result}) ]
  
  predicate resolve'2 (_0: t_I)
  
  predicate resolve'3 (_0: Seq.seq t_Item) = true
  
  predicate resolve'4 [#"06_map_precond.rs" 10 9 10 16] (self: t_Map) =
    [%#s06_map_precond'10] resolve'2 self.t_Map__iter /\ resolve'1 self.t_Map__func /\ resolve'3 self.t_Map__produced
  
  predicate resolve'5 (_0: t_Map) = resolve'4 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec identity [#"06_map_precond.rs" 189 0 189 37] (iter: t_I) (return' (x: ())) =
    {[@expl:identity 'iter' type invariant] [%#s06_map_precond] inv'0 iter}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- () ] s1
      | s1 = map {iter'0} {_4} (fun (_ret: t_Map) -> [ &_2 <- _ret ] s2)
      | s2 = {[@expl:type invariant] inv'1 _2} s3
      | s3 = -{resolve'5 _2}- s4
      | s4 = bb3 ]
    | bb3 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & iter'0: t_I = iter | & _2: t_Map = Any.any_l () | & _4: () = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_06_map_precond__increment [#"06_map_precond.rs" 197 0 197 50]
  let%span s06_map_precond = "06_map_precond.rs" 201 8 202 67
  let%span s06_map_precond'0 = "06_map_precond.rs" 197 42 197 46
  let%span s06_map_precond'1 = "06_map_precond.rs" 193 11 193 145
  let%span s06_map_precond'2 = "06_map_precond.rs" 194 11 195 59
  let%span s06_map_precond'3 = "06_map_precond.rs" 198 38 198 39
  let%span s06_map_precond'4 = "06_map_precond.rs" 183 4 183 8
  let%span s06_map_precond'5 = "06_map_precond.rs" 176 11 178 67
  let%span s06_map_precond'6 = "06_map_precond.rs" 179 11 179 38
  let%span s06_map_precond'7 = "06_map_precond.rs" 180 11 180 48
  let%span s06_map_precond'8 = "06_map_precond.rs" 185 5 185 14
  let%span s06_map_precond'9 = "06_map_precond.rs" 181 10 181 77
  let%span s06_map_precond'10 = "06_map_precond.rs" 45 8 59 9
  let%span s06_map_precond'11 = "06_map_precond.rs" 198 22 198 33
  let%span s06_map_precond'12 = "06_map_precond.rs" 127 12 130 47
  let%span s06_map_precond'13 = "06_map_precond.rs" 114 12 119 71
  let%span s06_map_precond'14 = "06_map_precond.rs" 12 4 14 40
  let%span s06_map_precond'15 = "06_map_precond.rs" 31 4 31 49
  let%span s06_map_precond'16 = "06_map_precond.rs" 32 27 32 29
  let%span s06_map_precond'17 = "06_map_precond.rs" 36 4 36 34
  let%span s06_map_precond'18 = "06_map_precond.rs" 37 4 37 34
  let%span s06_map_precond'19 = "06_map_precond.rs" 38 4 38 44
  let%span s06_map_precond'20 = "06_map_precond.rs" 39 91 39 93
  let%span s06_map_precond'21 = "06_map_precond.rs" 89 12 92 63
  let%span s06_map_precond'22 = "06_map_precond.rs" 169 12 171 73
  let%span s06_map_precond'23 = "06_map_precond.rs" 97 14 97 83
  let%span s06_map_precond'24 = "06_map_precond.rs" 100 12 106 88
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  predicate resolve (self: MutBorrow.t ()) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t ()) = resolve _0
  
  type tuple = { _p0: UInt32.t; _p1: Seq.seq UInt32.t }
  
  predicate resolve'1 (_0: ()) = true
  
  predicate hist_inv (self: ()) (result_state: ()) = [%#s06_map_precond'11] true
  
  let rec closure0 [#"06_map_precond.rs" 198 22 198 33] [@coma:extspec] (self: MutBorrow.t ()) (x: UInt32.t)
    (_1: Seq.seq UInt32.t) (return' (x'0: UInt32.t)) = bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1'0}- s1
      | s1 = UInt32.add {x'0} {[%#s06_map_precond'3] (1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s2)
      | s2 = return' {_0} ] ] [ & _0: UInt32.t = Any.any_l () | & _1'0: MutBorrow.t () = self | & x'0: UInt32.t = x ]
  
  predicate postcondition_once (self: ()) (args: tuple) (result: UInt32.t) =
    [%#s06_map_precond'11] let {_p0 = x; _p1 = _1} = args in exists e: (). (exists bor_self: MutBorrow.t (). bor_self.current
            = self
          /\ bor_self.final = e /\ closure0'post'return' bor_self x _1 result /\ hist_inv self e)
      /\ resolve'1 e
  
  predicate postcondition_mut (self: ()) (args: tuple) (result_state: ()) (result: UInt32.t) =
    [%#s06_map_precond'11] let {_p0 = x; _p1 = _1} = args in exists bor_self: MutBorrow.t (). bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return' bor_self x _1 result /\ hist_inv self result_state
  
  function fn_mut_once (self: ()) (args: tuple) (res: UInt32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: tuple, res: UInt32.t. [%#sops'5] postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: tuple) (res_state: ()) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: tuple, res_state: (), res: UInt32.t. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  type t_U
  
  type t_Map = { t_Map__iter: t_U; t_Map__func: (); t_Map__produced: Seq.seq UInt32.t }
  
  predicate inv (_0: t_U)
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_U) (visited: Seq.seq UInt32.t) (o: t_U)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_U) (ab: Seq.seq UInt32.t) (b: t_U) (bc: Seq.seq UInt32.t) (c: t_U) : ()
  
  axiom produces_trans_spec:
    forall a: t_U, ab: Seq.seq UInt32.t, b: t_U, bc: Seq.seq UInt32.t, c: t_U. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_U) : ()
  
  axiom produces_refl_spec: forall self: t_U. [%#scommon] produces self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate precondition (self: ()) (args: tuple) =
    [%#s06_map_precond'11] let {_p0 = x; _p1 = _1} = args in forall bor_self: MutBorrow.t (). bor_self.current = self
      -> closure0'pre bor_self x _1
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_U)
  
  predicate next_precondition [#"06_map_precond.rs" 87 4 87 78] (iter: t_U) (func: ()) (produced: Seq.seq UInt32.t) =
    [%#s06_map_precond'21] forall e: UInt32.t, i: t_U [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { _p0 = e; _p1 = produced }
  
  predicate preservation [#"06_map_precond.rs" 112 4 112 49] (iter: t_U) (func: ()) =
    [%#s06_map_precond'13] forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t (), b: UInt32.t, i: t_U. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  predicate reinitialize [#"06_map_precond.rs" 125 4 125 33] =
    [%#s06_map_precond'12] forall iter: MutBorrow.t t_U, func: (). completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq UInt32.t) /\ preservation iter.final func
  
  predicate preservation_inv [#"06_map_precond.rs" 98 4 98 73] (iter: t_U) (func: ()) (produced: Seq.seq UInt32.t) =
    [%#s06_map_precond'24] forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t (), b: UInt32.t, i: t_U [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { _p0 = e1;
                                                                                                                                                                                                        _p1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = Seq.(++) produced s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = Seq.(++) produced s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_U, func: (), produced: Seq.seq UInt32.t. [%#s06_map_precond'23] produced
        = (Seq.empty: Seq.seq UInt32.t) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' [#"06_map_precond.rs" 167 4 167 30] (self: t_Map) =
    [%#s06_map_precond'22] reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'0 (_0: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'0 x]. inv'0 x
      = (invariant' x
      /\ match x with
        | {t_Map__iter = iter; t_Map__func = func; t_Map__produced = produced} -> inv iter
        end)
  
  let rec map (iter: t_U) (func: ()) (return' (x: t_Map)) =
    {[@expl:map 'iter' type invariant] [%#s06_map_precond'4] inv iter}
    {[@expl:map requires #0] [%#s06_map_precond'5] forall e: UInt32.t, i2: t_U. produces iter (Seq.singleton e) i2
      -> precondition func { _p0 = e; _p1 = Seq.empty: Seq.seq UInt32.t }}
    {[@expl:map requires #1] [%#s06_map_precond'6] reinitialize}
    {[@expl:map requires #2] [%#s06_map_precond'7] preservation iter func}
    any
    [ return''0 (result: t_Map) -> {[%#s06_map_precond'8] inv'0 result}
      {[%#s06_map_precond'9] result
      = { t_Map__iter = iter; t_Map__func = func; t_Map__produced = Seq.empty: Seq.seq UInt32.t }}
      (! return' {result}) ]
  
  predicate resolve'2 (_0: t_U)
  
  predicate resolve'3 (_0: Seq.seq UInt32.t) = true
  
  predicate resolve'4 [#"06_map_precond.rs" 10 9 10 16] (self: t_Map) =
    [%#s06_map_precond'14] resolve'2 self.t_Map__iter /\ resolve'1 self.t_Map__func /\ resolve'3 self.t_Map__produced
  
  predicate resolve'5 (_0: t_Map) = resolve'4 _0
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 44 4 44 67] (self: t_Map) (visited: Seq.seq UInt32.t) (succ: t_Map) =
    [%#s06_map_precond'10] hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t ()). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq UInt32.t [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { _p0 = Seq.get s i;
                                                   _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  function produces_trans'0 [#"06_map_precond.rs" 39 4 39 90] (a: t_Map) (ab: Seq.seq UInt32.t) (b: t_Map) (bc: Seq.seq UInt32.t) (c: t_Map) : ()
   = [%#s06_map_precond'20] ()
  
  axiom produces_trans_spec'0:
    forall a: t_Map, ab: Seq.seq UInt32.t, b: t_Map, bc: Seq.seq UInt32.t, c: t_Map. ([%#s06_map_precond'17] produces'0 a ab b)
      -> ([%#s06_map_precond'18] produces'0 b bc c) -> ([%#s06_map_precond'19] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"06_map_precond.rs" 32 4 32 26] (self: t_Map) : () = [%#s06_map_precond'16] ()
  
  axiom produces_refl_spec'0:
    forall self: t_Map. [%#s06_map_precond'15] produces'0 self (Seq.empty: Seq.seq UInt32.t) self
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec increment [#"06_map_precond.rs" 197 0 197 50] (iter: t_U) (return' (x: ())) =
    {[@expl:increment 'iter' type invariant] [%#s06_map_precond'0] inv iter}
    {[@expl:increment requires #0] [%#s06_map_precond'1] forall done': MutBorrow.t t_U. completed done'
      -> (forall next: t_U, steps: Seq.seq UInt32.t. produces done'.final steps next
        -> steps = (Seq.empty: Seq.seq UInt32.t) /\ done'.final = next)}
    {[@expl:increment requires #1] [%#s06_map_precond'2] forall prod: Seq.seq UInt32.t, fin: t_U. produces iter prod fin
      -> (forall x: int. 0 <= x /\ x < Seq.length prod -> UInt32.le (Seq.get prod x) (10: UInt32.t))}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_6 <- () ] s1 | s1 = map {iter'0} {_6} (fun (_ret: t_Map) -> [ &i <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 i} s1
      | s1 = -{resolve'5 i}- s2
      | s2 = {[@expl:assertion] [%#s06_map_precond] forall prod: Seq.seq UInt32.t, fin: t_Map. produces'0 i prod fin
          -> (forall x: int. 0 <= x /\ x < Seq.length prod -> UInt32.le (Seq.get prod x) (11: UInt32.t))}
        s3
      | s3 = bb3 ]
    | bb3 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & iter'0: t_U = iter | & i: t_Map = Any.any_l () | & _6: () = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_06_map_precond__counter [#"06_map_precond.rs" 208 0 208 48]
  let%span s06_map_precond = "06_map_precond.rs" 209 25 209 26
  let%span s06_map_precond'0 = "06_map_precond.rs" 208 40 208 44
  let%span s06_map_precond'1 = "06_map_precond.rs" 206 11 206 145
  let%span s06_map_precond'2 = "06_map_precond.rs" 207 11 207 83
  let%span s06_map_precond'3 = "06_map_precond.rs" 211 22 211 41
  let%span s06_map_precond'4 = "06_map_precond.rs" 212 15 212 16
  let%span s06_map_precond'5 = "06_map_precond.rs" 183 4 183 8
  let%span s06_map_precond'6 = "06_map_precond.rs" 176 11 178 67
  let%span s06_map_precond'7 = "06_map_precond.rs" 179 11 179 38
  let%span s06_map_precond'8 = "06_map_precond.rs" 180 11 180 48
  let%span s06_map_precond'9 = "06_map_precond.rs" 185 5 185 14
  let%span s06_map_precond'10 = "06_map_precond.rs" 181 10 181 77
  let%span s06_map_precond'11 = "06_map_precond.rs" 210 14 210 42
  let%span s06_map_precond'12 = "06_map_precond.rs" 127 12 130 47
  let%span s06_map_precond'13 = "06_map_precond.rs" 114 12 119 71
  let%span s06_map_precond'14 = "06_map_precond.rs" 12 4 14 40
  let%span s06_map_precond'15 = "06_map_precond.rs" 89 12 92 63
  let%span s06_map_precond'16 = "06_map_precond.rs" 169 12 171 73
  let%span s06_map_precond'17 = "06_map_precond.rs" 97 14 97 83
  let%span s06_map_precond'18 = "06_map_precond.rs" 100 12 106 88
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure0 = { _0: MutBorrow.t UInt64.t }
  
  predicate resolve (self: MutBorrow.t closure0) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0'0: MutBorrow.t closure0) = resolve _0'0
  
  type tuple = { _p0: UInt32.t; _p1: Seq.seq UInt32.t }
  
  predicate resolve'1 (self: MutBorrow.t UInt64.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0'0: MutBorrow.t UInt64.t) = resolve'1 _0'0
  
  predicate resolve'3 (_0'0: closure0) = resolve'2 _0'0._0
  
  predicate hist_inv (self: closure0) (result_state: closure0) =
    [%#s06_map_precond'11] (result_state._0).final = (self._0).final
  
  let rec closure0 [#"06_map_precond.rs" 210 14 210 42] [@coma:extspec] (self: MutBorrow.t closure0) (x: UInt32.t)
    (_prod: Seq.seq UInt32.t) (return' (x'0: UInt32.t)) = bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s06_map_precond'3] UInt64.t'int ((_1.current)._0).current = Seq.length _prod'0} s1
      | s1 = UInt64.add {((_1.current)._0).current} {[%#s06_map_precond'4] (1: UInt64.t)}
          (fun (_ret: UInt64.t) -> [ &_1 <- { _1 with current = { _0 = { (_1.current)._0 with current = _ret } } } ] s2)
      | s2 = -{resolve'0 _1}- s3
      | s3 = [ &_0'0 <- x'0 ] s4
      | s4 = return' {_0'0} ] ]
    [ & _0'0: UInt32.t = Any.any_l ()
    | & _1: MutBorrow.t closure0 = self
    | & x'0: UInt32.t = x
    | & _prod'0: Seq.seq UInt32.t = _prod ]
  
  predicate postcondition_once (self: closure0) (args: tuple) (result: UInt32.t) =
    [%#s06_map_precond'11] let {_p0 = x; _p1 = _prod} = args in exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current
            = self
          /\ bor_self.final = e /\ closure0'post'return' bor_self x _prod result /\ hist_inv self e)
      /\ resolve'3 e
  
  predicate postcondition_mut (self: closure0) (args: tuple) (result_state: closure0) (result: UInt32.t) =
    [%#s06_map_precond'11] let {_p0 = x; _p1 = _prod} = args in exists bor_self: MutBorrow.t closure0. bor_self.current
        = self
      /\ bor_self.final = result_state /\ closure0'post'return' bor_self x _prod result /\ hist_inv self result_state
  
  function fn_mut_once (self: closure0) (args: tuple) (res: UInt32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: tuple, res: UInt32.t. [%#sops'5] postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: tuple) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: tuple, res_state: closure0, res: UInt32.t. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  type t_I
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: closure0; t_Map__produced: Seq.seq UInt32.t }
  
  predicate inv (_0'0: t_I)
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq UInt32.t) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq UInt32.t) (b: t_I) (bc: Seq.seq UInt32.t) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq UInt32.t, b: t_I, bc: Seq.seq UInt32.t, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate precondition (self: closure0) (args: tuple) =
    [%#s06_map_precond'11] let {_p0 = x; _p1 = _prod} = args in forall bor_self: MutBorrow.t closure0. bor_self.current
        = self -> closure0'pre bor_self x _prod
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  predicate next_precondition [#"06_map_precond.rs" 87 4 87 78] (iter: t_I) (func: closure0) (produced: Seq.seq UInt32.t) =
    [%#s06_map_precond'15] forall e: UInt32.t, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { _p0 = e; _p1 = produced }
  
  predicate preservation [#"06_map_precond.rs" 112 4 112 49] (iter: t_I) (func: closure0) =
    [%#s06_map_precond'13] forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t closure0, b: UInt32.t, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  predicate reinitialize [#"06_map_precond.rs" 125 4 125 33] =
    [%#s06_map_precond'12] forall iter: MutBorrow.t t_I, func: closure0. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq UInt32.t) /\ preservation iter.final func
  
  predicate preservation_inv [#"06_map_precond.rs" 98 4 98 73] (iter: t_I) (func: closure0) (produced: Seq.seq UInt32.t) =
    [%#s06_map_precond'18] forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t closure0, b: UInt32.t, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { _p0 = e1;
                                                                                                                                                                                                              _p1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = Seq.(++) produced s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = Seq.(++) produced s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec:
    forall iter: t_I, func: closure0, produced: Seq.seq UInt32.t. [%#s06_map_precond'17] produced
        = (Seq.empty: Seq.seq UInt32.t) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' [#"06_map_precond.rs" 167 4 167 30] (self: t_Map) =
    [%#s06_map_precond'16] reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'0 (_0'0: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'0 x]. inv'0 x
      = (invariant' x
      /\ match x with
        | {t_Map__iter = iter; t_Map__func = func; t_Map__produced = produced} -> inv iter
        end)
  
  let rec map (iter: t_I) (func: closure0) (return' (x: t_Map)) =
    {[@expl:map 'iter' type invariant] [%#s06_map_precond'5] inv iter}
    {[@expl:map requires #0] [%#s06_map_precond'6] forall e: UInt32.t, i2: t_I. produces iter (Seq.singleton e) i2
      -> precondition func { _p0 = e; _p1 = Seq.empty: Seq.seq UInt32.t }}
    {[@expl:map requires #1] [%#s06_map_precond'7] reinitialize}
    {[@expl:map requires #2] [%#s06_map_precond'8] preservation iter func}
    any
    [ return''0 (result: t_Map) -> {[%#s06_map_precond'9] inv'0 result}
      {[%#s06_map_precond'10] result
      = { t_Map__iter = iter; t_Map__func = func; t_Map__produced = Seq.empty: Seq.seq UInt32.t }}
      (! return' {result}) ]
  
  predicate resolve'4 (_0'0: t_I)
  
  predicate resolve'5 (_0'0: Seq.seq UInt32.t) = true
  
  predicate resolve'6 [#"06_map_precond.rs" 10 9 10 16] (self: t_Map) =
    [%#s06_map_precond'14] resolve'4 self.t_Map__iter /\ resolve'3 self.t_Map__func /\ resolve'5 self.t_Map__produced
  
  predicate resolve'7 (_0'0: t_Map) = resolve'6 _0'0
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec counter [#"06_map_precond.rs" 208 0 208 48] (iter: t_I) (return' (x: ())) =
    {[@expl:counter 'iter' type invariant] [%#s06_map_precond'0] inv iter}
    {[@expl:counter requires #0] [%#s06_map_precond'1] forall done': MutBorrow.t t_I. completed done'
      -> (forall next: t_I, steps: Seq.seq UInt32.t. produces done'.final steps next
        -> steps = (Seq.empty: Seq.seq UInt32.t) /\ done'.final = next)}
    {[@expl:counter requires #1] [%#s06_map_precond'2] forall prod: Seq.seq UInt32.t, fin: t_I. produces iter prod fin
      -> Seq.length prod <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &cnt <- [%#s06_map_precond] (0: UInt64.t) ] s1
      | s1 = MutBorrow.borrow_mut <UInt64.t> {cnt}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &_8 <- _ret ] [ &cnt <- _ret.final ] s2)
      | s2 = [ &_7 <- { _0 = _8 } ] s3
      | s3 = map {iter'0} {_7} (fun (_ret: t_Map) -> [ &_5 <- _ret ] s4)
      | s4 = {[@expl:type invariant] inv'0 _5} s5
      | s5 = -{resolve'7 _5}- s6
      | s6 = bb3 ]
    | bb3 = return''0 {_0'0} ]
    [ & _0'0: () = Any.any_l ()
    | & iter'0: t_I = iter
    | & cnt: UInt64.t = Any.any_l ()
    | & _5: t_Map = Any.any_l ()
    | & _7: closure0 = Any.any_l ()
    | & _8: MutBorrow.t UInt64.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_06_map_precond__qyi6490470836283789663__resolve_coherence__refines [#"06_map_precond.rs" 10 9 10 16] (* <Map<I, F> as creusot_contracts::Resolve> *)
  let%span s06_map_precond = "06_map_precond.rs" 10 9 10 16
  let%span s06_map_precond'0 = "06_map_precond.rs" 12 4 14 40
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  
  use seq.Seq
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  predicate resolve (_0: t_F)
  
  predicate resolve'0 (_0: t_I)
  
  predicate structural_resolve (_0: t_Map) =
    match _0 with
      | {t_Map__iter = x0; t_Map__func = x1; t_Map__produced = x2} -> resolve x1 /\ resolve'0 x0
      end
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_F)
  
  predicate inv'1 (_0: t_Map)
  
  axiom inv_axiom: forall x: t_Map [inv'1 x]. inv'1 x
      -> match x with
        | {t_Map__iter = iter; t_Map__func = func; t_Map__produced = produced} -> inv iter /\ inv'0 func
        end
  
  predicate resolve'1 (_0: Seq.seq t_Item) = true
  
  predicate resolve'2 [#"06_map_precond.rs" 10 9 10 16] (self: t_Map) =
    [%#s06_map_precond'0] resolve'0 self.t_Map__iter /\ resolve self.t_Map__func /\ resolve'1 self.t_Map__produced
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s06_map_precond] forall self: t_Map. structural_resolve self /\ inv'1 self
      -> structural_resolve self /\ (forall result: (). resolve'2 self -> resolve'2 self)
end
module M_06_map_precond__qyi13778860181180212516__next__refines [#"06_map_precond.rs" 66 4 66 44] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond = "06_map_precond.rs" 66 4 66 44
  let%span s06_map_precond'0 = "06_map_precond.rs" 23 8 26 9
  let%span s06_map_precond'1 = "06_map_precond.rs" 151 14 151 68
  let%span s06_map_precond'2 = "06_map_precond.rs" 154 12 160 74
  let%span s06_map_precond'3 = "06_map_precond.rs" 45 8 59 9
  let%span s06_map_precond'4 = "06_map_precond.rs" 169 12 171 73
  let%span s06_map_precond'5 = "06_map_precond.rs" 127 12 130 47
  let%span s06_map_precond'6 = "06_map_precond.rs" 97 14 97 83
  let%span s06_map_precond'7 = "06_map_precond.rs" 100 12 106 88
  let%span s06_map_precond'8 = "06_map_precond.rs" 89 12 92 63
  let%span s06_map_precond'9 = "06_map_precond.rs" 114 12 119 71
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_I)
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate next_precondition [#"06_map_precond.rs" 87 4 87 78] (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'8] forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { _p0 = e; _p1 = produced }
  
  type t_B
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate preservation [#"06_map_precond.rs" 112 4 112 49] (iter: t_I) (func: t_F) =
    [%#s06_map_precond'9] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  predicate reinitialize [#"06_map_precond.rs" 125 4 125 33] =
    [%#s06_map_precond'5] forall iter: MutBorrow.t t_I, func: t_F. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv [#"06_map_precond.rs" 98 4 98 73] (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    [%#s06_map_precond'7] forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { _p0 = e1;
                                                                                                                                                                                             _p1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = Seq.(++) produced s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = Seq.(++) produced s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: t_F, produced: Seq.seq t_Item. [%#s06_map_precond'6] produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' [#"06_map_precond.rs" 167 4 167 30] (self: t_Map) =
    [%#s06_map_precond'4] reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_F)
  
  predicate inv'1 (_0: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'1 x]. inv'1 x
      = (invariant' x
      /\ match x with
        | {t_Map__iter = iter; t_Map__func = func; t_Map__produced = produced} -> inv iter /\ inv'0 func
        end)
  
  predicate invariant''0 (self: MutBorrow.t t_Map) = [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_0: MutBorrow.t t_Map)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Map [inv'2 x]. inv'2 x = invariant''0 x
  
  type t_Option = C_None | C_Some t_B
  
  predicate completed'0 [#"06_map_precond.rs" 22 4 22 35] (self: MutBorrow.t t_Map) =
    [%#s06_map_precond'0] (self.final).t_Map__produced = (Seq.empty: Seq.seq t_Item)
    /\ completed (MutBorrow.borrow_logic (self.current).t_Map__iter (self.final).t_Map__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ (self.current).t_Map__func = (self.final).t_Map__func
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 44 4 44 67] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    [%#s06_map_precond'3] hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { _p0 = Seq.get s i;
                                                   _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  predicate produces_one [#"06_map_precond.rs" 152 4 152 61] (self: t_Map) (visited: t_B) (succ: t_Map) =
    [%#s06_map_precond'2] exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut f.current { _p0 = e;
                                                                                              _p1 = self.t_Map__produced } f.final visited]. f.current
        = self.t_Map__func
      /\ f.final = succ.t_Map__func
      /\ produces self.t_Map__iter (Seq.singleton e) succ.t_Map__iter
      /\ succ.t_Map__produced = Seq.snoc self.t_Map__produced e
      /\ precondition f.current { _p0 = e; _p1 = self.t_Map__produced }
      /\ postcondition_mut f.current { _p0 = e; _p1 = self.t_Map__produced } f.final visited
  
  axiom produces_one_spec:
    forall self: t_Map, visited: t_B, succ: t_Map. [%#s06_map_precond'1] produces_one self visited succ
      = produces'0 self (Seq.singleton visited) succ
  
  predicate inv'3 (_0: t_B)
  
  predicate inv'4 (_0: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'4 x]. inv'4 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'3 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s06_map_precond] forall self: MutBorrow.t t_Map. inv'2 self
      -> inv'2 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed'0 self
              | C_Some v -> produces_one self.current v self.final
              end
          /\ inv'4 result
        -> match result with
            | C_None -> completed'0 self
            | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
            end
        /\ inv'4 result)
end
module M_06_map_precond__qyi13778860181180212516__produces_refl__refines [#"06_map_precond.rs" 32 4 32 26] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond = "06_map_precond.rs" 32 4 32 26
  let%span s06_map_precond'0 = "06_map_precond.rs" 45 8 59 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 44 4 44 67] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    [%#s06_map_precond'0] hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { _p0 = Seq.get s i;
                                                   _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s06_map_precond] forall self: t_Map. forall result: (). produces'0 self (Seq.empty: Seq.seq t_B) self
        -> produces'0 self (Seq.empty: Seq.seq t_B) self
end
module M_06_map_precond__qyi13778860181180212516__produces_trans__refines [#"06_map_precond.rs" 39 4 39 90] (* <Map<I, F> as common::Iterator> *)
  let%span s06_map_precond = "06_map_precond.rs" 39 4 39 90
  let%span s06_map_precond'0 = "06_map_precond.rs" 45 8 59 9
  let%span scommon = "common.rs" 14 4 14 49
  let%span scommon'0 = "common.rs" 18 4 18 34
  let%span scommon'1 = "common.rs" 19 4 19 34
  let%span scommon'2 = "common.rs" 20 4 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec:
    forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. ([%#scommon'0] produces a ab b)
      -> ([%#scommon'1] produces b bc c) -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { _p0: t_Item; _p1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] [#"06_map_precond.rs" 44 4 44 67] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    [%#s06_map_precond'0] hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { _p0 = Seq.get s i;
                                                   _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#s06_map_precond] forall a: t_Map. forall ab: Seq.seq t_B. forall b: t_Map. forall bc: Seq.seq t_B. forall c: t_Map. produces'0 b bc c
                /\ produces'0 a ab b
              -> produces'0 b bc c
              /\ produces'0 a ab b
              /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c -> produces'0 a (Seq.(++) ab bc) c)
end
