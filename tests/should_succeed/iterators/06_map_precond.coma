module M_06_map_precond__qyi13778860181180212516__produces_refl (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { f0 = Seq.get s i;
                                                   f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { f0 = Seq.get s i;
                                                        f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map
  
  function produces_refl'0 (self: t_Map) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] produces'0 self (Seq.empty: Seq.seq t_B) self
end
module M_06_map_precond__qyi13778860181180212516__produces_trans (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { f0 = Seq.get s i;
                                                   f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { f0 = Seq.get s i;
                                                        f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Map
  
  constant ab : Seq.seq t_B
  
  constant b : t_Map
  
  constant bc : Seq.seq t_B
  
  constant c : t_Map
  
  function produces_trans'0 (a: t_Map) (ab: Seq.seq t_B) (b: t_Map) (bc: Seq.seq t_B) (c: t_Map) : ()
  
  goal vc_produces_trans: produces'0 a ab b
    -> produces'0 b bc c -> ([@expl:produces_trans ensures] produces'0 a (Seq.(++) ab bc) c)
end
module M_06_map_precond__qyi13778860181180212516__next (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  predicate inv (_1: t_I)
  
  type t_Option = C_None | C_Some t_Item
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_I) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 [@inline:trivial] (_1: MutBorrow.t t_I) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef: forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate inv'1 (_1: t_Item)
  
  predicate inv'2 (_1: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'1 a_0
        end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in match res with
          | C_None -> completed self
          | C_Some v -> produces self.current (Seq.singleton v) self.final
          end
      /\ inv'2 res)
  
  let rec next (self: MutBorrow.t t_I) (return (x: t_Option)) = {[@expl:next requires] precondition () self}
    any [ return (result: t_Option) -> {postcondition_once () self result} (! return {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: t_Item)) = any
    [ good (field_0: t_Item) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate precondition'0 (self: t_F) (args: tuple)
  
  predicate inv'3 (_1: t_F)
  
  type t_B
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_F) = inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'4 [@inline:trivial] (_1: MutBorrow.t t_F) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate inv'5 [@inline:trivial] (_1: tuple) = inv'1 _1.f0
  
  meta "rewrite_def" predicate inv'5
  
  predicate inv'6 (_1: t_B)
  
  predicate postcondition_once'0 (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec call_mut (self_: MutBorrow.t t_F) (arg: tuple) (return (x: t_B)) =
    {[@expl:call_mut 'self_' type invariant] inv'4 self_}
    {[@expl:call_mut 'arg' type invariant] inv'5 arg}
    {[@expl:call_mut requires] precondition'0 self_.current arg}
    any
    [ return (result: t_B) -> {inv'6 result}
      {postcondition_mut self_.current arg self_.final result}
      (! return {result}) ]
  
  predicate next_precondition (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition'0 func { f0 = e; f1 = produced }
  
  predicate preservation (iter: t_I) (func: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition'0 f.current { f0 = e1; f1 = s }
      -> postcondition_mut f.current { f0 = e1; f1 = s } f.final b
      -> precondition'0 f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize =
    forall iter: MutBorrow.t t_I, func: t_F. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { f0 = e1;
                                                                                                                                                                       f1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition'0 f.current { f0 = e1; f1 = Seq.(++) produced s }
      -> postcondition_mut f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
      -> precondition'0 f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: t_F, produced: Seq.seq t_Item. produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant''1 (self: t_Map) =
    reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'7 (_1: t_Map)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Map [inv'7 x]. inv'7 x
      = (invariant''1 x /\ inv x.t_Map__iter /\ inv'3 x.t_Map__func)
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Map) = inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'8 [@inline:trivial] (_1: MutBorrow.t t_Map) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'8
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Map) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  function produces_one_invariant (self: t_Map) (e: t_Item) (r: t_B) (f: MutBorrow.t t_F) (iter: t_I) : () = ()
  
  axiom produces_one_invariant_spec:
    forall self: t_Map, e: t_Item, r: t_B, f: MutBorrow.t t_F, iter: t_I. invariant''1 self
      -> produces self.t_Map__iter (Seq.singleton e) iter
      -> f.current = self.t_Map__func
      -> postcondition_mut f.current { f0 = e; f1 = self.t_Map__produced } f.final r
      -> preservation_inv iter f.final (Seq.snoc self.t_Map__produced e)
  
  axiom produces_one_invariant_spec'0:
    forall self: t_Map, e: t_Item, r: t_B, f: MutBorrow.t t_F, iter: t_I. invariant''1 self
      -> produces self.t_Map__iter (Seq.singleton e) iter
      -> f.current = self.t_Map__func
      -> postcondition_mut f.current { f0 = e; f1 = self.t_Map__produced } f.final r
      -> next_precondition iter f.final (Seq.snoc self.t_Map__produced e)
  
  type t_Option'0 = C_None'0 | C_Some'0 t_B
  
  predicate inv'9 (_1: t_Option'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option'0 [inv'9 x]. inv'9 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'6 a_0
        end
  
  predicate completed'0 (self: MutBorrow.t t_Map) =
    self.final.t_Map__produced = (Seq.empty: Seq.seq t_Item)
    /\ completed (MutBorrow.borrow_logic self.current.t_Map__iter self.final.t_Map__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ self.current.t_Map__func = self.final.t_Map__func
  
  predicate produces'0 [@inline:trivial] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition'0 (Seq.get fs i).current { f0 = Seq.get s i;
                                                     f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { f0 = Seq.get s i;
                                                        f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces'0
  
  predicate produces_one (self: t_Map) (visited: t_B) (succ: t_Map) =
    exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut f.current { f0 = e;
                                                                        f1 = self.t_Map__produced } f.final visited]. f.current
        = self.t_Map__func
      /\ f.final = succ.t_Map__func
      /\ produces self.t_Map__iter (Seq.singleton e) succ.t_Map__iter
      /\ succ.t_Map__produced = Seq.snoc self.t_Map__produced e
      /\ precondition'0 f.current { f0 = e; f1 = self.t_Map__produced }
      /\ postcondition_mut f.current { f0 = e; f1 = self.t_Map__produced } f.final visited
  
  axiom produces_one_spec: forall self: t_Map, visited: t_B, succ: t_Map. produces_one self visited succ
      = produces'0 self (Seq.singleton visited) succ
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'0 (self: MutBorrow.t t_Map) (return (x: t_Option'0)) = {[@expl:next 'self' type invariant] inv'8 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv self.current.t_Map__iter}
        MutBorrow.borrow_final <t_I> {self.current.t_Map__iter} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_4 <- _ret ] -{inv _ret.final}-
            [ &self <- { self with current = { self.current with t_Map__iter = _ret.final } } ] s1)
      | s1 = next {_4} (fun (_ret: t_Option) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = any [ br0 -> {_3 = C_None} (! bb4) | br1 (x0: t_Item) -> {_3 = C_Some x0} (! bb5) ]
    | bb5 = s0
      [ s0 = v_Some {_3} (fun (r0: t_Item) -> [ &v <- r0 ] s1)
      | s1 = {[@expl:assertion] precondition'0 self.current.t_Map__func { f0 = v; f1 = self.current.t_Map__produced }}
        s2
      | s2 = [ &produced <- Seq.snoc self.current.t_Map__produced v ] s3
      | s3 = bb6 ]
    | bb6 = s0
      [ s0 = {inv'3 self.current.t_Map__func}
        MutBorrow.borrow_final <t_F> {self.current.t_Map__func} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
          (fun (_ret: MutBorrow.t t_F) ->
            [ &_12 <- _ret ] -{inv'3 _ret.final}-
            [ &self <- { self with current = { self.current with t_Map__func = _ret.final } } ] s1)
      | s1 = [ &_13 <- { f0 = v; f1 = self.current.t_Map__produced } ] s2
      | s2 = call_mut {_12} {_13} (fun (_ret: t_B) -> [ &r <- _ret ] s3)
      | s3 = bb8 ]
    | bb8 = s0
      [ s0 = [ &self <- { self with current = { self.current with t_Map__produced = produced } } ] s1
      | s1 = {[@expl:type invariant] inv'8 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = [ &_17 <- () ] s4
      | s4 = bb9 ]
    | bb9 = s0 [ s0 = [ &_0 <- C_Some'0 r ] s1 | s1 = bb15 ]
    | bb4 = s0 [ s0 = [ &_20 <- Seq.empty: Seq.seq t_Item ] s1 | s1 = bb13 ]
    | bb13 = s0
      [ s0 = [ &self <- { self with current = { self.current with t_Map__produced = _20 } } ] s1
      | s1 = {[@expl:type invariant] inv'8 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = [ &_0 <- C_None'0 ] s4
      | s4 = bb15 ]
    | bb15 = return {_0} ]
    [ & _0: t_Option'0 = Any.any_l ()
    | & self: MutBorrow.t t_Map = self
    | & _3: t_Option = Any.any_l ()
    | & _4: MutBorrow.t t_I = Any.any_l ()
    | & v: t_Item = Any.any_l ()
    | & produced: Seq.seq t_Item = Any.any_l ()
    | & r: t_B = Any.any_l ()
    | & _12: MutBorrow.t t_F = Any.any_l ()
    | & _13: tuple = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _20: Seq.seq t_Item = Any.any_l () ])
    [ return (result: t_Option'0) -> {[@expl:next result type invariant] inv'9 result}
      {[@expl:next ensures] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces_one self.current v self.final
        end}
      (! return {result}) ]
end
module M_06_map_precond__qyi10069788794515621353__preservation_inv (* Map<I, F> *)
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  type t_B
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate preservation (iter: t_I) (func: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = s }
      -> postcondition_mut f.current { f0 = e1; f1 = s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant iter : t_I
  
  constant func : t_F
  
  constant produced : Seq.seq t_Item
  
  predicate preservation_inv (iter: t_I) (func: t_F) (produced: Seq.seq t_Item)
  
  goal vc_preservation_inv: [@expl:preservation_inv ensures] produced = (Seq.empty: Seq.seq t_Item)
    -> (forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { f0 = e1;
                                                                                                                                                                           f1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
        -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
        -> precondition f.current { f0 = e1; f1 = Seq.(++) produced s }
        -> postcondition_mut f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
        -> precondition f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 })
    = preservation iter func
end
module M_06_map_precond__qyi10069788794515621353__produces_one_invariant (* Map<I, F> *)
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  predicate completed (self: MutBorrow.t t_I)
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate next_precondition (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { f0 = e; f1 = produced }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate preservation (iter: t_I) (func: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = s }
      -> postcondition_mut f.current { f0 = e1; f1 = s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize =
    forall iter: MutBorrow.t t_I, func: t_F. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { f0 = e1;
                                                                                                                                                                       f1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = Seq.(++) produced s }
      -> postcondition_mut f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: t_F, produced: Seq.seq t_Item. produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' (self: t_Map) =
    reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map
  
  constant e : t_Item
  
  constant r : t_B
  
  constant f : MutBorrow.t t_F
  
  constant iter : t_I
  
  function produces_one_invariant (self: t_Map) (e: t_Item) (r: t_B) (f: MutBorrow.t t_F) (iter: t_I) : ()
  
  goal vc_produces_one_invariant: invariant' self
    -> produces self.t_Map__iter (Seq.singleton e) iter
    -> f.current = self.t_Map__func
    -> postcondition_mut f.current { f0 = e; f1 = self.t_Map__produced } f.final r
    -> (forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, i: t_I. produces iter (Seq.snoc (Seq.snoc s e1) e2) i
        -> produces self.t_Map__iter (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
    && ([@expl:produces_one_invariant ensures #0] preservation_inv iter f.final (Seq.snoc self.t_Map__produced e))
    && ([@expl:produces_one_invariant ensures #1] next_precondition iter f.final (Seq.snoc self.t_Map__produced e))
end
module M_06_map_precond__qyi10069788794515621353__produces_one (* Map<I, F> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { f0 = Seq.get s i;
                                                   f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { f0 = Seq.get s i;
                                                        f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces'0
  
  function produces_trans'0 (a: t_Map) (ab: Seq.seq t_B) (b: t_Map) (bc: Seq.seq t_B) (c: t_Map) : () = ()
  
  axiom produces_trans_spec'0: forall a: t_Map, ab: Seq.seq t_B, b: t_Map, bc: Seq.seq t_B, c: t_Map. produces'0 a ab b
      -> produces'0 b bc c -> produces'0 a (Seq.(++) ab bc) c
  
  function produces_refl'0 (self: t_Map) : () = ()
  
  axiom produces_refl_spec'0: forall self: t_Map. produces'0 self (Seq.empty: Seq.seq t_B) self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map
  
  constant visited : t_B
  
  constant succ : t_Map
  
  predicate produces_one (self: t_Map) (visited: t_B) (succ: t_Map)
  
  goal vc_produces_one:
    [@expl:produces_one ensures] (exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut f.current { f0 = e;
                                                                                                      f1 = self.t_Map__produced } f.final visited]. f.current
          = self.t_Map__func
        /\ f.final = succ.t_Map__func
        /\ produces self.t_Map__iter (Seq.singleton e) succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.snoc self.t_Map__produced e
        /\ precondition f.current { f0 = e; f1 = self.t_Map__produced }
        /\ postcondition_mut f.current { f0 = e; f1 = self.t_Map__produced } f.final visited)
    = produces'0 self (Seq.singleton visited) succ
end
module M_06_map_precond__map
  use seq.Seq
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_F
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_F)
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate next_precondition (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { f0 = e; f1 = produced }
  
  type t_B
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate preservation (iter: t_I) (func: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = s }
      -> postcondition_mut f.current { f0 = e1; f1 = s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize =
    forall iter: MutBorrow.t t_I, func: t_F. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { f0 = e1;
                                                                                                                                                                       f1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = Seq.(++) produced s }
      -> postcondition_mut f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: t_F, produced: Seq.seq t_Item. produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' (self: t_Map) =
    reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'1 (_1: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'1 x]. inv'1 x
      = (invariant' x /\ inv x.t_Map__iter /\ inv'0 x.t_Map__func)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec map (iter: t_I) (func: t_F) (return (x: t_Map)) = {[@expl:map 'iter' type invariant] inv iter}
    {[@expl:map 'func' type invariant] inv'0 func}
    {[@expl:map requires #0] forall e: t_Item, i2: t_I. produces iter (Seq.singleton e) i2
      -> precondition func { f0 = e; f1 = Seq.empty: Seq.seq t_Item }}
    {[@expl:map requires #1] reinitialize}
    {[@expl:map requires #2] preservation iter func}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = [ &_9 <- Seq.empty: Seq.seq t_Item ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- { t_Map__iter = iter; t_Map__func = func; t_Map__produced = _9 } ] s1 | s1 = bb6 ]
    | bb6 = return {_0} ]
    [ & _0: t_Map = Any.any_l () | & iter: t_I = iter | & func: t_F = func | & _9: Seq.seq t_Item = Any.any_l () ])
    [ return (result: t_Map) -> {[@expl:map result type invariant] inv'1 result}
      {[@expl:map ensures] result
      = { t_Map__iter = iter; t_Map__func = func; t_Map__produced = Seq.empty: Seq.seq t_Item }}
      (! return {result}) ]
end
module M_06_map_precond__identity
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t ()) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  type t_I
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate inv (_1: t_Item)
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate resolve'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve'0
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t ()) (x: t_Item) (_1: Seq.seq t_Item) (return (x'0: t_Item)) = bb0
    [ bb0 = s0 [ s0 = -{resolve self}- s1 | s1 = [ &_0 <- x ] s2 | s2 = bb1 ] | bb1 = return {_0} ]
    [ & _0: t_Item = Any.any_l () | & self: MutBorrow.t () = self | & x: t_Item = x ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: tuple) (result: t_Item) =
    let {f0 = x; f1 = _1} = args in exists e: (). exists bor_self: MutBorrow.t (). bor_self.current = self
        /\ bor_self.final = e /\ closure0'post'return bor_self x _1 result /\ hist_inv self e
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: tuple) (result_state: ()) (result: t_Item) =
    let {f0 = x; f1 = _1} = args in exists bor_self: MutBorrow.t (). bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self x _1 result /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: tuple) (res: t_Item) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: tuple, res: t_Item. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'0 res_state)
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: tuple) (res_state: ()) (res: t_Item) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: tuple, res_state: (), res: t_Item. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: (); t_Map__produced: Seq.seq t_Item }
  
  predicate inv'0 (_1: t_I)
  
  predicate precondition [@inline:trivial] (self: ()) (args: tuple) =
    let {f0 = x; f1 = _1} = args in forall bor_self: MutBorrow.t (). bor_self.current = self
      -> closure0'pre bor_self x _1
  
  meta "rewrite_def" predicate precondition
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate next_precondition (iter: t_I) (func: ()) (produced: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { f0 = e; f1 = produced }
  
  predicate preservation (iter: t_I) (func: ()) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t (), b: t_Item, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = s }
      -> postcondition_mut f.current { f0 = e1; f1 = s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize =
    forall iter: MutBorrow.t t_I, func: (). completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv (iter: t_I) (func: ()) (produced: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t (), b: t_Item, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { f0 = e1;
                                                                                                                                                                         f1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = Seq.(++) produced s }
      -> postcondition_mut f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: (), produced: Seq.seq t_Item. produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' (self: t_Map) =
    reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'1 (_1: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'1 x]. inv'1 x = (invariant' x /\ inv'0 x.t_Map__iter)
  
  let rec map (iter: t_I) (func: ()) (return (x: t_Map)) = {[@expl:map 'iter' type invariant] inv'0 iter}
    {[@expl:map requires #0] forall e: t_Item, i2: t_I. produces iter (Seq.singleton e) i2
      -> precondition func { f0 = e; f1 = Seq.empty: Seq.seq t_Item }}
    {[@expl:map requires #1] reinitialize}
    {[@expl:map requires #2] preservation iter func}
    any
    [ return (result: t_Map) -> {inv'1 result}
      {result = { t_Map__iter = iter; t_Map__func = func; t_Map__produced = Seq.empty: Seq.seq t_Item }}
      (! return {result}) ]
  
  predicate resolve'1 (_1: t_I)
  
  predicate resolve'2 (_1: t_Map)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Map [resolve'2 x]. resolve'2 x = resolve'1 x.t_Map__iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec identity (iter: t_I) (return (x: ())) = {[@expl:identity 'iter' type invariant] inv'0 iter}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- () ] s1
      | s1 = map {iter} {_4} (fun (_ret: t_Map) -> [ &_2 <- _ret ] s2)
      | s2 = {[@expl:type invariant] inv'1 _2} s3
      | s3 = -{resolve'2 _2}- s4
      | s4 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: () = Any.any_l () | & iter: t_I = iter | & _2: t_Map = Any.any_l () | & _4: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_06_map_precond__increment
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t ()) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  type tuple = { f0: UInt32.t; f1: Seq.seq UInt32.t }
  
  predicate resolve'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve'0
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t ()) (x: UInt32.t) (_1: Seq.seq UInt32.t)
    (return (x'0: UInt32.t)) = bb0
    [ bb0 = s0
      [ s0 = -{resolve self}- s1
      | s1 = UInt32.add {x} {(1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s2)
      | s2 = return {_0} ] ] [ & _0: UInt32.t = Any.any_l () | & self: MutBorrow.t () = self | & x: UInt32.t = x ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: tuple) (result: UInt32.t) =
    let {f0 = x; f1 = _1} = args in exists e: (). exists bor_self: MutBorrow.t (). bor_self.current = self
        /\ bor_self.final = e /\ closure0'post'return bor_self x _1 result /\ hist_inv self e
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: tuple) (result_state: ()) (result: UInt32.t) =
    let {f0 = x; f1 = _1} = args in exists bor_self: MutBorrow.t (). bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self x _1 result /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: tuple) (res: UInt32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: tuple, res: UInt32.t. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'0 res_state)
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: tuple) (res_state: ()) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: tuple, res_state: (), res: UInt32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  type t_U
  
  type t_Map = { t_Map__iter: t_U; t_Map__func: (); t_Map__produced: Seq.seq UInt32.t }
  
  predicate inv (_1: t_U)
  
  predicate produces (self: t_U) (visited: Seq.seq UInt32.t) (o: t_U)
  
  function produces_trans (a: t_U) (ab: Seq.seq UInt32.t) (b: t_U) (bc: Seq.seq UInt32.t) (c: t_U) : ()
  
  axiom produces_trans_spec: forall a: t_U, ab: Seq.seq UInt32.t, b: t_U, bc: Seq.seq UInt32.t, c: t_U. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_U) : ()
  
  axiom produces_refl_spec: forall self: t_U. produces self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate precondition [@inline:trivial] (self: ()) (args: tuple) =
    let {f0 = x; f1 = _1} = args in forall bor_self: MutBorrow.t (). bor_self.current = self
      -> closure0'pre bor_self x _1
  
  meta "rewrite_def" predicate precondition
  
  predicate completed (self: MutBorrow.t t_U)
  
  predicate next_precondition (iter: t_U) (func: ()) (produced: Seq.seq UInt32.t) =
    forall e: UInt32.t, i: t_U [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { f0 = e; f1 = produced }
  
  predicate preservation (iter: t_U) (func: ()) =
    forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t (), b: UInt32.t, i: t_U. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = s }
      -> postcondition_mut f.current { f0 = e1; f1 = s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize =
    forall iter: MutBorrow.t t_U, func: (). completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq UInt32.t) /\ preservation iter.final func
  
  predicate preservation_inv (iter: t_U) (func: ()) (produced: Seq.seq UInt32.t) =
    forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t (), b: UInt32.t, i: t_U [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { f0 = e1;
                                                                                                                                                                                 f1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = Seq.(++) produced s }
      -> postcondition_mut f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_U, func: (), produced: Seq.seq UInt32.t. produced
        = (Seq.empty: Seq.seq UInt32.t) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' (self: t_Map) =
    reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'0 (_1: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'0 x]. inv'0 x = (invariant' x /\ inv x.t_Map__iter)
  
  let rec map (iter: t_U) (func: ()) (return (x: t_Map)) = {[@expl:map 'iter' type invariant] inv iter}
    {[@expl:map requires #0] forall e: UInt32.t, i2: t_U. produces iter (Seq.singleton e) i2
      -> precondition func { f0 = e; f1 = Seq.empty: Seq.seq UInt32.t }}
    {[@expl:map requires #1] reinitialize}
    {[@expl:map requires #2] preservation iter func}
    any
    [ return (result: t_Map) -> {inv'0 result}
      {result = { t_Map__iter = iter; t_Map__func = func; t_Map__produced = Seq.empty: Seq.seq UInt32.t }}
      (! return {result}) ]
  
  predicate resolve'1 (_1: t_U)
  
  predicate resolve'2 (_1: t_Map)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Map [resolve'2 x]. resolve'2 x = resolve'1 x.t_Map__iter
  
  predicate produces'0 [@inline:trivial] (self: t_Map) (visited: Seq.seq UInt32.t) (succ: t_Map) =
    hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t ()). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq UInt32.t [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { f0 = Seq.get s i;
                                                   f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { f0 = Seq.get s i;
                                                        f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces'0
  
  function produces_trans'0 (a: t_Map) (ab: Seq.seq UInt32.t) (b: t_Map) (bc: Seq.seq UInt32.t) (c: t_Map) : () = ()
  
  axiom produces_trans_spec'0:
    forall a: t_Map, ab: Seq.seq UInt32.t, b: t_Map, bc: Seq.seq UInt32.t, c: t_Map. produces'0 a ab b
      -> produces'0 b bc c -> produces'0 a (Seq.(++) ab bc) c
  
  function produces_refl'0 (self: t_Map) : () = ()
  
  axiom produces_refl_spec'0: forall self: t_Map. produces'0 self (Seq.empty: Seq.seq UInt32.t) self
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec increment (iter: t_U) (return (x: ())) = {[@expl:increment 'iter' type invariant] inv iter}
    {[@expl:increment requires #0] forall done': MutBorrow.t t_U. completed done'
      -> (forall next: t_U, steps: Seq.seq UInt32.t. produces done'.final steps next
        -> steps = (Seq.empty: Seq.seq UInt32.t) /\ done'.final = next)}
    {[@expl:increment requires #1] forall prod: Seq.seq UInt32.t, fin: t_U. produces iter prod fin
      -> (forall x: int. 0 <= x /\ x < Seq.length prod -> UInt32.le (Seq.get prod x) (10: UInt32.t))}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_6 <- () ] s1 | s1 = map {iter} {_6} (fun (_ret: t_Map) -> [ &i <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 i} s1
      | s1 = -{resolve'2 i}- s2
      | s2 = {[@expl:assertion] forall prod: Seq.seq UInt32.t, fin: t_Map. produces'0 i prod fin
          -> (forall x: int. 0 <= x /\ x < Seq.length prod -> UInt32.le (Seq.get prod x) (11: UInt32.t))}
        s3
      | s3 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: () = Any.any_l () | & iter: t_U = iter | & i: t_Map = Any.any_l () | & _6: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_06_map_precond__counter
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure0 = { c0: MutBorrow.t UInt64.t }
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t closure0) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  type tuple = { f0: UInt32.t; f1: Seq.seq UInt32.t }
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: closure0) = resolve'0 _1.c0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate hist_inv [@inline:trivial] (self: closure0) (result_state: closure0) = result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (x: UInt32.t) (_prod: Seq.seq UInt32.t)
    (return (x'0: UInt32.t)) = bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] UInt64.t'int self.current.c0.current = Seq.length _prod} s1
      | s1 = UInt64.add {self.current.c0.current} {(1: UInt64.t)}
          (fun (_ret: UInt64.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s2)
      | s2 = -{resolve self}- s3
      | s3 = [ &_0 <- x ] s4
      | s4 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & self: MutBorrow.t closure0 = self
    | & x: UInt32.t = x
    | & _prod: Seq.seq UInt32.t = _prod ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: tuple) (result: UInt32.t) =
    let {f0 = x; f1 = _prod} = args in exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current
            = self
          /\ bor_self.final = e /\ closure0'post'return bor_self x _prod result /\ hist_inv self e)
      /\ resolve'1 e
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: closure0) (args: tuple) (result_state: closure0) (result: UInt32.t) =
    let {f0 = x; f1 = _prod} = args in exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self x _prod result /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure0) (args: tuple) (res: UInt32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: tuple, res: UInt32.t. postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: tuple) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: tuple, res_state: closure0, res: UInt32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  type t_I
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: closure0; t_Map__produced: Seq.seq UInt32.t }
  
  predicate inv (_1: t_I)
  
  predicate produces (self: t_I) (visited: Seq.seq UInt32.t) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq UInt32.t) (b: t_I) (bc: Seq.seq UInt32.t) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq UInt32.t, b: t_I, bc: Seq.seq UInt32.t, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate precondition [@inline:trivial] (self: closure0) (args: tuple) =
    let {f0 = x; f1 = _prod} = args in forall bor_self: MutBorrow.t closure0. bor_self.current = self
      -> closure0'pre bor_self x _prod
  
  meta "rewrite_def" predicate precondition
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate next_precondition (iter: t_I) (func: closure0) (produced: Seq.seq UInt32.t) =
    forall e: UInt32.t, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { f0 = e; f1 = produced }
  
  predicate preservation (iter: t_I) (func: closure0) =
    forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t closure0, b: UInt32.t, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = s }
      -> postcondition_mut f.current { f0 = e1; f1 = s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize =
    forall iter: MutBorrow.t t_I, func: closure0. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq UInt32.t) /\ preservation iter.final func
  
  predicate preservation_inv (iter: t_I) (func: closure0) (produced: Seq.seq UInt32.t) =
    forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t closure0, b: UInt32.t, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { f0 = e1;
                                                                                                                                                                                       f1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = Seq.(++) produced s }
      -> postcondition_mut f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: closure0, produced: Seq.seq UInt32.t. produced
        = (Seq.empty: Seq.seq UInt32.t) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' (self: t_Map) =
    reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv'0 (_1: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'0 x]. inv'0 x = (invariant' x /\ inv x.t_Map__iter)
  
  let rec map (iter: t_I) (func: closure0) (return (x: t_Map)) = {[@expl:map 'iter' type invariant] inv iter}
    {[@expl:map requires #0] forall e: UInt32.t, i2: t_I. produces iter (Seq.singleton e) i2
      -> precondition func { f0 = e; f1 = Seq.empty: Seq.seq UInt32.t }}
    {[@expl:map requires #1] reinitialize}
    {[@expl:map requires #2] preservation iter func}
    any
    [ return (result: t_Map) -> {inv'0 result}
      {result = { t_Map__iter = iter; t_Map__func = func; t_Map__produced = Seq.empty: Seq.seq UInt32.t }}
      (! return {result}) ]
  
  predicate resolve'2 (_1: t_I)
  
  predicate resolve'3 (_1: t_Map)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Map [resolve'3 x]. resolve'3 x
      = (resolve'2 x.t_Map__iter /\ resolve'1 x.t_Map__func)
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec counter (iter: t_I) (return (x: ())) = {[@expl:counter 'iter' type invariant] inv iter}
    {[@expl:counter requires #0] forall done': MutBorrow.t t_I. completed done'
      -> (forall next: t_I, steps: Seq.seq UInt32.t. produces done'.final steps next
        -> steps = (Seq.empty: Seq.seq UInt32.t) /\ done'.final = next)}
    {[@expl:counter requires #1] forall prod: Seq.seq UInt32.t, fin: t_I. produces iter prod fin
      -> Seq.length prod <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &cnt <- (0: UInt64.t) ] s1
      | s1 = MutBorrow.borrow_mut <UInt64.t> {cnt}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &_8 <- _ret ] [ &cnt <- _ret.final ] s2)
      | s2 = [ &_7 <- { c0 = _8 } ] s3
      | s3 = map {iter} {_7} (fun (_ret: t_Map) -> [ &_5 <- _ret ] s4)
      | s4 = {[@expl:type invariant] inv'0 _5} s5
      | s5 = -{resolve'3 _5}- s6
      | s6 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & iter: t_I = iter
    | & cnt: UInt64.t = Any.any_l ()
    | & _5: t_Map = Any.any_l ()
    | & _7: closure0 = Any.any_l ()
    | & _8: MutBorrow.t UInt64.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_06_map_precond__qyi13778860181180212516__next__refines (* <Map<I, F> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  predicate completed (self: MutBorrow.t t_I)
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate next_precondition (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces iter (Seq.singleton e) i]. produces iter (Seq.singleton e) i
      -> precondition func { f0 = e; f1 = produced }
  
  type t_B
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate preservation (iter: t_I) (func: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = s }
      -> postcondition_mut f.current { f0 = e1; f1 = s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize =
    forall iter: MutBorrow.t t_I, func: t_F. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq t_Item) /\ preservation iter.final func
  
  predicate preservation_inv (iter: t_I) (func: t_F) (produced: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut f.current { f0 = e1;
                                                                                                                                                                       f1 = Seq.(++) produced s } f.final b]. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { f0 = e1; f1 = Seq.(++) produced s }
      -> postcondition_mut f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
      -> precondition f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 }
  
  axiom preservation_inv_spec: forall iter: t_I, func: t_F, produced: Seq.seq t_Item. produced
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' (self: t_Map) =
    reinitialize
    /\ preservation_inv self.t_Map__iter self.t_Map__func self.t_Map__produced
    /\ next_precondition self.t_Map__iter self.t_Map__func self.t_Map__produced
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_F)
  
  predicate inv'1 (_1: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'1 x]. inv'1 x
      = (invariant' x /\ inv x.t_Map__iter /\ inv'0 x.t_Map__func)
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_Map) = inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 [@inline:trivial] (_1: MutBorrow.t t_Map) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'2
  
  type t_Option = C_None | C_Some t_B
  
  predicate completed'0 (self: MutBorrow.t t_Map) =
    self.final.t_Map__produced = (Seq.empty: Seq.seq t_Item)
    /\ completed (MutBorrow.borrow_logic self.current.t_Map__iter self.final.t_Map__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ self.current.t_Map__func = self.final.t_Map__func
  
  predicate produces'0 [@inline:trivial] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { f0 = Seq.get s i;
                                                   f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { f0 = Seq.get s i;
                                                        f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces'0
  
  predicate produces_one (self: t_Map) (visited: t_B) (succ: t_Map) =
    exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut f.current { f0 = e;
                                                                        f1 = self.t_Map__produced } f.final visited]. f.current
        = self.t_Map__func
      /\ f.final = succ.t_Map__func
      /\ produces self.t_Map__iter (Seq.singleton e) succ.t_Map__iter
      /\ succ.t_Map__produced = Seq.snoc self.t_Map__produced e
      /\ precondition f.current { f0 = e; f1 = self.t_Map__produced }
      /\ postcondition_mut f.current { f0 = e; f1 = self.t_Map__produced } f.final visited
  
  axiom produces_one_spec: forall self: t_Map, visited: t_B, succ: t_Map. produces_one self visited succ
      = produces'0 self (Seq.singleton visited) succ
  
  predicate inv'3 (_1: t_B)
  
  predicate inv'4 (_1: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'4 x]. inv'4 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'3 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Map. inv'2 self
      -> inv'2 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed'0 self
              | C_Some v -> produces_one self.current v self.final
              end
          /\ inv'4 result
        -> match result with
            | C_None -> completed'0 self
            | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
            end
        /\ inv'4 result)
end
module M_06_map_precond__qyi13778860181180212516__produces_refl__refines (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { f0 = Seq.get s i;
                                                   f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { f0 = Seq.get s i;
                                                        f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Map. forall result: (). produces'0 self (Seq.empty: Seq.seq t_B) self
        -> produces'0 self (Seq.empty: Seq.seq t_B) self
end
module M_06_map_precond__qyi13778860181180212516__produces_trans__refines (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map = { t_Map__iter: t_I; t_Map__func: t_F; t_Map__produced: Seq.seq t_Item }
  
  type t_B
  
  type tuple = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once (self: t_F) (args: tuple) (result: t_B)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: tuple) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: tuple) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: tuple, res: t_B. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: tuple) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: tuple, res_state: t_F, res: t_B. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition (self: t_F) (args: tuple)
  
  predicate produces'0 [@inline:trivial] (self: t_Map) (visited: Seq.seq t_B) (succ: t_Map) =
    hist_inv self.t_Map__func succ.t_Map__func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces self.t_Map__iter s succ.t_Map__iter]. Seq.length s = Seq.length visited
        /\ produces self.t_Map__iter s succ.t_Map__iter
        /\ succ.t_Map__produced = Seq.(++) self.t_Map__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_Map__func = succ.t_Map__func
          else
            (Seq.get fs 0).current = self.t_Map__func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_Map__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_Map__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { f0 = Seq.get s i;
                                                   f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { f0 = Seq.get s i;
                                                        f1 = Seq.(++) self.t_Map__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Map. forall ab: Seq.seq t_B. forall b: t_Map. forall bc: Seq.seq t_B. forall c: t_Map. produces'0 b bc c
                /\ produces'0 a ab b
              -> produces'0 b bc c
              /\ produces'0 a ab b
              /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c -> produces'0 a (Seq.(++) ab bc) c)
end
