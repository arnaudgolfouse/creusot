module M_impl_Iterator_for_Map_I_F__produces_refl (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  type t_B
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ succ.produced = Seq.(++) self.produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current { f0 = Seq.get s i; f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut_F (Seq.get fs i).current { f0 = Seq.get s i;
                                                          f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map_I_F
  
  function produces_refl_Map_I_F (self: t_Map_I_F) : ()
  
  goal vc_produces_refl_Map_I_F: [@expl:produces_refl ensures] produces_Map_I_F self (Seq.empty: Seq.seq t_B) self
end
module M_impl_Iterator_for_Map_I_F__produces_trans (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  type t_B
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ succ.produced = Seq.(++) self.produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current { f0 = Seq.get s i; f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut_F (Seq.get fs i).current { f0 = Seq.get s i;
                                                          f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Map_I_F
  
  constant ab : Seq.seq t_B
  
  constant b : t_Map_I_F
  
  constant bc : Seq.seq t_B
  
  constant c : t_Map_I_F
  
  function produces_trans_Map_I_F (a: t_Map_I_F) (ab: Seq.seq t_B) (b: t_Map_I_F) (bc: Seq.seq t_B) (c: t_Map_I_F) : ()
  
  goal vc_produces_trans_Map_I_F: produces_Map_I_F a ab b
    -> produces_Map_I_F b bc c -> ([@expl:produces_trans ensures] produces_Map_I_F a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Map_I_F__next (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  predicate inv_I (_1: t_I)
  
  type t_Option_Item = None | Some t_Item
  
  predicate invariant_ref_I [@inline:trivial] (self: MutBorrow.t t_I) = inv_I self.current /\ inv_I self.final
  
  meta "rewrite_def" predicate invariant_ref_I
  
  predicate inv_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = invariant_ref_I _1
  
  meta "rewrite_def" predicate inv_ref_I
  
  predicate precondition_next (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    forall args: MutBorrow.t t_I [precondition_next () args]. (let self = args in inv_ref_I self)
      -> precondition_next () args
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate inv_Item (_1: t_Item)
  
  predicate inv_Option_Item (_1: t_Option_Item)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_Item [inv_Option_Item x]. inv_Option_Item x
      = match x with
        | None -> true
        | Some f0 -> inv_Item f0
        end
  
  predicate postcondition_once_next (self: ()) (args: MutBorrow.t t_I) (result: t_Option_Item)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option_Item [postcondition_once_next () args res]. postcondition_once_next () args res
      -> (let self = args in match res with
          | None -> completed_I self
          | Some v -> produces_I self.current (Seq.singleton v) self.final
          end
      /\ inv_Option_Item res)
  
  let rec next_I (self: MutBorrow.t t_I) (return (x: t_Option_Item)) = {[@expl:next requires] precondition_next () self}
    any [ return (result: t_Option_Item) -> {postcondition_once_next () self result} (! return {result}) ]
  
  let rec elim_Some (input: t_Option_Item) (ret (f0: t_Item)) = any
    [ good (f0: t_Item) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: t_Item [Some f0: t_Option_Item]. Some f0 <> input} (! {false} any) ]
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate inv_F (_1: t_F)
  
  type t_B
  
  predicate invariant_ref_F [@inline:trivial] (self: MutBorrow.t t_F) = inv_F self.current /\ inv_F self.final
  
  meta "rewrite_def" predicate invariant_ref_F
  
  predicate inv_ref_F [@inline:trivial] (_1: MutBorrow.t t_F) = invariant_ref_F _1
  
  meta "rewrite_def" predicate inv_ref_F
  
  predicate inv_tup2_Item_Snapshot_Seq_Item [@inline:trivial] (_1: tup2_Item_Snapshot_Seq_Item) = inv_Item _1.f0
  
  meta "rewrite_def" predicate inv_tup2_Item_Snapshot_Seq_Item
  
  predicate inv_B (_1: t_B)
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  let rec call_mut_F (self_: MutBorrow.t t_F) (arg: tup2_Item_Snapshot_Seq_Item) (return (x: t_B)) =
    {[@expl:call_mut 'self_' type invariant] inv_ref_F self_}
    {[@expl:call_mut 'arg' type invariant] inv_tup2_Item_Snapshot_Seq_Item arg}
    {[@expl:call_mut requires] precondition_F self_.current arg}
    any
    [ return (result: t_B) -> {inv_B result}
      {postcondition_mut_F self_.current arg self_.final result}
      (! return {result}) ]
  
  predicate next_precondition_I (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_F func'0 { f0 = e; f1 = produced'0 }
  
  predicate preservation_I (iter'0: t_I) (func'0: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: t_F. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 (Seq.empty: Seq.seq t_Item) /\ preservation_I iter'0.final func'0
  
  predicate preservation_inv_I (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current { f0 = e1;
                                                                                                                                                                             f1 = Seq.(++) produced'0 s } f.final b]. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = Seq.(++) produced'0 s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = Seq.(++) produced'0 s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced'0 s) e1 }
  
  axiom preservation_inv_I_spec: forall iter'0: t_I, func'0: t_F, produced'0: Seq.seq t_Item. produced'0
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv_I iter'0 func'0 produced'0 = preservation_I iter'0 func'0
  
  predicate invariant_Map_I_F (self: t_Map_I_F) =
    reinitialize_I
    /\ preservation_inv_I self.iter self.func self.produced /\ next_precondition_I self.iter self.func self.produced
  
  predicate inv_Map_I_F (_1: t_Map_I_F)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Map_I_F [inv_Map_I_F x]. inv_Map_I_F x
      = (invariant_Map_I_F x /\ inv_I x.iter /\ inv_F x.func)
  
  predicate invariant_ref_Map_I_F [@inline:trivial] (self: MutBorrow.t t_Map_I_F) =
    inv_Map_I_F self.current /\ inv_Map_I_F self.final
  
  meta "rewrite_def" predicate invariant_ref_Map_I_F
  
  predicate inv_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = invariant_ref_Map_I_F _1
  
  meta "rewrite_def" predicate inv_ref_Map_I_F
  
  predicate resolve_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Map_I_F
  
  function produces_one_invariant_I (self: t_Map_I_F) (e: t_Item) (r: t_B) (f: MutBorrow.t t_F) (iter'0: t_I) : () = ()
  
  axiom produces_one_invariant_I_spec:
    forall self: t_Map_I_F, e: t_Item, r: t_B, f: MutBorrow.t t_F, iter'0: t_I. invariant_Map_I_F self
      -> produces_I self.iter (Seq.singleton e) iter'0
      -> f.current = self.func
      -> postcondition_mut_F f.current { f0 = e; f1 = self.produced } f.final r
      -> preservation_inv_I iter'0 f.final (Seq.snoc self.produced e)
  
  axiom produces_one_invariant_I_spec'0:
    forall self: t_Map_I_F, e: t_Item, r: t_B, f: MutBorrow.t t_F, iter'0: t_I. invariant_Map_I_F self
      -> produces_I self.iter (Seq.singleton e) iter'0
      -> f.current = self.func
      -> postcondition_mut_F f.current { f0 = e; f1 = self.produced } f.final r
      -> next_precondition_I iter'0 f.final (Seq.snoc self.produced e)
  
  type t_Option_B = None'0 | Some'0 t_B
  
  predicate inv_Option_B (_1: t_Option_B)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option_B [inv_Option_B x]. inv_Option_B x
      = match x with
        | None'0 -> true
        | Some'0 f0'0 -> inv_B f0'0
        end
  
  predicate completed_Map_I_F (self: MutBorrow.t t_Map_I_F) =
    self.final.produced = (Seq.empty: Seq.seq t_Item)
    /\ completed_I (MutBorrow.borrow_logic self.current.iter self.final.iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ self.current.func = self.final.func
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ succ.produced = Seq.(++) self.produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current { f0 = Seq.get s i; f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut_F (Seq.get fs i).current { f0 = Seq.get s i;
                                                          f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  predicate produces_one_I (self: t_Map_I_F) (visited: t_B) (succ: t_Map_I_F) =
    exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut_F f.current { f0 = e;
                                                                          f1 = self.produced } f.final visited]. f.current
        = self.func
      /\ f.final = succ.func
      /\ produces_I self.iter (Seq.singleton e) succ.iter
      /\ succ.produced = Seq.snoc self.produced e
      /\ precondition_F f.current { f0 = e; f1 = self.produced }
      /\ postcondition_mut_F f.current { f0 = e; f1 = self.produced } f.final visited
  
  axiom produces_one_I_spec: forall self: t_Map_I_F, visited: t_B, succ: t_Map_I_F. produces_one_I self visited succ
      = produces_Map_I_F self (Seq.singleton visited) succ
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_Map_I_F (self: MutBorrow.t t_Map_I_F) (return (x: t_Option_B)) =
    {[@expl:next 'self' type invariant] inv_ref_Map_I_F self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_I self.current.iter}
        MutBorrow.borrow_final <t_I> {self.current.iter} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_4 <- _ret ] -{inv_I _ret.final}-
            [ &self <- { self with current = { self.current with iter = _ret.final } } ] s1)
      | s1 = next_I {_4} (fun (_ret: t_Option_Item) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = any [ br0 -> {_3 = None} (! bb4) | br1 (x0: t_Item) -> {_3 = Some x0} (! bb5) ]
    | bb5 = s0
      [ s0 = elim_Some {_3} (fun (r0: t_Item) -> [ &v <- r0 ] s1)
      | s1 = {[@expl:assertion] precondition_F self.current.func { f0 = v; f1 = self.current.produced }} s2
      | s2 = [ &produced'0 <- Seq.snoc self.current.produced v ] s3
      | s3 = bb6 ]
    | bb6 = s0
      [ s0 = {inv_F self.current.func}
        MutBorrow.borrow_final <t_F> {self.current.func} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
          (fun (_ret: MutBorrow.t t_F) ->
            [ &_12 <- _ret ] -{inv_F _ret.final}-
            [ &self <- { self with current = { self.current with func = _ret.final } } ] s1)
      | s1 = [ &_13 <- { f0 = v; f1 = self.current.produced } ] s2
      | s2 = call_mut_F {_12} {_13} (fun (_ret: t_B) -> [ &r <- _ret ] s3)
      | s3 = bb8 ]
    | bb8 = s0
      [ s0 = [ &self <- { self with current = { self.current with produced = produced'0 } } ] s1
      | s1 = {[@expl:type invariant] inv_ref_Map_I_F self} s2
      | s2 = -{resolve_ref_Map_I_F self}- s3
      | s3 = [ &_17 <- () ] s4
      | s4 = bb9 ]
    | bb9 = s0 [ s0 = [ &_0 <- Some'0 r ] s1 | s1 = bb15 ]
    | bb4 = s0 [ s0 = [ &_20 <- Seq.empty: Seq.seq t_Item ] s1 | s1 = bb13 ]
    | bb13 = s0
      [ s0 = [ &self <- { self with current = { self.current with produced = _20 } } ] s1
      | s1 = {[@expl:type invariant] inv_ref_Map_I_F self} s2
      | s2 = -{resolve_ref_Map_I_F self}- s3
      | s3 = [ &_0 <- None'0 ] s4
      | s4 = bb15 ]
    | bb15 = return {_0} ]
    [ & _0: t_Option_B = Any.any_l ()
    | & self: MutBorrow.t t_Map_I_F = self
    | & _3: t_Option_Item = Any.any_l ()
    | & _4: MutBorrow.t t_I = Any.any_l ()
    | & v: t_Item = Any.any_l ()
    | & produced'0: Seq.seq t_Item = Any.any_l ()
    | & r: t_B = Any.any_l ()
    | & _12: MutBorrow.t t_F = Any.any_l ()
    | & _13: tup2_Item_Snapshot_Seq_Item = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _20: Seq.seq t_Item = Any.any_l () ])
    [ return (result: t_Option_B) -> {[@expl:next result type invariant] inv_Option_B result}
      {[@expl:next ensures] match result with
        | None'0 -> completed_Map_I_F self
        | Some'0 v -> produces_one_I self.current v self.final
        end}
      (! return {result}) ]
end
module M_impl_Map_I_F__preservation_inv (* Map<I, F> *)
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  type t_B
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate preservation_I (iter: t_I) (func: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv_F func f.current
      -> produces_I iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant iter : t_I
  
  constant func : t_F
  
  constant produced : Seq.seq t_Item
  
  predicate preservation_inv_I (iter: t_I) (func: t_F) (produced: Seq.seq t_Item)
  
  goal vc_preservation_inv_I: [@expl:preservation_inv ensures] produced = (Seq.empty: Seq.seq t_Item)
    -> (forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current { f0 = e1;
                                                                                                                                                                               f1 = Seq.(++) produced s } f.final b]. hist_inv_F func f.current
        -> produces_I iter (Seq.snoc (Seq.snoc s e1) e2) i
        -> precondition_F f.current { f0 = e1; f1 = Seq.(++) produced s }
        -> postcondition_mut_F f.current { f0 = e1; f1 = Seq.(++) produced s } f.final b
        -> precondition_F f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced s) e1 })
    = preservation_I iter func
end
module M_impl_Map_I_F__produces_one_invariant (* Map<I, F> *)
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  type t_B
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate next_precondition_I (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_F func'0 { f0 = e; f1 = produced'0 }
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate preservation_I (iter'0: t_I) (func'0: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: t_F. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 (Seq.empty: Seq.seq t_Item) /\ preservation_I iter'0.final func'0
  
  predicate preservation_inv_I (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current { f0 = e1;
                                                                                                                                                                             f1 = Seq.(++) produced'0 s } f.final b]. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = Seq.(++) produced'0 s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = Seq.(++) produced'0 s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced'0 s) e1 }
  
  axiom preservation_inv_I_spec: forall iter'0: t_I, func'0: t_F, produced'0: Seq.seq t_Item. produced'0
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv_I iter'0 func'0 produced'0 = preservation_I iter'0 func'0
  
  predicate invariant_Map_I_F (self: t_Map_I_F) =
    reinitialize_I
    /\ preservation_inv_I self.iter self.func self.produced /\ next_precondition_I self.iter self.func self.produced
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map_I_F
  
  constant e : t_Item
  
  constant r : t_B
  
  constant f : MutBorrow.t t_F
  
  constant iter'0 : t_I
  
  function produces_one_invariant_I (self: t_Map_I_F) (e: t_Item) (r: t_B) (f: MutBorrow.t t_F) (iter'0: t_I) : ()
  
  goal vc_produces_one_invariant_I: invariant_Map_I_F self
    -> produces_I self.iter (Seq.singleton e) iter'0
    -> f.current = self.func
    -> postcondition_mut_F f.current { f0 = e; f1 = self.produced } f.final r
    -> (forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, i: t_I. produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
        -> produces_I self.iter (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
    && ([@expl:produces_one_invariant ensures #0] preservation_inv_I iter'0 f.final (Seq.snoc self.produced e))
    && ([@expl:produces_one_invariant ensures #1] next_precondition_I iter'0 f.final (Seq.snoc self.produced e))
end
module M_impl_Map_I_F__produces_one (* Map<I, F> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  type t_B
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ succ.produced = Seq.(++) self.produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current { f0 = Seq.get s i; f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut_F (Seq.get fs i).current { f0 = Seq.get s i;
                                                          f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  function produces_trans_Map_I_F (a: t_Map_I_F) (ab: Seq.seq t_B) (b: t_Map_I_F) (bc: Seq.seq t_B) (c: t_Map_I_F) : ()
   = ()
  
  axiom produces_trans_Map_I_F_spec:
    forall a: t_Map_I_F, ab: Seq.seq t_B, b: t_Map_I_F, bc: Seq.seq t_B, c: t_Map_I_F. produces_Map_I_F a ab b
      -> produces_Map_I_F b bc c -> produces_Map_I_F a (Seq.(++) ab bc) c
  
  function produces_refl_Map_I_F (self: t_Map_I_F) : () = ()
  
  axiom produces_refl_Map_I_F_spec: forall self: t_Map_I_F. produces_Map_I_F self (Seq.empty: Seq.seq t_B) self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map_I_F
  
  constant visited : t_B
  
  constant succ : t_Map_I_F
  
  predicate produces_one_I (self: t_Map_I_F) (visited: t_B) (succ: t_Map_I_F)
  
  goal vc_produces_one_I:
    [@expl:produces_one ensures] (exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut_F f.current { f0 = e;
                                                                                                        f1 = self.produced } f.final visited]. f.current
          = self.func
        /\ f.final = succ.func
        /\ produces_I self.iter (Seq.singleton e) succ.iter
        /\ succ.produced = Seq.snoc self.produced e
        /\ precondition_F f.current { f0 = e; f1 = self.produced }
        /\ postcondition_mut_F f.current { f0 = e; f1 = self.produced } f.final visited)
    = produces_Map_I_F self (Seq.singleton visited) succ
end
module M_map
  use seq.Seq
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  predicate inv_I (_1: t_I)
  
  predicate inv_F (_1: t_F)
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate next_precondition_I (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_F func'0 { f0 = e; f1 = produced'0 }
  
  type t_B
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate preservation_I (iter'0: t_I) (func'0: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: t_F. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 (Seq.empty: Seq.seq t_Item) /\ preservation_I iter'0.final func'0
  
  predicate preservation_inv_I (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current { f0 = e1;
                                                                                                                                                                             f1 = Seq.(++) produced'0 s } f.final b]. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = Seq.(++) produced'0 s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = Seq.(++) produced'0 s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced'0 s) e1 }
  
  axiom preservation_inv_I_spec: forall iter'0: t_I, func'0: t_F, produced'0: Seq.seq t_Item. produced'0
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv_I iter'0 func'0 produced'0 = preservation_I iter'0 func'0
  
  predicate invariant_Map_I_F (self: t_Map_I_F) =
    reinitialize_I
    /\ preservation_inv_I self.iter self.func self.produced /\ next_precondition_I self.iter self.func self.produced
  
  predicate inv_Map_I_F (_1: t_Map_I_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map_I_F [inv_Map_I_F x]. inv_Map_I_F x
      = (invariant_Map_I_F x /\ inv_I x.iter /\ inv_F x.func)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec map_I (iter'0: t_I) (func'0: t_F) (return (x: t_Map_I_F)) = {[@expl:map 'iter' type invariant] inv_I iter'0}
    {[@expl:map 'func' type invariant] inv_F func'0}
    {[@expl:map requires #0] forall e: t_Item, i2: t_I. produces_I iter'0 (Seq.singleton e) i2
      -> precondition_F func'0 { f0 = e; f1 = Seq.empty: Seq.seq t_Item }}
    {[@expl:map requires #1] reinitialize_I}
    {[@expl:map requires #2] preservation_I iter'0 func'0}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = [ &_9 <- Seq.empty: Seq.seq t_Item ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- { iter = iter'0; func = func'0; produced = _9 } ] s1 | s1 = bb6 ]
    | bb6 = return {_0} ]
    [ & _0: t_Map_I_F = Any.any_l ()
    | & iter'0: t_I = iter'0
    | & func'0: t_F = func'0
    | & _9: Seq.seq t_Item = Any.any_l () ])
    [ return (result: t_Map_I_F) -> {[@expl:map result type invariant] inv_Map_I_F result}
      {[@expl:map ensures] result = { iter = iter'0; func = func'0; produced = Seq.empty: Seq.seq t_Item }}
      (! return {result}) ]
end
module M_identity
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  
  predicate resolve_ref_closure0 [@inline:trivial] (_1: MutBorrow.t ()) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure0
  
  type t_I
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate inv_Item (_1: t_Item)
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate resolve_closure0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_closure0
  
  predicate hist_inv_closure0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_closure0
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t ()) (x: t_Item) (_1: Seq.seq t_Item) (return (x'0: t_Item)) = bb0
    [ bb0 = s0 [ s0 = -{resolve_ref_closure0 self}- s1 | s1 = [ &_0 <- x ] s2 | s2 = bb1 ] | bb1 = return {_0} ]
    [ & _0: t_Item = Any.any_l () | & self: MutBorrow.t () = self | & x: t_Item = x ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: ()) (args: tup2_Item_Snapshot_Seq_Item) (result: t_Item) =
    let {f0 = x; f1 = _1} = args in exists e: (). exists bor_self: MutBorrow.t (). bor_self.current = self
        /\ bor_self.final = e /\ closure0'post'return bor_self x _1 result /\ hist_inv_closure0 self e
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  predicate postcondition_mut_closure0 [@inline:trivial] (self: ()) (args: tup2_Item_Snapshot_Seq_Item) (result_state: ()) (result: t_Item) =
    let {f0 = x; f1 = _1} = args in exists bor_self: MutBorrow.t (). bor_self.current = self
      /\ bor_self.final = result_state
      /\ closure0'post'return bor_self x _1 result /\ hist_inv_closure0 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure0
  
  function fn_mut_once_closure0 (self: ()) (args: tup2_Item_Snapshot_Seq_Item) (res: t_Item) : ()
  
  axiom fn_mut_once_closure0_spec:
    forall self: (), args: tup2_Item_Snapshot_Seq_Item, res: t_Item. postcondition_once_closure0 self args res
      = (exists res_state: (). postcondition_mut_closure0 self args res_state res /\ resolve_closure0 res_state)
  
  function hist_inv_trans_closure0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_closure0_spec: forall self: (), b: (), c: (). hist_inv_closure0 self b
      -> hist_inv_closure0 b c -> hist_inv_closure0 self c
  
  function hist_inv_refl_closure0 (self: ()) : ()
  
  axiom hist_inv_refl_closure0_spec: forall self: (). hist_inv_closure0 self self
  
  function postcondition_mut_hist_inv_closure0 (self: ()) (args: tup2_Item_Snapshot_Seq_Item) (res_state: ()) (res: t_Item) : ()
  
  axiom postcondition_mut_hist_inv_closure0_spec:
    forall self: (), args: tup2_Item_Snapshot_Seq_Item, res_state: (), res: t_Item. postcondition_mut_closure0 self args res_state res
      -> hist_inv_closure0 self res_state
  
  type t_Map_I_closure0 = { iter: t_I; func: (); produced: Seq.seq t_Item }
  
  predicate inv_I (_1: t_I)
  
  predicate precondition_closure0 [@inline:trivial] (self: ()) (args: tup2_Item_Snapshot_Seq_Item) =
    let {f0 = x; f1 = _1} = args in forall bor_self: MutBorrow.t (). bor_self.current = self
      -> closure0'pre bor_self x _1
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate next_precondition_I (iter'0: t_I) (func'0: ()) (produced'0: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_closure0 func'0 { f0 = e; f1 = produced'0 }
  
  predicate preservation_I (iter'0: t_I) (func'0: ()) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t (), b: t_Item, i: t_I. hist_inv_closure0 func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_closure0 f.current { f0 = e1; f1 = s }
      -> postcondition_mut_closure0 f.current { f0 = e1; f1 = s } f.final b
      -> precondition_closure0 f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: (). completed_I iter'0
      -> next_precondition_I iter'0.final func'0 (Seq.empty: Seq.seq t_Item) /\ preservation_I iter'0.final func'0
  
  predicate preservation_inv_I (iter'0: t_I) (func'0: ()) (produced'0: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t (), b: t_Item, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_closure0 f.current { f0 = e1;
                                                                                                                                                                                      f1 = Seq.(++) produced'0 s } f.final b]. hist_inv_closure0 func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_closure0 f.current { f0 = e1; f1 = Seq.(++) produced'0 s }
      -> postcondition_mut_closure0 f.current { f0 = e1; f1 = Seq.(++) produced'0 s } f.final b
      -> precondition_closure0 f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced'0 s) e1 }
  
  axiom preservation_inv_I_spec: forall iter'0: t_I, func'0: (), produced'0: Seq.seq t_Item. produced'0
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv_I iter'0 func'0 produced'0 = preservation_I iter'0 func'0
  
  predicate invariant_Map_I_closure0 (self: t_Map_I_closure0) =
    reinitialize_I
    /\ preservation_inv_I self.iter self.func self.produced /\ next_precondition_I self.iter self.func self.produced
  
  predicate inv_Map_I_closure0 (_1: t_Map_I_closure0)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map_I_closure0 [inv_Map_I_closure0 x]. inv_Map_I_closure0 x
      = (invariant_Map_I_closure0 x /\ inv_I x.iter)
  
  let rec map_I (iter'0: t_I) (func'0: ()) (return (x: t_Map_I_closure0)) =
    {[@expl:map 'iter' type invariant] inv_I iter'0}
    {[@expl:map requires #0] forall e: t_Item, i2: t_I. produces_I iter'0 (Seq.singleton e) i2
      -> precondition_closure0 func'0 { f0 = e; f1 = Seq.empty: Seq.seq t_Item }}
    {[@expl:map requires #1] reinitialize_I}
    {[@expl:map requires #2] preservation_I iter'0 func'0}
    any
    [ return (result: t_Map_I_closure0) -> {inv_Map_I_closure0 result}
      {result = { iter = iter'0; func = func'0; produced = Seq.empty: Seq.seq t_Item }}
      (! return {result}) ]
  
  predicate resolve_I (_1: t_I)
  
  predicate resolve_Map_I_closure0 (_1: t_Map_I_closure0)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Map_I_closure0 [resolve_Map_I_closure0 x]. resolve_Map_I_closure0 x
      = resolve_I x.iter
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec identity_I (iter'0: t_I) (return (x: ())) = {[@expl:identity 'iter' type invariant] inv_I iter'0}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- () ] s1
      | s1 = map_I {iter'0} {_4} (fun (_ret: t_Map_I_closure0) -> [ &_2 <- _ret ] s2)
      | s2 = {[@expl:type invariant] inv_Map_I_closure0 _2} s3
      | s3 = -{resolve_Map_I_closure0 _2}- s4
      | s4 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & iter'0: t_I = iter'0
    | & _2: t_Map_I_closure0 = Any.any_l ()
    | & _4: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_increment
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  predicate resolve_ref_closure0 [@inline:trivial] (_1: MutBorrow.t ()) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure0
  
  type tup2_u32_Snapshot_Seq_u32 = { f0: UInt32.t; f1: Seq.seq UInt32.t }
  
  predicate resolve_closure0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_closure0
  
  predicate hist_inv_closure0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_closure0
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t ()) (x: UInt32.t) (_1: Seq.seq UInt32.t)
    (return (x'0: UInt32.t)) = bb0
    [ bb0 = s0
      [ s0 = -{resolve_ref_closure0 self}- s1
      | s1 = UInt32.add {x} {(1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s2)
      | s2 = return {_0} ] ] [ & _0: UInt32.t = Any.any_l () | & self: MutBorrow.t () = self | & x: UInt32.t = x ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: ()) (args: tup2_u32_Snapshot_Seq_u32) (result: UInt32.t) =
    let {f0 = x; f1 = _1} = args in exists e: (). exists bor_self: MutBorrow.t (). bor_self.current = self
        /\ bor_self.final = e /\ closure0'post'return bor_self x _1 result /\ hist_inv_closure0 self e
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  predicate postcondition_mut_closure0 [@inline:trivial] (self: ()) (args: tup2_u32_Snapshot_Seq_u32) (result_state: ()) (result: UInt32.t) =
    let {f0 = x; f1 = _1} = args in exists bor_self: MutBorrow.t (). bor_self.current = self
      /\ bor_self.final = result_state
      /\ closure0'post'return bor_self x _1 result /\ hist_inv_closure0 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure0
  
  function fn_mut_once_closure0 (self: ()) (args: tup2_u32_Snapshot_Seq_u32) (res: UInt32.t) : ()
  
  axiom fn_mut_once_closure0_spec:
    forall self: (), args: tup2_u32_Snapshot_Seq_u32, res: UInt32.t. postcondition_once_closure0 self args res
      = (exists res_state: (). postcondition_mut_closure0 self args res_state res /\ resolve_closure0 res_state)
  
  function hist_inv_trans_closure0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_closure0_spec: forall self: (), b: (), c: (). hist_inv_closure0 self b
      -> hist_inv_closure0 b c -> hist_inv_closure0 self c
  
  function hist_inv_refl_closure0 (self: ()) : ()
  
  axiom hist_inv_refl_closure0_spec: forall self: (). hist_inv_closure0 self self
  
  function postcondition_mut_hist_inv_closure0 (self: ()) (args: tup2_u32_Snapshot_Seq_u32) (res_state: ()) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure0_spec:
    forall self: (), args: tup2_u32_Snapshot_Seq_u32, res_state: (), res: UInt32.t. postcondition_mut_closure0 self args res_state res
      -> hist_inv_closure0 self res_state
  
  type t_U
  
  type t_Map_U_closure0 = { iter: t_U; func: (); produced: Seq.seq UInt32.t }
  
  predicate inv_U (_1: t_U)
  
  predicate produces_U (self: t_U) (visited: Seq.seq UInt32.t) (o: t_U)
  
  function produces_trans_U (a: t_U) (ab: Seq.seq UInt32.t) (b: t_U) (bc: Seq.seq UInt32.t) (c: t_U) : ()
  
  axiom produces_trans_U_spec:
    forall a: t_U, ab: Seq.seq UInt32.t, b: t_U, bc: Seq.seq UInt32.t, c: t_U. produces_U a ab b
      -> produces_U b bc c -> produces_U a (Seq.(++) ab bc) c
  
  function produces_refl_U (self: t_U) : ()
  
  axiom produces_refl_U_spec: forall self: t_U. produces_U self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate precondition_closure0 [@inline:trivial] (self: ()) (args: tup2_u32_Snapshot_Seq_u32) =
    let {f0 = x; f1 = _1} = args in forall bor_self: MutBorrow.t (). bor_self.current = self
      -> closure0'pre bor_self x _1
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate completed_U (self: MutBorrow.t t_U)
  
  predicate next_precondition_U (iter'0: t_U) (func'0: ()) (produced'0: Seq.seq UInt32.t) =
    forall e: UInt32.t, i: t_U [produces_U iter'0 (Seq.singleton e) i]. produces_U iter'0 (Seq.singleton e) i
      -> precondition_closure0 func'0 { f0 = e; f1 = produced'0 }
  
  predicate preservation_U (iter'0: t_U) (func'0: ()) =
    forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t (), b: UInt32.t, i: t_U. hist_inv_closure0 func'0 f.current
      -> produces_U iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_closure0 f.current { f0 = e1; f1 = s }
      -> postcondition_mut_closure0 f.current { f0 = e1; f1 = s } f.final b
      -> precondition_closure0 f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize_U =
    forall iter'0: MutBorrow.t t_U, func'0: (). completed_U iter'0
      -> next_precondition_U iter'0.final func'0 (Seq.empty: Seq.seq UInt32.t) /\ preservation_U iter'0.final func'0
  
  predicate preservation_inv_U (iter'0: t_U) (func'0: ()) (produced'0: Seq.seq UInt32.t) =
    forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t (), b: UInt32.t, i: t_U [produces_U iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_closure0 f.current { f0 = e1;
                                                                                                                                                                                              f1 = Seq.(++) produced'0 s } f.final b]. hist_inv_closure0 func'0 f.current
      -> produces_U iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_closure0 f.current { f0 = e1; f1 = Seq.(++) produced'0 s }
      -> postcondition_mut_closure0 f.current { f0 = e1; f1 = Seq.(++) produced'0 s } f.final b
      -> precondition_closure0 f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced'0 s) e1 }
  
  axiom preservation_inv_U_spec: forall iter'0: t_U, func'0: (), produced'0: Seq.seq UInt32.t. produced'0
        = (Seq.empty: Seq.seq UInt32.t) -> preservation_inv_U iter'0 func'0 produced'0 = preservation_U iter'0 func'0
  
  predicate invariant_Map_U_closure0 (self: t_Map_U_closure0) =
    reinitialize_U
    /\ preservation_inv_U self.iter self.func self.produced /\ next_precondition_U self.iter self.func self.produced
  
  predicate inv_Map_U_closure0 (_1: t_Map_U_closure0)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map_U_closure0 [inv_Map_U_closure0 x]. inv_Map_U_closure0 x
      = (invariant_Map_U_closure0 x /\ inv_U x.iter)
  
  let rec map_U (iter'0: t_U) (func'0: ()) (return (x: t_Map_U_closure0)) =
    {[@expl:map 'iter' type invariant] inv_U iter'0}
    {[@expl:map requires #0] forall e: UInt32.t, i2: t_U. produces_U iter'0 (Seq.singleton e) i2
      -> precondition_closure0 func'0 { f0 = e; f1 = Seq.empty: Seq.seq UInt32.t }}
    {[@expl:map requires #1] reinitialize_U}
    {[@expl:map requires #2] preservation_U iter'0 func'0}
    any
    [ return (result: t_Map_U_closure0) -> {inv_Map_U_closure0 result}
      {result = { iter = iter'0; func = func'0; produced = Seq.empty: Seq.seq UInt32.t }}
      (! return {result}) ]
  
  predicate resolve_U (_1: t_U)
  
  predicate resolve_Map_U_closure0 (_1: t_Map_U_closure0)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Map_U_closure0 [resolve_Map_U_closure0 x]. resolve_Map_U_closure0 x
      = resolve_U x.iter
  
  predicate produces_Map_U_closure0 [@inline:trivial] (self: t_Map_U_closure0) (visited: Seq.seq UInt32.t) (succ: t_Map_U_closure0) =
    hist_inv_closure0 self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t ()). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq UInt32.t [produces_U self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_U self.iter s succ.iter
        /\ succ.produced = Seq.(++) self.produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_closure0 self.func (Seq.get fs i).current
          /\ precondition_closure0 (Seq.get fs i).current { f0 = Seq.get s i;
                                                            f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut_closure0 (Seq.get fs i).current { f0 = Seq.get s i;
                                                                 f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_U_closure0
  
  function produces_trans_Map_U_closure0 (a: t_Map_U_closure0) (ab: Seq.seq UInt32.t) (b: t_Map_U_closure0) (bc: Seq.seq UInt32.t) (c: t_Map_U_closure0) : ()
   = ()
  
  axiom produces_trans_Map_U_closure0_spec:
    forall a: t_Map_U_closure0, ab: Seq.seq UInt32.t, b: t_Map_U_closure0, bc: Seq.seq UInt32.t, c: t_Map_U_closure0. produces_Map_U_closure0 a ab b
      -> produces_Map_U_closure0 b bc c -> produces_Map_U_closure0 a (Seq.(++) ab bc) c
  
  function produces_refl_Map_U_closure0 (self: t_Map_U_closure0) : () = ()
  
  axiom produces_refl_Map_U_closure0_spec:
    forall self: t_Map_U_closure0. produces_Map_U_closure0 self (Seq.empty: Seq.seq UInt32.t) self
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_u32 (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      Less
    else
      if self = o then Equal else Greater
  
  
  function eq_cmp_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_u32_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log_u32 x y = Equal)
  
  function antisym2_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Greater -> cmp_log_u32 y x = Less
  
  function antisym1_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Less -> cmp_log_u32 y x = Greater
  
  function trans_u32 (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_u32_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log_u32 x y = o
      -> cmp_log_u32 y z = o -> cmp_log_u32 x z = o
  
  function refl_u32 (x: UInt32.t) : ()
  
  axiom refl_u32_spec: forall x: UInt32.t. cmp_log_u32 x x = Equal
  
  function cmp_gt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log_u32 x y = Greater)
  
  function cmp_ge_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log_u32 x y <> Less)
  
  function cmp_lt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log_u32 x y = Less)
  
  function cmp_le_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log_u32 x y <> Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec increment_U (iter'0: t_U) (return (x: ())) = {[@expl:increment 'iter' type invariant] inv_U iter'0}
    {[@expl:increment requires #0] forall done': MutBorrow.t t_U. completed_U done'
      -> (forall next: t_U, steps: Seq.seq UInt32.t. produces_U done'.final steps next
        -> steps = (Seq.empty: Seq.seq UInt32.t) /\ done'.final = next)}
    {[@expl:increment requires #1] forall prod: Seq.seq UInt32.t, fin: t_U. produces_U iter'0 prod fin
      -> (forall x: int. 0 <= x /\ x < Seq.length prod -> UInt32.le (Seq.get prod x) (10: UInt32.t))}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_6 <- () ] s1
      | s1 = map_U {iter'0} {_6} (fun (_ret: t_Map_U_closure0) -> [ &i <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv_Map_U_closure0 i} s1
      | s1 = -{resolve_Map_U_closure0 i}- s2
      | s2 = {[@expl:assertion] forall prod: Seq.seq UInt32.t, fin: t_Map_U_closure0. produces_Map_U_closure0 i prod fin
          -> (forall x: int. 0 <= x /\ x < Seq.length prod -> UInt32.le (Seq.get prod x) (11: UInt32.t))}
        s3
      | s3 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & iter'0: t_U = iter'0
    | & i: t_Map_U_closure0 = Any.any_l ()
    | & _6: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_counter
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure0 = { c0: MutBorrow.t UInt64.t }
  
  predicate resolve_ref_closure0 [@inline:trivial] (_1: MutBorrow.t closure0) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure0
  
  type tup2_u32_Snapshot_Seq_u32 = { f0: UInt32.t; f1: Seq.seq UInt32.t }
  
  predicate resolve_ref_usize [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_usize
  
  predicate resolve_closure0 [@inline:trivial] (_1: closure0) = resolve_ref_usize _1.c0
  
  meta "rewrite_def" predicate resolve_closure0
  
  predicate hist_inv_closure0 [@inline:trivial] (self: closure0) (result_state: closure0) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure0
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (x: UInt32.t) (_prod: Seq.seq UInt32.t)
    (return (x'0: UInt32.t)) = bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] UInt64.t'int self.current.c0.current = Seq.length _prod} s1
      | s1 = UInt64.add {self.current.c0.current} {(1: UInt64.t)}
          (fun (_ret: UInt64.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s2)
      | s2 = -{resolve_ref_closure0 self}- s3
      | s3 = [ &_0 <- x ] s4
      | s4 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & self: MutBorrow.t closure0 = self
    | & x: UInt32.t = x
    | & _prod: Seq.seq UInt32.t = _prod ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: tup2_u32_Snapshot_Seq_u32) (result: UInt32.t) =
    let {f0 = x; f1 = _prod} = args in exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current
            = self
          /\ bor_self.final = e /\ closure0'post'return bor_self x _prod result /\ hist_inv_closure0 self e)
      /\ resolve_closure0 e
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  predicate postcondition_mut_closure0 [@inline:trivial] (self: closure0) (args: tup2_u32_Snapshot_Seq_u32) (result_state: closure0) (result: UInt32.t) =
    let {f0 = x; f1 = _prod} = args in exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state
      /\ closure0'post'return bor_self x _prod result /\ hist_inv_closure0 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure0
  
  function fn_mut_once_closure0 (self: closure0) (args: tup2_u32_Snapshot_Seq_u32) (res: UInt32.t) : ()
  
  axiom fn_mut_once_closure0_spec:
    forall self: closure0, args: tup2_u32_Snapshot_Seq_u32, res: UInt32.t. postcondition_once_closure0 self args res
      = (exists res_state: closure0. postcondition_mut_closure0 self args res_state res /\ resolve_closure0 res_state)
  
  function hist_inv_trans_closure0 (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_closure0_spec: forall self: closure0, b: closure0, c: closure0. hist_inv_closure0 self b
      -> hist_inv_closure0 b c -> hist_inv_closure0 self c
  
  function hist_inv_refl_closure0 (self: closure0) : ()
  
  axiom hist_inv_refl_closure0_spec: forall self: closure0. hist_inv_closure0 self self
  
  function postcondition_mut_hist_inv_closure0 (self: closure0) (args: tup2_u32_Snapshot_Seq_u32) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure0_spec:
    forall self: closure0, args: tup2_u32_Snapshot_Seq_u32, res_state: closure0, res: UInt32.t. postcondition_mut_closure0 self args res_state res
      -> hist_inv_closure0 self res_state
  
  type t_I
  
  type t_Map_I_closure0 = { iter: t_I; func: closure0; produced: Seq.seq UInt32.t }
  
  predicate inv_I (_1: t_I)
  
  predicate produces_I (self: t_I) (visited: Seq.seq UInt32.t) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq UInt32.t) (b: t_I) (bc: Seq.seq UInt32.t) (c: t_I) : ()
  
  axiom produces_trans_I_spec:
    forall a: t_I, ab: Seq.seq UInt32.t, b: t_I, bc: Seq.seq UInt32.t, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate precondition_closure0 [@inline:trivial] (self: closure0) (args: tup2_u32_Snapshot_Seq_u32) =
    let {f0 = x; f1 = _prod} = args in forall bor_self: MutBorrow.t closure0. bor_self.current = self
      -> closure0'pre bor_self x _prod
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate next_precondition_I (iter'0: t_I) (func'0: closure0) (produced'0: Seq.seq UInt32.t) =
    forall e: UInt32.t, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_closure0 func'0 { f0 = e; f1 = produced'0 }
  
  predicate preservation_I (iter'0: t_I) (func'0: closure0) =
    forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t closure0, b: UInt32.t, i: t_I. hist_inv_closure0 func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_closure0 f.current { f0 = e1; f1 = s }
      -> postcondition_mut_closure0 f.current { f0 = e1; f1 = s } f.final b
      -> precondition_closure0 f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: closure0. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 (Seq.empty: Seq.seq UInt32.t) /\ preservation_I iter'0.final func'0
  
  predicate preservation_inv_I (iter'0: t_I) (func'0: closure0) (produced'0: Seq.seq UInt32.t) =
    forall s: Seq.seq UInt32.t, e1: UInt32.t, e2: UInt32.t, f: MutBorrow.t closure0, b: UInt32.t, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_closure0 f.current { f0 = e1;
                                                                                                                                                                                                    f1 = Seq.(++) produced'0 s } f.final b]. hist_inv_closure0 func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_closure0 f.current { f0 = e1; f1 = Seq.(++) produced'0 s }
      -> postcondition_mut_closure0 f.current { f0 = e1; f1 = Seq.(++) produced'0 s } f.final b
      -> precondition_closure0 f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced'0 s) e1 }
  
  axiom preservation_inv_I_spec: forall iter'0: t_I, func'0: closure0, produced'0: Seq.seq UInt32.t. produced'0
        = (Seq.empty: Seq.seq UInt32.t) -> preservation_inv_I iter'0 func'0 produced'0 = preservation_I iter'0 func'0
  
  predicate invariant_Map_I_closure0 (self: t_Map_I_closure0) =
    reinitialize_I
    /\ preservation_inv_I self.iter self.func self.produced /\ next_precondition_I self.iter self.func self.produced
  
  predicate inv_Map_I_closure0 (_1: t_Map_I_closure0)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map_I_closure0 [inv_Map_I_closure0 x]. inv_Map_I_closure0 x
      = (invariant_Map_I_closure0 x /\ inv_I x.iter)
  
  let rec map_I (iter'0: t_I) (func'0: closure0) (return (x: t_Map_I_closure0)) =
    {[@expl:map 'iter' type invariant] inv_I iter'0}
    {[@expl:map requires #0] forall e: UInt32.t, i2: t_I. produces_I iter'0 (Seq.singleton e) i2
      -> precondition_closure0 func'0 { f0 = e; f1 = Seq.empty: Seq.seq UInt32.t }}
    {[@expl:map requires #1] reinitialize_I}
    {[@expl:map requires #2] preservation_I iter'0 func'0}
    any
    [ return (result: t_Map_I_closure0) -> {inv_Map_I_closure0 result}
      {result = { iter = iter'0; func = func'0; produced = Seq.empty: Seq.seq UInt32.t }}
      (! return {result}) ]
  
  predicate resolve_I (_1: t_I)
  
  predicate resolve_Map_I_closure0 (_1: t_Map_I_closure0)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Map_I_closure0 [resolve_Map_I_closure0 x]. resolve_Map_I_closure0 x
      = (resolve_I x.iter /\ resolve_closure0 x.func)
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec counter_I (iter'0: t_I) (return (x: ())) = {[@expl:counter 'iter' type invariant] inv_I iter'0}
    {[@expl:counter requires #0] forall done': MutBorrow.t t_I. completed_I done'
      -> (forall next: t_I, steps: Seq.seq UInt32.t. produces_I done'.final steps next
        -> steps = (Seq.empty: Seq.seq UInt32.t) /\ done'.final = next)}
    {[@expl:counter requires #1] forall prod: Seq.seq UInt32.t, fin: t_I. produces_I iter'0 prod fin
      -> Seq.length prod <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &cnt <- (0: UInt64.t) ] s1
      | s1 = MutBorrow.borrow_mut <UInt64.t> {cnt}
          (fun (_ret: MutBorrow.t UInt64.t) -> [ &_8 <- _ret ] [ &cnt <- _ret.final ] s2)
      | s2 = [ &_7 <- { c0 = _8 } ] s3
      | s3 = map_I {iter'0} {_7} (fun (_ret: t_Map_I_closure0) -> [ &_5 <- _ret ] s4)
      | s4 = {[@expl:type invariant] inv_Map_I_closure0 _5} s5
      | s5 = -{resolve_Map_I_closure0 _5}- s6
      | s6 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & iter'0: t_I = iter'0
    | & cnt: UInt64.t = Any.any_l ()
    | & _5: t_Map_I_closure0 = Any.any_l ()
    | & _7: closure0 = Any.any_l ()
    | & _8: MutBorrow.t UInt64.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_impl_Iterator_for_Map_I_F__next__refines (* <Map<I, F> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate next_precondition_I (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_F func'0 { f0 = e; f1 = produced'0 }
  
  type t_B
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate preservation_I (iter'0: t_I) (func'0: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc s e1 }
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: t_F. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 (Seq.empty: Seq.seq t_Item) /\ preservation_I iter'0.final func'0
  
  predicate preservation_inv_I (iter'0: t_I) (func'0: t_F) (produced'0: Seq.seq t_Item) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current { f0 = e1;
                                                                                                                                                                             f1 = Seq.(++) produced'0 s } f.final b]. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current { f0 = e1; f1 = Seq.(++) produced'0 s }
      -> postcondition_mut_F f.current { f0 = e1; f1 = Seq.(++) produced'0 s } f.final b
      -> precondition_F f.final { f0 = e2; f1 = Seq.snoc (Seq.(++) produced'0 s) e1 }
  
  axiom preservation_inv_I_spec: forall iter'0: t_I, func'0: t_F, produced'0: Seq.seq t_Item. produced'0
        = (Seq.empty: Seq.seq t_Item) -> preservation_inv_I iter'0 func'0 produced'0 = preservation_I iter'0 func'0
  
  predicate invariant_Map_I_F (self: t_Map_I_F) =
    reinitialize_I
    /\ preservation_inv_I self.iter self.func self.produced /\ next_precondition_I self.iter self.func self.produced
  
  predicate inv_I (_1: t_I)
  
  predicate inv_F (_1: t_F)
  
  predicate inv_Map_I_F (_1: t_Map_I_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map_I_F [inv_Map_I_F x]. inv_Map_I_F x
      = (invariant_Map_I_F x /\ inv_I x.iter /\ inv_F x.func)
  
  predicate invariant_ref_Map_I_F [@inline:trivial] (self: MutBorrow.t t_Map_I_F) =
    inv_Map_I_F self.current /\ inv_Map_I_F self.final
  
  meta "rewrite_def" predicate invariant_ref_Map_I_F
  
  predicate inv_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = invariant_ref_Map_I_F _1
  
  meta "rewrite_def" predicate inv_ref_Map_I_F
  
  type t_Option_B = None | Some t_B
  
  predicate completed_Map_I_F (self: MutBorrow.t t_Map_I_F) =
    self.final.produced = (Seq.empty: Seq.seq t_Item)
    /\ completed_I (MutBorrow.borrow_logic self.current.iter self.final.iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ self.current.func = self.final.func
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ succ.produced = Seq.(++) self.produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current { f0 = Seq.get s i; f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut_F (Seq.get fs i).current { f0 = Seq.get s i;
                                                          f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  predicate produces_one_I (self: t_Map_I_F) (visited: t_B) (succ: t_Map_I_F) =
    exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut_F f.current { f0 = e;
                                                                          f1 = self.produced } f.final visited]. f.current
        = self.func
      /\ f.final = succ.func
      /\ produces_I self.iter (Seq.singleton e) succ.iter
      /\ succ.produced = Seq.snoc self.produced e
      /\ precondition_F f.current { f0 = e; f1 = self.produced }
      /\ postcondition_mut_F f.current { f0 = e; f1 = self.produced } f.final visited
  
  axiom produces_one_I_spec: forall self: t_Map_I_F, visited: t_B, succ: t_Map_I_F. produces_one_I self visited succ
      = produces_Map_I_F self (Seq.singleton visited) succ
  
  predicate inv_B (_1: t_B)
  
  predicate inv_Option_B (_1: t_Option_B)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_B [inv_Option_B x]. inv_Option_B x
      = match x with
        | None -> true
        | Some f0'0 -> inv_B f0'0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Map_I_F. inv_ref_Map_I_F self
      -> inv_ref_Map_I_F self
      /\ (forall result: t_Option_B. match result with
              | None -> completed_Map_I_F self
              | Some v -> produces_one_I self.current v self.final
              end
          /\ inv_Option_B result
        -> match result with
            | None -> completed_Map_I_F self
            | Some v -> produces_Map_I_F self.current (Seq.singleton v) self.final
            end
        /\ inv_Option_B result)
end
module M_impl_Iterator_for_Map_I_F__produces_refl__refines (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  type t_B
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ succ.produced = Seq.(++) self.produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current { f0 = Seq.get s i; f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut_F (Seq.get fs i).current { f0 = Seq.get s i;
                                                          f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Map_I_F. forall result: (). produces_Map_I_F self (Seq.empty: Seq.seq t_B) self
        -> produces_Map_I_F self (Seq.empty: Seq.seq t_B) self
end
module M_impl_Iterator_for_Map_I_F__produces_trans__refines (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Map_I_F = { iter: t_I; func: t_F; produced: Seq.seq t_Item }
  
  type t_B
  
  type tup2_Item_Snapshot_Seq_Item = { f0: t_Item; f1: Seq.seq t_Item }
  
  predicate postcondition_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: tup2_Item_Snapshot_Seq_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: tup2_Item_Snapshot_Seq_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ succ.produced = Seq.(++) self.produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current { f0 = Seq.get s i; f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut_F (Seq.get fs i).current { f0 = Seq.get s i;
                                                          f1 = Seq.(++) self.produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Map_I_F. forall ab: Seq.seq t_B. forall b: t_Map_I_F. forall bc: Seq.seq t_B. forall c: t_Map_I_F. produces_Map_I_F b bc c
                /\ produces_Map_I_F a ab b
              -> produces_Map_I_F b bc c
              /\ produces_Map_I_F a ab b
              /\ (forall result: (). produces_Map_I_F a (Seq.(++) ab bc) c -> produces_Map_I_F a (Seq.(++) ab bc) c)
end
