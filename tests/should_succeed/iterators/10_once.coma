module M_10_once__qyi13268780623672429765__resolve_coherence [#"10_once.rs" 8 9 8 16] (* <Once<T> as creusot_contracts::Resolve> *)
  let%span s10_once = "10_once.rs" 8 9 8 16
  let%span s10_once'0 = "10_once.rs" 8 9 8 16
  let%span s10_once'1 = "10_once.rs" 9 19 9 32
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 772 8 775 9
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Once = { t_Once__0: t_Option }
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    [%#soption] match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: t_Option) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate structural_resolve (_0: t_Once) =
    match _0 with
      | {t_Once__0 = x0} -> resolve'1 x0
      end
  
  predicate resolve'2 [#"10_once.rs" 8 9 8 16] (self: t_Once) = [%#s10_once'1] resolve'1 self.t_Once__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Once
  
  function resolve_coherence [#"10_once.rs" 8 9 8 16] (self'0: t_Once) : ()
  
  goal vc_resolve_coherence: ([%#s10_once] structural_resolve self)
    -> ([@expl:resolve_coherence ensures] [%#s10_once'0] resolve'2 self)
end
module M_10_once__qyi13094531909677028354__produces_refl [#"10_once.rs" 29 4 29 26] (* <Once<T> as common::Iterator> *)
  let%span s10_once = "10_once.rs" 28 4 28 49
  let%span s10_once'0 = "10_once.rs" 29 27 29 29
  let%span s10_once'1 = "10_once.rs" 22 12 23 106
  
  use seq.Seq
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Once = { t_Once__0: t_Option }
  
  predicate produces [#"10_once.rs" 20 4 20 64] (self: t_Once) (visited: Seq.seq t_T) (o: t_Once) =
    [%#s10_once'1] visited = (Seq.empty: Seq.seq t_T) /\ self = o
    \/ (exists e: t_T. self = { t_Once__0 = C_Some e } /\ visited = Seq.singleton e /\ o = { t_Once__0 = C_None })
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Once
  
  function produces_refl [#"10_once.rs" 29 4 29 26] (self'0: t_Once) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] [%#s10_once] produces self (Seq.empty: Seq.seq t_T) self
end
module M_10_once__qyi13094531909677028354__produces_trans [#"10_once.rs" 35 4 35 90] (* <Once<T> as common::Iterator> *)
  let%span s10_once = "10_once.rs" 32 4 32 34
  let%span s10_once'0 = "10_once.rs" 33 4 33 34
  let%span s10_once'1 = "10_once.rs" 34 4 34 44
  let%span s10_once'2 = "10_once.rs" 35 91 35 93
  let%span s10_once'3 = "10_once.rs" 22 12 23 106
  
  use seq.Seq
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Once = { t_Once__0: t_Option }
  
  predicate produces [#"10_once.rs" 20 4 20 64] (self: t_Once) (visited: Seq.seq t_T) (o: t_Once) =
    [%#s10_once'3] visited = (Seq.empty: Seq.seq t_T) /\ self = o
    \/ (exists e: t_T. self = { t_Once__0 = C_Some e } /\ visited = Seq.singleton e /\ o = { t_Once__0 = C_None })
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Once
  
  constant ab : Seq.seq t_T
  
  constant b : t_Once
  
  constant bc : Seq.seq t_T
  
  constant c : t_Once
  
  function produces_trans [#"10_once.rs" 35 4 35 90] (a'0: t_Once) (ab'0: Seq.seq t_T) (b'0: t_Once) (bc'0: Seq.seq t_T) (c'0: t_Once) : ()
  
  goal vc_produces_trans: ([%#s10_once] produces a ab b)
    -> ([%#s10_once'0] produces b bc c) -> ([@expl:produces_trans ensures] [%#s10_once'1] produces a (Seq.(++) ab bc) c)
end
module M_10_once__qyi13094531909677028354__next [#"10_once.rs" 41 4 41 35] (* <Once<T> as common::Iterator> *)
  let%span s10_once = "10_once.rs" 41 17 41 21
  let%span s10_once'0 = "10_once.rs" 41 26 41 35
  let%span s10_once'1 = "10_once.rs" 37 14 40 5
  let%span s10_once'2 = "10_once.rs" 16 8 16 59
  let%span s10_once'3 = "10_once.rs" 22 12 23 106
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 432 16 432 17
  let%span soption'0 = "../../../creusot-contracts/src/std/option.rs" 433 26 433 58
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Once = { t_Once__0: t_Option }
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Option) =
    [%#sinvariant] inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 (_0: MutBorrow.t t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Option [inv'1 x]. inv'1 x = invariant' x
  
  let rec take (self_: MutBorrow.t t_Option) (return' (x: t_Option)) =
    {[@expl:take 'self_' type invariant] [%#soption] inv'1 self_}
    any
    [ return''0 (result: t_Option) -> {inv'0 result}
      {[%#soption'0] result = self_.current /\ self_.final = C_None}
      (! return' {result}) ]
  
  predicate inv'2 (_0: t_Once)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Once [inv'2 x]. inv'2 x
      = match x with
        | {t_Once__0 = a_0} -> inv'0 a_0
        end
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_Once) =
    [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'3 (_0: MutBorrow.t t_Once)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Once [inv'3 x]. inv'3 x = invariant''0 x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Once) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Once) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate completed [#"10_once.rs" 15 4 15 35] (self: MutBorrow.t t_Once) =
    [%#s10_once'2] self.current = { t_Once__0 = C_None } /\ resolve self
  
  predicate produces [#"10_once.rs" 20 4 20 64] (self: t_Once) (visited: Seq.seq t_T) (o: t_Once) =
    [%#s10_once'3] visited = (Seq.empty: Seq.seq t_T) /\ self = o
    \/ (exists e: t_T. self = { t_Once__0 = C_Some e } /\ visited = Seq.singleton e /\ o = { t_Once__0 = C_None })
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next [#"10_once.rs" 41 4 41 35] (self: MutBorrow.t t_Once) (return' (x: t_Option)) =
    {[@expl:next 'self' type invariant] [%#s10_once] inv'3 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self'0.current).t_Once__0}
        MutBorrow.borrow_final <t_Option> {(self'0.current).t_Once__0}
          {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
          (fun (_ret: MutBorrow.t t_Option) ->
            [ &_3 <- _ret ] -{inv'0 _ret.final}-
            [ &self'0 <- { self'0 with current = { t_Once__0 = _ret.final } } ] s1)
      | s1 = take {_3} (fun (_ret: t_Option) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'3 self'0} s1 | s1 = -{resolve'0 self'0}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: t_Option = Any.any_l () | & self'0: MutBorrow.t t_Once = self | & _3: MutBorrow.t t_Option = Any.any_l () ])
    [ return''0 (result: t_Option) -> {[@expl:next result type invariant] [%#s10_once'0] inv'0 result}
      {[@expl:next ensures] [%#s10_once'1] match result with
        | C_None -> completed self
        | C_Some v -> produces self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
end
module M_10_once__qyi13268780623672429765__resolve_coherence__refines [#"10_once.rs" 8 9 8 16] (* <Once<T> as creusot_contracts::Resolve> *)
  let%span s10_once = "10_once.rs" 8 9 8 16
  let%span s10_once'0 = "10_once.rs" 9 19 9 32
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 772 8 775 9
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Once = { t_Once__0: t_Option }
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    [%#soption] match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: t_Option) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate structural_resolve (_0: t_Once) =
    match _0 with
      | {t_Once__0 = x0} -> resolve'1 x0
      end
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate inv'1 (_0: t_Once)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Once [inv'1 x]. inv'1 x
      = match x with
        | {t_Once__0 = a_0} -> inv'0 a_0
        end
  
  predicate resolve'2 [#"10_once.rs" 8 9 8 16] (self: t_Once) = [%#s10_once'0] resolve'1 self.t_Once__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s10_once] forall self: t_Once. structural_resolve self /\ inv'1 self
      -> structural_resolve self /\ (forall result: (). resolve'2 self -> resolve'2 self)
end
module M_10_once__qyi13094531909677028354__next__refines [#"10_once.rs" 41 4 41 35] (* <Once<T> as common::Iterator> *)
  let%span s10_once = "10_once.rs" 41 4 41 35
  let%span s10_once'0 = "10_once.rs" 16 8 16 59
  let%span s10_once'1 = "10_once.rs" 22 12 23 106
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Once = { t_Once__0: t_Option }
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate inv'1 (_0: t_Once)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Once [inv'1 x]. inv'1 x
      = match x with
        | {t_Once__0 = a_0} -> inv'0 a_0
        end
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Once) =
    [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'2 (_0: MutBorrow.t t_Once)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_Once [inv'2 x]. inv'2 x = invariant' x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Once) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed [#"10_once.rs" 15 4 15 35] (self: MutBorrow.t t_Once) =
    [%#s10_once'0] self.current = { t_Once__0 = C_None } /\ resolve self
  
  predicate produces [#"10_once.rs" 20 4 20 64] (self: t_Once) (visited: Seq.seq t_T) (o: t_Once) =
    [%#s10_once'1] visited = (Seq.empty: Seq.seq t_T) /\ self = o
    \/ (exists e: t_T. self = { t_Once__0 = C_Some e } /\ visited = Seq.singleton e /\ o = { t_Once__0 = C_None })
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s10_once] forall self: MutBorrow.t t_Once. inv'2 self
      -> inv'2 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed self
              | C_Some v -> produces self.current (Seq.singleton v) self.final
              end
          /\ inv'0 result
        -> match result with
            | C_None -> completed self
            | C_Some v -> produces self.current (Seq.singleton v) self.final
            end
        /\ inv'0 result)
end
module M_10_once__qyi13094531909677028354__produces_refl__refines [#"10_once.rs" 29 4 29 26] (* <Once<T> as common::Iterator> *)
  let%span s10_once = "10_once.rs" 29 4 29 26
  let%span s10_once'0 = "10_once.rs" 22 12 23 106
  
  use seq.Seq
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Once = { t_Once__0: t_Option }
  
  predicate produces [#"10_once.rs" 20 4 20 64] (self: t_Once) (visited: Seq.seq t_T) (o: t_Once) =
    [%#s10_once'0] visited = (Seq.empty: Seq.seq t_T) /\ self = o
    \/ (exists e: t_T. self = { t_Once__0 = C_Some e } /\ visited = Seq.singleton e /\ o = { t_Once__0 = C_None })
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s10_once] forall self: t_Once. forall result: (). produces self (Seq.empty: Seq.seq t_T) self
        -> produces self (Seq.empty: Seq.seq t_T) self
end
module M_10_once__qyi13094531909677028354__produces_trans__refines [#"10_once.rs" 35 4 35 90] (* <Once<T> as common::Iterator> *)
  let%span s10_once = "10_once.rs" 35 4 35 90
  let%span s10_once'0 = "10_once.rs" 22 12 23 106
  
  use seq.Seq
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Once = { t_Once__0: t_Option }
  
  predicate produces [#"10_once.rs" 20 4 20 64] (self: t_Once) (visited: Seq.seq t_T) (o: t_Once) =
    [%#s10_once'0] visited = (Seq.empty: Seq.seq t_T) /\ self = o
    \/ (exists e: t_T. self = { t_Once__0 = C_Some e } /\ visited = Seq.singleton e /\ o = { t_Once__0 = C_None })
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#s10_once] forall a: t_Once. forall ab: Seq.seq t_T. forall b: t_Once. forall bc: Seq.seq t_T. forall c: t_Once. produces b bc c
                /\ produces a ab b
              -> produces b bc c
              /\ produces a ab b /\ (forall result: (). produces a (Seq.(++) ab bc) c -> produces a (Seq.(++) ab bc) c)
end
