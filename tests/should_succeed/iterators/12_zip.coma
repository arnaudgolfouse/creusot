module M_12_zip__qyi15615687837377897664__resolve_coherence [#"12_zip.rs" 9 9 9 16] (* <Zip<A, B> as creusot_contracts::Resolve> *)
  let%span s12_zip = "12_zip.rs" 9 9 9 16
  let%span s12_zip'0 = "12_zip.rs" 11 4 12 12
  
  type t_A
  
  type t_B
  
  type t_Zip  =
    { t_Zip__a: t_A; t_Zip__b: t_B }
  
  predicate resolve (_0: t_B)
  
  predicate resolve'0 (_0: t_A)
  
  predicate structural_resolve (_0: t_Zip) =
    match _0 with
      | {t_Zip__a = x0 ; t_Zip__b = x1} -> resolve x1 /\ resolve'0 x0
      end
  
  predicate resolve'1 [#"12_zip.rs" 9 9 9 16] (self: t_Zip) =
    [%#s12_zip'0] resolve'0 self.t_Zip__a /\ resolve self.t_Zip__b
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self  : t_Zip
  
  function resolve_coherence [#"12_zip.rs" 9 9 9 16] (self'0: t_Zip) : ()
  
  goal vc_resolve_coherence: ([%#s12_zip] structural_resolve self)
   -> ([@expl:resolve_coherence ensures] [%#s12_zip] resolve'1 self)
end
module M_12_zip__qyi5005316258240146725__produces_refl [#"12_zip.rs" 43 4 43 26] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip = "12_zip.rs" 42 14 42 47
  let%span s12_zip'0 = "12_zip.rs" 43 27 43 29
  let%span s12_zip'1 = "12_zip.rs" 33 12 36 73
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_B
  
  type t_Zip  =
    { t_Zip__a: t_A; t_Zip__b: t_B }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_A) (visited: Seq.seq t_Item) (o: t_A)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_A) (ab: Seq.seq t_Item) (b: t_A) (bc: Seq.seq t_Item) (c: t_A) : ()
  
  
  axiom produces_trans_spec: forall a: t_A, ab: Seq.seq t_Item, b: t_A, bc: Seq.seq t_Item, c: t_A. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_A) : ()
  
  axiom produces_refl_spec: forall self: t_A. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Item'0
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self: t_B) (visited: Seq.seq t_Item'0) (o: t_B)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a: t_B) (ab: Seq.seq t_Item'0) (b: t_B) (bc: Seq.seq t_Item'0) (c: t_B) : ()
  
  
  axiom produces_trans_spec'0: forall a: t_B, ab: Seq.seq t_Item'0, b: t_B, bc: Seq.seq t_Item'0, c: t_B. ([%#scommon'0] produces'0 a ab b)
   -> ([%#scommon'1] produces'0 b bc c)  -> ([%#scommon'2] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self: t_B) : ()
  
  axiom produces_refl_spec'0: forall self: t_B. [%#scommon] produces'0 self (Seq.empty: Seq.seq t_Item'0) self
  
  type tuple  =
    { _p0: t_Item; _p1: t_Item'0 }
  
  predicate produces'1 [#"12_zip.rs" 30 4 30 65] (self: t_Zip) (visited: Seq.seq tuple) (tl: t_Zip) =
    [%#s12_zip'1] exists p1: Seq.seq t_Item, p2: Seq.seq t_Item'0. Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = { _p0 = Seq.get p1 i; _p1 = Seq.get p2 i })
    /\ produces self.t_Zip__a p1 tl.t_Zip__a /\ produces'0 self.t_Zip__b p2 tl.t_Zip__b
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self  : t_Zip
  
  function produces_refl'1 [#"12_zip.rs" 43 4 43 26] (self'0: t_Zip) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] [%#s12_zip] produces'1 self (Seq.empty: Seq.seq tuple) self
end
module M_12_zip__qyi5005316258240146725__produces_trans [#"12_zip.rs" 50 4 50 90] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip = "12_zip.rs" 47 15 47 32
  let%span s12_zip'0 = "12_zip.rs" 48 15 48 32
  let%span s12_zip'1 = "12_zip.rs" 49 14 49 42
  let%span s12_zip'2 = "12_zip.rs" 50 91 50 93
  let%span s12_zip'3 = "12_zip.rs" 33 12 36 73
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_B
  
  type t_Zip  =
    { t_Zip__a: t_A; t_Zip__b: t_B }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_A) (visited: Seq.seq t_Item) (o: t_A)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_A) (ab: Seq.seq t_Item) (b: t_A) (bc: Seq.seq t_Item) (c: t_A) : ()
  
  
  axiom produces_trans_spec: forall a: t_A, ab: Seq.seq t_Item, b: t_A, bc: Seq.seq t_Item, c: t_A. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_A) : ()
  
  axiom produces_refl_spec: forall self: t_A. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Item'0
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self: t_B) (visited: Seq.seq t_Item'0) (o: t_B)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a: t_B) (ab: Seq.seq t_Item'0) (b: t_B) (bc: Seq.seq t_Item'0) (c: t_B) : ()
  
  
  axiom produces_trans_spec'0: forall a: t_B, ab: Seq.seq t_Item'0, b: t_B, bc: Seq.seq t_Item'0, c: t_B. ([%#scommon'0] produces'0 a ab b)
   -> ([%#scommon'1] produces'0 b bc c)  -> ([%#scommon'2] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self: t_B) : ()
  
  axiom produces_refl_spec'0: forall self: t_B. [%#scommon] produces'0 self (Seq.empty: Seq.seq t_Item'0) self
  
  type tuple  =
    { _p0: t_Item; _p1: t_Item'0 }
  
  predicate produces'1 [#"12_zip.rs" 30 4 30 65] (self: t_Zip) (visited: Seq.seq tuple) (tl: t_Zip) =
    [%#s12_zip'3] exists p1: Seq.seq t_Item, p2: Seq.seq t_Item'0. Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = { _p0 = Seq.get p1 i; _p1 = Seq.get p2 i })
    /\ produces self.t_Zip__a p1 tl.t_Zip__a /\ produces'0 self.t_Zip__b p2 tl.t_Zip__b
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a  : t_Zip
  
  constant ab  : Seq.seq tuple
  
  constant b  : t_Zip
  
  constant bc  : Seq.seq tuple
  
  constant c  : t_Zip
  
  function produces_trans'1 [#"12_zip.rs" 50 4 50 90] (a'0: t_Zip) (ab'0: Seq.seq tuple) (b'0: t_Zip) (bc'0: Seq.seq tuple) (c'0: t_Zip) : ()
  
  
  goal vc_produces_trans: ([%#s12_zip] produces'1 a ab b)
   -> ([%#s12_zip'0] produces'1 b bc c)
   -> ([@expl:produces_trans ensures] [%#s12_zip'1] produces'1 a (Seq.(++) ab bc) c)
end
module M_12_zip__qyi5005316258240146725__next [#"12_zip.rs" 56 4 56 44] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip = "12_zip.rs" 56 17 56 21
  let%span s12_zip'0 = "12_zip.rs" 56 26 56 44
  let%span s12_zip'1 = "12_zip.rs" 52 14 55 5
  let%span s12_zip'2 = "12_zip.rs" 22 13 24 66
  let%span s12_zip'3 = "12_zip.rs" 33 12 36 73
  let%span s12_zip'4 = "12_zip.rs" 1 0 27 4
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_A
  
  predicate inv (_0: t_A)
  
  type t_B
  
  type t_Zip  =
    { t_Zip__a: t_A; t_Zip__b: t_B }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_A) (visited: Seq.seq t_Item) (o: t_A)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_A) (ab: Seq.seq t_Item) (b: t_A) (bc: Seq.seq t_Item) (c: t_A) : ()
  
  
  axiom produces_trans_spec: forall a: t_A, ab: Seq.seq t_Item, b: t_A, bc: Seq.seq t_Item, c: t_A. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_A) : ()
  
  axiom produces_refl_spec: forall self: t_A. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option  =
    | C_None
    | C_Some t_Item
  
  predicate invariant' (self: MutBorrow.t t_A) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_A)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_A [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_A)
  
  axiom precondition_fndef: [%#s12_zip'4] forall args: MutBorrow.t t_A [precondition () args]. (let self = args in inv'0 self)
   -> precondition () args
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_A)
  
  predicate inv'1 (_0: t_Item)
  
  predicate inv'2 (_0: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'1 a_0
    end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_A) (result: t_Option)
  
  axiom postcondition_fndef: [%#s12_zip'4] forall args: MutBorrow.t t_A, res: t_Option [postcondition_once () args res]. postcondition_once () args res
   -> (let self = args in match res with
    | C_None -> completed self
    | C_Some v -> produces self.current (Seq.singleton v) self.final
    end
  /\ inv'2 res)
  
  let rec next (self:MutBorrow.t t_A) (return'  (x:t_Option))= {[@expl:next requires] precondition () self}
    any [ return''0 (result:t_Option)-> {postcondition_once () self result} (! return' {result}) ] 
  
  let rec v_Some (input:t_Option) (ret  (field_0:t_Item))= any
    [ good (field_0:t_Item)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  predicate inv'3 (_0: t_B)
  
  type t_Item'0
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self: t_B) (visited: Seq.seq t_Item'0) (o: t_B)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a: t_B) (ab: Seq.seq t_Item'0) (b: t_B) (bc: Seq.seq t_Item'0) (c: t_B) : ()
  
  
  axiom produces_trans_spec'0: forall a: t_B, ab: Seq.seq t_Item'0, b: t_B, bc: Seq.seq t_Item'0, c: t_B. ([%#scommon'0] produces'0 a ab b)
   -> ([%#scommon'1] produces'0 b bc c)  -> ([%#scommon'2] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self: t_B) : ()
  
  axiom produces_refl_spec'0: forall self: t_B. [%#scommon] produces'0 self (Seq.empty: Seq.seq t_Item'0) self
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Item'0
  
  predicate invariant''0 (self: MutBorrow.t t_B) =
    [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0: MutBorrow.t t_B)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_B [inv'4 x]. inv'4 x = invariant''0 x
  
  predicate precondition'0 (self: ()) (args: MutBorrow.t t_B)
  
  axiom precondition_fndef'0: [%#s12_zip'4] forall args: MutBorrow.t t_B [precondition'0 () args]. (let self = args in inv'4 self)
   -> precondition'0 () args
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_B)
  
  predicate inv'5 (_0: t_Item'0)
  
  predicate inv'6 (_0: t_Option'0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option'0 [inv'6 x]. inv'6 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'5 a_0
    end
  
  predicate postcondition_once'0 (self: ()) (args: MutBorrow.t t_B) (result: t_Option'0)
  
  axiom postcondition_fndef'0: [%#s12_zip'4] forall args: MutBorrow.t t_B, res: t_Option'0 [postcondition_once'0 () args res]. postcondition_once'0 () args res
   -> (let self = args in match res with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'6 res)
  
  let rec next'0 (self:MutBorrow.t t_B) (return'  (x:t_Option'0))= {[@expl:next requires] precondition'0 () self}
    any [ return''0 (result:t_Option'0)-> {postcondition_once'0 () self result} (! return' {result}) ] 
  
  predicate inv'7 (_0: t_Zip)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Zip [inv'7 x]. inv'7 x
  = match x with
    | {t_Zip__a = a ; t_Zip__b = b} -> inv a /\ inv'3 b
    end
  
  predicate invariant''1 (self: MutBorrow.t t_Zip) =
    [%#sinvariant] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'8 (_0: MutBorrow.t t_Zip)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_Zip [inv'8 x]. inv'8 x = invariant''1 x
  
  predicate resolve (self: MutBorrow.t t_Zip) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_Zip) =
    resolve _0
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_Item'0))= any
    [ good (field_0:t_Item'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item'0 [C_Some'0 field_0: t_Option'0]. C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  type tuple  =
    { _p0: t_Item; _p1: t_Item'0 }
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 tuple
  
  predicate resolve'1 (_0: t_Item)
  
  predicate inv'9 (_0: tuple)
  
  axiom inv_axiom'5 [@rewrite]: forall x: tuple [inv'9 x]. inv'9 x
  = (let {_p0 = x0 ; _p1 = x1} = x in inv'1 x0 /\ inv'5 x1)
  
  predicate inv'10 (_0: t_Option'1)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_Option'1 [inv'10 x]. inv'10 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'9 a_0
    end
  
  predicate completed'1 [#"12_zip.rs" 20 4 20 35] (self: MutBorrow.t t_Zip) =
    [%#s12_zip'2] completed (MutBorrow.borrow_logic (self.current).t_Zip__a (self.final).t_Zip__a (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ (self.current).t_Zip__b = (self.final).t_Zip__b
    \/ (exists x: t_Item. produces (self.current).t_Zip__a (Seq.singleton x) (self.final).t_Zip__a
    /\ resolve'1 x
    /\ completed'0 (MutBorrow.borrow_logic (self.current).t_Zip__b (self.final).t_Zip__b (MutBorrow.inherit_id (MutBorrow.get_id self) 2)))
  
  predicate produces'1 [#"12_zip.rs" 30 4 30 65] (self: t_Zip) (visited: Seq.seq tuple) (tl: t_Zip) =
    [%#s12_zip'3] exists p1: Seq.seq t_Item, p2: Seq.seq t_Item'0. Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = { _p0 = Seq.get p1 i; _p1 = Seq.get p2 i })
    /\ produces self.t_Zip__a p1 tl.t_Zip__a /\ produces'0 self.t_Zip__b p2 tl.t_Zip__b
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'1[#"12_zip.rs" 56 4 56 44] (self:MutBorrow.t t_Zip) (return'  (x:t_Option'1))= {[@expl:next 'self' type invariant] [%#s12_zip] inv'8 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv (self'0.current).t_Zip__a}
        MutBorrow.borrow_final <t_A> {(self'0.current).t_Zip__a} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
          (fun (_ret:MutBorrow.t t_A) ->
             [ &_5 <- _ret ] 
            -{inv _ret.final}-
             [ &self'0 <- { self'0 with current = { self'0.current with t_Zip__a = _ret.final } } ] 
            s1)
      | s1 = next {_5} (fun (_ret:t_Option) ->  [ &_4 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = any [ br0 -> {_4 = C_None} (! bb3) | br1 (x0:t_Item)-> {_4 = C_Some x0} (! bb4) ] 
    | bb4 = s0 [ s0 = v_Some {_4} (fun (r0:t_Item) ->  [ &x'0 <- r0 ] s1) | s1 =  [ &x <- x'0 ] s2 | s2 = bb7 ] 
    | bb7 = s0
      [ s0 = {inv'3 (self'0.current).t_Zip__b}
        MutBorrow.borrow_final <t_B> {(self'0.current).t_Zip__b} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
          (fun (_ret:MutBorrow.t t_B) ->
             [ &_11 <- _ret ] 
            -{inv'3 _ret.final}-
             [ &self'0 <- { self'0 with current = { self'0.current with t_Zip__b = _ret.final } } ] 
            s1)
      | s1 = next'0 {_11} (fun (_ret:t_Option'0) ->  [ &_10 <- _ret ] s2)
      | s2 = bb8 ]
    
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'8 self'0} s1
      | s1 = -{resolve'0 self'0}- s2
      | s2 = any [ br0 -> {_10 = C_None'0} (! bb10) | br1 (x0:t_Item'0)-> {_10 = C_Some'0 x0} (! bb11) ]  ]
    
    | bb11 = s0 [ s0 = v_Some'0 {_10} (fun (r0:t_Item'0) ->  [ &y'0 <- r0 ] s1) | s1 =  [ &y <- y'0 ] s2 | s2 = bb14 ] 
    | bb14 = s0 [ s0 =  [ &_15 <- { _p0 = x; _p1 = y } ] s1 | s1 = bb16 ] 
    | bb16 = s0 [ s0 =  [ &_0 <- C_Some'1 _15 ] s1 | s1 = bb23 ] 
    | bb10 = s0 [ s0 = {[@expl:type invariant] inv'1 x} s1 | s1 = -{resolve'1 x}- s2 | s2 = bb12 ] 
    | bb12 = s0 [ s0 =  [ &_0 <- C_None'1 ] s1 | s1 = bb23 ] 
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'8 self'0} s1 | s1 = -{resolve'0 self'0}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- C_None'1 ] s1 | s1 = bb23 ] 
    | bb23 = return''0 {_0} ]
    
    [ & _0: t_Option'1 = Any.any_l ()
    | & self'0: MutBorrow.t t_Zip = self
    | & x: t_Item = Any.any_l ()
    | & _4: t_Option = Any.any_l ()
    | & _5: MutBorrow.t t_A = Any.any_l ()
    | & x'0: t_Item = Any.any_l ()
    | & y: t_Item'0 = Any.any_l ()
    | & _10: t_Option'0 = Any.any_l ()
    | & _11: MutBorrow.t t_B = Any.any_l ()
    | & y'0: t_Item'0 = Any.any_l ()
    | & _15: tuple = Any.any_l () ]
    )
    [ return''0 (result:t_Option'1)-> {[@expl:next result type invariant] [%#s12_zip'0] inv'10 result}
      {[@expl:next ensures] [%#s12_zip'1] match result with
        | C_None'1 -> completed'1 self
        | C_Some'1 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]

end
module M_12_zip__qyi15615687837377897664__resolve_coherence__refines [#"12_zip.rs" 9 9 9 16] (* <Zip<A, B> as creusot_contracts::Resolve> *)
  let%span s12_zip = "12_zip.rs" 9 9 9 16
  let%span s12_zip'0 = "12_zip.rs" 11 4 12 12
  
  type t_A
  
  type t_B
  
  type t_Zip  =
    { t_Zip__a: t_A; t_Zip__b: t_B }
  
  predicate resolve (_0: t_B)
  
  predicate resolve'0 (_0: t_A)
  
  predicate structural_resolve (_0: t_Zip) =
    match _0 with
      | {t_Zip__a = x0 ; t_Zip__b = x1} -> resolve x1 /\ resolve'0 x0
      end
  
  predicate inv (_0: t_A)
  
  predicate inv'0 (_0: t_B)
  
  predicate inv'1 (_0: t_Zip)
  
  axiom inv_axiom [@rewrite]: forall x: t_Zip [inv'1 x]. inv'1 x
  = match x with
    | {t_Zip__a = a ; t_Zip__b = b} -> inv a /\ inv'0 b
    end
  
  predicate resolve'1 [#"12_zip.rs" 9 9 9 16] (self: t_Zip) =
    [%#s12_zip'0] resolve'0 self.t_Zip__a /\ resolve self.t_Zip__b
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s12_zip] forall self: t_Zip. structural_resolve self /\ inv'1 self
   -> structural_resolve self /\ (forall result: (). resolve'1 self  -> resolve'1 self)
end
module M_12_zip__qyi5005316258240146725__next__refines [#"12_zip.rs" 56 4 56 44] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip = "12_zip.rs" 56 4 56 44
  let%span s12_zip'0 = "12_zip.rs" 22 13 24 66
  let%span s12_zip'1 = "12_zip.rs" 33 12 36 73
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_B
  
  type t_Zip  =
    { t_Zip__a: t_A; t_Zip__b: t_B }
  
  predicate inv (_0: t_A)
  
  predicate inv'0 (_0: t_B)
  
  predicate inv'1 (_0: t_Zip)
  
  axiom inv_axiom [@rewrite]: forall x: t_Zip [inv'1 x]. inv'1 x
  = match x with
    | {t_Zip__a = a ; t_Zip__b = b} -> inv a /\ inv'0 b
    end
  
  predicate invariant' (self: MutBorrow.t t_Zip) =
    [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_0: MutBorrow.t t_Zip)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Zip [inv'2 x]. inv'2 x = invariant' x
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_A) (visited: Seq.seq t_Item) (o: t_A)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_A) (ab: Seq.seq t_Item) (b: t_A) (bc: Seq.seq t_Item) (c: t_A) : ()
  
  
  axiom produces_trans_spec: forall a: t_A, ab: Seq.seq t_Item, b: t_A, bc: Seq.seq t_Item, c: t_A. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_A) : ()
  
  axiom produces_refl_spec: forall self: t_A. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Item'0
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self: t_B) (visited: Seq.seq t_Item'0) (o: t_B)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a: t_B) (ab: Seq.seq t_Item'0) (b: t_B) (bc: Seq.seq t_Item'0) (c: t_B) : ()
  
  
  axiom produces_trans_spec'0: forall a: t_B, ab: Seq.seq t_Item'0, b: t_B, bc: Seq.seq t_Item'0, c: t_B. ([%#scommon'0] produces'0 a ab b)
   -> ([%#scommon'1] produces'0 b bc c)  -> ([%#scommon'2] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self: t_B) : ()
  
  axiom produces_refl_spec'0: forall self: t_B. [%#scommon] produces'0 self (Seq.empty: Seq.seq t_Item'0) self
  
  type tuple  =
    { _p0: t_Item; _p1: t_Item'0 }
  
  type t_Option  =
    | C_None
    | C_Some tuple
  
  predicate completed [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_A)
  
  predicate resolve (_0: t_Item)
  
  predicate completed'0 [#"common.rs" 11 4 11 36] (self: MutBorrow.t t_B)
  
  predicate completed'1 [#"12_zip.rs" 20 4 20 35] (self: MutBorrow.t t_Zip) =
    [%#s12_zip'0] completed (MutBorrow.borrow_logic (self.current).t_Zip__a (self.final).t_Zip__a (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ (self.current).t_Zip__b = (self.final).t_Zip__b
    \/ (exists x: t_Item. produces (self.current).t_Zip__a (Seq.singleton x) (self.final).t_Zip__a
    /\ resolve x
    /\ completed'0 (MutBorrow.borrow_logic (self.current).t_Zip__b (self.final).t_Zip__b (MutBorrow.inherit_id (MutBorrow.get_id self) 2)))
  
  predicate produces'1 [#"12_zip.rs" 30 4 30 65] (self: t_Zip) (visited: Seq.seq tuple) (tl: t_Zip) =
    [%#s12_zip'1] exists p1: Seq.seq t_Item, p2: Seq.seq t_Item'0. Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = { _p0 = Seq.get p1 i; _p1 = Seq.get p2 i })
    /\ produces self.t_Zip__a p1 tl.t_Zip__a /\ produces'0 self.t_Zip__b p2 tl.t_Zip__b
  
  predicate inv'3 (_0: t_Item)
  
  predicate inv'4 (_0: t_Item'0)
  
  predicate inv'5 (_0: tuple)
  
  axiom inv_axiom'1 [@rewrite]: forall x: tuple [inv'5 x]. inv'5 x
  = (let {_p0 = x0 ; _p1 = x1} = x in inv'3 x0 /\ inv'4 x1)
  
  predicate inv'6 (_0: t_Option)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option [inv'6 x]. inv'6 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'5 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s12_zip] forall self: MutBorrow.t t_Zip. inv'2 self
   -> inv'2 self
  /\ (forall result: t_Option. match result with
    | C_None -> completed'1 self
    | C_Some v -> produces'1 self.current (Seq.singleton v) self.final
    end
  /\ inv'6 result
   -> match result with
    | C_None -> completed'1 self
    | C_Some v -> produces'1 self.current (Seq.singleton v) self.final
    end
  /\ inv'6 result)
end
module M_12_zip__qyi5005316258240146725__produces_trans__refines [#"12_zip.rs" 50 4 50 90] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip = "12_zip.rs" 50 4 50 90
  let%span s12_zip'0 = "12_zip.rs" 33 12 36 73
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_B
  
  type t_Zip  =
    { t_Zip__a: t_A; t_Zip__b: t_B }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_A) (visited: Seq.seq t_Item) (o: t_A)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_A) (ab: Seq.seq t_Item) (b: t_A) (bc: Seq.seq t_Item) (c: t_A) : ()
  
  
  axiom produces_trans_spec: forall a: t_A, ab: Seq.seq t_Item, b: t_A, bc: Seq.seq t_Item, c: t_A. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_A) : ()
  
  axiom produces_refl_spec: forall self: t_A. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Item'0
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self: t_B) (visited: Seq.seq t_Item'0) (o: t_B)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a: t_B) (ab: Seq.seq t_Item'0) (b: t_B) (bc: Seq.seq t_Item'0) (c: t_B) : ()
  
  
  axiom produces_trans_spec'0: forall a: t_B, ab: Seq.seq t_Item'0, b: t_B, bc: Seq.seq t_Item'0, c: t_B. ([%#scommon'0] produces'0 a ab b)
   -> ([%#scommon'1] produces'0 b bc c)  -> ([%#scommon'2] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self: t_B) : ()
  
  axiom produces_refl_spec'0: forall self: t_B. [%#scommon] produces'0 self (Seq.empty: Seq.seq t_Item'0) self
  
  type tuple  =
    { _p0: t_Item; _p1: t_Item'0 }
  
  predicate produces'1 [#"12_zip.rs" 30 4 30 65] (self: t_Zip) (visited: Seq.seq tuple) (tl: t_Zip) =
    [%#s12_zip'0] exists p1: Seq.seq t_Item, p2: Seq.seq t_Item'0. Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = { _p0 = Seq.get p1 i; _p1 = Seq.get p2 i })
    /\ produces self.t_Zip__a p1 tl.t_Zip__a /\ produces'0 self.t_Zip__b p2 tl.t_Zip__b
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s12_zip] forall a: t_Zip. forall ab: Seq.seq tuple. forall b: t_Zip. forall bc: Seq.seq tuple. forall c: t_Zip. produces'1 b bc c
  /\ produces'1 a ab b
   -> produces'1 b bc c
  /\ produces'1 a ab b /\ (forall result: (). produces'1 a (Seq.(++) ab bc) c  -> produces'1 a (Seq.(++) ab bc) c)
end
module M_12_zip__qyi5005316258240146725__produces_refl__refines [#"12_zip.rs" 43 4 43 26] (* <Zip<A, B> as common::Iterator> *)
  let%span s12_zip = "12_zip.rs" 43 4 43 26
  let%span s12_zip'0 = "12_zip.rs" 33 12 36 73
  let%span scommon = "common.rs" 14 14 14 47
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  
  use seq.Seq
  use mach.int.Int
  
  type t_A
  
  type t_B
  
  type t_Zip  =
    { t_Zip__a: t_A; t_Zip__b: t_B }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self: t_A) (visited: Seq.seq t_Item) (o: t_A)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a: t_A) (ab: Seq.seq t_Item) (b: t_A) (bc: Seq.seq t_Item) (c: t_A) : ()
  
  
  axiom produces_trans_spec: forall a: t_A, ab: Seq.seq t_Item, b: t_A, bc: Seq.seq t_Item, c: t_A. ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self: t_A) : ()
  
  axiom produces_refl_spec: forall self: t_A. [%#scommon] produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Item'0
  
  predicate produces'0 [#"common.rs" 8 4 8 65] (self: t_B) (visited: Seq.seq t_Item'0) (o: t_B)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a: t_B) (ab: Seq.seq t_Item'0) (b: t_B) (bc: Seq.seq t_Item'0) (c: t_B) : ()
  
  
  axiom produces_trans_spec'0: forall a: t_B, ab: Seq.seq t_Item'0, b: t_B, bc: Seq.seq t_Item'0, c: t_B. ([%#scommon'0] produces'0 a ab b)
   -> ([%#scommon'1] produces'0 b bc c)  -> ([%#scommon'2] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self: t_B) : ()
  
  axiom produces_refl_spec'0: forall self: t_B. [%#scommon] produces'0 self (Seq.empty: Seq.seq t_Item'0) self
  
  type tuple  =
    { _p0: t_Item; _p1: t_Item'0 }
  
  predicate produces'1 [#"12_zip.rs" 30 4 30 65] (self: t_Zip) (visited: Seq.seq tuple) (tl: t_Zip) =
    [%#s12_zip'0] exists p1: Seq.seq t_Item, p2: Seq.seq t_Item'0. Seq.length p1 = Seq.length p2
    /\ Seq.length p2 = Seq.length visited
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = { _p0 = Seq.get p1 i; _p1 = Seq.get p2 i })
    /\ produces self.t_Zip__a p1 tl.t_Zip__a /\ produces'0 self.t_Zip__b p2 tl.t_Zip__b
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s12_zip] forall self: t_Zip. forall result: (). produces'1 self (Seq.empty: Seq.seq tuple) self
   -> produces'1 self (Seq.empty: Seq.seq tuple) self
end
