module M_01_range__qyi16572111325853806140__produces_refl [#"01_range.rs" 35 4 35 26] (* <Range as common::Iterator> *)
  let%span s01_range = "01_range.rs" 34 4 34 49
  let%span s01_range'0 = "01_range.rs" 35 27 35 29
  let%span s01_range'1 = "01_range.rs" 25 12 29 46
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  
  use creusot.int.Int64
  use seq.Seq
  use mach.int.Int
  
  type t_Range = { t_Range__start: Int64.t; t_Range__end: Int64.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: Int64.t) (o: Int64.t) : t_Ordering = [%#sord'12] if Int64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: Int64.t) (y: Int64.t) : ()
  
  axiom eq_cmp_spec: forall x: Int64.t, y: Int64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym2_spec: forall x: Int64.t, y: Int64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym1_spec: forall x: Int64.t, y: Int64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: Int64.t) (y: Int64.t) (z: Int64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: Int64.t, y: Int64.t, z: Int64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: Int64.t) : ()
  
  axiom refl_spec: forall x: Int64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'2] Int64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'1] Int64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'0] Int64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_le_log_spec: forall x: Int64.t, y: Int64.t. [%#sord] Int64.le x y = (cmp_log x y <> C_Greater)
  
  predicate produces [#"01_range.rs" 23 4 23 64] (self: t_Range) (visited: Seq.seq Int64.t) (o: t_Range) =
    [%#s01_range'1] self.t_Range__end = o.t_Range__end
    /\ Int64.le self.t_Range__start o.t_Range__start
    /\ (Seq.length visited > 0 -> Int64.le o.t_Range__start o.t_Range__end)
    /\ Seq.length visited = Int64.to_int o.t_Range__start - Int64.to_int self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> Int64.to_int (Seq.get visited i) = Int64.to_int self.t_Range__start + i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Range
  
  function produces_refl [#"01_range.rs" 35 4 35 26] (self'0: t_Range) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] [%#s01_range] produces self (Seq.empty: Seq.seq Int64.t) self
end
module M_01_range__qyi16572111325853806140__produces_trans [#"01_range.rs" 41 4 41 90] (* <Range as common::Iterator> *)
  let%span s01_range = "01_range.rs" 38 4 38 34
  let%span s01_range'0 = "01_range.rs" 39 4 39 34
  let%span s01_range'1 = "01_range.rs" 40 4 40 44
  let%span s01_range'2 = "01_range.rs" 41 91 41 93
  let%span s01_range'3 = "01_range.rs" 25 12 29 46
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  
  use creusot.int.Int64
  use seq.Seq
  use mach.int.Int
  
  type t_Range = { t_Range__start: Int64.t; t_Range__end: Int64.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: Int64.t) (o: Int64.t) : t_Ordering = [%#sord'12] if Int64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: Int64.t) (y: Int64.t) : ()
  
  axiom eq_cmp_spec: forall x: Int64.t, y: Int64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym2_spec: forall x: Int64.t, y: Int64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym1_spec: forall x: Int64.t, y: Int64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: Int64.t) (y: Int64.t) (z: Int64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: Int64.t, y: Int64.t, z: Int64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: Int64.t) : ()
  
  axiom refl_spec: forall x: Int64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'2] Int64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'1] Int64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'0] Int64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_le_log_spec: forall x: Int64.t, y: Int64.t. [%#sord] Int64.le x y = (cmp_log x y <> C_Greater)
  
  predicate produces [#"01_range.rs" 23 4 23 64] (self: t_Range) (visited: Seq.seq Int64.t) (o: t_Range) =
    [%#s01_range'3] self.t_Range__end = o.t_Range__end
    /\ Int64.le self.t_Range__start o.t_Range__start
    /\ (Seq.length visited > 0 -> Int64.le o.t_Range__start o.t_Range__end)
    /\ Seq.length visited = Int64.to_int o.t_Range__start - Int64.to_int self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> Int64.to_int (Seq.get visited i) = Int64.to_int self.t_Range__start + i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Range
  
  constant ab : Seq.seq Int64.t
  
  constant b : t_Range
  
  constant bc : Seq.seq Int64.t
  
  constant c : t_Range
  
  function produces_trans [#"01_range.rs" 41 4 41 90] (a'0: t_Range) (ab'0: Seq.seq Int64.t) (b'0: t_Range) (bc'0: Seq.seq Int64.t) (c'0: t_Range) : ()
  
  goal vc_produces_trans: ([%#s01_range] produces a ab b)
    -> ([%#s01_range'0] produces b bc c)
    -> ([@expl:produces_trans ensures] [%#s01_range'1] produces a (Seq.(++) ab bc) c)
end
module M_01_range__qyi16572111325853806140__next [#"01_range.rs" 47 4 47 39] (* <Range as common::Iterator> *)
  let%span s01_range = "01_range.rs" 52 26 52 27
  let%span s01_range'0 = "01_range.rs" 43 14 46 5
  let%span s01_range'1 = "01_range.rs" 17 8 19 9
  let%span s01_range'2 = "01_range.rs" 25 12 29 46
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.int.Int64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  type t_Range = { t_Range__start: Int64.t; t_Range__end: Int64.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Range) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Range) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  type t_Option = C_None | C_Some Int64.t
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: Int64.t) (o: Int64.t) : t_Ordering = [%#sord'12] if Int64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: Int64.t) (y: Int64.t) : ()
  
  axiom eq_cmp_spec: forall x: Int64.t, y: Int64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym2_spec: forall x: Int64.t, y: Int64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym1_spec: forall x: Int64.t, y: Int64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: Int64.t) (y: Int64.t) (z: Int64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: Int64.t, y: Int64.t, z: Int64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: Int64.t) : ()
  
  axiom refl_spec: forall x: Int64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'2] Int64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'1] Int64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'0] Int64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_le_log_spec: forall x: Int64.t, y: Int64.t. [%#sord] Int64.le x y = (cmp_log x y <> C_Greater)
  
  predicate completed [#"01_range.rs" 16 4 16 35] (self: MutBorrow.t t_Range) =
    [%#s01_range'1] resolve self /\ Int64.ge (self.current).t_Range__start (self.current).t_Range__end
  
  predicate produces [#"01_range.rs" 23 4 23 64] (self: t_Range) (visited: Seq.seq Int64.t) (o: t_Range) =
    [%#s01_range'2] self.t_Range__end = o.t_Range__end
    /\ Int64.le self.t_Range__start o.t_Range__start
    /\ (Seq.length visited > 0 -> Int64.le o.t_Range__start o.t_Range__end)
    /\ Seq.length visited = Int64.to_int o.t_Range__start - Int64.to_int self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> Int64.to_int (Seq.get visited i) = Int64.to_int self.t_Range__start + i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next [#"01_range.rs" 47 4 47 39] (self: MutBorrow.t t_Range) (return' (x: t_Option)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_3 <- Int64.ge (self'0.current).t_Range__start (self'0.current).t_Range__end ] s1
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb1) ] ]
    | bb1 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = [ &_0 <- C_None ] s2 | s2 = bb3 ]
    | bb2 = s0
      [ s0 = [ &r <- (self'0.current).t_Range__start ] s1
      | s1 = Int64.add {(self'0.current).t_Range__start} {[%#s01_range] (1: Int64.t)}
          (fun (_ret: Int64.t) ->
            [ &self'0 <- { self'0 with current = { self'0.current with t_Range__start = _ret } } ] s2)
      | s2 = -{resolve'0 self'0}- s3
      | s3 = [ &_0 <- C_Some r ] s4
      | s4 = bb3 ]
    | bb3 = return''0 {_0} ]
    [ & _0: t_Option = Any.any_l ()
    | & self'0: MutBorrow.t t_Range = self
    | & _3: bool = Any.any_l ()
    | & r: Int64.t = Any.any_l () ])
    [ return''0 (result: t_Option) -> {[@expl:next ensures] [%#s01_range'0] match result with
        | C_None -> completed self
        | C_Some v -> produces self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
end
module M_01_range__qyi2180657552132013455__into_iter [#"01_range.rs" 60 4 60 34] (* Range *)
  let%span s01_range = "01_range.rs" 59 14 59 28
  
  use creusot.int.Int64
  use creusot.prelude.Any
  
  type t_Range = { t_Range__start: Int64.t; t_Range__end: Int64.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec into_iter [#"01_range.rs" 60 4 60 34] (self: t_Range) (return' (x: t_Range)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- self'0 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: t_Range = Any.any_l () | & self'0: t_Range = self ])
    [ return''0 (result: t_Range) -> {[@expl:into_iter ensures] [%#s01_range] result = self} (! return' {result}) ]
end
module M_01_range__sum_range [#"01_range.rs" 67 0 67 35]
  let%span s01_range = "01_range.rs" 68 16 68 17
  let%span s01_range'0 = "01_range.rs" 69 32 69 33
  let%span s01_range'1 = "01_range.rs" 70 31 70 33
  let%span s01_range'2 = "01_range.rs" 71 35 71 47
  let%span s01_range'3 = "01_range.rs" 74 16 74 46
  let%span s01_range'4 = "01_range.rs" 72 4 72 25
  let%span s01_range'5 = "01_range.rs" 72 16 72 23
  let%span s01_range'6 = "01_range.rs" 78 27 78 75
  let%span s01_range'7 = "01_range.rs" 79 21 79 22
  let%span s01_range'8 = "01_range.rs" 65 11 65 18
  let%span s01_range'9 = "01_range.rs" 66 10 66 21
  let%span s01_range'10 = "01_range.rs" 59 14 59 28
  let%span s01_range'11 = "01_range.rs" 25 12 29 46
  let%span s01_range'12 = "01_range.rs" 43 14 46 5
  let%span s01_range'13 = "01_range.rs" 34 4 34 49
  let%span s01_range'14 = "01_range.rs" 35 27 35 29
  let%span s01_range'15 = "01_range.rs" 38 4 38 34
  let%span s01_range'16 = "01_range.rs" 39 4 39 34
  let%span s01_range'17 = "01_range.rs" 40 4 40 44
  let%span s01_range'18 = "01_range.rs" 41 91 41 93
  let%span s01_range'19 = "01_range.rs" 17 8 19 9
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.int.Int64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Range = { t_Range__start: Int64.t; t_Range__end: Int64.t }
  
  let rec into_iter (self: t_Range) (return' (x: t_Range)) = any
    [ return''0 (result: t_Range) -> {[%#s01_range'10] result = self} (! return' {result}) ]
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: Int64.t) (o: Int64.t) : t_Ordering = [%#sord'12] if Int64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: Int64.t) (y: Int64.t) : ()
  
  axiom eq_cmp_spec: forall x: Int64.t, y: Int64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym2_spec: forall x: Int64.t, y: Int64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym1_spec: forall x: Int64.t, y: Int64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: Int64.t) (y: Int64.t) (z: Int64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: Int64.t, y: Int64.t, z: Int64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: Int64.t) : ()
  
  axiom refl_spec: forall x: Int64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'2] Int64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'1] Int64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'0] Int64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_le_log_spec: forall x: Int64.t, y: Int64.t. [%#sord] Int64.le x y = (cmp_log x y <> C_Greater)
  
  predicate produces [#"01_range.rs" 23 4 23 64] (self: t_Range) (visited: Seq.seq Int64.t) (o: t_Range) =
    [%#s01_range'11] self.t_Range__end = o.t_Range__end
    /\ Int64.le self.t_Range__start o.t_Range__start
    /\ (Seq.length visited > 0 -> Int64.le o.t_Range__start o.t_Range__end)
    /\ Seq.length visited = Int64.to_int o.t_Range__start - Int64.to_int self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> Int64.to_int (Seq.get visited i) = Int64.to_int self.t_Range__start + i)
  
  function produces_trans [#"01_range.rs" 41 4 41 90] (a: t_Range) (ab: Seq.seq Int64.t) (b: t_Range) (bc: Seq.seq Int64.t) (c: t_Range) : ()
   = [%#s01_range'18] ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq Int64.t, b: t_Range, bc: Seq.seq Int64.t, c: t_Range. ([%#s01_range'15] produces a ab b)
      -> ([%#s01_range'16] produces b bc c) -> ([%#s01_range'17] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"01_range.rs" 35 4 35 26] (self: t_Range) : () = [%#s01_range'14] ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#s01_range'13] produces self (Seq.empty: Seq.seq Int64.t) self
  
  predicate inv (_0: t_Range)
  
  axiom inv_axiom [@rewrite]: forall x: t_Range [inv x]. inv x = true
  
  type t_Option = C_None | C_Some Int64.t
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Range) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed [#"01_range.rs" 16 4 16 35] (self: MutBorrow.t t_Range) =
    [%#s01_range'19] resolve self /\ Int64.ge (self.current).t_Range__start (self.current).t_Range__end
  
  let rec next (self: MutBorrow.t t_Range) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#s01_range'12] match result with
        | C_None -> completed self
        | C_Some v -> produces self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: Int64.t)) = any
    [ good (field_0: Int64.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: Int64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_range [#"01_range.rs" 67 0 67 35] (n: Int64.t) (return' (x: Int64.t)) =
    {[@expl:sum_range requires] [%#s01_range'8] Int64.to_int n >= 0}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &i <- [%#s01_range] (0: Int64.t) ] s1
      | s1 = [ &_6 <- { t_Range__start = ([%#s01_range'0] (0: Int64.t)); t_Range__end = n'0 } ] s2
      | s2 = into_iter {_6} (fun (_ret: t_Range) -> [ &it <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = [ &iter_old <- [%#s01_range'1] it ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &produced <- [%#s01_range'2] Seq.empty: Seq.seq Int64.t ] s1 | s1 = bb4 ]
    | bb4 = bb4'0
      [ bb4'0 = {[@expl:loop invariant #0] [%#s01_range'5] inv it}
        {[@expl:loop invariant #1] [%#s01_range'4] produces iter_old produced it}
        {[@expl:loop invariant #2] [%#s01_range'3] Int64.to_int i = Seq.length produced /\ Int64.le i n'0}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {it}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_19 <- _ret ] [ &it <- _ret.final ] s1)
          | s1 = next {_19} (fun (_ret: t_Option) -> [ &_18 <- _ret ] s2)
          | s2 = bb6 ]
        | bb6 = any [ br0 -> {_18 = C_None} (! bb9) | br1 (x0: Int64.t) -> {_18 = C_Some x0} (! bb10) ]
        | bb10 = s0
          [ s0 = v_Some {_18} (fun (r0: Int64.t) -> [ &x <- r0 ] s1)
          | s1 = [ &_22 <- [%#s01_range'6] Seq.(++) produced (Seq.singleton x) ] s2
          | s2 = bb11 ]
        | bb11 = s0
          [ s0 = [ &produced <- _22 ] s1
          | s1 = Int64.add {i} {[%#s01_range'7] (1: Int64.t)} (fun (_ret: Int64.t) -> [ &i <- _ret ] s2)
          | s2 = bb4'0 ] ] ]
    | bb9 = s0 [ s0 = [ &_0 <- i ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: Int64.t = Any.any_l ()
    | & n'0: Int64.t = n
    | & i: Int64.t = Any.any_l ()
    | & it: t_Range = Any.any_l ()
    | & _6: t_Range = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq Int64.t = Any.any_l ()
    | & _18: t_Option = Any.any_l ()
    | & _19: MutBorrow.t t_Range = Any.any_l ()
    | & x: Int64.t = Any.any_l ()
    | & _22: Seq.seq Int64.t = Any.any_l () ])
    [ return''0 (result: Int64.t) -> {[@expl:sum_range ensures] [%#s01_range'9] result = n} (! return' {result}) ]
end
module M_01_range__qyi16572111325853806140__produces_trans__refines [#"01_range.rs" 41 4 41 90] (* <Range as common::Iterator> *)
  let%span s01_range = "01_range.rs" 41 4 41 90
  let%span s01_range'0 = "01_range.rs" 25 12 29 46
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  
  use creusot.int.Int64
  use seq.Seq
  use mach.int.Int
  
  type t_Range = { t_Range__start: Int64.t; t_Range__end: Int64.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: Int64.t) (o: Int64.t) : t_Ordering = [%#sord'12] if Int64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: Int64.t) (y: Int64.t) : ()
  
  axiom eq_cmp_spec: forall x: Int64.t, y: Int64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym2_spec: forall x: Int64.t, y: Int64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym1_spec: forall x: Int64.t, y: Int64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: Int64.t) (y: Int64.t) (z: Int64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: Int64.t, y: Int64.t, z: Int64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: Int64.t) : ()
  
  axiom refl_spec: forall x: Int64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'2] Int64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'1] Int64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'0] Int64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_le_log_spec: forall x: Int64.t, y: Int64.t. [%#sord] Int64.le x y = (cmp_log x y <> C_Greater)
  
  predicate produces [#"01_range.rs" 23 4 23 64] (self: t_Range) (visited: Seq.seq Int64.t) (o: t_Range) =
    [%#s01_range'0] self.t_Range__end = o.t_Range__end
    /\ Int64.le self.t_Range__start o.t_Range__start
    /\ (Seq.length visited > 0 -> Int64.le o.t_Range__start o.t_Range__end)
    /\ Seq.length visited = Int64.to_int o.t_Range__start - Int64.to_int self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> Int64.to_int (Seq.get visited i) = Int64.to_int self.t_Range__start + i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#s01_range] forall a: t_Range. forall ab: Seq.seq Int64.t. forall b: t_Range. forall bc: Seq.seq Int64.t. forall c: t_Range. produces b bc c
                /\ produces a ab b
              -> produces b bc c
              /\ produces a ab b /\ (forall result: (). produces a (Seq.(++) ab bc) c -> produces a (Seq.(++) ab bc) c)
end
module M_01_range__qyi16572111325853806140__next__refines [#"01_range.rs" 47 4 47 39] (* <Range as common::Iterator> *)
  let%span s01_range = "01_range.rs" 47 4 47 39
  let%span s01_range'0 = "01_range.rs" 17 8 19 9
  let%span s01_range'1 = "01_range.rs" 25 12 29 46
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.int.Int64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_Option = C_None | C_Some Int64.t
  
  type t_Range = { t_Range__start: Int64.t; t_Range__end: Int64.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Range) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: Int64.t) (o: Int64.t) : t_Ordering = [%#sord'12] if Int64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: Int64.t) (y: Int64.t) : ()
  
  axiom eq_cmp_spec: forall x: Int64.t, y: Int64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym2_spec: forall x: Int64.t, y: Int64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym1_spec: forall x: Int64.t, y: Int64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: Int64.t) (y: Int64.t) (z: Int64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: Int64.t, y: Int64.t, z: Int64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: Int64.t) : ()
  
  axiom refl_spec: forall x: Int64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'2] Int64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'1] Int64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'0] Int64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_le_log_spec: forall x: Int64.t, y: Int64.t. [%#sord] Int64.le x y = (cmp_log x y <> C_Greater)
  
  predicate completed [#"01_range.rs" 16 4 16 35] (self: MutBorrow.t t_Range) =
    [%#s01_range'0] resolve self /\ Int64.ge (self.current).t_Range__start (self.current).t_Range__end
  
  predicate produces [#"01_range.rs" 23 4 23 64] (self: t_Range) (visited: Seq.seq Int64.t) (o: t_Range) =
    [%#s01_range'1] self.t_Range__end = o.t_Range__end
    /\ Int64.le self.t_Range__start o.t_Range__start
    /\ (Seq.length visited > 0 -> Int64.le o.t_Range__start o.t_Range__end)
    /\ Seq.length visited = Int64.to_int o.t_Range__start - Int64.to_int self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> Int64.to_int (Seq.get visited i) = Int64.to_int self.t_Range__start + i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s01_range] forall self: MutBorrow.t t_Range. forall result: t_Option. match result with
            | C_None -> completed self
            | C_Some v -> produces self.current (Seq.singleton v) self.final
            end
        -> match result with
          | C_None -> completed self
          | C_Some v -> produces self.current (Seq.singleton v) self.final
          end
end
module M_01_range__qyi16572111325853806140__produces_refl__refines [#"01_range.rs" 35 4 35 26] (* <Range as common::Iterator> *)
  let%span s01_range = "01_range.rs" 35 4 35 26
  let%span s01_range'0 = "01_range.rs" 25 12 29 46
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  
  use creusot.int.Int64
  use seq.Seq
  use mach.int.Int
  
  type t_Range = { t_Range__start: Int64.t; t_Range__end: Int64.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: Int64.t) (o: Int64.t) : t_Ordering = [%#sord'12] if Int64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: Int64.t) (y: Int64.t) : ()
  
  axiom eq_cmp_spec: forall x: Int64.t, y: Int64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym2_spec: forall x: Int64.t, y: Int64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: Int64.t) (y: Int64.t) : ()
  
  axiom antisym1_spec: forall x: Int64.t, y: Int64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: Int64.t) (y: Int64.t) (z: Int64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: Int64.t, y: Int64.t, z: Int64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: Int64.t) : ()
  
  axiom refl_spec: forall x: Int64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'2] Int64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'1] Int64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: Int64.t, y: Int64.t. [%#sord'0] Int64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: Int64.t) (y: Int64.t) : ()
  
  axiom cmp_le_log_spec: forall x: Int64.t, y: Int64.t. [%#sord] Int64.le x y = (cmp_log x y <> C_Greater)
  
  predicate produces [#"01_range.rs" 23 4 23 64] (self: t_Range) (visited: Seq.seq Int64.t) (o: t_Range) =
    [%#s01_range'0] self.t_Range__end = o.t_Range__end
    /\ Int64.le self.t_Range__start o.t_Range__start
    /\ (Seq.length visited > 0 -> Int64.le o.t_Range__start o.t_Range__end)
    /\ Seq.length visited = Int64.to_int o.t_Range__start - Int64.to_int self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> Int64.to_int (Seq.get visited i) = Int64.to_int self.t_Range__start + i)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s01_range] forall self: t_Range. forall result: (). produces self (Seq.empty: Seq.seq Int64.t) self
        -> produces self (Seq.empty: Seq.seq Int64.t) self
end
