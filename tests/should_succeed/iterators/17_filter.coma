module M_17_filter__qyi4935072013270782883__resolve_coherence [#"17_filter.rs" 14 9 14 16] (* <Filter<I, F> as creusot_contracts::Resolve> *)
  let%span s17_filter = "17_filter.rs" 14 9 14 16
  let%span s17_filter'0 = "17_filter.rs" 16 4 17 15
  
  type t_I
  
  type t_F
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  predicate resolve (_0 : t_F)
  
  predicate resolve'0 (_0 : t_I)
  
  predicate structural_resolve (_0 : t_Filter) =
    match _0 with
      | {t_Filter__iter = x0 ; t_Filter__func = x1} -> resolve x1 /\ resolve'0 x0
      end
  
  predicate resolve'1 [#"17_filter.rs" 14 9 14 16] (self : t_Filter) =
    [%#s17_filter'0] resolve'0 self.t_Filter__iter /\ resolve self.t_Filter__func
  
  constant self  : t_Filter
  
  function resolve_coherence [#"17_filter.rs" 14 9 14 16] (self'0 : t_Filter) : ()
  
  goal vc_resolve_coherence : ([%#s17_filter] structural_resolve self)  -> ([%#s17_filter] resolve'1 self)
end
module M_17_filter__qyi6180221713105948918__produces_refl [#"17_filter.rs" 52 4 52 26] (* <Filter<I, F> as common::Iterator> *)
  let%span s17_filter = "17_filter.rs" 51 14 51 45
  let%span s17_filter'0 = "17_filter.rs" 52 27 52 29
  let%span s17_filter'1 = "17_filter.rs" 65 12 77 17
  let%span s17_filter'2 = "17_filter.rs" 25 12 31 122
  let%span scommon = "common.rs" 14 14 14 45
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self : t_I) (visited : Seq.seq t_Item) (o : t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a : t_I) (ab : Seq.seq t_Item) (b : t_I) (bc : Seq.seq t_Item) (c : t_I) : ()
  
  
  axiom produces_trans_spec : forall a : t_I, ab : Seq.seq t_Item, b : t_I, bc : Seq.seq t_Item, c : t_I . ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self : t_I) : ()
  
  axiom produces_refl_spec : forall self : t_I . [%#scommon] produces self (Seq.empty : Seq.seq t_Item) self
  
  predicate precondition (self : t_F) (args : t_Item)
  
  predicate postcondition_once (self : t_F) (args : t_Item) (result : bool)
  
  predicate resolve (_0 : t_F)
  
  predicate postcondition_mut (self : t_F) (args : t_Item) (result_state : t_F) (result : bool)
  
  function fn_mut_once (self : t_F) (args : t_Item) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : t_F, args : t_Item, res : bool . [%#sops'5] postcondition_once self args res
  = (exists res_state : t_F . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self : t_F) (result_state : t_F)
  
  function hist_inv_trans (self : t_F) (b : t_F) (c : t_F) : ()
  
  axiom hist_inv_trans_spec : forall self : t_F, b : t_F, c : t_F . ([%#sops'2] hist_inv self b)
   -> ([%#sops'3] hist_inv b c)  -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self : t_F) : ()
  
  axiom hist_inv_refl_spec : forall self : t_F . [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self : t_F) (args : t_Item) (res_state : t_F) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : t_F, args : t_Item, res_state : t_F, res : bool . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] hist_inv self res_state)
  
  predicate invariant' [#"17_filter.rs" 22 4 22 30] (self : t_Filter) =
    [%#s17_filter'2] forall f : t_F, i : t_Item . precondition f i
    /\ (forall f'0 : t_F, g : t_F . hist_inv f'0 g  -> f'0 = g)
    /\ (forall f1 : t_F, f2 : t_F, i'0 : t_Item . not (postcondition_mut f1 i'0 f2 true
    /\ postcondition_mut f1 i'0 f2 false))
  
  predicate produces'0 [#"17_filter.rs" 63 4 63 67] (self : t_Filter) (visited : Seq.seq t_Item) (succ : t_Filter) =
    [%#s17_filter'1] invariant' self
     -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s : Seq.seq t_Item, f : Map.map int int . produces self.t_Filter__iter s succ.t_Filter__iter
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  constant self  : t_Filter
  
  function produces_refl'0 [#"17_filter.rs" 52 4 52 26] (self'0 : t_Filter) : ()
  
  goal vc_produces_refl : [%#s17_filter] produces'0 self (Seq.empty : Seq.seq t_Item) self
end
module M_17_filter__qyi6180221713105948918__produces_trans [#"17_filter.rs" 59 4 59 90] (* <Filter<I, F> as common::Iterator> *)
  let%span s17_filter = "17_filter.rs" 56 15 56 32
  let%span s17_filter'0 = "17_filter.rs" 57 15 57 32
  let%span s17_filter'1 = "17_filter.rs" 58 14 58 42
  let%span s17_filter'2 = "17_filter.rs" 59 91 59 93
  let%span s17_filter'3 = "17_filter.rs" 65 12 77 17
  let%span s17_filter'4 = "17_filter.rs" 25 12 31 122
  let%span scommon = "common.rs" 14 14 14 45
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self : t_I) (visited : Seq.seq t_Item) (o : t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a : t_I) (ab : Seq.seq t_Item) (b : t_I) (bc : Seq.seq t_Item) (c : t_I) : ()
  
  
  axiom produces_trans_spec : forall a : t_I, ab : Seq.seq t_Item, b : t_I, bc : Seq.seq t_Item, c : t_I . ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self : t_I) : ()
  
  axiom produces_refl_spec : forall self : t_I . [%#scommon] produces self (Seq.empty : Seq.seq t_Item) self
  
  predicate precondition (self : t_F) (args : t_Item)
  
  predicate postcondition_once (self : t_F) (args : t_Item) (result : bool)
  
  predicate resolve (_0 : t_F)
  
  predicate postcondition_mut (self : t_F) (args : t_Item) (result_state : t_F) (result : bool)
  
  function fn_mut_once (self : t_F) (args : t_Item) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : t_F, args : t_Item, res : bool . [%#sops'5] postcondition_once self args res
  = (exists res_state : t_F . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self : t_F) (result_state : t_F)
  
  function hist_inv_trans (self : t_F) (b : t_F) (c : t_F) : ()
  
  axiom hist_inv_trans_spec : forall self : t_F, b : t_F, c : t_F . ([%#sops'2] hist_inv self b)
   -> ([%#sops'3] hist_inv b c)  -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self : t_F) : ()
  
  axiom hist_inv_refl_spec : forall self : t_F . [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self : t_F) (args : t_Item) (res_state : t_F) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : t_F, args : t_Item, res_state : t_F, res : bool . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] hist_inv self res_state)
  
  predicate invariant' [#"17_filter.rs" 22 4 22 30] (self : t_Filter) =
    [%#s17_filter'4] forall f : t_F, i : t_Item . precondition f i
    /\ (forall f'0 : t_F, g : t_F . hist_inv f'0 g  -> f'0 = g)
    /\ (forall f1 : t_F, f2 : t_F, i'0 : t_Item . not (postcondition_mut f1 i'0 f2 true
    /\ postcondition_mut f1 i'0 f2 false))
  
  predicate produces'0 [#"17_filter.rs" 63 4 63 67] (self : t_Filter) (visited : Seq.seq t_Item) (succ : t_Filter) =
    [%#s17_filter'3] invariant' self
     -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s : Seq.seq t_Item, f : Map.map int int . produces self.t_Filter__iter s succ.t_Filter__iter
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  constant a  : t_Filter
  
  constant ab  : Seq.seq t_Item
  
  constant b  : t_Filter
  
  constant bc  : Seq.seq t_Item
  
  constant c  : t_Filter
  
  function produces_trans'0 [#"17_filter.rs" 59 4 59 90] (a'0 : t_Filter) (ab'0 : Seq.seq t_Item) (b'0 : t_Filter) (bc'0 : Seq.seq t_Item) (c'0 : t_Filter) : ()
  
  
  goal vc_produces_trans : ([%#s17_filter] produces'0 a ab b)
   -> ([%#s17_filter'0] produces'0 b bc c)  -> ([%#s17_filter'1] produces'0 a (Seq.(++) ab bc) c)
end
module M_17_filter__qyi6180221713105948918__next [#"17_filter.rs" 85 4 85 41] (* <Filter<I, F> as common::Iterator> *)
  let%span s17_filter = "17_filter.rs" 86 23 86 40
  let%span s17_filter'0 = "17_filter.rs" 87 27 87 51
  let%span s17_filter'1 = "17_filter.rs" 89 8 89 31
  let%span s17_filter'2 = "17_filter.rs" 91 20 91 129
  let%span s17_filter'3 = "17_filter.rs" 90 20 90 46
  let%span s17_filter'4 = "17_filter.rs" 89 20 89 29
  let%span s17_filter'5 = "17_filter.rs" 95 23 95 58
  let%span s17_filter'6 = "17_filter.rs" 96 12 96 71
  let%span s17_filter'7 = "17_filter.rs" 85 17 85 21
  let%span s17_filter'8 = "17_filter.rs" 85 26 85 41
  let%span s17_filter'9 = "17_filter.rs" 81 14 84 5
  let%span s17_filter'10 = "17_filter.rs" 43 12 45 43
  let%span s17_filter'11 = "17_filter.rs" 65 12 77 17
  let%span s17_filter'12 = "17_filter.rs" 25 12 31 122
  let%span scommon = "common.rs" 14 14 14 45
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 182 16 182 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 184 39 184 42
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 182 27 182 52
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 183 26 183 71
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'9 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 96 8 96 33
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinvariant'0 = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use seq.Seq
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use map.Map
  use creusot.prelude.Any
  
  type t_I
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self : t_I) (visited : Seq.seq t_Item) (o : t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a : t_I) (ab : Seq.seq t_Item) (b : t_I) (bc : Seq.seq t_Item) (c : t_I) : ()
  
  
  axiom produces_trans_spec : forall a : t_I, ab : Seq.seq t_Item, b : t_I, bc : Seq.seq t_Item, c : t_I . ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self : t_I) : ()
  
  axiom produces_refl_spec : forall self : t_I . [%#scommon] produces self (Seq.empty : Seq.seq t_Item) self
  
  type t_F
  
  predicate postcondition_once (self : t_F) (args : t_Item) (result : bool)
  
  predicate resolve (_0 : t_F)
  
  predicate postcondition_mut (self : t_F) (args : t_Item) (result_state : t_F) (result : bool)
  
  function fn_mut_once (self : t_F) (args : t_Item) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : t_F, args : t_Item, res : bool . [%#sops'9] postcondition_once self args res
  = (exists res_state : t_F . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self : t_F) (result_state : t_F)
  
  function hist_inv_trans (self : t_F) (b : t_F) (c : t_F) : ()
  
  axiom hist_inv_trans_spec : forall self : t_F, b : t_F, c : t_F . ([%#sops'6] hist_inv self b)
   -> ([%#sops'7] hist_inv b c)  -> ([%#sops'8] hist_inv self c)
  
  function hist_inv_refl (self : t_F) : ()
  
  axiom hist_inv_refl_spec : forall self : t_F . [%#sops'5] hist_inv self self
  
  function postcondition_mut_hist_inv (self : t_F) (args : t_Item) (res_state : t_F) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : t_F, args : t_Item, res_state : t_F, res : bool . ([%#sops'3] postcondition_mut self args res_state res)
   -> ([%#sops'4] hist_inv self res_state)
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  function index_logic [@inline:trivial] (self : Seq.seq t_Item) (ix : int) : t_Item =
    [%#sindex] Seq.get self ix
  
  predicate precondition (self : t_F) (args : t_Item)
  
  predicate invariant' [#"17_filter.rs" 22 4 22 30] (self : t_Filter) =
    [%#s17_filter'12] forall f : t_F, i : t_Item . precondition f i
    /\ (forall f'0 : t_F, g : t_F . hist_inv f'0 g  -> f'0 = g)
    /\ (forall f1 : t_F, f2 : t_F, i'0 : t_Item . not (postcondition_mut f1 i'0 f2 true
    /\ postcondition_mut f1 i'0 f2 false))
  
  predicate inv (_0 : t_I)
  
  predicate inv'0 (_0 : t_F)
  
  predicate inv'1 (_0 : t_Filter)
  
  axiom inv_axiom [@rewrite] : forall x : t_Filter [inv'1 x] . inv'1 x
  = (invariant' x
  /\ match x with
    | {t_Filter__iter = iter ; t_Filter__func = func} -> inv iter /\ inv'0 func
    end)
  
  predicate invariant''0 (self : MutBorrow.t t_Filter) =
    [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_0 : MutBorrow.t t_Filter)
  
  axiom inv_axiom'0 [@rewrite] : forall x : MutBorrow.t t_Filter [inv'2 x] . inv'2 x = invariant''0 x
  
  type t_Option  =
    | C_None
    | C_Some t_Item
  
  predicate invariant''1 (self : MutBorrow.t t_I) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'3 (_0 : MutBorrow.t t_I)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_I [inv'3 x] . inv'3 x = invariant''1 x
  
  predicate precondition'0 (self : ()) (args : MutBorrow.t t_I)
  
  axiom precondition_fndef : forall args : MutBorrow.t t_I [precondition'0 () args] . (let self = args in inv'3 self)
   -> precondition'0 () args
  
  predicate completed [#"common.rs" 11 4 11 36] (self : MutBorrow.t t_I)
  
  predicate inv'4 (_0 : t_Item)
  
  predicate inv'5 (_0 : t_Option)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option [inv'5 x] . inv'5 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'4 a_0
    end
  
  predicate postcondition_once'0 (self : ()) (args : MutBorrow.t t_I) (result : t_Option)
  
  axiom postcondition_fndef : forall args : MutBorrow.t t_I, res : t_Option [postcondition_once'0 () args res] . postcondition_once'0 () args res
   -> (let self = args in match res with
    | C_None -> completed self
    | C_Some v -> produces self.current (Seq.singleton v) self.final
    end
  /\ inv'5 res)
  
  let rec next (self:MutBorrow.t t_I) (return'  (x:t_Option))= {[@expl:next requires] precondition'0 () self}
    any [ return''0 (result:t_Option)-> {postcondition_once'0 () self result} (! return' {result}) ] 
  
  let rec v_Some (input:t_Option) (ret  (field_0:t_Item))= any
    [ good (field_0:t_Item)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Item [C_Some field_0 : t_Option] . C_Some field_0 <> input} (! {false} any) ]
  
  
  predicate invariant''2 (self : MutBorrow.t t_F) =
    [%#sinvariant] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'6 (_0 : MutBorrow.t t_F)
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t t_F [inv'6 x] . inv'6 x = invariant''2 x
  
  predicate invariant''3 (self : t_Item) =
    [%#sinvariant'0] inv'4 self
  
  predicate inv'7 (_0 : t_Item)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Item [inv'7 x] . inv'7 x = invariant''3 x
  
  predicate inv'8 (_0 : t_Item)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item [inv'8 x] . inv'8 x = (let x0 = x in inv'7 x0)
  
  let rec call_mut (self_:MutBorrow.t t_F) (arg:t_Item) (return'  (x:bool))= {[@expl:call_mut 'self_' type invariant] [%#sops] inv'6 self_}
    {[@expl:call_mut 'arg' type invariant] [%#sops'0] inv'8 arg}
    {[@expl:call_mut requires] [%#sops'1] precondition self_.current arg}
    any
    [ return''0 (result:bool)-> {[%#sops'2] postcondition_mut self_.current arg self_.final result}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_0 : t_Item)
  
  predicate resolve'1 (self : MutBorrow.t t_Filter) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0 : MutBorrow.t t_Filter) =
    resolve'1 _0
  
  predicate completed'0 [#"17_filter.rs" 41 4 41 35] (self : MutBorrow.t t_Filter) =
    [%#s17_filter'10] (exists s : Seq.seq t_Item, e : MutBorrow.t t_I . produces (self.current).t_Filter__iter s e.current
    /\ completed e
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut (self.current).t_Filter__func (Seq.get s i) (self.final).t_Filter__func false))
    /\ (self.current).t_Filter__func = (self.final).t_Filter__func
  
  predicate produces'0 [#"17_filter.rs" 63 4 63 67] (self : t_Filter) (visited : Seq.seq t_Item) (succ : t_Filter) =
    [%#s17_filter'11] invariant' self
     -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s : Seq.seq t_Item, f : Map.map int int . produces self.t_Filter__iter s succ.t_Filter__iter
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  meta "compute_max_steps" 1000000
  
  let rec next'0[#"17_filter.rs" 85 4 85 41] (self:MutBorrow.t t_Filter) (return'  (x:t_Option))= {[@expl:next 'self' type invariant] [%#s17_filter'7] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#s17_filter] self'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &produced <- [%#s17_filter'0] Seq.empty : Seq.seq t_Item ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &old_3_0 <- self'0 ] s1 | s1 = bb3 ] 
    | bb3 = bb3'0
      [ bb3'0 = {[@expl:mut invariant] old_3_0.final = self'0.final}
        {[@expl:loop invariant #0] [%#s17_filter'4] inv'2 self'0}
        {[@expl:loop invariant #1] [%#s17_filter'3] (self'0.current).t_Filter__func = (old_self.current).t_Filter__func}
        {[@expl:loop invariant #2] [%#s17_filter'2] forall i : int . 0 <= i /\ i < Seq.length produced
         -> postcondition_mut (self'0.current).t_Filter__func (index_logic produced i) (self'0.current).t_Filter__func false}
        {[@expl:loop invariant #3] [%#s17_filter'1] produces (old_self.current).t_Filter__iter produced (self'0.current).t_Filter__iter}
        {[@expl:loop invariant #4] [%#s17_filter'1] hist_inv (old_self.current).t_Filter__func (self'0.current).t_Filter__func}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0
          [ s0 = {inv (self'0.current).t_Filter__iter}
            MutBorrow.borrow_mut <t_I> {(self'0.current).t_Filter__iter}
              (fun (_ret:MutBorrow.t t_I) ->
                 [ &_16 <- _ret ] 
                -{inv _ret.final}-
                 [ &self'0 <- { self'0 with current = { self'0.current with t_Filter__iter = _ret.final } } ] 
                s1)
          | s1 = next {_16} (fun (_ret:t_Option) ->  [ &_15 <- _ret ] s2)
          | s2 = bb5 ]
        
        | bb5 = any [ br0 -> {_15 = C_None} (! bb13) | br1 (x0:t_Item)-> {_15 = C_Some x0} (! bb6) ] 
        | bb6 = bb7
        | bb7 = s0
          [ s0 = v_Some {_15} (fun (r0:t_Item) ->  [ &n <- r0 ] s1)
          | s1 =  [ &_19 <- [%#s17_filter'5] Seq.snoc produced n ] s2
          | s2 = bb8 ]
        
        | bb8 = s0
          [ s0 =  [ &produced <- _19 ] s1
          | s1 = {[@expl:assertion] [%#s17_filter'6] produces (old_self.current).t_Filter__iter produced (self'0.current).t_Filter__iter}
            s2
          | s2 = {inv'0 (self'0.current).t_Filter__func}
            MutBorrow.borrow_mut <t_F> {(self'0.current).t_Filter__func}
              (fun (_ret:MutBorrow.t t_F) ->
                 [ &_24 <- _ret ] 
                -{inv'0 _ret.final}-
                 [ &self'0 <- { self'0 with current = { self'0.current with t_Filter__func = _ret.final } } ] 
                s3)
          | s3 =  [ &_27 <- n ] s4
          | s4 =  [ &_25 <- _27 ] s5
          | s5 = call_mut {_24} {_25} (fun (_ret:bool) ->  [ &_23 <- _ret ] s6)
          | s6 = bb9 ]
        
        | bb9 = any [ br0 -> {_23 = false} (! bb12) | br1 -> {_23} (! bb10) ] 
        | bb12 = s0 [ s0 = {[@expl:type invariant] inv'4 n} s1 | s1 = -{resolve'0 n}- s2 | s2 = bb14 ] 
        | bb14 = bb15
        | bb15 = bb3'0 ]
       ]
    
    | bb13 = s0
      [ s0 = {[@expl:type invariant] match _15 with
          | C_Some x -> inv'4 x
          | _ -> true
          end}
        s1
      | s1 = -{match _15 with
          | C_Some x -> resolve'0 x
          | _ -> true
          end}-
        s2
      | s2 = {[@expl:type invariant] inv'2 self'0} s3
      | s3 = -{resolve'2 self'0}- s4
      | s4 = bb16 ]
    
    | bb16 = s0 [ s0 =  [ &_0 <- C_None ] s1 | s1 = bb19 ] 
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'2 self'0} s1
      | s1 = -{resolve'2 self'0}- s2
      | s2 =  [ &_0 <- C_Some n ] s3
      | s3 = bb11 ]
    
    | bb11 = bb17
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = return''0 {_0} ]
    )
    [ & _0 : t_Option = Any.any_l ()
    | & self'0 : MutBorrow.t t_Filter = self
    | & old_self : MutBorrow.t t_Filter = Any.any_l ()
    | & produced : Seq.seq t_Item = Any.any_l ()
    | & _15 : t_Option = Any.any_l ()
    | & _16 : MutBorrow.t t_I = Any.any_l ()
    | & n : t_Item = Any.any_l ()
    | & _19 : Seq.seq t_Item = Any.any_l ()
    | & _23 : bool = Any.any_l ()
    | & _24 : MutBorrow.t t_F = Any.any_l ()
    | & _25 : t_Item = Any.any_l ()
    | & _27 : t_Item = Any.any_l ()
    | & old_3_0 : MutBorrow.t t_Filter = Any.any_l () ]
    
    [ return''0 (result:t_Option)-> {[@expl:next result type invariant] [%#s17_filter'8] inv'5 result}
      {[@expl:next ensures] [%#s17_filter'9] match result with
        | C_None -> completed'0 self
        | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]

end
module M_17_filter__filter [#"17_filter.rs" 111 0 113 39]
  let%span s17_filter = "17_filter.rs" 111 30 111 34
  let%span s17_filter'0 = "17_filter.rs" 111 39 111 40
  let%span s17_filter'1 = "17_filter.rs" 107 11 107 23
  let%span s17_filter'2 = "17_filter.rs" 108 11 108 29
  let%span s17_filter'3 = "17_filter.rs" 109 11 109 21
  let%span s17_filter'4 = "17_filter.rs" 111 48 111 60
  let%span s17_filter'5 = "17_filter.rs" 110 10 110 49
  let%span s17_filter'6 = "17_filter.rs" 138 16 138 61
  let%span s17_filter'7 = "17_filter.rs" 132 16 132 57
  let%span s17_filter'8 = "17_filter.rs" 144 16 144 126
  let%span s17_filter'9 = "17_filter.rs" 25 12 31 122
  let%span scommon = "common.rs" 14 14 14 45
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use seq.Seq
  use creusot.prelude.Any
  
  type t_I
  
  type t_P
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_P }
  
  predicate inv (_0 : t_I)
  
  predicate inv'0 (_0 : t_P)
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self : t_I) (visited : Seq.seq t_Item) (o : t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a : t_I) (ab : Seq.seq t_Item) (b : t_I) (bc : Seq.seq t_Item) (c : t_I) : ()
  
  
  axiom produces_trans_spec : forall a : t_I, ab : Seq.seq t_Item, b : t_I, bc : Seq.seq t_Item, c : t_I . ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self : t_I) : ()
  
  axiom produces_refl_spec : forall self : t_I . [%#scommon] produces self (Seq.empty : Seq.seq t_Item) self
  
  predicate postcondition_once (self : t_P) (args : t_Item) (result : bool)
  
  predicate resolve (_0 : t_P)
  
  predicate postcondition_mut (self : t_P) (args : t_Item) (result_state : t_P) (result : bool)
  
  function fn_mut_once (self : t_P) (args : t_Item) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : t_P, args : t_Item, res : bool . [%#sops'5] postcondition_once self args res
  = (exists res_state : t_P . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self : t_P) (result_state : t_P)
  
  function hist_inv_trans (self : t_P) (b : t_P) (c : t_P) : ()
  
  axiom hist_inv_trans_spec : forall self : t_P, b : t_P, c : t_P . ([%#sops'2] hist_inv self b)
   -> ([%#sops'3] hist_inv b c)  -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self : t_P) : ()
  
  axiom hist_inv_refl_spec : forall self : t_P . [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self : t_P) (args : t_Item) (res_state : t_P) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : t_P, args : t_Item, res_state : t_P, res : bool . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] hist_inv self res_state)
  
  predicate immutable [#"17_filter.rs" 137 0 137 54] (_0 : t_P) =
    [%#s17_filter'6] forall f : t_P, g : t_P . hist_inv f g  -> f = g
  
  predicate precondition (self : t_P) (args : t_Item)
  
  predicate no_precondition [#"17_filter.rs" 131 0 131 60] (_0 : t_P) =
    [%#s17_filter'7] forall f : t_P, i : t_Item . precondition f i
  
  predicate precise [#"17_filter.rs" 143 0 143 52] (_0 : t_P) =
    [%#s17_filter'8] forall f1 : t_P, f2 : t_P, i : t_Item . not (postcondition_mut f1 i f2 true
    /\ postcondition_mut f1 i f2 false)
  
  predicate invariant' [#"17_filter.rs" 22 4 22 30] (self : t_Filter) =
    [%#s17_filter'9] forall f : t_P, i : t_Item . precondition f i
    /\ (forall f'0 : t_P, g : t_P . hist_inv f'0 g  -> f'0 = g)
    /\ (forall f1 : t_P, f2 : t_P, i'0 : t_Item . not (postcondition_mut f1 i'0 f2 true
    /\ postcondition_mut f1 i'0 f2 false))
  
  predicate inv'1 (_0 : t_Filter)
  
  axiom inv_axiom [@rewrite] : forall x : t_Filter [inv'1 x] . inv'1 x
  = (invariant' x
  /\ match x with
    | {t_Filter__iter = iter ; t_Filter__func = func} -> inv iter /\ inv'0 func
    end)
  
  meta "compute_max_steps" 1000000
  
  let rec filter[#"17_filter.rs" 111 0 113 39] (iter:t_I) (f:t_P) (return'  (x:t_Filter))= {[@expl:filter 'iter' type invariant] [%#s17_filter] inv iter}
    {[@expl:filter 'f' type invariant] [%#s17_filter'0] inv'0 f}
    {[@expl:filter requires #0] [%#s17_filter'1] immutable f}
    {[@expl:filter requires #1] [%#s17_filter'2] no_precondition f}
    {[@expl:filter requires #2] [%#s17_filter'3] precise f}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- { t_Filter__iter = iter'0; t_Filter__func = f'0 } ] s1 | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = return''0 {_0} ]
    ) [ & _0 : t_Filter = Any.any_l () | & iter'0 : t_I = iter | & f'0 : t_P = f ] 
    [ return''0 (result:t_Filter)-> {[@expl:filter result type invariant] [%#s17_filter'4] inv'1 result}
      {[@expl:filter ensures] [%#s17_filter'5] result.t_Filter__iter = iter /\ result.t_Filter__func = f}
      (! return' {result}) ]

end
module M_17_filter__less_than [#"17_filter.rs" 120 0 120 49]
  let%span s17_filter = "17_filter.rs" 118 10 118 70
  let%span s17_filter'0 = "17_filter.rs" 119 10 119 79
  let%span s17_filter'1 = "17_filter.rs" 123 22 123 40
  let%span s17_filter'2 = "17_filter.rs" 123 12 123 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 185 18 185 34
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 264 20 264 32
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 243 12 243 41
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 236 20 236 57
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 249 14 249 45
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 250 27 250 29
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 254 15 254 32
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 255 15 255 32
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 256 14 256 42
  let%span svec'9 = "../../../creusot-contracts/src/std/vec.rs" 257 73 257 75
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 131 27 131 47
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 132 27 132 53
  let%span siter'1 = "../../../creusot-contracts/src/std/iter.rs" 133 27 133 45
  let%span siter'2 = "../../../creusot-contracts/src/std/iter.rs" 134 26 134 69
  let%span siter'3 = "../../../creusot-contracts/src/std/iter.rs" 164 16 164 17
  let%span siter'4 = "../../../creusot-contracts/src/std/iter.rs" 164 26 165 120
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 362 20 362 77
  let%span sfilter = "../../../creusot-contracts/src/std/iter/filter.rs" 57 16 57 61
  let%span sfilter'0 = "../../../creusot-contracts/src/std/iter/filter.rs" 49 16 49 57
  let%span sfilter'1 = "../../../creusot-contracts/src/std/iter/filter.rs" 64 16 64 126
  let%span sfilter'2 = "../../../creusot-contracts/src/std/iter/filter.rs" 15 14 15 39
  let%span sfilter'3 = "../../../creusot-contracts/src/std/iter/filter.rs" 22 14 22 39
  let%span sfilter'4 = "../../../creusot-contracts/src/std/iter/filter.rs" 76 12 78 47
  let%span sfilter'5 = "../../../creusot-contracts/src/std/iter/filter.rs" 86 12 97 143
  let%span sfilter'6 = "../../../creusot-contracts/src/std/iter/filter.rs" 102 14 102 45
  let%span sfilter'7 = "../../../creusot-contracts/src/std/iter/filter.rs" 106 15 106 32
  let%span sfilter'8 = "../../../creusot-contracts/src/std/iter/filter.rs" 107 15 107 32
  let%span sfilter'9 = "../../../creusot-contracts/src/std/iter/filter.rs" 108 14 108 42
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  let%span smodel = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use map.Map
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_ManuallyDrop  =
    { t_ManuallyDrop__value: () }
  
  type t_IntoIter  =
    { t_IntoIter__buf: t_NonNull;
      t_IntoIter__phantom: ();
      t_IntoIter__cap: UInt64.t;
      t_IntoIter__alloc: t_ManuallyDrop;
      t_IntoIter__ptr: t_NonNull;
      t_IntoIter__end: Opaque.ptr }
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull'0; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec : forall self : t_Vec . [%#svec'0] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)
  
  function view'0 (self : t_IntoIter) : Seq.seq UInt32.t
  
  let rec into_iter (self_:t_Vec) (return'  (x:t_IntoIter))= any
    [ return''0 (result:t_IntoIter)-> {[%#svec] view self_ = view'0 result} (! return' {result}) ]
  
  
  type closure2  =
    { _0: UInt32.t }
  
  predicate resolve (self : MutBorrow.t closure2) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0'0 : MutBorrow.t closure2) =
    resolve _0'0
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self : UInt32.t) (o : UInt32.t) : t_Ordering =
    [%#sord'12] if UInt32.lt self o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering) : ()
  
  axiom trans_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering . ([%#sord'4] cmp_log x y = o)
   -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x : UInt32.t) : ()
  
  axiom refl_spec : forall x : UInt32.t . [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate postcondition_once (self : closure2) (args : UInt32.t) (result : bool) =
    [%#s17_filter'2] let i = args in result = UInt32.lt i self._0
  
  predicate resolve'1 (_0'0 : closure2) =
    true
  
  predicate hist_inv (self : closure2) (result_state : closure2) =
    [%#s17_filter'2] result_state._0 = self._0
  
  predicate postcondition_mut (self : closure2) (args : UInt32.t) (result_state : closure2) (result : bool) =
    [%#s17_filter'2] let i = args in result = UInt32.lt i result_state._0 /\ hist_inv self result_state
  
  function fn_mut_once (self : closure2) (args : UInt32.t) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : closure2, args : UInt32.t, res : bool . [%#sops'5] postcondition_once self args res
  = (exists res_state : closure2 . postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  function hist_inv_trans (self : closure2) (b : closure2) (c : closure2) : ()
  
  axiom hist_inv_trans_spec : forall self : closure2, b : closure2, c : closure2 . ([%#sops'2] hist_inv self b)
   -> ([%#sops'3] hist_inv b c)  -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self : closure2) : ()
  
  axiom hist_inv_refl_spec : forall self : closure2 . [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self : closure2) (args : UInt32.t) (res_state : closure2) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : closure2, args : UInt32.t, res_state : closure2, res : bool . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] hist_inv self res_state)
  
  let rec closure2[#"17_filter.rs" 123 12 123 42] (self:MutBorrow.t closure2) (i:UInt32.t) (return'  (x:bool))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 =  [ &res <- UInt32.lt i'0 (_1.current)._0 ] s2
      | s2 =  [ &_0'0 <- res ] s3
      | s3 = return''0 {_0'0} ]
     ]
    )
    [ & _0'0 : bool = Any.any_l ()
    | & _1 : MutBorrow.t closure2 = self
    | & i'0 : UInt32.t = i
    | & res : bool = Any.any_l () ]
    
    [ return''0 (result:bool)-> {[@expl:closure ensures] [%#s17_filter'1] result = UInt32.lt i (self.final)._0}
      {[@expl:closure hist_inv post] hist_inv self.current self.final}
      (! return' {result}) ]
  
  
  type t_Filter  =
    { t_Filter__iter: t_IntoIter; t_Filter__predicate: closure2 }
  
  predicate immutable (_0'0 : closure2) =
    [%#sfilter] forall f : closure2, g : closure2 . hist_inv f g  -> f = g
  
  predicate precondition (self : closure2) (args : UInt32.t) =
    [%#s17_filter'2] let i = args in true
  
  predicate no_precondition (_0'0 : closure2) =
    [%#sfilter'0] forall f : closure2, i : UInt32.t . precondition f i
  
  predicate precise (_0'0 : closure2) =
    [%#sfilter'1] forall f1 : closure2, f2 : closure2, i : UInt32.t . not (postcondition_mut f1 i f2 true
    /\ postcondition_mut f1 i f2 false)
  
  predicate invariant' (self : t_Filter)
  
  predicate inv (_0'0 : t_Filter)
  
  axiom inv_axiom [@rewrite] : forall x : t_Filter [inv x] . inv x
  = (invariant' x
  /\ match x with
    | {t_Filter__iter = iter ; t_Filter__predicate = predicate'} -> true
    end)
  
  predicate inv'0 (_0'0 : t_IntoIter)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_IntoIter [inv'0 x] . inv'0 x = true
  
  function iter (self : t_Filter) : t_IntoIter
  
  axiom iter_spec : forall self : t_Filter . [%#sfilter'2] inv self  -> inv'0 (iter self)
  
  predicate inv'1 (_0'0 : closure2)
  
  axiom inv_axiom'1 [@rewrite] : forall x : closure2 [inv'1 x] . inv'1 x = true
  
  function func (self : t_Filter) : closure2
  
  axiom func_spec : forall self : t_Filter . [%#sfilter'3] inv self  -> inv'1 (func self)
  
  let rec filter (self_:t_IntoIter) (f:closure2) (return'  (x:t_Filter))= {[@expl:filter requires #0] [%#siter] immutable f}
    {[@expl:filter requires #1] [%#siter'0] no_precondition f}
    {[@expl:filter requires #2] [%#siter'1] precise f}
    any
    [ return''0 (result:t_Filter)-> {inv result}
      {[%#siter'2] iter result = self_ /\ func result = f}
      (! return' {result}) ]
  
  
  predicate resolve'2 (_0'0 : t_Filter) =
    true
  
  predicate produces (self : t_IntoIter) (visited : Seq.seq UInt32.t) (rhs : t_IntoIter) =
    [%#svec'2] view'0 self = Seq.(++) visited (view'0 rhs)
  
  function produces_trans (a : t_IntoIter) (ab : Seq.seq UInt32.t) (b : t_IntoIter) (bc : Seq.seq UInt32.t) (c : t_IntoIter) : ()
  
   =
    [%#svec'9] ()
  
  axiom produces_trans_spec : forall a : t_IntoIter, ab : Seq.seq UInt32.t, b : t_IntoIter, bc : Seq.seq UInt32.t, c : t_IntoIter . ([%#svec'6] produces a ab b)
   -> ([%#svec'7] produces b bc c)  -> ([%#svec'8] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self : t_IntoIter) : () =
    [%#svec'5] ()
  
  axiom produces_refl_spec : forall self : t_IntoIter . [%#svec'4] produces self (Seq.empty : Seq.seq UInt32.t) self
  
  predicate produces'0 (self : t_Filter) (visited : Seq.seq UInt32.t) (succ : t_Filter) =
    [%#sfilter'5] invariant' self
     -> hist_inv (func self) (func succ)
    /\ (exists s : Seq.seq UInt32.t, f : Map.map int int . produces (iter self) s (iter succ)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
    /\ (forall i : int, j : int . 0 <= i /\ i < j /\ j < Seq.length visited  -> Map.get f i < Map.get f j)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut (func self) (Seq.get s i) (func self) true))
  
  function produces_trans'0 (a : t_Filter) (ab : Seq.seq UInt32.t) (b : t_Filter) (bc : Seq.seq UInt32.t) (c : t_Filter) : ()
  
  
  axiom produces_trans_spec'0 : forall a : t_Filter, ab : Seq.seq UInt32.t, b : t_Filter, bc : Seq.seq UInt32.t, c : t_Filter . ([%#sfilter'7] produces'0 a ab b)
   -> ([%#sfilter'8] produces'0 b bc c)  -> ([%#sfilter'9] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Filter) : ()
  
  axiom produces_refl_spec'0 : forall self : t_Filter . [%#sfilter'6] produces'0 self (Seq.empty : Seq.seq UInt32.t) self
  
  predicate resolve'3 (self : MutBorrow.t t_IntoIter) =
    [%#sresolve] self.final = self.current
  
  function view'1 (self : MutBorrow.t t_IntoIter) : Seq.seq UInt32.t =
    [%#smodel] view'0 self.current
  
  predicate completed (self : MutBorrow.t t_IntoIter) =
    [%#svec'3] resolve'3 self /\ view'1 self = (Seq.empty : Seq.seq UInt32.t)
  
  predicate completed'0 (self : MutBorrow.t t_Filter) =
    [%#sfilter'4] (exists s : Seq.seq UInt32.t, e : MutBorrow.t t_IntoIter . produces (iter self.current) s e.current
    /\ completed e
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut (func self.current) (Seq.get s i) (func self.final) false))
    /\ func self.current = func self.final
  
  predicate from_iter_post (prod : Seq.seq UInt32.t) (res : t_Vec) =
    [%#svec'1] prod = view res
  
  let rec collect (self_:t_Filter) (return'  (x:t_Vec))= {[@expl:collect 'self_' type invariant] [%#siter'3] inv self_}
    any
    [ return''0 (result:t_Vec)-> {[%#siter'4] exists done' : MutBorrow.t t_Filter, prod : Seq.seq UInt32.t . resolve'2 done'.final
      /\ completed'0 done' /\ produces'0 self_ prod done'.current /\ from_iter_post prod result}
      (! return' {result}) ]
  
  
  function index_logic [@inline:trivial] (self : t_Vec) (ix : int) : UInt32.t =
    [%#sindex] Seq.get (view self) ix
  
  predicate contains (self : Seq.seq UInt32.t) (x : UInt32.t) =
    [%#sseq] exists i : int . 0 <= i /\ i < Seq.length self /\ Seq.get self i = x
  
  meta "compute_max_steps" 1000000
  
  let rec less_than[#"17_filter.rs" 120 0 120 49] (v:t_Vec) (n:UInt32.t) (return'  (x:t_Vec))= (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = into_iter {v'0} (fun (_ret:t_IntoIter) ->  [ &_6 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_8 <- { _0 = n'0 } ] s1
      | s1 = filter {_6} {_8} (fun (_ret:t_Filter) ->  [ &_5 <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 = collect {_5} (fun (_ret:t_Vec) ->  [ &_0'0 <- _ret ] s1) | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = return''0 {_0'0} ]
    )
    [ & _0'0 : t_Vec = Any.any_l ()
    | & v'0 : t_Vec = v
    | & n'0 : UInt32.t = n
    | & _5 : t_Filter = Any.any_l ()
    | & _6 : t_IntoIter = Any.any_l ()
    | & _8 : closure2 = Any.any_l () ]
    
    [ return''0 (result:t_Vec)-> {[@expl:less_than ensures #0] [%#s17_filter] forall i : int . 0 <= i
      /\ i < Seq.length (view result)  -> UInt32.lt (index_logic result i) n}
      {[@expl:less_than ensures #1] [%#s17_filter'0] forall i : int . 0 <= i /\ i < Seq.length (view result)
       -> contains (view v) (index_logic result i)}
      (! return' {result}) ]

end
module M_17_filter__qyi4935072013270782883__resolve_coherence__refines [#"17_filter.rs" 14 9 14 16] (* <Filter<I, F> as creusot_contracts::Resolve> *)
  let%span s17_filter = "17_filter.rs" 14 9 14 16
  let%span s17_filter'0 = "17_filter.rs" 16 4 17 15
  let%span s17_filter'1 = "17_filter.rs" 25 12 31 122
  let%span scommon = "common.rs" 14 14 14 45
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use seq.Seq
  
  type t_I
  
  type t_F
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  predicate resolve (_0 : t_F)
  
  predicate resolve'0 (_0 : t_I)
  
  predicate structural_resolve (_0 : t_Filter) =
    match _0 with
      | {t_Filter__iter = x0 ; t_Filter__func = x1} -> resolve x1 /\ resolve'0 x0
      end
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self : t_I) (visited : Seq.seq t_Item) (o : t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a : t_I) (ab : Seq.seq t_Item) (b : t_I) (bc : Seq.seq t_Item) (c : t_I) : ()
  
  
  axiom produces_trans_spec : forall a : t_I, ab : Seq.seq t_Item, b : t_I, bc : Seq.seq t_Item, c : t_I . ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self : t_I) : ()
  
  axiom produces_refl_spec : forall self : t_I . [%#scommon] produces self (Seq.empty : Seq.seq t_Item) self
  
  predicate precondition (self : t_F) (args : t_Item)
  
  predicate postcondition_once (self : t_F) (args : t_Item) (result : bool)
  
  predicate postcondition_mut (self : t_F) (args : t_Item) (result_state : t_F) (result : bool)
  
  function fn_mut_once (self : t_F) (args : t_Item) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : t_F, args : t_Item, res : bool . [%#sops'5] postcondition_once self args res
  = (exists res_state : t_F . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self : t_F) (result_state : t_F)
  
  function hist_inv_trans (self : t_F) (b : t_F) (c : t_F) : ()
  
  axiom hist_inv_trans_spec : forall self : t_F, b : t_F, c : t_F . ([%#sops'2] hist_inv self b)
   -> ([%#sops'3] hist_inv b c)  -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self : t_F) : ()
  
  axiom hist_inv_refl_spec : forall self : t_F . [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self : t_F) (args : t_Item) (res_state : t_F) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : t_F, args : t_Item, res_state : t_F, res : bool . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] hist_inv self res_state)
  
  predicate invariant' [#"17_filter.rs" 22 4 22 30] (self : t_Filter) =
    [%#s17_filter'1] forall f : t_F, i : t_Item . precondition f i
    /\ (forall f'0 : t_F, g : t_F . hist_inv f'0 g  -> f'0 = g)
    /\ (forall f1 : t_F, f2 : t_F, i'0 : t_Item . not (postcondition_mut f1 i'0 f2 true
    /\ postcondition_mut f1 i'0 f2 false))
  
  predicate inv (_0 : t_I)
  
  predicate inv'0 (_0 : t_F)
  
  predicate inv'1 (_0 : t_Filter)
  
  axiom inv_axiom [@rewrite] : forall x : t_Filter [inv'1 x] . inv'1 x
  = (invariant' x
  /\ match x with
    | {t_Filter__iter = iter ; t_Filter__func = func} -> inv iter /\ inv'0 func
    end)
  
  predicate invariant''0 (self : t_Filter) =
    [%#sinvariant] inv'1 self
  
  predicate inv'2 (_0 : t_Filter)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Filter [inv'2 x] . inv'2 x = invariant''0 x
  
  predicate resolve'1 [#"17_filter.rs" 14 9 14 16] (self : t_Filter) =
    [%#s17_filter'0] resolve'0 self.t_Filter__iter /\ resolve self.t_Filter__func
  
  goal refines : [%#s17_filter] forall self : t_Filter . structural_resolve self /\ inv'2 self
   -> structural_resolve self /\ (forall result : () . resolve'1 self  -> resolve'1 self)
end
module M_17_filter__qyi6180221713105948918__next__refines [#"17_filter.rs" 85 4 85 41] (* <Filter<I, F> as common::Iterator> *)
  let%span s17_filter = "17_filter.rs" 85 4 85 41
  let%span s17_filter'0 = "17_filter.rs" 43 12 45 43
  let%span s17_filter'1 = "17_filter.rs" 65 12 77 17
  let%span s17_filter'2 = "17_filter.rs" 25 12 31 122
  let%span scommon = "common.rs" 14 14 14 45
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self : t_I) (visited : Seq.seq t_Item) (o : t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a : t_I) (ab : Seq.seq t_Item) (b : t_I) (bc : Seq.seq t_Item) (c : t_I) : ()
  
  
  axiom produces_trans_spec : forall a : t_I, ab : Seq.seq t_Item, b : t_I, bc : Seq.seq t_Item, c : t_I . ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self : t_I) : ()
  
  axiom produces_refl_spec : forall self : t_I . [%#scommon] produces self (Seq.empty : Seq.seq t_Item) self
  
  predicate precondition (self : t_F) (args : t_Item)
  
  predicate postcondition_once (self : t_F) (args : t_Item) (result : bool)
  
  predicate resolve (_0 : t_F)
  
  predicate postcondition_mut (self : t_F) (args : t_Item) (result_state : t_F) (result : bool)
  
  function fn_mut_once (self : t_F) (args : t_Item) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : t_F, args : t_Item, res : bool . [%#sops'5] postcondition_once self args res
  = (exists res_state : t_F . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self : t_F) (result_state : t_F)
  
  function hist_inv_trans (self : t_F) (b : t_F) (c : t_F) : ()
  
  axiom hist_inv_trans_spec : forall self : t_F, b : t_F, c : t_F . ([%#sops'2] hist_inv self b)
   -> ([%#sops'3] hist_inv b c)  -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self : t_F) : ()
  
  axiom hist_inv_refl_spec : forall self : t_F . [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self : t_F) (args : t_Item) (res_state : t_F) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : t_F, args : t_Item, res_state : t_F, res : bool . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] hist_inv self res_state)
  
  predicate invariant' [#"17_filter.rs" 22 4 22 30] (self : t_Filter) =
    [%#s17_filter'2] forall f : t_F, i : t_Item . precondition f i
    /\ (forall f'0 : t_F, g : t_F . hist_inv f'0 g  -> f'0 = g)
    /\ (forall f1 : t_F, f2 : t_F, i'0 : t_Item . not (postcondition_mut f1 i'0 f2 true
    /\ postcondition_mut f1 i'0 f2 false))
  
  predicate inv (_0 : t_I)
  
  predicate inv'0 (_0 : t_F)
  
  predicate inv'1 (_0 : t_Filter)
  
  axiom inv_axiom [@rewrite] : forall x : t_Filter [inv'1 x] . inv'1 x
  = (invariant' x
  /\ match x with
    | {t_Filter__iter = iter ; t_Filter__func = func} -> inv iter /\ inv'0 func
    end)
  
  predicate invariant''0 (self : MutBorrow.t t_Filter) =
    [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_0 : MutBorrow.t t_Filter)
  
  axiom inv_axiom'0 [@rewrite] : forall x : MutBorrow.t t_Filter [inv'2 x] . inv'2 x = invariant''0 x
  
  type t_Option  =
    | C_None
    | C_Some t_Item
  
  predicate completed [#"common.rs" 11 4 11 36] (self : MutBorrow.t t_I)
  
  predicate completed'0 [#"17_filter.rs" 41 4 41 35] (self : MutBorrow.t t_Filter) =
    [%#s17_filter'0] (exists s : Seq.seq t_Item, e : MutBorrow.t t_I . produces (self.current).t_Filter__iter s e.current
    /\ completed e
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut (self.current).t_Filter__func (Seq.get s i) (self.final).t_Filter__func false))
    /\ (self.current).t_Filter__func = (self.final).t_Filter__func
  
  predicate produces'0 [#"17_filter.rs" 63 4 63 67] (self : t_Filter) (visited : Seq.seq t_Item) (succ : t_Filter) =
    [%#s17_filter'1] invariant' self
     -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s : Seq.seq t_Item, f : Map.map int int . produces self.t_Filter__iter s succ.t_Filter__iter
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  predicate inv'3 (_0 : t_Item)
  
  predicate inv'4 (_0 : t_Option)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option [inv'4 x] . inv'4 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'3 a_0
    end
  
  goal refines : [%#s17_filter] forall self : MutBorrow.t t_Filter . inv'2 self
   -> inv'2 self
  /\ (forall result : t_Option . match result with
    | C_None -> completed'0 self
    | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'4 result
   -> match result with
    | C_None -> completed'0 self
    | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'4 result)
end
module M_17_filter__qyi6180221713105948918__produces_refl__refines [#"17_filter.rs" 52 4 52 26] (* <Filter<I, F> as common::Iterator> *)
  let%span s17_filter = "17_filter.rs" 52 4 52 26
  let%span s17_filter'0 = "17_filter.rs" 65 12 77 17
  let%span s17_filter'1 = "17_filter.rs" 25 12 31 122
  let%span scommon = "common.rs" 14 14 14 45
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self : t_I) (visited : Seq.seq t_Item) (o : t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a : t_I) (ab : Seq.seq t_Item) (b : t_I) (bc : Seq.seq t_Item) (c : t_I) : ()
  
  
  axiom produces_trans_spec : forall a : t_I, ab : Seq.seq t_Item, b : t_I, bc : Seq.seq t_Item, c : t_I . ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self : t_I) : ()
  
  axiom produces_refl_spec : forall self : t_I . [%#scommon] produces self (Seq.empty : Seq.seq t_Item) self
  
  predicate precondition (self : t_F) (args : t_Item)
  
  predicate postcondition_once (self : t_F) (args : t_Item) (result : bool)
  
  predicate resolve (_0 : t_F)
  
  predicate postcondition_mut (self : t_F) (args : t_Item) (result_state : t_F) (result : bool)
  
  function fn_mut_once (self : t_F) (args : t_Item) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : t_F, args : t_Item, res : bool . [%#sops'5] postcondition_once self args res
  = (exists res_state : t_F . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self : t_F) (result_state : t_F)
  
  function hist_inv_trans (self : t_F) (b : t_F) (c : t_F) : ()
  
  axiom hist_inv_trans_spec : forall self : t_F, b : t_F, c : t_F . ([%#sops'2] hist_inv self b)
   -> ([%#sops'3] hist_inv b c)  -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self : t_F) : ()
  
  axiom hist_inv_refl_spec : forall self : t_F . [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self : t_F) (args : t_Item) (res_state : t_F) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : t_F, args : t_Item, res_state : t_F, res : bool . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] hist_inv self res_state)
  
  predicate invariant' [#"17_filter.rs" 22 4 22 30] (self : t_Filter) =
    [%#s17_filter'1] forall f : t_F, i : t_Item . precondition f i
    /\ (forall f'0 : t_F, g : t_F . hist_inv f'0 g  -> f'0 = g)
    /\ (forall f1 : t_F, f2 : t_F, i'0 : t_Item . not (postcondition_mut f1 i'0 f2 true
    /\ postcondition_mut f1 i'0 f2 false))
  
  predicate produces'0 [#"17_filter.rs" 63 4 63 67] (self : t_Filter) (visited : Seq.seq t_Item) (succ : t_Filter) =
    [%#s17_filter'0] invariant' self
     -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s : Seq.seq t_Item, f : Map.map int int . produces self.t_Filter__iter s succ.t_Filter__iter
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  goal refines : [%#s17_filter] forall self : t_Filter . forall result : () . produces'0 self (Seq.empty : Seq.seq t_Item) self
   -> produces'0 self (Seq.empty : Seq.seq t_Item) self
end
module M_17_filter__qyi6180221713105948918__produces_trans__refines [#"17_filter.rs" 59 4 59 90] (* <Filter<I, F> as common::Iterator> *)
  let%span s17_filter = "17_filter.rs" 59 4 59 90
  let%span s17_filter'0 = "17_filter.rs" 65 12 77 17
  let%span s17_filter'1 = "17_filter.rs" 25 12 31 122
  let%span scommon = "common.rs" 14 14 14 45
  let%span scommon'0 = "common.rs" 18 15 18 32
  let%span scommon'1 = "common.rs" 19 15 19 32
  let%span scommon'2 = "common.rs" 20 14 20 42
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter  =
    { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces [#"common.rs" 8 4 8 65] (self : t_I) (visited : Seq.seq t_Item) (o : t_I)
  
  function produces_trans [#"common.rs" 21 4 21 91] (a : t_I) (ab : Seq.seq t_Item) (b : t_I) (bc : Seq.seq t_Item) (c : t_I) : ()
  
  
  axiom produces_trans_spec : forall a : t_I, ab : Seq.seq t_Item, b : t_I, bc : Seq.seq t_Item, c : t_I . ([%#scommon'0] produces a ab b)
   -> ([%#scommon'1] produces b bc c)  -> ([%#scommon'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl [#"common.rs" 15 4 15 27] (self : t_I) : ()
  
  axiom produces_refl_spec : forall self : t_I . [%#scommon] produces self (Seq.empty : Seq.seq t_Item) self
  
  predicate precondition (self : t_F) (args : t_Item)
  
  predicate postcondition_once (self : t_F) (args : t_Item) (result : bool)
  
  predicate resolve (_0 : t_F)
  
  predicate postcondition_mut (self : t_F) (args : t_Item) (result_state : t_F) (result : bool)
  
  function fn_mut_once (self : t_F) (args : t_Item) (res : bool) : ()
  
  axiom fn_mut_once_spec : forall self : t_F, args : t_Item, res : bool . [%#sops'5] postcondition_once self args res
  = (exists res_state : t_F . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self : t_F) (result_state : t_F)
  
  function hist_inv_trans (self : t_F) (b : t_F) (c : t_F) : ()
  
  axiom hist_inv_trans_spec : forall self : t_F, b : t_F, c : t_F . ([%#sops'2] hist_inv self b)
   -> ([%#sops'3] hist_inv b c)  -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self : t_F) : ()
  
  axiom hist_inv_refl_spec : forall self : t_F . [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self : t_F) (args : t_Item) (res_state : t_F) (res : bool) : ()
  
  axiom postcondition_mut_hist_inv_spec : forall self : t_F, args : t_Item, res_state : t_F, res : bool . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] hist_inv self res_state)
  
  predicate invariant' [#"17_filter.rs" 22 4 22 30] (self : t_Filter) =
    [%#s17_filter'1] forall f : t_F, i : t_Item . precondition f i
    /\ (forall f'0 : t_F, g : t_F . hist_inv f'0 g  -> f'0 = g)
    /\ (forall f1 : t_F, f2 : t_F, i'0 : t_Item . not (postcondition_mut f1 i'0 f2 true
    /\ postcondition_mut f1 i'0 f2 false))
  
  predicate produces'0 [#"17_filter.rs" 63 4 63 67] (self : t_Filter) (visited : Seq.seq t_Item) (succ : t_Filter) =
    [%#s17_filter'0] invariant' self
     -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s : Seq.seq t_Item, f : Map.map int int . produces self.t_Filter__iter s succ.t_Filter__iter
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited
     -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  goal refines : [%#s17_filter] forall a : t_Filter . forall ab : Seq.seq t_Item . forall b : t_Filter . forall bc : Seq.seq t_Item . forall c : t_Filter . produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
