module M_17_filter__qyi4935072013270782883__resolve_coherence (* <Filter<I, F> as creusot_contracts::Resolve> *)
  type t_I
  
  type t_F
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  predicate resolve (_1: t_F)
  
  predicate resolve'0 (_1: t_I)
  
  predicate structural_resolve (_1: t_Filter) =
    match _1 with
      | {t_Filter__iter = x0; t_Filter__func = x1} -> resolve x1 /\ resolve'0 x0
      end
  
  predicate resolve'1 (self: t_Filter) = resolve'0 self.t_Filter__iter /\ resolve self.t_Filter__func
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Filter
  
  function resolve_coherence (self: t_Filter) : ()
  
  goal vc_resolve_coherence: structural_resolve self -> ([@expl:resolve_coherence ensures] resolve'1 self)
end
module M_17_filter__qyi6180221713105948918__produces_refl (* <Filter<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate precondition (self: t_F) (args: t_Item)
  
  predicate postcondition_once (self: t_F) (args: t_Item) (result: bool)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_Item) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: t_Item) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_Item, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_Item) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate invariant' (self: t_Filter) =
    forall f: t_F, i: t_Item. precondition f i
      /\ (forall f'0: t_F, g: t_F. hist_inv f'0 g -> f'0 = g)
      /\ (forall f1: t_F, f2: t_F, i'0: t_Item. not (postcondition_mut f1 i'0 f2 true
        /\ postcondition_mut f1 i'0 f2 false))
  
  predicate produces'0 (self: t_Filter) (visited: Seq.seq t_Item) (succ: t_Filter) =
    invariant' self
    -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s: Seq.seq t_Item, f: Map.map int int. produces self.t_Filter__iter s succ.t_Filter__iter
      /\ (forall i: int, j: int. 0 <= i /\ i <= j /\ j < Seq.length visited
          -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
      /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> Seq.get visited i = Seq.get s (Map.get f i))
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> (exists j: int. 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
        = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Filter
  
  function produces_refl'0 (self: t_Filter) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_17_filter__qyi6180221713105948918__produces_trans (* <Filter<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate precondition (self: t_F) (args: t_Item)
  
  predicate postcondition_once (self: t_F) (args: t_Item) (result: bool)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_Item) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: t_Item) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_Item, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_Item) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate invariant' (self: t_Filter) =
    forall f: t_F, i: t_Item. precondition f i
      /\ (forall f'0: t_F, g: t_F. hist_inv f'0 g -> f'0 = g)
      /\ (forall f1: t_F, f2: t_F, i'0: t_Item. not (postcondition_mut f1 i'0 f2 true
        /\ postcondition_mut f1 i'0 f2 false))
  
  predicate produces'0 (self: t_Filter) (visited: Seq.seq t_Item) (succ: t_Filter) =
    invariant' self
    -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s: Seq.seq t_Item, f: Map.map int int. produces self.t_Filter__iter s succ.t_Filter__iter
      /\ (forall i: int, j: int. 0 <= i /\ i <= j /\ j < Seq.length visited
          -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
      /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> Seq.get visited i = Seq.get s (Map.get f i))
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> (exists j: int. 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
        = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Filter
  
  constant ab : Seq.seq t_Item
  
  constant b : t_Filter
  
  constant bc : Seq.seq t_Item
  
  constant c : t_Filter
  
  function produces_trans'0 (a: t_Filter) (ab: Seq.seq t_Item) (b: t_Filter) (bc: Seq.seq t_Item) (c: t_Filter) : ()
  
  goal vc_produces_trans: produces'0 a ab b
    -> produces'0 b bc c -> ([@expl:produces_trans ensures] produces'0 a (Seq.(++) ab bc) c)
end
module M_17_filter__qyi6180221713105948918__next (* <Filter<I, F> as common::Iterator> *)
  use seq.Seq
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  use map.Map
  
  type t_I
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_F
  
  predicate postcondition_once (self: t_F) (args: t_Item) (result: bool)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_Item) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: t_Item) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_Item, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_Item) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  predicate precondition (self: t_F) (args: t_Item)
  
  predicate invariant' (self: t_Filter) =
    forall f: t_F, i: t_Item. precondition f i
      /\ (forall f'0: t_F, g: t_F. hist_inv f'0 g -> f'0 = g)
      /\ (forall f1: t_F, f2: t_F, i'0: t_Item. not (postcondition_mut f1 i'0 f2 true
        /\ postcondition_mut f1 i'0 f2 false))
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_F)
  
  predicate inv'1 (_1: t_Filter)
  
  axiom inv_axiom [@rewrite]: forall x: t_Filter [inv'1 x]. inv'1 x
      = (invariant' x
      /\ match x with
        | {t_Filter__iter = iter; t_Filter__func = func} -> inv iter /\ inv'0 func
        end)
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_Filter) = inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 (_1: MutBorrow.t t_Filter)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Filter [inv'2 x]. inv'2 x = invariant''0 x
  
  type t_Option = C_None | C_Some t_Item
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_I) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'3 (_1: MutBorrow.t t_I)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_I [inv'3 x]. inv'3 x = invariant''1 x
  
  predicate precondition'0 (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef: forall args: MutBorrow.t t_I [precondition'0 () args]. (let self = args in inv'3 self)
      -> precondition'0 () args
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate inv'4 (_1: t_Item)
  
  predicate inv'5 (_1: t_Option)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option [inv'5 x]. inv'5 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'4 a_0
        end
  
  predicate postcondition_once'0 (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let self = args in match res with
          | C_None -> completed self
          | C_Some v -> produces self.current (Seq.singleton v) self.final
          end
      /\ inv'5 res)
  
  let rec next (self: MutBorrow.t t_I) (return (x: t_Option)) = {[@expl:next requires] precondition'0 () self}
    any [ return' (result: t_Option) -> {postcondition_once'0 () self result} (! return {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: t_Item)) = any
    [ good (field_0: t_Item) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_F) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'6 (_1: MutBorrow.t t_F)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_F [inv'6 x]. inv'6 x = invariant''2 x
  
  predicate invariant''3 [@inline:trivial] (self: t_Item) = inv'4 self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_1: t_Item)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Item [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate inv'8 (_1: t_Item)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_Item [inv'8 x]. inv'8 x = (let x0 = x in inv'7 x0)
  
  let rec call_mut (self_: MutBorrow.t t_F) (arg: t_Item) (return (x: bool)) =
    {[@expl:call_mut 'self_' type invariant] inv'6 self_}
    {[@expl:call_mut 'arg' type invariant] inv'8 arg}
    {[@expl:call_mut requires] precondition self_.current arg}
    any [ return' (result: bool) -> {postcondition_mut self_.current arg self_.final result} (! return {result}) ]
  
  predicate resolve'0 (_1: t_Item)
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_Filter) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t t_Filter) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate completed'0 (self: MutBorrow.t t_Filter) =
    (exists s: Seq.seq t_Item, e: MutBorrow.t t_I. produces self.current.t_Filter__iter s e.current
        /\ completed e
        /\ (forall i: int. 0 <= i /\ i < Seq.length s
          -> postcondition_mut self.current.t_Filter__func (Seq.get s i) self.final.t_Filter__func false))
    /\ self.current.t_Filter__func = self.final.t_Filter__func
  
  predicate produces'0 (self: t_Filter) (visited: Seq.seq t_Item) (succ: t_Filter) =
    invariant' self
    -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s: Seq.seq t_Item, f: Map.map int int. produces self.t_Filter__iter s succ.t_Filter__iter
      /\ (forall i: int, j: int. 0 <= i /\ i <= j /\ j < Seq.length visited
          -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
      /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> Seq.get visited i = Seq.get s (Map.get f i))
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> (exists j: int. 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
        = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'0 (self: MutBorrow.t t_Filter) (return (x: t_Option)) = {[@expl:next 'self' type invariant] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_self <- self ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq t_Item ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &old_3_0 <- self ] s1 | s1 = bb3 ]
    | bb3 = bb3
      [ bb3 = {[@expl:mut invariant] old_3_0.final = self.final}
        {[@expl:loop invariant #0] inv'2 self}
        {[@expl:loop invariant #1] self.current.t_Filter__func = old_self.current.t_Filter__func}
        {[@expl:loop invariant #2] forall i: int. 0 <= i /\ i < Seq.length produced
          -> postcondition_mut self.current.t_Filter__func (Seq.get produced i) self.current.t_Filter__func false}
        {[@expl:loop invariant #3] produces old_self.current.t_Filter__iter produced self.current.t_Filter__iter}
        {[@expl:loop invariant #4] hist_inv old_self.current.t_Filter__func self.current.t_Filter__func}
        (! s0)
        [ s0 = bb4 ]
        [ bb4 = s0
          [ s0 = {inv self.current.t_Filter__iter}
            MutBorrow.borrow_mut <t_I> {self.current.t_Filter__iter}
              (fun (_ret: MutBorrow.t t_I) ->
                [ &_16 <- _ret ] -{inv _ret.final}-
                [ &self <- { self with current = { self.current with t_Filter__iter = _ret.final } } ] s1)
          | s1 = next {_16} (fun (_ret: t_Option) -> [ &_15 <- _ret ] s2)
          | s2 = bb5 ]
        | bb5 = any [ br0 -> {_15 = C_None} (! bb13) | br1 (x0: t_Item) -> {_15 = C_Some x0} (! bb7) ]
        | bb7 = s0
          [ s0 = v_Some {_15} (fun (r0: t_Item) -> [ &n <- r0 ] s1)
          | s1 = [ &_19 <- Seq.snoc produced n ] s2
          | s2 = bb8 ]
        | bb8 = s0
          [ s0 = [ &produced <- _19 ] s1
          | s1 = {[@expl:assertion] produces old_self.current.t_Filter__iter produced self.current.t_Filter__iter} s2
          | s2 = {inv'0 self.current.t_Filter__func}
            MutBorrow.borrow_mut <t_F> {self.current.t_Filter__func}
              (fun (_ret: MutBorrow.t t_F) ->
                [ &_24 <- _ret ] -{inv'0 _ret.final}-
                [ &self <- { self with current = { self.current with t_Filter__func = _ret.final } } ] s3)
          | s3 = [ &_27 <- n ] s4
          | s4 = [ &_25 <- _27 ] s5
          | s5 = call_mut {_24} {_25} (fun (_ret: bool) -> [ &_23 <- _ret ] s6)
          | s6 = bb9 ]
        | bb9 = any [ br0 -> {_23 = false} (! bb12) | br1 -> {_23} (! bb10) ]
        | bb12 = s0 [ s0 = {[@expl:type invariant] inv'4 n} s1 | s1 = -{resolve'0 n}- s2 | s2 = bb3 ] ] ]
    | bb13 = s0
      [ s0 = {[@expl:type invariant] match _15 with
          | C_Some x -> inv'4 x
          | _ -> true
          end}
        s1
      | s1 = -{match _15 with
          | C_Some x -> resolve'0 x
          | _ -> true
          end}-
        s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'2 self}- s4
      | s4 = bb16 ]
    | bb16 = s0 [ s0 = [ &_0 <- C_None ] s1 | s1 = bb19 ]
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'2 self}- s2
      | s2 = [ &_0 <- C_Some n ] s3
      | s3 = bb19 ]
    | bb19 = return {_0} ]
    [ & _0: t_Option = Any.any_l ()
    | & self: MutBorrow.t t_Filter = self
    | & old_self: MutBorrow.t t_Filter = Any.any_l ()
    | & produced: Seq.seq t_Item = Any.any_l ()
    | & _15: t_Option = Any.any_l ()
    | & _16: MutBorrow.t t_I = Any.any_l ()
    | & n: t_Item = Any.any_l ()
    | & _19: Seq.seq t_Item = Any.any_l ()
    | & _23: bool = Any.any_l ()
    | & _24: MutBorrow.t t_F = Any.any_l ()
    | & _25: t_Item = Any.any_l ()
    | & _27: t_Item = Any.any_l ()
    | & old_3_0: MutBorrow.t t_Filter = Any.any_l () ])
    [ return (result: t_Option) -> {[@expl:next result type invariant] inv'5 result}
      {[@expl:next ensures] match result with
        | C_None -> completed'0 self
        | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_17_filter__filter
  use creusot.prelude.Any
  use seq.Seq
  
  type t_I
  
  type t_P
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_P }
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_P)
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate postcondition_once (self: t_P) (args: t_Item) (result: bool)
  
  predicate resolve (_1: t_P)
  
  predicate postcondition_mut (self: t_P) (args: t_Item) (result_state: t_P) (result: bool)
  
  function fn_mut_once (self: t_P) (args: t_Item) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_P, args: t_Item, res: bool. postcondition_once self args res
      = (exists res_state: t_P. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_P) (result_state: t_P)
  
  function hist_inv_trans (self: t_P) (b: t_P) (c: t_P) : ()
  
  axiom hist_inv_trans_spec: forall self: t_P, b: t_P, c: t_P. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_P) : ()
  
  axiom hist_inv_refl_spec: forall self: t_P. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_P) (args: t_Item) (res_state: t_P) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_P, args: t_Item, res_state: t_P, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate immutable (_1: t_P) = forall f: t_P, g: t_P. hist_inv f g -> f = g
  
  predicate precondition (self: t_P) (args: t_Item)
  
  predicate no_precondition (_1: t_P) = forall f: t_P, i: t_Item. precondition f i
  
  predicate precise (_1: t_P) =
    forall f1: t_P, f2: t_P, i: t_Item. not (postcondition_mut f1 i f2 true /\ postcondition_mut f1 i f2 false)
  
  predicate invariant' (self: t_Filter) =
    forall f: t_P, i: t_Item. precondition f i
      /\ (forall f'0: t_P, g: t_P. hist_inv f'0 g -> f'0 = g)
      /\ (forall f1: t_P, f2: t_P, i'0: t_Item. not (postcondition_mut f1 i'0 f2 true
        /\ postcondition_mut f1 i'0 f2 false))
  
  predicate inv'1 (_1: t_Filter)
  
  axiom inv_axiom [@rewrite]: forall x: t_Filter [inv'1 x]. inv'1 x
      = (invariant' x
      /\ match x with
        | {t_Filter__iter = iter; t_Filter__func = func} -> inv iter /\ inv'0 func
        end)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec filter (iter: t_I) (f: t_P) (return (x: t_Filter)) = {[@expl:filter 'iter' type invariant] inv iter}
    {[@expl:filter 'f' type invariant] inv'0 f}
    {[@expl:filter requires #0] immutable f}
    {[@expl:filter requires #1] no_precondition f}
    {[@expl:filter requires #2] precise f}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- { t_Filter__iter = iter; t_Filter__func = f } ] s1 | s1 = bb4 ] | bb4 = return {_0} ]
    [ & _0: t_Filter = Any.any_l () | & iter: t_I = iter | & f: t_P = f ])
    [ return (result: t_Filter) -> {[@expl:filter result type invariant] inv'1 result}
      {[@expl:filter ensures] result.t_Filter__iter = iter /\ result.t_Filter__func = f}
      (! return {result}) ]
end
module M_17_filter__less_than
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use map.Map
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_NonNull'0 = { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_ManuallyDrop = { t_ManuallyDrop__value: () }
  
  type t_IntoIter = {
    t_IntoIter__buf: t_NonNull'0;
    t_IntoIter__phantom: ();
    t_IntoIter__cap: UInt64.t;
    t_IntoIter__alloc: t_ManuallyDrop;
    t_IntoIter__ptr: t_NonNull'0;
    t_IntoIter__end: Opaque.ptr }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: t_IntoIter) : Seq.seq UInt32.t
  
  let rec into_iter (self_: t_Vec) (return (x: t_IntoIter)) = any
    [ return' (result: t_IntoIter) -> {view self_ = view'0 result} (! return {result}) ]
  
  type closure2 = { c0: UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure2) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure2) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate postcondition_once [@inline:trivial] (self: closure2) (args: UInt32.t) (result: bool) =
    let i = args in result = UInt32.lt i self.c0
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve'1 [@inline:trivial] (_1: closure2) = true
  
  meta "rewrite_def" predicate resolve'1
  
  predicate hist_inv [@inline:trivial] (self: closure2) (result_state: closure2) = result_state.c0 = self.c0
  
  meta "rewrite_def" predicate hist_inv
  
  predicate postcondition_mut [@inline:trivial] (self: closure2) (args: UInt32.t) (result_state: closure2) (result: bool) =
    let i = args in result = UInt32.lt i result_state.c0 /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure2) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: closure2, args: UInt32.t, res: bool. postcondition_once self args res
      = (exists res_state: closure2. postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  function hist_inv_trans (self: closure2) (b: closure2) (c: closure2) : ()
  
  axiom hist_inv_trans_spec: forall self: closure2, b: closure2, c: closure2. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure2) : ()
  
  axiom hist_inv_refl_spec: forall self: closure2. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure2) (args: UInt32.t) (res_state: closure2) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure2, args: UInt32.t, res_state: closure2, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec closure2 (self: MutBorrow.t closure2) (i: UInt32.t) (return (x: bool)) = (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 self}- s1
      | s1 = [ &res <- UInt32.lt i self.current.c0 ] s2
      | s2 = [ &_0 <- res ] s3
      | s3 = return {_0} ] ]
    [ & _0: bool = Any.any_l ()
    | & self: MutBorrow.t closure2 = self
    | & i: UInt32.t = i
    | & res: bool = Any.any_l () ])
    [ return (result: bool) -> {[@expl:closure ensures] result = UInt32.lt i self.final.c0}
      {[@expl:closure hist_inv post] hist_inv self.current self.final}
      (! return {result}) ]
  
  type t_Filter = { t_Filter__iter: t_IntoIter; t_Filter__predicate: closure2 }
  
  predicate immutable (_1: closure2) = forall f: closure2, g: closure2. hist_inv f g -> f = g
  
  predicate precondition [@inline:trivial] (self: closure2) (args: UInt32.t) = let i = args in true
  
  meta "rewrite_def" predicate precondition
  
  predicate no_precondition (_1: closure2) = forall f: closure2, i: UInt32.t. precondition f i
  
  predicate precise (_1: closure2) =
    forall f1: closure2, f2: closure2, i: UInt32.t. not (postcondition_mut f1 i f2 true
      /\ postcondition_mut f1 i f2 false)
  
  predicate invariant' (self: t_Filter)
  
  predicate inv (_1: t_Filter)
  
  axiom inv_axiom [@rewrite]: forall x: t_Filter [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_Filter__iter = iter; t_Filter__predicate = predicate'} -> true
        end)
  
  predicate inv'0 (_1: t_IntoIter)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_IntoIter [inv'0 x]. inv'0 x = true
  
  function iter (self: t_Filter) : t_IntoIter
  
  axiom iter_spec: forall self: t_Filter. inv self -> inv'0 (iter self)
  
  predicate inv'1 (_1: closure2)
  
  axiom inv_axiom'1 [@rewrite]: forall x: closure2 [inv'1 x]. inv'1 x = true
  
  function func (self: t_Filter) : closure2
  
  axiom func_spec: forall self: t_Filter. inv self -> inv'1 (func self)
  
  let rec filter (self_: t_IntoIter) (f: closure2) (return (x: t_Filter)) = {[@expl:filter requires #0] immutable f}
    {[@expl:filter requires #1] no_precondition f}
    {[@expl:filter requires #2] precise f}
    any [ return' (result: t_Filter) -> {inv result} {iter result = self_ /\ func result = f} (! return {result}) ]
  
  predicate resolve'2 [@inline:trivial] (_1: t_Filter) = true
  
  meta "rewrite_def" predicate resolve'2
  
  predicate produces (self: t_IntoIter) (visited: Seq.seq UInt32.t) (rhs: t_IntoIter) =
    view'0 self = Seq.(++) visited (view'0 rhs)
  
  function produces_trans (a: t_IntoIter) (ab: Seq.seq UInt32.t) (b: t_IntoIter) (bc: Seq.seq UInt32.t) (c: t_IntoIter) : ()
   = ()
  
  axiom produces_trans_spec:
    forall a: t_IntoIter, ab: Seq.seq UInt32.t, b: t_IntoIter, bc: Seq.seq UInt32.t, c: t_IntoIter. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_IntoIter) : () = ()
  
  axiom produces_refl_spec: forall self: t_IntoIter. produces self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate produces'0 (self: t_Filter) (visited: Seq.seq UInt32.t) (succ: t_Filter) =
    invariant' self
    -> hist_inv (func self) (func succ)
    /\ (exists s: Seq.seq UInt32.t, f: Map.map int int. produces (iter self) s (iter succ)
      /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
      /\ (forall i: int, j: int. 0 <= i /\ i < j /\ j < Seq.length visited -> Map.get f i < Map.get f j)
      /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> Seq.get visited i = Seq.get s (Map.get f i))
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> (exists j: int. 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
        = postcondition_mut (func self) (Seq.get s i) (func self) true))
  
  function produces_trans'0 (a: t_Filter) (ab: Seq.seq UInt32.t) (b: t_Filter) (bc: Seq.seq UInt32.t) (c: t_Filter) : ()
  
  axiom produces_trans_spec'0:
    forall a: t_Filter, ab: Seq.seq UInt32.t, b: t_Filter, bc: Seq.seq UInt32.t, c: t_Filter. produces'0 a ab b
      -> produces'0 b bc c -> produces'0 a (Seq.(++) ab bc) c
  
  function produces_refl'0 (self: t_Filter) : ()
  
  axiom produces_refl_spec'0: forall self: t_Filter. produces'0 self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_IntoIter) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate completed (self: MutBorrow.t t_IntoIter) =
    resolve'3 self /\ view'0 self.current = (Seq.empty: Seq.seq UInt32.t)
  
  predicate completed'0 (self: MutBorrow.t t_Filter) =
    (exists s: Seq.seq UInt32.t, e: MutBorrow.t t_IntoIter. produces (iter self.current) s e.current
        /\ completed e
        /\ (forall i: int. 0 <= i /\ i < Seq.length s
          -> postcondition_mut (func self.current) (Seq.get s i) (func self.final) false))
    /\ func self.current = func self.final
  
  predicate from_iter_post (prod: Seq.seq UInt32.t) (res: t_Vec) = prod = view res
  
  let rec collect (self_: t_Filter) (return (x: t_Vec)) = {[@expl:collect 'self_' type invariant] inv self_}
    any
    [ return' (result: t_Vec) -> {exists done': MutBorrow.t t_Filter, prod: Seq.seq UInt32.t. resolve'2 done'.final
        /\ completed'0 done' /\ produces'0 self_ prod done'.current /\ from_iter_post prod result}
      (! return {result}) ]
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : UInt32.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate contains (self: Seq.seq UInt32.t) (x: UInt32.t) =
    exists i: int. 0 <= i /\ i < Seq.length self /\ Seq.get self i = x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec less_than (v: t_Vec) (n: UInt32.t) (return (x: t_Vec)) = (! bb0
    [ bb0 = s0 [ s0 = into_iter {v} (fun (_ret: t_IntoIter) -> [ &_6 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_8 <- { c0 = n } ] s1 | s1 = filter {_6} {_8} (fun (_ret: t_Filter) -> [ &_5 <- _ret ] s2) | s2 = bb2 ]
    | bb2 = s0 [ s0 = collect {_5} (fun (_ret: t_Vec) -> [ &_0 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = return {_0} ]
    [ & _0: t_Vec = Any.any_l ()
    | & v: t_Vec = v
    | & n: UInt32.t = n
    | & _5: t_Filter = Any.any_l ()
    | & _6: t_IntoIter = Any.any_l ()
    | & _8: closure2 = Any.any_l () ])
    [ return (result: t_Vec) -> {[@expl:less_than ensures #0] forall i: int. 0 <= i /\ i < Seq.length (view result)
        -> UInt32.lt (index_logic result i) n}
      {[@expl:less_than ensures #1] forall i: int. 0 <= i /\ i < Seq.length (view result)
        -> contains (view v) (index_logic result i)}
      (! return {result}) ]
end
module M_17_filter__qyi4935072013270782883__resolve_coherence__refines (* <Filter<I, F> as creusot_contracts::Resolve> *)
  use seq.Seq
  
  type t_I
  
  type t_F
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  predicate resolve (_1: t_F)
  
  predicate resolve'0 (_1: t_I)
  
  predicate structural_resolve (_1: t_Filter) =
    match _1 with
      | {t_Filter__iter = x0; t_Filter__func = x1} -> resolve x1 /\ resolve'0 x0
      end
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate precondition (self: t_F) (args: t_Item)
  
  predicate postcondition_once (self: t_F) (args: t_Item) (result: bool)
  
  predicate postcondition_mut (self: t_F) (args: t_Item) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: t_Item) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_Item, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_Item) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate invariant' (self: t_Filter) =
    forall f: t_F, i: t_Item. precondition f i
      /\ (forall f'0: t_F, g: t_F. hist_inv f'0 g -> f'0 = g)
      /\ (forall f1: t_F, f2: t_F, i'0: t_Item. not (postcondition_mut f1 i'0 f2 true
        /\ postcondition_mut f1 i'0 f2 false))
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_F)
  
  predicate inv'1 (_1: t_Filter)
  
  axiom inv_axiom [@rewrite]: forall x: t_Filter [inv'1 x]. inv'1 x
      = (invariant' x
      /\ match x with
        | {t_Filter__iter = iter; t_Filter__func = func} -> inv iter /\ inv'0 func
        end)
  
  predicate resolve'1 (self: t_Filter) = resolve'0 self.t_Filter__iter /\ resolve self.t_Filter__func
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Filter. structural_resolve self /\ inv'1 self
      -> structural_resolve self /\ (forall result: (). resolve'1 self -> resolve'1 self)
end
module M_17_filter__qyi6180221713105948918__next__refines (* <Filter<I, F> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate precondition (self: t_F) (args: t_Item)
  
  predicate postcondition_once (self: t_F) (args: t_Item) (result: bool)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_Item) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: t_Item) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_Item, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_Item) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate invariant' (self: t_Filter) =
    forall f: t_F, i: t_Item. precondition f i
      /\ (forall f'0: t_F, g: t_F. hist_inv f'0 g -> f'0 = g)
      /\ (forall f1: t_F, f2: t_F, i'0: t_Item. not (postcondition_mut f1 i'0 f2 true
        /\ postcondition_mut f1 i'0 f2 false))
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_F)
  
  predicate inv'1 (_1: t_Filter)
  
  axiom inv_axiom [@rewrite]: forall x: t_Filter [inv'1 x]. inv'1 x
      = (invariant' x
      /\ match x with
        | {t_Filter__iter = iter; t_Filter__func = func} -> inv iter /\ inv'0 func
        end)
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_Filter) = inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 (_1: MutBorrow.t t_Filter)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Filter [inv'2 x]. inv'2 x = invariant''0 x
  
  type t_Option = C_None | C_Some t_Item
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate completed'0 (self: MutBorrow.t t_Filter) =
    (exists s: Seq.seq t_Item, e: MutBorrow.t t_I. produces self.current.t_Filter__iter s e.current
        /\ completed e
        /\ (forall i: int. 0 <= i /\ i < Seq.length s
          -> postcondition_mut self.current.t_Filter__func (Seq.get s i) self.final.t_Filter__func false))
    /\ self.current.t_Filter__func = self.final.t_Filter__func
  
  predicate produces'0 (self: t_Filter) (visited: Seq.seq t_Item) (succ: t_Filter) =
    invariant' self
    -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s: Seq.seq t_Item, f: Map.map int int. produces self.t_Filter__iter s succ.t_Filter__iter
      /\ (forall i: int, j: int. 0 <= i /\ i <= j /\ j < Seq.length visited
          -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
      /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> Seq.get visited i = Seq.get s (Map.get f i))
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> (exists j: int. 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
        = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  predicate inv'3 (_1: t_Item)
  
  predicate inv'4 (_1: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'4 x]. inv'4 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'3 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Filter. inv'2 self
      -> inv'2 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed'0 self
              | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
              end
          /\ inv'4 result
        -> match result with
            | C_None -> completed'0 self
            | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
            end
        /\ inv'4 result)
end
module M_17_filter__qyi6180221713105948918__produces_refl__refines (* <Filter<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate precondition (self: t_F) (args: t_Item)
  
  predicate postcondition_once (self: t_F) (args: t_Item) (result: bool)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_Item) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: t_Item) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_Item, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_Item) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate invariant' (self: t_Filter) =
    forall f: t_F, i: t_Item. precondition f i
      /\ (forall f'0: t_F, g: t_F. hist_inv f'0 g -> f'0 = g)
      /\ (forall f1: t_F, f2: t_F, i'0: t_Item. not (postcondition_mut f1 i'0 f2 true
        /\ postcondition_mut f1 i'0 f2 false))
  
  predicate produces'0 (self: t_Filter) (visited: Seq.seq t_Item) (succ: t_Filter) =
    invariant' self
    -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s: Seq.seq t_Item, f: Map.map int int. produces self.t_Filter__iter s succ.t_Filter__iter
      /\ (forall i: int, j: int. 0 <= i /\ i <= j /\ j < Seq.length visited
          -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
      /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> Seq.get visited i = Seq.get s (Map.get f i))
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> (exists j: int. 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
        = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Filter. forall result: (). produces'0 self (Seq.empty: Seq.seq t_Item) self
        -> produces'0 self (Seq.empty: Seq.seq t_Item) self
end
module M_17_filter__qyi6180221713105948918__produces_trans__refines (* <Filter<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use map.Map
  
  type t_I
  
  type t_F
  
  type t_Filter = { t_Filter__iter: t_I; t_Filter__func: t_F }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate precondition (self: t_F) (args: t_Item)
  
  predicate postcondition_once (self: t_F) (args: t_Item) (result: bool)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_Item) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: t_Item) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_Item, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_Item) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate invariant' (self: t_Filter) =
    forall f: t_F, i: t_Item. precondition f i
      /\ (forall f'0: t_F, g: t_F. hist_inv f'0 g -> f'0 = g)
      /\ (forall f1: t_F, f2: t_F, i'0: t_Item. not (postcondition_mut f1 i'0 f2 true
        /\ postcondition_mut f1 i'0 f2 false))
  
  predicate produces'0 (self: t_Filter) (visited: Seq.seq t_Item) (succ: t_Filter) =
    invariant' self
    -> hist_inv self.t_Filter__func succ.t_Filter__func
    /\ (exists s: Seq.seq t_Item, f: Map.map int int. produces self.t_Filter__iter s succ.t_Filter__iter
      /\ (forall i: int, j: int. 0 <= i /\ i <= j /\ j < Seq.length visited
          -> 0 <= Map.get f i /\ Map.get f i <= Map.get f j /\ Map.get f j < Seq.length s)
      /\ (forall i: int. 0 <= i /\ i < Seq.length visited -> Seq.get visited i = Seq.get s (Map.get f i))
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> (exists j: int. 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
        = postcondition_mut self.t_Filter__func (Seq.get s i) self.t_Filter__func true))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Filter. forall ab: Seq.seq t_Item. forall b: t_Filter. forall bc: Seq.seq t_Item. forall c: t_Filter. produces'0 b bc c
                /\ produces'0 a ab b
              -> produces'0 b bc c
              /\ produces'0 a ab b
              /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c -> produces'0 a (Seq.(++) ab bc) c)
end
