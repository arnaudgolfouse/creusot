module M_impl_Iterator_for_Enumerate_I__produces_refl (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate_I = { iter: t_I; count: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type tup2_usize_Item = { f0: UInt64.t; f1: t_Item }
  
  predicate produces_Enumerate_I (self: t_Enumerate_I) (visited: Seq.seq tup2_usize_Item) (o: t_Enumerate_I) =
    Seq.length visited = UInt64.t'int o.count - UInt64.t'int self.count
    /\ (exists s: Seq.seq t_Item. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.count + i /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Enumerate_I
  
  function produces_refl_Enumerate_I (self: t_Enumerate_I) : ()
  
  goal vc_produces_refl_Enumerate_I:
    [@expl:produces_refl ensures] produces_Enumerate_I self (Seq.empty: Seq.seq tup2_usize_Item) self
end
module M_impl_Iterator_for_Enumerate_I__produces_trans (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate_I = { iter: t_I; count: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type tup2_usize_Item = { f0: UInt64.t; f1: t_Item }
  
  predicate produces_Enumerate_I (self: t_Enumerate_I) (visited: Seq.seq tup2_usize_Item) (o: t_Enumerate_I) =
    Seq.length visited = UInt64.t'int o.count - UInt64.t'int self.count
    /\ (exists s: Seq.seq t_Item. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.count + i /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Enumerate_I
  
  constant ab : Seq.seq tup2_usize_Item
  
  constant b : t_Enumerate_I
  
  constant bc : Seq.seq tup2_usize_Item
  
  constant c : t_Enumerate_I
  
  function produces_trans_Enumerate_I (a: t_Enumerate_I) (ab: Seq.seq tup2_usize_Item) (b: t_Enumerate_I) (bc: Seq.seq tup2_usize_Item) (c: t_Enumerate_I) : ()
  
  goal vc_produces_trans_Enumerate_I: produces_Enumerate_I a ab b
    -> produces_Enumerate_I b bc c -> ([@expl:produces_trans ensures] produces_Enumerate_I a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Enumerate_I__next (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_I
  
  type t_Enumerate_I = { iter: t_I; count: UInt64.t }
  
  predicate inv_I (_1: t_I)
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option_Item = None | Some t_Item
  
  predicate invariant_ref_I [@inline:trivial] (self: MutBorrow.t t_I) = inv_I self.current /\ inv_I self.final
  
  meta "rewrite_def" predicate invariant_ref_I
  
  predicate inv_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = invariant_ref_I _1
  
  meta "rewrite_def" predicate inv_ref_I
  
  predicate precondition_next (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    forall args: MutBorrow.t t_I [precondition_next () args]. (let self = args in inv_ref_I self)
      -> precondition_next () args
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate inv_Item (_1: t_Item)
  
  predicate inv_Option_Item (_1: t_Option_Item)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_Item [inv_Option_Item x]. inv_Option_Item x
      = match x with
        | None -> true
        | Some f0 -> inv_Item f0
        end
  
  predicate postcondition_once_next (self: ()) (args: MutBorrow.t t_I) (result: t_Option_Item)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option_Item [postcondition_once_next () args res]. postcondition_once_next () args res
      -> (let self = args in match res with
          | None -> completed_I self
          | Some v -> produces_I self.current (Seq.singleton v) self.final
          end
      /\ inv_Option_Item res)
  
  let rec next_I (self: MutBorrow.t t_I) (return (x: t_Option_Item)) = {[@expl:next requires] precondition_next () self}
    any [ return (result: t_Option_Item) -> {postcondition_once_next () self result} (! return {result}) ]
  
  let rec elim_Some (input: t_Option_Item) (ret (f0: t_Item)) = any
    [ good (f0: t_Item) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: t_Item [Some f0: t_Option_Item]. Some f0 <> input} (! {false} any) ]
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate invariant_Enumerate_I (self: t_Enumerate_I) =
    (forall s: Seq.seq t_Item, i: t_I [produces_I self.iter s i]. produces_I self.iter s i
        -> UInt64.t'int self.count + Seq.length s < UInt64.t'int const_MAX)
    /\ (forall i: MutBorrow.t t_I. completed_I i -> produces_I i.current (Seq.empty: Seq.seq t_Item) i.final)
  
  predicate inv_Enumerate_I (_1: t_Enumerate_I)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Enumerate_I [inv_Enumerate_I x]. inv_Enumerate_I x
      = (invariant_Enumerate_I x /\ inv_I x.iter)
  
  predicate invariant_ref_Enumerate_I [@inline:trivial] (self: MutBorrow.t t_Enumerate_I) =
    inv_Enumerate_I self.current /\ inv_Enumerate_I self.final
  
  meta "rewrite_def" predicate invariant_ref_Enumerate_I
  
  predicate inv_ref_Enumerate_I [@inline:trivial] (_1: MutBorrow.t t_Enumerate_I) = invariant_ref_Enumerate_I _1
  
  meta "rewrite_def" predicate inv_ref_Enumerate_I
  
  predicate resolve_ref_Enumerate_I [@inline:trivial] (_1: MutBorrow.t t_Enumerate_I) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Enumerate_I
  
  type tup2_usize_Item = { f0: UInt64.t; f1: t_Item }
  
  type t_Option_tup2_usize_Item = None'0 | Some'0 tup2_usize_Item
  
  predicate inv_tup2_usize_Item [@inline:trivial] (_1: tup2_usize_Item) = inv_Item _1.f1
  
  meta "rewrite_def" predicate inv_tup2_usize_Item
  
  predicate inv_Option_tup2_usize_Item (_1: t_Option_tup2_usize_Item)
  
  axiom inv_axiom'1 [@rewrite]:
    forall x: t_Option_tup2_usize_Item [inv_Option_tup2_usize_Item x]. inv_Option_tup2_usize_Item x
      = match x with
        | None'0 -> true
        | Some'0 f0'0 -> inv_tup2_usize_Item f0'0
        end
  
  predicate resolve_ref_usize [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_usize
  
  predicate completed_Enumerate_I (self: MutBorrow.t t_Enumerate_I) =
    completed_I (MutBorrow.borrow_logic self.current.iter self.final.iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ resolve_ref_usize (MutBorrow.borrow_logic self.current.count self.final.count (MutBorrow.inherit_id (MutBorrow.get_id self) 2))
  
  predicate produces_Enumerate_I (self: t_Enumerate_I) (visited: Seq.seq tup2_usize_Item) (o: t_Enumerate_I) =
    Seq.length visited = UInt64.t'int o.count - UInt64.t'int self.count
    /\ (exists s: Seq.seq t_Item. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.count + i /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_Enumerate_I (self: MutBorrow.t t_Enumerate_I) (return (x: t_Option_tup2_usize_Item)) =
    {[@expl:next 'self' type invariant] inv_ref_Enumerate_I self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_I self.current.iter}
        MutBorrow.borrow_final <t_I> {self.current.iter} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_4 <- _ret ] -{inv_I _ret.final}-
            [ &self <- { self with current = { self.current with iter = _ret.final } } ] s1)
      | s1 = next_I {_4} (fun (_ret: t_Option_Item) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = any [ br0 -> {_3 = None} (! bb3) | br1 (x0: t_Item) -> {_3 = Some x0} (! bb4) ]
    | bb4 = s0
      [ s0 = elim_Some {_3} (fun (r0: t_Item) -> [ &x <- r0 ] s1)
      | s1 = [ &n <- self.current.count ] s2
      | s2 = UInt64.add {self.current.count} {(1: UInt64.t)}
          (fun (_ret: UInt64.t) -> [ &self <- { self with current = { self.current with count = _ret } } ] s3)
      | s3 = {[@expl:type invariant] inv_ref_Enumerate_I self} s4
      | s4 = -{resolve_ref_Enumerate_I self}- s5
      | s5 = [ &_8 <- { f0 = n; f1 = x } ] s6
      | s6 = bb6 ]
    | bb6 = s0 [ s0 = [ &_0 <- Some'0 _8 ] s1 | s1 = bb10 ]
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Enumerate_I self} s1
      | s1 = -{resolve_ref_Enumerate_I self}- s2
      | s2 = bb5 ]
    | bb5 = s0 [ s0 = [ &_0 <- None'0 ] s1 | s1 = bb10 ]
    | bb10 = return {_0} ]
    [ & _0: t_Option_tup2_usize_Item = Any.any_l ()
    | & self: MutBorrow.t t_Enumerate_I = self
    | & _3: t_Option_Item = Any.any_l ()
    | & _4: MutBorrow.t t_I = Any.any_l ()
    | & x: t_Item = Any.any_l ()
    | & n: UInt64.t = Any.any_l ()
    | & _8: tup2_usize_Item = Any.any_l () ])
    [ return (result: t_Option_tup2_usize_Item) ->
    {[@expl:next result type invariant] inv_Option_tup2_usize_Item result}
      {[@expl:next ensures] match result with
        | None'0 -> completed_Enumerate_I self
        | Some'0 v -> produces_Enumerate_I self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_enumerate
  use creusot.int.UInt64
  use creusot.prelude.Any
  use seq.Seq
  use creusot.prelude.MutBorrow
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate_I = { iter: t_I; count: UInt64.t }
  
  predicate inv_I (_1: t_I)
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate invariant_Enumerate_I (self: t_Enumerate_I) =
    (forall s: Seq.seq t_Item, i: t_I [produces_I self.iter s i]. produces_I self.iter s i
        -> UInt64.t'int self.count + Seq.length s < UInt64.t'int const_MAX)
    /\ (forall i: MutBorrow.t t_I. completed_I i -> produces_I i.current (Seq.empty: Seq.seq t_Item) i.final)
  
  predicate inv_Enumerate_I (_1: t_Enumerate_I)
  
  axiom inv_axiom [@rewrite]: forall x: t_Enumerate_I [inv_Enumerate_I x]. inv_Enumerate_I x
      = (invariant_Enumerate_I x /\ inv_I x.iter)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec enumerate_I (iter'0: t_I) (return (x: t_Enumerate_I)) = {[@expl:enumerate 'iter' type invariant] inv_I iter'0}
    {[@expl:enumerate requires #0] forall i: MutBorrow.t t_I. completed_I i
      -> produces_I i.current (Seq.empty: Seq.seq t_Item) i.final}
    {[@expl:enumerate requires #1] forall s: Seq.seq t_Item, i: t_I. produces_I iter'0 s i
      -> Seq.length s < UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- { iter = iter'0; count = (0: UInt64.t) } ] s1 | s1 = bb2 ] | bb2 = return {_0} ]
    [ & _0: t_Enumerate_I = Any.any_l () | & iter'0: t_I = iter'0 ])
    [ return (result: t_Enumerate_I) -> {[@expl:enumerate result type invariant] inv_Enumerate_I result}
      {[@expl:enumerate ensures] result.iter = iter'0 /\ UInt64.t'int result.count = 0}
      (! return {result}) ]
end
module M_impl_Iterator_for_Enumerate_I__next__refines (* <Enumerate<I> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate_I = { iter: t_I; count: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate invariant_Enumerate_I (self: t_Enumerate_I) =
    (forall s: Seq.seq t_Item, i: t_I [produces_I self.iter s i]. produces_I self.iter s i
        -> UInt64.t'int self.count + Seq.length s < UInt64.t'int const_MAX)
    /\ (forall i: MutBorrow.t t_I. completed_I i -> produces_I i.current (Seq.empty: Seq.seq t_Item) i.final)
  
  predicate inv_I (_1: t_I)
  
  predicate inv_Enumerate_I (_1: t_Enumerate_I)
  
  axiom inv_axiom [@rewrite]: forall x: t_Enumerate_I [inv_Enumerate_I x]. inv_Enumerate_I x
      = (invariant_Enumerate_I x /\ inv_I x.iter)
  
  predicate invariant_ref_Enumerate_I [@inline:trivial] (self: MutBorrow.t t_Enumerate_I) =
    inv_Enumerate_I self.current /\ inv_Enumerate_I self.final
  
  meta "rewrite_def" predicate invariant_ref_Enumerate_I
  
  predicate inv_ref_Enumerate_I [@inline:trivial] (_1: MutBorrow.t t_Enumerate_I) = invariant_ref_Enumerate_I _1
  
  meta "rewrite_def" predicate inv_ref_Enumerate_I
  
  type tup2_usize_Item = { f0: UInt64.t; f1: t_Item }
  
  type t_Option_tup2_usize_Item = None | Some tup2_usize_Item
  
  predicate resolve_ref_usize [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_usize
  
  predicate completed_Enumerate_I (self: MutBorrow.t t_Enumerate_I) =
    completed_I (MutBorrow.borrow_logic self.current.iter self.final.iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ resolve_ref_usize (MutBorrow.borrow_logic self.current.count self.final.count (MutBorrow.inherit_id (MutBorrow.get_id self) 2))
  
  predicate produces_Enumerate_I (self: t_Enumerate_I) (visited: Seq.seq tup2_usize_Item) (o: t_Enumerate_I) =
    Seq.length visited = UInt64.t'int o.count - UInt64.t'int self.count
    /\ (exists s: Seq.seq t_Item. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.count + i /\ (Seq.get visited i).f1 = Seq.get s i))
  
  predicate inv_Item (_1: t_Item)
  
  predicate inv_tup2_usize_Item [@inline:trivial] (_1: tup2_usize_Item) = inv_Item _1.f1
  
  meta "rewrite_def" predicate inv_tup2_usize_Item
  
  predicate inv_Option_tup2_usize_Item (_1: t_Option_tup2_usize_Item)
  
  axiom inv_axiom'0 [@rewrite]:
    forall x: t_Option_tup2_usize_Item [inv_Option_tup2_usize_Item x]. inv_Option_tup2_usize_Item x
      = match x with
        | None -> true
        | Some f0'0 -> inv_tup2_usize_Item f0'0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Enumerate_I. inv_ref_Enumerate_I self
      -> inv_ref_Enumerate_I self
      /\ (forall result: t_Option_tup2_usize_Item. match result with
              | None -> completed_Enumerate_I self
              | Some v -> produces_Enumerate_I self.current (Seq.singleton v) self.final
              end
          /\ inv_Option_tup2_usize_Item result
        -> match result with
            | None -> completed_Enumerate_I self
            | Some v -> produces_Enumerate_I self.current (Seq.singleton v) self.final
            end
        /\ inv_Option_tup2_usize_Item result)
end
module M_impl_Iterator_for_Enumerate_I__produces_trans__refines (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate_I = { iter: t_I; count: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type tup2_usize_Item = { f0: UInt64.t; f1: t_Item }
  
  predicate produces_Enumerate_I (self: t_Enumerate_I) (visited: Seq.seq tup2_usize_Item) (o: t_Enumerate_I) =
    Seq.length visited = UInt64.t'int o.count - UInt64.t'int self.count
    /\ (exists s: Seq.seq t_Item. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.count + i /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Enumerate_I. forall ab: Seq.seq tup2_usize_Item. forall b: t_Enumerate_I. forall bc: Seq.seq tup2_usize_Item. forall c: t_Enumerate_I. produces_Enumerate_I b bc c
                /\ produces_Enumerate_I a ab b
              -> produces_Enumerate_I b bc c
              /\ produces_Enumerate_I a ab b
              /\ (forall result: (). produces_Enumerate_I a (Seq.(++) ab bc) c
                -> produces_Enumerate_I a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Enumerate_I__produces_refl__refines (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate_I = { iter: t_I; count: UInt64.t }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type tup2_usize_Item = { f0: UInt64.t; f1: t_Item }
  
  predicate produces_Enumerate_I (self: t_Enumerate_I) (visited: Seq.seq tup2_usize_Item) (o: t_Enumerate_I) =
    Seq.length visited = UInt64.t'int o.count - UInt64.t'int self.count
    /\ (exists s: Seq.seq t_Item. produces_I self.iter s o.iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.count + i /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall self: t_Enumerate_I. forall result: (). produces_Enumerate_I self (Seq.empty: Seq.seq tup2_usize_Item) self
        -> produces_Enumerate_I self (Seq.empty: Seq.seq tup2_usize_Item) self
end
