module M_15_enumerate__qyi11773969228543277856__resolve_coherence (* <Enumerate<I> as creusot_contracts::Resolve> *)
  use creusot.int.UInt64
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  predicate resolve (_1: t_I)
  
  predicate structural_resolve (_1: t_Enumerate) =
    match _1 with
      | {t_Enumerate__iter = x0; t_Enumerate__count = x1} -> resolve x0
      end
  
  predicate resolve'0 [@inline:trivial] (_1: UInt64.t) = true
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 (self: t_Enumerate) = resolve self.t_Enumerate__iter /\ resolve'0 self.t_Enumerate__count
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Enumerate
  
  function resolve_coherence (self: t_Enumerate) : ()
  
  goal vc_resolve_coherence: structural_resolve self -> ([@expl:resolve_coherence ensures] resolve'1 self)
end
module M_15_enumerate__qyi3289565171142109185__produces_refl (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type tuple = { f0: UInt64.t; f1: t_Item }
  
  predicate produces'0 (self: t_Enumerate) (visited: Seq.seq tuple) (o: t_Enumerate) =
    Seq.length visited = UInt64.t'int o.t_Enumerate__count - UInt64.t'int self.t_Enumerate__count
    /\ (exists s: Seq.seq t_Item. produces self.t_Enumerate__iter s o.t_Enumerate__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.t_Enumerate__count + i
        /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Enumerate
  
  function produces_refl'0 (self: t_Enumerate) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] produces'0 self (Seq.empty: Seq.seq tuple) self
end
module M_15_enumerate__qyi3289565171142109185__produces_trans (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type tuple = { f0: UInt64.t; f1: t_Item }
  
  predicate produces'0 (self: t_Enumerate) (visited: Seq.seq tuple) (o: t_Enumerate) =
    Seq.length visited = UInt64.t'int o.t_Enumerate__count - UInt64.t'int self.t_Enumerate__count
    /\ (exists s: Seq.seq t_Item. produces self.t_Enumerate__iter s o.t_Enumerate__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.t_Enumerate__count + i
        /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Enumerate
  
  constant ab : Seq.seq tuple
  
  constant b : t_Enumerate
  
  constant bc : Seq.seq tuple
  
  constant c : t_Enumerate
  
  function produces_trans'0 (a: t_Enumerate) (ab: Seq.seq tuple) (b: t_Enumerate) (bc: Seq.seq tuple) (c: t_Enumerate) : ()
  
  goal vc_produces_trans: produces'0 a ab b
    -> produces'0 b bc c -> ([@expl:produces_trans ensures] produces'0 a (Seq.(++) ab bc) c)
end
module M_15_enumerate__qyi3289565171142109185__next (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  predicate inv (_1: t_I)
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option = C_None | C_Some t_Item
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_I) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: MutBorrow.t t_I)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_I [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef: forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate inv'1 (_1: t_Item)
  
  predicate inv'2 (_1: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'1 a_0
        end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in match res with
          | C_None -> completed self
          | C_Some v -> produces self.current (Seq.singleton v) self.final
          end
      /\ inv'2 res)
  
  let rec next (self: MutBorrow.t t_I) (return (x: t_Option)) = {[@expl:next requires] precondition () self}
    any [ return' (result: t_Option) -> {postcondition_once () self result} (! return {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: t_Item)) = any
    [ good (field_0: t_Item) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Item [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate invariant''0 (self: t_Enumerate) =
    (forall s: Seq.seq t_Item, i: t_I [produces self.t_Enumerate__iter s i]. produces self.t_Enumerate__iter s i
        -> UInt64.t'int self.t_Enumerate__count + Seq.length s < UInt64.t'int const_MAX)
    /\ (forall i: MutBorrow.t t_I. completed i -> produces i.current (Seq.empty: Seq.seq t_Item) i.final)
  
  predicate inv'3 (_1: t_Enumerate)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Enumerate [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_Enumerate__iter = iter; t_Enumerate__count = count} -> inv iter
        end)
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_Enumerate) = inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'4 (_1: MutBorrow.t t_Enumerate)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Enumerate [inv'4 x]. inv'4 x = invariant''1 x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Enumerate) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Enumerate) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  type tuple = { f0: UInt64.t; f1: t_Item }
  
  type t_Option'0 = C_None'0 | C_Some'0 tuple
  
  predicate inv'5 (_1: tuple)
  
  axiom inv_axiom'3 [@rewrite]: forall x: tuple [inv'5 x]. inv'5 x = (let {f0 = x0; f1 = x1} = x in inv'1 x1)
  
  predicate inv'6 (_1: t_Option'0)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Option'0 [inv'6 x]. inv'6 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'5 a_0
        end
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt64.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate completed'0 (self: MutBorrow.t t_Enumerate) =
    completed (MutBorrow.borrow_logic (self.current).t_Enumerate__iter (self.final).t_Enumerate__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ resolve'1 (MutBorrow.borrow_logic (self.current).t_Enumerate__count (self.final).t_Enumerate__count (MutBorrow.inherit_id (MutBorrow.get_id self) 2))
  
  predicate produces'0 (self: t_Enumerate) (visited: Seq.seq tuple) (o: t_Enumerate) =
    Seq.length visited = UInt64.t'int o.t_Enumerate__count - UInt64.t'int self.t_Enumerate__count
    /\ (exists s: Seq.seq t_Item. produces self.t_Enumerate__iter s o.t_Enumerate__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.t_Enumerate__count + i
        /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next'0 (self: MutBorrow.t t_Enumerate) (return (x: t_Option'0)) =
    {[@expl:next 'self' type invariant] inv'4 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv (self.current).t_Enumerate__iter}
        MutBorrow.borrow_final <t_I> {(self.current).t_Enumerate__iter} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_4 <- _ret ] -{inv _ret.final}-
            [ &self <- { self with current = { self.current with t_Enumerate__iter = _ret.final } } ] s1)
      | s1 = next {_4} (fun (_ret: t_Option) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = any [ br0 -> {_3 = C_None} (! bb3) | br1 (x0: t_Item) -> {_3 = C_Some x0} (! bb4) ]
    | bb4 = s0
      [ s0 = v_Some {_3} (fun (r0: t_Item) -> [ &x <- r0 ] s1)
      | s1 = [ &n <- (self.current).t_Enumerate__count ] s2
      | s2 = UInt64.add {(self.current).t_Enumerate__count} {(1: UInt64.t)}
          (fun (_ret: UInt64.t) ->
            [ &self <- { self with current = { self.current with t_Enumerate__count = _ret } } ] s3)
      | s3 = {[@expl:type invariant] inv'4 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 = [ &_8 <- { f0 = n; f1 = x } ] s6
      | s6 = bb6 ]
    | bb6 = s0 [ s0 = [ &_0 <- C_Some'0 _8 ] s1 | s1 = bb10 ]
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'4 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb5 ]
    | bb5 = s0 [ s0 = [ &_0 <- C_None'0 ] s1 | s1 = bb10 ]
    | bb10 = return {_0} ]
    [ & _0: t_Option'0 = Any.any_l ()
    | & self: MutBorrow.t t_Enumerate = self
    | & _3: t_Option = Any.any_l ()
    | & _4: MutBorrow.t t_I = Any.any_l ()
    | & x: t_Item = Any.any_l ()
    | & n: UInt64.t = Any.any_l ()
    | & _8: tuple = Any.any_l () ])
    [ return (result: t_Option'0) -> {[@expl:next result type invariant] inv'6 result}
      {[@expl:next ensures] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_15_enumerate__enumerate
  use creusot.int.UInt64
  use creusot.prelude.Any
  use seq.Seq
  use creusot.prelude.MutBorrow
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  predicate inv (_1: t_I)
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  predicate completed (self: MutBorrow.t t_I)
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate invariant' (self: t_Enumerate) =
    (forall s: Seq.seq t_Item, i: t_I [produces self.t_Enumerate__iter s i]. produces self.t_Enumerate__iter s i
        -> UInt64.t'int self.t_Enumerate__count + Seq.length s < UInt64.t'int const_MAX)
    /\ (forall i: MutBorrow.t t_I. completed i -> produces i.current (Seq.empty: Seq.seq t_Item) i.final)
  
  predicate inv'0 (_1: t_Enumerate)
  
  axiom inv_axiom [@rewrite]: forall x: t_Enumerate [inv'0 x]. inv'0 x
      = (invariant' x
      /\ match x with
        | {t_Enumerate__iter = iter; t_Enumerate__count = count} -> inv iter
        end)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec enumerate (iter: t_I) (return (x: t_Enumerate)) = {[@expl:enumerate 'iter' type invariant] inv iter}
    {[@expl:enumerate requires #0] forall i: MutBorrow.t t_I. completed i
      -> produces i.current (Seq.empty: Seq.seq t_Item) i.final}
    {[@expl:enumerate requires #1] forall s: Seq.seq t_Item, i: t_I. produces iter s i
      -> Seq.length s < UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- { t_Enumerate__iter = iter; t_Enumerate__count = (0: UInt64.t) } ] s1 | s1 = bb2 ]
    | bb2 = return {_0} ] [ & _0: t_Enumerate = Any.any_l () | & iter: t_I = iter ])
    [ return (result: t_Enumerate) -> {[@expl:enumerate result type invariant] inv'0 result}
      {[@expl:enumerate ensures] result.t_Enumerate__iter = iter /\ UInt64.t'int result.t_Enumerate__count = 0}
      (! return {result}) ]
end
module M_15_enumerate__qyi11773969228543277856__resolve_coherence__refines (* <Enumerate<I> as creusot_contracts::Resolve> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  predicate resolve (_1: t_I)
  
  predicate structural_resolve (_1: t_Enumerate) =
    match _1 with
      | {t_Enumerate__iter = x0; t_Enumerate__count = x1} -> resolve x0
      end
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate invariant' (self: t_Enumerate) =
    (forall s: Seq.seq t_Item, i: t_I [produces self.t_Enumerate__iter s i]. produces self.t_Enumerate__iter s i
        -> UInt64.t'int self.t_Enumerate__count + Seq.length s < UInt64.t'int const_MAX)
    /\ (forall i: MutBorrow.t t_I. completed i -> produces i.current (Seq.empty: Seq.seq t_Item) i.final)
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_Enumerate)
  
  axiom inv_axiom [@rewrite]: forall x: t_Enumerate [inv'0 x]. inv'0 x
      = (invariant' x
      /\ match x with
        | {t_Enumerate__iter = iter; t_Enumerate__count = count} -> inv iter
        end)
  
  predicate resolve'0 [@inline:trivial] (_1: UInt64.t) = true
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 (self: t_Enumerate) = resolve self.t_Enumerate__iter /\ resolve'0 self.t_Enumerate__count
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Enumerate. structural_resolve self /\ inv'0 self
      -> structural_resolve self /\ (forall result: (). resolve'1 self -> resolve'1 self)
end
module M_15_enumerate__qyi3289565171142109185__next__refines (* <Enumerate<I> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate completed (self: MutBorrow.t t_I)
  
  predicate invariant' (self: t_Enumerate) =
    (forall s: Seq.seq t_Item, i: t_I [produces self.t_Enumerate__iter s i]. produces self.t_Enumerate__iter s i
        -> UInt64.t'int self.t_Enumerate__count + Seq.length s < UInt64.t'int const_MAX)
    /\ (forall i: MutBorrow.t t_I. completed i -> produces i.current (Seq.empty: Seq.seq t_Item) i.final)
  
  predicate inv (_1: t_I)
  
  predicate inv'0 (_1: t_Enumerate)
  
  axiom inv_axiom [@rewrite]: forall x: t_Enumerate [inv'0 x]. inv'0 x
      = (invariant' x
      /\ match x with
        | {t_Enumerate__iter = iter; t_Enumerate__count = count} -> inv iter
        end)
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_Enumerate) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_1: MutBorrow.t t_Enumerate)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Enumerate [inv'1 x]. inv'1 x = invariant''0 x
  
  type tuple = { f0: UInt64.t; f1: t_Item }
  
  type t_Option = C_None | C_Some tuple
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt64.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed'0 (self: MutBorrow.t t_Enumerate) =
    completed (MutBorrow.borrow_logic (self.current).t_Enumerate__iter (self.final).t_Enumerate__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ resolve (MutBorrow.borrow_logic (self.current).t_Enumerate__count (self.final).t_Enumerate__count (MutBorrow.inherit_id (MutBorrow.get_id self) 2))
  
  predicate produces'0 (self: t_Enumerate) (visited: Seq.seq tuple) (o: t_Enumerate) =
    Seq.length visited = UInt64.t'int o.t_Enumerate__count - UInt64.t'int self.t_Enumerate__count
    /\ (exists s: Seq.seq t_Item. produces self.t_Enumerate__iter s o.t_Enumerate__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.t_Enumerate__count + i
        /\ (Seq.get visited i).f1 = Seq.get s i))
  
  predicate inv'2 (_1: t_Item)
  
  predicate inv'3 (_1: tuple)
  
  axiom inv_axiom'1 [@rewrite]: forall x: tuple [inv'3 x]. inv'3 x = (let {f0 = x0; f1 = x1} = x in inv'2 x1)
  
  predicate inv'4 (_1: t_Option)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option [inv'4 x]. inv'4 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'3 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Enumerate. inv'1 self
      -> inv'1 self
      /\ (forall result: t_Option. match result with
              | C_None -> completed'0 self
              | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
              end
          /\ inv'4 result
        -> match result with
            | C_None -> completed'0 self
            | C_Some v -> produces'0 self.current (Seq.singleton v) self.final
            end
        /\ inv'4 result)
end
module M_15_enumerate__qyi3289565171142109185__produces_trans__refines (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type tuple = { f0: UInt64.t; f1: t_Item }
  
  predicate produces'0 (self: t_Enumerate) (visited: Seq.seq tuple) (o: t_Enumerate) =
    Seq.length visited = UInt64.t'int o.t_Enumerate__count - UInt64.t'int self.t_Enumerate__count
    /\ (exists s: Seq.seq t_Item. produces self.t_Enumerate__iter s o.t_Enumerate__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.t_Enumerate__count + i
        /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Enumerate. forall ab: Seq.seq tuple. forall b: t_Enumerate. forall bc: Seq.seq tuple. forall c: t_Enumerate. produces'0 b bc c
                /\ produces'0 a ab b
              -> produces'0 b bc c
              /\ produces'0 a ab b
              /\ (forall result: (). produces'0 a (Seq.(++) ab bc) c -> produces'0 a (Seq.(++) ab bc) c)
end
module M_15_enumerate__qyi3289565171142109185__produces_refl__refines (* <Enumerate<I> as common::Iterator> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_Enumerate = { t_Enumerate__iter: t_I; t_Enumerate__count: UInt64.t }
  
  type t_Item
  
  predicate produces (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_I) : ()
  
  axiom produces_refl_spec: forall self: t_I. produces self (Seq.empty: Seq.seq t_Item) self
  
  type tuple = { f0: UInt64.t; f1: t_Item }
  
  predicate produces'0 (self: t_Enumerate) (visited: Seq.seq tuple) (o: t_Enumerate) =
    Seq.length visited = UInt64.t'int o.t_Enumerate__count - UInt64.t'int self.t_Enumerate__count
    /\ (exists s: Seq.seq t_Item. produces self.t_Enumerate__iter s o.t_Enumerate__iter
      /\ Seq.length visited = Seq.length s
      /\ (forall i: int. 0 <= i /\ i < Seq.length s
        -> UInt64.t'int (Seq.get visited i).f0 = UInt64.t'int self.t_Enumerate__count + i
        /\ (Seq.get visited i).f1 = Seq.get s i))
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Enumerate. forall result: (). produces'0 self (Seq.empty: Seq.seq tuple) self
        -> produces'0 self (Seq.empty: Seq.seq tuple) self
end
