module M_impl_Iterator_for_Map_I_F__produces_refl (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  type t_B
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current (Seq.get s i)
          /\ postcondition_mut_F (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map_I_F
  
  function produces_refl_Map_I_F (self: t_Map_I_F) : ()
  
  goal vc_produces_refl_Map_I_F: [@expl:produces_refl ensures] produces_Map_I_F self (Seq.empty: Seq.seq t_B) self
end
module M_impl_Iterator_for_Map_I_F__produces_trans (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  type t_B
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current (Seq.get s i)
          /\ postcondition_mut_F (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Map_I_F
  
  constant ab : Seq.seq t_B
  
  constant b : t_Map_I_F
  
  constant bc : Seq.seq t_B
  
  constant c : t_Map_I_F
  
  function produces_trans_Map_I_F (a: t_Map_I_F) (ab: Seq.seq t_B) (b: t_Map_I_F) (bc: Seq.seq t_B) (c: t_Map_I_F) : ()
  
  goal vc_produces_trans_Map_I_F: produces_Map_I_F a ab b
    -> produces_Map_I_F b bc c -> ([@expl:produces_trans ensures] produces_Map_I_F a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Map_I_F__next (* <Map<I, F> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  predicate inv_I (_1: t_I)
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_Option_Item = None | Some t_Item
  
  predicate invariant_ref_I [@inline:trivial] (self: MutBorrow.t t_I) = inv_I self.current /\ inv_I self.final
  
  meta "rewrite_def" predicate invariant_ref_I
  
  predicate inv_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = invariant_ref_I _1
  
  meta "rewrite_def" predicate inv_ref_I
  
  predicate precondition_next (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    forall args: MutBorrow.t t_I [precondition_next () args]. (let self = args in inv_ref_I self)
      -> precondition_next () args
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate inv_Item (_1: t_Item)
  
  predicate inv_Option_Item (_1: t_Option_Item)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_Item [inv_Option_Item x]. inv_Option_Item x
      = match x with
        | None -> true
        | Some f0 -> inv_Item f0
        end
  
  predicate postcondition_once_next (self: ()) (args: MutBorrow.t t_I) (result: t_Option_Item)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option_Item [postcondition_once_next () args res]. postcondition_once_next () args res
      -> (let self = args in match res with
          | None -> completed_I self
          | Some v -> produces_I self.current (Seq.singleton v) self.final
          end
      /\ inv_Option_Item res)
  
  let rec next_I (self: MutBorrow.t t_I) (return (x: t_Option_Item)) = {[@expl:next requires] precondition_next () self}
    any [ return (result: t_Option_Item) -> {postcondition_once_next () self result} (! return {result}) ]
  
  let rec elim_Some (input: t_Option_Item) (ret (f0: t_Item)) = any
    [ good (f0: t_Item) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: t_Item [Some f0: t_Option_Item]. Some f0 <> input} (! {false} any) ]
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  type t_B
  
  predicate next_precondition_I (iter'0: t_I) (func'0: t_F) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_F func'0 e
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate preservation_I (iter'0: t_I) (func'0: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current e1 f.final b]. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current e1 -> postcondition_mut_F f.current e1 f.final b -> precondition_F f.final e2
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: t_F. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 /\ preservation_I iter'0.final func'0
  
  predicate invariant_Map_I_F (self: t_Map_I_F) =
    reinitialize_I /\ preservation_I self.iter self.func /\ next_precondition_I self.iter self.func
  
  function produces_one_invariant_I (self: t_Map_I_F) (e: t_Item) (r: t_B) (f: MutBorrow.t t_F) (iter'0: t_I) : () = ()
  
  axiom produces_one_invariant_I_spec:
    forall self: t_Map_I_F, e: t_Item, r: t_B, f: MutBorrow.t t_F, iter'0: t_I. invariant_Map_I_F self
      -> produces_I self.iter (Seq.singleton e) iter'0
      -> f.current = self.func -> postcondition_mut_F f.current e f.final r -> preservation_I iter'0 f.final
  
  axiom produces_one_invariant_I_spec'0:
    forall self: t_Map_I_F, e: t_Item, r: t_B, f: MutBorrow.t t_F, iter'0: t_I. invariant_Map_I_F self
      -> produces_I self.iter (Seq.singleton e) iter'0
      -> f.current = self.func -> postcondition_mut_F f.current e f.final r -> next_precondition_I iter'0 f.final
  
  predicate inv_F (_1: t_F)
  
  predicate invariant_ref_F [@inline:trivial] (self: MutBorrow.t t_F) = inv_F self.current /\ inv_F self.final
  
  meta "rewrite_def" predicate invariant_ref_F
  
  predicate inv_ref_F [@inline:trivial] (_1: MutBorrow.t t_F) = invariant_ref_F _1
  
  meta "rewrite_def" predicate inv_ref_F
  
  predicate inv_tup1_Item [@inline:trivial] (_1: t_Item) = inv_Item _1
  
  meta "rewrite_def" predicate inv_tup1_Item
  
  predicate inv_B (_1: t_B)
  
  let rec call_mut_F (self_: MutBorrow.t t_F) (arg: t_Item) (return (x: t_B)) =
    {[@expl:call_mut 'self_' type invariant] inv_ref_F self_}
    {[@expl:call_mut 'arg' type invariant] inv_tup1_Item arg}
    {[@expl:call_mut requires] precondition_F self_.current arg}
    any
    [ return (result: t_B) -> {inv_B result}
      {postcondition_mut_F self_.current arg self_.final result}
      (! return {result}) ]
  
  predicate inv_Map_I_F (_1: t_Map_I_F)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Map_I_F [inv_Map_I_F x]. inv_Map_I_F x
      = (invariant_Map_I_F x /\ inv_I x.iter /\ inv_F x.func)
  
  predicate invariant_ref_Map_I_F [@inline:trivial] (self: MutBorrow.t t_Map_I_F) =
    inv_Map_I_F self.current /\ inv_Map_I_F self.final
  
  meta "rewrite_def" predicate invariant_ref_Map_I_F
  
  predicate inv_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = invariant_ref_Map_I_F _1
  
  meta "rewrite_def" predicate inv_ref_Map_I_F
  
  predicate resolve_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Map_I_F
  
  type t_Option_B = None'0 | Some'0 t_B
  
  predicate inv_Option_B (_1: t_Option_B)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option_B [inv_Option_B x]. inv_Option_B x
      = match x with
        | None'0 -> true
        | Some'0 f0 -> inv_B f0
        end
  
  predicate completed_Map_I_F (self: MutBorrow.t t_Map_I_F) =
    completed_I (MutBorrow.borrow_logic self.current.iter self.final.iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ self.current.func = self.final.func
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current (Seq.get s i)
          /\ postcondition_mut_F (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  predicate produces_one_I (self: t_Map_I_F) (visited: t_B) (succ: t_Map_I_F) =
    exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut_F f.current e f.final visited]. f.current = self.func
      /\ f.final = succ.func
      /\ produces_I self.iter (Seq.singleton e) succ.iter
      /\ precondition_F f.current e /\ postcondition_mut_F f.current e f.final visited
  
  axiom produces_one_I_spec: forall self: t_Map_I_F, visited: t_B, succ: t_Map_I_F. produces_one_I self visited succ
      = produces_Map_I_F self (Seq.singleton visited) succ
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_Map_I_F (self: MutBorrow.t t_Map_I_F) (return (x: t_Option_B)) =
    {[@expl:next 'self' type invariant] inv_ref_Map_I_F self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_I self.current.iter}
        MutBorrow.borrow_final <t_I> {self.current.iter} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_4 <- _ret ] -{inv_I _ret.final}-
            [ &self <- { self with current = { self.current with iter = _ret.final } } ] s1)
      | s1 = next_I {_4} (fun (_ret: t_Option_Item) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = any [ br0 -> {_3 = None} (! bb4) | br1 (x0: t_Item) -> {_3 = Some x0} (! bb5) ]
    | bb5 = s0
      [ s0 = elim_Some {_3} (fun (r0: t_Item) -> [ &v <- r0 ] s1)
      | s1 = {[@expl:assertion] precondition_F self.current.func v} s2
      | s2 = [ &_9 <- () ] s3
      | s3 = bb6 ]
    | bb6 = s0
      [ s0 = {inv_F self.current.func}
        MutBorrow.borrow_final <t_F> {self.current.func} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
          (fun (_ret: MutBorrow.t t_F) ->
            [ &_12 <- _ret ] -{inv_F _ret.final}-
            [ &self <- { self with current = { self.current with func = _ret.final } } ] s1)
      | s1 = [ &_13 <- v ] s2
      | s2 = call_mut_F {_12} {_13} (fun (_ret: t_B) -> [ &_11 <- _ret ] s3)
      | s3 = bb7 ]
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Map_I_F self} s1 | s1 = -{resolve_ref_Map_I_F self}- s2 | s2 = bb8 ]
    | bb8 = s0 [ s0 = [ &_0 <- Some'0 _11 ] s1 | s1 = bb12 ]
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Map_I_F self} s1
      | s1 = -{resolve_ref_Map_I_F self}- s2
      | s2 = [ &_0 <- None'0 ] s3
      | s3 = bb12 ]
    | bb12 = return {_0} ]
    [ & _0: t_Option_B = Any.any_l ()
    | & self: MutBorrow.t t_Map_I_F = self
    | & _3: t_Option_Item = Any.any_l ()
    | & _4: MutBorrow.t t_I = Any.any_l ()
    | & v: t_Item = Any.any_l ()
    | & _9: () = Any.any_l ()
    | & _11: t_B = Any.any_l ()
    | & _12: MutBorrow.t t_F = Any.any_l ()
    | & _13: t_Item = Any.any_l () ])
    [ return (result: t_Option_B) -> {[@expl:next result type invariant] inv_Option_B result}
      {[@expl:next ensures] match result with
        | None'0 -> completed_Map_I_F self
        | Some'0 v -> produces_one_I self.current v self.final
        end}
      (! return {result}) ]
end
module M_impl_Map_I_F__produces_one_invariant (* Map<I, F> *)
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  type t_B
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  predicate next_precondition_I (iter'0: t_I) (func'0: t_F) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_F func'0 e
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate preservation_I (iter'0: t_I) (func'0: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current e1 f.final b]. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current e1 -> postcondition_mut_F f.current e1 f.final b -> precondition_F f.final e2
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: t_F. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 /\ preservation_I iter'0.final func'0
  
  predicate invariant_Map_I_F (self: t_Map_I_F) =
    reinitialize_I /\ preservation_I self.iter self.func /\ next_precondition_I self.iter self.func
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map_I_F
  
  constant e : t_Item
  
  constant r : t_B
  
  constant f : MutBorrow.t t_F
  
  constant iter'0 : t_I
  
  function produces_one_invariant_I (self: t_Map_I_F) (e: t_Item) (r: t_B) (f: MutBorrow.t t_F) (iter'0: t_I) : ()
  
  goal vc_produces_one_invariant_I: invariant_Map_I_F self
    -> produces_I self.iter (Seq.singleton e) iter'0
    -> f.current = self.func
    -> postcondition_mut_F f.current e f.final r
    -> (forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, i: t_I. produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
        -> produces_I self.iter (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
    && ([@expl:produces_one_invariant ensures #0] preservation_I iter'0 f.final)
    && ([@expl:produces_one_invariant ensures #1] next_precondition_I iter'0 f.final)
end
module M_impl_Map_I_F__produces_one (* Map<I, F> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  type t_B
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current (Seq.get s i)
          /\ postcondition_mut_F (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  function produces_trans_Map_I_F (a: t_Map_I_F) (ab: Seq.seq t_B) (b: t_Map_I_F) (bc: Seq.seq t_B) (c: t_Map_I_F) : ()
   = ()
  
  axiom produces_trans_Map_I_F_spec:
    forall a: t_Map_I_F, ab: Seq.seq t_B, b: t_Map_I_F, bc: Seq.seq t_B, c: t_Map_I_F. produces_Map_I_F a ab b
      -> produces_Map_I_F b bc c -> produces_Map_I_F a (Seq.(++) ab bc) c
  
  function produces_refl_Map_I_F (self: t_Map_I_F) : () = ()
  
  axiom produces_refl_Map_I_F_spec: forall self: t_Map_I_F. produces_Map_I_F self (Seq.empty: Seq.seq t_B) self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Map_I_F
  
  constant visited : t_B
  
  constant succ : t_Map_I_F
  
  predicate produces_one_I (self: t_Map_I_F) (visited: t_B) (succ: t_Map_I_F)
  
  goal vc_produces_one_I:
    [@expl:produces_one ensures] (exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut_F f.current e f.final visited]. f.current
          = self.func
        /\ f.final = succ.func
        /\ produces_I self.iter (Seq.singleton e) succ.iter
        /\ precondition_F f.current e /\ postcondition_mut_F f.current e f.final visited)
    = produces_Map_I_F self (Seq.singleton visited) succ
end
module M_map
  use creusot.prelude.Any
  use seq.Seq
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  predicate inv_I (_1: t_I)
  
  predicate inv_F (_1: t_F)
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate next_precondition_I (iter'0: t_I) (func'0: t_F) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_F func'0 e
  
  type t_B
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate preservation_I (iter'0: t_I) (func'0: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current e1 f.final b]. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current e1 -> postcondition_mut_F f.current e1 f.final b -> precondition_F f.final e2
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: t_F. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 /\ preservation_I iter'0.final func'0
  
  predicate invariant_Map_I_F (self: t_Map_I_F) =
    reinitialize_I /\ preservation_I self.iter self.func /\ next_precondition_I self.iter self.func
  
  predicate inv_Map_I_F (_1: t_Map_I_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map_I_F [inv_Map_I_F x]. inv_Map_I_F x
      = (invariant_Map_I_F x /\ inv_I x.iter /\ inv_F x.func)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec map_I (iter'0: t_I) (func'0: t_F) (return (x: t_Map_I_F)) = {[@expl:map 'iter' type invariant] inv_I iter'0}
    {[@expl:map 'func' type invariant] inv_F func'0}
    {[@expl:map requires #0] forall e: t_Item, i2: t_I. produces_I iter'0 (Seq.singleton e) i2
      -> precondition_F func'0 e}
    {[@expl:map requires #1] reinitialize_I}
    {[@expl:map requires #2] preservation_I iter'0 func'0}
    (! bb0
    [ bb0 = bb1 | bb1 = s0 [ s0 = [ &_0 <- { iter = iter'0; func = func'0 } ] s1 | s1 = bb5 ] | bb5 = return {_0} ]
    [ & _0: t_Map_I_F = Any.any_l () | & iter'0: t_I = iter'0 | & func'0: t_F = func'0 ])
    [ return (result: t_Map_I_F) -> {[@expl:map result type invariant] inv_Map_I_F result}
      {[@expl:map ensures] result = { iter = iter'0; func = func'0 }}
      (! return {result}) ]
end
module M_impl_Iterator_for_Map_I_F__next__refines (* <Map<I, F> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate completed_I (self: MutBorrow.t t_I)
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  predicate next_precondition_I (iter'0: t_I) (func'0: t_F) =
    forall e: t_Item, i: t_I [produces_I iter'0 (Seq.singleton e) i]. produces_I iter'0 (Seq.singleton e) i
      -> precondition_F func'0 e
  
  type t_B
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate preservation_I (iter'0: t_I) (func'0: t_F) =
    forall s: Seq.seq t_Item, e1: t_Item, e2: t_Item, f: MutBorrow.t t_F, b: t_B, i: t_I [produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i, postcondition_mut_F f.current e1 f.final b]. hist_inv_F func'0 f.current
      -> produces_I iter'0 (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition_F f.current e1 -> postcondition_mut_F f.current e1 f.final b -> precondition_F f.final e2
  
  predicate reinitialize_I =
    forall iter'0: MutBorrow.t t_I, func'0: t_F. completed_I iter'0
      -> next_precondition_I iter'0.final func'0 /\ preservation_I iter'0.final func'0
  
  predicate invariant_Map_I_F (self: t_Map_I_F) =
    reinitialize_I /\ preservation_I self.iter self.func /\ next_precondition_I self.iter self.func
  
  predicate inv_I (_1: t_I)
  
  predicate inv_F (_1: t_F)
  
  predicate inv_Map_I_F (_1: t_Map_I_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map_I_F [inv_Map_I_F x]. inv_Map_I_F x
      = (invariant_Map_I_F x /\ inv_I x.iter /\ inv_F x.func)
  
  predicate invariant_ref_Map_I_F [@inline:trivial] (self: MutBorrow.t t_Map_I_F) =
    inv_Map_I_F self.current /\ inv_Map_I_F self.final
  
  meta "rewrite_def" predicate invariant_ref_Map_I_F
  
  predicate inv_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = invariant_ref_Map_I_F _1
  
  meta "rewrite_def" predicate inv_ref_Map_I_F
  
  type t_Option_B = None | Some t_B
  
  predicate completed_Map_I_F (self: MutBorrow.t t_Map_I_F) =
    completed_I (MutBorrow.borrow_logic self.current.iter self.final.iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ self.current.func = self.final.func
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current (Seq.get s i)
          /\ postcondition_mut_F (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  predicate produces_one_I (self: t_Map_I_F) (visited: t_B) (succ: t_Map_I_F) =
    exists f: MutBorrow.t t_F, e: t_Item [postcondition_mut_F f.current e f.final visited]. f.current = self.func
      /\ f.final = succ.func
      /\ produces_I self.iter (Seq.singleton e) succ.iter
      /\ precondition_F f.current e /\ postcondition_mut_F f.current e f.final visited
  
  axiom produces_one_I_spec: forall self: t_Map_I_F, visited: t_B, succ: t_Map_I_F. produces_one_I self visited succ
      = produces_Map_I_F self (Seq.singleton visited) succ
  
  predicate inv_B (_1: t_B)
  
  predicate inv_Option_B (_1: t_Option_B)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_B [inv_Option_B x]. inv_Option_B x
      = match x with
        | None -> true
        | Some f0 -> inv_B f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Map_I_F. inv_ref_Map_I_F self
      -> inv_ref_Map_I_F self
      /\ (forall result: t_Option_B. match result with
              | None -> completed_Map_I_F self
              | Some v -> produces_one_I self.current v self.final
              end
          /\ inv_Option_B result
        -> match result with
            | None -> completed_Map_I_F self
            | Some v -> produces_Map_I_F self.current (Seq.singleton v) self.final
            end
        /\ inv_Option_B result)
end
module M_impl_Iterator_for_Map_I_F__produces_refl__refines (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  type t_B
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current (Seq.get s i)
          /\ postcondition_mut_F (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Map_I_F. forall result: (). produces_Map_I_F self (Seq.empty: Seq.seq t_B) self
        -> produces_Map_I_F self (Seq.empty: Seq.seq t_B) self
end
module M_impl_Iterator_for_Map_I_F__produces_trans__refines (* <Map<I, F> as common::Iterator> *)
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  type t_B
  
  type t_Item
  
  predicate produces_I (self: t_I) (visited: Seq.seq t_Item) (o: t_I)
  
  function produces_trans_I (a: t_I) (ab: Seq.seq t_Item) (b: t_I) (bc: Seq.seq t_Item) (c: t_I) : ()
  
  axiom produces_trans_I_spec: forall a: t_I, ab: Seq.seq t_Item, b: t_I, bc: Seq.seq t_Item, c: t_I. produces_I a ab b
      -> produces_I b bc c -> produces_I a (Seq.(++) ab bc) c
  
  function produces_refl_I (self: t_I) : ()
  
  axiom produces_refl_I_spec: forall self: t_I. produces_I self (Seq.empty: Seq.seq t_Item) self
  
  predicate postcondition_once_F (self: t_F) (args: t_Item) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_Item) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_Item) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_Item, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_Item) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_Item, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  predicate precondition_F (self: t_F) (args: t_Item)
  
  predicate produces_Map_I_F [@inline:trivial] (self: t_Map_I_F) (visited: Seq.seq t_B) (succ: t_Map_I_F) =
    hist_inv_F self.func succ.func
    /\ (exists fs: Seq.seq (MutBorrow.t t_F). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq t_Item [produces_I self.iter s succ.iter]. Seq.length s = Seq.length visited
        /\ produces_I self.iter s succ.iter
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.func = succ.func
          else
            (Seq.get fs 0).current = self.func /\ (Seq.get fs (Seq.length visited - 1)).final = succ.func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv_F self.func (Seq.get fs i).current
          /\ precondition_F (Seq.get fs i).current (Seq.get s i)
          /\ postcondition_mut_F (Seq.get fs i).current (Seq.get s i) (Seq.get fs i).final (Seq.get visited i))))
  
  meta "rewrite_def" predicate produces_Map_I_F
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Map_I_F. forall ab: Seq.seq t_B. forall b: t_Map_I_F. forall bc: Seq.seq t_B. forall c: t_Map_I_F. produces_Map_I_F b bc c
                /\ produces_Map_I_F a ab b
              -> produces_Map_I_F b bc c
              /\ produces_Map_I_F a ab b
              /\ (forall result: (). produces_Map_I_F a (Seq.(++) ab bc) c -> produces_Map_I_F a (Seq.(++) ab bc) c)
end
