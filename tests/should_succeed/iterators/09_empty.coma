module M_09_empty__qyi7971881024803823682__produces_refl [#"09_empty.rs" 29 4 29 26] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty = "09_empty.rs" 28 4 28 49
  let%span s09_empty'0 = "09_empty.rs" 29 27 29 29
  let%span s09_empty'1 = "09_empty.rs" 23 20 23 56
  
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  type t_T
  
  predicate produces [#"09_empty.rs" 22 4 22 64] (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    [%#s09_empty'1] visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Empty
  
  function produces_refl [#"09_empty.rs" 29 4 29 26] (self'0: t_Empty) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] [%#s09_empty] produces self (Seq.empty: Seq.seq t_T) self
end
module M_09_empty__qyi7971881024803823682__produces_trans [#"09_empty.rs" 36 4 36 90] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty = "09_empty.rs" 33 4 33 34
  let%span s09_empty'0 = "09_empty.rs" 34 4 34 34
  let%span s09_empty'1 = "09_empty.rs" 35 4 35 44
  let%span s09_empty'2 = "09_empty.rs" 36 91 36 93
  let%span s09_empty'3 = "09_empty.rs" 23 20 23 56
  
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  type t_T
  
  predicate produces [#"09_empty.rs" 22 4 22 64] (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    [%#s09_empty'3] visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Empty
  
  constant ab : Seq.seq t_T
  
  constant b : t_Empty
  
  constant bc : Seq.seq t_T
  
  constant c : t_Empty
  
  function produces_trans [#"09_empty.rs" 36 4 36 90] (a'0: t_Empty) (ab'0: Seq.seq t_T) (b'0: t_Empty) (bc'0: Seq.seq t_T) (c'0: t_Empty) : ()
  
  goal vc_produces_trans: ([%#s09_empty] produces a ab b)
    -> ([%#s09_empty'0] produces b bc c)
    -> ([@expl:produces_trans ensures] [%#s09_empty'1] produces a (Seq.(++) ab bc) c)
end
module M_09_empty__qyi7971881024803823682__next [#"09_empty.rs" 42 4 42 35] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty = "09_empty.rs" 42 26 42 35
  let%span s09_empty'0 = "09_empty.rs" 38 14 41 5
  let%span s09_empty'1 = "09_empty.rs" 17 8 17 36
  let%span s09_empty'2 = "09_empty.rs" 23 20 23 56
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  predicate resolve (self: MutBorrow.t t_Empty) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_Empty) = resolve _0
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate completed [#"09_empty.rs" 16 4 16 35] (self: MutBorrow.t t_Empty) = [%#s09_empty'1] resolve self
  
  predicate produces [#"09_empty.rs" 22 4 22 64] (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    [%#s09_empty'2] visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next [#"09_empty.rs" 42 4 42 35] (self: MutBorrow.t t_Empty) (return' (x: t_Option)) = (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = [ &_0 <- C_None ] s2 | s2 = return''0 {_0} ] ]
    [ & _0: t_Option = Any.any_l () | & self'0: MutBorrow.t t_Empty = self ])
    [ return''0 (result: t_Option) -> {[@expl:next result type invariant] [%#s09_empty] inv'0 result}
      {[@expl:next ensures] [%#s09_empty'0] match result with
        | C_None -> completed self
        | C_Some v -> produces self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
end
module M_09_empty__qyi7971881024803823682__produces_refl__refines [#"09_empty.rs" 29 4 29 26] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty = "09_empty.rs" 29 4 29 26
  let%span s09_empty'0 = "09_empty.rs" 23 20 23 56
  
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  type t_T
  
  predicate produces [#"09_empty.rs" 22 4 22 64] (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    [%#s09_empty'0] visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s09_empty] forall self: t_Empty. forall result: (). produces self (Seq.empty: Seq.seq t_T) self
        -> produces self (Seq.empty: Seq.seq t_T) self
end
module M_09_empty__qyi7971881024803823682__produces_trans__refines [#"09_empty.rs" 36 4 36 90] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty = "09_empty.rs" 36 4 36 90
  let%span s09_empty'0 = "09_empty.rs" 23 20 23 56
  
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  type t_T
  
  predicate produces [#"09_empty.rs" 22 4 22 64] (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    [%#s09_empty'0] visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    [%#s09_empty] forall a: t_Empty. forall ab: Seq.seq t_T. forall b: t_Empty. forall bc: Seq.seq t_T. forall c: t_Empty. produces b bc c
                /\ produces a ab b
              -> produces b bc c
              /\ produces a ab b /\ (forall result: (). produces a (Seq.(++) ab bc) c -> produces a (Seq.(++) ab bc) c)
end
module M_09_empty__qyi7971881024803823682__next__refines [#"09_empty.rs" 42 4 42 35] (* <Empty<T> as common::Iterator> *)
  let%span s09_empty = "09_empty.rs" 42 4 42 35
  let%span s09_empty'0 = "09_empty.rs" 17 8 17 36
  let%span s09_empty'1 = "09_empty.rs" 23 20 23 56
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Empty = { t_Empty__0: () }
  
  predicate resolve (self: MutBorrow.t t_Empty) = [%#sresolve] self.final = self.current
  
  predicate completed [#"09_empty.rs" 16 4 16 35] (self: MutBorrow.t t_Empty) = [%#s09_empty'0] resolve self
  
  predicate produces [#"09_empty.rs" 22 4 22 64] (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    [%#s09_empty'1] visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#s09_empty] forall self: MutBorrow.t t_Empty. forall result: t_Option. match result with
              | C_None -> completed self
              | C_Some v -> produces self.current (Seq.singleton v) self.final
              end
          /\ inv'0 result
        -> match result with
            | C_None -> completed self
            | C_Some v -> produces self.current (Seq.singleton v) self.final
            end
        /\ inv'0 result
end
