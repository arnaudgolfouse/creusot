module M_09_empty__qyi7971881024803823682__produces_refl (* <Empty<T> as common::Iterator> *)
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  type t_T
  
  predicate produces (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Empty
  
  function produces_refl (self'0: t_Empty) : ()
  
  goal vc_produces_refl: [@expl:produces_refl ensures] produces self (Seq.empty: Seq.seq t_T) self
end
module M_09_empty__qyi7971881024803823682__produces_trans (* <Empty<T> as common::Iterator> *)
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  type t_T
  
  predicate produces (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Empty
  
  constant ab : Seq.seq t_T
  
  constant b : t_Empty
  
  constant bc : Seq.seq t_T
  
  constant c : t_Empty
  
  function produces_trans (a'0: t_Empty) (ab'0: Seq.seq t_T) (b'0: t_Empty) (bc'0: Seq.seq t_T) (c'0: t_Empty) : ()
  
  goal vc_produces_trans: produces a ab b
    -> produces b bc c -> ([@expl:produces_trans ensures] produces a (Seq.(++) ab bc) c)
end
module M_09_empty__qyi7971881024803823682__next (* <Empty<T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Empty) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Empty) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate completed (self: MutBorrow.t t_Empty) = resolve self
  
  predicate produces (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next (self: MutBorrow.t t_Empty) (return' (x: t_Option)) = (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = [ &_0 <- C_None ] s2 | s2 = return''0 {_0} ] ]
    [ & _0: t_Option = Any.any_l () | & self'0: MutBorrow.t t_Empty = self ])
    [ return''0 (result: t_Option) -> {[@expl:next result type invariant] inv'0 result}
      {[@expl:next ensures] match result with
        | C_None -> completed self
        | C_Some v -> produces self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
end
module M_09_empty__qyi7971881024803823682__produces_refl__refines (* <Empty<T> as common::Iterator> *)
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  type t_T
  
  predicate produces (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Empty. forall result: (). produces self (Seq.empty: Seq.seq t_T) self
        -> produces self (Seq.empty: Seq.seq t_T) self
end
module M_09_empty__qyi7971881024803823682__produces_trans__refines (* <Empty<T> as common::Iterator> *)
  use seq.Seq
  
  type t_Empty = { t_Empty__0: () }
  
  type t_T
  
  predicate produces (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Empty. forall ab: Seq.seq t_T. forall b: t_Empty. forall bc: Seq.seq t_T. forall c: t_Empty. produces b bc c
                /\ produces a ab b
              -> produces b bc c
              /\ produces a ab b /\ (forall result: (). produces a (Seq.(++) ab bc) c -> produces a (Seq.(++) ab bc) c)
end
module M_09_empty__qyi7971881024803823682__next__refines (* <Empty<T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_Empty = { t_Empty__0: () }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Empty) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_Empty) = resolve self
  
  predicate produces (self: t_Empty) (visited: Seq.seq t_T) (o: t_Empty) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Empty. forall result: t_Option. match result with
              | C_None -> completed self
              | C_Some v -> produces self.current (Seq.singleton v) self.final
              end
          /\ inv'0 result
        -> match result with
            | C_None -> completed self
            | C_Some v -> produces self.current (Seq.singleton v) self.final
            end
        /\ inv'0 result
end
