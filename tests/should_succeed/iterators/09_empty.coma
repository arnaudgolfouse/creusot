module M_impl_Iterator_for_Empty_T__produces_refl (* <Empty<T> as common::Iterator> *)
  use seq.Seq
  
  type t_Empty_T = { f0: () }
  
  type t_T
  
  predicate produces_Empty_T (self: t_Empty_T) (visited: Seq.seq t_T) (o: t_Empty_T) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Empty_T
  
  function produces_refl_Empty_T (self: t_Empty_T) : ()
  
  goal vc_produces_refl_Empty_T: [@expl:produces_refl ensures] produces_Empty_T self (Seq.empty: Seq.seq t_T) self
end
module M_impl_Iterator_for_Empty_T__produces_trans (* <Empty<T> as common::Iterator> *)
  use seq.Seq
  
  type t_Empty_T = { f0: () }
  
  type t_T
  
  predicate produces_Empty_T (self: t_Empty_T) (visited: Seq.seq t_T) (o: t_Empty_T) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : t_Empty_T
  
  constant ab : Seq.seq t_T
  
  constant b : t_Empty_T
  
  constant bc : Seq.seq t_T
  
  constant c : t_Empty_T
  
  function produces_trans_Empty_T (a: t_Empty_T) (ab: Seq.seq t_T) (b: t_Empty_T) (bc: Seq.seq t_T) (c: t_Empty_T) : ()
  
  goal vc_produces_trans_Empty_T: produces_Empty_T a ab b
    -> produces_Empty_T b bc c -> ([@expl:produces_trans ensures] produces_Empty_T a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Empty_T__next (* <Empty<T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  
  type t_Empty_T = { f0: () }
  
  predicate resolve_ref_Empty_T [@inline:trivial] (_1: MutBorrow.t t_Empty_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Empty_T
  
  type t_T
  
  type t_Option_T = None | Some t_T
  
  predicate inv_T (_1: t_T)
  
  predicate inv_Option_T (_1: t_Option_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_T [inv_Option_T x]. inv_Option_T x
      = match x with
        | None -> true
        | Some f0'0 -> inv_T f0'0
        end
  
  predicate completed_Empty_T (self: MutBorrow.t t_Empty_T) = resolve_ref_Empty_T self
  
  predicate produces_Empty_T (self: t_Empty_T) (visited: Seq.seq t_T) (o: t_Empty_T) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_Empty_T (self: MutBorrow.t t_Empty_T) (return (x: t_Option_T)) = (! bb0
    [ bb0 = s0 [ s0 = -{resolve_ref_Empty_T self}- s1 | s1 = [ &_0 <- None ] s2 | s2 = return {_0} ] ]
    [ & _0: t_Option_T = Any.any_l () | & self: MutBorrow.t t_Empty_T = self ])
    [ return (result: t_Option_T) -> {[@expl:next result type invariant] inv_Option_T result}
      {[@expl:next ensures] match result with
        | None -> completed_Empty_T self
        | Some v -> produces_Empty_T self.current (Seq.singleton v) self.final
        end}
      (! return {result}) ]
end
module M_impl_Iterator_for_Empty_T__produces_refl__refines (* <Empty<T> as common::Iterator> *)
  use seq.Seq
  
  type t_Empty_T = { f0: () }
  
  type t_T
  
  predicate produces_Empty_T (self: t_Empty_T) (visited: Seq.seq t_T) (o: t_Empty_T) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Empty_T. forall result: (). produces_Empty_T self (Seq.empty: Seq.seq t_T) self
        -> produces_Empty_T self (Seq.empty: Seq.seq t_T) self
end
module M_impl_Iterator_for_Empty_T__produces_trans__refines (* <Empty<T> as common::Iterator> *)
  use seq.Seq
  
  type t_Empty_T = { f0: () }
  
  type t_T
  
  predicate produces_Empty_T (self: t_Empty_T) (visited: Seq.seq t_T) (o: t_Empty_T) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines:
    forall a: t_Empty_T. forall ab: Seq.seq t_T. forall b: t_Empty_T. forall bc: Seq.seq t_T. forall c: t_Empty_T. produces_Empty_T b bc c
                /\ produces_Empty_T a ab b
              -> produces_Empty_T b bc c
              /\ produces_Empty_T a ab b
              /\ (forall result: (). produces_Empty_T a (Seq.(++) ab bc) c -> produces_Empty_T a (Seq.(++) ab bc) c)
end
module M_impl_Iterator_for_Empty_T__next__refines (* <Empty<T> as common::Iterator> *)
  use creusot.prelude.MutBorrow
  use seq.Seq
  
  type t_T
  
  type t_Option_T = None | Some t_T
  
  type t_Empty_T = { f0: () }
  
  predicate resolve_ref_Empty_T [@inline:trivial] (_1: MutBorrow.t t_Empty_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Empty_T
  
  predicate completed_Empty_T (self: MutBorrow.t t_Empty_T) = resolve_ref_Empty_T self
  
  predicate produces_Empty_T (self: t_Empty_T) (visited: Seq.seq t_T) (o: t_Empty_T) =
    visited = (Seq.empty: Seq.seq t_T) /\ self = o
  
  predicate inv_T (_1: t_T)
  
  predicate inv_Option_T (_1: t_Option_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_T [inv_Option_T x]. inv_Option_T x
      = match x with
        | None -> true
        | Some f0'0 -> inv_T f0'0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Empty_T. forall result: t_Option_T. match result with
              | None -> completed_Empty_T self
              | Some v -> produces_Empty_T self.current (Seq.singleton v) self.final
              end
          /\ inv_Option_T result
        -> match result with
            | None -> completed_Empty_T self
            | Some v -> produces_Empty_T self.current (Seq.singleton v) self.final
            end
        /\ inv_Option_T result
end
