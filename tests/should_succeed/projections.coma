module M_projections__copy_out_of_ref [#"projections.rs" 5 0 5 38]
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec copy_out_of_ref [#"projections.rs" 5 0 5 38] (x: UInt32.t) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x'0 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: UInt32.t = Any.any_l () | & x'0: UInt32.t = x ]) [ return''0 (result: UInt32.t) -> (! return' {result}) ]
end
module M_projections__copy_out_of_sum [#"projections.rs" 9 0 9 60]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 50 20 50 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Result = C_Ok (MutBorrow.t UInt32.t) | C_Err (MutBorrow.t UInt32.t)
  
  let rec v_Err (input: t_Result) (ret (field_0: MutBorrow.t UInt32.t)) = any
    [ good (field_0: MutBorrow.t UInt32.t) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: MutBorrow.t UInt32.t [C_Err field_0: t_Result]. C_Err field_0 <> input} (! {false} any) ]
  
  predicate resolve (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) = resolve _0
  
  let rec v_Ok (input: t_Result) (ret (field_0: MutBorrow.t UInt32.t)) = any
    [ good (field_0: MutBorrow.t UInt32.t) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: MutBorrow.t UInt32.t [C_Ok field_0: t_Result]. C_Ok field_0 <> input} (! {false} any) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec copy_out_of_sum [#"projections.rs" 9 0 9 60] (x: t_Result) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = any
      [ br0 (x0: MutBorrow.t UInt32.t) -> {x'0 = C_Ok x0} (! bb4)
      | br1 (x0: MutBorrow.t UInt32.t) -> {x'0 = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = v_Err {x'0} (fun (r0: MutBorrow.t UInt32.t) -> [ &y <- r0 ] s1)
      | s1 = -{resolve'0 y}- s2
      | s2 = [ &_0 <- y.current ] s3
      | s3 = bb5 ]
    | bb4 = s0
      [ s0 = v_Ok {x'0} (fun (r0: MutBorrow.t UInt32.t) -> [ &x'1 <- r0 ] s1)
      | s1 = -{resolve'0 x'1}- s2
      | s2 = [ &_0 <- x'1.current ] s3
      | s3 = bb5 ]
    | bb5 = return''0 {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x'0: t_Result = x
    | & x'1: MutBorrow.t UInt32.t = Any.any_l ()
    | & y: MutBorrow.t UInt32.t = Any.any_l () ]) [ return''0 (result: UInt32.t) -> (! return' {result}) ]
end
module M_projections__write_into_sum [#"projections.rs" 16 0 16 42]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 50 20 50 34
  let%span sprojections = "projections.rs" 18 24 18 26
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some UInt32.t
  
  let rec v_Some (input: t_Option) (ret (field_0: UInt32.t)) = any
    [ good (field_0: UInt32.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt32.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate resolve (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_Option) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_Option) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec write_into_sum [#"projections.rs" 16 0 16 42] (x: MutBorrow.t t_Option) (return' (x'0: ())) = (! bb0
    [ bb0 = any [ br0 -> {x'0.current = C_None} (! bb3) | br1 (x0: UInt32.t) -> {x'0.current = C_Some x0} (! bb4) ]
    | bb4 = s0
      [ s0 = v_Some {x'0.current}
          (fun (r0: UInt32.t) ->
            MutBorrow.borrow_final <UInt32.t> {r0} {MutBorrow.inherit_id (MutBorrow.get_id x'0) 1}
              (fun (_ret: MutBorrow.t UInt32.t) ->
                [ &y <- _ret ] [ &x'0 <- { x'0 with current = C_Some _ret.final } ] s1))
      | s1 = [ &y <- { y with current = ([%#sprojections] (10: UInt32.t)) } ] s2
      | s2 = -{resolve'0 y}- s3
      | s3 = -{resolve'2 x'0}- s4
      | s4 = bb5 ]
    | bb3 = s0 [ s0 = -{resolve'2 x'0}- s1 | s1 = bb5 ]
    | bb5 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & x'0: MutBorrow.t t_Option = x | & y: MutBorrow.t UInt32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_projections__f [#"projections.rs" 23 0 23 10]
  let%span sprojections = "projections.rs" 24 15 24 17
  let%span sprojections'0 = "projections.rs" 25 24 25 25
  let%span sprojections'1 = "projections.rs" 26 16 26 21
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec v_Some (input: t_Option) (ret (field_0: Int32.t)) = any
    [ good (field_0: Int32.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: Int32.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f [#"projections.rs" 23 0 23 10] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- C_Some ([%#sprojections] (10: Int32.t)) ] s1
      | s1 = any [ br0 -> {_2 = C_None} (! bb3) | br1 (x0: Int32.t) -> {_2 = C_Some x0} (! bb4) ] ]
    | bb4 = s0
      [ s0 = v_Some {_2} (fun (r0: Int32.t) -> [ &x <- r0 ] s1)
      | s1 = [ &_1 <- x = ([%#sprojections'0] (0: Int32.t)) ] s2
      | s2 = bb5 ]
    | bb3 = s0 [ s0 = [ &_1 <- [%#sprojections'1] false ] s1 | s1 = bb5 ]
    | bb5 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & _1: bool = Any.any_l ()
    | & _2: t_Option = Any.any_l ()
    | & x: Int32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
