module M_invariant_moves__test_invariant_move
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_Option = C_None | C_Some UInt32.t
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq UInt32.t = view self.current
  
  meta "rewrite_def" function view'0
  
  let rec pop (self_: MutBorrow.t t_Vec) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {match result with
        | C_Some t -> view self_.final = Seq.([..]) (view'0 self_) 0 (Seq.length (view'0 self_) - 1)
        /\ view'0 self_ = Seq.snoc (view self_.final) t
        | C_None -> self_.current = self_.final /\ Seq.length (view'0 self_) = 0
        end}
      (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Vec) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Vec) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_invariant_move (x: t_Vec) (return' (x'0: ())) = (! bb0
    [ bb0 = bb1
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:loop invariant] x'0 = x'0}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = MutBorrow.borrow_mut <t_Vec> {x'0}
              (fun (_ret: MutBorrow.t t_Vec) -> [ &_7 <- _ret ] [ &x'0 <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Vec> {_7.current} {MutBorrow.get_id _7}
              (fun (_ret: MutBorrow.t t_Vec) -> [ &_6 <- _ret ] [ &_7 <- { _7 with current = _ret.final } ] s2)
          | s2 = pop {_6} (fun (_ret: t_Option) -> [ &_5 <- _ret ] s3)
          | s3 = bb3 ]
        | bb3 = s0
          [ s0 = -{resolve'0 _7}- s1
          | s1 = any [ br0 -> {_5 = C_None} (! bb7) | br1 (x0: UInt32.t) -> {_5 = C_Some x0} (! bb1'0) ] ] ] ]
    | bb7 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & x'0: t_Vec = x
    | & _5: t_Option = Any.any_l ()
    | & _6: MutBorrow.t t_Vec = Any.any_l ()
    | & _7: MutBorrow.t t_Vec = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
