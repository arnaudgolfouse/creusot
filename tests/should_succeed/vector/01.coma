module M_all_zero
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_u32_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_u32_Global (self: t_Vec_u32_Global) : Seq.seq UInt32.t
  
  axiom view_Vec_u32_Global_spec: forall self: t_Vec_u32_Global. Seq.length (view_Vec_u32_Global self)
      <= UInt64.t'int const_MAX
  
  let rec len_u32 (self_: t_Vec_u32_Global) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_u32_Global self_)} (! return {result}) ]
  
  type t_Range_usize = { start: UInt64.t; end': UInt64.t }
  
  let rec into_iter_Range_usize (self_: t_Range_usize) (return (x: t_Range_usize)) = any
    [ return (result: t_Range_usize) -> {result = self_} (! return {result}) ]
  
  function index_Vec_u32_Global [@inline:trivial] (self: t_Vec_u32_Global) (ix: int) : UInt32.t =
    Seq.get (view_Vec_u32_Global self) ix
  
  meta "rewrite_def" function index_Vec_u32_Global
  
  function deep_model_usize [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model_usize
  
  predicate produces_Range_usize (self: t_Range_usize) (visited: Seq.seq UInt64.t) (o: t_Range_usize) =
    self.end' = o.end'
    /\ deep_model_usize self.start <= deep_model_usize o.start
    /\ (Seq.length visited > 0 -> deep_model_usize o.start <= deep_model_usize o.end')
    /\ Seq.length visited = deep_model_usize o.start - deep_model_usize self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_usize (Seq.get visited i) = deep_model_usize self.start + i)
  
  function produces_trans_Range_usize (a: t_Range_usize) (ab: Seq.seq UInt64.t) (b: t_Range_usize) (bc: Seq.seq UInt64.t) (c: t_Range_usize) : ()
  
  axiom produces_trans_Range_usize_spec:
    forall a: t_Range_usize, ab: Seq.seq UInt64.t, b: t_Range_usize, bc: Seq.seq UInt64.t, c: t_Range_usize. produces_Range_usize a ab b
      -> produces_Range_usize b bc c -> produces_Range_usize a (Seq.(++) ab bc) c
  
  function produces_refl_Range_usize (self: t_Range_usize) : ()
  
  axiom produces_refl_Range_usize_spec:
    forall self: t_Range_usize. produces_Range_usize self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv_Range_usize [@inline:trivial] (_1: t_Range_usize) = true
  
  meta "rewrite_def" predicate inv_Range_usize
  
  predicate inv_Seq_usize [@inline:trivial] (_1: Seq.seq UInt64.t) = true
  
  meta "rewrite_def" predicate inv_Seq_usize
  
  type t_Option_usize = None | Some UInt64.t
  
  predicate resolve_ref_Range_usize [@inline:trivial] (_1: MutBorrow.t t_Range_usize) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_usize
  
  predicate completed_Range_usize (self: MutBorrow.t t_Range_usize) =
    resolve_ref_Range_usize self /\ deep_model_usize self.current.start >= deep_model_usize self.current.end'
  
  let rec next_Range_usize (self_: MutBorrow.t t_Range_usize) (return (x: t_Option_usize)) = any
    [ return (result: t_Option_usize) -> {match result with
        | None -> completed_Range_usize self_
        | Some v -> produces_Range_usize self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_usize) (ret (f0: UInt64.t)) = any
    [ good (f0: UInt64.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: UInt64.t [Some f0: t_Option_usize]. Some f0 <> input} (! {false} any) ]
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt32.t) =
    UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt32.t) (out: UInt32.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  predicate resolve_elswhere_usize [@inline:trivial] (self: UInt64.t) (old': Seq.seq UInt32.t) (fin: Seq.seq UInt32.t) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere_usize
  
  let rec index_mut_Vec_u32_Global (self_: MutBorrow.t t_Vec_u32_Global) (ix: UInt64.t)
    (return (x: MutBorrow.t UInt32.t)) =
    {[@expl:index_mut requires] in_bounds_usize ix (view_Vec_u32_Global self_.current)}
    any
    [ return (result: MutBorrow.t UInt32.t) -> {has_value_usize ix (view_Vec_u32_Global self_.current) result.current}
      {has_value_usize ix (view_Vec_u32_Global self_.final) result.final}
      {resolve_elswhere_usize ix (view_Vec_u32_Global self_.current) (view_Vec_u32_Global self_.final)}
      {Seq.length (view_Vec_u32_Global self_.final) = Seq.length (view_Vec_u32_Global self_.current)}
      (! return {result}) ]
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  predicate resolve_ref_Vec_u32_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_u32_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_u32_Global
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec all_zero (v: MutBorrow.t t_Vec_u32_Global) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = len_u32 {v.current} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_7 <- { start = (0: UInt64.t); end' = _8 } ] s1
      | s1 = into_iter_Range_usize {_7} (fun (_ret: t_Range_usize) -> [ &iter <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &old_6_0 <- v ] s1 | s1 = bb6 ]
    | bb6 = bb6
      [ bb6 = {[@expl:mut invariant] old_6_0.final = v.final}
        {[@expl:for invariant] inv_Seq_usize produced}
        {[@expl:for invariant] inv_Range_usize iter}
        {[@expl:for invariant] produces_Range_usize iter_old produced iter}
        {[@expl:loop invariant #0] Seq.length (view_Vec_u32_Global v.current)
        = Seq.length (view_Vec_u32_Global old_v.current)}
        {[@expl:loop invariant #1] forall j: int. 0 <= j /\ j < Seq.length produced
          -> index_Vec_u32_Global v.current j = (0: UInt32.t)}
        (! s0)
        [ s0 = bb7 ]
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_usize> {iter}
              (fun (_ret: MutBorrow.t t_Range_usize) -> [ &_23 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_usize> {_23.current} {MutBorrow.get_id _23}
              (fun (_ret: MutBorrow.t t_Range_usize) ->
                [ &_22 <- _ret ] [ &_23 <- { _23 with current = _ret.final } ] s2)
          | s2 = next_Range_usize {_22} (fun (_ret: t_Option_usize) -> [ &_21 <- _ret ] s3)
          | s3 = bb8 ]
        | bb8 = s0
          [ s0 = -{resolve_ref_Range_usize _23}- s1
          | s1 = any [ br0 -> {_21 = None} (! bb11) | br1 (x0: UInt64.t) -> {_21 = Some x0} (! bb12) ] ]
        | bb12 = s0
          [ s0 = elim_Some {_21} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_26 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb13 ]
        | bb13 = s0
          [ s0 = [ &produced <- _26 ] s1
          | s1 = [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = MutBorrow.borrow_mut <t_Vec_u32_Global> {v.current}
              (fun (_ret: MutBorrow.t t_Vec_u32_Global) ->
                [ &_30 <- _ret ] [ &v <- { v with current = _ret.final } ] s3)
          | s3 = index_mut_Vec_u32_Global {_30} {i} (fun (_ret: MutBorrow.t UInt32.t) -> [ &_29 <- _ret ] s4)
          | s4 = bb14 ]
        | bb14 = s0
          [ s0 = [ &_29 <- { _29 with current = (0: UInt32.t) } ] s1 | s1 = -{resolve_ref_u32 _29}- s2 | s2 = bb6 ] ] ]
    | bb11 = s0 [ s0 = -{resolve_ref_Vec_u32_Global v}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec_u32_Global = v
    | & old_v: MutBorrow.t t_Vec_u32_Global = Any.any_l ()
    | & iter: t_Range_usize = Any.any_l ()
    | & _7: t_Range_usize = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & iter_old: t_Range_usize = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _21: t_Option_usize = Any.any_l ()
    | & _22: MutBorrow.t t_Range_usize = Any.any_l ()
    | & _23: MutBorrow.t t_Range_usize = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _26: Seq.seq UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _29: MutBorrow.t UInt32.t = Any.any_l ()
    | & _30: MutBorrow.t t_Vec_u32_Global = Any.any_l ()
    | & old_6_0: MutBorrow.t t_Vec_u32_Global = Any.any_l () ])
    [ return (result: ()) -> {[@expl:all_zero ensures #0] forall i: int. 0 <= i
          /\ i < Seq.length (view_Vec_u32_Global v.final) -> index_Vec_u32_Global v.final i = (0: UInt32.t)}
      {[@expl:all_zero ensures #1] Seq.length (view_Vec_u32_Global v.current)
      = Seq.length (view_Vec_u32_Global v.final)}
      (! return {result}) ]
end
