module M_01__all_zero [#"01.rs" 7 0 7 33]
  let%span s01 = "01.rs" 8 16 8 31
  let%span s01'0 = "01.rs" 11 13 11 14
  let%span s01'1 = "01.rs" 11 4 11 7
  let%span s01'2 = "01.rs" 11 4 11 7
  let%span s01'3 = "01.rs" 10 16 10 71
  let%span s01'4 = "01.rs" 9 16 9 40
  let%span s01'5 = "01.rs" 11 4 11 7
  let%span s01'6 = "01.rs" 11 4 11 7
  let%span s01'7 = "01.rs" 12 15 12 16
  let%span s01'8 = "01.rs" 5 10 5 65
  let%span s01'9 = "01.rs" 6 10 6 33
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 111 26 111 48
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 48 8 48 31
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 180 16 180 48
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 181 16 181 56
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 182 16 182 59
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 183 16 183 64
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 184 26 184 55
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 215 18 215 32
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 93 26 96 17
  let%span smodel = "../../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span ssnapshot = "../../../creusot-contracts/src/snapshot.rs" 57 4 57 26
  let%span srange = "../../../creusot-contracts/src/std/iter/range.rs" 23 12 27 70
  let%span srange'0 = "../../../creusot-contracts/src/std/iter/range.rs" 32 4 32 49
  let%span srange'1 = "../../../creusot-contracts/src/std/iter/range.rs" 36 4 36 34
  let%span srange'2 = "../../../creusot-contracts/src/std/iter/range.rs" 37 4 37 34
  let%span srange'3 = "../../../creusot-contracts/src/std/iter/range.rs" 38 4 38 44
  let%span srange'4 = "../../../creusot-contracts/src/std/iter/range.rs" 15 8 17 9
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 23 28 23 33
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 134 20 134 88
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'6] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 [@inline:trivial] (self: t_Vec) : Seq.seq UInt32.t = [%#smodel'0] view self
  
  meta "rewrite_def" function view'0
  
  let rec len (self_: t_Vec) (return' (x: UInt64.t)) = any
    [ return''0 (result: UInt64.t) -> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  type t_Range = { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter (self_: t_Range) (return' (x: t_Range)) = any
    [ return''0 (result: t_Range) -> {[%#siter] result = self_} (! return' {result}) ]
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : UInt32.t = [%#svec'0] Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  function view'1 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq UInt32.t = [%#smodel] view self.current
  
  meta "rewrite_def" function view'1
  
  function view'2 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq UInt32.t = [%#smodel'0] view'1 self
  
  meta "rewrite_def" function view'2
  
  function view'3 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq UInt32.t = [%#ssnapshot] view'2 self
  
  meta "rewrite_def" function view'3
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = [%#snum] UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    [%#srange] self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. ([%#srange'1] produces a ab b)
      -> ([%#srange'2] produces b bc c) -> ([%#srange'3] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#srange'0] produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv (_0: t_Range)
  
  axiom inv_axiom [@rewrite]: forall x: t_Range [inv x]. inv x = true
  
  predicate inv'0 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq UInt64.t [inv'0 x]. inv'0 x = true
  
  type t_Option = C_None | C_Some UInt64.t
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Range) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_Range) =
    [%#srange'4] resolve self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  let rec next (self_: MutBorrow.t t_Range) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#siter'0] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Range) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Some (input: t_Option) (ret (field_0: UInt64.t)) = any
    [ good (field_0: UInt64.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt32.t) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt32.t) (out: UInt32.t) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq UInt32.t) (fin: Seq.seq UInt32.t) =
    [%#sslice'1] forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
      -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: UInt64.t) (return' (x: MutBorrow.t UInt32.t)) =
    {[@expl:index_mut requires] [%#svec'1] in_bounds ix (view'1 self_)}
    any
    [ return''0 (result: MutBorrow.t UInt32.t) -> {[%#svec'2] has_value ix (view'1 self_) result.current}
      {[%#svec'3] has_value ix (view self_.final) result.final}
      {[%#svec'4] resolve_elswhere ix (view'1 self_) (view self_.final)}
      {[%#svec'5] Seq.length (view self_.final) = Seq.length (view'1 self_)}
      (! return' {result}) ]
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t UInt32.t) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_Vec) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: MutBorrow.t t_Vec) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec all_zero [#"01.rs" 7 0 7 33] (v: MutBorrow.t t_Vec) (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- [%#s01] v'0 ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = len {v'0.current} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_7 <- { t_Range__start = ([%#s01'0] (0: UInt64.t)); t_Range__end = _8 } ] s1
      | s1 = into_iter {_7} (fun (_ret: t_Range) -> [ &iter <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &iter_old <- [%#s01'1] iter ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &produced <- [%#s01'2] Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &old_6_0 <- v'0 ] s1 | s1 = bb6 ]
    | bb6 = bb6'0
      [ bb6'0 = {[@expl:mut invariant] old_6_0.final = v'0.final}
        {[@expl:for invariant] [%#s01'5] inv'0 produced}
        {[@expl:for invariant] [%#s01'5] inv iter}
        {[@expl:for invariant] [%#s01'5] produces iter_old produced iter}
        {[@expl:loop invariant #0] [%#s01'4] Seq.length (view'1 v'0) = Seq.length (view'3 old_v)}
        {[@expl:loop invariant #1] [%#s01'3] forall j: int. 0 <= j /\ j < Seq.length produced
          -> index_logic v'0.current j = (0: UInt32.t)}
        (! s0)
        [ s0 = bb7 ]
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_23 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_23.current} {MutBorrow.get_id _23}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_22 <- _ret ] [ &_23 <- { _23 with current = _ret.final } ] s2)
          | s2 = next {_22} (fun (_ret: t_Option) -> [ &_21 <- _ret ] s3)
          | s3 = bb8 ]
        | bb8 = s0
          [ s0 = -{resolve'0 _23}- s1
          | s1 = any [ br0 -> {_21 = C_None} (! bb11) | br1 (x0: UInt64.t) -> {_21 = C_Some x0} (! bb12) ] ]
        | bb12 = s0
          [ s0 = v_Some {_21} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_26 <- [%#s01'6] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb13 ]
        | bb13 = s0
          [ s0 = [ &produced <- _26 ] s1
          | s1 = [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = MutBorrow.borrow_mut <t_Vec> {v'0.current}
              (fun (_ret: MutBorrow.t t_Vec) -> [ &_30 <- _ret ] [ &v'0 <- { v'0 with current = _ret.final } ] s3)
          | s3 = index_mut {_30} {i} (fun (_ret: MutBorrow.t UInt32.t) -> [ &_29 <- _ret ] s4)
          | s4 = bb14 ]
        | bb14 = s0
          [ s0 = [ &_29 <- { _29 with current = ([%#s01'7] (0: UInt32.t)) } ] s1
          | s1 = -{resolve'2 _29}- s2
          | s2 = bb6'0 ] ] ]
    | bb11 = s0 [ s0 = -{resolve'4 v'0}- s1 | s1 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v'0: MutBorrow.t t_Vec = v
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _7: t_Range = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _21: t_Option = Any.any_l ()
    | & _22: MutBorrow.t t_Range = Any.any_l ()
    | & _23: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _26: Seq.seq UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _29: MutBorrow.t UInt32.t = Any.any_l ()
    | & _30: MutBorrow.t t_Vec = Any.any_l ()
    | & old_6_0: MutBorrow.t t_Vec = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:all_zero ensures #0] [%#s01'8] forall i: int. 0 <= i
          /\ i < Seq.length (view v.final) -> index_logic v.final i = (0: UInt32.t)}
      {[@expl:all_zero ensures #1] [%#s01'9] Seq.length (view'1 v) = Seq.length (view v.final)}
      (! return' {result}) ]
end
