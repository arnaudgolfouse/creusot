module M_06_knights_tour__qyi50474406909270761__clone [#"06_knights_tour.rs" 4 15 4 20] (* <Point as creusot_contracts::Clone> *)
  let%span s06_knights_tour = "06_knights_tour.rs" 6 4 7 16
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 35 26 35 41
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 179 14 179 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use creusot.int.Int64
  use creusot.prelude.Any
  
  type t_Point = { t_Point__x: Int64.t; t_Point__y: Int64.t }
  
  let rec clone' (self_: Int64.t) (return' (x: Int64.t)) = any
    [ return''0 (result: Int64.t) -> {[%#snum] result = self_} (! return' {result}) ]
  
  predicate postcondition_once (self: ()) (args: Int64.t) (result: Int64.t) = let self_ = args in result = self_
  
  predicate resolve (_0: ()) = true
  
  predicate postcondition_mut (self: ()) (args: Int64.t) (result_state: ()) (result: Int64.t) =
    let self_ = args in result = self_
  
  function fn_mut_once (self: ()) (args: Int64.t) (res: Int64.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: Int64.t, res: Int64.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) = true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: Int64.t) (res_state: ()) (res: Int64.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: Int64.t, res_state: (), res: Int64.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: Int64.t) (result: Int64.t) = let self_ = args in result = self_
  
  function fn_once (self: ()) (args: Int64.t) (res: Int64.t) : ()
  
  axiom fn_once_spec: forall self: (), args: Int64.t, res: Int64.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: Int64.t) (res_state: ()) (res: Int64.t) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: Int64.t, res_state: (), res: Int64.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec clone''0 [#"06_knights_tour.rs" 4 15 4 20] (self: t_Point) (return' (x: t_Point)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- self'0.t_Point__x ] s1 | s1 = clone' {_5} (fun (_ret: Int64.t) -> [ &_3 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_8 <- self'0.t_Point__y ] s1 | s1 = clone' {_8} (fun (_ret: Int64.t) -> [ &_6 <- _ret ] s2) | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- { t_Point__x = _3; t_Point__y = _6 } ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: t_Point = Any.any_l ()
    | & self'0: t_Point = self
    | & _3: Int64.t = Any.any_l ()
    | & _5: Int64.t = Any.any_l ()
    | & _6: Int64.t = Any.any_l ()
    | & _8: Int64.t = Any.any_l () ])
    [ return''0 (result: t_Point) ->
    {[@expl:clone ensures] [%#s06_knights_tour] postcondition () self.t_Point__x result.t_Point__x
      /\ postcondition () self.t_Point__y result.t_Point__y}
      (! return' {result}) ]
end
module M_06_knights_tour__qyi18370800917002056__mov [#"06_knights_tour.rs" 18 4 18 45] (* Point *)
  let%span s06_knights_tour = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour'0 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour'1 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour'2 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour'3 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour'4 = "06_knights_tour.rs" 17 14 17 41
  
  use creusot.int.Int64
  use creusot.prelude.Any
  use mach.int.Int
  
  type tuple = { _p0: Int64.t; _p1: Int64.t }
  
  type t_Point = { t_Point__x: Int64.t; t_Point__y: Int64.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec mov [#"06_knights_tour.rs" 18 4 18 45] (self: t_Point) (p: tuple) (return' (x: t_Point)) =
    {[@expl:mov requires #0] [%#s06_knights_tour] - 10000 <= Int64.to_int self.t_Point__x
    /\ Int64.to_int self.t_Point__x <= 10000}
    {[@expl:mov requires #1] [%#s06_knights_tour'0] - 10000 <= Int64.to_int self.t_Point__y
    /\ Int64.to_int self.t_Point__y <= 10000}
    {[@expl:mov requires #2] [%#s06_knights_tour'1] - 10000 <= Int64.to_int p._p0 /\ Int64.to_int p._p0 <= 10000}
    {[@expl:mov requires #3] [%#s06_knights_tour'2] - 10000 <= Int64.to_int p._p1 /\ Int64.to_int p._p1 <= 10000}
    (! bb0
    [ bb0 = s0
      [ s0 = Int64.add {self'0.t_Point__x} {p'0._p0} (fun (_ret: Int64.t) -> [ &_9 <- _ret ] s1)
      | s1 = Int64.add {self'0.t_Point__y} {p'0._p1} (fun (_ret: Int64.t) -> [ &_12 <- _ret ] s2)
      | s2 = [ &_0 <- { t_Point__x = _9; t_Point__y = _12 } ] s3
      | s3 = return''0 {_0} ] ]
    [ & _0: t_Point = Any.any_l ()
    | & self'0: t_Point = self
    | & p'0: tuple = p
    | & _9: Int64.t = Any.any_l ()
    | & _12: Int64.t = Any.any_l () ])
    [ return''0 (result: t_Point) -> {[@expl:mov ensures #0] [%#s06_knights_tour'3] Int64.to_int result.t_Point__x
      = Int64.to_int self.t_Point__x + Int64.to_int p._p0}
      {[@expl:mov ensures #1] [%#s06_knights_tour'4] Int64.to_int result.t_Point__y
      = Int64.to_int self.t_Point__y + Int64.to_int p._p1}
      (! return' {result}) ]
end
module M_06_knights_tour__qyi4580598960913230815__new [#"06_knights_tour.rs" 40 4 40 31] (* Board *)
  let%span s06_knights_tour = "06_knights_tour.rs" 41 20 41 21
  let%span s06_knights_tour'0 = "06_knights_tour.rs" 37 15 37 28
  let%span s06_knights_tour'1 = "06_knights_tour.rs" 38 14 38 33
  let%span s06_knights_tour'2 = "06_knights_tour.rs" 39 4 39 27
  let%span s06_knights_tour'3 = "06_knights_tour.rs" 44 28 44 29
  let%span s06_knights_tour'4 = "06_knights_tour.rs" 43 26 43 48
  let%span s06_knights_tour'5 = "06_knights_tour.rs" 32 12 34 87
  let%span s06_knights_tour'6 = "06_knights_tour.rs" 43 16 43 50
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 51 15 53 71
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 54 15 54 51
  let%span siter'1 = "../../../creusot-contracts/src/std/iter.rs" 55 15 55 70
  let%span siter'2 = "../../../creusot-contracts/src/std/iter.rs" 57 4 60 61
  let%span siter'3 = "../../../creusot-contracts/src/std/iter.rs" 56 14 56 89
  let%span siter'4 = "../../../creusot-contracts/src/std/iter.rs" 166 16 166 17
  let%span siter'5 = "../../../creusot-contracts/src/std/iter.rs" 166 26 167 119
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 214 22 214 41
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 215 22 215 70
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 306 20 306 32
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 50 8 50 31
  let%span srange = "../../../creusot-contracts/src/std/iter/range.rs" 34 4 34 49
  let%span srange'0 = "../../../creusot-contracts/src/std/iter/range.rs" 38 4 38 34
  let%span srange'1 = "../../../creusot-contracts/src/std/iter/range.rs" 39 4 39 34
  let%span srange'2 = "../../../creusot-contracts/src/std/iter/range.rs" 40 4 40 44
  let%span srange'3 = "../../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span srange'4 = "../../../creusot-contracts/src/std/iter/range.rs" 16 8 18 9
  let%span smap_inv = "../../../creusot-contracts/src/std/iter/map_inv.rs" 152 12 155 47
  let%span smap_inv'0 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 139 12 144 71
  let%span smap_inv'1 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 17 8 20 9
  let%span smap_inv'2 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9
  let%span smap_inv'3 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 116 12 118 63
  let%span smap_inv'4 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 57 8 57 48
  let%span smap_inv'5 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 24 4 24 49
  let%span smap_inv'6 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 28 4 28 34
  let%span smap_inv'7 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 29 4 29 34
  let%span smap_inv'8 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 30 4 30 44
  let%span smap_inv'9 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 73 12 75 73
  let%span smap_inv'10 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 123 14 123 83
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Range = { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  type closure3 = { _0: UInt64.t }
  
  predicate resolve (self: MutBorrow.t closure3) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0'0: MutBorrow.t closure3) = resolve _0'0
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'1] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : UInt64.t = [%#svec'3] Seq.get (view self) ix
  
  let rec from_elem (elem: UInt64.t) (n: UInt64.t) (return' (x: t_Vec)) = any
    [ return''0 (result: t_Vec) -> {[%#svec] Seq.length (view result) = UInt64.t'int n}
      {[%#svec'0] forall i: int. 0 <= i /\ i < UInt64.t'int n -> index_logic result i = elem}
      (! return' {result}) ]
  
  type tuple = { _p0: UInt64.t; _p1: Seq.seq UInt64.t }
  
  predicate postcondition_once (self: closure3) (args: tuple) (result: t_Vec) =
    [%#s06_knights_tour'6] let {_p0 = _0'0; _p1 = _1} = args in Seq.length (view result) = UInt64.t'int self._0
  
  predicate resolve'1 (_0'0: closure3) = true
  
  predicate hist_inv (self: closure3) (result_state: closure3) = [%#s06_knights_tour'6] result_state._0 = self._0
  
  predicate postcondition_mut (self: closure3) (args: tuple) (result_state: closure3) (result: t_Vec) =
    [%#s06_knights_tour'6] let {_p0 = _0'0; _p1 = _1} = args in Seq.length (view result) = UInt64.t'int result_state._0
    /\ hist_inv self result_state
  
  function fn_mut_once (self: closure3) (args: tuple) (res: t_Vec) : ()
  
  axiom fn_mut_once_spec: forall self: closure3, args: tuple, res: t_Vec. [%#sops'5] postcondition_once self args res
      = (exists res_state: closure3. postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  function hist_inv_trans (self: closure3) (b: closure3) (c: closure3) : ()
  
  axiom hist_inv_trans_spec: forall self: closure3, b: closure3, c: closure3. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: closure3) : ()
  
  axiom hist_inv_refl_spec: forall self: closure3. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure3) (args: tuple) (res_state: closure3) (res: t_Vec) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure3, args: tuple, res_state: closure3, res: t_Vec. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  let rec closure3 [#"06_knights_tour.rs" 43 16 43 50] (self: MutBorrow.t closure3) (_0'0: UInt64.t)
    (_1: Seq.seq UInt64.t) (return' (x: t_Vec)) = (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1'0}- s1
      | s1 = from_elem {[%#s06_knights_tour'3] (0: UInt64.t)} {(_1'0.current)._0}
          (fun (_ret: t_Vec) -> [ &res <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0'1 <- res ] s1 | s1 = bb3 ]
    | bb3 = return''0 {_0'1} ]
    [ & _0'1: t_Vec = Any.any_l () | & _1'0: MutBorrow.t closure3 = self | & res: t_Vec = Any.any_l () ])
    [ return''0 (result: t_Vec) -> {[@expl:closure ensures] [%#s06_knights_tour'4] Seq.length (view result)
      = UInt64.t'int (self.final)._0}
      {[@expl:closure hist_inv post] hist_inv self.current self.final}
      (! return' {result}) ]
  
  function deep_model (self: UInt64.t) : int = [%#snum] UInt64.t'int self
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    [%#srange'3] self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. ([%#srange'0] produces a ab b)
      -> ([%#srange'1] produces b bc c) -> ([%#srange'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#srange] produces self (Seq.empty: Seq.seq UInt64.t) self
  
  function produces_trans'0 (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec'0:
    forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. ([%#srange'0] produces a ab b)
      -> ([%#srange'1] produces b bc c) -> ([%#srange'2] produces a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self: t_Range) : ()
  
  axiom produces_refl_spec'0: forall self: t_Range. [%#srange] produces self (Seq.empty: Seq.seq UInt64.t) self
  
  type t_MapInv = { t_MapInv__iter: t_Range; t_MapInv__func: closure3; t_MapInv__produced: Seq.seq UInt64.t }
  
  predicate precondition (self: closure3) (args: tuple) =
    [%#s06_knights_tour'6] let {_p0 = _0'0; _p1 = _1} = args in true
  
  predicate resolve'2 (self: MutBorrow.t t_Range) = [%#sresolve] self.final = self.current
  
  predicate completed (self: MutBorrow.t t_Range) =
    [%#srange'4] resolve'2 self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  predicate next_precondition (iter: t_Range) (func: closure3) (produced: Seq.seq UInt64.t) =
    [%#smap_inv'3] forall e: UInt64.t, i: t_Range. produces iter (Seq.singleton e) i
      -> precondition func { _p0 = e; _p1 = produced }
  
  predicate preservation (iter: t_Range) (func: closure3) =
    [%#smap_inv'0] forall s: Seq.seq UInt64.t, e1: UInt64.t, e2: UInt64.t, f: MutBorrow.t closure3, b: t_Vec, i: t_Range. hist_inv func f.current
      -> produces iter (Seq.snoc (Seq.snoc s e1) e2) i
      -> precondition f.current { _p0 = e1; _p1 = s }
      -> postcondition_mut f.current { _p0 = e1; _p1 = s } f.final b
      -> precondition f.final { _p0 = e2; _p1 = Seq.snoc s e1 }
  
  predicate reinitialize =
    [%#smap_inv] forall iter: MutBorrow.t t_Range, func: closure3. completed iter
      -> next_precondition iter.final func (Seq.empty: Seq.seq UInt64.t) /\ preservation iter.final func
  
  predicate preservation_inv (iter: t_Range) (func: closure3) (produced: Seq.seq UInt64.t)
  
  axiom preservation_inv_spec:
    forall iter: t_Range, func: closure3, produced: Seq.seq UInt64.t. [%#smap_inv'10] produced
        = (Seq.empty: Seq.seq UInt64.t) -> preservation_inv iter func produced = preservation iter func
  
  predicate invariant' (self: t_MapInv) =
    [%#smap_inv'9] reinitialize
    /\ preservation_inv self.t_MapInv__iter self.t_MapInv__func self.t_MapInv__produced
    /\ next_precondition self.t_MapInv__iter self.t_MapInv__func self.t_MapInv__produced
  
  predicate inv (_0'0: t_MapInv)
  
  axiom inv_axiom [@rewrite]: forall x: t_MapInv [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_MapInv__iter = iter; t_MapInv__func = func; t_MapInv__produced = produced} -> true
        end)
  
  let rec map_inv (self: t_Range) (func: closure3) (return' (x: t_MapInv)) =
    {[@expl:map_inv requires #0] [%#siter] forall e: UInt64.t, i2: t_Range. produces self (Seq.singleton e) i2
      -> precondition func { _p0 = e; _p1 = Seq.empty: Seq.seq UInt64.t }}
    {[@expl:map_inv requires #1] [%#siter'0] reinitialize}
    {[@expl:map_inv requires #2] [%#siter'1] preservation self func}
    any
    [ return''0 (result: t_MapInv) -> {[%#siter'2] inv result}
      {[%#siter'3] result
      = { t_MapInv__iter = self; t_MapInv__func = func; t_MapInv__produced = Seq.empty: Seq.seq UInt64.t }}
      (! return' {result}) ]
  
  type t_RawVec'0 = { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0 = { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate resolve'3 (_0'0: t_Range) = true
  
  predicate resolve'4 (self: t_MapInv) = [%#smap_inv'4] resolve'3 self.t_MapInv__iter /\ resolve'1 self.t_MapInv__func
  
  predicate resolve'5 (_0'0: t_MapInv) = resolve'4 _0'0
  
  predicate produces'0 [@inline:trivial] (self: t_MapInv) (visited: Seq.seq t_Vec) (succ: t_MapInv) =
    [%#smap_inv'2] hist_inv self.t_MapInv__func succ.t_MapInv__func
    /\ (exists fs: Seq.seq (MutBorrow.t closure3). Seq.length fs = Seq.length visited
      /\ (exists s: Seq.seq UInt64.t. Seq.length s = Seq.length visited
        /\ produces self.t_MapInv__iter s succ.t_MapInv__iter
        /\ succ.t_MapInv__produced = Seq.(++) self.t_MapInv__produced s
        /\ (forall i: int. 1 <= i /\ i < Seq.length fs -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
        /\ (if Seq.length visited = 0 then
            self.t_MapInv__func = succ.t_MapInv__func
          else
            (Seq.get fs 0).current = self.t_MapInv__func
            /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_MapInv__func
          )
        /\ (forall i: int. 0 <= i /\ i < Seq.length visited
          -> hist_inv self.t_MapInv__func (Seq.get fs i).current
          /\ precondition (Seq.get fs i).current { _p0 = Seq.get s i;
                                                   _p1 = Seq.(++) self.t_MapInv__produced (Seq.([..]) s 0 i) }
          /\ postcondition_mut (Seq.get fs i).current { _p0 = Seq.get s i;
                                                        _p1 = Seq.(++) self.t_MapInv__produced (Seq.([..]) s 0 i) } (Seq.get fs i).final (Seq.get visited i))))
  
  function produces_trans'1 (a: t_MapInv) (ab: Seq.seq t_Vec) (b: t_MapInv) (bc: Seq.seq t_Vec) (c: t_MapInv) : ()
  
  axiom produces_trans_spec'1:
    forall a: t_MapInv, ab: Seq.seq t_Vec, b: t_MapInv, bc: Seq.seq t_Vec, c: t_MapInv. ([%#smap_inv'6] produces'0 a ab b)
      -> ([%#smap_inv'7] produces'0 b bc c) -> ([%#smap_inv'8] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self: t_MapInv) : ()
  
  axiom produces_refl_spec'1: forall self: t_MapInv. [%#smap_inv'5] produces'0 self (Seq.empty: Seq.seq t_Vec) self
  
  predicate completed'0 (self: MutBorrow.t t_MapInv) =
    [%#smap_inv'1] (self.final).t_MapInv__produced = (Seq.empty: Seq.seq UInt64.t)
    /\ completed (MutBorrow.borrow_logic (self.current).t_MapInv__iter (self.final).t_MapInv__iter (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ (self.current).t_MapInv__func = (self.final).t_MapInv__func
  
  function view'0 (self: t_Vec'0) : Seq.seq t_Vec
  
  axiom view_spec'0: forall self: t_Vec'0. [%#svec'1] Seq.length (view'0 self) <= UInt64.t'int const_MAX
  
  predicate from_iter_post (prod: Seq.seq t_Vec) (res: t_Vec'0) = [%#svec'2] prod = view'0 res
  
  let rec collect (self_: t_MapInv) (return' (x: t_Vec'0)) =
    {[@expl:collect 'self_' type invariant] [%#siter'4] inv self_}
    any
    [ return''0 (result: t_Vec'0) ->
    {[%#siter'5] exists done': MutBorrow.t t_MapInv, prod: Seq.seq t_Vec. resolve'5 done'.final
        /\ completed'0 done' /\ produces'0 self_ prod done'.current /\ from_iter_post prod result}
      (! return' {result}) ]
  
  type t_Board = { t_Board__size: UInt64.t; t_Board__field: t_Vec'0 }
  
  function index_logic'0 [@inline:trivial] (self: t_Vec'0) (ix: int) : t_Vec = [%#svec'3] Seq.get (view'0 self) ix
  
  predicate wf [#"06_knights_tour.rs" 30 4 30 23] (self: t_Board) =
    [%#s06_knights_tour'5] UInt64.t'int self.t_Board__size <= 1000
    /\ Seq.length (view'0 self.t_Board__field) = UInt64.t'int self.t_Board__size
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Board__size
      -> Seq.length (view (index_logic'0 self.t_Board__field i)) = UInt64.t'int self.t_Board__size)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new [#"06_knights_tour.rs" 40 4 40 31] (size: UInt64.t) (return' (x: t_Board)) =
    {[@expl:new requires] [%#s06_knights_tour'0] UInt64.t'int size <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_7 <- { t_Range__start = ([%#s06_knights_tour] (0: UInt64.t)); t_Range__end = size'0 } ] s1
      | s1 = [ &_9 <- { _0 = size'0 } ] s2
      | s2 = map_inv {_7} {_9} (fun (_ret: t_MapInv) -> [ &_6 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = collect {_6} (fun (_ret: t_Vec'0) -> [ &rows <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0'0 <- { t_Board__size = size'0; t_Board__field = rows } ] s1 | s1 = bb4 ]
    | bb4 = return''0 {_0'0} ]
    [ & _0'0: t_Board = Any.any_l ()
    | & size'0: UInt64.t = size
    | & rows: t_Vec'0 = Any.any_l ()
    | & _6: t_MapInv = Any.any_l ()
    | & _7: t_Range = Any.any_l ()
    | & _9: closure3 = Any.any_l () ])
    [ return''0 (result: t_Board) -> {[@expl:new ensures #0] [%#s06_knights_tour'1] result.t_Board__size = size}
      {[@expl:new ensures #1] [%#s06_knights_tour'2] wf result}
      (! return' {result}) ]
end
module M_06_knights_tour__qyi4580598960913230815__available [#"06_knights_tour.rs" 52 4 52 41] (* Board *)
  let%span s06_knights_tour = "06_knights_tour.rs" 53 8 53 9
  let%span s06_knights_tour'0 = "06_knights_tour.rs" 55 15 55 16
  let%span s06_knights_tour'1 = "06_knights_tour.rs" 57 57 57 58
  let%span s06_knights_tour'2 = "06_knights_tour.rs" 53 8 57 58
  let%span s06_knights_tour'3 = "06_knights_tour.rs" 50 4 50 26
  let%span s06_knights_tour'4 = "06_knights_tour.rs" 51 14 51 42
  let%span s06_knights_tour'5 = "06_knights_tour.rs" 32 12 34 87
  let%span s06_knights_tour'6 = "06_knights_tour.rs" 63 12 63 75
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 196 16 196 48
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 197 16 197 56
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 50 8 50 31
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 118 20 118 37
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 125 20 125 37
  let%span smodel = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  
  use creusot.int.Int64
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Point = { t_Point__x: Int64.t; t_Point__y: Int64.t }
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_Board = { t_Board__size: UInt64.t; t_Board__field: t_Vec }
  
  type t_RawVec'0 = { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0 = { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_Vec'0) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_Vec'0
  
  axiom view_spec: forall self: t_Vec. [%#svec'1] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: t_Vec) : Seq.seq t_Vec'0 = [%#smodel] view self
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_Vec'0) (out: t_Vec'0) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return' (x: t_Vec'0)) =
    {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
    any [ return''0 (result: t_Vec'0) -> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt64.t) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  function view'1 (self: t_Vec'0) : Seq.seq UInt64.t
  
  axiom view_spec'0: forall self: t_Vec'0. [%#svec'1] Seq.length (view'1 self) <= UInt64.t'int const_MAX
  
  function view'2 (self: t_Vec'0) : Seq.seq UInt64.t = [%#smodel] view'1 self
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt64.t) (out: UInt64.t) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self_: t_Vec'0) (ix: UInt64.t) (return' (x: UInt64.t)) =
    {[@expl:index requires] [%#svec] in_bounds'0 ix (view'2 self_)}
    any [ return''0 (result: UInt64.t) -> {[%#svec'0] has_value'0 ix (view'2 self_) result} (! return' {result}) ]
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_Vec'0 = [%#svec'2] Seq.get (view self) ix
  
  predicate wf [#"06_knights_tour.rs" 30 4 30 23] (self: t_Board) =
    [%#s06_knights_tour'5] UInt64.t'int self.t_Board__size <= 1000
    /\ Seq.length (view self.t_Board__field) = UInt64.t'int self.t_Board__size
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Board__size
      -> Seq.length (view'1 (index_logic self.t_Board__field i)) = UInt64.t'int self.t_Board__size)
  
  predicate in_bounds'1 [#"06_knights_tour.rs" 61 4 61 40] (self: t_Board) (p: t_Point) =
    [%#s06_knights_tour'6] 0 <= Int64.to_int p.t_Point__x
    /\ Int64.to_int p.t_Point__x < UInt64.t'int self.t_Board__size
    /\ 0 <= Int64.to_int p.t_Point__y /\ Int64.to_int p.t_Point__y < UInt64.t'int self.t_Board__size
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec available [#"06_knights_tour.rs" 52 4 52 41] (self: t_Board) (p: t_Point) (return' (x: bool)) =
    {[@expl:available requires] [%#s06_knights_tour'3] wf self}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- Int64.le ([%#s06_knights_tour] (0: Int64.t)) p'0.t_Point__x ] s1
      | s1 = any [ br0 -> {_5 = false} (! bb9) | br1 -> {_5} (! bb1) ] ]
    | bb1 = s0
      [ s0 = UInt64.of_int {Int64.to_int p'0.t_Point__x} (fun (_ret_from: UInt64.t) -> [ &_8 <- _ret_from ] s1)
      | s1 = [ &_7 <- UInt64.lt _8 self'0.t_Board__size ] s2
      | s2 = any [ br0 -> {_7 = false} (! bb9) | br1 -> {_7} (! bb2) ] ]
    | bb2 = s0
      [ s0 = [ &_11 <- Int64.le ([%#s06_knights_tour'0] (0: Int64.t)) p'0.t_Point__y ] s1
      | s1 = any [ br0 -> {_11 = false} (! bb9) | br1 -> {_11} (! bb3) ] ]
    | bb3 = s0
      [ s0 = UInt64.of_int {Int64.to_int p'0.t_Point__y} (fun (_ret_from: UInt64.t) -> [ &_14 <- _ret_from ] s1)
      | s1 = [ &_13 <- UInt64.lt _14 self'0.t_Board__size ] s2
      | s2 = any [ br0 -> {_13 = false} (! bb9) | br1 -> {_13} (! bb4) ] ]
    | bb4 = s0
      [ s0 = UInt64.of_int {Int64.to_int p'0.t_Point__x} (fun (_ret_from: UInt64.t) -> [ &_22 <- _ret_from ] s1)
      | s1 = index {self'0.t_Board__field} {_22} (fun (_ret: t_Vec'0) -> [ &_20 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = s0
      [ s0 = UInt64.of_int {Int64.to_int p'0.t_Point__y} (fun (_ret_from: UInt64.t) -> [ &_24 <- _ret_from ] s1)
      | s1 = index'0 {_20} {_24} (fun (_ret: UInt64.t) -> [ &_18 <- _ret ] s2)
      | s2 = bb11 ]
    | bb11 = s0 [ s0 = [ &_0 <- _18 = ([%#s06_knights_tour'1] (0: UInt64.t)) ] s1 | s1 = bb12 ]
    | bb9 = s0 [ s0 = [ &_0 <- [%#s06_knights_tour'2] false ] s1 | s1 = bb12 ]
    | bb12 = return''0 {_0} ]
    [ & _0: bool = Any.any_l ()
    | & self'0: t_Board = self
    | & p'0: t_Point = p
    | & _5: bool = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _14: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _20: t_Vec'0 = Any.any_l ()
    | & _22: UInt64.t = Any.any_l ()
    | & _24: UInt64.t = Any.any_l () ])
    [ return''0 (result: bool) -> {[@expl:available ensures] [%#s06_knights_tour'4] result -> in_bounds'1 self p}
      (! return' {result}) ]
end
module M_06_knights_tour__qyi4580598960913230815__count_degree [#"06_knights_tour.rs" 70 4 70 45] (* Board *)
  let%span s06_knights_tour = "06_knights_tour.rs" 71 24 71 25
  let%span s06_knights_tour'0 = "06_knights_tour.rs" 74 8 74 11
  let%span s06_knights_tour'1 = "06_knights_tour.rs" 74 8 74 11
  let%span s06_knights_tour'2 = "06_knights_tour.rs" 73 20 73 44
  let%span s06_knights_tour'3 = "06_knights_tour.rs" 74 8 74 11
  let%span s06_knights_tour'4 = "06_knights_tour.rs" 74 8 74 11
  let%span s06_knights_tour'5 = "06_knights_tour.rs" 77 25 77 26
  let%span s06_knights_tour'6 = "06_knights_tour.rs" 68 4 68 26
  let%span s06_knights_tour'7 = "06_knights_tour.rs" 69 4 69 34
  let%span s06_knights_tour'8 = "06_knights_tour.rs" 93 10 93 28
  let%span s06_knights_tour'9 = "06_knights_tour.rs" 94 10 94 123
  let%span s06_knights_tour'10 = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour'11 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour'12 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour'13 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour'14 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour'15 = "06_knights_tour.rs" 17 14 17 41
  let%span s06_knights_tour'16 = "06_knights_tour.rs" 50 4 50 26
  let%span s06_knights_tour'17 = "06_knights_tour.rs" 51 14 51 42
  let%span s06_knights_tour'18 = "06_knights_tour.rs" 32 12 34 87
  let%span s06_knights_tour'19 = "06_knights_tour.rs" 63 12 63 75
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 92 26 95 17
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 221 18 221 34
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 285 12 285 41
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 50 8 50 31
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 291 4 291 49
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 292 27 292 29
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 296 4 296 34
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 297 4 297 34
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 298 4 298 44
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 299 73 299 75
  let%span svec'9 = "../../../creusot-contracts/src/std/vec.rs" 278 8 278 61
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use creusot.int.Int64
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type tuple = { _p0: Int64.t; _p1: Int64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq tuple
  
  axiom view_spec: forall self: t_Vec. [%#svec'1] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : tuple = [%#svec'2] Seq.get (view self) ix
  
  let rec moves (return' (x: t_Vec)) = any
    [ return''0 (result: t_Vec) -> {[%#s06_knights_tour'8] Seq.length (view result) = 8}
      {[%#s06_knights_tour'9] forall i: int. 0 <= i /\ i < 8
        -> - 2 <= Int64.to_int (index_logic result i)._p0
        /\ Int64.to_int (index_logic result i)._p0 <= 2
        /\ - 2 <= Int64.to_int (index_logic result i)._p1 /\ Int64.to_int (index_logic result i)._p1 <= 2}
      (! return' {result}) ]
  
  type t_NonNull'0 = { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_ManuallyDrop = { t_ManuallyDrop__value: () }
  
  type t_IntoIter = {
    t_IntoIter__buf: t_NonNull'0;
    t_IntoIter__phantom: ();
    t_IntoIter__cap: UInt64.t;
    t_IntoIter__alloc: t_ManuallyDrop;
    t_IntoIter__ptr: t_NonNull'0;
    t_IntoIter__end: Opaque.ptr }
  
  function view'0 (self: t_IntoIter) : Seq.seq tuple
  
  let rec into_iter (self_: t_Vec) (return' (x: t_IntoIter)) = any
    [ return''0 (result: t_IntoIter) -> {[%#svec] view self_ = view'0 result} (! return' {result}) ]
  
  predicate produces (self: t_IntoIter) (visited: Seq.seq tuple) (rhs: t_IntoIter) =
    [%#svec'0] view'0 self = Seq.(++) visited (view'0 rhs)
  
  function produces_trans (a: t_IntoIter) (ab: Seq.seq tuple) (b: t_IntoIter) (bc: Seq.seq tuple) (c: t_IntoIter) : () =
    [%#svec'8] ()
  
  axiom produces_trans_spec:
    forall a: t_IntoIter, ab: Seq.seq tuple, b: t_IntoIter, bc: Seq.seq tuple, c: t_IntoIter. ([%#svec'5] produces a ab b)
      -> ([%#svec'6] produces b bc c) -> ([%#svec'7] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_IntoIter) : () = [%#svec'4] ()
  
  axiom produces_refl_spec: forall self: t_IntoIter. [%#svec'3] produces self (Seq.empty: Seq.seq tuple) self
  
  predicate inv (_0: t_IntoIter)
  
  axiom inv_axiom [@rewrite]: forall x: t_IntoIter [inv x]. inv x = true
  
  predicate inv'0 (_0: Seq.seq tuple)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq tuple [inv'0 x]. inv'0 x = true
  
  type t_Option = C_None | C_Some tuple
  
  predicate resolve (self: MutBorrow.t t_IntoIter) = [%#sresolve] self.final = self.current
  
  function view'1 (self: MutBorrow.t t_IntoIter) : Seq.seq tuple = [%#smodel] view'0 self.current
  
  predicate completed (self: MutBorrow.t t_IntoIter) =
    [%#svec'9] resolve self /\ view'1 self = (Seq.empty: Seq.seq tuple)
  
  let rec next (self_: MutBorrow.t t_IntoIter) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#siter] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  predicate resolve'0 (_0: MutBorrow.t t_IntoIter) = resolve _0
  
  let rec v_Some (input: t_Option) (ret (field_0: tuple)) = any
    [ good (field_0: tuple) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: tuple [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  type t_Point = { t_Point__x: Int64.t; t_Point__y: Int64.t }
  
  let rec mov (self: t_Point) (p: tuple) (return' (x: t_Point)) =
    {[@expl:mov requires #0] [%#s06_knights_tour'10] - 10000 <= Int64.to_int self.t_Point__x
    /\ Int64.to_int self.t_Point__x <= 10000}
    {[@expl:mov requires #1] [%#s06_knights_tour'11] - 10000 <= Int64.to_int self.t_Point__y
    /\ Int64.to_int self.t_Point__y <= 10000}
    {[@expl:mov requires #2] [%#s06_knights_tour'12] - 10000 <= Int64.to_int p._p0 /\ Int64.to_int p._p0 <= 10000}
    {[@expl:mov requires #3] [%#s06_knights_tour'13] - 10000 <= Int64.to_int p._p1 /\ Int64.to_int p._p1 <= 10000}
    any
    [ return''0 (result: t_Point) -> {[%#s06_knights_tour'14] Int64.to_int result.t_Point__x
      = Int64.to_int self.t_Point__x + Int64.to_int p._p0}
      {[%#s06_knights_tour'15] Int64.to_int result.t_Point__y = Int64.to_int self.t_Point__y + Int64.to_int p._p1}
      (! return' {result}) ]
  
  type t_RawVec'0 = { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0 = { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Board = { t_Board__size: UInt64.t; t_Board__field: t_Vec'0 }
  
  type t_RawVec'1 = { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1 = { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  function view'2 (self: t_Vec'0) : Seq.seq t_Vec'1
  
  axiom view_spec'0: forall self: t_Vec'0. [%#svec'1] Seq.length (view'2 self) <= UInt64.t'int const_MAX
  
  function view'3 (self: t_Vec'1) : Seq.seq UInt64.t
  
  axiom view_spec'1: forall self: t_Vec'1. [%#svec'1] Seq.length (view'3 self) <= UInt64.t'int const_MAX
  
  function index_logic'0 [@inline:trivial] (self: t_Vec'0) (ix: int) : t_Vec'1 = [%#svec'2] Seq.get (view'2 self) ix
  
  predicate wf [#"06_knights_tour.rs" 30 4 30 23] (self: t_Board) =
    [%#s06_knights_tour'18] UInt64.t'int self.t_Board__size <= 1000
    /\ Seq.length (view'2 self.t_Board__field) = UInt64.t'int self.t_Board__size
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Board__size
      -> Seq.length (view'3 (index_logic'0 self.t_Board__field i)) = UInt64.t'int self.t_Board__size)
  
  predicate in_bounds [#"06_knights_tour.rs" 61 4 61 40] (self: t_Board) (p: t_Point) =
    [%#s06_knights_tour'19] 0 <= Int64.to_int p.t_Point__x
    /\ Int64.to_int p.t_Point__x < UInt64.t'int self.t_Board__size
    /\ 0 <= Int64.to_int p.t_Point__y /\ Int64.to_int p.t_Point__y < UInt64.t'int self.t_Board__size
  
  let rec available (self: t_Board) (p: t_Point) (return' (x: bool)) =
    {[@expl:available requires] [%#s06_knights_tour'16] wf self}
    any [ return''0 (result: bool) -> {[%#s06_knights_tour'17] result -> in_bounds self p} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec count_degree [#"06_knights_tour.rs" 70 4 70 45] (self: t_Board) (p: t_Point) (return' (x: UInt64.t)) =
    {[@expl:count_degree requires #0] [%#s06_knights_tour'6] wf self}
    {[@expl:count_degree requires #1] [%#s06_knights_tour'7] in_bounds self p}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &count <- [%#s06_knights_tour] (0: UInt64.t) ] s1
      | s1 = moves (fun (_ret: t_Vec) -> [ &_8 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = into_iter {_8} (fun (_ret: t_IntoIter) -> [ &iter <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- [%#s06_knights_tour'0] iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- [%#s06_knights_tour'1] Seq.empty: Seq.seq tuple ] s1 | s1 = bb5 ]
    | bb5 = bb5'0
      [ bb5'0 = {[@expl:for invariant] [%#s06_knights_tour'3] inv'0 produced}
        {[@expl:for invariant] [%#s06_knights_tour'3] inv iter}
        {[@expl:for invariant] [%#s06_knights_tour'3] produces iter_old produced iter}
        {[@expl:loop invariant] [%#s06_knights_tour'2] UInt64.t'int count <= Seq.length produced}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_IntoIter> {iter}
              (fun (_ret: MutBorrow.t t_IntoIter) -> [ &_21 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_IntoIter> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret: MutBorrow.t t_IntoIter) -> [ &_20 <- _ret ] [ &_21 <- { _21 with current = _ret.final } ] s2)
          | s2 = next {_20} (fun (_ret: t_Option) -> [ &_19 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any [ br0 -> {_19 = C_None} (! bb18) | br1 (x0: tuple) -> {_19 = C_Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = v_Some {_19} (fun (r0: tuple) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_24 <- [%#s06_knights_tour'4] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _24 ] s1
          | s1 = [ &m <- __creusot_proc_iter_elem ] s2
          | s2 = [ &_30 <- m ] s3
          | s3 = mov {p'0} {_30} (fun (_ret: t_Point) -> [ &next'0 <- _ret ] s4)
          | s4 = bb13 ]
        | bb13 = s0 [ s0 = available {self'0} {next'0} (fun (_ret: bool) -> [ &_31 <- _ret ] s1) | s1 = bb14 ]
        | bb14 = any [ br0 -> {_31 = false} (! bb5'0) | br1 -> {_31} (! bb15) ]
        | bb15 = s0
          [ s0 = UInt64.add {count} {[%#s06_knights_tour'5] (1: UInt64.t)}
              (fun (_ret: UInt64.t) -> [ &count <- _ret ] s1)
          | s1 = bb5'0 ] ] ]
    | bb18 = s0 [ s0 = [ &_0 <- count ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l ()
    | & self'0: t_Board = self
    | & p'0: t_Point = p
    | & count: UInt64.t = Any.any_l ()
    | & iter: t_IntoIter = Any.any_l ()
    | & _8: t_Vec = Any.any_l ()
    | & iter_old: t_IntoIter = Any.any_l ()
    | & produced: Seq.seq tuple = Any.any_l ()
    | & _19: t_Option = Any.any_l ()
    | & _20: MutBorrow.t t_IntoIter = Any.any_l ()
    | & _21: MutBorrow.t t_IntoIter = Any.any_l ()
    | & __creusot_proc_iter_elem: tuple = Any.any_l ()
    | & _24: Seq.seq tuple = Any.any_l ()
    | & m: tuple = Any.any_l ()
    | & next'0: t_Point = Any.any_l ()
    | & _30: tuple = Any.any_l ()
    | & _31: bool = Any.any_l () ]) [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_06_knights_tour__qyi4580598960913230815__set [#"06_knights_tour.rs" 87 4 87 41] (* Board *)
  let%span s06_knights_tour = "06_knights_tour.rs" 83 4 83 26
  let%span s06_knights_tour'0 = "06_knights_tour.rs" 84 4 84 34
  let%span s06_knights_tour'1 = "06_knights_tour.rs" 85 14 85 26
  let%span s06_knights_tour'2 = "06_knights_tour.rs" 86 14 86 42
  let%span s06_knights_tour'3 = "06_knights_tour.rs" 32 12 34 87
  let%span s06_knights_tour'4 = "06_knights_tour.rs" 63 12 63 75
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 186 16 186 48
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 187 16 187 56
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 188 16 188 59
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 189 16 189 64
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 190 26 190 55
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 50 8 50 31
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 118 20 118 37
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 125 20 125 37
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 132 20 132 88
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use creusot.int.Int64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_Board = { t_Board__size: UInt64.t; t_Board__field: t_Vec }
  
  type t_Point = { t_Point__x: Int64.t; t_Point__y: Int64.t }
  
  type t_RawVec'0 = { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0 = { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_Vec'0) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_Vec'0
  
  axiom view_spec: forall self: t_Vec. [%#svec'4] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: MutBorrow.t t_Vec) : Seq.seq t_Vec'0 = [%#smodel] view self.current
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_Vec'0) (out: t_Vec'0) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq t_Vec'0) (fin: Seq.seq t_Vec'0) =
    [%#sslice'1] forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
      -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: UInt64.t) (return' (x: MutBorrow.t t_Vec'0)) =
    {[@expl:index_mut requires] [%#svec] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result: MutBorrow.t t_Vec'0) -> {[%#svec'0] has_value ix (view'0 self_) result.current}
      {[%#svec'1] has_value ix (view self_.final) result.final}
      {[%#svec'2] resolve_elswhere ix (view'0 self_) (view self_.final)}
      {[%#svec'3] Seq.length (view self_.final) = Seq.length (view'0 self_)}
      (! return' {result}) ]
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt64.t) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  function view'1 (self: t_Vec'0) : Seq.seq UInt64.t
  
  axiom view_spec'0: forall self: t_Vec'0. [%#svec'4] Seq.length (view'1 self) <= UInt64.t'int const_MAX
  
  function view'2 (self: MutBorrow.t t_Vec'0) : Seq.seq UInt64.t = [%#smodel] view'1 self.current
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt64.t) (out: UInt64.t) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  predicate resolve_elswhere'0 [@inline:trivial] (self: UInt64.t) (old': Seq.seq UInt64.t) (fin: Seq.seq UInt64.t) =
    [%#sslice'1] forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
      -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self_: MutBorrow.t t_Vec'0) (ix: UInt64.t) (return' (x: MutBorrow.t UInt64.t)) =
    {[@expl:index_mut requires] [%#svec] in_bounds'0 ix (view'2 self_)}
    any
    [ return''0 (result: MutBorrow.t UInt64.t) -> {[%#svec'0] has_value'0 ix (view'2 self_) result.current}
      {[%#svec'1] has_value'0 ix (view'1 self_.final) result.final}
      {[%#svec'2] resolve_elswhere'0 ix (view'2 self_) (view'1 self_.final)}
      {[%#svec'3] Seq.length (view'1 self_.final) = Seq.length (view'2 self_)}
      (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t UInt64.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t UInt64.t) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_Vec'0) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_Vec'0) = resolve'1 _0
  
  predicate resolve'3 (self: MutBorrow.t t_Board) = [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0: MutBorrow.t t_Board) = resolve'3 _0
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_Vec'0 = [%#svec'5] Seq.get (view self) ix
  
  predicate wf [#"06_knights_tour.rs" 30 4 30 23] (self: t_Board) =
    [%#s06_knights_tour'3] UInt64.t'int self.t_Board__size <= 1000
    /\ Seq.length (view self.t_Board__field) = UInt64.t'int self.t_Board__size
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Board__size
      -> Seq.length (view'1 (index_logic self.t_Board__field i)) = UInt64.t'int self.t_Board__size)
  
  predicate in_bounds'1 [#"06_knights_tour.rs" 61 4 61 40] (self: t_Board) (p: t_Point) =
    [%#s06_knights_tour'4] 0 <= Int64.to_int p.t_Point__x
    /\ Int64.to_int p.t_Point__x < UInt64.t'int self.t_Board__size
    /\ 0 <= Int64.to_int p.t_Point__y /\ Int64.to_int p.t_Point__y < UInt64.t'int self.t_Board__size
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec set [#"06_knights_tour.rs" 87 4 87 41] (self: MutBorrow.t t_Board) (p: t_Point) (v: UInt64.t)
    (return' (x: ())) = {[@expl:set requires #0] [%#s06_knights_tour] wf self.current}
    {[@expl:set requires #1] [%#s06_knights_tour'0] in_bounds'1 self.current p}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec> {(self'0.current).t_Board__field}
          {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_12 <- _ret ]
            [ &self'0 <- { self'0 with current = { self'0.current with t_Board__field = _ret.final } } ] s1)
      | s1 = UInt64.of_int {Int64.to_int p'0.t_Point__x} (fun (_ret_from: UInt64.t) -> [ &_13 <- _ret_from ] s2)
      | s2 = index_mut {_12} {_13} (fun (_ret: MutBorrow.t t_Vec'0) -> [ &_11 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec'0> {_11.current} {MutBorrow.get_id _11}
          (fun (_ret: MutBorrow.t t_Vec'0) -> [ &_10 <- _ret ] [ &_11 <- { _11 with current = _ret.final } ] s1)
      | s1 = UInt64.of_int {Int64.to_int p'0.t_Point__y} (fun (_ret_from: UInt64.t) -> [ &_15 <- _ret_from ] s2)
      | s2 = index_mut'0 {_10} {_15} (fun (_ret: MutBorrow.t UInt64.t) -> [ &_9 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_9 <- { _9 with current = v'0 } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'2 _11}- s3
      | s3 = -{resolve'4 self'0}- s4
      | s4 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & self'0: MutBorrow.t t_Board = self
    | & p'0: t_Point = p
    | & v'0: UInt64.t = v
    | & _9: MutBorrow.t UInt64.t = Any.any_l ()
    | & _10: MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _11: MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _12: MutBorrow.t t_Vec = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _15: UInt64.t = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:set ensures #0] [%#s06_knights_tour'1] wf self.final}
      {[@expl:set ensures #1] [%#s06_knights_tour'2] (self.final).t_Board__size = (self.current).t_Board__size}
      (! return' {result}) ]
end
module M_06_knights_tour__min [#"06_knights_tour.rs" 110 0 110 58]
  let%span s06_knights_tour = "06_knights_tour.rs" 114 4 114 7
  let%span s06_knights_tour'0 = "06_knights_tour.rs" 114 4 114 7
  let%span s06_knights_tour'1 = "06_knights_tour.rs" 112 16 113 68
  let%span s06_knights_tour'2 = "06_knights_tour.rs" 114 4 114 7
  let%span s06_knights_tour'3 = "06_knights_tour.rs" 114 4 114 7
  let%span s06_knights_tour'4 = "06_knights_tour.rs" 108 10 109 56
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 92 26 95 17
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 226 18 226 35
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 50 8 50 31
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 465 12 465 66
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 471 4 471 49
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 472 27 472 29
  let%span sslice'2 = "../../../creusot-contracts/src/std/slice.rs" 476 4 476 34
  let%span sslice'3 = "../../../creusot-contracts/src/std/slice.rs" 477 4 477 34
  let%span sslice'4 = "../../../creusot-contracts/src/std/slice.rs" 478 4 478 44
  let%span sslice'5 = "../../../creusot-contracts/src/std/slice.rs" 479 91 479 93
  let%span sslice'6 = "../../../creusot-contracts/src/std/slice.rs" 92 14 92 41
  let%span sslice'7 = "../../../creusot-contracts/src/std/slice.rs" 93 14 93 76
  let%span sslice'8 = "../../../creusot-contracts/src/std/slice.rs" 458 8 458 65
  let%span sslice'9 = "../../../creusot-contracts/src/std/slice.rs" 57 8 57 31
  let%span smodel = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.UInt64
  use creusot.int.Int64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Point = { t_Point__x: Int64.t; t_Point__y: Int64.t }
  
  type tuple = { _p0: UInt64.t; _p1: t_Point }
  
  type t_Option = C_None | C_Some tuple
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Iter = { t_Iter__ptr: t_NonNull; t_Iter__end_or_len: Opaque.ptr; t_Iter__qy95zmarker: () }
  
  type t_NonNull'0 = { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull'0; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq tuple
  
  axiom view_spec: forall self: t_Vec. [%#svec'1] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: t_Vec) : Seq.seq tuple = [%#smodel] view self
  
  function view'1 (self: Slice64.slice tuple) : Seq.seq tuple = [%#smodel] Slice64.view self
  
  function view'2 (self: t_Iter) : Slice64.slice tuple
  
  let rec into_iter (self_: t_Vec) (return' (x: t_Iter)) = any
    [ return''0 (result: t_Iter) -> {[%#svec] view'0 self_ = view'1 (view'2 result)} (! return' {result}) ]
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : tuple = [%#svec'0] Seq.get (view self) ix
  
  function index_logic'0 [@inline:trivial] (self: Slice64.slice tuple) (ix: int) : tuple =
    [%#sslice'9] Seq.get (Slice64.view self) ix
  
  function to_ref_seq (self: Slice64.slice tuple) : Seq.seq tuple
  
  axiom to_ref_seq_spec: forall self: Slice64.slice tuple. [%#sslice'6] Seq.length (to_ref_seq self)
      = Seq.length (view'1 self)
  
  axiom to_ref_seq_spec'0: forall self: Slice64.slice tuple. [%#sslice'7] forall i: int. 0 <= i
          /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = index_logic'0 self i
  
  predicate produces (self: t_Iter) (visited: Seq.seq tuple) (tl: t_Iter) =
    [%#sslice] to_ref_seq (view'2 self) = Seq.(++) visited (to_ref_seq (view'2 tl))
  
  function produces_trans (a: t_Iter) (ab: Seq.seq tuple) (b: t_Iter) (bc: Seq.seq tuple) (c: t_Iter) : () =
    [%#sslice'5] ()
  
  axiom produces_trans_spec:
    forall a: t_Iter, ab: Seq.seq tuple, b: t_Iter, bc: Seq.seq tuple, c: t_Iter. ([%#sslice'2] produces a ab b)
      -> ([%#sslice'3] produces b bc c) -> ([%#sslice'4] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Iter) : () = [%#sslice'1] ()
  
  axiom produces_refl_spec: forall self: t_Iter. [%#sslice'0] produces self (Seq.empty: Seq.seq tuple) self
  
  predicate inv (_0: t_Iter)
  
  axiom inv_axiom [@rewrite]: forall x: t_Iter [inv x]. inv x = true
  
  predicate inv'0 (_0: Seq.seq tuple)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq tuple [inv'0 x]. inv'0 x = true
  
  predicate resolve (self: MutBorrow.t t_Iter) = [%#sresolve] self.final = self.current
  
  function view'3 (self: MutBorrow.t t_Iter) : Slice64.slice tuple = [%#smodel'0] view'2 self.current
  
  predicate completed (self: MutBorrow.t t_Iter) =
    [%#sslice'8] resolve self /\ Slice64.view (view'3 self) = (Seq.empty: Seq.seq tuple)
  
  let rec next (self_: MutBorrow.t t_Iter) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#siter] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  predicate resolve'0 (_0: MutBorrow.t t_Iter) = resolve _0
  
  let rec v_Some (input: t_Option) (ret (field_0: tuple)) = any
    [ good (field_0: tuple) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: tuple [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec min [#"06_knights_tour.rs" 110 0 110 58] (v: t_Vec) (return' (x: t_Option)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &min'0 <- C_None ] s1 | s1 = into_iter {v'0} (fun (_ret: t_Iter) -> [ &iter <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &iter_old <- [%#s06_knights_tour] iter ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &produced <- [%#s06_knights_tour'0] Seq.empty: Seq.seq tuple ] s1 | s1 = bb4 ]
    | bb4 = bb4'0
      [ bb4'0 = {[@expl:for invariant] [%#s06_knights_tour'2] inv'0 produced}
        {[@expl:for invariant] [%#s06_knights_tour'2] inv iter}
        {[@expl:for invariant] [%#s06_knights_tour'2] produces iter_old produced iter}
        {[@expl:loop invariant] [%#s06_knights_tour'1] forall r: tuple. min'0 = C_Some r
          -> (exists i: int. 0 <= i /\ i < Seq.length (view'0 v'0) /\ index_logic v'0 i = r)}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Iter> {iter}
              (fun (_ret: MutBorrow.t t_Iter) -> [ &_19 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Iter> {_19.current} {MutBorrow.get_id _19}
              (fun (_ret: MutBorrow.t t_Iter) -> [ &_18 <- _ret ] [ &_19 <- { _19 with current = _ret.final } ] s2)
          | s2 = next {_18} (fun (_ret: t_Option) -> [ &_17 <- _ret ] s3)
          | s3 = bb6 ]
        | bb6 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any [ br0 -> {_17 = C_None} (! bb9) | br1 (x0: tuple) -> {_17 = C_Some x0} (! bb10) ] ]
        | bb10 = s0
          [ s0 = v_Some {_17} (fun (r0: tuple) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_22 <- [%#s06_knights_tour'3] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb11 ]
        | bb11 = s0
          [ s0 = [ &produced <- _22 ] s1
          | s1 = [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = any [ br0 -> {min'0 = C_None} (! bb15) | br1 (x0: tuple) -> {min'0 = C_Some x0} (! bb14) ] ]
        | bb14 = s0
          [ s0 = v_Some {min'0} (fun (r0: tuple) -> [ &m <- r0 ] s1)
          | s1 = [ &_30 <- UInt64.lt x._p0 m._p0 ] s2
          | s2 = any [ br0 -> {_30 = false} (! bb4'0) | br1 -> {_30} (! bb16) ] ]
        | bb16 = s0 [ s0 = [ &_33 <- C_Some x ] s1 | s1 = [ &min'0 <- _33 ] s2 | s2 = bb4'0 ]
        | bb15 = s0 [ s0 = [ &_27 <- C_Some x ] s1 | s1 = [ &min'0 <- _27 ] s2 | s2 = bb4'0 ] ] ]
    | bb9 = s0 [ s0 = [ &_0 <- min'0 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: t_Option = Any.any_l ()
    | & v'0: t_Vec = v
    | & min'0: t_Option = Any.any_l ()
    | & iter: t_Iter = Any.any_l ()
    | & iter_old: t_Iter = Any.any_l ()
    | & produced: Seq.seq tuple = Any.any_l ()
    | & _17: t_Option = Any.any_l ()
    | & _18: MutBorrow.t t_Iter = Any.any_l ()
    | & _19: MutBorrow.t t_Iter = Any.any_l ()
    | & __creusot_proc_iter_elem: tuple = Any.any_l ()
    | & _22: Seq.seq tuple = Any.any_l ()
    | & x: tuple = Any.any_l ()
    | & _27: t_Option = Any.any_l ()
    | & m: tuple = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _33: t_Option = Any.any_l () ])
    [ return''0 (result: t_Option) -> {[@expl:min ensures] [%#s06_knights_tour'4] forall r: tuple. result = C_Some r
        -> (exists i: int. 0 <= i /\ i < Seq.length (view'0 v) /\ index_logic v i = r)}
      (! return' {result}) ]
end
module M_06_knights_tour__dumb_nonlinear_arith [#"06_knights_tour.rs" 130 0 130 33]
  let%span s06_knights_tour = "06_knights_tour.rs" 128 11 128 22
  let%span s06_knights_tour'0 = "06_knights_tour.rs" 129 10 129 30
  let%span s06_knights_tour'1 = "06_knights_tour.rs" 130 34 130 36
  
  use creusot.int.UInt64
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant a : UInt64.t
  
  function dumb_nonlinear_arith [#"06_knights_tour.rs" 130 0 130 33] (a'0: UInt64.t) : ()
  
  goal vc_dumb_nonlinear_arith: ([%#s06_knights_tour] UInt64.t'int a <= 1000)
    -> ([@expl:dumb_nonlinear_arith ensures] [%#s06_knights_tour'0] UInt64.t'int a * UInt64.t'int a <= 1000000)
end
module M_06_knights_tour__knights_tour [#"06_knights_tour.rs" 135 0 135 69]
  let%span s06_knights_tour = "06_knights_tour.rs" 138 17 138 18
  let%span s06_knights_tour'0 = "06_knights_tour.rs" 140 4 140 44
  let%span s06_knights_tour'1 = "06_knights_tour.rs" 144 16 144 17
  let%span s06_knights_tour'2 = "06_knights_tour.rs" 144 4 144 7
  let%span s06_knights_tour'3 = "06_knights_tour.rs" 144 4 144 7
  let%span s06_knights_tour'4 = "06_knights_tour.rs" 141 4 141 36
  let%span s06_knights_tour'5 = "06_knights_tour.rs" 141 16 141 34
  let%span s06_knights_tour'6 = "06_knights_tour.rs" 144 4 144 7
  let%span s06_knights_tour'7 = "06_knights_tour.rs" 144 4 144 7
  let%span s06_knights_tour'8 = "06_knights_tour.rs" 149 8 149 11
  let%span s06_knights_tour'9 = "06_knights_tour.rs" 149 8 149 11
  let%span s06_knights_tour'10 = "06_knights_tour.rs" 147 20 148 52
  let%span s06_knights_tour'11 = "06_knights_tour.rs" 149 8 149 11
  let%span s06_knights_tour'12 = "06_knights_tour.rs" 149 8 149 11
  let%span s06_knights_tour'13 = "06_knights_tour.rs" 150 28 150 128
  let%span s06_knights_tour'14 = "06_knights_tour.rs" 132 11 132 37
  let%span s06_knights_tour'15 = "06_knights_tour.rs" 133 11 133 19
  let%span s06_knights_tour'16 = "06_knights_tour.rs" 134 11 134 19
  let%span s06_knights_tour'17 = "06_knights_tour.rs" 37 15 37 28
  let%span s06_knights_tour'18 = "06_knights_tour.rs" 38 14 38 33
  let%span s06_knights_tour'19 = "06_knights_tour.rs" 39 4 39 27
  let%span s06_knights_tour'20 = "06_knights_tour.rs" 83 4 83 26
  let%span s06_knights_tour'21 = "06_knights_tour.rs" 84 4 84 34
  let%span s06_knights_tour'22 = "06_knights_tour.rs" 85 14 85 26
  let%span s06_knights_tour'23 = "06_knights_tour.rs" 86 14 86 42
  let%span s06_knights_tour'24 = "06_knights_tour.rs" 128 11 128 22
  let%span s06_knights_tour'25 = "06_knights_tour.rs" 129 10 129 30
  let%span s06_knights_tour'26 = "06_knights_tour.rs" 130 34 130 36
  let%span s06_knights_tour'27 = "06_knights_tour.rs" 63 12 63 75
  let%span s06_knights_tour'28 = "06_knights_tour.rs" 32 12 34 87
  let%span s06_knights_tour'29 = "06_knights_tour.rs" 93 10 93 28
  let%span s06_knights_tour'30 = "06_knights_tour.rs" 94 10 94 123
  let%span s06_knights_tour'31 = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour'32 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour'33 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour'34 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour'35 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour'36 = "06_knights_tour.rs" 17 14 17 41
  let%span s06_knights_tour'37 = "06_knights_tour.rs" 50 4 50 26
  let%span s06_knights_tour'38 = "06_knights_tour.rs" 51 14 51 42
  let%span s06_knights_tour'39 = "06_knights_tour.rs" 68 4 68 26
  let%span s06_knights_tour'40 = "06_knights_tour.rs" 69 4 69 34
  let%span s06_knights_tour'41 = "06_knights_tour.rs" 108 10 109 56
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 212 18 212 32
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 92 26 95 17
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 108 26 108 44
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 221 18 221 34
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 50 8 50 31
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 285 12 285 41
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 121 26 121 56
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 291 4 291 49
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 292 27 292 29
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 296 4 296 34
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 297 4 297 34
  let%span svec'9 = "../../../creusot-contracts/src/std/vec.rs" 298 4 298 44
  let%span svec'10 = "../../../creusot-contracts/src/std/vec.rs" 299 73 299 75
  let%span svec'11 = "../../../creusot-contracts/src/std/vec.rs" 278 8 278 61
  let%span srange = "../../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span srange'0 = "../../../creusot-contracts/src/std/iter/range.rs" 34 4 34 49
  let%span srange'1 = "../../../creusot-contracts/src/std/iter/range.rs" 38 4 38 34
  let%span srange'2 = "../../../creusot-contracts/src/std/iter/range.rs" 39 4 39 34
  let%span srange'3 = "../../../creusot-contracts/src/std/iter/range.rs" 40 4 40 44
  let%span srange'4 = "../../../creusot-contracts/src/std/iter/range.rs" 16 8 18 9
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use mach.int.Int
  use seq.Seq
  use creusot.int.Int64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_Board = { t_Board__size: UInt64.t; t_Board__field: t_Vec }
  
  type t_RawVec'0 = { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0 = { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_Vec'0
  
  axiom view_spec: forall self: t_Vec. [%#svec'1] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: t_Vec'0) : Seq.seq UInt64.t
  
  axiom view_spec'0: forall self: t_Vec'0. [%#svec'1] Seq.length (view'0 self) <= UInt64.t'int const_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_Vec'0 = [%#svec'2] Seq.get (view self) ix
  
  predicate wf [#"06_knights_tour.rs" 30 4 30 23] (self: t_Board) =
    [%#s06_knights_tour'28] UInt64.t'int self.t_Board__size <= 1000
    /\ Seq.length (view self.t_Board__field) = UInt64.t'int self.t_Board__size
    /\ (forall i: int. 0 <= i /\ i < UInt64.t'int self.t_Board__size
      -> Seq.length (view'0 (index_logic self.t_Board__field i)) = UInt64.t'int self.t_Board__size)
  
  let rec new (size: UInt64.t) (return' (x: t_Board)) = {[@expl:new requires] [%#s06_knights_tour'17] UInt64.t'int size
    <= 1000}
    any
    [ return''0 (result: t_Board) -> {[%#s06_knights_tour'18] result.t_Board__size = size}
      {[%#s06_knights_tour'19] wf result}
      (! return' {result}) ]
  
  type t_Point = { t_Point__x: Int64.t; t_Point__y: Int64.t }
  
  predicate in_bounds [#"06_knights_tour.rs" 61 4 61 40] (self: t_Board) (p: t_Point) =
    [%#s06_knights_tour'27] 0 <= Int64.to_int p.t_Point__x
    /\ Int64.to_int p.t_Point__x < UInt64.t'int self.t_Board__size
    /\ 0 <= Int64.to_int p.t_Point__y /\ Int64.to_int p.t_Point__y < UInt64.t'int self.t_Board__size
  
  let rec set (self: MutBorrow.t t_Board) (p: t_Point) (v: UInt64.t) (return' (x: ())) =
    {[@expl:set requires #0] [%#s06_knights_tour'20] wf self.current}
    {[@expl:set requires #1] [%#s06_knights_tour'21] in_bounds self.current p}
    any
    [ return''0 (result: ()) -> {[%#s06_knights_tour'22] wf self.final}
      {[%#s06_knights_tour'23] (self.final).t_Board__size = (self.current).t_Board__size}
      (! return' {result}) ]
  
  function dumb_nonlinear_arith [#"06_knights_tour.rs" 130 0 130 33] (a: UInt64.t) : () = [%#s06_knights_tour'26] ()
  
  axiom dumb_nonlinear_arith_spec: forall a: UInt64.t. ([%#s06_knights_tour'24] UInt64.t'int a <= 1000)
      -> ([%#s06_knights_tour'25] UInt64.t'int a * UInt64.t'int a <= 1000000)
  
  type t_Range = { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter (self_: t_Range) (return' (x: t_Range)) = any
    [ return''0 (result: t_Range) -> {[%#siter] result = self_} (! return' {result}) ]
  
  function deep_model (self: UInt64.t) : int = [%#snum] UInt64.t'int self
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    [%#srange] self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. ([%#srange'1] produces a ab b)
      -> ([%#srange'2] produces b bc c) -> ([%#srange'3] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#srange'0] produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv (_0: t_Range)
  
  axiom inv_axiom [@rewrite]: forall x: t_Range [inv x]. inv x = true
  
  predicate inv'0 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq UInt64.t [inv'0 x]. inv'0 x = true
  
  type t_Option = C_None | C_Some UInt64.t
  
  predicate resolve (self: MutBorrow.t t_Range) = [%#sresolve] self.final = self.current
  
  predicate completed (self: MutBorrow.t t_Range) =
    [%#srange'4] resolve self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  let rec next (self_: MutBorrow.t t_Range) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#siter'0] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  predicate resolve'0 (_0: MutBorrow.t t_Range) = resolve _0
  
  let rec v_Some (input: t_Option) (ret (field_0: UInt64.t)) = any
    [ good (field_0: UInt64.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  type t_RawVec'1 = { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1 = { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type tuple = { _p0: UInt64.t; _p1: t_Point }
  
  function view'1 (self: t_Vec'1) : Seq.seq tuple
  
  axiom view_spec'1: forall self: t_Vec'1. [%#svec'1] Seq.length (view'1 self) <= UInt64.t'int const_MAX
  
  let rec new'0 (return' (x: t_Vec'1)) = any
    [ return''0 (result: t_Vec'1) -> {[%#svec] Seq.length (view'1 result) = 0} (! return' {result}) ]
  
  type t_RawVec'2 = { t_RawVec__inner'2: t_RawVecInner; t_RawVec__qy95zmarker'2: () }
  
  type t_Vec'2 = { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }
  
  type tuple'0 = { _p0'0: Int64.t; _p1'0: Int64.t }
  
  function view'2 (self: t_Vec'2) : Seq.seq tuple'0
  
  axiom view_spec'2: forall self: t_Vec'2. [%#svec'1] Seq.length (view'2 self) <= UInt64.t'int const_MAX
  
  function index_logic'0 [@inline:trivial] (self: t_Vec'2) (ix: int) : tuple'0 = [%#svec'2] Seq.get (view'2 self) ix
  
  let rec moves (return' (x: t_Vec'2)) = any
    [ return''0 (result: t_Vec'2) -> {[%#s06_knights_tour'29] Seq.length (view'2 result) = 8}
      {[%#s06_knights_tour'30] forall i: int. 0 <= i /\ i < 8
        -> - 2 <= Int64.to_int (index_logic'0 result i)._p0'0
        /\ Int64.to_int (index_logic'0 result i)._p0'0 <= 2
        /\ - 2 <= Int64.to_int (index_logic'0 result i)._p1'0 /\ Int64.to_int (index_logic'0 result i)._p1'0 <= 2}
      (! return' {result}) ]
  
  type t_NonNull'0 = { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_ManuallyDrop = { t_ManuallyDrop__value: () }
  
  type t_IntoIter = {
    t_IntoIter__buf: t_NonNull'0;
    t_IntoIter__phantom: ();
    t_IntoIter__cap: UInt64.t;
    t_IntoIter__alloc: t_ManuallyDrop;
    t_IntoIter__ptr: t_NonNull'0;
    t_IntoIter__end: Opaque.ptr }
  
  function view'3 (self: t_IntoIter) : Seq.seq tuple'0
  
  let rec into_iter'0 (self_: t_Vec'2) (return' (x: t_IntoIter)) = any
    [ return''0 (result: t_IntoIter) -> {[%#svec'0] view'2 self_ = view'3 result} (! return' {result}) ]
  
  function index_logic'1 [@inline:trivial] (self: t_Vec'1) (ix: int) : tuple = [%#svec'2] Seq.get (view'1 self) ix
  
  predicate produces'0 (self: t_IntoIter) (visited: Seq.seq tuple'0) (rhs: t_IntoIter) =
    [%#svec'3] view'3 self = Seq.(++) visited (view'3 rhs)
  
  function produces_trans'0 (a: t_IntoIter) (ab: Seq.seq tuple'0) (b: t_IntoIter) (bc: Seq.seq tuple'0) (c: t_IntoIter) : ()
   = [%#svec'10] ()
  
  axiom produces_trans_spec'0:
    forall a: t_IntoIter, ab: Seq.seq tuple'0, b: t_IntoIter, bc: Seq.seq tuple'0, c: t_IntoIter. ([%#svec'7] produces'0 a ab b)
      -> ([%#svec'8] produces'0 b bc c) -> ([%#svec'9] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self: t_IntoIter) : () = [%#svec'6] ()
  
  axiom produces_refl_spec'0: forall self: t_IntoIter. [%#svec'5] produces'0 self (Seq.empty: Seq.seq tuple'0) self
  
  predicate inv'1 (_0: t_IntoIter)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_IntoIter [inv'1 x]. inv'1 x = true
  
  predicate inv'2 (_0: Seq.seq tuple'0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq tuple'0 [inv'2 x]. inv'2 x = true
  
  type t_Option'0 = C_None'0 | C_Some'0 tuple'0
  
  predicate resolve'1 (self: MutBorrow.t t_IntoIter) = [%#sresolve] self.final = self.current
  
  function view'4 (self: MutBorrow.t t_IntoIter) : Seq.seq tuple'0 = [%#smodel] view'3 self.current
  
  predicate completed'0 (self: MutBorrow.t t_IntoIter) =
    [%#svec'11] resolve'1 self /\ view'4 self = (Seq.empty: Seq.seq tuple'0)
  
  let rec next'0 (self_: MutBorrow.t t_IntoIter) (return' (x: t_Option'0)) = any
    [ return''0 (result: t_Option'0) -> {[%#siter'0] match result with
        | C_None'0 -> completed'0 self_
        | C_Some'0 v -> produces'0 self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  predicate resolve'2 (_0: MutBorrow.t t_IntoIter) = resolve'1 _0
  
  let rec v_Some'0 (input: t_Option'0) (ret (field_0: tuple'0)) = any
    [ good (field_0: tuple'0) -> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: tuple'0 [C_Some'0 field_0: t_Option'0]. C_Some'0 field_0 <> input} (! {false} any) ]
  
  let rec mov (self: t_Point) (p: tuple'0) (return' (x: t_Point)) =
    {[@expl:mov requires #0] [%#s06_knights_tour'31] - 10000 <= Int64.to_int self.t_Point__x
    /\ Int64.to_int self.t_Point__x <= 10000}
    {[@expl:mov requires #1] [%#s06_knights_tour'32] - 10000 <= Int64.to_int self.t_Point__y
    /\ Int64.to_int self.t_Point__y <= 10000}
    {[@expl:mov requires #2] [%#s06_knights_tour'33] - 10000 <= Int64.to_int p._p0'0 /\ Int64.to_int p._p0'0 <= 10000}
    {[@expl:mov requires #3] [%#s06_knights_tour'34] - 10000 <= Int64.to_int p._p1'0 /\ Int64.to_int p._p1'0 <= 10000}
    any
    [ return''0 (result: t_Point) -> {[%#s06_knights_tour'35] Int64.to_int result.t_Point__x
      = Int64.to_int self.t_Point__x + Int64.to_int p._p0'0}
      {[%#s06_knights_tour'36] Int64.to_int result.t_Point__y = Int64.to_int self.t_Point__y + Int64.to_int p._p1'0}
      (! return' {result}) ]
  
  let rec available (self: t_Board) (p: t_Point) (return' (x: bool)) =
    {[@expl:available requires] [%#s06_knights_tour'37] wf self}
    any [ return''0 (result: bool) -> {[%#s06_knights_tour'38] result -> in_bounds self p} (! return' {result}) ]
  
  let rec count_degree (self: t_Board) (p: t_Point) (return' (x: UInt64.t)) =
    {[@expl:count_degree requires #0] [%#s06_knights_tour'39] wf self}
    {[@expl:count_degree requires #1] [%#s06_knights_tour'40] in_bounds self p}
    any [ return''0 (result: UInt64.t) -> (! return' {result}) ]
  
  function view'5 (self: MutBorrow.t t_Vec'1) : Seq.seq tuple = [%#smodel] view'1 self.current
  
  let rec push (self_: MutBorrow.t t_Vec'1) (v: tuple) (return' (x: ())) = any
    [ return''0 (result: ()) -> {[%#svec'4] view'1 self_.final = Seq.snoc (view'5 self_) v} (! return' {result}) ]
  
  type t_Option'1 = C_None'1 | C_Some'1 tuple
  
  function view'6 (self: t_Vec'1) : Seq.seq tuple = [%#smodel'0] view'1 self
  
  let rec min (v: t_Vec'1) (return' (x: t_Option'1)) = any
    [ return''0 (result: t_Option'1) -> {[%#s06_knights_tour'41] forall r: tuple. result = C_Some'1 r
        -> (exists i: int. 0 <= i /\ i < Seq.length (view'6 v) /\ index_logic'1 v i = r)}
      (! return' {result}) ]
  
  let rec v_Some'1 (input: t_Option'1) (ret (field_0: tuple)) = any
    [ good (field_0: tuple) -> {C_Some'1 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: tuple [C_Some'1 field_0: t_Option'1]. C_Some'1 field_0 <> input} (! {false} any) ]
  
  type t_Option'2 = C_None'2 | C_Some'2 t_Board
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering = [%#sord'12] if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec knights_tour [#"06_knights_tour.rs" 135 0 135 69] (size: UInt64.t) (x: UInt64.t) (y: UInt64.t)
    (return' (x'0: t_Option'2)) = {[@expl:knights_tour requires #0] [%#s06_knights_tour'14] 0 < UInt64.t'int size
    /\ UInt64.t'int size <= 1000}
    {[@expl:knights_tour requires #1] [%#s06_knights_tour'15] UInt64.lt x size}
    {[@expl:knights_tour requires #2] [%#s06_knights_tour'16] UInt64.lt y size}
    (! bb0
    [ bb0 = s0 [ s0 = new {size'0} (fun (_ret: t_Board) -> [ &board <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = Int64.of_int {UInt64.t'int x'0} (fun (_ret_from: Int64.t) -> [ &_10 <- _ret_from ] s1)
      | s1 = Int64.of_int {UInt64.t'int y'0} (fun (_ret_from: Int64.t) -> [ &_12 <- _ret_from ] s2)
      | s2 = [ &p <- { t_Point__x = _10; t_Point__y = _12 } ] s3
      | s3 = MutBorrow.borrow_mut <t_Board> {board}
          (fun (_ret: MutBorrow.t t_Board) -> [ &_15 <- _ret ] [ &board <- _ret.final ] s4)
      | s4 = set {_15} {p} {[%#s06_knights_tour] (1: UInt64.t)} (fun (_ret: ()) -> [ &_14 <- _ret ] s5)
      | s5 = bb2 ]
    | bb2 = s0 [ s0 = [ &_17 <- [%#s06_knights_tour'0] dumb_nonlinear_arith size'0 ] s1 | s1 = bb3 ]
    | bb3 = s0
      [ s0 = UInt64.mul {size'0} {size'0} (fun (_ret: UInt64.t) -> [ &_22 <- _ret ] s1)
      | s1 = [ &_21 <- { t_Range__start = ([%#s06_knights_tour'1] (2: UInt64.t)); t_Range__end = _22 } ] s2
      | s2 = into_iter {_21} (fun (_ret: t_Range) -> [ &iter <- _ret ] s3)
      | s3 = bb4 ]
    | bb4 = s0 [ s0 = [ &iter_old <- [%#s06_knights_tour'2] iter ] s1 | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &produced <- [%#s06_knights_tour'3] Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb7 ]
    | bb7 = bb7'0
      [ bb7'0 = {[@expl:for invariant] [%#s06_knights_tour'6] inv'0 produced}
        {[@expl:for invariant] [%#s06_knights_tour'6] inv iter}
        {[@expl:for invariant] [%#s06_knights_tour'6] produces iter_old produced iter}
        {[@expl:loop invariant #0] [%#s06_knights_tour'5] board.t_Board__size = size'0}
        {[@expl:loop invariant #1] [%#s06_knights_tour'4] wf board}
        {[@expl:loop invariant #2] [%#s06_knights_tour'4] in_bounds board p}
        (! s0)
        [ s0 = bb8 ]
        [ bb8 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_39 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_39.current} {MutBorrow.get_id _39}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_38 <- _ret ] [ &_39 <- { _39 with current = _ret.final } ] s2)
          | s2 = next {_38} (fun (_ret: t_Option) -> [ &_37 <- _ret ] s3)
          | s3 = bb9 ]
        | bb9 = s0
          [ s0 = -{resolve'0 _39}- s1
          | s1 = any [ br0 -> {_37 = C_None} (! bb12) | br1 (x0: UInt64.t) -> {_37 = C_Some x0} (! bb13) ] ]
        | bb13 = s0
          [ s0 = v_Some {_37} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_42 <- [%#s06_knights_tour'7] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb14 ]
        | bb14 = s0
          [ s0 = [ &produced <- _42 ] s1
          | s1 = [ &step <- __creusot_proc_iter_elem ] s2
          | s2 = new'0 (fun (_ret: t_Vec'1) -> [ &candidates <- _ret ] s3)
          | s3 = bb15 ]
        | bb15 = s0 [ s0 = moves (fun (_ret: t_Vec'2) -> [ &_48 <- _ret ] s1) | s1 = bb16 ]
        | bb16 = s0 [ s0 = into_iter'0 {_48} (fun (_ret: t_IntoIter) -> [ &iter'0 <- _ret ] s1) | s1 = bb17 ]
        | bb17 = s0 [ s0 = [ &iter_old'0 <- [%#s06_knights_tour'8] iter'0 ] s1 | s1 = bb18 ]
        | bb18 = s0 [ s0 = [ &produced'0 <- [%#s06_knights_tour'9] Seq.empty: Seq.seq tuple'0 ] s1 | s1 = bb20 ]
        | bb20 = bb20'0
          [ bb20'0 = {[@expl:for invariant] [%#s06_knights_tour'11] inv'2 produced'0}
            {[@expl:for invariant] [%#s06_knights_tour'11] inv'1 iter'0}
            {[@expl:for invariant] [%#s06_knights_tour'11] produces'0 iter_old'0 produced'0 iter'0}
            {[@expl:loop invariant] [%#s06_knights_tour'10] forall i: int. 0 <= i /\ i < Seq.length (view'1 candidates)
              -> in_bounds board (index_logic'1 candidates i)._p1}
            (! s0)
            [ s0 = bb21 ]
            [ bb21 = s0
              [ s0 = MutBorrow.borrow_mut <t_IntoIter> {iter'0}
                  (fun (_ret: MutBorrow.t t_IntoIter) -> [ &_60 <- _ret ] [ &iter'0 <- _ret.final ] s1)
              | s1 = MutBorrow.borrow_final <t_IntoIter> {_60.current} {MutBorrow.get_id _60}
                  (fun (_ret: MutBorrow.t t_IntoIter) ->
                    [ &_59 <- _ret ] [ &_60 <- { _60 with current = _ret.final } ] s2)
              | s2 = next'0 {_59} (fun (_ret: t_Option'0) -> [ &_58 <- _ret ] s3)
              | s3 = bb22 ]
            | bb22 = s0
              [ s0 = -{resolve'2 _60}- s1
              | s1 = any [ br0 -> {_58 = C_None'0} (! bb35) | br1 (x0: tuple'0) -> {_58 = C_Some'0 x0} (! bb26) ] ]
            | bb26 = s0
              [ s0 = v_Some'0 {_58} (fun (r0: tuple'0) -> [ &__creusot_proc_iter_elem'0 <- r0 ] s1)
              | s1 = [ &_63 <- [%#s06_knights_tour'12] Seq.(++) produced'0 (Seq.singleton __creusot_proc_iter_elem'0) ]
                s2
              | s2 = bb27 ]
            | bb27 = s0
              [ s0 = [ &produced'0 <- _63 ] s1
              | s1 = [ &m <- __creusot_proc_iter_elem'0 ] s2
              | s2 =
                {[@expl:assertion] [%#s06_knights_tour'13] forall r: Seq.seq tuple'0, a: Seq.seq tuple'0, b: Seq.seq tuple'0. r
                    = Seq.(++) a (Seq.(++) (Seq.singleton m) b) -> m = Seq.get r (Seq.length a)}
                s3
              | s3 = [ &_71 <- m ] s4
              | s4 = mov {p} {_71} (fun (_ret: t_Point) -> [ &adj <- _ret ] s5)
              | s5 = bb28 ]
            | bb28 = s0 [ s0 = available {board} {adj} (fun (_ret: bool) -> [ &_72 <- _ret ] s1) | s1 = bb29 ]
            | bb29 = any [ br0 -> {_72 = false} (! bb20'0) | br1 -> {_72} (! bb30) ]
            | bb30 = s0 [ s0 = count_degree {board} {adj} (fun (_ret: UInt64.t) -> [ &degree <- _ret ] s1) | s1 = bb31 ]
            | bb31 = s0
              [ s0 = [ &_80 <- { _p0 = degree; _p1 = adj } ] s1
              | s1 = MutBorrow.borrow_mut <t_Vec'1> {candidates}
                  (fun (_ret: MutBorrow.t t_Vec'1) -> [ &_79 <- _ret ] [ &candidates <- _ret.final ] s2)
              | s2 = push {_79} {_80} (fun (_ret: ()) -> [ &_78 <- _ret ] s3)
              | s3 = bb20'0 ] ] ]
        | bb35 = s0
          [ s0 = [ &_87 <- candidates ] s1
          | s1 = min {_87} (fun (_ret: t_Option'1) -> [ &_85 <- _ret ] s2)
          | s2 = bb36 ]
        | bb36 = any [ br0 -> {_85 = C_None'1} (! bb39) | br1 (x0: tuple) -> {_85 = C_Some'1 x0} (! bb40) ]
        | bb40 = s0
          [ s0 = v_Some'1 {_85} (fun (r0: tuple) -> [ &adj'0 <- r0._p1 ] s1)
          | s1 = [ &p <- adj'0 ] s2
          | s2 = MutBorrow.borrow_mut <t_Board> {board}
              (fun (_ret: MutBorrow.t t_Board) -> [ &_93 <- _ret ] [ &board <- _ret.final ] s3)
          | s3 = set {_93} {p} {step} (fun (_ret: ()) -> [ &_92 <- _ret ] s4)
          | s4 = bb7'0 ] ] ]
    | bb39 = s0 [ s0 = [ &_0 <- C_None'2 ] s1 | s1 = bb47 ]
    | bb12 = s0 [ s0 = [ &_0 <- C_Some'2 board ] s1 | s1 = bb47 ]
    | bb47 = return''0 {_0} ]
    [ & _0: t_Option'2 = Any.any_l ()
    | & size'0: UInt64.t = size
    | & x'0: UInt64.t = x
    | & y'0: UInt64.t = y
    | & board: t_Board = Any.any_l ()
    | & p: t_Point = Any.any_l ()
    | & _10: Int64.t = Any.any_l ()
    | & _12: Int64.t = Any.any_l ()
    | & _14: () = Any.any_l ()
    | & _15: MutBorrow.t t_Board = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _21: t_Range = Any.any_l ()
    | & _22: UInt64.t = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _37: t_Option = Any.any_l ()
    | & _38: MutBorrow.t t_Range = Any.any_l ()
    | & _39: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _42: Seq.seq UInt64.t = Any.any_l ()
    | & step: UInt64.t = Any.any_l ()
    | & candidates: t_Vec'1 = Any.any_l ()
    | & iter'0: t_IntoIter = Any.any_l ()
    | & _48: t_Vec'2 = Any.any_l ()
    | & iter_old'0: t_IntoIter = Any.any_l ()
    | & produced'0: Seq.seq tuple'0 = Any.any_l ()
    | & _58: t_Option'0 = Any.any_l ()
    | & _59: MutBorrow.t t_IntoIter = Any.any_l ()
    | & _60: MutBorrow.t t_IntoIter = Any.any_l ()
    | & __creusot_proc_iter_elem'0: tuple'0 = Any.any_l ()
    | & _63: Seq.seq tuple'0 = Any.any_l ()
    | & m: tuple'0 = Any.any_l ()
    | & adj: t_Point = Any.any_l ()
    | & _71: tuple'0 = Any.any_l ()
    | & _72: bool = Any.any_l ()
    | & degree: UInt64.t = Any.any_l ()
    | & _78: () = Any.any_l ()
    | & _79: MutBorrow.t t_Vec'1 = Any.any_l ()
    | & _80: tuple = Any.any_l ()
    | & _85: t_Option'1 = Any.any_l ()
    | & _87: t_Vec'1 = Any.any_l ()
    | & adj'0: t_Point = Any.any_l ()
    | & _92: () = Any.any_l ()
    | & _93: MutBorrow.t t_Board = Any.any_l () ]) [ return''0 (result: t_Option'2) -> (! return' {result}) ]
end
