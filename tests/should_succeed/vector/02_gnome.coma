module M_gnome_sort
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_Vec_T_Global
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate invariant_ref_Vec_T_Global [@inline:trivial] (self: MutBorrow.t t_Vec_T_Global) =
    inv_Vec_T_Global self.current /\ inv_Vec_T_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global
  
  predicate inv_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = invariant_ref_Vec_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global
  
  predicate permutation_of_T (self: Seq.seq t_T) (other: Seq.seq t_T) = Permut.permut self other 0 (Seq.length self)
  
  type t_DeepModelTy
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_DeepModelTy (self: t_DeepModelTy) (other: t_DeepModelTy) : t_Ordering
  
  function eq_cmp_DeepModelTy (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom eq_cmp_DeepModelTy_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. (x = y) = (cmp_log_DeepModelTy x y = Equal)
  
  function antisym2_DeepModelTy (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym2_DeepModelTy_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. cmp_log_DeepModelTy x y = Greater
      -> cmp_log_DeepModelTy y x = Less
  
  function antisym1_DeepModelTy (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym1_DeepModelTy_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. cmp_log_DeepModelTy x y = Less
      -> cmp_log_DeepModelTy y x = Greater
  
  function trans_DeepModelTy (x: t_DeepModelTy) (y: t_DeepModelTy) (z: t_DeepModelTy) (o: t_Ordering) : ()
  
  axiom trans_DeepModelTy_spec:
    forall x: t_DeepModelTy, y: t_DeepModelTy, z: t_DeepModelTy, o: t_Ordering. cmp_log_DeepModelTy x y = o
      -> cmp_log_DeepModelTy y z = o -> cmp_log_DeepModelTy x z = o
  
  function refl_DeepModelTy (x: t_DeepModelTy) : ()
  
  axiom refl_DeepModelTy_spec: forall x: t_DeepModelTy. cmp_log_DeepModelTy x x = Equal
  
  predicate gt_log_DeepModelTy (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_gt_log_DeepModelTy (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_gt_log_DeepModelTy_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. gt_log_DeepModelTy x y
      = (cmp_log_DeepModelTy x y = Greater)
  
  predicate ge_log_DeepModelTy (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_ge_log_DeepModelTy (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_ge_log_DeepModelTy_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ge_log_DeepModelTy x y
      = (cmp_log_DeepModelTy x y <> Less)
  
  predicate lt_log_DeepModelTy (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_lt_log_DeepModelTy (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_lt_log_DeepModelTy_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. lt_log_DeepModelTy x y
      = (cmp_log_DeepModelTy x y = Less)
  
  predicate le_log_DeepModelTy (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_le_log_DeepModelTy (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_le_log_DeepModelTy_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. le_log_DeepModelTy x y
      = (cmp_log_DeepModelTy x y <> Greater)
  
  predicate sorted_range_DeepModelTy (s: Seq.seq t_DeepModelTy) (l: int) (u: int) =
    forall i: int, j: int. l <= i /\ i < j /\ j < u -> le_log_DeepModelTy (Seq.get s i) (Seq.get s j)
  
  function deep_model_T (self: t_T) : t_DeepModelTy
  
  function index_Vec_T_Global [@inline:trivial] (self: t_Vec_T_Global) (ix: int) : t_T =
    Seq.get (view_Vec_T_Global self) ix
  
  meta "rewrite_def" function index_Vec_T_Global
  
  function deep_model_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_DeepModelTy
  
  axiom deep_model_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      = Seq.length (deep_model_Vec_T_Global self)
  
  axiom deep_model_Vec_T_Global_spec'0: forall self: t_Vec_T_Global. forall i: int. 0 <= i
          /\ i < Seq.length (view_Vec_T_Global self)
        -> Seq.get (deep_model_Vec_T_Global self) i = deep_model_T (index_Vec_T_Global self i)
  
  function deep_model_ref_Vec_T_Global [@inline:trivial] (self: MutBorrow.t t_Vec_T_Global) : Seq.seq t_DeepModelTy =
    deep_model_Vec_T_Global self.current
  
  meta "rewrite_def" function deep_model_ref_Vec_T_Global
  
  predicate invariant_ref_Vec_T_Global'0 [@inline:trivial] (self: t_Vec_T_Global) = inv_Vec_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global'0
  
  predicate inv_ref_Vec_T_Global'0 [@inline:trivial] (_1: t_Vec_T_Global) = invariant_ref_Vec_T_Global'0 _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global'0
  
  let rec len_T (self_: t_Vec_T_Global) (return (x: UInt64.t)) =
    {[@expl:len 'self_' type invariant] inv_ref_Vec_T_Global'0 self_}
    any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_T_Global self_)} (! return {result}) ]
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  let rec index_Vec_T_Global'0 (self_: t_Vec_T_Global) (ix: UInt64.t) (return (x: t_T)) =
    {[@expl:index 'self_' type invariant] inv_ref_Vec_T_Global'0 self_}
    {[@expl:index requires] in_bounds_usize ix (view_Vec_T_Global self_)}
    any
    [ return (result: t_T) -> {inv_ref_T result}
      {has_value_usize ix (view_Vec_T_Global self_) result}
      (! return {result}) ]
  
  type tup2_ref_T_ref_T = { f0: t_T; f1: t_T }
  
  predicate precondition_le (self: ()) (args: tup2_ref_T_ref_T)
  
  axiom precondition_fndef:
    forall args: tup2_ref_T_ref_T [precondition_le () args]. (let {f0 = self_; f1 = other} = args in inv_ref_T other
        /\ inv_ref_T self_) -> precondition_le () args
  
  function deep_model_ref_T [@inline:trivial] (self: t_T) : t_DeepModelTy = deep_model_T self
  
  meta "rewrite_def" function deep_model_ref_T
  
  predicate postcondition_once_le (self: ()) (args: tup2_ref_T_ref_T) (result: bool)
  
  axiom postcondition_fndef:
    forall args: tup2_ref_T_ref_T, res: bool [postcondition_once_le () args res]. postcondition_once_le () args res
      -> (let {f0 = self_; f1 = other} = args in res
      = le_log_DeepModelTy (deep_model_ref_T self_) (deep_model_ref_T other))
  
  let rec le_T (self_: t_T) (other: t_T) (return (x: bool)) = {[@expl:le requires] precondition_le () { f0 = self_;
                                                                                                        f1 = other }}
    any [ return (result: bool) -> {postcondition_once_le () { f0 = self_; f1 = other } result} (! return {result}) ]
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv_slice_T self.current /\ inv_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  let rec deref_mut_Vec_T_Global (self_: MutBorrow.t t_Vec_T_Global) (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:deref_mut 'self_' type invariant] inv_ref_Vec_T_Global self_}
    any
    [ return (result: MutBorrow.t (Slice64.slice t_T)) -> {inv_ref_slice_T result}
      {Slice64.view result.current = view_Vec_T_Global self_.current}
      {Slice64.view result.final = view_Vec_T_Global self_.final}
      (! return {result}) ]
  
  let rec swap_T (self_: MutBorrow.t (Slice64.slice t_T)) (i: UInt64.t) (j: UInt64.t) (return (x: ())) =
    {[@expl:swap 'self_' type invariant] inv_ref_slice_T self_}
    {[@expl:swap requires #0] UInt64.t'int i < Seq.length (Slice64.view self_.current)}
    {[@expl:swap requires #1] UInt64.t'int j < Seq.length (Slice64.view self_.current)}
    any
    [ return (result: ()) ->
    {Permut.exchange (Slice64.view self_.final) (Slice64.view self_.current) (UInt64.t'int i) (UInt64.t'int j)}
      (! return {result}) ]
  
  predicate resolve_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_T
  
  predicate resolve_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_T_Global
  
  predicate sorted_DeepModelTy (s: Seq.seq t_DeepModelTy) = sorted_range_DeepModelTy s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec gnome_sort_T (v: MutBorrow.t t_Vec_T_Global) (return (x: ())) =
    {[@expl:gnome_sort 'v' type invariant] inv_ref_Vec_T_Global v}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &i <- (0: UInt64.t) ] s1 | s1 = [ &old_2_0 <- v ] s2 | s2 = bb2 ]
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] old_2_0.final = v.final}
        {[@expl:loop invariant #0] sorted_range_DeepModelTy (deep_model_ref_Vec_T_Global v) 0 (UInt64.t'int i)}
        {[@expl:loop invariant #1] permutation_of_T (view_Vec_T_Global v.current) (view_Vec_T_Global old_v.current)}
        {[@expl:loop invariant #2] inv_ref_Vec_T_Global v}
        (! s0)
        [ s0 = bb3 ]
        [ bb3 = s0 [ s0 = len_T {v.current} (fun (_ret: UInt64.t) -> [ &_14 <- _ret ] s1) | s1 = bb4 ]
        | bb4 = s0
          [ s0 = [ &_12 <- UInt64.lt i _14 ] s1 | s1 = any [ br0 -> {_12 = false} (! bb17) | br1 -> {_12} (! bb5) ] ]
        | bb5 = s0
          [ s0 = [ &_16 <- i = (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_16 = false} (! bb7) | br1 -> {_16} (! bb12) ] ]
        | bb7 = s0
          [ s0 = UInt64.sub {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_22 <- _ret ] s1)
          | s1 = index_Vec_T_Global'0 {v.current} {_22} (fun (_ret: t_T) -> [ &_20 <- _ret ] s2)
          | s2 = bb8 ]
        | bb8 = s0 [ s0 = index_Vec_T_Global'0 {v.current} {i} (fun (_ret: t_T) -> [ &_25 <- _ret ] s1) | s1 = bb9 ]
        | bb9 = s0 [ s0 = le_T {_20} {_25} (fun (_ret: bool) -> [ &_18 <- _ret ] s1) | s1 = bb10 ]
        | bb10 = any [ br0 -> {_18 = false} (! bb13) | br1 -> {_18} (! bb12) ]
        | bb12 = s0 [ s0 = UInt64.add {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s1) | s1 = bb2 ]
        | bb13 = s0
          [ s0 = {inv_Vec_T_Global v.current}
            MutBorrow.borrow_mut <t_Vec_T_Global> {v.current}
              (fun (_ret: MutBorrow.t t_Vec_T_Global) ->
                [ &_31 <- _ret ] -{inv_Vec_T_Global _ret.final}-
                [ &v <- { v with current = _ret.final } ] s1)
          | s1 = deref_mut_Vec_T_Global {_31} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_30 <- _ret ] s2)
          | s2 = bb14 ]
        | bb14 = s0
          [ s0 = UInt64.sub {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_32 <- _ret ] s1)
          | s1 = {inv_slice_T _30.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_30.current} {MutBorrow.get_id _30}
              (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
                [ &_29 <- _ret ] -{inv_slice_T _ret.final}-
                [ &_30 <- { _30 with current = _ret.final } ] s2)
          | s2 = swap_T {_29} {_32} {i} (fun (_ret: ()) -> [ &_28 <- _ret ] s3)
          | s3 = bb15 ]
        | bb15 = s0
          [ s0 = {[@expl:type invariant] inv_ref_slice_T _30} s1
          | s1 = -{resolve_ref_slice_T _30}- s2
          | s2 = UInt64.sub {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s3)
          | s3 = bb2 ] ] ]
    | bb17 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Vec_T_Global v} s1
      | s1 = -{resolve_ref_Vec_T_Global v}- s2
      | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec_T_Global = v
    | & old_v: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _14: UInt64.t = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _20: t_T = Any.any_l ()
    | & _22: UInt64.t = Any.any_l ()
    | & _25: t_T = Any.any_l ()
    | & _28: () = Any.any_l ()
    | & _29: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _30: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _31: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & _32: UInt64.t = Any.any_l ()
    | & old_2_0: MutBorrow.t t_Vec_T_Global = Any.any_l () ])
    [ return (result: ()) -> {[@expl:gnome_sort ensures #0] sorted_DeepModelTy (deep_model_Vec_T_Global v.final)}
      {[@expl:gnome_sort ensures #1] permutation_of_T (view_Vec_T_Global v.final) (view_Vec_T_Global v.current)}
      (! return {result}) ]
end
