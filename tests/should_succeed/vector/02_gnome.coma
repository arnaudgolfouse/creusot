module M_02_gnome__gnome_sort
  use creusot.int.UInt64
  use seq.Seq
  use seq.Permut
  use creusot.prelude.Opaque
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_T
  
  predicate permutation_of (self: Seq.seq t_T) (other: Seq.seq t_T) = Permut.permut self other 0 (Seq.length self)
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  type t_DeepModelTy
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: t_DeepModelTy) (other: t_DeepModelTy) : t_Ordering
  
  function eq_cmp (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom eq_cmp_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym2_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym1_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: t_DeepModelTy) (y: t_DeepModelTy) (z: t_DeepModelTy) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: t_DeepModelTy, y: t_DeepModelTy, z: t_DeepModelTy, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: t_DeepModelTy) : ()
  
  axiom refl_spec: forall x: t_DeepModelTy. cmp_log x x = C_Equal
  
  predicate gt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_gt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_gt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. gt_log x y = (cmp_log x y = C_Greater)
  
  predicate ge_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_ge_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_ge_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_lt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_lt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_le_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_le_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. le_log x y = (cmp_log x y <> C_Greater)
  
  predicate sorted_range (s: Seq.seq t_DeepModelTy) (l: int) (u: int) =
    forall i: int, j: int. l <= i /\ i < j /\ j < u -> le_log (Seq.get s i) (Seq.get s j)
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_T = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  function deep_model'0 (self: t_Vec) : Seq.seq t_DeepModelTy
  
  axiom deep_model_spec: forall self: t_Vec. Seq.length (view self) = Seq.length (deep_model'0 self)
  
  axiom deep_model_spec'0: forall self: t_Vec. forall i: int. 0 <= i /\ i < Seq.length (view self)
        -> Seq.get (deep_model'0 self) i = deep_model (index_logic self i)
  
  function deep_model'1 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_DeepModelTy = deep_model'0 self.current
  
  meta "rewrite_def" function deep_model'1
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 (_1: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_1: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: t_Vec) = inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_1: t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  let rec len (self_: t_Vec) (return (x: UInt64.t)) = {[@expl:len 'self_' type invariant] inv'3 self_}
    any [ return' (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate invariant''3 [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 (_1: t_T)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_T [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return (x: t_T)) = {[@expl:index 'self_' type invariant] inv'3 self_}
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return' (result: t_T) -> {inv'4 result} {has_value ix (view self_) result} (! return {result}) ]
  
  type tuple = { f0: t_T; f1: t_T }
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef:
    forall args: tuple [precondition () args]. (let {f0 = self_; f1 = other} = args in inv'4 other /\ inv'4 self_)
      -> precondition () args
  
  function deep_model'2 [@inline:trivial] (self: t_T) : t_DeepModelTy = deep_model self
  
  meta "rewrite_def" function deep_model'2
  
  predicate postcondition_once (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef:
    forall args: tuple, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let {f0 = self_; f1 = other} = args in res = le_log (deep_model'2 self_) (deep_model'2 other))
  
  let rec le (self_: t_T) (other: t_T) (return (x: bool)) = {[@expl:le requires] precondition () { f0 = self_;
                                                                                                   f1 = other }}
    any [ return' (result: bool) -> {postcondition_once () { f0 = self_; f1 = other } result} (! return {result}) ]
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 (_1: MutBorrow.t t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate invariant''5 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'6 (_1: Slice64.slice t_T)
  
  axiom inv_axiom'5 [@rewrite]: forall x: Slice64.slice t_T [inv'6 x]. inv'6 x = invariant''5 x
  
  predicate invariant''6 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'7 (_1: MutBorrow.t (Slice64.slice t_T))
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t (Slice64.slice t_T) [inv'7 x]. inv'7 x = invariant''6 x
  
  let rec deref_mut (self_: MutBorrow.t t_Vec) (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:deref_mut 'self_' type invariant] inv'5 self_}
    any
    [ return' (result: MutBorrow.t (Slice64.slice t_T)) -> {inv'7 result}
      {Slice64.view result.current = view self_.current}
      {Slice64.view result.final = view self_.final}
      (! return {result}) ]
  
  let rec swap (self_: MutBorrow.t (Slice64.slice t_T)) (i: UInt64.t) (j: UInt64.t) (return (x: ())) =
    {[@expl:swap 'self_' type invariant] inv'7 self_}
    {[@expl:swap requires #0] UInt64.t'int i < Seq.length (Slice64.view self_.current)}
    {[@expl:swap requires #1] UInt64.t'int j < Seq.length (Slice64.view self_.current)}
    any
    [ return' (result: ()) ->
    {Permut.exchange (Slice64.view self_.final) (Slice64.view self_.current) (UInt64.t'int i) (UInt64.t'int j)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_Vec) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t t_Vec) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate sorted (s: Seq.seq t_DeepModelTy) = sorted_range s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec gnome_sort (v: MutBorrow.t t_Vec) (return (x: ())) = {[@expl:gnome_sort 'v' type invariant] inv'5 v}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &i <- (0: UInt64.t) ] s1 | s1 = [ &old_2_0 <- v ] s2 | s2 = bb2 ]
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] old_2_0.final = v.final}
        {[@expl:loop invariant #0] sorted_range (deep_model'1 v) 0 (UInt64.t'int i)}
        {[@expl:loop invariant #1] permutation_of (view v.current) (view old_v.current)}
        (! s0)
        [ s0 = bb3 ]
        [ bb3 = s0 [ s0 = len {v.current} (fun (_ret: UInt64.t) -> [ &_13 <- _ret ] s1) | s1 = bb4 ]
        | bb4 = s0
          [ s0 = [ &_11 <- UInt64.lt i _13 ] s1 | s1 = any [ br0 -> {_11 = false} (! bb17) | br1 -> {_11} (! bb5) ] ]
        | bb5 = s0
          [ s0 = [ &_15 <- i = (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_15 = false} (! bb7) | br1 -> {_15} (! bb12) ] ]
        | bb7 = s0
          [ s0 = UInt64.sub {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_21 <- _ret ] s1)
          | s1 = index {v.current} {_21} (fun (_ret: t_T) -> [ &_19 <- _ret ] s2)
          | s2 = bb8 ]
        | bb8 = s0 [ s0 = index {v.current} {i} (fun (_ret: t_T) -> [ &_24 <- _ret ] s1) | s1 = bb9 ]
        | bb9 = s0 [ s0 = le {_19} {_24} (fun (_ret: bool) -> [ &_17 <- _ret ] s1) | s1 = bb10 ]
        | bb10 = any [ br0 -> {_17 = false} (! bb13) | br1 -> {_17} (! bb12) ]
        | bb12 = s0 [ s0 = UInt64.add {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s1) | s1 = bb2 ]
        | bb13 = s0
          [ s0 = {inv'2 v.current}
            MutBorrow.borrow_mut <t_Vec> {v.current}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_30 <- _ret ] -{inv'2 _ret.final}-
                [ &v <- { v with current = _ret.final } ] s1)
          | s1 = deref_mut {_30} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_29 <- _ret ] s2)
          | s2 = bb14 ]
        | bb14 = s0
          [ s0 = UInt64.sub {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_31 <- _ret ] s1)
          | s1 = {inv'6 _29.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_29.current} {MutBorrow.get_id _29}
              (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
                [ &_28 <- _ret ] -{inv'6 _ret.final}-
                [ &_29 <- { _29 with current = _ret.final } ] s2)
          | s2 = swap {_28} {_31} {i} (fun (_ret: ()) -> [ &_27 <- _ret ] s3)
          | s3 = bb15 ]
        | bb15 = s0
          [ s0 = {[@expl:type invariant] inv'7 _29} s1
          | s1 = -{resolve'0 _29}- s2
          | s2 = UInt64.sub {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s3)
          | s3 = bb2 ] ] ]
    | bb17 = s0 [ s0 = {[@expl:type invariant] inv'5 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & _19: t_T = Any.any_l ()
    | & _21: UInt64.t = Any.any_l ()
    | & _24: t_T = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _29: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _30: MutBorrow.t t_Vec = Any.any_l ()
    | & _31: UInt64.t = Any.any_l ()
    | & old_2_0: MutBorrow.t t_Vec = Any.any_l () ])
    [ return (result: ()) -> {[@expl:gnome_sort ensures #0] sorted (deep_model'0 v.final)}
      {[@expl:gnome_sort ensures #1] permutation_of (view v.final) (view v.current)}
      (! return {result}) ]
end
