module M_02_gnome__gnome_sort [#"02_gnome.rs" 22 0 24 29]
  let%span s02_gnome = "02_gnome.rs" 26 16 26 31
  let%span s02_gnome'0 = "02_gnome.rs" 27 16 27 17
  let%span s02_gnome'1 = "02_gnome.rs" 29 16 29 41
  let%span s02_gnome'2 = "02_gnome.rs" 28 16 28 51
  let%span s02_gnome'3 = "02_gnome.rs" 31 16 31 17
  let%span s02_gnome'4 = "02_gnome.rs" 31 27 31 28
  let%span s02_gnome'5 = "02_gnome.rs" 32 17 32 18
  let%span s02_gnome'6 = "02_gnome.rs" 34 23 34 24
  let%span s02_gnome'7 = "02_gnome.rs" 35 17 35 18
  let%span s02_gnome'8 = "02_gnome.rs" 22 38 22 39
  let%span s02_gnome'9 = "02_gnome.rs" 20 10 20 35
  let%span s02_gnome'10 = "02_gnome.rs" 21 10 21 34
  let%span s02_gnome'11 = "02_gnome.rs" 11 8 11 62
  let%span s02_gnome'12 = "02_gnome.rs" 17 4 17 31
  let%span s02_gnome'13 = "02_gnome.rs" 1 0 1353 4
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 318 8 318 41
  let%span sseq'0 = "../../../creusot-contracts/src/logic/seq.rs" 685 20 685 91
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 53 8 53 28
  let%span smodel'1 = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'2 = "../../../creusot-contracts/src/model.rs" 35 8 35 28
  let%span ssnapshot = "../../../creusot-contracts/src/snapshot.rs" 50 8 50 27
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 80 16 80 17
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 81 26 81 48
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 159 16 159 17
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 160 27 160 46
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 161 26 161 54
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 172 16 172 17
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 173 26 173 42
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 174 26 174 48
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 33 14 33 47
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 34 14 35 51
  let%span svec'9 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span svec'10 = "../../../creusot-contracts/src/std/vec.rs" 63 20 63 41
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 242 8 242 9
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 243 19 243 35
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 244 19 244 35
  let%span sslice'2 = "../../../creusot-contracts/src/std/slice.rs" 245 18 245 50
  let%span sslice'3 = "../../../creusot-contracts/src/std/slice.rs" 108 20 108 37
  let%span sslice'4 = "../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  let%span sslice'5 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'6 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sslice'7 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinvariant'0 = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.int.UInt64
  use seq.Seq
  use seq.Permut
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_T
  
  predicate permutation_of (self: Seq.seq t_T) (other: Seq.seq t_T) =
    [%#sseq] Permut.permut self other 0 (Seq.length self)
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'9] Seq.length (view self) <= UInt64.t'int v_MAX
  
  function view'0 (self: MutBorrow.t t_Vec) : Seq.seq t_T =
    [%#smodel] view self.current
  
  function view'1 (self: MutBorrow.t t_Vec) : Seq.seq t_T =
    [%#smodel'1] view'0 self
  
  function view'2 (self: MutBorrow.t t_Vec) : Seq.seq t_T =
    [%#ssnapshot] view'1 self
  
  type t_DeepModelTy
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self: t_DeepModelTy) (other: t_DeepModelTy) : t_Ordering
  
  function eq_cmp (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom eq_cmp_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym2_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym1_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: t_DeepModelTy) (y: t_DeepModelTy) (z: t_DeepModelTy) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: t_DeepModelTy, y: t_DeepModelTy, z: t_DeepModelTy, o: t_Ordering. ([%#sord'4] cmp_log x y
  = o)  -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: t_DeepModelTy) : ()
  
  axiom refl_spec: forall x: t_DeepModelTy. [%#sord'3] cmp_log x x = C_Equal
  
  predicate gt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_gt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_gt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'2] gt_log x y = (cmp_log x y = C_Greater)
  
  predicate ge_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_ge_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_ge_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'1] ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_lt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_lt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'0] lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_le_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_le_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord] le_log x y = (cmp_log x y <> C_Greater)
  
  predicate sorted_range [#"02_gnome.rs" 9 0 9 63] (s: Seq.seq t_DeepModelTy) (l: int) (u: int) =
    [%#s02_gnome'11] forall i: int, j: int. l <= i /\ i < j /\ j < u  -> le_log (Seq.get s i) (Seq.get s j)
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_T =
    [%#sindex] Seq.get (view self) ix
  
  function deep_model'0 (self: t_Vec) : Seq.seq t_DeepModelTy
  
  axiom deep_model_spec: forall self: t_Vec. ([%#svec'7] Seq.length (view self) = Seq.length (deep_model'0 self))
  && ([%#svec'8] forall i: int. 0 <= i /\ i < Seq.length (view self)
   -> Seq.get (deep_model'0 self) i = deep_model (index_logic self i))
  
  function deep_model'1 (self: MutBorrow.t t_Vec) : Seq.seq t_DeepModelTy =
    [%#smodel'0] deep_model'0 self.current
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) =
    [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 (self: Seq.seq t_T) =
    [%#sseq'0] forall i: int. 0 <= i /\ i < Seq.length self  -> inv'0 (Seq.get self i)
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate invariant''1 (self: t_Vec) =
    [%#svec'10] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 (self: t_Vec) =
    [%#sinvariant'0] inv'2 self
  
  predicate inv'3 (_0: t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  function view'3 (self: t_Vec) : Seq.seq t_T =
    [%#smodel'1] view self
  
  let rec len (self_:t_Vec) (return'  (x:UInt64.t))= {[@expl:len 'self_' type invariant] [%#svec] inv'3 self_}
    any
    [ return''0 (result:UInt64.t)-> {[%#svec'0] UInt64.t'int result = Seq.length (view'3 self_)} (! return' {result}) ]
  
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) =
    [%#sslice'3] UInt64.t'int self < Seq.length seq
  
  predicate invariant''3 (self: t_T) =
    [%#sinvariant'0] inv self
  
  predicate inv'4 (_0: t_T)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_T [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    [%#sslice'4] Seq.get seq (UInt64.t'int self) = out
  
  let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_T))= {[@expl:index 'self_' type invariant] [%#svec'1] inv'3 self_}
    {[@expl:index requires] [%#svec'2] in_bounds ix (view'3 self_)}
    any
    [ return''0 (result:t_T)-> {inv'4 result} {[%#svec'3] has_value ix (view'3 self_) result} (! return' {result}) ]
  
  
  type tuple  =
    { _p0: t_T; _p1: t_T }
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef: [%#s02_gnome'13] forall args: tuple [precondition () args]. (let {_p0 = self_ ; _p1 = other} = args in inv'4 other
  /\ inv'4 self_)  -> precondition () args
  
  function deep_model'2 (self: t_T) : t_DeepModelTy =
    [%#smodel'2] deep_model self
  
  predicate postcondition_once (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef: [%#s02_gnome'13] forall args: tuple, res: bool [postcondition_once () args res]. postcondition_once () args res
   -> (let {_p0 = self_ ; _p1 = other} = args in res = le_log (deep_model'2 self_) (deep_model'2 other))
  
  let rec le (self_:t_T) (other:t_T) (return'  (x:bool))= {[@expl:le requires] precondition () { _p0 = self_;
                                                                                                 _p1 = other }}
    any [ return''0 (result:bool)-> {postcondition_once () { _p0 = self_; _p1 = other } result} (! return' {result}) ] 
  
  predicate invariant''4 (self: MutBorrow.t t_Vec) =
    [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'5 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'5 x]. inv'5 x = invariant''4 x
  
  function view'4 (self: Slice64.slice t_T) : Seq.seq t_T
  
  axiom view_spec'0: forall self: Slice64.slice t_T. ([%#sslice'5] Seq.length (view'4 self) <= UInt64.t'int v_MAX)
  && ([%#sslice'6] view'4 self = Slice64.id self)
  
  predicate invariant''5 (self: Slice64.slice t_T) =
    [%#sslice'7] inv'1 (view'4 self)
  
  predicate inv'6 (_0: Slice64.slice t_T)
  
  axiom inv_axiom'5 [@rewrite]: forall x: Slice64.slice t_T [inv'6 x]. inv'6 x = invariant''5 x
  
  predicate invariant''6 (self: MutBorrow.t (Slice64.slice t_T)) =
    [%#sinvariant] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'7 (_0: MutBorrow.t (Slice64.slice t_T))
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t (Slice64.slice t_T) [inv'7 x]. inv'7 x = invariant''6 x
  
  function view'5 (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq t_T =
    [%#smodel] view'4 self.current
  
  let rec deref_mut (self_:MutBorrow.t t_Vec) (return'  (x:MutBorrow.t (Slice64.slice t_T)))= {[@expl:deref_mut 'self_' type invariant] [%#svec'4] inv'5 self_}
    any
    [ return''0 (result:MutBorrow.t (Slice64.slice t_T))-> {inv'7 result}
      {[%#svec'5] view'5 result = view'0 self_}
      {[%#svec'6] view'4 result.final = view self_.final}
      (! return' {result}) ]
  
  
  let rec swap (self_:MutBorrow.t (Slice64.slice t_T)) (i:UInt64.t) (j:UInt64.t) (return'  (x:()))= {[@expl:swap 'self_' type invariant] [%#sslice] inv'7 self_}
    {[@expl:swap requires #0] [%#sslice'0] UInt64.t'int i < Seq.length (view'5 self_)}
    {[@expl:swap requires #1] [%#sslice'1] UInt64.t'int j < Seq.length (view'5 self_)}
    any
    [ return''0 (result:())-> {[%#sslice'2] Permut.exchange (view'4 self_.final) (view'5 self_) (UInt64.t'int i) (UInt64.t'int j)}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t (Slice64.slice t_T)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (Slice64.slice t_T)) =
    resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_Vec) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_Vec) =
    resolve'1 _0
  
  predicate sorted [#"02_gnome.rs" 16 0 16 41] (s: Seq.seq t_DeepModelTy) =
    [%#s02_gnome'12] sorted_range s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec gnome_sort[#"02_gnome.rs" 22 0 24 29] (v:MutBorrow.t t_Vec) (return'  (x:()))= {[@expl:gnome_sort 'v' type invariant] [%#s02_gnome'8] inv'5 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#s02_gnome] v'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &i <- [%#s02_gnome'0] (0: UInt64.t) ] s1 | s1 =  [ &old_2_0 <- v'0 ] s2 | s2 = bb2 ] 
    | bb2 = bb2'0
      [ bb2'0 = {[@expl:mut invariant] old_2_0.final = v'0.final}
        {[@expl:loop invariant #0] [%#s02_gnome'2] sorted_range (deep_model'1 v'0) 0 (UInt64.t'int i)}
        {[@expl:loop invariant #1] [%#s02_gnome'1] permutation_of (view'0 v'0) (view'2 old_v)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len {v'0.current} (fun (_ret:UInt64.t) ->  [ &_13 <- _ret ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 =  [ &_11 <- UInt64.lt i _13 ] s1 | s1 = any [ br0 -> {_11 = false} (! bb17) | br1 -> {_11} (! bb5) ]  ]
        
        | bb5 = s0
          [ s0 =  [ &_15 <- i = ([%#s02_gnome'3] (0: UInt64.t)) ] s1
          | s1 = any [ br0 -> {_15 = false} (! bb7) | br1 -> {_15} (! bb12) ]  ]
        
        | bb7 = s0
          [ s0 = UInt64.sub {i} {[%#s02_gnome'4] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &_21 <- _ret ] s1)
          | s1 = index {v'0.current} {_21} (fun (_ret:t_T) ->  [ &_19 <- _ret ] s2)
          | s2 = bb8 ]
        
        | bb8 = s0 [ s0 = index {v'0.current} {i} (fun (_ret:t_T) ->  [ &_24 <- _ret ] s1) | s1 = bb9 ] 
        | bb9 = s0 [ s0 = le {_19} {_24} (fun (_ret:bool) ->  [ &_17 <- _ret ] s1) | s1 = bb10 ] 
        | bb10 = any [ br0 -> {_17 = false} (! bb13) | br1 -> {_17} (! bb12) ] 
        | bb12 = s0
          [ s0 = UInt64.add {i} {[%#s02_gnome'5] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1)
          | s1 = bb2'0 ]
        
        | bb13 = s0
          [ s0 = {inv'2 v'0.current}
            MutBorrow.borrow_mut <t_Vec> {v'0.current}
              (fun (_ret:MutBorrow.t t_Vec) ->
                 [ &_30 <- _ret ] 
                -{inv'2 _ret.final}-
                 [ &v'0 <- { v'0 with current = _ret.final } ] 
                s1)
          | s1 = deref_mut {_30} (fun (_ret:MutBorrow.t (Slice64.slice t_T)) ->  [ &_29 <- _ret ] s2)
          | s2 = bb14 ]
        
        | bb14 = s0
          [ s0 = UInt64.sub {i} {[%#s02_gnome'6] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &_31 <- _ret ] s1)
          | s1 = {inv'6 _29.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_29.current} {MutBorrow.get_id _29}
              (fun (_ret:MutBorrow.t (Slice64.slice t_T)) ->
                 [ &_28 <- _ret ] 
                -{inv'6 _ret.final}-
                 [ &_29 <- { _29 with current = _ret.final } ] 
                s2)
          | s2 = swap {_28} {_31} {i} (fun (_ret:()) ->  [ &_27 <- _ret ] s3)
          | s3 = bb15 ]
        
        | bb15 = s0
          [ s0 = {[@expl:type invariant] inv'7 _29} s1
          | s1 = -{resolve'0 _29}- s2
          | s2 = UInt64.sub {i} {[%#s02_gnome'7] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s3)
          | s3 = bb2'0 ]
         ]
       ]
    
    | bb17 = s0 [ s0 = {[@expl:type invariant] inv'5 v'0} s1 | s1 = -{resolve'2 v'0}- s2 | s2 = return''0 {_0} ]  ]
    )
    [ & _0: () = Any.any_l ()
    | & v'0: MutBorrow.t t_Vec = v
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & _19: t_T = Any.any_l ()
    | & _21: UInt64.t = Any.any_l ()
    | & _24: t_T = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _29: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _30: MutBorrow.t t_Vec = Any.any_l ()
    | & _31: UInt64.t = Any.any_l ()
    | & old_2_0: MutBorrow.t t_Vec = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:gnome_sort ensures #0] [%#s02_gnome'9] sorted (deep_model'0 v.final)}
      {[@expl:gnome_sort ensures #1] [%#s02_gnome'10] permutation_of (view v.final) (view'0 v)}
      (! return' {result}) ]

end
