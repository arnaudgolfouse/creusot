module M_search
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.UInt8
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_u8_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_u8_Global (self: t_Vec_u8_Global) : Seq.seq UInt8.t
  
  axiom view_Vec_u8_Global_spec: forall self: t_Vec_u8_Global. Seq.length (view_Vec_u8_Global self)
      <= UInt64.t'int const_MAX
  
  let rec len_u8 (self_: t_Vec_u8_Global) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_u8_Global self_)} (! return {result}) ]
  
  type t_RangeInclusive_usize
  
  predicate inv_RangeInclusive_usize (_1: t_RangeInclusive_usize)
  
  function start_log_RangeInclusive_usize (self: t_RangeInclusive_usize) : UInt64.t
  
  function end_log_RangeInclusive_usize (self: t_RangeInclusive_usize) : UInt64.t
  
  function deep_model_usize [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model_usize
  
  predicate is_empty_log_RangeInclusive_usize (self: t_RangeInclusive_usize)
  
  axiom is_empty_log_RangeInclusive_usize_spec:
    forall self: t_RangeInclusive_usize. not is_empty_log_RangeInclusive_usize self
      -> deep_model_usize (start_log_RangeInclusive_usize self) <= deep_model_usize (end_log_RangeInclusive_usize self)
  
  let rec new_usize (start: UInt64.t) (end': UInt64.t) (return (x: t_RangeInclusive_usize)) = any
    [ return (result: t_RangeInclusive_usize) -> {inv_RangeInclusive_usize result}
      {start_log_RangeInclusive_usize result = start}
      {end_log_RangeInclusive_usize result = end'}
      {deep_model_usize start <= deep_model_usize end' -> not is_empty_log_RangeInclusive_usize result}
      (! return {result}) ]
  
  let rec into_iter_RangeInclusive_usize (self_: t_RangeInclusive_usize) (return (x: t_RangeInclusive_usize)) =
    {[@expl:into_iter 'self_' type invariant] inv_RangeInclusive_usize self_}
    any
    [ return (result: t_RangeInclusive_usize) -> {inv_RangeInclusive_usize result}
      {result = self_}
      (! return {result}) ]
  
  function index_Vec_u8_Global [@inline:trivial] (self: t_Vec_u8_Global) (ix: int) : UInt8.t =
    Seq.get (view_Vec_u8_Global self) ix
  
  meta "rewrite_def" function index_Vec_u8_Global
  
  predicate match_at (needle: t_Vec_u8_Global) (haystack: t_Vec_u8_Global) (pos: int) (len: int) =
    len <= Seq.length (view_Vec_u8_Global needle)
    /\ pos <= Seq.length (view_Vec_u8_Global haystack) - len
    /\ (forall i: int. 0 <= i /\ i < len -> index_Vec_u8_Global needle i = index_Vec_u8_Global haystack (pos + i))
  
  function range_inclusive_len_usize (r: t_RangeInclusive_usize) : int = if is_empty_log_RangeInclusive_usize r then
      0
    else
      deep_model_usize (end_log_RangeInclusive_usize r) - deep_model_usize (start_log_RangeInclusive_usize r) + 1
  
  
  axiom range_inclusive_len_usize_spec: forall r: t_RangeInclusive_usize. is_empty_log_RangeInclusive_usize r
      = (range_inclusive_len_usize r = 0)
  
  predicate produces_RangeInclusive_usize (self: t_RangeInclusive_usize) (visited: Seq.seq UInt64.t) (o: t_RangeInclusive_usize) =
    Seq.length visited = range_inclusive_len_usize self - range_inclusive_len_usize o
    /\ (is_empty_log_RangeInclusive_usize self -> is_empty_log_RangeInclusive_usize o)
    /\ (is_empty_log_RangeInclusive_usize o \/ end_log_RangeInclusive_usize self = end_log_RangeInclusive_usize o)
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_usize (Seq.get visited i) = deep_model_usize (start_log_RangeInclusive_usize self) + i)
  
  function produces_trans_RangeInclusive_usize (a: t_RangeInclusive_usize) (ab: Seq.seq UInt64.t) (b: t_RangeInclusive_usize) (bc: Seq.seq UInt64.t) (c: t_RangeInclusive_usize) : ()
   = ()
  
  axiom produces_trans_RangeInclusive_usize_spec:
    forall a: t_RangeInclusive_usize, ab: Seq.seq UInt64.t, b: t_RangeInclusive_usize, bc: Seq.seq UInt64.t, c: t_RangeInclusive_usize. produces_RangeInclusive_usize a ab b
      -> produces_RangeInclusive_usize b bc c -> produces_RangeInclusive_usize a (Seq.(++) ab bc) c
  
  function produces_refl_RangeInclusive_usize (self: t_RangeInclusive_usize) : () = ()
  
  axiom produces_refl_RangeInclusive_usize_spec:
    forall self: t_RangeInclusive_usize. produces_RangeInclusive_usize self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv_Seq_usize [@inline:trivial] (_1: Seq.seq UInt64.t) = true
  
  meta "rewrite_def" predicate inv_Seq_usize
  
  type t_Option_usize = None | Some UInt64.t
  
  predicate invariant_ref_RangeInclusive_usize [@inline:trivial] (self: MutBorrow.t t_RangeInclusive_usize) =
    inv_RangeInclusive_usize self.current /\ inv_RangeInclusive_usize self.final
  
  meta "rewrite_def" predicate invariant_ref_RangeInclusive_usize
  
  predicate inv_ref_RangeInclusive_usize [@inline:trivial] (_1: MutBorrow.t t_RangeInclusive_usize) =
    invariant_ref_RangeInclusive_usize _1
  
  meta "rewrite_def" predicate inv_ref_RangeInclusive_usize
  
  predicate completed_RangeInclusive_usize (self: MutBorrow.t t_RangeInclusive_usize) =
    is_empty_log_RangeInclusive_usize self.current /\ is_empty_log_RangeInclusive_usize self.final
  
  let rec next_RangeInclusive_usize (self_: MutBorrow.t t_RangeInclusive_usize) (return (x: t_Option_usize)) =
    {[@expl:next 'self_' type invariant] inv_ref_RangeInclusive_usize self_}
    any
    [ return (result: t_Option_usize) -> {match result with
        | None -> completed_RangeInclusive_usize self_
        | Some v -> produces_RangeInclusive_usize self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  predicate resolve_ref_RangeInclusive_usize [@inline:trivial] (_1: MutBorrow.t t_RangeInclusive_usize) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_RangeInclusive_usize
  
  let rec elim_Some (input: t_Option_usize) (ret (f0: UInt64.t)) = any
    [ good (f0: UInt64.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: UInt64.t [Some f0: t_Option_usize]. Some f0 <> input} (! {false} any) ]
  
  type t_Range_usize = { start: UInt64.t; end': UInt64.t }
  
  let rec into_iter_Range_usize (self_: t_Range_usize) (return (x: t_Range_usize)) = any
    [ return (result: t_Range_usize) -> {result = self_} (! return {result}) ]
  
  predicate produces_Range_usize (self: t_Range_usize) (visited: Seq.seq UInt64.t) (o: t_Range_usize) =
    self.end' = o.end'
    /\ deep_model_usize self.start <= deep_model_usize o.start
    /\ (Seq.length visited > 0 -> deep_model_usize o.start <= deep_model_usize o.end')
    /\ Seq.length visited = deep_model_usize o.start - deep_model_usize self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_usize (Seq.get visited i) = deep_model_usize self.start + i)
  
  function produces_trans_Range_usize (a: t_Range_usize) (ab: Seq.seq UInt64.t) (b: t_Range_usize) (bc: Seq.seq UInt64.t) (c: t_Range_usize) : ()
  
  axiom produces_trans_Range_usize_spec:
    forall a: t_Range_usize, ab: Seq.seq UInt64.t, b: t_Range_usize, bc: Seq.seq UInt64.t, c: t_Range_usize. produces_Range_usize a ab b
      -> produces_Range_usize b bc c -> produces_Range_usize a (Seq.(++) ab bc) c
  
  function produces_refl_Range_usize (self: t_Range_usize) : ()
  
  axiom produces_refl_Range_usize_spec:
    forall self: t_Range_usize. produces_Range_usize self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv_Range_usize [@inline:trivial] (_1: t_Range_usize) = true
  
  meta "rewrite_def" predicate inv_Range_usize
  
  predicate resolve_ref_Range_usize [@inline:trivial] (_1: MutBorrow.t t_Range_usize) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_usize
  
  predicate completed_Range_usize (self: MutBorrow.t t_Range_usize) =
    resolve_ref_Range_usize self /\ deep_model_usize self.current.start >= deep_model_usize self.current.end'
  
  let rec next_Range_usize (self_: MutBorrow.t t_Range_usize) (return (x: t_Option_usize)) = any
    [ return (result: t_Option_usize) -> {match result with
        | None -> completed_Range_usize self_
        | Some v -> produces_Range_usize self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt8.t) =
    UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt8.t) (out: UInt8.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  let rec index_Vec_u8_Global'0 (self_: t_Vec_u8_Global) (ix: UInt64.t) (return (x: UInt8.t)) =
    {[@expl:index requires] in_bounds_usize ix (view_Vec_u8_Global self_)}
    any [ return (result: UInt8.t) -> {has_value_usize ix (view_Vec_u8_Global self_) result} (! return {result}) ]
  
  predicate resolve_RangeInclusive_usize (_1: t_RangeInclusive_usize)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec search (needle: t_Vec_u8_Global) (haystack: t_Vec_u8_Global) (return (x: UInt64.t)) =
    {[@expl:search requires] Seq.length (view_Vec_u8_Global needle) >= 1
    /\ Seq.length (view_Vec_u8_Global needle) <= Seq.length (view_Vec_u8_Global haystack)}
    (! bb0
    [ bb0 = s0 [ s0 = len_u8 {haystack} (fun (_ret: UInt64.t) -> [ &_12 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = len_u8 {needle} (fun (_ret: UInt64.t) -> [ &_14 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = UInt64.sub {_12} {_14} (fun (_ret: UInt64.t) -> [ &_11 <- _ret ] s1)
      | s1 = new_usize {(0: UInt64.t)} {_11} (fun (_ret: t_RangeInclusive_usize) -> [ &_10 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = into_iter_RangeInclusive_usize {_10} (fun (_ret: t_RangeInclusive_usize) -> [ &iter <- _ret ] s1)
      | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb7 ]
    | bb7 = bb7
      [ bb7 = {[@expl:for invariant] inv_Seq_usize produced}
        {[@expl:for invariant] inv_RangeInclusive_usize iter}
        {[@expl:for invariant] produces_RangeInclusive_usize iter_old produced iter}
        {[@expl:loop invariant] forall k: int. 0 <= k /\ k < Seq.length produced
          -> not match_at needle haystack k (Seq.length (view_Vec_u8_Global needle))}
        (! s0)
        [ s0 = bb8 ]
        [ bb8 = s0
          [ s0 = {inv_RangeInclusive_usize iter}
            MutBorrow.borrow_mut <t_RangeInclusive_usize> {iter}
              (fun (_ret: MutBorrow.t t_RangeInclusive_usize) ->
                [ &_28 <- _ret ] -{inv_RangeInclusive_usize _ret.final}-
                [ &iter <- _ret.final ] s1)
          | s1 = {inv_RangeInclusive_usize _28.current}
            MutBorrow.borrow_final <t_RangeInclusive_usize> {_28.current} {MutBorrow.get_id _28}
              (fun (_ret: MutBorrow.t t_RangeInclusive_usize) ->
                [ &_27 <- _ret ] -{inv_RangeInclusive_usize _ret.final}-
                [ &_28 <- { _28 with current = _ret.final } ] s2)
          | s2 = next_RangeInclusive_usize {_27} (fun (_ret: t_Option_usize) -> [ &_26 <- _ret ] s3)
          | s3 = bb9 ]
        | bb9 = s0
          [ s0 = {[@expl:type invariant] inv_ref_RangeInclusive_usize _28} s1
          | s1 = -{resolve_ref_RangeInclusive_usize _28}- s2
          | s2 = any [ br0 -> {_26 = None} (! bb12) | br1 (x0: UInt64.t) -> {_26 = Some x0} (! bb13) ] ]
        | bb13 = s0
          [ s0 = elim_Some {_26} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_31 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb14 ]
        | bb14 = s0
          [ s0 = [ &produced <- _31 ] s1
          | s1 = [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = len_u8 {needle} (fun (_ret: UInt64.t) -> [ &_38 <- _ret ] s3)
          | s3 = bb15 ]
        | bb15 = s0
          [ s0 = [ &_37 <- { start = (0: UInt64.t); end' = _38 } ] s1
          | s1 = into_iter_Range_usize {_37} (fun (_ret: t_Range_usize) -> [ &iter'0 <- _ret ] s2)
          | s2 = bb16 ]
        | bb16 = s0 [ s0 = [ &iter_old'0 <- iter'0 ] s1 | s1 = bb17 ]
        | bb17 = s0 [ s0 = [ &produced'0 <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb19 ]
        | bb19 = bb19
          [ bb19 = {[@expl:for invariant] inv_Seq_usize produced'0}
            {[@expl:for invariant] inv_Range_usize iter'0}
            {[@expl:for invariant] produces_Range_usize iter_old'0 produced'0 iter'0}
            {[@expl:loop invariant] match_at needle haystack (UInt64.t'int i) (Seq.length produced'0)}
            (! s0)
            [ s0 = bb20 ]
            [ bb20 = s0
              [ s0 = MutBorrow.borrow_mut <t_Range_usize> {iter'0}
                  (fun (_ret: MutBorrow.t t_Range_usize) -> [ &_51 <- _ret ] [ &iter'0 <- _ret.final ] s1)
              | s1 = MutBorrow.borrow_final <t_Range_usize> {_51.current} {MutBorrow.get_id _51}
                  (fun (_ret: MutBorrow.t t_Range_usize) ->
                    [ &_50 <- _ret ] [ &_51 <- { _51 with current = _ret.final } ] s2)
              | s2 = next_Range_usize {_50} (fun (_ret: t_Option_usize) -> [ &_49 <- _ret ] s3)
              | s3 = bb21 ]
            | bb21 = s0
              [ s0 = -{resolve_ref_Range_usize _51}- s1
              | s1 = any [ br0 -> {_49 = None} (! bb24) | br1 (x0: UInt64.t) -> {_49 = Some x0} (! bb25) ] ]
            | bb25 = s0
              [ s0 = elim_Some {_49} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem'0 <- r0 ] s1)
              | s1 = [ &_54 <- Seq.(++) produced'0 (Seq.singleton __creusot_proc_iter_elem'0) ] s2
              | s2 = bb26 ]
            | bb26 = s0
              [ s0 = [ &produced'0 <- _54 ] s1
              | s1 = [ &j <- __creusot_proc_iter_elem'0 ] s2
              | s2 = index_Vec_u8_Global'0 {needle} {j} (fun (_ret: UInt8.t) -> [ &_59 <- _ret ] s3)
              | s3 = bb27 ]
            | bb27 = s0
              [ s0 = UInt64.add {i} {j} (fun (_ret: UInt64.t) -> [ &_65 <- _ret ] s1)
              | s1 = index_Vec_u8_Global'0 {haystack} {_65} (fun (_ret: UInt8.t) -> [ &_63 <- _ret ] s2)
              | s2 = bb28 ]
            | bb28 = s0
              [ s0 = [ &_57 <- _59 <> _63 ] s1
              | s1 = any [ br0 -> {_57 = false} (! bb19) | br1 -> {_57} (! bb7) ] ] ] ] ] ]
    | bb24 = s0
      [ s0 = {[@expl:type invariant] inv_RangeInclusive_usize iter} s1
      | s1 = -{resolve_RangeInclusive_usize iter}- s2
      | s2 = [ &_0 <- i ] s3
      | s3 = bb32 ]
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv_RangeInclusive_usize iter} s1
      | s1 = -{resolve_RangeInclusive_usize iter}- s2
      | s2 = len_u8 {haystack} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s3)
      | s3 = bb32 ]
    | bb32 = return {_0} ]
    [ & _0: UInt64.t = Any.any_l ()
    | & needle: t_Vec_u8_Global = needle
    | & haystack: t_Vec_u8_Global = haystack
    | & iter: t_RangeInclusive_usize = Any.any_l ()
    | & _10: t_RangeInclusive_usize = Any.any_l ()
    | & _11: UInt64.t = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _14: UInt64.t = Any.any_l ()
    | & iter_old: t_RangeInclusive_usize = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _26: t_Option_usize = Any.any_l ()
    | & _27: MutBorrow.t t_RangeInclusive_usize = Any.any_l ()
    | & _28: MutBorrow.t t_RangeInclusive_usize = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _31: Seq.seq UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & iter'0: t_Range_usize = Any.any_l ()
    | & _37: t_Range_usize = Any.any_l ()
    | & _38: UInt64.t = Any.any_l ()
    | & iter_old'0: t_Range_usize = Any.any_l ()
    | & produced'0: Seq.seq UInt64.t = Any.any_l ()
    | & _49: t_Option_usize = Any.any_l ()
    | & _50: MutBorrow.t t_Range_usize = Any.any_l ()
    | & _51: MutBorrow.t t_Range_usize = Any.any_l ()
    | & __creusot_proc_iter_elem'0: UInt64.t = Any.any_l ()
    | & _54: Seq.seq UInt64.t = Any.any_l ()
    | & j: UInt64.t = Any.any_l ()
    | & _57: bool = Any.any_l ()
    | & _59: UInt8.t = Any.any_l ()
    | & _63: UInt8.t = Any.any_l ()
    | & _65: UInt64.t = Any.any_l () ])
    [ return (result: UInt64.t) -> {[@expl:search ensures #0] UInt64.t'int result
        = Seq.length (view_Vec_u8_Global haystack)
      \/ UInt64.t'int result < Seq.length (view_Vec_u8_Global haystack) - Seq.length (view_Vec_u8_Global needle) + 1}
      {[@expl:search ensures #1] UInt64.t'int result < Seq.length (view_Vec_u8_Global haystack)
      -> match_at needle haystack (UInt64.t'int result) (Seq.length (view_Vec_u8_Global needle))
      /\ (forall i: int. 0 <= i /\ i < UInt64.t'int result
        -> not match_at needle haystack i (Seq.length (view_Vec_u8_Global needle)))}
      {[@expl:search ensures #2] UInt64.t'int result = Seq.length (view_Vec_u8_Global haystack)
      -> (forall i: int. 0 <= i /\ i < Seq.length (view_Vec_u8_Global haystack)
        -> not match_at needle haystack i (Seq.length (view_Vec_u8_Global needle)))}
      (! return {result}) ]
end
