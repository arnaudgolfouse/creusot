module M_08_haystack__search
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.UInt8
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt8.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec len (self_: t_Vec) (return (x: UInt64.t)) = any
    [ return' (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  type t_RangeInclusive = {
    t_RangeInclusive__start: UInt64.t;
    t_RangeInclusive__end: UInt64.t;
    t_RangeInclusive__exhausted: bool }
  
  function start_log (self: t_RangeInclusive) : UInt64.t
  
  function end_log (self: t_RangeInclusive) : UInt64.t
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  predicate is_empty_log (self: t_RangeInclusive)
  
  axiom is_empty_log_spec: forall self: t_RangeInclusive. not is_empty_log self
      -> deep_model (start_log self) <= deep_model (end_log self)
  
  let rec new (start: UInt64.t) (end': UInt64.t) (return (x: t_RangeInclusive)) = any
    [ return' (result: t_RangeInclusive) -> {start_log result = start}
      {end_log result = end'}
      {deep_model start <= deep_model end' -> not is_empty_log result}
      (! return {result}) ]
  
  let rec into_iter (self_: t_RangeInclusive) (return (x: t_RangeInclusive)) = any
    [ return' (result: t_RangeInclusive) -> {result = self_} (! return {result}) ]
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : UInt8.t = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate match_at (needle: t_Vec) (haystack: t_Vec) (pos: int) (len'0: int) =
    len'0 <= Seq.length (view needle)
    /\ pos <= Seq.length (view haystack) - len'0
    /\ (forall i: int. 0 <= i /\ i < len'0 -> index_logic needle i = index_logic haystack (pos + i))
  
  function range_inclusive_len (r: t_RangeInclusive) : int = if is_empty_log r then
      0
    else
      deep_model (end_log r) - deep_model (start_log r) + 1
  
  
  axiom range_inclusive_len_spec: forall r: t_RangeInclusive. is_empty_log r = (range_inclusive_len r = 0)
  
  predicate produces (self: t_RangeInclusive) (visited: Seq.seq UInt64.t) (o: t_RangeInclusive) =
    Seq.length visited = range_inclusive_len self - range_inclusive_len o
    /\ (is_empty_log self -> is_empty_log o)
    /\ (is_empty_log o \/ end_log self = end_log o)
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model (start_log self) + i)
  
  function produces_trans (a: t_RangeInclusive) (ab: Seq.seq UInt64.t) (b: t_RangeInclusive) (bc: Seq.seq UInt64.t) (c: t_RangeInclusive) : ()
   = ()
  
  axiom produces_trans_spec:
    forall a: t_RangeInclusive, ab: Seq.seq UInt64.t, b: t_RangeInclusive, bc: Seq.seq UInt64.t, c: t_RangeInclusive. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_RangeInclusive) : () = ()
  
  axiom produces_refl_spec: forall self: t_RangeInclusive. produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv (_0: t_RangeInclusive)
  
  axiom inv_axiom [@rewrite]: forall x: t_RangeInclusive [inv x]. inv x = true
  
  predicate inv'0 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq UInt64.t [inv'0 x]. inv'0 x = true
  
  type t_Option = C_None | C_Some UInt64.t
  
  predicate completed (self: MutBorrow.t t_RangeInclusive) = is_empty_log self.current /\ is_empty_log self.final
  
  let rec next (self_: MutBorrow.t t_RangeInclusive) (return (x: t_Option)) = any
    [ return' (result: t_Option) -> {match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_RangeInclusive) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_RangeInclusive) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Some (input: t_Option) (ret (field_0: UInt64.t)) = any
    [ good (field_0: UInt64.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  type t_Range = { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter'0 (self_: t_Range) (return (x: t_Range)) = any
    [ return' (result: t_Range) -> {result = self_} (! return {result}) ]
  
  predicate produces'0 (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans'0 (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec'0:
    forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. produces'0 a ab b
      -> produces'0 b bc c -> produces'0 a (Seq.(++) ab bc) c
  
  function produces_refl'0 (self: t_Range) : ()
  
  axiom produces_refl_spec'0: forall self: t_Range. produces'0 self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv'1 (_0: t_Range)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Range [inv'1 x]. inv'1 x = true
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_Range) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate completed'0 (self: MutBorrow.t t_Range) =
    resolve'1 self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  let rec next'0 (self_: MutBorrow.t t_Range) (return (x: t_Option)) = any
    [ return' (result: t_Option) -> {match result with
        | C_None -> completed'0 self_
        | C_Some v -> produces'0 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_Range) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt8.t) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq UInt8.t) (out: UInt8.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return (x: UInt8.t)) = {[@expl:index requires] in_bounds ix (view self_)}
    any [ return' (result: UInt8.t) -> {has_value ix (view self_) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec search (needle: t_Vec) (haystack: t_Vec) (return (x: UInt64.t)) =
    {[@expl:search requires] Seq.length (view needle) >= 1 /\ Seq.length (view needle) <= Seq.length (view haystack)}
    (! bb0
    [ bb0 = s0 [ s0 = len {haystack} (fun (_ret: UInt64.t) -> [ &_12 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = len {needle} (fun (_ret: UInt64.t) -> [ &_14 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = UInt64.sub {_12} {_14} (fun (_ret: UInt64.t) -> [ &_11 <- _ret ] s1)
      | s1 = new {(0: UInt64.t)} {_11} (fun (_ret: t_RangeInclusive) -> [ &_10 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = into_iter {_10} (fun (_ret: t_RangeInclusive) -> [ &iter <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb7 ]
    | bb7 = bb7
      [ bb7 = {[@expl:for invariant] inv'0 produced}
        {[@expl:for invariant] inv iter}
        {[@expl:for invariant] produces iter_old produced iter}
        {[@expl:loop invariant] forall k: int. 0 <= k /\ k < Seq.length produced
          -> not match_at needle haystack k (Seq.length (view needle))}
        (! s0)
        [ s0 = bb8 ]
        [ bb8 = s0
          [ s0 = MutBorrow.borrow_mut <t_RangeInclusive> {iter}
              (fun (_ret: MutBorrow.t t_RangeInclusive) -> [ &_28 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_RangeInclusive> {_28.current} {MutBorrow.get_id _28}
              (fun (_ret: MutBorrow.t t_RangeInclusive) ->
                [ &_27 <- _ret ] [ &_28 <- { _28 with current = _ret.final } ] s2)
          | s2 = next {_27} (fun (_ret: t_Option) -> [ &_26 <- _ret ] s3)
          | s3 = bb9 ]
        | bb9 = s0
          [ s0 = -{resolve'0 _28}- s1
          | s1 = any [ br0 -> {_26 = C_None} (! bb12) | br1 (x0: UInt64.t) -> {_26 = C_Some x0} (! bb13) ] ]
        | bb13 = s0
          [ s0 = v_Some {_26} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_31 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb14 ]
        | bb14 = s0
          [ s0 = [ &produced <- _31 ] s1
          | s1 = [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = len {needle} (fun (_ret: UInt64.t) -> [ &_38 <- _ret ] s3)
          | s3 = bb15 ]
        | bb15 = s0
          [ s0 = [ &_37 <- { t_Range__start = (0: UInt64.t); t_Range__end = _38 } ] s1
          | s1 = into_iter'0 {_37} (fun (_ret: t_Range) -> [ &iter'0 <- _ret ] s2)
          | s2 = bb16 ]
        | bb16 = s0 [ s0 = [ &iter_old'0 <- iter'0 ] s1 | s1 = bb17 ]
        | bb17 = s0 [ s0 = [ &produced'0 <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb19 ]
        | bb19 = bb19
          [ bb19 = {[@expl:for invariant] inv'0 produced'0}
            {[@expl:for invariant] inv'1 iter'0}
            {[@expl:for invariant] produces'0 iter_old'0 produced'0 iter'0}
            {[@expl:loop invariant] match_at needle haystack (UInt64.t'int i) (Seq.length produced'0)}
            (! s0)
            [ s0 = bb20 ]
            [ bb20 = s0
              [ s0 = MutBorrow.borrow_mut <t_Range> {iter'0}
                  (fun (_ret: MutBorrow.t t_Range) -> [ &_51 <- _ret ] [ &iter'0 <- _ret.final ] s1)
              | s1 = MutBorrow.borrow_final <t_Range> {_51.current} {MutBorrow.get_id _51}
                  (fun (_ret: MutBorrow.t t_Range) -> [ &_50 <- _ret ] [ &_51 <- { _51 with current = _ret.final } ] s2)
              | s2 = next'0 {_50} (fun (_ret: t_Option) -> [ &_49 <- _ret ] s3)
              | s3 = bb21 ]
            | bb21 = s0
              [ s0 = -{resolve'2 _51}- s1
              | s1 = any [ br0 -> {_49 = C_None} (! bb24) | br1 (x0: UInt64.t) -> {_49 = C_Some x0} (! bb25) ] ]
            | bb25 = s0
              [ s0 = v_Some {_49} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem'0 <- r0 ] s1)
              | s1 = [ &_54 <- Seq.(++) produced'0 (Seq.singleton __creusot_proc_iter_elem'0) ] s2
              | s2 = bb26 ]
            | bb26 = s0
              [ s0 = [ &produced'0 <- _54 ] s1
              | s1 = [ &j <- __creusot_proc_iter_elem'0 ] s2
              | s2 = index {needle} {j} (fun (_ret: UInt8.t) -> [ &_59 <- _ret ] s3)
              | s3 = bb27 ]
            | bb27 = s0
              [ s0 = UInt64.add {i} {j} (fun (_ret: UInt64.t) -> [ &_65 <- _ret ] s1)
              | s1 = index {haystack} {_65} (fun (_ret: UInt8.t) -> [ &_63 <- _ret ] s2)
              | s2 = bb28 ]
            | bb28 = s0
              [ s0 = [ &_57 <- _59 <> _63 ] s1
              | s1 = any [ br0 -> {_57 = false} (! bb19) | br1 -> {_57} (! bb7) ] ] ] ] ] ]
    | bb24 = s0 [ s0 = [ &_0 <- i ] s1 | s1 = bb32 ]
    | bb12 = s0 [ s0 = len {haystack} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = bb32 ]
    | bb32 = return {_0} ]
    [ & _0: UInt64.t = Any.any_l ()
    | & needle: t_Vec = needle
    | & haystack: t_Vec = haystack
    | & iter: t_RangeInclusive = Any.any_l ()
    | & _10: t_RangeInclusive = Any.any_l ()
    | & _11: UInt64.t = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _14: UInt64.t = Any.any_l ()
    | & iter_old: t_RangeInclusive = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _26: t_Option = Any.any_l ()
    | & _27: MutBorrow.t t_RangeInclusive = Any.any_l ()
    | & _28: MutBorrow.t t_RangeInclusive = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _31: Seq.seq UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & iter'0: t_Range = Any.any_l ()
    | & _37: t_Range = Any.any_l ()
    | & _38: UInt64.t = Any.any_l ()
    | & iter_old'0: t_Range = Any.any_l ()
    | & produced'0: Seq.seq UInt64.t = Any.any_l ()
    | & _49: t_Option = Any.any_l ()
    | & _50: MutBorrow.t t_Range = Any.any_l ()
    | & _51: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem'0: UInt64.t = Any.any_l ()
    | & _54: Seq.seq UInt64.t = Any.any_l ()
    | & j: UInt64.t = Any.any_l ()
    | & _57: bool = Any.any_l ()
    | & _59: UInt8.t = Any.any_l ()
    | & _63: UInt8.t = Any.any_l ()
    | & _65: UInt64.t = Any.any_l () ])
    [ return (result: UInt64.t) -> {[@expl:search ensures #0] UInt64.t'int result = Seq.length (view haystack)
      \/ UInt64.t'int result < Seq.length (view haystack) - Seq.length (view needle) + 1}
      {[@expl:search ensures #1] UInt64.t'int result < Seq.length (view haystack)
      -> match_at needle haystack (UInt64.t'int result) (Seq.length (view needle))
      /\ (forall i: int. 0 <= i /\ i < UInt64.t'int result
        -> not match_at needle haystack i (Seq.length (view needle)))}
      {[@expl:search ensures #2] UInt64.t'int result = Seq.length (view haystack)
      -> (forall i: int. 0 <= i /\ i < Seq.length (view haystack)
        -> not match_at needle haystack i (Seq.length (view needle)))}
      (! return {result}) ]
end
