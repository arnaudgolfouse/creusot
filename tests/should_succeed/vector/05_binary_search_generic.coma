module M_05_binary_search_generic__binary_search [#"05_binary_search_generic.rs" 27 0 29 29]
  let%span s05_binary_search_generic = "05_binary_search_generic.rs" 31 20 31 21
  let%span s05_binary_search_generic'0 = "05_binary_search_generic.rs" 32 19 32 20
  let%span s05_binary_search_generic'1 = "05_binary_search_generic.rs" 35 26 35 27
  let%span s05_binary_search_generic'2 = "05_binary_search_generic.rs" 39 16 39 116
  let%span s05_binary_search_generic'3 = "05_binary_search_generic.rs" 38 16 38 87
  let%span s05_binary_search_generic'4 = "05_binary_search_generic.rs" 37 16 37 56
  let%span s05_binary_search_generic'5 = "05_binary_search_generic.rs" 40 17 40 18
  let%span s05_binary_search_generic'6 = "05_binary_search_generic.rs" 41 26 41 27
  let%span s05_binary_search_generic'7 = "05_binary_search_generic.rs" 41 19 41 27
  let%span s05_binary_search_generic'8 = "05_binary_search_generic.rs" 53 37 53 38
  let%span s05_binary_search_generic'9 = "05_binary_search_generic.rs" 27 41 27 44
  let%span s05_binary_search_generic'10 = "05_binary_search_generic.rs" 27 55 27 59
  let%span s05_binary_search_generic'11 = "05_binary_search_generic.rs" 20 11 20 36
  let%span s05_binary_search_generic'12 = "05_binary_search_generic.rs" 21 11 21 35
  let%span s05_binary_search_generic'13 = "05_binary_search_generic.rs" 22 10 22 87
  let%span s05_binary_search_generic'14 = "05_binary_search_generic.rs" 23 10 24 72
  let%span s05_binary_search_generic'15 = "05_binary_search_generic.rs" 25 10 26 90
  let%span s05_binary_search_generic'16 = "05_binary_search_generic.rs" 17 4 17 31
  let%span s05_binary_search_generic'17 = "05_binary_search_generic.rs" 1 0 1423 4
  let%span s05_binary_search_generic'18 = "05_binary_search_generic.rs" 1 0 979 4
  let%span s05_binary_search_generic'19 = "05_binary_search_generic.rs" 11 8 11 63
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 110 16 110 17
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 111 26 111 48
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 189 16 189 17
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 190 16 190 48
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 191 16 191 56
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 34 14 34 47
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 35 14 36 51
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 48 8 48 31
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 93 20 93 41
  let%span smodel = "../../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 35 8 35 28
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 28 14 28 64
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 38 14 38 61
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 48 14 48 61
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 58 14 58 64
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 63 14 63 45
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 68 15 68 32
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 69 15 69 32
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 70 14 70 31
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 77 15 77 45
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 78 14 78 47
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 85 15 85 48
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 86 14 86 44
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 91 14 91 59
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'13 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'14 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'15 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'16 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'17 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'18 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'19 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'20 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'21 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'22 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'23 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'24 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'25 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 691 20 691 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'4] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = [%#svec'8] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: t_Vec) = [%#sinvariant] inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  function view'0 [@inline:trivial] (self: t_Vec) : Seq.seq t_T = [%#smodel] view self
  
  meta "rewrite_def" function view'0
  
  let rec len (self_: t_Vec) (return' (x: UInt64.t)) = {[@expl:len 'self_' type invariant] [%#svec] inv'3 self_}
    any
    [ return''0 (result: UInt64.t) -> {[%#svec'0] UInt64.t'int result = Seq.length (view'0 self_)}
      (! return' {result}) ]
  
  predicate resolve (_0: t_T)
  
  type t_Result = C_Ok UInt64.t | C_Err UInt64.t
  
  type t_DeepModelTy
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: t_DeepModelTy) (other: t_DeepModelTy) : t_Ordering
  
  function eq_cmp (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom eq_cmp_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym2_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym1_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: t_DeepModelTy) (y: t_DeepModelTy) (z: t_DeepModelTy) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: t_DeepModelTy, y: t_DeepModelTy, z: t_DeepModelTy, o: t_Ordering. ([%#sord'4] cmp_log x y
        = o) -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: t_DeepModelTy) : ()
  
  axiom refl_spec: forall x: t_DeepModelTy. [%#sord'3] cmp_log x x = C_Equal
  
  predicate gt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_gt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_gt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'2] gt_log x y = (cmp_log x y = C_Greater)
  
  predicate ge_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_ge_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_ge_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'1] ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_lt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_lt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'0] lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_le_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_le_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord] le_log x y = (cmp_log x y <> C_Greater)
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_T = [%#svec'7] Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  function deep_model'0 (self: t_Vec) : Seq.seq t_DeepModelTy
  
  axiom deep_model_spec: forall self: t_Vec. [%#svec'5] Seq.length (view self) = Seq.length (deep_model'0 self)
  
  axiom deep_model_spec'0: forall self: t_Vec. [%#svec'6] forall i: int. 0 <= i /\ i < Seq.length (view self)
        -> Seq.get (deep_model'0 self) i = deep_model (index_logic self i)
  
  function deep_model'1 [@inline:trivial] (self: t_Vec) : Seq.seq t_DeepModelTy = [%#smodel'0] deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  function cmp_log'0 (self: UInt64.t) (o: UInt64.t) : t_Ordering = [%#sord'25] if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'24] (x = y) = (cmp_log'0 x y = C_Equal)
  
  function antisym2'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec'0: forall x: UInt64.t, y: UInt64.t. ([%#sord'22] cmp_log'0 x y = C_Greater)
      -> ([%#sord'23] cmp_log'0 y x = C_Less)
  
  function antisym1'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec'0: forall x: UInt64.t, y: UInt64.t. ([%#sord'20] cmp_log'0 x y = C_Less)
      -> ([%#sord'21] cmp_log'0 y x = C_Greater)
  
  function trans'0 (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec'0: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'17] cmp_log'0 x y = o)
      -> ([%#sord'18] cmp_log'0 y z = o) -> ([%#sord'19] cmp_log'0 x z = o)
  
  function refl'0 (x: UInt64.t) : ()
  
  axiom refl_spec'0: forall x: UInt64.t. [%#sord'16] cmp_log'0 x x = C_Equal
  
  function cmp_gt_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'15] UInt64.gt x y = (cmp_log'0 x y = C_Greater)
  
  function cmp_ge_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'14] UInt64.ge x y = (cmp_log'0 x y <> C_Less)
  
  function cmp_lt_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'13] UInt64.lt x y = (cmp_log'0 x y = C_Less)
  
  function cmp_le_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'12] UInt64.le x y = (cmp_log'0 x y <> C_Greater)
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate invariant''3 [@inline:trivial] (self: t_T) = [%#sinvariant] inv self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 (_0: t_T)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_T [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return' (x: t_T)) =
    {[@expl:index 'self_' type invariant] [%#svec'1] inv'3 self_}
    {[@expl:index requires] [%#svec'2] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result: t_T) -> {inv'4 result} {[%#svec'3] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  type tuple = { _p0: t_T; _p1: t_T }
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef:
    [%#s05_binary_search_generic'17] forall args: tuple [precondition () args]. (let {_p0 = self_; _p1 = other} = args in inv'4 other
        /\ inv'4 self_) -> precondition () args
  
  function deep_model'2 [@inline:trivial] (self: t_T) : t_DeepModelTy = [%#smodel'0] deep_model self
  
  meta "rewrite_def" function deep_model'2
  
  predicate postcondition_once (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef:
    [%#s05_binary_search_generic'17] forall args: tuple, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let {_p0 = self_; _p1 = other} = args in res = gt_log (deep_model'2 self_) (deep_model'2 other))
  
  let rec gt (self_: t_T) (other: t_T) (return' (x: bool)) = {[@expl:gt requires] precondition () { _p0 = self_;
                                                                                                    _p1 = other }}
    any [ return''0 (result: bool) -> {postcondition_once () { _p0 = self_; _p1 = other } result} (! return' {result}) ]
  
  predicate precondition'0 (self: ()) (args: tuple)
  
  axiom precondition_fndef'0:
    [%#s05_binary_search_generic'18] forall args: tuple [precondition'0 () args]. (let {_p0 = self_; _p1 = rhs} = args in inv'4 rhs
        /\ inv'4 self_) -> precondition'0 () args
  
  predicate postcondition_once'0 (self: ()) (args: tuple) (result: t_Ordering)
  
  axiom postcondition_fndef'0:
    [%#s05_binary_search_generic'18] forall args: tuple, res: t_Ordering [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let {_p0 = self_; _p1 = rhs} = args in res = cmp_log (deep_model self_) (deep_model rhs))
  
  let rec cmp (self_: t_T) (rhs: t_T) (return' (x: t_Ordering)) = {[@expl:cmp requires] precondition'0 () { _p0 = self_;
                                                                                                            _p1 = rhs }}
    any
    [ return''0 (result: t_Ordering) -> {postcondition_once'0 () { _p0 = self_; _p1 = rhs } result}
      (! return' {result}) ]
  
  predicate sorted_range [#"05_binary_search_generic.rs" 9 0 9 67] (s: Seq.seq t_DeepModelTy) (l: int) (u: int) =
    [%#s05_binary_search_generic'19] forall i: int, j: int. l <= i /\ i <= j /\ j < u
      -> le_log (Seq.get s i) (Seq.get s j)
  
  predicate sorted [#"05_binary_search_generic.rs" 16 0 16 45] (s: Seq.seq t_DeepModelTy) =
    [%#s05_binary_search_generic'16] sorted_range s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec binary_search [#"05_binary_search_generic.rs" 27 0 29 29] (arr: t_Vec) (elem: t_T) (return' (x: t_Result)) =
    {[@expl:binary_search 'arr' type invariant] [%#s05_binary_search_generic'9] inv'3 arr}
    {[@expl:binary_search 'elem' type invariant] [%#s05_binary_search_generic'10] inv elem}
    {[@expl:binary_search requires #0] [%#s05_binary_search_generic'11] Seq.length (view'0 arr)
    <= UInt64.t'int const_MAX}
    {[@expl:binary_search requires #1] [%#s05_binary_search_generic'12] sorted (deep_model'1 arr)}
    (! bb0
    [ bb0 = s0 [ s0 = len {arr'0} (fun (_ret: UInt64.t) -> [ &_10 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_9 <- _10 = ([%#s05_binary_search_generic] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ] ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv elem'0} s1
      | s1 = -{resolve elem'0}- s2
      | s2 = [ &_0 <- C_Err ([%#s05_binary_search_generic'0] (0: UInt64.t)) ] s3
      | s3 = bb24 ]
    | bb3 = s0 [ s0 = len {arr'0} (fun (_ret: UInt64.t) -> [ &size <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &base <- [%#s05_binary_search_generic'1] (0: UInt64.t) ] s1 | s1 = bb5 ]
    | bb5 = bb5'0
      [ bb5'0 = {[@expl:loop invariant #0] [%#s05_binary_search_generic'4] 0 < UInt64.t'int size
        /\ UInt64.t'int size + UInt64.t'int base <= Seq.length (view'0 arr'0)}
        {[@expl:loop invariant #1] [%#s05_binary_search_generic'3] forall i: UInt64.t. UInt64.lt i base
          -> le_log (Seq.get (deep_model'1 arr'0) (UInt64.t'int i)) (deep_model elem'0)}
        {[@expl:loop invariant #2] [%#s05_binary_search_generic'2] forall i: UInt64.t. UInt64.t'int base
                + UInt64.t'int size
              <= UInt64.t'int i
            /\ UInt64.t'int i < Seq.length (view'0 arr'0)
          -> lt_log (deep_model elem'0) (Seq.get (deep_model'1 arr'0) (UInt64.t'int i))}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = [ &_22 <- UInt64.gt size ([%#s05_binary_search_generic'5] (1: UInt64.t)) ] s1
          | s1 = any [ br0 -> {_22 = false} (! bb14) | br1 -> {_22} (! bb7) ] ]
        | bb7 = s0
          [ s0 = [ &_26 <- ([%#s05_binary_search_generic'6] (2: UInt64.t))
            = ([%#s05_binary_search_generic'7] (0: UInt64.t)) ] s1
          | s1 = {[@expl:division by zero] [%#s05_binary_search_generic'7] not _26} s2
          | s2 = bb8 ]
        | bb8 = s0
          [ s0 = UInt64.div {size} {[%#s05_binary_search_generic'6] (2: UInt64.t)}
              (fun (_ret: UInt64.t) -> [ &half <- _ret ] s1)
          | s1 = UInt64.add {base} {half} (fun (_ret: UInt64.t) -> [ &mid <- _ret ] s2)
          | s2 = index {arr'0} {mid} (fun (_ret: t_T) -> [ &_33 <- _ret ] s3)
          | s3 = bb9 ]
        | bb9 = s0 [ s0 = gt {_33} {elem'0} (fun (_ret: bool) -> [ &_31 <- _ret ] s1) | s1 = bb10 ]
        | bb10 = any [ br0 -> {_31 = false} (! bb12) | br1 -> {_31} (! bb11) ]
        | bb11 = s0 [ s0 = [ &_30 <- base ] s1 | s1 = bb13 ]
        | bb12 = s0 [ s0 = [ &_30 <- mid ] s1 | s1 = bb13 ]
        | bb13 = s0
          [ s0 = [ &base <- _30 ] s1
          | s1 = UInt64.sub {size} {half} (fun (_ret: UInt64.t) -> [ &size <- _ret ] s2)
          | s2 = bb5'0 ] ] ]
    | bb14 = s0 [ s0 = index {arr'0} {base} (fun (_ret: t_T) -> [ &_40 <- _ret ] s1) | s1 = bb15 ]
    | bb15 = s0
      [ s0 = [ &cmp'0 <- _40 ] s1
      | s1 = [ &_46 <- elem'0 ] s2
      | s2 = cmp {cmp'0} {_46} (fun (_ret: t_Ordering) -> [ &_43 <- _ret ] s3)
      | s3 = bb16 ]
    | bb16 = s0
      [ s0 = {[@expl:type invariant] inv elem'0} s1
      | s1 = -{resolve elem'0}- s2
      | s2 = any
        [ br0 -> {_43 = C_Less} (! bb21) | br1 -> {_43 = C_Equal} (! bb22) | br2 -> {_43 = C_Greater} (! bb20) ] ]
    | bb20 = s0 [ s0 = [ &_0 <- C_Err base ] s1 | s1 = bb24 ]
    | bb22 = s0 [ s0 = [ &_0 <- C_Ok base ] s1 | s1 = bb24 ]
    | bb21 = s0
      [ s0 = UInt64.add {base} {[%#s05_binary_search_generic'8] (1: UInt64.t)}
          (fun (_ret: UInt64.t) -> [ &_49 <- _ret ] s1)
      | s1 = [ &_0 <- C_Err _49 ] s2
      | s2 = bb24 ]
    | bb24 = return''0 {_0} ]
    [ & _0: t_Result = Any.any_l ()
    | & arr'0: t_Vec = arr
    | & elem'0: t_T = elem
    | & _9: bool = Any.any_l ()
    | & _10: UInt64.t = Any.any_l ()
    | & size: UInt64.t = Any.any_l ()
    | & base: UInt64.t = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & half: UInt64.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & mid: UInt64.t = Any.any_l ()
    | & _30: UInt64.t = Any.any_l ()
    | & _31: bool = Any.any_l ()
    | & _33: t_T = Any.any_l ()
    | & cmp'0: t_T = Any.any_l ()
    | & _40: t_T = Any.any_l ()
    | & _43: t_Ordering = Any.any_l ()
    | & _46: t_T = Any.any_l ()
    | & _49: UInt64.t = Any.any_l () ])
    [ return''0 (result: t_Result) ->
    {[@expl:binary_search ensures #0] [%#s05_binary_search_generic'13] forall x: UInt64.t. result = C_Ok x
        -> Seq.get (deep_model'1 arr) (UInt64.t'int x) = deep_model elem}
      {[@expl:binary_search ensures #1] [%#s05_binary_search_generic'14] forall x: UInt64.t. result = C_Err x
        -> (forall i: UInt64.t. UInt64.lt i x
          -> le_log (Seq.get (deep_model'1 arr) (UInt64.t'int i)) (deep_model elem))}
      {[@expl:binary_search ensures #2] [%#s05_binary_search_generic'15] forall x: UInt64.t. result = C_Err x
        -> (forall i: UInt64.t. UInt64.le x i /\ UInt64.t'int i < Seq.length (view'0 arr)
          -> lt_log (deep_model elem) (Seq.get (deep_model'1 arr) (UInt64.t'int i)))}
      (! return' {result}) ]
end
