module M_07_read_write__read_write
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom: forall x: t_Vec [inv'2 x]. inv'2 x -> invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t t_Vec) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 [@inline:trivial] (_1: MutBorrow.t t_T) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq t_T) (fin: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: UInt64.t) (return (x: MutBorrow.t t_T)) =
    {[@expl:index_mut 'self_' type invariant] inv'3 self_}
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return (result: MutBorrow.t t_T) -> {inv'4 result}
      {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Vec) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate invariant''4 [@inline:trivial] (self: t_Vec) = inv'2 self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 [@inline:trivial] (_1: t_Vec) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'5
  
  predicate invariant''5 [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'6 [@inline:trivial] (_1: t_T) = invariant''5 _1
  
  meta "rewrite_def" predicate inv'6
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return (x: t_T)) = {[@expl:index 'self_' type invariant] inv'5 self_}
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return (result: t_T) -> {inv'6 result} {has_value ix (view self_) result} (! return {result}) ]
  
  type tuple = { f0: t_T; f1: t_T }
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef: forall args: tuple [precondition () args]. (let {f0 = self_; f1 = rhs} = args in inv'6 rhs
        /\ inv'6 self_) -> precondition () args
  
  type t_DeepModelTy
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function deep_model'0 [@inline:trivial] (self: t_T) : t_DeepModelTy = deep_model self
  
  meta "rewrite_def" function deep_model'0
  
  predicate postcondition_once (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef:
    forall args: tuple, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let {f0 = self_; f1 = rhs} = args in res = (deep_model'0 self_ = deep_model'0 rhs))
  
  let rec eq (self_: t_T) (rhs: t_T) (return (x: bool)) = {[@expl:eq requires] precondition () { f0 = self_; f1 = rhs }}
    any [ return (result: bool) -> {postcondition_once () { f0 = self_; f1 = rhs } result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec read_write (a: MutBorrow.t t_Vec) (i: UInt64.t) (x: t_T) (return (x'0: ())) =
    {[@expl:read_write 'a' type invariant] inv'3 a}
    {[@expl:read_write 'x' type invariant] inv x}
    {[@expl:read_write requires] UInt64.t'int i < Seq.length (view a.current)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 a.current}
        MutBorrow.borrow_final <t_Vec> {a.current} {MutBorrow.get_id a}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_7 <- _ret ] -{inv'2 _ret.final}-
            [ &a <- { a with current = _ret.final } ] s1)
      | s1 = index_mut {_7} {i} (fun (_ret: MutBorrow.t t_T) -> [ &_6 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_6 <- { _6 with current = x } ] s1
      | s1 = {[@expl:type invariant] inv'4 _6} s2
      | s2 = -{resolve _6}- s3
      | s3 = {[@expl:type invariant] inv'3 a} s4
      | s4 = -{resolve'0 a}- s5
      | s5 = index {a.current} {i} (fun (_ret: t_T) -> [ &_12 <- _ret ] s6)
      | s6 = bb2 ]
    | bb2 = s0 [ s0 = eq {_12} {x} (fun (_ret: bool) -> [ &_10 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb4) ]
    | bb4 = return {_0}
    | bb5 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & a: MutBorrow.t t_Vec = a
    | & i: UInt64.t = i
    | & x: t_T = x
    | & _6: MutBorrow.t t_T = Any.any_l ()
    | & _7: MutBorrow.t t_Vec = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: t_T = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
