module M_07_read_write__read_write [#"07_read_write.rs" 6 0 6 75]
  let%span s07_read_write = "07_read_write.rs" 8 12 8 21
  let%span s07_read_write'0 = "07_read_write.rs" 6 44 6 45
  let%span s07_read_write'1 = "07_read_write.rs" 6 70 6 71
  let%span s07_read_write'2 = "07_read_write.rs" 5 11 5 24
  let%span s07_read_write'3 = "07_read_write.rs" 1 0 257 4
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 179 16 179 17
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 180 16 180 48
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 181 16 181 56
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 182 16 182 59
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 183 16 183 64
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 184 26 184 55
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 189 16 189 17
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 190 16 190 48
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 191 16 191 56
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'9 = "../../../creusot-contracts/src/std/vec.rs" 93 20 93 41
  let%span smodel = "../../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span smodel'1 = "../../../creusot-contracts/src/model.rs" 35 8 35 28
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 134 20 134 88
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  let%span sinvariant'0 = "../../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 712 20 712 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'8] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = [%#svec'9] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec) =
    [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  function view'0 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_T = [%#smodel] view self.current
  
  meta "rewrite_def" function view'0
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t t_T) = [%#sinvariant] inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'4 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_T [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq t_T) (fin: Seq.seq t_T) =
    [%#sslice'1] forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
      -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: UInt64.t) (return' (x: MutBorrow.t t_T)) =
    {[@expl:index_mut 'self_' type invariant] [%#svec] inv'3 self_}
    {[@expl:index_mut requires] [%#svec'0] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result: MutBorrow.t t_T) -> {inv'4 result}
      {[%#svec'1] has_value ix (view'0 self_) result.current}
      {[%#svec'2] has_value ix (view self_.final) result.final}
      {[%#svec'3] resolve_elswhere ix (view'0 self_) (view self_.final)}
      {[%#svec'4] Seq.length (view self_.final) = Seq.length (view'0 self_)}
      (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_T) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_T) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_Vec) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_Vec) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate invariant''4 [@inline:trivial] (self: t_Vec) = [%#sinvariant'0] inv'2 self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 (_0: t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Vec [inv'5 x]. inv'5 x = invariant''4 x
  
  function view'1 [@inline:trivial] (self: t_Vec) : Seq.seq t_T = [%#smodel'0] view self
  
  meta "rewrite_def" function view'1
  
  predicate invariant''5 [@inline:trivial] (self: t_T) = [%#sinvariant'0] inv self
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'6 (_0: t_T)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_T [inv'6 x]. inv'6 x = invariant''5 x
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return' (x: t_T)) =
    {[@expl:index 'self_' type invariant] [%#svec'5] inv'5 self_}
    {[@expl:index requires] [%#svec'6] in_bounds ix (view'1 self_)}
    any
    [ return''0 (result: t_T) -> {inv'6 result} {[%#svec'7] has_value ix (view'1 self_) result} (! return' {result}) ]
  
  type tuple = { _p0: t_T; _p1: t_T }
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef:
    [%#s07_read_write'3] forall args: tuple [precondition () args]. (let {_p0 = self_; _p1 = rhs} = args in inv'6 rhs
        /\ inv'6 self_) -> precondition () args
  
  type t_DeepModelTy
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function deep_model'0 [@inline:trivial] (self: t_T) : t_DeepModelTy = [%#smodel'1] deep_model self
  
  meta "rewrite_def" function deep_model'0
  
  predicate postcondition_once (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef:
    [%#s07_read_write'3] forall args: tuple, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let {_p0 = self_; _p1 = rhs} = args in res = (deep_model'0 self_ = deep_model'0 rhs))
  
  let rec eq (self_: t_T) (rhs: t_T) (return' (x: bool)) = {[@expl:eq requires] precondition () { _p0 = self_;
                                                                                                  _p1 = rhs }}
    any [ return''0 (result: bool) -> {postcondition_once () { _p0 = self_; _p1 = rhs } result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec read_write [#"07_read_write.rs" 6 0 6 75] (a: MutBorrow.t t_Vec) (i: UInt64.t) (x: t_T) (return' (x'0: ())) =
    {[@expl:read_write 'a' type invariant] [%#s07_read_write'0] inv'3 a}
    {[@expl:read_write 'x' type invariant] [%#s07_read_write'1] inv x}
    {[@expl:read_write requires] [%#s07_read_write'2] UInt64.t'int i < Seq.length (view'0 a)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 a'0.current}
        MutBorrow.borrow_final <t_Vec> {a'0.current} {MutBorrow.get_id a'0}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_7 <- _ret ] -{inv'2 _ret.final}-
            [ &a'0 <- { a'0 with current = _ret.final } ] s1)
      | s1 = index_mut {_7} {i'0} (fun (_ret: MutBorrow.t t_T) -> [ &_6 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_6 <- { _6 with current = x'0 } ] s1
      | s1 = {[@expl:type invariant] inv'4 _6} s2
      | s2 = -{resolve'0 _6}- s3
      | s3 = {[@expl:type invariant] inv'3 a'0} s4
      | s4 = -{resolve'2 a'0}- s5
      | s5 = index {a'0.current} {i'0} (fun (_ret: t_T) -> [ &_12 <- _ret ] s6)
      | s6 = bb2 ]
    | bb2 = s0 [ s0 = eq {_12} {x'0} (fun (_ret: bool) -> [ &_10 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = any [ br0 -> {_10 = false} (! bb4) | br1 -> {_10} (! bb6) ]
    | bb6 = return''0 {_0}
    | bb4 = {[%#s07_read_write] false} any ]
    [ & _0: () = Any.any_l ()
    | & a'0: MutBorrow.t t_Vec = a
    | & i'0: UInt64.t = i
    | & x'0: t_T = x
    | & _6: MutBorrow.t t_T = Any.any_l ()
    | & _7: MutBorrow.t t_Vec = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: t_T = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
