module M_03_knuth_shuffle__knuth_shuffle [#"03_knuth_shuffle.rs" 13 0 13 39]
  let%span s03_knuth_shuffle = "03_knuth_shuffle.rs" 14 16 14 31
  let%span s03_knuth_shuffle'0 = "03_knuth_shuffle.rs" 17 13 17 14
  let%span s03_knuth_shuffle'1 = "03_knuth_shuffle.rs" 17 4 17 7
  let%span s03_knuth_shuffle'2 = "03_knuth_shuffle.rs" 17 4 17 7
  let%span s03_knuth_shuffle'3 = "03_knuth_shuffle.rs" 16 16 16 41
  let%span s03_knuth_shuffle'4 = "03_knuth_shuffle.rs" 17 4 17 7
  let%span s03_knuth_shuffle'5 = "03_knuth_shuffle.rs" 17 4 17 7
  let%span s03_knuth_shuffle'6 = "03_knuth_shuffle.rs" 19 30 19 31
  let%span s03_knuth_shuffle'7 = "03_knuth_shuffle.rs" 20 26 20 27
  let%span s03_knuth_shuffle'8 = "03_knuth_shuffle.rs" 13 24 13 25
  let%span s03_knuth_shuffle'9 = "03_knuth_shuffle.rs" 12 10 12 34
  let%span s03_knuth_shuffle'10 = "03_knuth_shuffle.rs" 6 11 6 19
  let%span s03_knuth_shuffle'11 = "03_knuth_shuffle.rs" 7 10 7 40
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 80 16 80 17
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 81 26 81 48
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 172 16 172 17
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 173 26 173 42
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 174 26 174 48
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 63 20 63 41
  let%span siter = "../../../creusot-contracts/src/std/iter.rs" 210 18 210 32
  let%span siter'0 = "../../../creusot-contracts/src/std/iter.rs" 94 26 97 17
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 323 8 323 41
  let%span sseq'0 = "../../../creusot-contracts/src/logic/seq.rs" 697 20 697 91
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span ssnapshot = "../../../creusot-contracts/src/snapshot.rs" 50 20 50 39
  let%span srange = "../../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span srange'0 = "../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange'1 = "../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  let%span srange'2 = "../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 32
  let%span srange'3 = "../../../creusot-contracts/src/std/iter/range.rs" 40 14 40 42
  let%span srange'4 = "../../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 242 8 242 9
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 243 19 243 35
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 244 19 244 35
  let%span sslice'2 = "../../../creusot-contracts/src/std/slice.rs" 245 18 245 50
  let%span sslice'3 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'4 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sslice'5 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinvariant'0 = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) =
    [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 (self: Seq.seq t_T) =
    [%#sseq'0] forall i: int. 0 <= i /\ i < Seq.length self  -> inv'0 (Seq.get self i)
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'4] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  predicate invariant''1 (self: t_Vec) =
    [%#svec'5] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 (self: t_Vec) =
    [%#sinvariant'0] inv'2 self
  
  predicate inv'3 (_0: t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  function view'0 (self: t_Vec) : Seq.seq t_T =
    [%#smodel'0] view self
  
  let rec len (self_:t_Vec) (return'  (x:UInt64.t))= {[@expl:len 'self_' type invariant] [%#svec] inv'3 self_}
    any
    [ return''0 (result:UInt64.t)-> {[%#svec'0] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  
  type t_Range  =
    { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter (self_:t_Range) (return'  (x:t_Range))= any
    [ return''0 (result:t_Range)-> {[%#siter] result = self_} (! return' {result}) ]
  
  
  predicate permutation_of (self: Seq.seq t_T) (other: Seq.seq t_T) =
    [%#sseq] Permut.permut self other 0 (Seq.length self)
  
  function view'1 (self: MutBorrow.t t_Vec) : Seq.seq t_T =
    [%#smodel] view self.current
  
  function view'2 (self: MutBorrow.t t_Vec) : Seq.seq t_T =
    [%#smodel'0] view'1 self
  
  function view'3 (self: MutBorrow.t t_Vec) : Seq.seq t_T =
    [%#ssnapshot] view'2 self
  
  function deep_model (self: UInt64.t) : int =
    [%#snum] UInt64.t'int self
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    [%#srange] self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0  -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec: forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. ([%#srange'1] produces a ab b)
   -> ([%#srange'2] produces b bc c)  -> ([%#srange'3] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#srange'0] produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv'4 (_0: t_Range)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Range [inv'4 x]. inv'4 x = true
  
  predicate inv'5 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'4 [@rewrite]: forall x: Seq.seq UInt64.t [inv'5 x]. inv'5 x = true
  
  type t_Option  =
    | C_None
    | C_Some UInt64.t
  
  predicate resolve (self: MutBorrow.t t_Range) =
    [%#sresolve] self.final = self.current
  
  predicate completed (self: MutBorrow.t t_Range) =
    [%#srange'4] resolve self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  let rec next (self_:MutBorrow.t t_Range) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#siter'0] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_0: MutBorrow.t t_Range) =
    resolve _0
  
  let rec v_Some (input:t_Option) (ret  (field_0:UInt64.t))= any
    [ good (field_0:UInt64.t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  let rec rand_in_range (l:UInt64.t) (u:UInt64.t) (return'  (x:UInt64.t))= {[@expl:rand_in_range requires] [%#s03_knuth_shuffle'10] UInt64.t'int l
    <= UInt64.t'int u}
    any
    [ return''0 (result:UInt64.t)-> {[%#s03_knuth_shuffle'11] UInt64.t'int l <= UInt64.t'int result
      /\ UInt64.t'int result < UInt64.t'int u}
      (! return' {result}) ]
  
  
  predicate invariant''3 (self: MutBorrow.t t_Vec) =
    [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'5 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'6 x]. inv'6 x = invariant''3 x
  
  function view'4 (self: Slice64.slice t_T) : Seq.seq t_T
  
  axiom view_spec'0: forall self: Slice64.slice t_T. ([%#sslice'3] Seq.length (view'4 self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'4] view'4 self = Slice64.id self)
  
  predicate invariant''4 (self: Slice64.slice t_T) =
    [%#sslice'5] inv'1 (view'4 self)
  
  predicate inv'7 (_0: Slice64.slice t_T)
  
  axiom inv_axiom'6 [@rewrite]: forall x: Slice64.slice t_T [inv'7 x]. inv'7 x = invariant''4 x
  
  predicate invariant''5 (self: MutBorrow.t (Slice64.slice t_T)) =
    [%#sinvariant] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'8 (_0: MutBorrow.t (Slice64.slice t_T))
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t (Slice64.slice t_T) [inv'8 x]. inv'8 x = invariant''5 x
  
  function view'5 (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq t_T =
    [%#smodel] view'4 self.current
  
  let rec deref_mut (self_:MutBorrow.t t_Vec) (return'  (x:MutBorrow.t (Slice64.slice t_T)))= {[@expl:deref_mut 'self_' type invariant] [%#svec'1] inv'6 self_}
    any
    [ return''0 (result:MutBorrow.t (Slice64.slice t_T))-> {inv'8 result}
      {[%#svec'2] view'5 result = view'1 self_}
      {[%#svec'3] view'4 result.final = view self_.final}
      (! return' {result}) ]
  
  
  let rec swap (self_:MutBorrow.t (Slice64.slice t_T)) (i:UInt64.t) (j:UInt64.t) (return'  (x:()))= {[@expl:swap 'self_' type invariant] [%#sslice] inv'8 self_}
    {[@expl:swap requires #0] [%#sslice'0] UInt64.t'int i < Seq.length (view'5 self_)}
    {[@expl:swap requires #1] [%#sslice'1] UInt64.t'int j < Seq.length (view'5 self_)}
    any
    [ return''0 (result:())-> {[%#sslice'2] Permut.exchange (view'4 self_.final) (view'5 self_) (UInt64.t'int i) (UInt64.t'int j)}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self: MutBorrow.t (Slice64.slice t_T)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t (Slice64.slice t_T)) =
    resolve'1 _0
  
  predicate resolve'3 (self: MutBorrow.t t_Vec) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0: MutBorrow.t t_Vec) =
    resolve'3 _0
  
  meta "compute_max_steps" 1000000
  
  let rec knuth_shuffle[#"03_knuth_shuffle.rs" 13 0 13 39] (v:MutBorrow.t t_Vec) (return'  (x:()))= {[@expl:knuth_shuffle 'v' type invariant] [%#s03_knuth_shuffle'8] inv'6 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#s03_knuth_shuffle] v'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len {v'0.current} (fun (_ret:UInt64.t) ->  [ &_7 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_6 <- { t_Range__start = ([%#s03_knuth_shuffle'0] (0: UInt64.t)); t_Range__end = _7 } ] s1
      | s1 = into_iter {_6} (fun (_ret:t_Range) ->  [ &iter <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s03_knuth_shuffle'1] iter ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &produced <- [%#s03_knuth_shuffle'2] Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &old_6_0 <- v'0 ] s1 | s1 = bb6 ] 
    | bb6 = bb6'0
      [ bb6'0 = {[@expl:mut invariant] old_6_0.final = v'0.final}
        {[@expl:for invariant] [%#s03_knuth_shuffle'4] inv'5 produced}
        {[@expl:for invariant] [%#s03_knuth_shuffle'4] inv'4 iter}
        {[@expl:for invariant] [%#s03_knuth_shuffle'4] produces iter_old produced iter}
        {[@expl:loop invariant] [%#s03_knuth_shuffle'3] permutation_of (view'1 v'0) (view'3 old_v)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret:MutBorrow.t t_Range) ->  [ &_21 <- _ret ]  [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret:MutBorrow.t t_Range) ->  [ &_20 <- _ret ]  [ &_21 <- { _21 with current = _ret.final } ] s2)
          | s2 = next {_20} (fun (_ret:t_Option) ->  [ &_19 <- _ret ] s3)
          | s3 = bb8 ]
        
        | bb8 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any [ br0 -> {_19 = C_None} (! bb11) | br1 (x0:UInt64.t)-> {_19 = C_Some x0} (! bb10) ]  ]
        
        | bb10 = bb12
        | bb12 = s0
          [ s0 = v_Some {_19} (fun (r0:UInt64.t) ->  [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 =  [ &_24 <- [%#s03_knuth_shuffle'5] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb13 ]
        
        | bb13 = s0
          [ s0 =  [ &produced <- _24 ] s1
          | s1 =  [ &n <- __creusot_proc_iter_elem ] s2
          | s2 = len {v'0.current} (fun (_ret:UInt64.t) ->  [ &_28 <- _ret ] s3)
          | s3 = bb14 ]
        
        | bb14 = s0
          [ s0 = UInt64.sub {_28} {n} (fun (_ret:UInt64.t) ->  [ &upper <- _ret ] s1)
          | s1 = rand_in_range {[%#s03_knuth_shuffle'6] (0: UInt64.t)} {upper}
              (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s2)
          | s2 = bb15 ]
        
        | bb15 = s0
          [ s0 = {inv'2 v'0.current}
            MutBorrow.borrow_mut <t_Vec> {v'0.current}
              (fun (_ret:MutBorrow.t t_Vec) ->
                 [ &_36 <- _ret ] 
                -{inv'2 _ret.final}-
                 [ &v'0 <- { v'0 with current = _ret.final } ] 
                s1)
          | s1 = deref_mut {_36} (fun (_ret:MutBorrow.t (Slice64.slice t_T)) ->  [ &_35 <- _ret ] s2)
          | s2 = bb16 ]
        
        | bb16 = s0
          [ s0 = UInt64.sub {upper} {[%#s03_knuth_shuffle'7] (1: UInt64.t)}
              (fun (_ret:UInt64.t) ->  [ &_38 <- _ret ] s1)
          | s1 = {inv'7 _35.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_35.current} {MutBorrow.get_id _35}
              (fun (_ret:MutBorrow.t (Slice64.slice t_T)) ->
                 [ &_34 <- _ret ] 
                -{inv'7 _ret.final}-
                 [ &_35 <- { _35 with current = _ret.final } ] 
                s2)
          | s2 = swap {_34} {i} {_38} (fun (_ret:()) ->  [ &_33 <- _ret ] s3)
          | s3 = bb17 ]
        
        | bb17 = s0 [ s0 = {[@expl:type invariant] inv'8 _35} s1 | s1 = -{resolve'2 _35}- s2 | s2 = bb6'0 ]  ]
       ]
    
    | bb11 = s0 [ s0 = {[@expl:type invariant] inv'6 v'0} s1 | s1 = -{resolve'4 v'0}- s2 | s2 = return''0 {_0} ]  ]
    )
    [ & _0: () = Any.any_l ()
    | & v'0: MutBorrow.t t_Vec = v
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _6: t_Range = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _19: t_Option = Any.any_l ()
    | & _20: MutBorrow.t t_Range = Any.any_l ()
    | & _21: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _24: Seq.seq UInt64.t = Any.any_l ()
    | & n: UInt64.t = Any.any_l ()
    | & upper: UInt64.t = Any.any_l ()
    | & _28: UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _33: () = Any.any_l ()
    | & _34: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _35: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _36: MutBorrow.t t_Vec = Any.any_l ()
    | & _38: UInt64.t = Any.any_l ()
    | & old_6_0: MutBorrow.t t_Vec = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:knuth_shuffle ensures] [%#s03_knuth_shuffle'9] permutation_of (view v.final) (view'1 v)}
      (! return' {result}) ]

end
