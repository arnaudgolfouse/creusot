module M_knuth_shuffle
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_Vec_T_Global
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate invariant_ref_Vec_T_Global [@inline:trivial] (self: t_Vec_T_Global) = inv_Vec_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global
  
  predicate inv_ref_Vec_T_Global [@inline:trivial] (_1: t_Vec_T_Global) = invariant_ref_Vec_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global
  
  let rec len_T (self_: t_Vec_T_Global) (return (x: UInt64.t)) =
    {[@expl:len 'self_' type invariant] inv_ref_Vec_T_Global self_}
    any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_T_Global self_)} (! return {result}) ]
  
  type t_Range_usize = { start: UInt64.t; end': UInt64.t }
  
  let rec into_iter_Range_usize (self_: t_Range_usize) (return (x: t_Range_usize)) = any
    [ return (result: t_Range_usize) -> {result = self_} (! return {result}) ]
  
  predicate permutation_of_T (self: Seq.seq t_T) (other: Seq.seq t_T) = Permut.permut self other 0 (Seq.length self)
  
  predicate invariant_ref_Vec_T_Global'0 [@inline:trivial] (self: MutBorrow.t t_Vec_T_Global) =
    inv_Vec_T_Global self.current /\ inv_Vec_T_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global'0
  
  predicate inv_ref_Vec_T_Global'0 [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = invariant_ref_Vec_T_Global'0 _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global'0
  
  function deep_model_usize [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model_usize
  
  predicate produces_Range_usize (self: t_Range_usize) (visited: Seq.seq UInt64.t) (o: t_Range_usize) =
    self.end' = o.end'
    /\ deep_model_usize self.start <= deep_model_usize o.start
    /\ (Seq.length visited > 0 -> deep_model_usize o.start <= deep_model_usize o.end')
    /\ Seq.length visited = deep_model_usize o.start - deep_model_usize self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_usize (Seq.get visited i) = deep_model_usize self.start + i)
  
  function produces_trans_Range_usize (a: t_Range_usize) (ab: Seq.seq UInt64.t) (b: t_Range_usize) (bc: Seq.seq UInt64.t) (c: t_Range_usize) : ()
  
  axiom produces_trans_Range_usize_spec:
    forall a: t_Range_usize, ab: Seq.seq UInt64.t, b: t_Range_usize, bc: Seq.seq UInt64.t, c: t_Range_usize. produces_Range_usize a ab b
      -> produces_Range_usize b bc c -> produces_Range_usize a (Seq.(++) ab bc) c
  
  function produces_refl_Range_usize (self: t_Range_usize) : ()
  
  axiom produces_refl_Range_usize_spec:
    forall self: t_Range_usize. produces_Range_usize self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv_Range_usize [@inline:trivial] (_1: t_Range_usize) = true
  
  meta "rewrite_def" predicate inv_Range_usize
  
  predicate inv_Seq_usize [@inline:trivial] (_1: Seq.seq UInt64.t) = true
  
  meta "rewrite_def" predicate inv_Seq_usize
  
  type t_Option_usize = None | Some UInt64.t
  
  predicate resolve_ref_Range_usize [@inline:trivial] (_1: MutBorrow.t t_Range_usize) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_usize
  
  predicate completed_Range_usize (self: MutBorrow.t t_Range_usize) =
    resolve_ref_Range_usize self /\ deep_model_usize self.current.start >= deep_model_usize self.current.end'
  
  let rec next_Range_usize (self_: MutBorrow.t t_Range_usize) (return (x: t_Option_usize)) = any
    [ return (result: t_Option_usize) -> {match result with
        | None -> completed_Range_usize self_
        | Some v -> produces_Range_usize self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_usize) (ret (f0: UInt64.t)) = any
    [ good (f0: UInt64.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: UInt64.t [Some f0: t_Option_usize]. Some f0 <> input} (! {false} any) ]
  
  let rec rand_in_range (l: UInt64.t) (u: UInt64.t) (return (x: UInt64.t)) =
    {[@expl:rand_in_range requires] UInt64.t'int l <= UInt64.t'int u}
    any
    [ return (result: UInt64.t) -> {UInt64.t'int l <= UInt64.t'int result /\ UInt64.t'int result < UInt64.t'int u}
      (! return {result}) ]
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv_slice_T self.current /\ inv_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  let rec deref_mut_Vec_T_Global (self_: MutBorrow.t t_Vec_T_Global) (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:deref_mut 'self_' type invariant] inv_ref_Vec_T_Global'0 self_}
    any
    [ return (result: MutBorrow.t (Slice64.slice t_T)) -> {inv_ref_slice_T result}
      {Slice64.view result.current = view_Vec_T_Global self_.current}
      {Slice64.view result.final = view_Vec_T_Global self_.final}
      (! return {result}) ]
  
  let rec swap_T (self_: MutBorrow.t (Slice64.slice t_T)) (i: UInt64.t) (j: UInt64.t) (return (x: ())) =
    {[@expl:swap 'self_' type invariant] inv_ref_slice_T self_}
    {[@expl:swap requires #0] UInt64.t'int i < Seq.length (Slice64.view self_.current)}
    {[@expl:swap requires #1] UInt64.t'int j < Seq.length (Slice64.view self_.current)}
    any
    [ return (result: ()) ->
    {Permut.exchange (Slice64.view self_.final) (Slice64.view self_.current) (UInt64.t'int i) (UInt64.t'int j)}
      (! return {result}) ]
  
  predicate resolve_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_T
  
  predicate resolve_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_T_Global
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec knuth_shuffle_T (v: MutBorrow.t t_Vec_T_Global) (return (x: ())) =
    {[@expl:knuth_shuffle 'v' type invariant] inv_ref_Vec_T_Global'0 v}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = len_T {v.current} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_6 <- { start = (0: UInt64.t); end' = _7 } ] s1
      | s1 = into_iter_Range_usize {_6} (fun (_ret: t_Range_usize) -> [ &iter <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &old_6_0 <- v ] s1 | s1 = bb6 ]
    | bb6 = bb6
      [ bb6 = {[@expl:mut invariant] old_6_0.final = v.final}
        {[@expl:for invariant] inv_Seq_usize produced}
        {[@expl:for invariant] inv_Range_usize iter}
        {[@expl:for invariant] produces_Range_usize iter_old produced iter}
        {[@expl:loop invariant #0] inv_ref_Vec_T_Global'0 v}
        {[@expl:loop invariant #1] permutation_of_T (view_Vec_T_Global v.current) (view_Vec_T_Global old_v.current)}
        (! s0)
        [ s0 = bb7 ]
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_usize> {iter}
              (fun (_ret: MutBorrow.t t_Range_usize) -> [ &_22 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_usize> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret: MutBorrow.t t_Range_usize) ->
                [ &_21 <- _ret ] [ &_22 <- { _22 with current = _ret.final } ] s2)
          | s2 = next_Range_usize {_21} (fun (_ret: t_Option_usize) -> [ &_20 <- _ret ] s3)
          | s3 = bb8 ]
        | bb8 = s0
          [ s0 = -{resolve_ref_Range_usize _22}- s1
          | s1 = any [ br0 -> {_20 = None} (! bb11) | br1 (x0: UInt64.t) -> {_20 = Some x0} (! bb12) ] ]
        | bb12 = s0
          [ s0 = elim_Some {_20} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_25 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb13 ]
        | bb13 = s0
          [ s0 = [ &produced <- _25 ] s1
          | s1 = [ &n <- __creusot_proc_iter_elem ] s2
          | s2 = len_T {v.current} (fun (_ret: UInt64.t) -> [ &_29 <- _ret ] s3)
          | s3 = bb14 ]
        | bb14 = s0
          [ s0 = UInt64.sub {_29} {n} (fun (_ret: UInt64.t) -> [ &upper <- _ret ] s1)
          | s1 = rand_in_range {(0: UInt64.t)} {upper} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s2)
          | s2 = bb15 ]
        | bb15 = s0
          [ s0 = {inv_Vec_T_Global v.current}
            MutBorrow.borrow_mut <t_Vec_T_Global> {v.current}
              (fun (_ret: MutBorrow.t t_Vec_T_Global) ->
                [ &_37 <- _ret ] -{inv_Vec_T_Global _ret.final}-
                [ &v <- { v with current = _ret.final } ] s1)
          | s1 = deref_mut_Vec_T_Global {_37} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_36 <- _ret ] s2)
          | s2 = bb16 ]
        | bb16 = s0
          [ s0 = UInt64.sub {upper} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_39 <- _ret ] s1)
          | s1 = {inv_slice_T _36.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_36.current} {MutBorrow.get_id _36}
              (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
                [ &_35 <- _ret ] -{inv_slice_T _ret.final}-
                [ &_36 <- { _36 with current = _ret.final } ] s2)
          | s2 = swap_T {_35} {i} {_39} (fun (_ret: ()) -> [ &_34 <- _ret ] s3)
          | s3 = bb17 ]
        | bb17 = s0
          [ s0 = {[@expl:type invariant] inv_ref_slice_T _36} s1 | s1 = -{resolve_ref_slice_T _36}- s2 | s2 = bb6 ] ] ]
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Vec_T_Global'0 v} s1
      | s1 = -{resolve_ref_Vec_T_Global v}- s2
      | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec_T_Global = v
    | & old_v: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & iter: t_Range_usize = Any.any_l ()
    | & _6: t_Range_usize = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & iter_old: t_Range_usize = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _20: t_Option_usize = Any.any_l ()
    | & _21: MutBorrow.t t_Range_usize = Any.any_l ()
    | & _22: MutBorrow.t t_Range_usize = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _25: Seq.seq UInt64.t = Any.any_l ()
    | & n: UInt64.t = Any.any_l ()
    | & upper: UInt64.t = Any.any_l ()
    | & _29: UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _34: () = Any.any_l ()
    | & _35: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _36: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _37: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & _39: UInt64.t = Any.any_l ()
    | & old_6_0: MutBorrow.t t_Vec_T_Global = Any.any_l () ])
    [ return (result: ()) ->
    {[@expl:knuth_shuffle ensures] permutation_of_T (view_Vec_T_Global v.final) (view_Vec_T_Global v.current)}
      (! return {result}) ]
end
