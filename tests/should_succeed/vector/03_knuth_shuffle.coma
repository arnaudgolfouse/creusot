module M_03_knuth_shuffle__knuth_shuffle
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: t_Vec) = inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: t_Vec) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  let rec len (self_: t_Vec) (return (x: UInt64.t)) = {[@expl:len 'self_' type invariant] inv'3 self_}
    any [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  type t_Range = { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter (self_: t_Range) (return (x: t_Range)) = any
    [ return (result: t_Range) -> {result = self_} (! return {result}) ]
  
  predicate permutation_of (self: Seq.seq t_T) (other: Seq.seq t_T) = Permut.permut self other 0 (Seq.length self)
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv'4 [@inline:trivial] (_1: t_Range) = true
  
  meta "rewrite_def" predicate inv'4
  
  predicate inv'5 [@inline:trivial] (_1: Seq.seq UInt64.t) = true
  
  meta "rewrite_def" predicate inv'5
  
  type t_Option = C_None | C_Some UInt64.t
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_Range) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_Range) =
    resolve self /\ deep_model self.current.t_Range__start >= deep_model self.current.t_Range__end
  
  let rec next (self_: MutBorrow.t t_Range) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: UInt64.t)) = any
    [ good (field_0: UInt64.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  let rec rand_in_range (l: UInt64.t) (u: UInt64.t) (return (x: UInt64.t)) =
    {[@expl:rand_in_range requires] UInt64.t'int l <= UInt64.t'int u}
    any
    [ return (result: UInt64.t) -> {UInt64.t'int l <= UInt64.t'int result /\ UInt64.t'int result < UInt64.t'int u}
      (! return {result}) ]
  
  predicate invariant''3 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'6 [@inline:trivial] (_1: MutBorrow.t t_Vec) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'6
  
  predicate invariant''4 (self: Slice64.slice t_T) = inv'1 (Slice64.view self)
  
  predicate inv'7 [@inline:trivial] (_1: Slice64.slice t_T) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'7
  
  predicate invariant''5 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'8 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant''5 _1
  
  meta "rewrite_def" predicate inv'8
  
  let rec deref_mut (self_: MutBorrow.t t_Vec) (return (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:deref_mut 'self_' type invariant] inv'6 self_}
    any
    [ return (result: MutBorrow.t (Slice64.slice t_T)) -> {inv'8 result}
      {Slice64.view result.current = view self_.current}
      {Slice64.view result.final = view self_.final}
      (! return {result}) ]
  
  let rec swap (self_: MutBorrow.t (Slice64.slice t_T)) (i: UInt64.t) (j: UInt64.t) (return (x: ())) =
    {[@expl:swap 'self_' type invariant] inv'8 self_}
    {[@expl:swap requires #0] UInt64.t'int i < Seq.length (Slice64.view self_.current)}
    {[@expl:swap requires #1] UInt64.t'int j < Seq.length (Slice64.view self_.current)}
    any
    [ return (result: ()) ->
    {Permut.exchange (Slice64.view self_.final) (Slice64.view self_.current) (UInt64.t'int i) (UInt64.t'int j)}
      (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t t_Vec) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec knuth_shuffle (v: MutBorrow.t t_Vec) (return (x: ())) = {[@expl:knuth_shuffle 'v' type invariant] inv'6 v}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = len {v.current} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_6 <- { t_Range__start = (0: UInt64.t); t_Range__end = _7 } ] s1
      | s1 = into_iter {_6} (fun (_ret: t_Range) -> [ &iter <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &old_6_0 <- v ] s1 | s1 = bb6 ]
    | bb6 = bb6
      [ bb6 = {[@expl:mut invariant] old_6_0.final = v.final}
        {[@expl:for invariant] inv'5 produced}
        {[@expl:for invariant] inv'4 iter}
        {[@expl:for invariant] produces iter_old produced iter}
        {[@expl:loop invariant] permutation_of (view v.current) (view old_v.current)}
        (! s0)
        [ s0 = bb7 ]
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_21 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_20 <- _ret ] [ &_21 <- { _21 with current = _ret.final } ] s2)
          | s2 = next {_20} (fun (_ret: t_Option) -> [ &_19 <- _ret ] s3)
          | s3 = bb8 ]
        | bb8 = s0
          [ s0 = -{resolve _21}- s1
          | s1 = any [ br0 -> {_19 = C_None} (! bb11) | br1 (x0: UInt64.t) -> {_19 = C_Some x0} (! bb12) ] ]
        | bb12 = s0
          [ s0 = v_Some {_19} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_24 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb13 ]
        | bb13 = s0
          [ s0 = [ &produced <- _24 ] s1
          | s1 = [ &n <- __creusot_proc_iter_elem ] s2
          | s2 = len {v.current} (fun (_ret: UInt64.t) -> [ &_28 <- _ret ] s3)
          | s3 = bb14 ]
        | bb14 = s0
          [ s0 = UInt64.sub {_28} {n} (fun (_ret: UInt64.t) -> [ &upper <- _ret ] s1)
          | s1 = rand_in_range {(0: UInt64.t)} {upper} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s2)
          | s2 = bb15 ]
        | bb15 = s0
          [ s0 = {inv'2 v.current}
            MutBorrow.borrow_mut <t_Vec> {v.current}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_36 <- _ret ] -{inv'2 _ret.final}-
                [ &v <- { v with current = _ret.final } ] s1)
          | s1 = deref_mut {_36} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_35 <- _ret ] s2)
          | s2 = bb16 ]
        | bb16 = s0
          [ s0 = UInt64.sub {upper} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_38 <- _ret ] s1)
          | s1 = {inv'7 _35.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_35.current} {MutBorrow.get_id _35}
              (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
                [ &_34 <- _ret ] -{inv'7 _ret.final}-
                [ &_35 <- { _35 with current = _ret.final } ] s2)
          | s2 = swap {_34} {i} {_38} (fun (_ret: ()) -> [ &_33 <- _ret ] s3)
          | s3 = bb17 ]
        | bb17 = s0 [ s0 = {[@expl:type invariant] inv'8 _35} s1 | s1 = -{resolve'0 _35}- s2 | s2 = bb6 ] ] ]
    | bb11 = s0 [ s0 = {[@expl:type invariant] inv'6 v} s1 | s1 = -{resolve'1 v}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _6: t_Range = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _19: t_Option = Any.any_l ()
    | & _20: MutBorrow.t t_Range = Any.any_l ()
    | & _21: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _24: Seq.seq UInt64.t = Any.any_l ()
    | & n: UInt64.t = Any.any_l ()
    | & upper: UInt64.t = Any.any_l ()
    | & _28: UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _33: () = Any.any_l ()
    | & _34: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _35: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _36: MutBorrow.t t_Vec = Any.any_l ()
    | & _38: UInt64.t = Any.any_l ()
    | & old_6_0: MutBorrow.t t_Vec = Any.any_l () ])
    [ return (result: ()) -> {[@expl:knuth_shuffle ensures] permutation_of (view v.final) (view v.current)}
      (! return {result}) ]
end
