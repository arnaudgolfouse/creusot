module M_04_binary_search__binary_search [#"04_binary_search.rs" 26 0 26 71]
  let%span s04_binary_search = "04_binary_search.rs" 27 20 27 21
  let%span s04_binary_search'0 = "04_binary_search.rs" 28 19 28 20
  let%span s04_binary_search'1 = "04_binary_search.rs" 31 19 31 20
  let%span s04_binary_search'2 = "04_binary_search.rs" 35 16 35 89
  let%span s04_binary_search'3 = "04_binary_search.rs" 34 16 34 61
  let%span s04_binary_search'4 = "04_binary_search.rs" 33 16 33 56
  let%span s04_binary_search'5 = "04_binary_search.rs" 36 17 36 18
  let%span s04_binary_search'6 = "04_binary_search.rs" 37 26 37 27
  let%span s04_binary_search'7 = "04_binary_search.rs" 37 19 37 27
  let%span s04_binary_search'8 = "04_binary_search.rs" 48 19 48 20
  let%span s04_binary_search'9 = "04_binary_search.rs" 19 11 19 36
  let%span s04_binary_search'10 = "04_binary_search.rs" 20 11 20 23
  let%span s04_binary_search'11 = "04_binary_search.rs" 21 10 21 61
  let%span s04_binary_search'12 = "04_binary_search.rs" 22 10 23 46
  let%span s04_binary_search'13 = "04_binary_search.rs" 24 10 25 63
  let%span s04_binary_search'14 = "04_binary_search.rs" 16 4 16 31
  let%span s04_binary_search'15 = "04_binary_search.rs" 10 8 10 62
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 111 26 111 48
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 48 8 48 31
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 190 16 190 48
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 191 16 191 56
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span smodel = "../../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'13 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'14 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'15 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'16 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'17 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'18 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'19 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'20 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'21 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'22 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'23 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'24 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'25 = "../../../creusot-contracts/src/logic/ord.rs" 215 16 221 17
  let%span sord'26 = "../../../creusot-contracts/src/logic/ord.rs" 215 16 221 17
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 111 20 111 37
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 116 20 116 37
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'3] Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 (self: t_Vec) : Seq.seq UInt32.t = [%#smodel] view self
  
  let rec len (self_: t_Vec) (return' (x: UInt64.t)) = any
    [ return''0 (result: UInt64.t) -> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  type t_Result = C_Ok UInt64.t | C_Err UInt64.t
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'25] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  function index_logic (self: t_Vec) (ix: int) : UInt32.t = [%#svec'0] Seq.get (view self) ix
  
  function cmp_log'0 (self: UInt64.t) (o: UInt64.t) : t_Ordering = [%#sord'26] if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'24] (x = y) = (cmp_log'0 x y = C_Equal)
  
  function antisym2'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec'0: forall x: UInt64.t, y: UInt64.t. ([%#sord'22] cmp_log'0 x y = C_Greater)
      -> ([%#sord'23] cmp_log'0 y x = C_Less)
  
  function antisym1'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec'0: forall x: UInt64.t, y: UInt64.t. ([%#sord'20] cmp_log'0 x y = C_Less)
      -> ([%#sord'21] cmp_log'0 y x = C_Greater)
  
  function trans'0 (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec'0: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'17] cmp_log'0 x y = o)
      -> ([%#sord'18] cmp_log'0 y z = o) -> ([%#sord'19] cmp_log'0 x z = o)
  
  function refl'0 (x: UInt64.t) : ()
  
  axiom refl_spec'0: forall x: UInt64.t. [%#sord'16] cmp_log'0 x x = C_Equal
  
  function cmp_gt_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'15] UInt64.gt x y = (cmp_log'0 x y = C_Greater)
  
  function cmp_ge_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'14] UInt64.ge x y = (cmp_log'0 x y <> C_Less)
  
  function cmp_lt_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'13] UInt64.lt x y = (cmp_log'0 x y = C_Less)
  
  function cmp_le_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'12] UInt64.le x y = (cmp_log'0 x y <> C_Greater)
  
  predicate in_bounds (self: UInt64.t) (seq: Seq.seq UInt32.t) = [%#sslice] UInt64.t'int self < Seq.length seq
  
  predicate has_value (self: UInt64.t) (seq: Seq.seq UInt32.t) (out: UInt32.t) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return' (x: UInt32.t)) =
    {[@expl:index requires] [%#svec'1] in_bounds ix (view'0 self_)}
    any [ return''0 (result: UInt32.t) -> {[%#svec'2] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  predicate sorted_range [#"04_binary_search.rs" 8 0 8 56] (s: Seq.seq UInt32.t) (l: int) (u: int) =
    [%#s04_binary_search'15] forall i: int, j: int. l <= i /\ i < j /\ j < u -> UInt32.le (Seq.get s i) (Seq.get s j)
  
  predicate sorted [#"04_binary_search.rs" 15 0 15 34] (s: Seq.seq UInt32.t) =
    [%#s04_binary_search'14] sorted_range s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec binary_search [#"04_binary_search.rs" 26 0 26 71] (arr: t_Vec) (elem: UInt32.t) (return' (x: t_Result)) =
    {[@expl:binary_search requires #0] [%#s04_binary_search'9] Seq.length (view'0 arr) <= UInt64.t'int const_MAX}
    {[@expl:binary_search requires #1] [%#s04_binary_search'10] sorted (view'0 arr)}
    (! bb0
    [ bb0 = s0 [ s0 = len {arr'0} (fun (_ret: UInt64.t) -> [ &_10 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_9 <- _10 = ([%#s04_binary_search] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ] ]
    | bb2 = s0 [ s0 = [ &_0 <- C_Err ([%#s04_binary_search'0] (0: UInt64.t)) ] s1 | s1 = bb21 ]
    | bb3 = s0 [ s0 = len {arr'0} (fun (_ret: UInt64.t) -> [ &size <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &base <- [%#s04_binary_search'1] (0: UInt64.t) ] s1 | s1 = bb5 ]
    | bb5 = bb5'0
      [ bb5'0 = {[@expl:loop invariant #0] [%#s04_binary_search'4] 0 < UInt64.t'int size
        /\ UInt64.t'int size + UInt64.t'int base <= Seq.length (view'0 arr'0)}
        {[@expl:loop invariant #1] [%#s04_binary_search'3] forall i: UInt64.t. UInt64.lt i base
          -> UInt32.le (index_logic arr'0 (UInt64.t'int i)) elem'0}
        {[@expl:loop invariant #2] [%#s04_binary_search'2] forall i: UInt64.t. UInt64.t'int base + UInt64.t'int size
              < UInt64.t'int i
            /\ UInt64.t'int i < Seq.length (view'0 arr'0) -> UInt32.lt elem'0 (index_logic arr'0 (UInt64.t'int i))}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = [ &_22 <- UInt64.gt size ([%#s04_binary_search'5] (1: UInt64.t)) ] s1
          | s1 = any [ br0 -> {_22 = false} (! bb13) | br1 -> {_22} (! bb7) ] ]
        | bb7 = s0
          [ s0 = [ &_26 <- ([%#s04_binary_search'6] (2: UInt64.t)) = ([%#s04_binary_search'7] (0: UInt64.t)) ] s1
          | s1 = {[@expl:division by zero] [%#s04_binary_search'7] not _26} s2
          | s2 = bb8 ]
        | bb8 = s0
          [ s0 = UInt64.div {size} {[%#s04_binary_search'6] (2: UInt64.t)}
              (fun (_ret: UInt64.t) -> [ &half <- _ret ] s1)
          | s1 = UInt64.add {base} {half} (fun (_ret: UInt64.t) -> [ &mid <- _ret ] s2)
          | s2 = index {arr'0} {mid} (fun (_ret: UInt32.t) -> [ &_33 <- _ret ] s3)
          | s3 = bb9 ]
        | bb9 = s0
          [ s0 = [ &_31 <- UInt32.gt _33 elem'0 ] s1
          | s1 = any [ br0 -> {_31 = false} (! bb11) | br1 -> {_31} (! bb10) ] ]
        | bb10 = s0 [ s0 = [ &_30 <- base ] s1 | s1 = bb12 ]
        | bb11 = s0 [ s0 = [ &_30 <- mid ] s1 | s1 = bb12 ]
        | bb12 = s0
          [ s0 = [ &base <- _30 ] s1
          | s1 = UInt64.sub {size} {half} (fun (_ret: UInt64.t) -> [ &size <- _ret ] s2)
          | s2 = bb5'0 ] ] ]
    | bb13 = s0 [ s0 = index {arr'0} {base} (fun (_ret: UInt32.t) -> [ &_40 <- _ret ] s1) | s1 = bb14 ]
    | bb14 = s0
      [ s0 = [ &cmp <- _40 ] s1
      | s1 = [ &_43 <- cmp = elem'0 ] s2
      | s2 = any [ br0 -> {_43 = false} (! bb16) | br1 -> {_43} (! bb15) ] ]
    | bb15 = s0 [ s0 = [ &_0 <- C_Ok base ] s1 | s1 = bb21 ]
    | bb16 = s0
      [ s0 = [ &_47 <- UInt32.lt cmp elem'0 ] s1 | s1 = any [ br0 -> {_47 = false} (! bb18) | br1 -> {_47} (! bb17) ] ]
    | bb17 = s0
      [ s0 = UInt64.add {base} {[%#s04_binary_search'8] (1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_50 <- _ret ] s1)
      | s1 = [ &_0 <- C_Err _50 ] s2
      | s2 = bb21 ]
    | bb18 = s0 [ s0 = [ &_0 <- C_Err base ] s1 | s1 = bb21 ]
    | bb21 = return''0 {_0} ]
    [ & _0: t_Result = Any.any_l ()
    | & arr'0: t_Vec = arr
    | & elem'0: UInt32.t = elem
    | & _9: bool = Any.any_l ()
    | & _10: UInt64.t = Any.any_l ()
    | & size: UInt64.t = Any.any_l ()
    | & base: UInt64.t = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & half: UInt64.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & mid: UInt64.t = Any.any_l ()
    | & _30: UInt64.t = Any.any_l ()
    | & _31: bool = Any.any_l ()
    | & _33: UInt32.t = Any.any_l ()
    | & cmp: UInt32.t = Any.any_l ()
    | & _40: UInt32.t = Any.any_l ()
    | & _43: bool = Any.any_l ()
    | & _47: bool = Any.any_l ()
    | & _50: UInt64.t = Any.any_l () ])
    [ return''0 (result: t_Result) ->
    {[@expl:binary_search ensures #0] [%#s04_binary_search'11] forall x: UInt64.t. result = C_Ok x
        -> index_logic arr (UInt64.t'int x) = elem}
      {[@expl:binary_search ensures #1] [%#s04_binary_search'12] forall x: UInt64.t. result = C_Err x
        -> (forall i: UInt64.t. UInt64.lt i x -> UInt32.le (index_logic arr (UInt64.t'int i)) elem)}
      {[@expl:binary_search ensures #2] [%#s04_binary_search'13] forall x: UInt64.t. result = C_Err x
        -> (forall i: UInt64.t. UInt64.lt x i /\ UInt64.t'int i < Seq.length (view'0 arr)
          -> UInt32.lt elem (index_logic arr (UInt64.t'int i)))}
      (! return' {result}) ]
end
