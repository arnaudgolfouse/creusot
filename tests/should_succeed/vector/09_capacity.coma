module M_09_capacity__change_capacity
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom: forall x: t_Vec [inv'2 x]. inv'2 x -> invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t t_Vec) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  let rec reserve (self_: MutBorrow.t t_Vec) (additional: UInt64.t) (return (x: ())) =
    {[@expl:reserve 'self_' type invariant] inv'3 self_}
    any [ return (result: ()) -> {view self_.final = view self_.current} (! return {result}) ]
  
  let rec reserve_exact (self_: MutBorrow.t t_Vec) (additional: UInt64.t) (return (x: ())) =
    {[@expl:reserve_exact 'self_' type invariant] inv'3 self_}
    any [ return (result: ()) -> {view self_.final = view self_.current} (! return {result}) ]
  
  let rec shrink_to_fit (self_: MutBorrow.t t_Vec) (return (x: ())) =
    {[@expl:shrink_to_fit 'self_' type invariant] inv'3 self_}
    any [ return (result: ()) -> {view self_.final = view self_.current} (! return {result}) ]
  
  let rec shrink_to (self_: MutBorrow.t t_Vec) (min_capacity: UInt64.t) (return (x: ())) =
    {[@expl:shrink_to 'self_' type invariant] inv'3 self_}
    any [ return (result: ()) -> {view self_.final = view self_.current} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_Vec) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_T = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec change_capacity (v: MutBorrow.t t_Vec) (return (x: ())) = {[@expl:change_capacity 'v' type invariant] inv'3 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 v.current}
        MutBorrow.borrow_mut <t_Vec> {v.current}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_5 <- _ret ] -{inv'2 _ret.final}-
            [ &v <- { v with current = _ret.final } ] s1)
      | s1 = reserve {_5} {(100: UInt64.t)} (fun (_ret: ()) -> [ &_4 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'2 v.current}
        MutBorrow.borrow_mut <t_Vec> {v.current}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_7 <- _ret ] -{inv'2 _ret.final}-
            [ &v <- { v with current = _ret.final } ] s1)
      | s1 = reserve_exact {_7} {(200: UInt64.t)} (fun (_ret: ()) -> [ &_6 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = {inv'2 v.current}
        MutBorrow.borrow_mut <t_Vec> {v.current}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_9 <- _ret ] -{inv'2 _ret.final}-
            [ &v <- { v with current = _ret.final } ] s1)
      | s1 = shrink_to_fit {_9} (fun (_ret: ()) -> [ &_8 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = {inv'2 v.current}
        MutBorrow.borrow_final <t_Vec> {v.current} {MutBorrow.get_id v}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_11 <- _ret ] -{inv'2 _ret.final}-
            [ &v <- { v with current = _ret.final } ] s1)
      | s1 = shrink_to {_11} {(1: UInt64.t)} (fun (_ret: ()) -> [ &_10 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'3 v} s1 | s1 = -{resolve v}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t t_Vec = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: MutBorrow.t t_Vec = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _9: MutBorrow.t t_Vec = Any.any_l ()
    | & _10: () = Any.any_l ()
    | & _11: MutBorrow.t t_Vec = Any.any_l () ])
    [ return (result: ()) -> {[@expl:change_capacity ensures #0] Seq.length (view v.final)
      = Seq.length (view v.current)}
      {[@expl:change_capacity ensures #1] forall i: int. 0 <= i /\ i < Seq.length (view v.current)
        -> index_logic v.final i = index_logic v.current i}
      (! return {result}) ]
end
module M_09_capacity__clear_vec
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom: forall x: t_Vec [inv'2 x]. inv'2 x -> invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 [@inline:trivial] (_1: MutBorrow.t t_Vec) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'3
  
  let rec clear (self_: MutBorrow.t t_Vec) (return (x: ())) = {[@expl:clear 'self_' type invariant] inv'3 self_}
    any [ return (result: ()) -> {Seq.length (view self_.final) = 0} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_Vec) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec clear_vec (v: MutBorrow.t t_Vec) (return (x: ())) = {[@expl:clear_vec 'v' type invariant] inv'3 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 v.current}
        MutBorrow.borrow_final <t_Vec> {v.current} {MutBorrow.get_id v}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_4 <- _ret ] -{inv'2 _ret.final}-
            [ &v <- { v with current = _ret.final } ] s1)
      | s1 = clear {_4} (fun (_ret: ()) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'3 v} s1 | s1 = -{resolve v}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec = v
    | & _3: () = Any.any_l ()
    | & _4: MutBorrow.t t_Vec = Any.any_l () ])
    [ return (result: ()) -> {[@expl:clear_vec ensures] Seq.length (view v.final) = 0} (! return {result}) ]
end
