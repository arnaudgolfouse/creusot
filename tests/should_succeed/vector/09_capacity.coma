module M_09_capacity__change_capacity [#"09_capacity.rs" 6 0 6 41]
  let%span s09_capacity = "09_capacity.rs" 7 14 7 17
  let%span s09_capacity'0 = "09_capacity.rs" 8 20 8 23
  let%span s09_capacity'1 = "09_capacity.rs" 10 16 10 17
  let%span s09_capacity'2 = "09_capacity.rs" 6 26 6 27
  let%span s09_capacity'3 = "09_capacity.rs" 4 10 4 33
  let%span s09_capacity'4 = "09_capacity.rs" 5 10 5 62
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 145 16 145 17
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 146 26 146 43
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 149 16 149 17
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 150 26 150 43
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 153 16 153 17
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 154 26 154 43
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 157 16 157 17
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 158 26 158 43
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 48 8 48 31
  let%span svec'9 = "../../../creusot-contracts/src/std/vec.rs" 93 20 93 41
  let%span smodel = "../../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 711 20 711 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'7] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = [%#svec'9] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec) =
    [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  function view'0 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_T = [%#smodel] view self.current
  
  meta "rewrite_def" function view'0
  
  let rec reserve (self_: MutBorrow.t t_Vec) (additional: UInt64.t) (return' (x: ())) =
    {[@expl:reserve 'self_' type invariant] [%#svec] inv'3 self_}
    any [ return''0 (result: ()) -> {[%#svec'0] view self_.final = view'0 self_} (! return' {result}) ]
  
  let rec reserve_exact (self_: MutBorrow.t t_Vec) (additional: UInt64.t) (return' (x: ())) =
    {[@expl:reserve_exact 'self_' type invariant] [%#svec'1] inv'3 self_}
    any [ return''0 (result: ()) -> {[%#svec'2] view self_.final = view'0 self_} (! return' {result}) ]
  
  let rec shrink_to_fit (self_: MutBorrow.t t_Vec) (return' (x: ())) =
    {[@expl:shrink_to_fit 'self_' type invariant] [%#svec'3] inv'3 self_}
    any [ return''0 (result: ()) -> {[%#svec'4] view self_.final = view'0 self_} (! return' {result}) ]
  
  let rec shrink_to (self_: MutBorrow.t t_Vec) (min_capacity: UInt64.t) (return' (x: ())) =
    {[@expl:shrink_to 'self_' type invariant] [%#svec'5] inv'3 self_}
    any [ return''0 (result: ()) -> {[%#svec'6] view self_.final = view'0 self_} (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Vec) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Vec) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_T = [%#svec'8] Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec change_capacity [#"09_capacity.rs" 6 0 6 41] (v: MutBorrow.t t_Vec) (return' (x: ())) =
    {[@expl:change_capacity 'v' type invariant] [%#s09_capacity'2] inv'3 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 v'0.current}
        MutBorrow.borrow_mut <t_Vec> {v'0.current}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_5 <- _ret ] -{inv'2 _ret.final}-
            [ &v'0 <- { v'0 with current = _ret.final } ] s1)
      | s1 = reserve {_5} {[%#s09_capacity] (100: UInt64.t)} (fun (_ret: ()) -> [ &_4 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'2 v'0.current}
        MutBorrow.borrow_mut <t_Vec> {v'0.current}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_7 <- _ret ] -{inv'2 _ret.final}-
            [ &v'0 <- { v'0 with current = _ret.final } ] s1)
      | s1 = reserve_exact {_7} {[%#s09_capacity'0] (200: UInt64.t)} (fun (_ret: ()) -> [ &_6 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = {inv'2 v'0.current}
        MutBorrow.borrow_mut <t_Vec> {v'0.current}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_9 <- _ret ] -{inv'2 _ret.final}-
            [ &v'0 <- { v'0 with current = _ret.final } ] s1)
      | s1 = shrink_to_fit {_9} (fun (_ret: ()) -> [ &_8 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = {inv'2 v'0.current}
        MutBorrow.borrow_final <t_Vec> {v'0.current} {MutBorrow.get_id v'0}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_11 <- _ret ] -{inv'2 _ret.final}-
            [ &v'0 <- { v'0 with current = _ret.final } ] s1)
      | s1 = shrink_to {_11} {[%#s09_capacity'1] (1: UInt64.t)} (fun (_ret: ()) -> [ &_10 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'3 v'0} s1 | s1 = -{resolve'0 v'0}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v'0: MutBorrow.t t_Vec = v
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t t_Vec = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: MutBorrow.t t_Vec = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _9: MutBorrow.t t_Vec = Any.any_l ()
    | & _10: () = Any.any_l ()
    | & _11: MutBorrow.t t_Vec = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:change_capacity ensures #0] [%#s09_capacity'3] Seq.length (view v.final)
      = Seq.length (view'0 v)}
      {[@expl:change_capacity ensures #1] [%#s09_capacity'4] forall i: int. 0 <= i /\ i < Seq.length (view'0 v)
        -> index_logic v.final i = index_logic v.current i}
      (! return' {result}) ]
end
module M_09_capacity__clear_vec [#"09_capacity.rs" 14 0 14 35]
  let%span s09_capacity = "09_capacity.rs" 14 20 14 21
  let%span s09_capacity'0 = "09_capacity.rs" 13 10 13 26
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 161 16 161 17
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 162 26 162 45
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 93 20 93 41
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 711 20 711 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'1] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = [%#svec'2] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: MutBorrow.t t_Vec) =
    [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  let rec clear (self_: MutBorrow.t t_Vec) (return' (x: ())) =
    {[@expl:clear 'self_' type invariant] [%#svec] inv'3 self_}
    any [ return''0 (result: ()) -> {[%#svec'0] Seq.length (view self_.final) = 0} (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Vec) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Vec) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec clear_vec [#"09_capacity.rs" 14 0 14 35] (v: MutBorrow.t t_Vec) (return' (x: ())) =
    {[@expl:clear_vec 'v' type invariant] [%#s09_capacity] inv'3 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'2 v'0.current}
        MutBorrow.borrow_final <t_Vec> {v'0.current} {MutBorrow.get_id v'0}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_4 <- _ret ] -{inv'2 _ret.final}-
            [ &v'0 <- { v'0 with current = _ret.final } ] s1)
      | s1 = clear {_4} (fun (_ret: ()) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'3 v'0} s1 | s1 = -{resolve'0 v'0}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v'0: MutBorrow.t t_Vec = v
    | & _3: () = Any.any_l ()
    | & _4: MutBorrow.t t_Vec = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:clear_vec ensures] [%#s09_capacity'0] Seq.length (view v.final) = 0}
      (! return' {result}) ]
end
