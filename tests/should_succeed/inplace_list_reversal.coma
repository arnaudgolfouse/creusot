module M_inplace_list_reversal__rev [#"inplace_list_reversal.rs" 24 0 24 30]
  let%span sinplace_list_reversal = "inplace_list_reversal.rs" 25 16 25 31
  let%span sinplace_list_reversal'0 = "inplace_list_reversal.rs" 30 16 30 73
  let%span sinplace_list_reversal'1 = "inplace_list_reversal.rs" 29 16 29 25
  let%span sinplace_list_reversal'2 = "inplace_list_reversal.rs" 28 16 28 25
  let%span sinplace_list_reversal'3 = "inplace_list_reversal.rs" 24 14 24 15
  let%span sinplace_list_reversal'4 = "inplace_list_reversal.rs" 23 10 23 35
  let%span sinplace_list_reversal'5 = "inplace_list_reversal.rs" 17 4 20 5
  let%span smem = "../../creusot-contracts/src/std/mem.rs" 10 26 10 30
  let%span smem'0 = "../../creusot-contracts/src/std/mem.rs" 10 40 10 43
  let%span smem'1 = "../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  let%span smem'2 = "../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 62 8 62 22
  let%span sresolve'0 = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sresolve'1 = "../../creusot-contracts/src/resolve.rs" 36 8 36 42
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type tuple = { _p0: t_T; _p1: t_List }
  with t_List = C_Nil | C_Cons tuple
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: tuple)
  
  predicate inv'1 (_0: t_List)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'0 x]. inv'0 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'1 x1)
  
  predicate invariant' (self: tuple) = [%#sboxed] inv'0 self
  
  predicate inv'2 (_0: tuple)
  
  axiom inv_axiom'0 [@rewrite]: forall x: tuple [inv'2 x]. inv'2 x = invariant' x
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'1 x]. inv'1 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 -> inv'2 a_0
        end
  
  predicate invariant''0 (self: MutBorrow.t t_List) = [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_0: MutBorrow.t t_List)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_List [inv'3 x]. inv'3 x = invariant''0 x
  
  let rec replace (dest: MutBorrow.t t_List) (src: t_List) (return' (x: t_List)) =
    {[@expl:replace 'dest' type invariant] [%#smem] inv'3 dest}
    {[@expl:replace 'src' type invariant] [%#smem'0] inv'1 src}
    any
    [ return''0 (result: t_List) -> {inv'1 result}
      {[%#smem'1] dest.final = src}
      {[%#smem'2] result = dest.current}
      (! return' {result}) ]
  
  function rev_append [#"inplace_list_reversal.rs" 16 0 16 55] (n: t_List) (o: t_List) : t_List =
    [%#sinplace_list_reversal'5] match n with
      | C_Nil -> o
      | C_Cons {_p0 = hd; _p1 = tl} -> rev_append tl (C_Cons { _p0 = hd; _p1 = o })
      end
  
  let rec v_Cons (input: t_List) (ret (field_0: tuple)) = any
    [ good (field_0: tuple) -> {C_Cons field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: tuple [C_Cons field_0: t_List]. C_Cons field_0 <> input} (! {false} any) ]
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 (_0: t_List) = true
  
  predicate resolve'1 (self: tuple) = [%#sresolve'1] resolve self._p0 /\ resolve'0 self._p1
  
  predicate resolve'2 (_0: tuple) = resolve'1 _0
  
  predicate resolve'3 (self: tuple) = [%#sresolve] resolve'2 self
  
  predicate resolve'4 (_0: tuple) = resolve'3 _0
  
  predicate resolve'5 (self: MutBorrow.t t_List) = [%#sresolve'0] self.final = self.current
  
  predicate resolve'6 (_0: MutBorrow.t t_List) = resolve'5 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec rev [#"inplace_list_reversal.rs" 24 0 24 30] (l: MutBorrow.t t_List) (return' (x: ())) =
    {[@expl:rev 'l' type invariant] [%#sinplace_list_reversal'3] inv'3 l}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_l <- [%#sinplace_list_reversal] l'0 ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &prev <- C_Nil ] s1
      | s1 = [ &_8 <- C_Nil ] s2
      | s2 = {inv'1 l'0.current}
        MutBorrow.borrow_mut <t_List> {l'0.current}
          (fun (_ret: MutBorrow.t t_List) ->
            [ &_7 <- _ret ] -{inv'1 _ret.final}-
            [ &l'0 <- { l'0 with current = _ret.final } ] s3)
      | s3 = replace {_7} {_8} (fun (_ret: t_List) -> [ &head <- _ret ] s4)
      | s4 = bb3 ]
    | bb3 = bb3'0
      [ bb3'0 = {[@expl:loop invariant #0] [%#sinplace_list_reversal'2] inv'1 prev}
        {[@expl:loop invariant #1] [%#sinplace_list_reversal'1] inv'1 head}
        {[@expl:loop invariant #2] [%#sinplace_list_reversal'0] rev_append head prev = rev_append old_l.current (C_Nil)}
        (! s0)
        [ s0 = bb4 ]
        [ bb4 = any [ br0 -> {head = C_Nil} (! bb18) | br1 (x0: tuple) -> {head = C_Cons x0} (! bb6) ]
        | bb6 = s0
          [ s0 = v_Cons {head} (fun (r0: tuple) -> [ &curr <- r0 ] s1) | s1 = [ &next <- curr._p1 ] s2 | s2 = bb7 ]
        | bb7 = s0 [ s0 = [ &curr <- { curr with _p1 = prev } ] s1 | s1 = bb9 ]
        | bb9 = s0 [ s0 = [ &_19 <- C_Cons curr ] s1 | s1 = bb11 ]
        | bb11 = s0 [ s0 = [ &prev <- _19 ] s1 | s1 = bb14 ]
        | bb14 = s0 [ s0 = [ &head <- next ] s1 | s1 = bb3'0 ] ] ]
    | bb18 = s0
      [ s0 = {[@expl:type invariant] match head with
          | C_Cons x -> inv'2 x
          | _ -> true
          end}
        s1
      | s1 = -{match head with
          | C_Cons x -> resolve'4 x
          | _ -> true
          end}-
        s2
      | s2 = bb20 ]
    | bb20 = s0
      [ s0 = {[@expl:type invariant] inv'1 l'0.current} s1
      | s1 = [ &l'0 <- { l'0 with current = prev } ] s2
      | s2 = {[@expl:type invariant] inv'3 l'0} s3
      | s3 = -{resolve'6 l'0}- s4
      | s4 = bb24 ]
    | bb24 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & l'0: MutBorrow.t t_List = l
    | & old_l: MutBorrow.t t_List = Any.any_l ()
    | & prev: t_List = Any.any_l ()
    | & head: t_List = Any.any_l ()
    | & _7: MutBorrow.t t_List = Any.any_l ()
    | & _8: t_List = Any.any_l ()
    | & curr: tuple = Any.any_l ()
    | & next: t_List = Any.any_l ()
    | & _19: t_List = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:rev ensures] [%#sinplace_list_reversal'4] l.final
      = rev_append l.current (C_Nil)}
      (! return' {result}) ]
end
