module M_open_inv__test_open_inv_param
  use creusot.prelude.Any
  use creusot.int.Int32
  
  type t_IsZero = { t_IsZero__0: Int32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_open_inv_param (_0: t_IsZero) (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0'0} ] [ & _0'0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_open_inv__test_open_inv_param_call
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_IsZero = { t_IsZero__0: Int32.t }
  
  let rec test_open_inv_param (_0: t_IsZero) (return' (x: ())) = any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_open_inv_param_call (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- { t_IsZero__0 = (0: Int32.t) } ] s1
      | s1 = Int32.sub {a.t_IsZero__0} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &a <- { t_IsZero__0 = _ret } ] s2)
      | s2 = test_open_inv_param {a} (fun (_ret: ()) -> [ &_2 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = return''0 {_0} ] [ & _0: () = Any.any_l () | & a: t_IsZero = Any.any_l () | & _2: () = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_open_inv__test_open_inv_result
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_IsZero = { t_IsZero__0: Int32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_open_inv_result (return' (x: t_IsZero)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- { t_IsZero__0 = (0: Int32.t) } ] s1
      | s1 = Int32.sub {a.t_IsZero__0} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &a <- { t_IsZero__0 = _ret } ] s2)
      | s2 = [ &_0 <- a ] s3
      | s3 = return''0 {_0} ] ] [ & _0: t_IsZero = Any.any_l () | & a: t_IsZero = Any.any_l () ])
    [ return''0 (result: t_IsZero) -> (! return' {result}) ]
end
