module M_open_inv__qyi1378362013470123625__clone (* <IsZero as std::clone::Clone> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_IsZero = { t_IsZero__0: Int32.t }
  
  let rec clone' (self_: Int32.t) (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = self_} (! return {result}) ]
  
  predicate invariant' (self: t_IsZero) = self.t_IsZero__0 = (0: Int32.t)
  
  predicate inv (_1: t_IsZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_IsZero [inv x]. inv x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: t_IsZero) = inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 [@inline:trivial] (_1: t_IsZero) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: Int32.t) (result_state: ()) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec clone''0 (self: t_IsZero) (return (x: t_IsZero)) = {[@expl:clone 'self' type invariant] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- self.t_IsZero__0 ] s1 | s1 = clone' {_5} (fun (_ret: Int32.t) -> [ &_3 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- { t_IsZero__0 = _3 } ] s1 | s1 = return {_0} ] ]
    [ & _0: t_IsZero = Any.any_l ()
    | & self: t_IsZero = self
    | & _3: Int32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l () ])
    [ return (result: t_IsZero) -> {[@expl:clone result type invariant] inv result}
      {[@expl:clone ensures] postcondition () self.t_IsZero__0 result.t_IsZero__0}
      (! return {result}) ]
end
module M_open_inv__test_open_inv_param
  use creusot.prelude.Any
  use creusot.int.Int32
  
  type t_IsZero = { t_IsZero__0: Int32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_open_inv_param (_1: t_IsZero) (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_open_inv__test_open_inv_param_call
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_IsZero = { t_IsZero__0: Int32.t }
  
  let rec test_open_inv_param (_1: t_IsZero) (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_open_inv_param_call (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- { t_IsZero__0 = (0: Int32.t) } ] s1
      | s1 = Int32.sub {a.t_IsZero__0} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &a <- { t_IsZero__0 = _ret } ] s2)
      | s2 = test_open_inv_param {a} (fun (_ret: ()) -> [ &_2 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = return {_0} ] [ & _0: () = Any.any_l () | & a: t_IsZero = Any.any_l () | & _2: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_open_inv__test_open_inv_result
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_IsZero = { t_IsZero__0: Int32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_open_inv_result (return (x: t_IsZero)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- { t_IsZero__0 = (0: Int32.t) } ] s1
      | s1 = Int32.sub {a.t_IsZero__0} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &a <- { t_IsZero__0 = _ret } ] s2)
      | s2 = [ &_0 <- a ] s3
      | s3 = return {_0} ] ] [ & _0: t_IsZero = Any.any_l () | & a: t_IsZero = Any.any_l () ])
    [ return (result: t_IsZero) -> (! return {result}) ]
end
module M_open_inv__qyi1378362013470123625__clone__refines (* <IsZero as std::clone::Clone> *)
  use creusot.int.Int32
  
  type t_IsZero = { t_IsZero__0: Int32.t }
  
  predicate invariant' (self: t_IsZero) = self.t_IsZero__0 = (0: Int32.t)
  
  predicate inv (_1: t_IsZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_IsZero [inv x]. inv x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: t_IsZero) = inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 [@inline:trivial] (_1: t_IsZero) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: Int32.t) (result_state: ()) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec clone' (self_: Int32.t) (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self_: t_IsZero. inv'0 self_
      -> inv'0 self_
      /\ (forall result: t_IsZero. postcondition () self_.t_IsZero__0 result.t_IsZero__0 /\ inv result -> inv result)
end
