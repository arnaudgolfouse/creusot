module M_linked_list__qyi10858349784728989480__new (* List<T> *)
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.int.Int64
  use creusot.prelude.Any
  use map.Map
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  let rec null (return (x: Opaque.ptr)) = any
    [ return (result: Opaque.ptr) -> {is_null_logic result} (! return {result}) ]
  
  type t_PtrOwn
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  type t_T
  
  type t_Cell = { t_Cell__v: t_T; t_Cell__next: Opaque.ptr }
  
  predicate metadata_matches [@inline:trivial] (_value: t_Cell) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : t_Cell
  
  function metadata_logic (_1: Opaque.ptr) : ()
  
  constant size_of_Cell_T : int
  
  axiom size_of_Cell_T_spec: 0 <= size_of_Cell_T
  
  function size_of_val_logic [@inline:trivial] (val''0: t_Cell) : int = size_of_Cell_T
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: t_Cell. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate inv (_1: t_T)
  
  predicate inv'0 (_1: t_Cell)
  
  axiom inv_axiom [@rewrite]: forall x: t_Cell [inv'0 x]. inv'0 x = inv x.t_Cell__v
  
  predicate invariant' [@inline:trivial] (self: t_Cell) = inv'0 self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 [@inline:trivial] (_1: t_Cell) = invariant' _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''0 (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv'1 (val' self)
  
  predicate inv'2 (_1: t_PtrOwn)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate invariant''1 (self: t_PtrOwn) = inv'2 self
  
  predicate inv'3 [@inline:trivial] (_1: t_PtrOwn) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate invariant''2 [@inline:trivial] (self: Seq.seq t_PtrOwn) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'3 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'4 [@inline:trivial] (_1: Seq.seq t_PtrOwn) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate invariant''3 [@inline:trivial] (self: Seq.seq t_PtrOwn) = inv'4 self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'5 [@inline:trivial] (_1: Seq.seq t_PtrOwn) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'5
  
  let rec new (return (x: Seq.seq t_PtrOwn)) = any
    [ return (result: Seq.seq t_PtrOwn) -> {inv'5 result} {result = (Seq.empty: Seq.seq t_PtrOwn)} (! return {result}) ]
  
  type t_List = { t_List__first: Opaque.ptr; t_List__last: Opaque.ptr; t_List__seq: Seq.seq t_PtrOwn }
  
  predicate invariant''4 (self: t_List) =
    self.t_List__seq = (Seq.empty: Seq.seq t_PtrOwn)
      /\ is_null_logic self.t_List__first /\ is_null_logic self.t_List__last
    \/ Seq.length self.t_List__seq > 0
    /\ self.t_List__first = ptr (Seq.get self.t_List__seq 0)
    /\ self.t_List__last = ptr (Seq.get self.t_List__seq (Seq.length self.t_List__seq - 1))
    /\ (forall i: int. 0 <= i /\ i < Seq.length self.t_List__seq - 1
        -> (val' (Seq.get self.t_List__seq i)).t_Cell__next = ptr (Seq.get self.t_List__seq (i + 1)))
    /\ is_null_logic (val' (Seq.get self.t_List__seq (Seq.length self.t_List__seq - 1))).t_Cell__next
  
  predicate inv'6 (_1: t_List)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'6 x]. inv'6 x = (invariant''4 x /\ inv'5 x.t_List__seq)
  
  function seq_map (s: Seq.seq t_PtrOwn) (f: Map.map t_PtrOwn t_T) : Seq.seq t_T =
    Seq.create (Seq.length s) (fun (i: int) -> Map.get f (Seq.get s i))
  
  function view (self: t_List) : Seq.seq t_T =
    seq_map self.t_List__seq (fun (ptr_own: t_PtrOwn) -> (val' ptr_own).t_Cell__v)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new'0 (return (x: t_List)) = (! bb0
    [ bb0 = s0 [ s0 = null (fun (_ret: Opaque.ptr) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = null (fun (_ret: Opaque.ptr) -> [ &_3 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = new (fun (_ret: Seq.seq t_PtrOwn) -> [ &_4 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &_0 <- { t_List__first = _2; t_List__last = _3; t_List__seq = _4 } ] s1 | s1 = return {_0} ] ]
    [ & _0: t_List = Any.any_l ()
    | & _2: Opaque.ptr = Any.any_l ()
    | & _3: Opaque.ptr = Any.any_l ()
    | & _4: Seq.seq t_PtrOwn = Any.any_l () ])
    [ return (result: t_List) -> {[@expl:new result type invariant] inv'6 result}
      {[@expl:new ensures] view result = (Seq.empty: Seq.seq t_T)}
      (! return {result}) ]
end
module M_linked_list__qyi10858349784728989480__push_back (* List<T> *)
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.int.Int64
  use seq.Seq
  use creusot.int.Int128
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use map.Map
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  let rec null (return (x: Opaque.ptr)) = any
    [ return (result: Opaque.ptr) -> {is_null_logic result} (! return {result}) ]
  
  type t_T
  
  type t_Cell = { t_Cell__v: t_T; t_Cell__next: Opaque.ptr }
  
  type t_PtrOwn
  
  type tuple = { f0: Opaque.ptr; f1: t_PtrOwn }
  
  predicate inv (_1: t_T)
  
  predicate inv'0 (_1: t_Cell)
  
  axiom inv_axiom [@rewrite]: forall x: t_Cell [inv'0 x]. inv'0 x = inv x.t_Cell__v
  
  predicate invariant' (self: t_Cell) = inv'0 self
  
  predicate inv'1 [@inline:trivial] (_1: t_Cell) = invariant' _1
  
  meta "rewrite_def" predicate inv'1
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches [@inline:trivial] (_value: t_Cell) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : t_Cell
  
  function metadata_logic (_1: Opaque.ptr) : ()
  
  constant size_of_Cell_T : int
  
  axiom size_of_Cell_T_spec: 0 <= size_of_Cell_T
  
  function size_of_val_logic [@inline:trivial] (val''0: t_Cell) : int = size_of_Cell_T
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: t_Cell. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate invariant''0 [@inline:trivial] (self: t_Cell) = inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 [@inline:trivial] (_1: t_Cell) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'2
  
  predicate invariant''1 (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv'2 (val' self)
  
  predicate inv'3 (_1: t_PtrOwn)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: t_PtrOwn) = inv'3 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'4 [@inline:trivial] (_1: t_PtrOwn) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate inv'5 [@inline:trivial] (_1: tuple) = inv'4 _1.f1
  
  meta "rewrite_def" predicate inv'5
  
  let rec from_box (val''0: t_Cell) (return (x: tuple)) = {[@expl:from_box 'val' type invariant] inv'1 val''0}
    any
    [ return (result: tuple) -> {inv'5 result}
      {ptr result.f1 = result.f0 /\ val' result.f1 = val''0}
      (! return {result}) ]
  
  type t_List = { t_List__first: Opaque.ptr; t_List__last: Opaque.ptr; t_List__seq: Seq.seq t_PtrOwn }
  
  let rec is_null (self_: Opaque.ptr) (return (x: bool)) = any
    [ return (result: bool) -> {result = is_null_logic self_} (! return {result}) ]
  
  predicate invariant''3 (self: t_PtrOwn) = inv'3 self
  
  predicate inv'6 [@inline:trivial] (_1: t_PtrOwn) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'6
  
  predicate invariant''4 [@inline:trivial] (self: Seq.seq t_PtrOwn) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'6 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'7 [@inline:trivial] (_1: Seq.seq t_PtrOwn) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'7
  
  predicate invariant''5 [@inline:trivial] (self: Seq.seq t_PtrOwn) = inv'7 self
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'8 [@inline:trivial] (_1: Seq.seq t_PtrOwn) = invariant''5 _1
  
  meta "rewrite_def" predicate inv'8
  
  predicate invariant''6 [@inline:trivial] (self: Seq.seq t_PtrOwn) = inv'8 self
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'9 [@inline:trivial] (_1: Seq.seq t_PtrOwn) = invariant''6 _1
  
  meta "rewrite_def" predicate inv'9
  
  predicate invariant''7 [@inline:trivial] (self: Seq.seq t_PtrOwn) = inv'7 self
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'10 [@inline:trivial] (_1: Seq.seq t_PtrOwn) = invariant''7 _1
  
  meta "rewrite_def" predicate inv'10
  
  let rec deref (self: Seq.seq t_PtrOwn) (return (x: Seq.seq t_PtrOwn)) =
    {[@expl:deref 'self' type invariant] inv'9 self}
    any [ return (result: Seq.seq t_PtrOwn) -> {inv'10 result} {result = self} (! return {result}) ]
  
  let rec len_ghost (self: Seq.seq t_PtrOwn) (return (x: int)) = {[@expl:len_ghost 'self' type invariant] inv'10 self}
    any [ return (result: int) -> {result = Seq.length self} (! return {result}) ]
  
  let rec new (value: Int128.t) (return (x: int)) = any
    [ return (result: int) -> {result = Int128.to_int value} (! return {result}) ]
  
  let rec into_inner (self: int) (return (x: int)) = any [ return (result: int) -> {result = self} (! return {result}) ]
  
  let rec sub (self: int) (other: int) (return (x: int)) = any
    [ return (result: int) -> {result = self - other} (! return {result}) ]
  
  predicate invariant''8 [@inline:trivial] (self: MutBorrow.t (Seq.seq t_PtrOwn)) =
    inv'8 self.current /\ inv'8 self.final
  
  meta "rewrite_def" predicate invariant''8
  
  predicate inv'11 [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn)) = invariant''8 _1
  
  meta "rewrite_def" predicate inv'11
  
  predicate invariant''9 [@inline:trivial] (self: MutBorrow.t (Seq.seq t_PtrOwn)) =
    inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''9
  
  predicate inv'12 [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn)) = invariant''9 _1
  
  meta "rewrite_def" predicate inv'12
  
  let rec deref_mut (self: MutBorrow.t (Seq.seq t_PtrOwn)) (return (x: MutBorrow.t (Seq.seq t_PtrOwn))) =
    {[@expl:deref_mut 'self' type invariant] inv'11 self}
    any [ return (result: MutBorrow.t (Seq.seq t_PtrOwn)) -> {inv'12 result} {result = self} (! return {result}) ]
  
  type t_Option = C_None | C_Some (MutBorrow.t t_PtrOwn)
  
  predicate invariant''10 [@inline:trivial] (self: MutBorrow.t t_PtrOwn) = inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''10
  
  predicate inv'13 [@inline:trivial] (_1: MutBorrow.t t_PtrOwn) = invariant''10 _1
  
  meta "rewrite_def" predicate inv'13
  
  predicate inv'14 (_1: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'14 x]. inv'14 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'13 a_0
        end
  
  type t_Option'0 = C_None'0 | C_Some'0 t_PtrOwn
  
  function get (self: Seq.seq t_PtrOwn) (ix: int) : t_Option'0 = if 0 <= ix /\ ix < Seq.length self then
      C_Some'0 (Seq.get self ix)
    else
      C_None'0
  
  
  let rec get_mut_ghost (self: MutBorrow.t (Seq.seq t_PtrOwn)) (index: int) (return (x: t_Option)) =
    {[@expl:get_mut_ghost 'self' type invariant] inv'12 self}
    any
    [ return (result: t_Option) -> {inv'14 result}
      {match result with
        | C_None -> get self.current index = C_None'0 /\ self.current = self.final
        | C_Some r -> get self.current index = C_Some'0 (r.current) /\ r.final = Seq.get self.final index
        end}
      {forall i: int. i <> index -> get self.current i = get self.final i}
      {Seq.length self.current = Seq.length self.final}
      (! return {result}) ]
  
  let rec unwrap (self_: t_Option) (return (x: MutBorrow.t t_PtrOwn)) =
    {[@expl:unwrap 'self_' type invariant] inv'14 self_}
    {[@expl:unwrap requires] self_ <> C_None}
    any [ return (result: MutBorrow.t t_PtrOwn) -> {inv'13 result} {C_Some result = self_} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_PtrOwn) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate invariant''11 [@inline:trivial] (self: MutBorrow.t t_PtrOwn) = inv'13 self
  
  meta "rewrite_def" predicate invariant''11
  
  predicate inv'15 [@inline:trivial] (_1: MutBorrow.t t_PtrOwn) = invariant''11 _1
  
  meta "rewrite_def" predicate inv'15
  
  let rec new'0 (x: MutBorrow.t t_PtrOwn) (return (x'0: MutBorrow.t t_PtrOwn)) =
    {[@expl:new 'x' type invariant] inv'13 x}
    any [ return (result: MutBorrow.t t_PtrOwn) -> {inv'15 result} {result = x} (! return {result}) ]
  
  predicate invariant''12 [@inline:trivial] (self: MutBorrow.t t_Cell) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant''12
  
  predicate inv'16 [@inline:trivial] (_1: MutBorrow.t t_Cell) = invariant''12 _1
  
  meta "rewrite_def" predicate inv'16
  
  function fin [@inline:trivial] (self: MutBorrow.t t_PtrOwn) : t_PtrOwn = self.final
  
  meta "rewrite_def" function fin
  
  let rec as_mut (ptr'0: Opaque.ptr) (own: MutBorrow.t t_PtrOwn) (return (x: MutBorrow.t t_Cell)) =
    {[@expl:as_mut 'own' type invariant] inv'15 own}
    {[@expl:as_mut requires] ptr'0 = ptr own.current}
    any
    [ return (result: MutBorrow.t t_Cell) -> {inv'16 result}
      {result.current = val' own.current}
      {ptr (fin own) = ptr own.current}
      {val' (fin own) = result.final}
      (! return {result}) ]
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t t_Cell) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'1
  
  let rec into_inner'0 (self: t_PtrOwn) (return (x: t_PtrOwn)) = {[@expl:into_inner 'self' type invariant] inv'4 self}
    any [ return (result: t_PtrOwn) -> {inv'3 result} {result = self} (! return {result}) ]
  
  let rec push_back_ghost (self: MutBorrow.t (Seq.seq t_PtrOwn)) (x: t_PtrOwn) (return (x'0: ())) =
    {[@expl:push_back_ghost 'self' type invariant] inv'12 self}
    {[@expl:push_back_ghost 'x' type invariant] inv'3 x}
    any [ return (result: ()) -> {self.final = Seq.snoc self.current x} (! return {result}) ]
  
  predicate invariant''13 (self: t_List) =
    self.t_List__seq = (Seq.empty: Seq.seq t_PtrOwn)
      /\ is_null_logic self.t_List__first /\ is_null_logic self.t_List__last
    \/ Seq.length self.t_List__seq > 0
    /\ self.t_List__first = ptr (Seq.get self.t_List__seq 0)
    /\ self.t_List__last = ptr (Seq.get self.t_List__seq (Seq.length self.t_List__seq - 1))
    /\ (forall i: int. 0 <= i /\ i < Seq.length self.t_List__seq - 1
        -> (val' (Seq.get self.t_List__seq i)).t_Cell__next = ptr (Seq.get self.t_List__seq (i + 1)))
    /\ is_null_logic (val' (Seq.get self.t_List__seq (Seq.length self.t_List__seq - 1))).t_Cell__next
  
  predicate inv'17 (_1: t_List)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_List [inv'17 x]. inv'17 x = (invariant''13 x /\ inv'8 x.t_List__seq)
  
  predicate invariant''14 [@inline:trivial] (self: MutBorrow.t t_List) = inv'17 self.current /\ inv'17 self.final
  
  meta "rewrite_def" predicate invariant''14
  
  predicate inv'18 [@inline:trivial] (_1: MutBorrow.t t_List) = invariant''14 _1
  
  meta "rewrite_def" predicate inv'18
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t t_List) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'2
  
  let rec new'1 (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  function seq_map (s: Seq.seq t_PtrOwn) (f: Map.map t_PtrOwn t_T) : Seq.seq t_T =
    Seq.create (Seq.length s) (fun (i: int) -> Map.get f (Seq.get s i))
  
  function view (self: t_List) : Seq.seq t_T =
    seq_map self.t_List__seq (fun (ptr_own: t_PtrOwn) -> (val' ptr_own).t_Cell__v)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec push_back (self: MutBorrow.t t_List) (x: t_T) (return (x'0: ())) =
    {[@expl:push_back 'self' type invariant] inv'18 self}
    {[@expl:push_back 'x' type invariant] inv x}
    (! bb0
    [ bb0 = s0 [ s0 = null (fun (_ret: Opaque.ptr) -> [ &_7 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_5 <- { t_Cell__v = x; t_Cell__next = _7 } ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &cell <- _5 ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = from_box {cell} (fun (_ret: tuple) -> [ &_10 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &cell_ptr <- _10.f0 ] s1
      | s1 = [ &cell_own <- _10.f1 ] s2
      | s2 = is_null {self.current.t_List__last} (fun (_ret: bool) -> [ &_13 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = any [ br0 -> {_13 = false} (! bb7) | br1 -> {_13} (! bb6) ]
    | bb6 = s0
      [ s0 = [ &self <- { self with current = { self.current with t_List__first = cell_ptr } } ] s1
      | s1 = [ &self <- { self with current = { self.current with t_List__last = cell_ptr } } ] s2
      | s2 = bb18 ]
    | bb7 = s0
      [ s0 = [ &_19 <- self.current.t_List__last ] s1
      | s1 = deref {self.current.t_List__seq} (fun (_ret: Seq.seq t_PtrOwn) -> [ &_27 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0 [ s0 = len_ghost {_27} (fun (_ret: int) -> [ &_25 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0 [ s0 = new {(1: Int128.t)} (fun (_ret: int) -> [ &_30 <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0 [ s0 = into_inner {_30} (fun (_ret: int) -> [ &_29 <- _ret ] s1) | s1 = bb11 ]
    | bb11 = s0 [ s0 = sub {_25} {_29} (fun (_ret: int) -> [ &off <- _ret ] s1) | s1 = bb12 ]
    | bb12 = s0
      [ s0 = {inv'8 self.current.t_List__seq}
        MutBorrow.borrow_mut <Seq.seq t_PtrOwn> {self.current.t_List__seq}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) ->
            [ &_35 <- _ret ] -{inv'8 _ret.final}-
            [ &self <- { self with current = { self.current with t_List__seq = _ret.final } } ] s1)
      | s1 = deref_mut {_35} (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) -> [ &_34 <- _ret ] s2)
      | s2 = bb13 ]
    | bb13 = s0
      [ s0 = {inv'7 _34.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn> {_34.current} {MutBorrow.get_id _34}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) ->
            [ &_33 <- _ret ] -{inv'7 _ret.final}-
            [ &_34 <- { _34 with current = _ret.final } ] s1)
      | s1 = get_mut_ghost {_33} {off} (fun (_ret: t_Option) -> [ &_32 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = s0 [ s0 = unwrap {_32} (fun (_ret: MutBorrow.t t_PtrOwn) -> [ &_31 <- _ret ] s1) | s1 = bb15 ]
    | bb15 = s0
      [ s0 = {inv'3 _31.current}
        MutBorrow.borrow_final <t_PtrOwn> {_31.current} {MutBorrow.get_id _31}
          (fun (_ret: MutBorrow.t t_PtrOwn) ->
            [ &_23 <- _ret ] -{inv'3 _ret.final}-
            [ &_31 <- { _31 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv'12 _34} s2
      | s2 = -{resolve _34}- s3
      | s3 = {[@expl:type invariant] inv'13 _31} s4
      | s4 = -{resolve'0 _31}- s5
      | s5 = {inv'3 _23.current}
        MutBorrow.borrow_final <t_PtrOwn> {_23.current} {MutBorrow.get_id _23}
          (fun (_ret: MutBorrow.t t_PtrOwn) ->
            [ &_22 <- _ret ] -{inv'3 _ret.final}-
            [ &_23 <- { _23 with current = _ret.final } ] s6)
      | s6 = new'0 {_22} (fun (_ret: MutBorrow.t t_PtrOwn) -> [ &_21 <- _ret ] s7)
      | s7 = bb16 ]
    | bb16 = s0
      [ s0 = {[@expl:type invariant] inv'13 _23} s1
      | s1 = -{resolve'0 _23}- s2
      | s2 = as_mut {_19} {_21} (fun (_ret: MutBorrow.t t_Cell) -> [ &_18 <- _ret ] s3)
      | s3 = bb17 ]
    | bb17 = s0
      [ s0 = {inv'0 _18.current}
        MutBorrow.borrow_final <t_Cell> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret: MutBorrow.t t_Cell) ->
            [ &cell_last <- _ret ] -{inv'0 _ret.final}-
            [ &_18 <- { _18 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv'16 _18} s2
      | s2 = -{resolve'1 _18}- s3
      | s3 = [ &cell_last <- { cell_last with current = { cell_last.current with t_Cell__next = cell_ptr } } ] s4
      | s4 = {[@expl:type invariant] inv'16 cell_last} s5
      | s5 = -{resolve'1 cell_last}- s6
      | s6 = [ &self <- { self with current = { self.current with t_List__last = cell_ptr } } ] s7
      | s7 = bb18 ]
    | bb18 = s0
      [ s0 = {inv'8 self.current.t_List__seq}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn> {self.current.t_List__seq}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 3}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) ->
            [ &_43 <- _ret ] -{inv'8 _ret.final}-
            [ &self <- { self with current = { self.current with t_List__seq = _ret.final } } ] s1)
      | s1 = deref_mut {_43} (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) -> [ &_42 <- _ret ] s2)
      | s2 = bb19 ]
    | bb19 = s0 [ s0 = into_inner'0 {cell_own} (fun (_ret: t_PtrOwn) -> [ &_44 <- _ret ] s1) | s1 = bb20 ]
    | bb20 = s0
      [ s0 = {inv'7 _42.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn> {_42.current} {MutBorrow.get_id _42}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) ->
            [ &_41 <- _ret ] -{inv'7 _ret.final}-
            [ &_42 <- { _42 with current = _ret.final } ] s1)
      | s1 = push_back_ghost {_41} {_44} (fun (_ret: ()) -> [ &_40 <- _ret ] s2)
      | s2 = bb21 ]
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'12 _42} s1
      | s1 = -{resolve _42}- s2
      | s2 = {[@expl:type invariant] inv'18 self} s3
      | s3 = -{resolve'2 self}- s4
      | s4 = new'1 {_40} (fun (_ret: ()) -> [ &_39 <- _ret ] s5)
      | s5 = bb24 ]
    | bb24 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_List = self
    | & x: t_T = x
    | & cell: t_Cell = Any.any_l ()
    | & _5: t_Cell = Any.any_l ()
    | & _7: Opaque.ptr = Any.any_l ()
    | & cell_ptr: Opaque.ptr = Any.any_l ()
    | & cell_own: t_PtrOwn = Any.any_l ()
    | & _10: tuple = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & cell_last: MutBorrow.t t_Cell = Any.any_l ()
    | & _18: MutBorrow.t t_Cell = Any.any_l ()
    | & _19: Opaque.ptr = Any.any_l ()
    | & _21: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _22: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _23: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & off: int = Any.any_l ()
    | & _25: int = Any.any_l ()
    | & _27: Seq.seq t_PtrOwn = Any.any_l ()
    | & _29: int = Any.any_l ()
    | & _30: int = Any.any_l ()
    | & _31: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _32: t_Option = Any.any_l ()
    | & _33: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _34: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _35: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _39: () = Any.any_l ()
    | & _40: () = Any.any_l ()
    | & _41: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _42: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _43: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _44: t_PtrOwn = Any.any_l () ])
    [ return (result: ()) -> {[@expl:push_back ensures] view self.final = Seq.snoc (view self.current) x}
      (! return {result}) ]
end
module M_linked_list__qyi10858349784728989480__push_front (* List<T> *)
  use creusot.prelude.Opaque
  use seq.Seq
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.int.Int64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use map.Map
  
  type t_PtrOwn
  
  type t_List = { t_List__first: Opaque.ptr; t_List__last: Opaque.ptr; t_List__seq: Seq.seq t_PtrOwn }
  
  type t_T
  
  type t_Cell = { t_Cell__v: t_T; t_Cell__next: Opaque.ptr }
  
  type tuple = { f0: Opaque.ptr; f1: t_PtrOwn }
  
  predicate inv (_1: t_T)
  
  predicate inv'0 (_1: t_Cell)
  
  axiom inv_axiom [@rewrite]: forall x: t_Cell [inv'0 x]. inv'0 x = inv x.t_Cell__v
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches [@inline:trivial] (_value: t_Cell) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : t_Cell
  
  function metadata_logic (_1: Opaque.ptr) : ()
  
  constant size_of_Cell_T : int
  
  axiom size_of_Cell_T_spec: 0 <= size_of_Cell_T
  
  function size_of_val_logic [@inline:trivial] (val''0: t_Cell) : int = size_of_Cell_T
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: t_Cell. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate invariant' [@inline:trivial] (self: t_Cell) = inv'0 self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 [@inline:trivial] (_1: t_Cell) = invariant' _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''0 (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv'1 (val' self)
  
  predicate inv'2 (_1: t_PtrOwn)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: t_PtrOwn) = inv'2 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'3 [@inline:trivial] (_1: t_PtrOwn) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate inv'4 [@inline:trivial] (_1: tuple) = inv'3 _1.f1
  
  meta "rewrite_def" predicate inv'4
  
  let rec new (v: t_Cell) (return (x: tuple)) = {[@expl:new 'v' type invariant] inv'0 v}
    any
    [ return (result: tuple) -> {inv'4 result} {ptr result.f1 = result.f0 /\ val' result.f1 = v} (! return {result}) ]
  
  let rec is_null (self_: Opaque.ptr) (return (x: bool)) = any
    [ return (result: bool) -> {result = is_null_logic self_} (! return {result}) ]
  
  predicate invariant''2 (self: t_PtrOwn) = inv'2 self
  
  predicate inv'5 [@inline:trivial] (_1: t_PtrOwn) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'5
  
  predicate invariant''3 [@inline:trivial] (self: Seq.seq t_PtrOwn) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'5 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'6 [@inline:trivial] (_1: Seq.seq t_PtrOwn) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'6
  
  predicate invariant''4 [@inline:trivial] (self: Seq.seq t_PtrOwn) = inv'6 self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'7 [@inline:trivial] (_1: Seq.seq t_PtrOwn) = invariant''4 _1
  
  meta "rewrite_def" predicate inv'7
  
  predicate invariant''5 [@inline:trivial] (self: MutBorrow.t (Seq.seq t_PtrOwn)) =
    inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'8 [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn)) = invariant''5 _1
  
  meta "rewrite_def" predicate inv'8
  
  predicate invariant''6 [@inline:trivial] (self: MutBorrow.t (Seq.seq t_PtrOwn)) =
    inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'9 [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn)) = invariant''6 _1
  
  meta "rewrite_def" predicate inv'9
  
  let rec deref_mut (self: MutBorrow.t (Seq.seq t_PtrOwn)) (return (x: MutBorrow.t (Seq.seq t_PtrOwn))) =
    {[@expl:deref_mut 'self' type invariant] inv'8 self}
    any [ return (result: MutBorrow.t (Seq.seq t_PtrOwn)) -> {inv'9 result} {result = self} (! return {result}) ]
  
  let rec into_inner (self: t_PtrOwn) (return (x: t_PtrOwn)) = {[@expl:into_inner 'self' type invariant] inv'3 self}
    any [ return (result: t_PtrOwn) -> {inv'2 result} {result = self} (! return {result}) ]
  
  function push_front [@inline:trivial] (self: Seq.seq t_PtrOwn) (x: t_PtrOwn) : Seq.seq t_PtrOwn = Seq.cons x self
  
  meta "rewrite_def" function push_front
  
  let rec push_front_ghost (self: MutBorrow.t (Seq.seq t_PtrOwn)) (x: t_PtrOwn) (return (x'0: ())) =
    {[@expl:push_front_ghost 'self' type invariant] inv'9 self}
    {[@expl:push_front_ghost 'x' type invariant] inv'2 x}
    any [ return (result: ()) -> {self.final = push_front self.current x} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate invariant''7 (self: t_List) =
    self.t_List__seq = (Seq.empty: Seq.seq t_PtrOwn)
      /\ is_null_logic self.t_List__first /\ is_null_logic self.t_List__last
    \/ Seq.length self.t_List__seq > 0
    /\ self.t_List__first = ptr (Seq.get self.t_List__seq 0)
    /\ self.t_List__last = ptr (Seq.get self.t_List__seq (Seq.length self.t_List__seq - 1))
    /\ (forall i: int. 0 <= i /\ i < Seq.length self.t_List__seq - 1
        -> (val' (Seq.get self.t_List__seq i)).t_Cell__next = ptr (Seq.get self.t_List__seq (i + 1)))
    /\ is_null_logic (val' (Seq.get self.t_List__seq (Seq.length self.t_List__seq - 1))).t_Cell__next
  
  predicate inv'10 (_1: t_List)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'10 x]. inv'10 x = (invariant''7 x /\ inv'7 x.t_List__seq)
  
  predicate invariant''8 [@inline:trivial] (self: MutBorrow.t t_List) = inv'10 self.current /\ inv'10 self.final
  
  meta "rewrite_def" predicate invariant''8
  
  predicate inv'11 [@inline:trivial] (_1: MutBorrow.t t_List) = invariant''8 _1
  
  meta "rewrite_def" predicate inv'11
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_List) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  let rec new'0 (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  function seq_map (s: Seq.seq t_PtrOwn) (f: Map.map t_PtrOwn t_T) : Seq.seq t_T =
    Seq.create (Seq.length s) (fun (i: int) -> Map.get f (Seq.get s i))
  
  function view (self: t_List) : Seq.seq t_T =
    seq_map self.t_List__seq (fun (ptr_own: t_PtrOwn) -> (val' ptr_own).t_Cell__v)
  
  function push_front'0 [@inline:trivial] (self: Seq.seq t_T) (x: t_T) : Seq.seq t_T = Seq.cons x self
  
  meta "rewrite_def" function push_front'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec push_front'1 (self: MutBorrow.t t_List) (x: t_T) (return (x'0: ())) =
    {[@expl:push_front 'self' type invariant] inv'11 self}
    {[@expl:push_front 'x' type invariant] inv x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_7 <- { t_Cell__v = x; t_Cell__next = self.current.t_List__first } ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = new {_7} (fun (_ret: tuple) -> [ &_6 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &cell_ptr <- _6.f0 ] s1
      | s1 = [ &cell_own <- _6.f1 ] s2
      | s2 = [ &self <- { self with current = { self.current with t_List__first = cell_ptr } } ] s3
      | s3 = is_null {self.current.t_List__last} (fun (_ret: bool) -> [ &_12 <- _ret ] s4)
      | s4 = bb3 ]
    | bb3 = any [ br0 -> {_12 = false} (! bb6) | br1 -> {_12} (! bb4) ]
    | bb4 = s0 [ s0 = [ &self <- { self with current = { self.current with t_List__last = cell_ptr } } ] s1 | s1 = bb6 ]
    | bb6 = s0
      [ s0 = {inv'7 self.current.t_List__seq}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn> {self.current.t_List__seq}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 3}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) ->
            [ &_19 <- _ret ] -{inv'7 _ret.final}-
            [ &self <- { self with current = { self.current with t_List__seq = _ret.final } } ] s1)
      | s1 = deref_mut {_19} (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) -> [ &_18 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0 [ s0 = into_inner {cell_own} (fun (_ret: t_PtrOwn) -> [ &_20 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0
      [ s0 = {inv'6 _18.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn)) ->
            [ &_17 <- _ret ] -{inv'6 _ret.final}-
            [ &_18 <- { _18 with current = _ret.final } ] s1)
      | s1 = push_front_ghost {_17} {_20} (fun (_ret: ()) -> [ &_16 <- _ret ] s2)
      | s2 = bb9 ]
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'9 _18} s1
      | s1 = -{resolve _18}- s2
      | s2 = {[@expl:type invariant] inv'11 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 = new'0 {_16} (fun (_ret: ()) -> [ &_15 <- _ret ] s5)
      | s5 = bb11 ]
    | bb11 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_List = self
    | & x: t_T = x
    | & cell_ptr: Opaque.ptr = Any.any_l ()
    | & cell_own: t_PtrOwn = Any.any_l ()
    | & _6: tuple = Any.any_l ()
    | & _7: t_Cell = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _15: () = Any.any_l ()
    | & _16: () = Any.any_l ()
    | & _17: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _18: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _19: MutBorrow.t (Seq.seq t_PtrOwn) = Any.any_l ()
    | & _20: t_PtrOwn = Any.any_l () ])
    [ return (result: ()) -> {[@expl:push_front ensures] view self.final = push_front'0 (view self.current) x}
      (! return {result}) ]
end
