module M_foo
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec closure0 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = Int32.add {x} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  type t_FnGhostWrapper_closure0 = { f0: () }
  
  function view_FnGhostWrapper_closure0 [@inline:trivial] (self: t_FnGhostWrapper_closure0) : () = self.f0
  
  meta "rewrite_def" function view_FnGhostWrapper_closure0
  
  let rec __new_closure0 (f: ()) (return (x: t_FnGhostWrapper_closure0)) = any
    [ return (result: t_FnGhostWrapper_closure0) -> {view_FnGhostWrapper_closure0 result = f} (! return {result}) ]
  
  predicate precondition_closure0 [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure0'pre self x
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate precondition_FnGhostWrapper_closure0 [@inline:trivial] (self: t_FnGhostWrapper_closure0) (args: Int32.t) =
    precondition_closure0 self.f0 args
  
  meta "rewrite_def" predicate precondition_FnGhostWrapper_closure0
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let x = args in closure0'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  predicate resolve_closure0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_closure0
  
  predicate postcondition_mut_closure0 [@inline:trivial] (self: ()) (args: Int32.t) (result_state: ()) (result: Int32.t) =
    let x = args in closure0'post'return self x result /\ self = result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure0
  
  function fn_mut_once_closure0 (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_closure0_spec:
    forall self: (), args: Int32.t, res: Int32.t. postcondition_once_closure0 self args res
      = (exists res_state: (). postcondition_mut_closure0 self args res_state res /\ resolve_closure0 res_state)
  
  predicate hist_inv_closure0 [@inline:trivial] (self: ()) (result_state: ()) = self = result_state
  
  meta "rewrite_def" predicate hist_inv_closure0
  
  function hist_inv_trans_closure0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_closure0_spec: forall self: (), b: (), c: (). hist_inv_closure0 self b
      -> hist_inv_closure0 b c -> hist_inv_closure0 self c
  
  function hist_inv_refl_closure0 (self: ()) : ()
  
  axiom hist_inv_refl_closure0_spec: forall self: (). hist_inv_closure0 self self
  
  function postcondition_mut_hist_inv_closure0 (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure0_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut_closure0 self args res_state res
      -> hist_inv_closure0 self res_state
  
  function fn_hist_inv_closure0 (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_closure0_spec: forall self: (), res_state: (). hist_inv_closure0 self res_state = (self = res_state)
  
  predicate postcondition_closure0 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let x = args in closure0'post'return self x result
  
  meta "rewrite_def" predicate postcondition_closure0
  
  function fn_once_closure0 (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_closure0_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once_closure0 self args res
      = (postcondition_closure0 self args res /\ resolve_closure0 self)
  
  function fn_mut_closure0 (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_closure0_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut_closure0 self args res_state res
      = (postcondition_closure0 self args res /\ self = res_state)
  
  predicate postcondition_once_FnGhostWrapper_closure0 [@inline:trivial] (self: t_FnGhostWrapper_closure0) (args: Int32.t) (result: Int32.t) =
    postcondition_closure0 self.f0 args result
  
  meta "rewrite_def" predicate postcondition_once_FnGhostWrapper_closure0
  
  predicate resolve_FnGhostWrapper_closure0 [@inline:trivial] (_1: t_FnGhostWrapper_closure0) = true
  
  meta "rewrite_def" predicate resolve_FnGhostWrapper_closure0
  
  predicate postcondition_mut_FnGhostWrapper_closure0 [@inline:trivial] (self: t_FnGhostWrapper_closure0) (args: Int32.t) (result_state: t_FnGhostWrapper_closure0) (result: Int32.t) =
    postcondition_closure0 self.f0 args result /\ self = result_state
  
  meta "rewrite_def" predicate postcondition_mut_FnGhostWrapper_closure0
  
  function fn_mut_once_FnGhostWrapper_closure0 (self: t_FnGhostWrapper_closure0) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_FnGhostWrapper_closure0_spec:
    forall self: t_FnGhostWrapper_closure0, args: Int32.t, res: Int32.t. postcondition_once_FnGhostWrapper_closure0 self args res
      = (exists res_state: t_FnGhostWrapper_closure0. postcondition_mut_FnGhostWrapper_closure0 self args res_state res
        /\ resolve_FnGhostWrapper_closure0 res_state)
  
  predicate hist_inv_FnGhostWrapper_closure0 (self: t_FnGhostWrapper_closure0) (result_state: t_FnGhostWrapper_closure0)
  
  function hist_inv_trans_FnGhostWrapper_closure0 (self: t_FnGhostWrapper_closure0) (b: t_FnGhostWrapper_closure0) (c: t_FnGhostWrapper_closure0) : ()
  
  axiom hist_inv_trans_FnGhostWrapper_closure0_spec:
    forall self: t_FnGhostWrapper_closure0, b: t_FnGhostWrapper_closure0, c: t_FnGhostWrapper_closure0. hist_inv_FnGhostWrapper_closure0 self b
      -> hist_inv_FnGhostWrapper_closure0 b c -> hist_inv_FnGhostWrapper_closure0 self c
  
  function hist_inv_refl_FnGhostWrapper_closure0 (self: t_FnGhostWrapper_closure0) : ()
  
  axiom hist_inv_refl_FnGhostWrapper_closure0_spec:
    forall self: t_FnGhostWrapper_closure0. hist_inv_FnGhostWrapper_closure0 self self
  
  function postcondition_mut_hist_inv_FnGhostWrapper_closure0 (self: t_FnGhostWrapper_closure0) (args: Int32.t) (res_state: t_FnGhostWrapper_closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_FnGhostWrapper_closure0_spec:
    forall self: t_FnGhostWrapper_closure0, args: Int32.t, res_state: t_FnGhostWrapper_closure0, res: Int32.t. postcondition_mut_FnGhostWrapper_closure0 self args res_state res
      -> hist_inv_FnGhostWrapper_closure0 self res_state
  
  function fn_hist_inv_FnGhostWrapper_closure0 (self: t_FnGhostWrapper_closure0) (res_state: t_FnGhostWrapper_closure0) : ()
  
  axiom fn_hist_inv_FnGhostWrapper_closure0_spec:
    forall self: t_FnGhostWrapper_closure0, res_state: t_FnGhostWrapper_closure0. hist_inv_FnGhostWrapper_closure0 self res_state
      = (self = res_state)
  
  predicate postcondition_FnGhostWrapper_closure0 [@inline:trivial] (self: t_FnGhostWrapper_closure0) (args: Int32.t) (result: Int32.t) =
    postcondition_closure0 self.f0 args result
  
  meta "rewrite_def" predicate postcondition_FnGhostWrapper_closure0
  
  function fn_once_FnGhostWrapper_closure0 (self: t_FnGhostWrapper_closure0) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_FnGhostWrapper_closure0_spec:
    forall self: t_FnGhostWrapper_closure0, args: Int32.t, res: Int32.t. postcondition_once_FnGhostWrapper_closure0 self args res
      = (postcondition_FnGhostWrapper_closure0 self args res /\ resolve_FnGhostWrapper_closure0 self)
  
  function fn_mut_FnGhostWrapper_closure0 (self: t_FnGhostWrapper_closure0) (args: Int32.t) (res_state: t_FnGhostWrapper_closure0) (res: Int32.t) : ()
  
  axiom fn_mut_FnGhostWrapper_closure0_spec:
    forall self: t_FnGhostWrapper_closure0, args: Int32.t, res_state: t_FnGhostWrapper_closure0, res: Int32.t. postcondition_mut_FnGhostWrapper_closure0 self args res_state res
      = (postcondition_FnGhostWrapper_closure0 self args res /\ self = res_state)
  
  let rec takes_ghost_fn_FnGhostWrapper_closure0 (f: t_FnGhostWrapper_closure0) (return (x: Int32.t)) =
    {[@expl:takes_ghost_fn requires] precondition_FnGhostWrapper_closure0 f (1: Int32.t)}
    any
    [ return (result: Int32.t) -> {postcondition_FnGhostWrapper_closure0 f (1: Int32.t) result} (! return {result}) ]
  
  let rec takes_ghost_fnmut_FnGhostWrapper_closure0 (f: t_FnGhostWrapper_closure0) (return (x: Int32.t)) =
    {[@expl:takes_ghost_fnmut requires] precondition_FnGhostWrapper_closure0 f (1: Int32.t)}
    any
    [ return (result: Int32.t) ->
    {exists f2: t_FnGhostWrapper_closure0. postcondition_mut_FnGhostWrapper_closure0 f (1: Int32.t) f2 result}
      (! return {result}) ]
  
  let rec takes_ghost_fnonce_FnGhostWrapper_closure0 (f: t_FnGhostWrapper_closure0) (return (x: Int32.t)) =
    {[@expl:takes_ghost_fnonce requires] precondition_FnGhostWrapper_closure0 f (1: Int32.t)}
    any
    [ return (result: Int32.t) -> {postcondition_once_FnGhostWrapper_closure0 f (1: Int32.t) result}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- () ] s1
      | s1 = __new_closure0 {_2} (fun (_ret: t_FnGhostWrapper_closure0) -> [ &f <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = takes_ghost_fn_FnGhostWrapper_closure0 {f} (fun (_ret: Int32.t) -> [ &result <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_6 <- result = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_6 = false} (! bb4) | br1 -> {_6} (! bb3) ] ]
    | bb3 = s0
      [ s0 = takes_ghost_fnmut_FnGhostWrapper_closure0 {f} (fun (_ret: Int32.t) -> [ &result'0 <- _ret ] s1)
      | s1 = bb5 ]
    | bb5 = s0
      [ s0 = [ &_12 <- result'0 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_12 = false} (! bb7) | br1 -> {_12} (! bb6) ] ]
    | bb6 = s0
      [ s0 = takes_ghost_fnonce_FnGhostWrapper_closure0 {f} (fun (_ret: Int32.t) -> [ &result'1 <- _ret ] s1)
      | s1 = bb8 ]
    | bb8 = s0
      [ s0 = [ &_18 <- result'1 = (2: Int32.t) ] s1
      | s1 = any [ br0 -> {_18 = false} (! bb10) | br1 -> {_18} (! bb9) ] ]
    | bb9 = return {_0}
    | bb10 = {false} any
    | bb7 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & f: t_FnGhostWrapper_closure0 = Any.any_l ()
    | & _2: () = Any.any_l ()
    | & result: Int32.t = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & result'0: Int32.t = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & result'1: Int32.t = Any.any_l ()
    | & _18: bool = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_takes_ghost_fn
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv_F (_1: t_F)
  
  predicate resolve_F (_1: t_F)
  
  predicate invariant_ref_F [@inline:trivial] (self: t_F) = inv_F self
  
  meta "rewrite_def" predicate invariant_ref_F
  
  predicate inv_ref_F [@inline:trivial] (_1: t_F) = invariant_ref_F _1
  
  meta "rewrite_def" predicate inv_ref_F
  
  predicate precondition_F (self: t_F) (args: Int32.t)
  
  predicate postcondition_once_F (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate postcondition_mut_F (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once_F (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: Int32.t, res: Int32.t. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  function fn_hist_inv_F (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_F_spec: forall self: t_F, res_state: t_F. hist_inv_F self res_state = (self = res_state)
  
  predicate postcondition_F (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once_F (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_F_spec: forall self: t_F, args: Int32.t, res: Int32.t. postcondition_once_F self args res
      = (postcondition_F self args res /\ resolve_F self)
  
  function fn_mut_F (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_F_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. postcondition_mut_F self args res_state res
      = (postcondition_F self args res /\ self = res_state)
  
  let rec call_F (self_: t_F) (arg: Int32.t) (return (x: Int32.t)) =
    {[@expl:call 'self_' type invariant] inv_ref_F self_}
    {[@expl:call requires] precondition_F self_ arg}
    any [ return (result: Int32.t) -> {postcondition_F self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ghost_fn_F (f: t_F) (return (x: Int32.t)) = {[@expl:takes_ghost_fn 'f' type invariant] inv_F f}
    {[@expl:takes_ghost_fn requires] precondition_F f (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv_F f} s1
      | s1 = -{resolve_F f}- s2
      | s2 = [ &_5 <- (1: Int32.t) ] s3
      | s3 = call_F {f} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s4)
      | s4 = bb2 ]
    | bb2 = return {_0} ] [ & _0: Int32.t = Any.any_l () | & f: t_F = f | & _5: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:takes_ghost_fn ensures] postcondition_F f (1: Int32.t) result}
      (! return {result}) ]
end
module M_takes_ghost_fnmut
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv_F (_1: t_F)
  
  predicate invariant_ref_F [@inline:trivial] (self: MutBorrow.t t_F) = inv_F self.current /\ inv_F self.final
  
  meta "rewrite_def" predicate invariant_ref_F
  
  predicate inv_ref_F [@inline:trivial] (_1: MutBorrow.t t_F) = invariant_ref_F _1
  
  meta "rewrite_def" predicate inv_ref_F
  
  predicate precondition_F (self: t_F) (args: Int32.t)
  
  predicate postcondition_once_F (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once_F (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: Int32.t, res: Int32.t. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  let rec call_mut_F (self_: MutBorrow.t t_F) (arg: Int32.t) (return (x: Int32.t)) =
    {[@expl:call_mut 'self_' type invariant] inv_ref_F self_}
    {[@expl:call_mut requires] precondition_F self_.current arg}
    any [ return (result: Int32.t) -> {postcondition_mut_F self_.current arg self_.final result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ghost_fnmut_F (f: t_F) (return (x: Int32.t)) = {[@expl:takes_ghost_fnmut 'f' type invariant] inv_F f}
    {[@expl:takes_ghost_fnmut requires] precondition_F f (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_F f}
        MutBorrow.borrow_mut <t_F> {f}
          (fun (_ret: MutBorrow.t t_F) -> [ &_4 <- _ret ] -{inv_F _ret.final}- [ &f <- _ret.final ] s1)
      | s1 = [ &_5 <- (1: Int32.t) ] s2
      | s2 = call_mut_F {_4} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv_F f} s1 | s1 = -{resolve_F f}- s2 | s2 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & f: t_F = f
    | & _4: MutBorrow.t t_F = Any.any_l ()
    | & _5: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) ->
    {[@expl:takes_ghost_fnmut ensures] exists f2: t_F. postcondition_mut_F f (1: Int32.t) f2 result}
      (! return {result}) ]
end
module M_takes_ghost_fnonce
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv_F (_1: t_F)
  
  predicate precondition_F (self: t_F) (args: Int32.t)
  
  predicate postcondition_once_F (self: t_F) (args: Int32.t) (result: Int32.t)
  
  let rec call_once_F (self_: t_F) (arg: Int32.t) (return (x: Int32.t)) =
    {[@expl:call_once 'self_' type invariant] inv_F self_}
    {[@expl:call_once requires] precondition_F self_ arg}
    any [ return (result: Int32.t) -> {postcondition_once_F self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ghost_fnonce_F (f: t_F) (return (x: Int32.t)) = {[@expl:takes_ghost_fnonce 'f' type invariant] inv_F f}
    {[@expl:takes_ghost_fnonce requires] precondition_F f (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- (1: Int32.t) ] s1
      | s1 = call_once_F {f} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = return {_0} ] [ & _0: Int32.t = Any.any_l () | & f: t_F = f | & _5: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:takes_ghost_fnonce ensures] postcondition_once_F f (1: Int32.t) result}
      (! return {result}) ]
end
