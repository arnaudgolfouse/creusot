module M_multi_use
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_T
  
  type closure0 = { c0: t_T }
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate invariant_ref_ref_T [@inline:trivial] (self: t_T) = inv_ref_T self
  
  meta "rewrite_def" predicate invariant_ref_ref_T
  
  predicate inv_ref_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_ref_T
  
  predicate inv_closure0 [@inline:trivial] (_1: closure0) = let {c0 = x0} = _1 in inv_ref_ref_T x0
  
  meta "rewrite_def" predicate inv_closure0
  
  predicate invariant_ref_closure0 [@inline:trivial] (self: closure0) = inv_closure0 self
  
  meta "rewrite_def" predicate invariant_ref_closure0
  
  predicate inv_ref_closure0 [@inline:trivial] (_1: closure0) = invariant_ref_closure0 _1
  
  meta "rewrite_def" predicate inv_ref_closure0
  
  let rec closure0 (self: closure0) (return (x: UInt32.t)) =
    {[@expl:closure 'self' type invariant] inv_ref_closure0 self}
    {[@expl:closure requires] self.c0 = self.c0}
    (! bb0
    [ bb0 = s0 [ s0 = [ &res <- (0: UInt32.t) ] s1 | s1 = [ &_0 <- res ] s2 | s2 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l () | & res: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> (! return {result}) ]
  
  predicate precondition_closure0 [@inline:trivial] (self: closure0) (args: ()) = self.c0 = self.c0
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: ()) (result: UInt32.t) = true
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  predicate resolve_closure0 [@inline:trivial] (_1: closure0) = true
  
  meta "rewrite_def" predicate resolve_closure0
  
  predicate hist_inv_closure0 [@inline:trivial] (self: closure0) (result_state: closure0) = self = result_state
  
  meta "rewrite_def" predicate hist_inv_closure0
  
  predicate postcondition_mut_closure0 [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: UInt32.t) =
    hist_inv_closure0 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure0
  
  function fn_mut_once_closure0 (self: closure0) (args: ()) (res: UInt32.t) : ()
  
  axiom fn_mut_once_closure0_spec:
    forall self: closure0, args: (), res: UInt32.t. postcondition_once_closure0 self args res
      = (exists res_state: closure0. postcondition_mut_closure0 self args res_state res /\ resolve_closure0 res_state)
  
  function hist_inv_trans_closure0 (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_closure0_spec: forall self: closure0, b: closure0, c: closure0. hist_inv_closure0 self b
      -> hist_inv_closure0 b c -> hist_inv_closure0 self c
  
  function hist_inv_refl_closure0 (self: closure0) : ()
  
  axiom hist_inv_refl_closure0_spec: forall self: closure0. hist_inv_closure0 self self
  
  function postcondition_mut_hist_inv_closure0 (self: closure0) (args: ()) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure0_spec:
    forall self: closure0, args: (), res_state: closure0, res: UInt32.t. postcondition_mut_closure0 self args res_state res
      -> hist_inv_closure0 self res_state
  
  function fn_hist_inv_closure0 (self: closure0) (res_state: closure0) : ()
  
  axiom fn_hist_inv_closure0_spec: forall self: closure0, res_state: closure0. hist_inv_closure0 self res_state
      = (self = res_state)
  
  predicate postcondition_closure0 [@inline:trivial] (self: closure0) (args: ()) (result: UInt32.t) = true
  
  meta "rewrite_def" predicate postcondition_closure0
  
  function fn_once_closure0 (self: closure0) (args: ()) (res: UInt32.t) : ()
  
  axiom fn_once_closure0_spec: forall self: closure0, args: (), res: UInt32.t. postcondition_once_closure0 self args res
      = (postcondition_closure0 self args res /\ resolve_closure0 self)
  
  function fn_mut_closure0 (self: closure0) (args: ()) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom fn_mut_closure0_spec:
    forall self: closure0, args: (), res_state: closure0, res: UInt32.t. postcondition_mut_closure0 self args res_state res
      = (postcondition_closure0 self args res /\ self = res_state)
  
  predicate postcondition_once_ref_closure0 [@inline:trivial] (self: closure0) (args: ()) (result: UInt32.t) =
    postcondition_closure0 self args result
  
  meta "rewrite_def" predicate postcondition_once_ref_closure0
  
  predicate resolve_ref_closure0 [@inline:trivial] (_1: closure0) = true
  
  meta "rewrite_def" predicate resolve_ref_closure0
  
  predicate postcondition_mut_ref_closure0 [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: UInt32.t) =
    postcondition_closure0 self args result /\ self = result_state
  
  meta "rewrite_def" predicate postcondition_mut_ref_closure0
  
  function fn_mut_once_ref_closure0 (self: closure0) (args: ()) (res: UInt32.t) : ()
  
  axiom fn_mut_once_ref_closure0_spec:
    forall self: closure0, args: (), res: UInt32.t. postcondition_once_ref_closure0 self args res
      = (exists res_state: closure0. postcondition_mut_ref_closure0 self args res_state res
        /\ resolve_ref_closure0 res_state)
  
  predicate hist_inv_ref_closure0 [@inline:trivial] (self: closure0) (result_state: closure0) = self = result_state
  
  meta "rewrite_def" predicate hist_inv_ref_closure0
  
  function hist_inv_trans_ref_closure0 (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_ref_closure0_spec: forall self: closure0, b: closure0, c: closure0. hist_inv_ref_closure0 self b
      -> hist_inv_ref_closure0 b c -> hist_inv_ref_closure0 self c
  
  function hist_inv_refl_ref_closure0 (self: closure0) : ()
  
  axiom hist_inv_refl_ref_closure0_spec: forall self: closure0. hist_inv_ref_closure0 self self
  
  function postcondition_mut_hist_inv_ref_closure0 (self: closure0) (args: ()) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_ref_closure0_spec:
    forall self: closure0, args: (), res_state: closure0, res: UInt32.t. postcondition_mut_ref_closure0 self args res_state res
      -> hist_inv_ref_closure0 self res_state
  
  function fn_hist_inv_ref_closure0 (self: closure0) (res_state: closure0) : ()
  
  axiom fn_hist_inv_ref_closure0_spec: forall self: closure0, res_state: closure0. hist_inv_ref_closure0 self res_state
      = (self = res_state)
  
  predicate postcondition_ref_closure0 [@inline:trivial] (self: closure0) (args: ()) (result: UInt32.t) =
    postcondition_closure0 self args result
  
  meta "rewrite_def" predicate postcondition_ref_closure0
  
  function fn_once_ref_closure0 (self: closure0) (args: ()) (res: UInt32.t) : ()
  
  axiom fn_once_ref_closure0_spec:
    forall self: closure0, args: (), res: UInt32.t. postcondition_once_ref_closure0 self args res
      = (postcondition_ref_closure0 self args res /\ resolve_ref_closure0 self)
  
  function fn_mut_ref_closure0 (self: closure0) (args: ()) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom fn_mut_ref_closure0_spec:
    forall self: closure0, args: (), res_state: closure0, res: UInt32.t. postcondition_mut_ref_closure0 self args res_state res
      = (postcondition_ref_closure0 self args res /\ self = res_state)
  
  let rec uses_fn_closure0 (f: closure0) (return (x: ())) = {[@expl:uses_fn 'f' type invariant] inv_closure0 f}
    {[@expl:uses_fn requires] precondition_closure0 f ()}
    any
    [ return (result: ()) -> {exists f2: closure0, r: UInt32.t. f2 = f /\ postcondition_ref_closure0 f2 () r}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec multi_use_T (x: t_T) (return (x'0: ())) = {[@expl:multi_use 'x' type invariant] inv_ref_T x}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &c <- { c0 = x } ] s1 | s1 = uses_fn_closure0 {c} (fun (_ret: ()) -> [ &_4 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & x: t_T = x | & c: closure0 = Any.any_l () | & _4: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
