module M_08_multiple_calls__multi_use
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_T
  
  type closure0 = { c0: t_T }
  
  predicate inv (_1: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: t_T) = inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_1: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate inv'2 (_1: closure0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: closure0 [inv'2 x]. inv'2 x = (let {c0 = x0} = x in inv'1 x0)
  
  predicate invariant''1 [@inline:trivial] (self: closure0) = inv'2 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'3 (_1: closure0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: closure0 [inv'3 x]. inv'3 x = invariant''1 x
  
  let rec closure0 (self: closure0) (return (x: UInt32.t)) = {[@expl:closure 'self' type invariant] inv'3 self}
    {[@expl:closure requires] self.c0 = self.c0}
    (! bb0
    [ bb0 = s0 [ s0 = [ &res <- (0: UInt32.t) ] s1 | s1 = [ &_0 <- res ] s2 | s2 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l () | & res: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> (! return {result}) ]
  
  predicate precondition [@inline:trivial] (self: closure0) (args: ()) = self.c0 = self.c0
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: ()) (result: UInt32.t) = true
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve (_1: t_T)
  
  predicate resolve'0 [@inline:trivial] (_1: closure0) = resolve _1.c0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate hist_inv [@inline:trivial] (self: closure0) (result_state: closure0) = self = result_state
  
  meta "rewrite_def" predicate hist_inv
  
  predicate postcondition_mut [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: UInt32.t) =
    hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure0) (args: ()) (res: UInt32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: (), res: UInt32.t. postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'0 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: ()) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: (), res_state: closure0, res: UInt32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: closure0) (res_state: closure0) : ()
  
  axiom fn_hist_inv_spec: forall self: closure0, res_state: closure0. hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: closure0) (args: ()) (result: UInt32.t) = true
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: closure0) (args: ()) (res: UInt32.t) : ()
  
  axiom fn_once_spec: forall self: closure0, args: (), res: UInt32.t. postcondition_once self args res
      = (postcondition self args res /\ resolve'0 self)
  
  function fn_mut (self: closure0) (args: ()) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom fn_mut_spec:
    forall self: closure0, args: (), res_state: closure0, res: UInt32.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate postcondition_once'0 [@inline:trivial] (self: closure0) (args: ()) (result: UInt32.t) =
    postcondition self args result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  predicate resolve'1 [@inline:trivial] (_1: closure0) = true
  
  meta "rewrite_def" predicate resolve'1
  
  predicate postcondition_mut'0 [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: UInt32.t) =
    postcondition self args result /\ self = result_state
  
  meta "rewrite_def" predicate postcondition_mut'0
  
  function fn_mut_once'0 (self: closure0) (args: ()) (res: UInt32.t) : ()
  
  axiom fn_mut_once_spec'0: forall self: closure0, args: (), res: UInt32.t. postcondition_once'0 self args res
      = (exists res_state: closure0. postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv'0 [@inline:trivial] (self: closure0) (result_state: closure0) = self = result_state
  
  meta "rewrite_def" predicate hist_inv'0
  
  function hist_inv_trans'0 (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec'0: forall self: closure0, b: closure0, c: closure0. hist_inv'0 self b
      -> hist_inv'0 b c -> hist_inv'0 self c
  
  function hist_inv_refl'0 (self: closure0) : ()
  
  axiom hist_inv_refl_spec'0: forall self: closure0. hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: closure0) (args: ()) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: closure0, args: (), res_state: closure0, res: UInt32.t. postcondition_mut'0 self args res_state res
      -> hist_inv'0 self res_state
  
  function fn_hist_inv'0 (self: closure0) (res_state: closure0) : ()
  
  axiom fn_hist_inv_spec'0: forall self: closure0, res_state: closure0. hist_inv'0 self res_state = (self = res_state)
  
  predicate postcondition'0 [@inline:trivial] (self: closure0) (args: ()) (result: UInt32.t) =
    postcondition self args result
  
  meta "rewrite_def" predicate postcondition'0
  
  function fn_once'0 (self: closure0) (args: ()) (res: UInt32.t) : ()
  
  axiom fn_once_spec'0: forall self: closure0, args: (), res: UInt32.t. postcondition_once'0 self args res
      = (postcondition'0 self args res /\ resolve'1 self)
  
  function fn_mut'0 (self: closure0) (args: ()) (res_state: closure0) (res: UInt32.t) : ()
  
  axiom fn_mut_spec'0:
    forall self: closure0, args: (), res_state: closure0, res: UInt32.t. postcondition_mut'0 self args res_state res
      = (postcondition'0 self args res /\ self = res_state)
  
  let rec uses_fn (f: closure0) (return (x: ())) = {[@expl:uses_fn 'f' type invariant] inv'2 f}
    {[@expl:uses_fn requires] precondition f ()}
    any
    [ return' (result: ()) -> {exists f2: closure0, r: UInt32.t. f2 = f /\ postcondition'0 f2 () r}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec multi_use (x: t_T) (return (x'0: ())) = {[@expl:multi_use 'x' type invariant] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &c <- { c0 = x } ] s1 | s1 = uses_fn {c} (fun (_ret: ()) -> [ &_4 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & x: t_T = x | & c: closure0 = Any.any_l () | & _4: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
