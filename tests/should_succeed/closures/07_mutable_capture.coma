module M_07_mutable_capture__test_fnmut
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure1 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure1) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure1) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate postcondition_once [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    UInt32.t'int self.c0.final = UInt32.t'int self.c0.current + 1
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure1) = resolve'2 _1.c0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure1) (result_state: closure1) = result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv
  
  predicate postcondition_mut [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    UInt32.t'int result_state.c0.current = UInt32.t'int self.c0.current + 1 /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure1, args: (), res: Int32.t. postcondition_once self args res
      = (exists res_state: closure1. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_spec: forall self: closure1, b: closure1, c: closure1. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure1) : ()
  
  axiom hist_inv_refl_spec: forall self: closure1. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec closure1 (self: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:closure requires] UInt32.t'int self.current.c0.current < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 self}- s2
      | s2 = [ &res'0 <- (5: Int32.t) ] s3
      | s3 = [ &res <- res'0 ] s4
      | s4 = [ &_0 <- res ] s5
      | s5 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & self: MutBorrow.t closure1 = self
    | & res: Int32.t = Any.any_l ()
    | & res'0: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:closure ensures] UInt32.t'int self.final.c0.current
      = UInt32.t'int self.current.c0.current + 1}
      {[@expl:closure hist_inv post] hist_inv self.current self.final}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret: MutBorrow.t closure1) -> [ &_6 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = closure1 {_6} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret: MutBorrow.t closure1) -> [ &_9 <- _ret ] [ &c <- _ret.final ] s1)
      | s1 = closure1 {_9} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = -{resolve'3 c}- s1 | s1 = {[@expl:assertion] UInt32.t'int x = 100002} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure1 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t closure1 = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: Int32.t = Any.any_l ()
    | & _9: MutBorrow.t closure1 = Any.any_l ()
    | & _10: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_07_mutable_capture__call_fnmut
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_1: t_F)
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_F) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: ())
  
  predicate postcondition_once (self: t_F) (args: ()) (result: Int32.t)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: ()) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: (), res: Int32.t. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: ()) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: (), res_state: t_F, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec call_mut (self_: MutBorrow.t t_F) (arg: ()) (return (x: Int32.t)) =
    {[@expl:call_mut 'self_' type invariant] inv'0 self_}
    {[@expl:call_mut requires] precondition self_.current arg}
    any [ return (result: Int32.t) -> {postcondition_mut self_.current arg self_.final result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_fnmut (f: t_F) (return (x: Int32.t)) = {[@expl:call_fnmut 'f' type invariant] inv f}
    {[@expl:call_fnmut requires #0] precondition f ()}
    {[@expl:call_fnmut requires #1] forall st1: t_F, r: Int32.t. postcondition_mut f () st1 r -> precondition st1 ()}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv f}
        MutBorrow.borrow_mut <t_F> {f}
          (fun (_ret: MutBorrow.t t_F) -> [ &_6 <- _ret ] -{inv _ret.final}- [ &f <- _ret.final ] s1)
      | s1 = call_mut {_6} {_7} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {inv f}
        MutBorrow.borrow_mut <t_F> {f}
          (fun (_ret: MutBorrow.t t_F) -> [ &_8 <- _ret ] -{inv _ret.final}- [ &f <- _ret.final ] s1)
      | s1 = call_mut {_8} {_9} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv f} s1 | s1 = -{resolve f}- s2 | s2 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & f: t_F = f
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t t_F = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t t_F = Any.any_l ()
    | & _9: () = Any.any_l () ])
    [ return (result: Int32.t) ->
    {[@expl:call_fnmut ensures] exists st1: t_F, st2: t_F, r: Int32.t. postcondition_mut f () st1 r
        /\ postcondition_mut st1 () st2 result /\ resolve st2}
      (! return {result}) ]
end
module M_07_mutable_capture__call_fnonce
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_1: t_F)
  
  predicate precondition (self: t_F) (args: ())
  
  predicate postcondition_once (self: t_F) (args: ()) (result: Int32.t)
  
  let rec call_once (self_: t_F) (arg: ()) (return (x: Int32.t)) = {[@expl:call_once 'self_' type invariant] inv self_}
    {[@expl:call_once requires] precondition self_ arg}
    any [ return (result: Int32.t) -> {postcondition_once self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_fnonce (f: t_F) (return (x: Int32.t)) = {[@expl:call_fnonce 'f' type invariant] inv f}
    {[@expl:call_fnonce requires] precondition f ()}
    (! bb0
    [ bb0 = s0 [ s0 = call_once {f} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb2 ] | bb2 = return {_0} ]
    [ & _0: Int32.t = Any.any_l () | & f: t_F = f | & _5: () = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:call_fnonce ensures] postcondition_once f () result} (! return {result}) ]
end
module M_07_mutable_capture__test_fnmut2
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure1 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure1) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure1) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate postcondition_once [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    UInt32.t'int self.c0.final = UInt32.t'int self.c0.current + 1
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure1) = resolve'2 _1.c0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure1) (result_state: closure1) = result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv
  
  predicate postcondition_mut [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    UInt32.t'int result_state.c0.current = UInt32.t'int self.c0.current + 1 /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure1, args: (), res: Int32.t. postcondition_once self args res
      = (exists res_state: closure1. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_spec: forall self: closure1, b: closure1, c: closure1. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure1) : ()
  
  axiom hist_inv_refl_spec: forall self: closure1. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec closure1 (self: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:closure requires] UInt32.t'int self.current.c0.current < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 self}- s2
      | s2 = [ &res'0 <- (5: Int32.t) ] s3
      | s3 = [ &res <- res'0 ] s4
      | s4 = [ &_0 <- res ] s5
      | s5 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & self: MutBorrow.t closure1 = self
    | & res: Int32.t = Any.any_l ()
    | & res'0: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:closure ensures] UInt32.t'int self.final.c0.current
      = UInt32.t'int self.current.c0.current + 1}
      {[@expl:closure hist_inv post] hist_inv self.current self.final}
      (! return {result}) ]
  
  predicate precondition [@inline:trivial] (self: closure1) (args: ()) = UInt32.t'int self.c0.current < 1000000
  
  meta "rewrite_def" predicate precondition
  
  predicate precondition'0 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) = precondition self.current args
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result: Int32.t) =
    postcondition_mut self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  predicate postcondition_mut'0 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result_state: MutBorrow.t closure1) (result: Int32.t) =
    postcondition_mut self.current args result_state.current result /\ self.final = result_state.final
  
  meta "rewrite_def" predicate postcondition_mut'0
  
  function fn_mut_once'0 (self: MutBorrow.t closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0:
    forall self: MutBorrow.t closure1, args: (), res: Int32.t. postcondition_once'0 self args res
      = (exists res_state: MutBorrow.t closure1. postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv'0 [@inline:trivial] (self: MutBorrow.t closure1) (result_state: MutBorrow.t closure1) =
    hist_inv self.current result_state.current /\ self.final = result_state.final
  
  meta "rewrite_def" predicate hist_inv'0
  
  function hist_inv_trans'0 (self: MutBorrow.t closure1) (b: MutBorrow.t closure1) (c: MutBorrow.t closure1) : ()
  
  axiom hist_inv_trans_spec'0:
    forall self: MutBorrow.t closure1, b: MutBorrow.t closure1, c: MutBorrow.t closure1. hist_inv'0 self b
      -> hist_inv'0 b c -> hist_inv'0 self c
  
  function hist_inv_refl'0 (self: MutBorrow.t closure1) : ()
  
  axiom hist_inv_refl_spec'0: forall self: MutBorrow.t closure1. hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: MutBorrow.t closure1) (args: ()) (res_state: MutBorrow.t closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: MutBorrow.t closure1, args: (), res_state: MutBorrow.t closure1, res: Int32.t. postcondition_mut'0 self args res_state res
      -> hist_inv'0 self res_state
  
  let rec call_fnmut (f: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:call_fnmut requires #0] precondition'0 f ()}
    {[@expl:call_fnmut requires #1] forall st1: MutBorrow.t closure1, r: Int32.t. postcondition_mut'0 f () st1 r
      -> precondition'0 st1 ()}
    any
    [ return (result: Int32.t) ->
    {exists st1: MutBorrow.t closure1, st2: MutBorrow.t closure1, r: Int32.t. postcondition_mut'0 f () st1 r
        /\ postcondition_mut'0 st1 () st2 result /\ resolve'0 st2}
      (! return {result}) ]
  
  let rec call_fnmut'0 (f: closure1) (return (x: Int32.t)) = {[@expl:call_fnmut requires #0] precondition f ()}
    {[@expl:call_fnmut requires #1] forall st1: closure1, r: Int32.t. postcondition_mut f () st1 r
      -> precondition st1 ()}
    any
    [ return (result: Int32.t) -> {exists st1: closure1, st2: closure1, r: Int32.t. postcondition_mut f () st1 r
        /\ postcondition_mut st1 () st2 result /\ resolve'3 st2}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut2 (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut2 requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret: MutBorrow.t closure1) -> [ &_6 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = call_fnmut {_6} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = call_fnmut'0 {c} (fun (_ret: Int32.t) -> [ &_7 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:assertion] UInt32.t'int x = 100004} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure1 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t closure1 = Any.any_l ()
    | & _7: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_07_mutable_capture__test_fnmut3
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type closure0 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure0) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure0) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure0) = resolve'2 _1.c0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure0) (result_state: closure0) = result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (return (x: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 self}- s2
      | s2 = [ &_0 <- (5: Int32.t) ] s3
      | s3 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & self: MutBorrow.t closure0 = self ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: ()) (result: Int32.t) =
    exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current = self
          /\ bor_self.final = e /\ closure0'post'return bor_self result /\ hist_inv self e)
      /\ resolve'3 e
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: Int32.t) =
    exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self result /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure0) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: (), res: Int32.t. postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: ()) (res_state: closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: (), res_state: closure0, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition [@inline:trivial] (self: closure0) (args: ()) =
    forall bor_self: MutBorrow.t closure0. bor_self.current = self -> closure0'pre bor_self
  
  meta "rewrite_def" predicate precondition
  
  predicate precondition'0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) = precondition self.current args
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) (result: Int32.t) =
    postcondition_mut self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec call_fnonce (f: MutBorrow.t closure0) (return (x: Int32.t)) =
    {[@expl:call_fnonce requires] precondition'0 f ()}
    any [ return (result: Int32.t) -> {postcondition_once'0 f () result} (! return {result}) ]
  
  let rec call_fnonce'0 (f: closure0) (return (x: Int32.t)) = {[@expl:call_fnonce requires] precondition f ()}
    any [ return (result: Int32.t) -> {postcondition_once f () result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut3 (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut3 requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure0> {c}
          (fun (_ret: MutBorrow.t closure0) -> [ &_6 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = call_fnonce {_6} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = call_fnonce'0 {c} (fun (_ret: Int32.t) -> [ &_7 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:assertion] UInt32.t'int x = 100002} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure0 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t closure0 = Any.any_l ()
    | & _7: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_07_mutable_capture__test_fnmut2box
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure1 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure1) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure1) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate postcondition_once [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    UInt32.t'int self.c0.final = UInt32.t'int self.c0.current + 1
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure1) = resolve'2 _1.c0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure1) (result_state: closure1) = result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv
  
  predicate postcondition_mut [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    UInt32.t'int result_state.c0.current = UInt32.t'int self.c0.current + 1 /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure1, args: (), res: Int32.t. postcondition_once self args res
      = (exists res_state: closure1. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_spec: forall self: closure1, b: closure1, c: closure1. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure1) : ()
  
  axiom hist_inv_refl_spec: forall self: closure1. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec closure1 (self: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:closure requires] UInt32.t'int self.current.c0.current < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 self}- s2
      | s2 = [ &res'0 <- (5: Int32.t) ] s3
      | s3 = [ &res <- res'0 ] s4
      | s4 = [ &_0 <- res ] s5
      | s5 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & self: MutBorrow.t closure1 = self
    | & res: Int32.t = Any.any_l ()
    | & res'0: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:closure ensures] UInt32.t'int self.final.c0.current
      = UInt32.t'int self.current.c0.current + 1}
      {[@expl:closure hist_inv post] hist_inv self.current self.final}
      (! return {result}) ]
  
  predicate precondition [@inline:trivial] (self: closure1) (args: ()) = UInt32.t'int self.c0.current < 1000000
  
  meta "rewrite_def" predicate precondition
  
  predicate precondition'0 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) = precondition self.current args
  
  meta "rewrite_def" predicate precondition'0
  
  predicate precondition'1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) = precondition'0 self args
  
  meta "rewrite_def" predicate precondition'1
  
  predicate postcondition_once'0 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result: Int32.t) =
    postcondition_mut self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  predicate postcondition_once'1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result: Int32.t) =
    postcondition_once'0 self args result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  predicate resolve'4 [@inline:trivial] (self: MutBorrow.t closure1) = resolve'0 self
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 [@inline:trivial] (_1: MutBorrow.t closure1) = resolve'4 _1
  
  meta "rewrite_def" predicate resolve'5
  
  predicate postcondition_mut'0 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result_state: MutBorrow.t closure1) (result: Int32.t) =
    postcondition_mut self.current args result_state.current result /\ self.final = result_state.final
  
  meta "rewrite_def" predicate postcondition_mut'0
  
  function fn_mut_once'0 (self: MutBorrow.t closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0:
    forall self: MutBorrow.t closure1, args: (), res: Int32.t. postcondition_once'0 self args res
      = (exists res_state: MutBorrow.t closure1. postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv'0 [@inline:trivial] (self: MutBorrow.t closure1) (result_state: MutBorrow.t closure1) =
    hist_inv self.current result_state.current /\ self.final = result_state.final
  
  meta "rewrite_def" predicate hist_inv'0
  
  function hist_inv_trans'0 (self: MutBorrow.t closure1) (b: MutBorrow.t closure1) (c: MutBorrow.t closure1) : ()
  
  axiom hist_inv_trans_spec'0:
    forall self: MutBorrow.t closure1, b: MutBorrow.t closure1, c: MutBorrow.t closure1. hist_inv'0 self b
      -> hist_inv'0 b c -> hist_inv'0 self c
  
  function hist_inv_refl'0 (self: MutBorrow.t closure1) : ()
  
  axiom hist_inv_refl_spec'0: forall self: MutBorrow.t closure1. hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: MutBorrow.t closure1) (args: ()) (res_state: MutBorrow.t closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: MutBorrow.t closure1, args: (), res_state: MutBorrow.t closure1, res: Int32.t. postcondition_mut'0 self args res_state res
      -> hist_inv'0 self res_state
  
  predicate postcondition_mut'1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result_state: MutBorrow.t closure1) (result: Int32.t) =
    postcondition_mut'0 self args result_state result
  
  meta "rewrite_def" predicate postcondition_mut'1
  
  function fn_mut_once'1 (self: MutBorrow.t closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'1:
    forall self: MutBorrow.t closure1, args: (), res: Int32.t. postcondition_once'1 self args res
      = (exists res_state: MutBorrow.t closure1. postcondition_mut'1 self args res_state res /\ resolve'5 res_state)
  
  predicate hist_inv'1 [@inline:trivial] (self: MutBorrow.t closure1) (result_state: MutBorrow.t closure1) =
    hist_inv'0 self result_state
  
  meta "rewrite_def" predicate hist_inv'1
  
  function hist_inv_trans'1 (self: MutBorrow.t closure1) (b: MutBorrow.t closure1) (c: MutBorrow.t closure1) : ()
  
  axiom hist_inv_trans_spec'1:
    forall self: MutBorrow.t closure1, b: MutBorrow.t closure1, c: MutBorrow.t closure1. hist_inv'1 self b
      -> hist_inv'1 b c -> hist_inv'1 self c
  
  function hist_inv_refl'1 (self: MutBorrow.t closure1) : ()
  
  axiom hist_inv_refl_spec'1: forall self: MutBorrow.t closure1. hist_inv'1 self self
  
  function postcondition_mut_hist_inv'1 (self: MutBorrow.t closure1) (args: ()) (res_state: MutBorrow.t closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'1:
    forall self: MutBorrow.t closure1, args: (), res_state: MutBorrow.t closure1, res: Int32.t. postcondition_mut'1 self args res_state res
      -> hist_inv'1 self res_state
  
  let rec call_fnmut (f: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:call_fnmut requires #0] precondition'1 f ()}
    {[@expl:call_fnmut requires #1] forall st1: MutBorrow.t closure1, r: Int32.t. postcondition_mut'1 f () st1 r
      -> precondition'1 st1 ()}
    any
    [ return (result: Int32.t) ->
    {exists st1: MutBorrow.t closure1, st2: MutBorrow.t closure1, r: Int32.t. postcondition_mut'1 f () st1 r
        /\ postcondition_mut'1 st1 () st2 result /\ resolve'5 st2}
      (! return {result}) ]
  
  predicate precondition'2 [@inline:trivial] (self: closure1) (args: ()) = precondition self args
  
  meta "rewrite_def" predicate precondition'2
  
  predicate precondition'3 [@inline:trivial] (self: closure1) (args: ()) = precondition'2 self args
  
  meta "rewrite_def" predicate precondition'3
  
  predicate postcondition_once'2 [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    postcondition_once self args result
  
  meta "rewrite_def" predicate postcondition_once'2
  
  predicate postcondition_once'3 [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    postcondition_once'2 self args result
  
  meta "rewrite_def" predicate postcondition_once'3
  
  predicate resolve'6 [@inline:trivial] (self: closure1) = resolve'3 self
  
  meta "rewrite_def" predicate resolve'6
  
  predicate resolve'7 [@inline:trivial] (_1: closure1) = resolve'6 _1
  
  meta "rewrite_def" predicate resolve'7
  
  predicate resolve'8 [@inline:trivial] (self: closure1) = resolve'7 self
  
  meta "rewrite_def" predicate resolve'8
  
  predicate resolve'9 [@inline:trivial] (_1: closure1) = resolve'8 _1
  
  meta "rewrite_def" predicate resolve'9
  
  predicate postcondition_mut'2 [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    postcondition_mut self args result_state result
  
  meta "rewrite_def" predicate postcondition_mut'2
  
  function fn_mut_once'2 (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'2: forall self: closure1, args: (), res: Int32.t. postcondition_once'2 self args res
      = (exists res_state: closure1. postcondition_mut'2 self args res_state res /\ resolve'7 res_state)
  
  predicate hist_inv'2 [@inline:trivial] (self: closure1) (result_state: closure1) = hist_inv self result_state
  
  meta "rewrite_def" predicate hist_inv'2
  
  function hist_inv_trans'2 (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_spec'2: forall self: closure1, b: closure1, c: closure1. hist_inv'2 self b
      -> hist_inv'2 b c -> hist_inv'2 self c
  
  function hist_inv_refl'2 (self: closure1) : ()
  
  axiom hist_inv_refl_spec'2: forall self: closure1. hist_inv'2 self self
  
  function postcondition_mut_hist_inv'2 (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'2:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut'2 self args res_state res
      -> hist_inv'2 self res_state
  
  predicate postcondition_mut'3 [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    postcondition_mut'2 self args result_state result
  
  meta "rewrite_def" predicate postcondition_mut'3
  
  function fn_mut_once'3 (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'3: forall self: closure1, args: (), res: Int32.t. postcondition_once'3 self args res
      = (exists res_state: closure1. postcondition_mut'3 self args res_state res /\ resolve'9 res_state)
  
  predicate hist_inv'3 [@inline:trivial] (self: closure1) (result_state: closure1) = hist_inv'2 self result_state
  
  meta "rewrite_def" predicate hist_inv'3
  
  function hist_inv_trans'3 (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_spec'3: forall self: closure1, b: closure1, c: closure1. hist_inv'3 self b
      -> hist_inv'3 b c -> hist_inv'3 self c
  
  function hist_inv_refl'3 (self: closure1) : ()
  
  axiom hist_inv_refl_spec'3: forall self: closure1. hist_inv'3 self self
  
  function postcondition_mut_hist_inv'3 (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'3:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut'3 self args res_state res
      -> hist_inv'3 self res_state
  
  let rec call_fnmut'0 (f: closure1) (return (x: Int32.t)) = {[@expl:call_fnmut requires #0] precondition'3 f ()}
    {[@expl:call_fnmut requires #1] forall st1: closure1, r: Int32.t. postcondition_mut'3 f () st1 r
      -> precondition'3 st1 ()}
    any
    [ return (result: Int32.t) -> {exists st1: closure1, st2: closure1, r: Int32.t. postcondition_mut'3 f () st1 r
        /\ postcondition_mut'3 st1 () st2 result /\ resolve'9 st2}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut2box (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut2box requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret: MutBorrow.t closure1) -> [ &_7 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = call_fnmut {_7} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = call_fnmut'0 {c} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0 [ s0 = {[@expl:assertion] UInt32.t'int x = 100004} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure1 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _7: MutBorrow.t closure1 = Any.any_l ()
    | & _8: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_07_mutable_capture__test_fnmut3box
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type closure0 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure0) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure0) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure0) = resolve'2 _1.c0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure0) (result_state: closure0) = result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (return (x: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 self}- s2
      | s2 = [ &_0 <- (5: Int32.t) ] s3
      | s3 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & self: MutBorrow.t closure0 = self ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: ()) (result: Int32.t) =
    exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current = self
          /\ bor_self.final = e /\ closure0'post'return bor_self result /\ hist_inv self e)
      /\ resolve'3 e
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: Int32.t) =
    exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self result /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure0) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: (), res: Int32.t. postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: ()) (res_state: closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: (), res_state: closure0, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition [@inline:trivial] (self: closure0) (args: ()) =
    forall bor_self: MutBorrow.t closure0. bor_self.current = self -> closure0'pre bor_self
  
  meta "rewrite_def" predicate precondition
  
  predicate precondition'0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) = precondition self.current args
  
  meta "rewrite_def" predicate precondition'0
  
  predicate precondition'1 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t closure0)) (args: ()) =
    precondition'0 self.current args
  
  meta "rewrite_def" predicate precondition'1
  
  predicate postcondition_once'0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) (result: Int32.t) =
    postcondition_mut self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  predicate postcondition_mut'0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) (result_state: MutBorrow.t closure0) (result: Int32.t) =
    postcondition_mut self.current args result_state.current result /\ self.final = result_state.final
  
  meta "rewrite_def" predicate postcondition_mut'0
  
  function fn_mut_once'0 (self: MutBorrow.t closure0) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0:
    forall self: MutBorrow.t closure0, args: (), res: Int32.t. postcondition_once'0 self args res
      = (exists res_state: MutBorrow.t closure0. postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv'0 [@inline:trivial] (self: MutBorrow.t closure0) (result_state: MutBorrow.t closure0) =
    hist_inv self.current result_state.current /\ self.final = result_state.final
  
  meta "rewrite_def" predicate hist_inv'0
  
  function hist_inv_trans'0 (self: MutBorrow.t closure0) (b: MutBorrow.t closure0) (c: MutBorrow.t closure0) : ()
  
  axiom hist_inv_trans_spec'0:
    forall self: MutBorrow.t closure0, b: MutBorrow.t closure0, c: MutBorrow.t closure0. hist_inv'0 self b
      -> hist_inv'0 b c -> hist_inv'0 self c
  
  function hist_inv_refl'0 (self: MutBorrow.t closure0) : ()
  
  axiom hist_inv_refl_spec'0: forall self: MutBorrow.t closure0. hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: MutBorrow.t closure0) (args: ()) (res_state: MutBorrow.t closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: MutBorrow.t closure0, args: (), res_state: MutBorrow.t closure0, res: Int32.t. postcondition_mut'0 self args res_state res
      -> hist_inv'0 self res_state
  
  predicate postcondition_once'1 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t closure0)) (args: ()) (result: Int32.t) =
    postcondition_mut'0 self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  let rec call_fnonce (f: MutBorrow.t (MutBorrow.t closure0)) (return (x: Int32.t)) =
    {[@expl:call_fnonce requires] precondition'1 f ()}
    any [ return (result: Int32.t) -> {postcondition_once'1 f () result} (! return {result}) ]
  
  predicate precondition'2 [@inline:trivial] (self: closure0) (args: ()) = precondition self args
  
  meta "rewrite_def" predicate precondition'2
  
  predicate precondition'3 [@inline:trivial] (self: closure0) (args: ()) = precondition'2 self args
  
  meta "rewrite_def" predicate precondition'3
  
  predicate postcondition_once'2 [@inline:trivial] (self: closure0) (args: ()) (result: Int32.t) =
    postcondition_once self args result
  
  meta "rewrite_def" predicate postcondition_once'2
  
  predicate postcondition_once'3 [@inline:trivial] (self: closure0) (args: ()) (result: Int32.t) =
    postcondition_once'2 self args result
  
  meta "rewrite_def" predicate postcondition_once'3
  
  let rec call_fnonce'0 (f: closure0) (return (x: Int32.t)) = {[@expl:call_fnonce requires] precondition'3 f ()}
    any [ return (result: Int32.t) -> {postcondition_once'3 f () result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut3box (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut3box requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure0> {c}
          (fun (_ret: MutBorrow.t closure0) -> [ &_7 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = MutBorrow.borrow_mut <MutBorrow.t closure0> {_7}
          (fun (_ret: MutBorrow.t (MutBorrow.t closure0)) -> [ &_6 <- _ret ] [ &_7 <- _ret.final ] s4)
      | s4 = call_fnonce {_6} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0 [ s0 = -{resolve'0 _7}- s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = call_fnonce'0 {c} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = {[@expl:assertion] UInt32.t'int x = 100002} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure0 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t (MutBorrow.t closure0) = Any.any_l ()
    | & _7: MutBorrow.t closure0 = Any.any_l ()
    | & _8: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
