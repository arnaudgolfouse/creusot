module M_test_fnmut
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure1 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve_ref_closure1 [@inline:trivial] (_1: MutBorrow.t closure1) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure1
  
  predicate postcondition_once_closure1 [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    UInt32.t'int self.c0.final = UInt32.t'int self.c0.current + 1
  
  meta "rewrite_def" predicate postcondition_once_closure1
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  predicate resolve_closure1 [@inline:trivial] (_1: closure1) = resolve_ref_u32 _1.c0
  
  meta "rewrite_def" predicate resolve_closure1
  
  predicate hist_inv_closure1 [@inline:trivial] (self: closure1) (result_state: closure1) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure1
  
  predicate postcondition_mut_closure1 [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    UInt32.t'int result_state.c0.current = UInt32.t'int self.c0.current + 1 /\ hist_inv_closure1 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure1
  
  function fn_mut_once_closure1 (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_closure1_spec:
    forall self: closure1, args: (), res: Int32.t. postcondition_once_closure1 self args res
      = (exists res_state: closure1. postcondition_mut_closure1 self args res_state res /\ resolve_closure1 res_state)
  
  function hist_inv_trans_closure1 (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_closure1_spec: forall self: closure1, b: closure1, c: closure1. hist_inv_closure1 self b
      -> hist_inv_closure1 b c -> hist_inv_closure1 self c
  
  function hist_inv_refl_closure1 (self: closure1) : ()
  
  axiom hist_inv_refl_closure1_spec: forall self: closure1. hist_inv_closure1 self self
  
  function postcondition_mut_hist_inv_closure1 (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure1_spec:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut_closure1 self args res_state res
      -> hist_inv_closure1 self res_state
  
  let rec closure1 (self: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:closure requires] UInt32.t'int self.current.c0.current < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve_ref_closure1 self}- s2
      | s2 = [ &res'0 <- (5: Int32.t) ] s3
      | s3 = [ &res <- res'0 ] s4
      | s4 = [ &_0 <- res ] s5
      | s5 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & self: MutBorrow.t closure1 = self
    | & res: Int32.t = Any.any_l ()
    | & res'0: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:closure ensures] UInt32.t'int self.final.c0.current
      = UInt32.t'int self.current.c0.current + 1}
      {[@expl:closure hist_inv post] hist_inv_closure1 self.current self.final}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret: MutBorrow.t closure1) -> [ &_6 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = closure1 {_6} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret: MutBorrow.t closure1) -> [ &_9 <- _ret ] [ &c <- _ret.final ] s1)
      | s1 = closure1 {_9} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = -{resolve_closure1 c}- s1 | s1 = {[@expl:assertion] UInt32.t'int x = 100002} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure1 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t closure1 = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: Int32.t = Any.any_l ()
    | & _9: MutBorrow.t closure1 = Any.any_l ()
    | & _10: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_call_fnmut
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv_F (_1: t_F)
  
  predicate invariant_ref_F [@inline:trivial] (self: MutBorrow.t t_F) = inv_F self.current /\ inv_F self.final
  
  meta "rewrite_def" predicate invariant_ref_F
  
  predicate inv_ref_F [@inline:trivial] (_1: MutBorrow.t t_F) = invariant_ref_F _1
  
  meta "rewrite_def" predicate inv_ref_F
  
  predicate precondition_F (self: t_F) (args: ())
  
  predicate postcondition_once_F (self: t_F) (args: ()) (result: Int32.t)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: ()) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once_F (self: t_F) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: (), res: Int32.t. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: ()) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: (), res_state: t_F, res: Int32.t. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  let rec call_mut_F (self_: MutBorrow.t t_F) (arg: ()) (return (x: Int32.t)) =
    {[@expl:call_mut 'self_' type invariant] inv_ref_F self_}
    {[@expl:call_mut requires] precondition_F self_.current arg}
    any [ return (result: Int32.t) -> {postcondition_mut_F self_.current arg self_.final result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_fnmut_F (f: t_F) (return (x: Int32.t)) = {[@expl:call_fnmut 'f' type invariant] inv_F f}
    {[@expl:call_fnmut requires #0] precondition_F f ()}
    {[@expl:call_fnmut requires #1] forall st1: t_F, r: Int32.t. postcondition_mut_F f () st1 r
      -> precondition_F st1 ()}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_F f}
        MutBorrow.borrow_mut <t_F> {f}
          (fun (_ret: MutBorrow.t t_F) -> [ &_6 <- _ret ] -{inv_F _ret.final}- [ &f <- _ret.final ] s1)
      | s1 = call_mut_F {_6} {_7} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {inv_F f}
        MutBorrow.borrow_mut <t_F> {f}
          (fun (_ret: MutBorrow.t t_F) -> [ &_8 <- _ret ] -{inv_F _ret.final}- [ &f <- _ret.final ] s1)
      | s1 = call_mut_F {_8} {_9} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv_F f} s1 | s1 = -{resolve_F f}- s2 | s2 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & f: t_F = f
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t t_F = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t t_F = Any.any_l ()
    | & _9: () = Any.any_l () ])
    [ return (result: Int32.t) ->
    {[@expl:call_fnmut ensures] exists st1: t_F, st2: t_F, r: Int32.t. postcondition_mut_F f () st1 r
        /\ postcondition_mut_F st1 () st2 result /\ resolve_F st2}
      (! return {result}) ]
end
module M_call_fnonce
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv_F (_1: t_F)
  
  predicate precondition_F (self: t_F) (args: ())
  
  predicate postcondition_once_F (self: t_F) (args: ()) (result: Int32.t)
  
  let rec call_once_F (self_: t_F) (arg: ()) (return (x: Int32.t)) =
    {[@expl:call_once 'self_' type invariant] inv_F self_}
    {[@expl:call_once requires] precondition_F self_ arg}
    any [ return (result: Int32.t) -> {postcondition_once_F self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_fnonce_F (f: t_F) (return (x: Int32.t)) = {[@expl:call_fnonce 'f' type invariant] inv_F f}
    {[@expl:call_fnonce requires] precondition_F f ()}
    (! bb0
    [ bb0 = s0 [ s0 = call_once_F {f} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return {_0} ] [ & _0: Int32.t = Any.any_l () | & f: t_F = f | & _5: () = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:call_fnonce ensures] postcondition_once_F f () result} (! return {result}) ]
end
module M_test_fnmut2
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure1 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve_ref_closure1 [@inline:trivial] (_1: MutBorrow.t closure1) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure1
  
  predicate postcondition_once_closure1 [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    UInt32.t'int self.c0.final = UInt32.t'int self.c0.current + 1
  
  meta "rewrite_def" predicate postcondition_once_closure1
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  predicate resolve_closure1 [@inline:trivial] (_1: closure1) = resolve_ref_u32 _1.c0
  
  meta "rewrite_def" predicate resolve_closure1
  
  predicate hist_inv_closure1 [@inline:trivial] (self: closure1) (result_state: closure1) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure1
  
  predicate postcondition_mut_closure1 [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    UInt32.t'int result_state.c0.current = UInt32.t'int self.c0.current + 1 /\ hist_inv_closure1 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure1
  
  function fn_mut_once_closure1 (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_closure1_spec:
    forall self: closure1, args: (), res: Int32.t. postcondition_once_closure1 self args res
      = (exists res_state: closure1. postcondition_mut_closure1 self args res_state res /\ resolve_closure1 res_state)
  
  function hist_inv_trans_closure1 (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_closure1_spec: forall self: closure1, b: closure1, c: closure1. hist_inv_closure1 self b
      -> hist_inv_closure1 b c -> hist_inv_closure1 self c
  
  function hist_inv_refl_closure1 (self: closure1) : ()
  
  axiom hist_inv_refl_closure1_spec: forall self: closure1. hist_inv_closure1 self self
  
  function postcondition_mut_hist_inv_closure1 (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure1_spec:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut_closure1 self args res_state res
      -> hist_inv_closure1 self res_state
  
  let rec closure1 (self: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:closure requires] UInt32.t'int self.current.c0.current < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve_ref_closure1 self}- s2
      | s2 = [ &res'0 <- (5: Int32.t) ] s3
      | s3 = [ &res <- res'0 ] s4
      | s4 = [ &_0 <- res ] s5
      | s5 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & self: MutBorrow.t closure1 = self
    | & res: Int32.t = Any.any_l ()
    | & res'0: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:closure ensures] UInt32.t'int self.final.c0.current
      = UInt32.t'int self.current.c0.current + 1}
      {[@expl:closure hist_inv post] hist_inv_closure1 self.current self.final}
      (! return {result}) ]
  
  predicate precondition_closure1 [@inline:trivial] (self: closure1) (args: ()) = UInt32.t'int self.c0.current < 1000000
  
  meta "rewrite_def" predicate precondition_closure1
  
  predicate precondition_ref_closure1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) =
    precondition_closure1 self.current args
  
  meta "rewrite_def" predicate precondition_ref_closure1
  
  predicate postcondition_once_ref_closure1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result: Int32.t) =
    postcondition_mut_closure1 self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once_ref_closure1
  
  predicate postcondition_mut_ref_closure1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result_state: MutBorrow.t closure1) (result: Int32.t) =
    postcondition_mut_closure1 self.current args result_state.current result /\ self.final = result_state.final
  
  meta "rewrite_def" predicate postcondition_mut_ref_closure1
  
  function fn_mut_once_ref_closure1 (self: MutBorrow.t closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_ref_closure1_spec:
    forall self: MutBorrow.t closure1, args: (), res: Int32.t. postcondition_once_ref_closure1 self args res
      = (exists res_state: MutBorrow.t closure1. postcondition_mut_ref_closure1 self args res_state res
        /\ resolve_ref_closure1 res_state)
  
  predicate hist_inv_ref_closure1 [@inline:trivial] (self: MutBorrow.t closure1) (result_state: MutBorrow.t closure1) =
    hist_inv_closure1 self.current result_state.current /\ self.final = result_state.final
  
  meta "rewrite_def" predicate hist_inv_ref_closure1
  
  function hist_inv_trans_ref_closure1 (self: MutBorrow.t closure1) (b: MutBorrow.t closure1) (c: MutBorrow.t closure1) : ()
  
  axiom hist_inv_trans_ref_closure1_spec:
    forall self: MutBorrow.t closure1, b: MutBorrow.t closure1, c: MutBorrow.t closure1. hist_inv_ref_closure1 self b
      -> hist_inv_ref_closure1 b c -> hist_inv_ref_closure1 self c
  
  function hist_inv_refl_ref_closure1 (self: MutBorrow.t closure1) : ()
  
  axiom hist_inv_refl_ref_closure1_spec: forall self: MutBorrow.t closure1. hist_inv_ref_closure1 self self
  
  function postcondition_mut_hist_inv_ref_closure1 (self: MutBorrow.t closure1) (args: ()) (res_state: MutBorrow.t closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_ref_closure1_spec:
    forall self: MutBorrow.t closure1, args: (), res_state: MutBorrow.t closure1, res: Int32.t. postcondition_mut_ref_closure1 self args res_state res
      -> hist_inv_ref_closure1 self res_state
  
  let rec call_fnmut_ref_closure1 (f: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:call_fnmut requires #0] precondition_ref_closure1 f ()}
    {[@expl:call_fnmut requires #1] forall st1: MutBorrow.t closure1, r: Int32.t. postcondition_mut_ref_closure1 f () st1 r
      -> precondition_ref_closure1 st1 ()}
    any
    [ return (result: Int32.t) ->
    {exists st1: MutBorrow.t closure1, st2: MutBorrow.t closure1, r: Int32.t. postcondition_mut_ref_closure1 f () st1 r
        /\ postcondition_mut_ref_closure1 st1 () st2 result /\ resolve_ref_closure1 st2}
      (! return {result}) ]
  
  let rec call_fnmut_closure1 (f: closure1) (return (x: Int32.t)) =
    {[@expl:call_fnmut requires #0] precondition_closure1 f ()}
    {[@expl:call_fnmut requires #1] forall st1: closure1, r: Int32.t. postcondition_mut_closure1 f () st1 r
      -> precondition_closure1 st1 ()}
    any
    [ return (result: Int32.t) ->
    {exists st1: closure1, st2: closure1, r: Int32.t. postcondition_mut_closure1 f () st1 r
        /\ postcondition_mut_closure1 st1 () st2 result /\ resolve_closure1 st2}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut2 (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut2 requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret: MutBorrow.t closure1) -> [ &_6 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = call_fnmut_ref_closure1 {_6} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = call_fnmut_closure1 {c} (fun (_ret: Int32.t) -> [ &_7 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:assertion] UInt32.t'int x = 100004} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure1 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t closure1 = Any.any_l ()
    | & _7: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_test_fnmut3
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type closure0 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve_ref_closure0 [@inline:trivial] (_1: MutBorrow.t closure0) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure0
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  predicate resolve_closure0 [@inline:trivial] (_1: closure0) = resolve_ref_u32 _1.c0
  
  meta "rewrite_def" predicate resolve_closure0
  
  predicate hist_inv_closure0 [@inline:trivial] (self: closure0) (result_state: closure0) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure0
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (return (x: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve_ref_closure0 self}- s2
      | s2 = [ &_0 <- (5: Int32.t) ] s3
      | s3 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & self: MutBorrow.t closure0 = self ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: ()) (result: Int32.t) =
    exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current = self
          /\ bor_self.final = e /\ closure0'post'return bor_self result /\ hist_inv_closure0 self e)
      /\ resolve_closure0 e
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  predicate postcondition_mut_closure0 [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: Int32.t) =
    exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self result /\ hist_inv_closure0 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure0
  
  function fn_mut_once_closure0 (self: closure0) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_closure0_spec:
    forall self: closure0, args: (), res: Int32.t. postcondition_once_closure0 self args res
      = (exists res_state: closure0. postcondition_mut_closure0 self args res_state res /\ resolve_closure0 res_state)
  
  function hist_inv_trans_closure0 (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_closure0_spec: forall self: closure0, b: closure0, c: closure0. hist_inv_closure0 self b
      -> hist_inv_closure0 b c -> hist_inv_closure0 self c
  
  function hist_inv_refl_closure0 (self: closure0) : ()
  
  axiom hist_inv_refl_closure0_spec: forall self: closure0. hist_inv_closure0 self self
  
  function postcondition_mut_hist_inv_closure0 (self: closure0) (args: ()) (res_state: closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure0_spec:
    forall self: closure0, args: (), res_state: closure0, res: Int32.t. postcondition_mut_closure0 self args res_state res
      -> hist_inv_closure0 self res_state
  
  predicate precondition_closure0 [@inline:trivial] (self: closure0) (args: ()) =
    forall bor_self: MutBorrow.t closure0. bor_self.current = self -> closure0'pre bor_self
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate precondition_ref_closure0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) =
    precondition_closure0 self.current args
  
  meta "rewrite_def" predicate precondition_ref_closure0
  
  predicate postcondition_once_ref_closure0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) (result: Int32.t) =
    postcondition_mut_closure0 self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once_ref_closure0
  
  let rec call_fnonce_ref_closure0 (f: MutBorrow.t closure0) (return (x: Int32.t)) =
    {[@expl:call_fnonce requires] precondition_ref_closure0 f ()}
    any [ return (result: Int32.t) -> {postcondition_once_ref_closure0 f () result} (! return {result}) ]
  
  let rec call_fnonce_closure0 (f: closure0) (return (x: Int32.t)) =
    {[@expl:call_fnonce requires] precondition_closure0 f ()}
    any [ return (result: Int32.t) -> {postcondition_once_closure0 f () result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut3 (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut3 requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure0> {c}
          (fun (_ret: MutBorrow.t closure0) -> [ &_6 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = call_fnonce_ref_closure0 {_6} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = call_fnonce_closure0 {c} (fun (_ret: Int32.t) -> [ &_7 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:assertion] UInt32.t'int x = 100002} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure0 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t closure0 = Any.any_l ()
    | & _7: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_test_fnmut2box
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  use mach.int.Int
  
  type closure1 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve_ref_closure1 [@inline:trivial] (_1: MutBorrow.t closure1) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure1
  
  predicate postcondition_once_closure1 [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    UInt32.t'int self.c0.final = UInt32.t'int self.c0.current + 1
  
  meta "rewrite_def" predicate postcondition_once_closure1
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  predicate resolve_closure1 [@inline:trivial] (_1: closure1) = resolve_ref_u32 _1.c0
  
  meta "rewrite_def" predicate resolve_closure1
  
  predicate hist_inv_closure1 [@inline:trivial] (self: closure1) (result_state: closure1) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure1
  
  predicate postcondition_mut_closure1 [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    UInt32.t'int result_state.c0.current = UInt32.t'int self.c0.current + 1 /\ hist_inv_closure1 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure1
  
  function fn_mut_once_closure1 (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_closure1_spec:
    forall self: closure1, args: (), res: Int32.t. postcondition_once_closure1 self args res
      = (exists res_state: closure1. postcondition_mut_closure1 self args res_state res /\ resolve_closure1 res_state)
  
  function hist_inv_trans_closure1 (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_closure1_spec: forall self: closure1, b: closure1, c: closure1. hist_inv_closure1 self b
      -> hist_inv_closure1 b c -> hist_inv_closure1 self c
  
  function hist_inv_refl_closure1 (self: closure1) : ()
  
  axiom hist_inv_refl_closure1_spec: forall self: closure1. hist_inv_closure1 self self
  
  function postcondition_mut_hist_inv_closure1 (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure1_spec:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut_closure1 self args res_state res
      -> hist_inv_closure1 self res_state
  
  let rec closure1 (self: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:closure requires] UInt32.t'int self.current.c0.current < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve_ref_closure1 self}- s2
      | s2 = [ &res'0 <- (5: Int32.t) ] s3
      | s3 = [ &res <- res'0 ] s4
      | s4 = [ &_0 <- res ] s5
      | s5 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & self: MutBorrow.t closure1 = self
    | & res: Int32.t = Any.any_l ()
    | & res'0: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:closure ensures] UInt32.t'int self.final.c0.current
      = UInt32.t'int self.current.c0.current + 1}
      {[@expl:closure hist_inv post] hist_inv_closure1 self.current self.final}
      (! return {result}) ]
  
  predicate precondition_closure1 [@inline:trivial] (self: closure1) (args: ()) = UInt32.t'int self.c0.current < 1000000
  
  meta "rewrite_def" predicate precondition_closure1
  
  predicate precondition_ref_closure1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) =
    precondition_closure1 self.current args
  
  meta "rewrite_def" predicate precondition_ref_closure1
  
  predicate precondition_Box_ref_closure1_Global [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) =
    precondition_ref_closure1 self args
  
  meta "rewrite_def" predicate precondition_Box_ref_closure1_Global
  
  predicate postcondition_once_ref_closure1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result: Int32.t) =
    postcondition_mut_closure1 self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once_ref_closure1
  
  predicate postcondition_once_Box_ref_closure1_Global [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result: Int32.t) =
    postcondition_once_ref_closure1 self args result
  
  meta "rewrite_def" predicate postcondition_once_Box_ref_closure1_Global
  
  predicate resolve_Box_ref_closure1_Global [@inline:trivial] (_1: MutBorrow.t closure1) = resolve_ref_closure1 _1
  
  meta "rewrite_def" predicate resolve_Box_ref_closure1_Global
  
  predicate postcondition_mut_ref_closure1 [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result_state: MutBorrow.t closure1) (result: Int32.t) =
    postcondition_mut_closure1 self.current args result_state.current result /\ self.final = result_state.final
  
  meta "rewrite_def" predicate postcondition_mut_ref_closure1
  
  function fn_mut_once_ref_closure1 (self: MutBorrow.t closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_ref_closure1_spec:
    forall self: MutBorrow.t closure1, args: (), res: Int32.t. postcondition_once_ref_closure1 self args res
      = (exists res_state: MutBorrow.t closure1. postcondition_mut_ref_closure1 self args res_state res
        /\ resolve_ref_closure1 res_state)
  
  predicate hist_inv_ref_closure1 [@inline:trivial] (self: MutBorrow.t closure1) (result_state: MutBorrow.t closure1) =
    hist_inv_closure1 self.current result_state.current /\ self.final = result_state.final
  
  meta "rewrite_def" predicate hist_inv_ref_closure1
  
  function hist_inv_trans_ref_closure1 (self: MutBorrow.t closure1) (b: MutBorrow.t closure1) (c: MutBorrow.t closure1) : ()
  
  axiom hist_inv_trans_ref_closure1_spec:
    forall self: MutBorrow.t closure1, b: MutBorrow.t closure1, c: MutBorrow.t closure1. hist_inv_ref_closure1 self b
      -> hist_inv_ref_closure1 b c -> hist_inv_ref_closure1 self c
  
  function hist_inv_refl_ref_closure1 (self: MutBorrow.t closure1) : ()
  
  axiom hist_inv_refl_ref_closure1_spec: forall self: MutBorrow.t closure1. hist_inv_ref_closure1 self self
  
  function postcondition_mut_hist_inv_ref_closure1 (self: MutBorrow.t closure1) (args: ()) (res_state: MutBorrow.t closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_ref_closure1_spec:
    forall self: MutBorrow.t closure1, args: (), res_state: MutBorrow.t closure1, res: Int32.t. postcondition_mut_ref_closure1 self args res_state res
      -> hist_inv_ref_closure1 self res_state
  
  predicate postcondition_mut_Box_ref_closure1_Global [@inline:trivial] (self: MutBorrow.t closure1) (args: ()) (result_state: MutBorrow.t closure1) (result: Int32.t) =
    postcondition_mut_ref_closure1 self args result_state result
  
  meta "rewrite_def" predicate postcondition_mut_Box_ref_closure1_Global
  
  function fn_mut_once_Box_ref_closure1_Global (self: MutBorrow.t closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_Box_ref_closure1_Global_spec:
    forall self: MutBorrow.t closure1, args: (), res: Int32.t. postcondition_once_Box_ref_closure1_Global self args res
      = (exists res_state: MutBorrow.t closure1. postcondition_mut_Box_ref_closure1_Global self args res_state res
        /\ resolve_Box_ref_closure1_Global res_state)
  
  predicate hist_inv_Box_ref_closure1_Global [@inline:trivial] (self: MutBorrow.t closure1) (result_state: MutBorrow.t closure1) =
    hist_inv_ref_closure1 self result_state
  
  meta "rewrite_def" predicate hist_inv_Box_ref_closure1_Global
  
  function hist_inv_trans_Box_ref_closure1_Global (self: MutBorrow.t closure1) (b: MutBorrow.t closure1) (c: MutBorrow.t closure1) : ()
  
  axiom hist_inv_trans_Box_ref_closure1_Global_spec:
    forall self: MutBorrow.t closure1, b: MutBorrow.t closure1, c: MutBorrow.t closure1. hist_inv_Box_ref_closure1_Global self b
      -> hist_inv_Box_ref_closure1_Global b c -> hist_inv_Box_ref_closure1_Global self c
  
  function hist_inv_refl_Box_ref_closure1_Global (self: MutBorrow.t closure1) : ()
  
  axiom hist_inv_refl_Box_ref_closure1_Global_spec:
    forall self: MutBorrow.t closure1. hist_inv_Box_ref_closure1_Global self self
  
  function postcondition_mut_hist_inv_Box_ref_closure1_Global (self: MutBorrow.t closure1) (args: ()) (res_state: MutBorrow.t closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_Box_ref_closure1_Global_spec:
    forall self: MutBorrow.t closure1, args: (), res_state: MutBorrow.t closure1, res: Int32.t. postcondition_mut_Box_ref_closure1_Global self args res_state res
      -> hist_inv_Box_ref_closure1_Global self res_state
  
  let rec call_fnmut_Box_ref_closure1_Global (f: MutBorrow.t closure1) (return (x: Int32.t)) =
    {[@expl:call_fnmut requires #0] precondition_Box_ref_closure1_Global f ()}
    {[@expl:call_fnmut requires #1] forall st1: MutBorrow.t closure1, r: Int32.t. postcondition_mut_Box_ref_closure1_Global f () st1 r
      -> precondition_Box_ref_closure1_Global st1 ()}
    any
    [ return (result: Int32.t) ->
    {exists st1: MutBorrow.t closure1, st2: MutBorrow.t closure1, r: Int32.t. postcondition_mut_Box_ref_closure1_Global f () st1 r
        /\ postcondition_mut_Box_ref_closure1_Global st1 () st2 result /\ resolve_Box_ref_closure1_Global st2}
      (! return {result}) ]
  
  predicate precondition_Box_closure1_Global [@inline:trivial] (self: closure1) (args: ()) =
    precondition_closure1 self args
  
  meta "rewrite_def" predicate precondition_Box_closure1_Global
  
  predicate precondition_Box_Box_closure1_Global_Global [@inline:trivial] (self: closure1) (args: ()) =
    precondition_Box_closure1_Global self args
  
  meta "rewrite_def" predicate precondition_Box_Box_closure1_Global_Global
  
  predicate postcondition_once_Box_closure1_Global [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    postcondition_once_closure1 self args result
  
  meta "rewrite_def" predicate postcondition_once_Box_closure1_Global
  
  predicate postcondition_once_Box_Box_closure1_Global_Global [@inline:trivial] (self: closure1) (args: ()) (result: Int32.t) =
    postcondition_once_Box_closure1_Global self args result
  
  meta "rewrite_def" predicate postcondition_once_Box_Box_closure1_Global_Global
  
  predicate resolve_Box_closure1_Global [@inline:trivial] (_1: closure1) = resolve_closure1 _1
  
  meta "rewrite_def" predicate resolve_Box_closure1_Global
  
  predicate resolve_Box_Box_closure1_Global_Global [@inline:trivial] (_1: closure1) = resolve_Box_closure1_Global _1
  
  meta "rewrite_def" predicate resolve_Box_Box_closure1_Global_Global
  
  predicate postcondition_mut_Box_closure1_Global [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    postcondition_mut_closure1 self args result_state result
  
  meta "rewrite_def" predicate postcondition_mut_Box_closure1_Global
  
  function fn_mut_once_Box_closure1_Global (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_Box_closure1_Global_spec:
    forall self: closure1, args: (), res: Int32.t. postcondition_once_Box_closure1_Global self args res
      = (exists res_state: closure1. postcondition_mut_Box_closure1_Global self args res_state res
        /\ resolve_Box_closure1_Global res_state)
  
  predicate hist_inv_Box_closure1_Global [@inline:trivial] (self: closure1) (result_state: closure1) =
    hist_inv_closure1 self result_state
  
  meta "rewrite_def" predicate hist_inv_Box_closure1_Global
  
  function hist_inv_trans_Box_closure1_Global (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_Box_closure1_Global_spec:
    forall self: closure1, b: closure1, c: closure1. hist_inv_Box_closure1_Global self b
      -> hist_inv_Box_closure1_Global b c -> hist_inv_Box_closure1_Global self c
  
  function hist_inv_refl_Box_closure1_Global (self: closure1) : ()
  
  axiom hist_inv_refl_Box_closure1_Global_spec: forall self: closure1. hist_inv_Box_closure1_Global self self
  
  function postcondition_mut_hist_inv_Box_closure1_Global (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_Box_closure1_Global_spec:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut_Box_closure1_Global self args res_state res
      -> hist_inv_Box_closure1_Global self res_state
  
  predicate postcondition_mut_Box_Box_closure1_Global_Global [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: Int32.t) =
    postcondition_mut_Box_closure1_Global self args result_state result
  
  meta "rewrite_def" predicate postcondition_mut_Box_Box_closure1_Global_Global
  
  function fn_mut_once_Box_Box_closure1_Global_Global (self: closure1) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_Box_Box_closure1_Global_Global_spec:
    forall self: closure1, args: (), res: Int32.t. postcondition_once_Box_Box_closure1_Global_Global self args res
      = (exists res_state: closure1. postcondition_mut_Box_Box_closure1_Global_Global self args res_state res
        /\ resolve_Box_Box_closure1_Global_Global res_state)
  
  predicate hist_inv_Box_Box_closure1_Global_Global [@inline:trivial] (self: closure1) (result_state: closure1) =
    hist_inv_Box_closure1_Global self result_state
  
  meta "rewrite_def" predicate hist_inv_Box_Box_closure1_Global_Global
  
  function hist_inv_trans_Box_Box_closure1_Global_Global (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_Box_Box_closure1_Global_Global_spec:
    forall self: closure1, b: closure1, c: closure1. hist_inv_Box_Box_closure1_Global_Global self b
      -> hist_inv_Box_Box_closure1_Global_Global b c -> hist_inv_Box_Box_closure1_Global_Global self c
  
  function hist_inv_refl_Box_Box_closure1_Global_Global (self: closure1) : ()
  
  axiom hist_inv_refl_Box_Box_closure1_Global_Global_spec:
    forall self: closure1. hist_inv_Box_Box_closure1_Global_Global self self
  
  function postcondition_mut_hist_inv_Box_Box_closure1_Global_Global (self: closure1) (args: ()) (res_state: closure1) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_Box_Box_closure1_Global_Global_spec:
    forall self: closure1, args: (), res_state: closure1, res: Int32.t. postcondition_mut_Box_Box_closure1_Global_Global self args res_state res
      -> hist_inv_Box_Box_closure1_Global_Global self res_state
  
  let rec call_fnmut_Box_Box_closure1_Global_Global (f: closure1) (return (x: Int32.t)) =
    {[@expl:call_fnmut requires #0] precondition_Box_Box_closure1_Global_Global f ()}
    {[@expl:call_fnmut requires #1] forall st1: closure1, r: Int32.t. postcondition_mut_Box_Box_closure1_Global_Global f () st1 r
      -> precondition_Box_Box_closure1_Global_Global st1 ()}
    any
    [ return (result: Int32.t) ->
    {exists st1: closure1, st2: closure1, r: Int32.t. postcondition_mut_Box_Box_closure1_Global_Global f () st1 r
        /\ postcondition_mut_Box_Box_closure1_Global_Global st1 () st2 result
        /\ resolve_Box_Box_closure1_Global_Global st2}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut2box (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut2box requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret: MutBorrow.t closure1) -> [ &_7 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = call_fnmut_Box_ref_closure1_Global {_7} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = call_fnmut_Box_Box_closure1_Global_Global {c} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0 [ s0 = {[@expl:assertion] UInt32.t'int x = 100004} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure1 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _7: MutBorrow.t closure1 = Any.any_l ()
    | & _8: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_test_fnmut3box
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type closure0 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve_ref_closure0 [@inline:trivial] (_1: MutBorrow.t closure0) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_closure0
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  predicate resolve_closure0 [@inline:trivial] (_1: closure0) = resolve_ref_u32 _1.c0
  
  meta "rewrite_def" predicate resolve_closure0
  
  predicate hist_inv_closure0 [@inline:trivial] (self: closure0) (result_state: closure0) =
    result_state.c0.final = self.c0.final
  
  meta "rewrite_def" predicate hist_inv_closure0
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (return (x: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.current.c0.current} {(1: UInt32.t)}
          (fun (_ret: UInt32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve_ref_closure0 self}- s2
      | s2 = [ &_0 <- (5: Int32.t) ] s3
      | s3 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & self: MutBorrow.t closure0 = self ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: ()) (result: Int32.t) =
    exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current = self
          /\ bor_self.final = e /\ closure0'post'return bor_self result /\ hist_inv_closure0 self e)
      /\ resolve_closure0 e
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  predicate postcondition_mut_closure0 [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: Int32.t) =
    exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self result /\ hist_inv_closure0 self result_state
  
  meta "rewrite_def" predicate postcondition_mut_closure0
  
  function fn_mut_once_closure0 (self: closure0) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_closure0_spec:
    forall self: closure0, args: (), res: Int32.t. postcondition_once_closure0 self args res
      = (exists res_state: closure0. postcondition_mut_closure0 self args res_state res /\ resolve_closure0 res_state)
  
  function hist_inv_trans_closure0 (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_closure0_spec: forall self: closure0, b: closure0, c: closure0. hist_inv_closure0 self b
      -> hist_inv_closure0 b c -> hist_inv_closure0 self c
  
  function hist_inv_refl_closure0 (self: closure0) : ()
  
  axiom hist_inv_refl_closure0_spec: forall self: closure0. hist_inv_closure0 self self
  
  function postcondition_mut_hist_inv_closure0 (self: closure0) (args: ()) (res_state: closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_closure0_spec:
    forall self: closure0, args: (), res_state: closure0, res: Int32.t. postcondition_mut_closure0 self args res_state res
      -> hist_inv_closure0 self res_state
  
  predicate precondition_closure0 [@inline:trivial] (self: closure0) (args: ()) =
    forall bor_self: MutBorrow.t closure0. bor_self.current = self -> closure0'pre bor_self
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate precondition_ref_closure0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) =
    precondition_closure0 self.current args
  
  meta "rewrite_def" predicate precondition_ref_closure0
  
  predicate precondition_ref_ref_closure0 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t closure0)) (args: ()) =
    precondition_ref_closure0 self.current args
  
  meta "rewrite_def" predicate precondition_ref_ref_closure0
  
  predicate postcondition_once_ref_closure0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) (result: Int32.t) =
    postcondition_mut_closure0 self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once_ref_closure0
  
  predicate postcondition_mut_ref_closure0 [@inline:trivial] (self: MutBorrow.t closure0) (args: ()) (result_state: MutBorrow.t closure0) (result: Int32.t) =
    postcondition_mut_closure0 self.current args result_state.current result /\ self.final = result_state.final
  
  meta "rewrite_def" predicate postcondition_mut_ref_closure0
  
  function fn_mut_once_ref_closure0 (self: MutBorrow.t closure0) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_ref_closure0_spec:
    forall self: MutBorrow.t closure0, args: (), res: Int32.t. postcondition_once_ref_closure0 self args res
      = (exists res_state: MutBorrow.t closure0. postcondition_mut_ref_closure0 self args res_state res
        /\ resolve_ref_closure0 res_state)
  
  predicate hist_inv_ref_closure0 [@inline:trivial] (self: MutBorrow.t closure0) (result_state: MutBorrow.t closure0) =
    hist_inv_closure0 self.current result_state.current /\ self.final = result_state.final
  
  meta "rewrite_def" predicate hist_inv_ref_closure0
  
  function hist_inv_trans_ref_closure0 (self: MutBorrow.t closure0) (b: MutBorrow.t closure0) (c: MutBorrow.t closure0) : ()
  
  axiom hist_inv_trans_ref_closure0_spec:
    forall self: MutBorrow.t closure0, b: MutBorrow.t closure0, c: MutBorrow.t closure0. hist_inv_ref_closure0 self b
      -> hist_inv_ref_closure0 b c -> hist_inv_ref_closure0 self c
  
  function hist_inv_refl_ref_closure0 (self: MutBorrow.t closure0) : ()
  
  axiom hist_inv_refl_ref_closure0_spec: forall self: MutBorrow.t closure0. hist_inv_ref_closure0 self self
  
  function postcondition_mut_hist_inv_ref_closure0 (self: MutBorrow.t closure0) (args: ()) (res_state: MutBorrow.t closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_ref_closure0_spec:
    forall self: MutBorrow.t closure0, args: (), res_state: MutBorrow.t closure0, res: Int32.t. postcondition_mut_ref_closure0 self args res_state res
      -> hist_inv_ref_closure0 self res_state
  
  predicate postcondition_once_ref_ref_closure0 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t closure0)) (args: ()) (result: Int32.t) =
    postcondition_mut_ref_closure0 self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once_ref_ref_closure0
  
  let rec call_fnonce_ref_ref_closure0 (f: MutBorrow.t (MutBorrow.t closure0)) (return (x: Int32.t)) =
    {[@expl:call_fnonce requires] precondition_ref_ref_closure0 f ()}
    any [ return (result: Int32.t) -> {postcondition_once_ref_ref_closure0 f () result} (! return {result}) ]
  
  predicate precondition_Box_closure0_Global [@inline:trivial] (self: closure0) (args: ()) =
    precondition_closure0 self args
  
  meta "rewrite_def" predicate precondition_Box_closure0_Global
  
  predicate precondition_Box_Box_closure0_Global_Global [@inline:trivial] (self: closure0) (args: ()) =
    precondition_Box_closure0_Global self args
  
  meta "rewrite_def" predicate precondition_Box_Box_closure0_Global_Global
  
  predicate postcondition_once_Box_closure0_Global [@inline:trivial] (self: closure0) (args: ()) (result: Int32.t) =
    postcondition_once_closure0 self args result
  
  meta "rewrite_def" predicate postcondition_once_Box_closure0_Global
  
  predicate postcondition_once_Box_Box_closure0_Global_Global [@inline:trivial] (self: closure0) (args: ()) (result: Int32.t) =
    postcondition_once_Box_closure0_Global self args result
  
  meta "rewrite_def" predicate postcondition_once_Box_Box_closure0_Global_Global
  
  let rec call_fnonce_Box_Box_closure0_Global_Global (f: closure0) (return (x: Int32.t)) =
    {[@expl:call_fnonce requires] precondition_Box_Box_closure0_Global_Global f ()}
    any
    [ return (result: Int32.t) -> {postcondition_once_Box_Box_closure0_Global_Global f () result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_fnmut3box (x: UInt32.t) (return (x'0: ())) = {[@expl:test_fnmut3box requires] UInt32.t'int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_4 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = [ &c <- { c0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure0> {c}
          (fun (_ret: MutBorrow.t closure0) -> [ &_7 <- _ret ] [ &c <- _ret.final ] s3)
      | s3 = MutBorrow.borrow_mut <MutBorrow.t closure0> {_7}
          (fun (_ret: MutBorrow.t (MutBorrow.t closure0)) -> [ &_6 <- _ret ] [ &_7 <- _ret.final ] s4)
      | s4 = call_fnonce_ref_ref_closure0 {_6} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0 [ s0 = -{resolve_ref_closure0 _7}- s1 | s1 = bb3 ]
    | bb3 = s0
      [ s0 = call_fnonce_Box_Box_closure0_Global_Global {c} (fun (_ret: Int32.t) -> [ &_8 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = {[@expl:assertion] UInt32.t'int x = 100002} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: UInt32.t = x
    | & c: closure0 = Any.any_l ()
    | & _4: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _6: MutBorrow.t (MutBorrow.t closure0) = Any.any_l ()
    | & _7: MutBorrow.t closure0 = Any.any_l ()
    | & _8: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
