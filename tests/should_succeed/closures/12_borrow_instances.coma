module M_12_borrow_instances__test1 [#"12_borrow_instances.rs" 8 0 8 59]
  let%span s12_borrow_instances = "12_borrow_instances.rs" 5 10 5 73
  let%span s12_borrow_instances'0 = "12_borrow_instances.rs" 6 10 6 112
  let%span s12_borrow_instances'1 = "12_borrow_instances.rs" 7 10 7 82
  let%span s12_borrow_instances'2 = "12_borrow_instances.rs" 8 60 8 62
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  
  use creusot.int.UInt32
  
  type t_F
  
  predicate postcondition_once (self: t_F) (args: UInt32.t) (result: bool)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: UInt32.t) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: UInt32.t, res: bool. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: UInt32.t) (result: bool)
  
  function fn_once (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_once_spec: forall self: t_F, args: UInt32.t, res: bool. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate postcondition_once'0 (self: t_F) (args: UInt32.t) (result: bool) = postcondition self args result
  
  predicate resolve'0 (_0: t_F)
  
  predicate postcondition_mut'0 (self: t_F) (args: UInt32.t) (result_state: t_F) (result: bool) =
    postcondition self args result /\ self = result_state
  
  function fn_mut_once'0 (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec'0: forall self: t_F, args: UInt32.t, res: bool. [%#sops'8] postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv'0 (self: t_F) (result_state: t_F) = self = result_state
  
  function hist_inv_trans'0 (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec'0: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv'0 self b)
      -> ([%#sops'6] hist_inv'0 b c) -> ([%#sops'7] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: t_F. [%#sops'4] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. ([%#sops'2] postcondition_mut'0 self args res_state res)
      -> ([%#sops'3] hist_inv'0 self res_state)
  
  function fn_hist_inv'0 (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec'0: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv'0 self res_state = (self = res_state)
  
  predicate postcondition'0 (self: t_F) (args: UInt32.t) (result: bool) = postcondition self args result
  
  function fn_once'0 (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_once_spec'0: forall self: t_F, args: UInt32.t, res: bool. [%#sops'0] postcondition_once'0 self args res
      = (postcondition'0 self args res /\ resolve'0 self)
  
  function fn_mut'0 (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom fn_mut_spec'0:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. [%#sops] postcondition_mut'0 self args res_state res
      = (postcondition'0 self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant x : t_F
  
  constant n : UInt32.t
  
  constant r : bool
  
  function test1 [#"12_borrow_instances.rs" 8 0 8 59] (x'0: t_F) (n'0: UInt32.t) (r'0: bool) : ()
  
  goal vc_test1: ([@expl:test1 ensures #0] [%#s12_borrow_instances] postcondition'0 x n r = postcondition x n r)
    && ([@expl:test1 ensures #1] [%#s12_borrow_instances'0] forall xx: t_F. postcondition_mut'0 x n xx r
        = (postcondition x n r /\ x = xx))
    && ([@expl:test1 ensures #2] [%#s12_borrow_instances'1] postcondition_once'0 x n r = postcondition x n r)
end
module M_12_borrow_instances__test2 [#"12_borrow_instances.rs" 13 0 13 66]
  let%span s12_borrow_instances = "12_borrow_instances.rs" 11 10 11 130
  let%span s12_borrow_instances'0 = "12_borrow_instances.rs" 12 10 12 93
  let%span s12_borrow_instances'1 = "12_borrow_instances.rs" 13 67 13 69
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  
  type t_F
  
  predicate postcondition_once (self: t_F) (args: UInt32.t) (result: bool)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: UInt32.t) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: UInt32.t, res: bool. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate postcondition_once'0 (self: MutBorrow.t t_F) (args: UInt32.t) (result: bool) =
    postcondition_mut self.current args self.final result
  
  predicate resolve'0 (self: MutBorrow.t t_F) = [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t t_F) = resolve'0 _0
  
  predicate postcondition_mut'0 (self: MutBorrow.t t_F) (args: UInt32.t) (result_state: MutBorrow.t t_F) (result: bool) =
    postcondition_mut self.current args result_state.current result /\ self.final = result_state.final
  
  function fn_mut_once'0 (self: MutBorrow.t t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec'0:
    forall self: MutBorrow.t t_F, args: UInt32.t, res: bool. [%#sops'5] postcondition_once'0 self args res
      = (exists res_state: MutBorrow.t t_F. postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv'0 (self: MutBorrow.t t_F) (result_state: MutBorrow.t t_F) =
    hist_inv self.current result_state.current /\ self.final = result_state.final
  
  function hist_inv_trans'0 (self: MutBorrow.t t_F) (b: MutBorrow.t t_F) (c: MutBorrow.t t_F) : ()
  
  axiom hist_inv_trans_spec'0:
    forall self: MutBorrow.t t_F, b: MutBorrow.t t_F, c: MutBorrow.t t_F. ([%#sops'2] hist_inv'0 self b)
      -> ([%#sops'3] hist_inv'0 b c) -> ([%#sops'4] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: MutBorrow.t t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: MutBorrow.t t_F. [%#sops'1] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: MutBorrow.t t_F) (args: UInt32.t) (res_state: MutBorrow.t t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: MutBorrow.t t_F, args: UInt32.t, res_state: MutBorrow.t t_F, res: bool. ([%#sops] postcondition_mut'0 self args res_state res)
      -> ([%#sops'0] hist_inv'0 self res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant x : MutBorrow.t t_F
  
  constant n : UInt32.t
  
  constant r : bool
  
  function test2 [#"12_borrow_instances.rs" 13 0 13 66] (x'0: MutBorrow.t t_F) (n'0: UInt32.t) (r'0: bool) : ()
  
  goal vc_test2:
    ([@expl:test2 ensures #0] [%#s12_borrow_instances] forall xx: MutBorrow.t t_F. postcondition_mut'0 x n xx r
        = (postcondition_mut x.current n xx.current r /\ x.final = xx.final))
    && ([@expl:test2 ensures #1] [%#s12_borrow_instances'0] postcondition_once'0 x n r
    = postcondition_mut x.current n x.final r)
end
