module M_12_borrow_instances__test1
  use creusot.int.UInt32
  
  type t_F
  
  predicate postcondition_once (self: t_F) (args: UInt32.t) (result: bool)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: UInt32.t) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: UInt32.t, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: UInt32.t) (result: bool)
  
  function fn_once (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_once_spec: forall self: t_F, args: UInt32.t, res: bool. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate postcondition_once'0 [@inline:trivial] (self: t_F) (args: UInt32.t) (result: bool) =
    postcondition self args result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  predicate resolve'0 (_0: t_F)
  
  predicate postcondition_mut'0 [@inline:trivial] (self: t_F) (args: UInt32.t) (result_state: t_F) (result: bool) =
    postcondition self args result /\ self = result_state
  
  meta "rewrite_def" predicate postcondition_mut'0
  
  function fn_mut_once'0 (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec'0: forall self: t_F, args: UInt32.t, res: bool. postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv'0 [@inline:trivial] (self: t_F) (result_state: t_F) = self = result_state
  
  meta "rewrite_def" predicate hist_inv'0
  
  function hist_inv_trans'0 (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec'0: forall self: t_F, b: t_F, c: t_F. hist_inv'0 self b
      -> hist_inv'0 b c -> hist_inv'0 self c
  
  function hist_inv_refl'0 (self: t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: t_F. hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. postcondition_mut'0 self args res_state res
      -> hist_inv'0 self res_state
  
  function fn_hist_inv'0 (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec'0: forall self: t_F, res_state: t_F. hist_inv'0 self res_state = (self = res_state)
  
  predicate postcondition'0 [@inline:trivial] (self: t_F) (args: UInt32.t) (result: bool) =
    postcondition self args result
  
  meta "rewrite_def" predicate postcondition'0
  
  function fn_once'0 (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_once_spec'0: forall self: t_F, args: UInt32.t, res: bool. postcondition_once'0 self args res
      = (postcondition'0 self args res /\ resolve'0 self)
  
  function fn_mut'0 (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom fn_mut_spec'0:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. postcondition_mut'0 self args res_state res
      = (postcondition'0 self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant x : t_F
  
  constant n : UInt32.t
  
  constant r : bool
  
  function test1 (x'0: t_F) (n'0: UInt32.t) (r'0: bool) : ()
  
  goal vc_test1: ([@expl:test1 ensures #0] postcondition'0 x n r = postcondition x n r)
    && ([@expl:test1 ensures #1] forall xx: t_F. postcondition_mut'0 x n xx r = (postcondition x n r /\ x = xx))
    && ([@expl:test1 ensures #2] postcondition_once'0 x n r = postcondition x n r)
end
module M_12_borrow_instances__test2
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  
  type t_F
  
  predicate postcondition_once (self: t_F) (args: UInt32.t) (result: bool)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: UInt32.t) (result_state: t_F) (result: bool)
  
  function fn_mut_once (self: t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: UInt32.t, res: bool. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: UInt32.t) (res_state: t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: UInt32.t, res_state: t_F, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate postcondition_once'0 [@inline:trivial] (self: MutBorrow.t t_F) (args: UInt32.t) (result: bool) =
    postcondition_mut self.current args self.final result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  predicate resolve'0 [@inline:trivial] (self: MutBorrow.t t_F) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: MutBorrow.t t_F) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate postcondition_mut'0 [@inline:trivial] (self: MutBorrow.t t_F) (args: UInt32.t) (result_state: MutBorrow.t t_F) (result: bool) =
    postcondition_mut self.current args result_state.current result /\ self.final = result_state.final
  
  meta "rewrite_def" predicate postcondition_mut'0
  
  function fn_mut_once'0 (self: MutBorrow.t t_F) (args: UInt32.t) (res: bool) : ()
  
  axiom fn_mut_once_spec'0: forall self: MutBorrow.t t_F, args: UInt32.t, res: bool. postcondition_once'0 self args res
      = (exists res_state: MutBorrow.t t_F. postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv'0 [@inline:trivial] (self: MutBorrow.t t_F) (result_state: MutBorrow.t t_F) =
    hist_inv self.current result_state.current /\ self.final = result_state.final
  
  meta "rewrite_def" predicate hist_inv'0
  
  function hist_inv_trans'0 (self: MutBorrow.t t_F) (b: MutBorrow.t t_F) (c: MutBorrow.t t_F) : ()
  
  axiom hist_inv_trans_spec'0: forall self: MutBorrow.t t_F, b: MutBorrow.t t_F, c: MutBorrow.t t_F. hist_inv'0 self b
      -> hist_inv'0 b c -> hist_inv'0 self c
  
  function hist_inv_refl'0 (self: MutBorrow.t t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: MutBorrow.t t_F. hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: MutBorrow.t t_F) (args: UInt32.t) (res_state: MutBorrow.t t_F) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: MutBorrow.t t_F, args: UInt32.t, res_state: MutBorrow.t t_F, res: bool. postcondition_mut'0 self args res_state res
      -> hist_inv'0 self res_state
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant x : MutBorrow.t t_F
  
  constant n : UInt32.t
  
  constant r : bool
  
  function test2 (x'0: MutBorrow.t t_F) (n'0: UInt32.t) (r'0: bool) : ()
  
  goal vc_test2: ([@expl:test2 ensures #0] forall xx: MutBorrow.t t_F. postcondition_mut'0 x n xx r
        = (postcondition_mut x.current n xx.current r /\ x.final = xx.final))
    && ([@expl:test2 ensures #1] postcondition_once'0 x n r = postcondition_mut x.current n x.final r)
end
