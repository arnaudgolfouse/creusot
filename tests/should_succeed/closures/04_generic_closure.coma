module M_04_generic_closure__generic_closure [#"04_generic_closure.rs" 5 0 5 56]
  let%span s04_generic_closure = "04_generic_closure.rs" 5 40 5 41
  let%span s04_generic_closure'0 = "04_generic_closure.rs" 5 46 5 47
  let%span s04_generic_closure'1 = "04_generic_closure.rs" 5 55 5 56
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 199 16 199 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 201 31 201 34
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 199 27 199 52
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 200 26 200 60
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 114
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 100
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 179 14 179 61
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 59
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 134 14 134 38
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 139 14 139 33
  let%span sops'9 = "../../../creusot-contracts/src/std/ops.rs" 144 15 144 31
  let%span sops'10 = "../../../creusot-contracts/src/std/ops.rs" 145 15 145 28
  let%span sops'11 = "../../../creusot-contracts/src/std/ops.rs" 146 14 146 30
  let%span sops'12 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_B
  
  type t_F
  
  type t_A
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate inv'1 (_0: t_A)
  
  predicate inv'2 (_0: t_A)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_A [inv'2 x]. inv'2 x = (let x0 = x in inv'1 x0)
  
  predicate precondition (self: t_F) (args: t_A)
  
  predicate inv'3 (_0: t_B)
  
  predicate postcondition_once (self: t_F) (args: t_A) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_A) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: t_A) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_A, res: t_B. [%#sops'12] postcondition_once self args res
  = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'9] hist_inv self b)
   -> ([%#sops'10] hist_inv b c)  -> ([%#sops'11] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'8] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_A) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: t_F, args: t_A, res_state: t_F, res: t_B. ([%#sops'6] postcondition_mut self args res_state res)
   -> ([%#sops'7] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'5] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: t_A) (result: t_B)
  
  function fn_once (self: t_F) (args: t_A) (res: t_B) : ()
  
  axiom fn_once_spec: forall self: t_F, args: t_A, res: t_B. [%#sops'4] postcondition_once self args res
  = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: t_A) (res_state: t_F) (res: t_B) : ()
  
  axiom fn_mut_spec: forall self: t_F, args: t_A, res_state: t_F, res: t_B. [%#sops'3] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  let rec call (self_:t_F) (arg:t_A) (return'  (x:t_B))= {[@expl:call 'self_' type invariant] [%#sops] inv'0 self_}
    {[@expl:call 'arg' type invariant] [%#sops'0] inv'2 arg}
    {[@expl:call requires] [%#sops'1] precondition self_ arg}
    any [ return''0 (result:t_B)-> {inv'3 result} {[%#sops'2] postcondition self_ arg result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec generic_closure[#"04_generic_closure.rs" 5 0 5 56] (f:t_F) (a:t_A) (return'  (x:t_B))= {[@expl:generic_closure 'f' type invariant] [%#s04_generic_closure] inv f}
    {[@expl:generic_closure 'a' type invariant] [%#s04_generic_closure'0] inv'1 a}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_4 <- a'0 ] s1 | s1 = call {f'0} {_4} (fun (_ret:t_B) ->  [ &_0 <- _ret ] s2) | s2 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb4 ] 
    | bb4 = return''0 {_0} ]
     [ & _0: t_B = Any.any_l () | & f'0: t_F = f | & a'0: t_A = a | & _4: t_A = Any.any_l () ] )
    [ return''0 (result:t_B)-> {[@expl:generic_closure result type invariant] [%#s04_generic_closure'1] inv'3 result}
      (! return' {result}) ]

end
module M_04_generic_closure__mapper [#"04_generic_closure.rs" 9 0 9 22]
  let%span s04_generic_closure = "04_generic_closure.rs" 9 17 9 18
  let%span s04_generic_closure'0 = "04_generic_closure.rs" 10 29 10 31
  let%span s04_generic_closure'1 = "04_generic_closure.rs" 5 46 5 47
  
  use creusot.prelude.Any
  
  type t_A
  
  predicate inv (_0: t_A)
  
  predicate resolve (_0: t_A)
  
  let rec closure0[#"04_generic_closure.rs" 10 28 10 32] [@coma:extspec] (self:()) (_a:t_A) (return'  (x:()))= bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv _a'0} s1 | s1 = -{resolve _a'0}- s2 | s2 = bb1 ] 
    | bb1 = return' {_0} ]
     [ & _0: () = Any.any_l () | & _a'0: t_A = _a ] 
  
  let rec generic_closure (f:()) (a:t_A) (return'  (x:()))= {[@expl:generic_closure 'a' type invariant] [%#s04_generic_closure'1] inv a}
    any [ return''0 (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec mapper[#"04_generic_closure.rs" 9 0 9 22] (x:t_A) (return'  (x'0:()))= {[@expl:mapper 'x' type invariant] [%#s04_generic_closure] inv x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- () ] s1 | s1 = generic_closure {_3} {x'0} (fun (_ret:()) ->  [ &_2 <- _ret ] s2) | s2 = bb2 ]
    
    | bb2 = return''0 {_0} ]
     [ & _0: () = Any.any_l () | & x'0: t_A = x | & _2: () = Any.any_l () | & _3: () = Any.any_l () ] )
    [ return''0 (result:())-> (! return' {result}) ]

end
