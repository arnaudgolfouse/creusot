module M_06_fn_specs__weaken_std
  use creusot.prelude.Any
  
  type t_F
  
  type t_A
  
  type t_Output
  
  predicate inv (_0: t_F)
  
  predicate inv'0 (_0: t_A)
  
  predicate precondition (self: t_F) (args: t_A)
  
  predicate inv'1 (_0: t_Output)
  
  predicate postcondition_once (self: t_F) (args: t_A) (result: t_Output)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_A) (result_state: t_F) (result: t_Output)
  
  function fn_mut_once (self: t_F) (args: t_A) (res: t_Output) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_A, res: t_Output. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_A) (res_state: t_F) (res: t_Output) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_A, res_state: t_F, res: t_Output. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec weaken_2_std (f: t_F) (a: t_A) (return (x: t_Output)) = {[@expl:weaken_2_std 'f' type invariant] inv f}
    {[@expl:weaken_2_std 'a' type invariant] inv'0 a}
    {[@expl:weaken_2_std requires] precondition f a}
    any
    [ return' (result: t_Output) -> {inv'1 result}
      {exists f2: t_F. postcondition_mut f a f2 result /\ resolve f2}
      (! return {result}) ]
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: t_A) (result: t_Output)
  
  function fn_once (self: t_F) (args: t_A) (res: t_Output) : ()
  
  axiom fn_once_spec: forall self: t_F, args: t_A, res: t_Output. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: t_A) (res_state: t_F) (res: t_Output) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: t_A, res_state: t_F, res: t_Output. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec weaken_std (f: t_F) (a: t_A) (return (x: t_Output)) = {[@expl:weaken_std 'f' type invariant] inv f}
    {[@expl:weaken_std 'a' type invariant] inv'0 a}
    {[@expl:weaken_std requires] precondition f a}
    (! bb0
    [ bb0 = s0 [ s0 = weaken_2_std {f} {a} (fun (_ret: t_Output) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return {_0} ] [ & _0: t_Output = Any.any_l () | & f: t_F = f | & a: t_A = a ])
    [ return (result: t_Output) -> {[@expl:weaken_std result type invariant] inv'1 result}
      {[@expl:weaken_std ensures] postcondition f a result}
      (! return {result}) ]
end
module M_06_fn_specs__weaken_2_std
  use creusot.prelude.Any
  
  type t_F
  
  type t_A
  
  type t_Output
  
  predicate inv (_0: t_F)
  
  predicate inv'0 (_0: t_A)
  
  predicate precondition (self: t_F) (args: t_A)
  
  predicate inv'1 (_0: t_Output)
  
  predicate postcondition_once (self: t_F) (args: t_A) (result: t_Output)
  
  let rec weaken_3_std (f: t_F) (a: t_A) (return (x: t_Output)) = {[@expl:weaken_3_std 'f' type invariant] inv f}
    {[@expl:weaken_3_std 'a' type invariant] inv'0 a}
    {[@expl:weaken_3_std requires] precondition f a}
    any [ return' (result: t_Output) -> {inv'1 result} {postcondition_once f a result} (! return {result}) ]
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_A) (result_state: t_F) (result: t_Output)
  
  function fn_mut_once (self: t_F) (args: t_A) (res: t_Output) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_A, res: t_Output. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_A) (res_state: t_F) (res: t_Output) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: t_A, res_state: t_F, res: t_Output. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec weaken_2_std (f: t_F) (a: t_A) (return (x: t_Output)) = {[@expl:weaken_2_std 'f' type invariant] inv f}
    {[@expl:weaken_2_std 'a' type invariant] inv'0 a}
    {[@expl:weaken_2_std requires] precondition f a}
    (! bb0
    [ bb0 = s0 [ s0 = weaken_3_std {f} {a} (fun (_ret: t_Output) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return {_0} ] [ & _0: t_Output = Any.any_l () | & f: t_F = f | & a: t_A = a ])
    [ return (result: t_Output) -> {[@expl:weaken_2_std result type invariant] inv'1 result}
      {[@expl:weaken_2_std ensures] exists f2: t_F. postcondition_mut f a f2 result /\ resolve f2}
      (! return {result}) ]
end
module M_06_fn_specs__weaken_3_std
  use creusot.prelude.Any
  
  type t_F
  
  type t_A
  
  type t_Output
  
  predicate inv (_0: t_F)
  
  predicate inv'0 (_0: t_A)
  
  predicate precondition (self: t_F) (args: t_A)
  
  predicate inv'1 (_0: t_Output)
  
  predicate postcondition_once (self: t_F) (args: t_A) (result: t_Output)
  
  let rec call_once (self_: t_F) (arg: t_A) (return (x: t_Output)) =
    {[@expl:call_once 'self_' type invariant] inv self_}
    {[@expl:call_once 'arg' type invariant] inv'0 arg}
    {[@expl:call_once requires] precondition self_ arg}
    any [ return' (result: t_Output) -> {inv'1 result} {postcondition_once self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec weaken_3_std (f: t_F) (a: t_A) (return (x: t_Output)) = {[@expl:weaken_3_std 'f' type invariant] inv f}
    {[@expl:weaken_3_std 'a' type invariant] inv'0 a}
    {[@expl:weaken_3_std requires] precondition f a}
    (! bb0
    [ bb0 = s0 [ s0 = call_once {f} {a} (fun (_ret: t_Output) -> [ &_0 <- _ret ] s1) | s1 = bb3 ] | bb3 = return {_0} ]
    [ & _0: t_Output = Any.any_l () | & f: t_F = f | & a: t_A = a ])
    [ return (result: t_Output) -> {[@expl:weaken_3_std result type invariant] inv'1 result}
      {[@expl:weaken_3_std ensures] postcondition_once f a result}
      (! return {result}) ]
end
module M_06_fn_specs__fn_once_user
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate precondition (self: t_F) (args: UInt64.t)
  
  predicate postcondition_once (self: t_F) (args: UInt64.t) (result: ())
  
  let rec call_once (self_: t_F) (arg: UInt64.t) (return (x: ())) = {[@expl:call_once 'self_' type invariant] inv self_}
    {[@expl:call_once requires] precondition self_ arg}
    any [ return' (result: ()) -> {postcondition_once self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec fn_once_user (f: t_F) (return (x: ())) = {[@expl:fn_once_user 'f' type invariant] inv f}
    {[@expl:fn_once_user requires] precondition f (0: UInt64.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- (0: UInt64.t) ] s1 | s1 = call_once {f} {_4} (fun (_ret: ()) -> [ &_0 <- _ret ] s2) | s2 = bb2 ]
    | bb2 = return {_0} ] [ & _0: () = Any.any_l () | & f: t_F = f | & _4: UInt64.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_06_fn_specs__caller
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  let rec closure0 [@coma:extspec] (self: ()) (_0: UInt64.t) (return (x: ())) = bb0
    [ bb0 = return {_0'0} ] [ & _0'0: () = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: UInt64.t) = let _0 = args in closure0'pre self _0
  
  meta "rewrite_def" predicate precondition
  
  let rec fn_once_user (f: ()) (return (x: ())) = {[@expl:fn_once_user requires] precondition f (0: UInt64.t)}
    any [ return' (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec caller (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_1 <- () ] s1 | s1 = fn_once_user {_1} (fun (_ret: ()) -> [ &_0 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = return {_0} ] [ & _0: () = Any.any_l () | & _1: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
