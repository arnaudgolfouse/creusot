module M_inference__call_with_one
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_1: t_F)
  
  predicate resolve (_1: t_F)
  
  predicate invariant' [@inline:trivial] (self: t_F) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec call (self_: t_F) (arg: Int32.t) (return (x: Int32.t)) = {[@expl:call 'self_' type invariant] inv'0 self_}
    {[@expl:call requires] precondition self_ arg}
    any [ return' (result: Int32.t) -> {postcondition self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_with_one (f: t_F) (return (x: Int32.t)) = {[@expl:call_with_one 'f' type invariant] inv f}
    {[@expl:call_with_one requires] precondition f (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv f} s1
      | s1 = -{resolve f}- s2
      | s2 = [ &_5 <- (1: Int32.t) ] s3
      | s3 = call {f} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s4)
      | s4 = bb2 ]
    | bb2 = return {_0} ] [ & _0: Int32.t = Any.any_l () | & f: t_F = f | & _5: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:call_with_one ensures] postcondition f (1: Int32.t) result}
      (! return {result}) ]
end
module M_inference__call_with_one_mut
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_1: t_F)
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_F) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_1: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec call_mut (self_: MutBorrow.t t_F) (arg: Int32.t) (return (x: Int32.t)) =
    {[@expl:call_mut 'self_' type invariant] inv'0 self_}
    {[@expl:call_mut requires] precondition self_.current arg}
    any [ return' (result: Int32.t) -> {postcondition_mut self_.current arg self_.final result} (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (self: MutBorrow.t t_F) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t t_F) = resolve'0 _1
  
  meta "rewrite_def" predicate resolve'1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_with_one_mut (f: MutBorrow.t t_F) (return (x: Int32.t)) =
    {[@expl:call_with_one_mut 'f' type invariant] inv'0 f}
    {[@expl:call_with_one_mut requires] precondition f.current (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv f.current}
        MutBorrow.borrow_final <t_F> {f.current} {MutBorrow.get_id f}
          (fun (_ret: MutBorrow.t t_F) ->
            [ &_4 <- _ret ] -{inv _ret.final}-
            [ &f <- { f with current = _ret.final } ] s1)
      | s1 = [ &_5 <- (1: Int32.t) ] s2
      | s2 = call_mut {_4} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'1 f}- s2 | s2 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & f: MutBorrow.t t_F = f
    | & _4: MutBorrow.t t_F = Any.any_l ()
    | & _5: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) ->
    {[@expl:call_with_one_mut ensures] postcondition_mut f.current (1: Int32.t) f.final result}
      (! return {result}) ]
end
module M_inference__call_with_one_once
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_1: t_F)
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  let rec call_once (self_: t_F) (arg: Int32.t) (return (x: Int32.t)) =
    {[@expl:call_once 'self_' type invariant] inv self_}
    {[@expl:call_once requires] precondition self_ arg}
    any [ return' (result: Int32.t) -> {postcondition_once self_ arg result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_with_one_once (f: t_F) (return (x: Int32.t)) = {[@expl:call_with_one_once 'f' type invariant] inv f}
    {[@expl:call_with_one_once requires] precondition f (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- (1: Int32.t) ] s1
      | s1 = call_once {f} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = return {_0} ] [ & _0: Int32.t = Any.any_l () | & f: t_F = f | & _5: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> {[@expl:call_with_one_once ensures] postcondition_once f (1: Int32.t) result}
      (! return {result}) ]
end
module M_inference__closure_fn
  use creusot.int.Int32
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  
  let rec closure0 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = Int32.add {x} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure0'pre self x
  
  meta "rewrite_def" predicate precondition
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let x = args in closure0'post'return self x result /\ resolve self
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: Int32.t) (result_state: ()) (result: Int32.t) =
    let x = args in closure0'post'return self x result /\ self = result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = self = result_state
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let x = args in closure0'post'return self x result
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec call_with_one (f: ()) (return (x: Int32.t)) = {[@expl:call_with_one requires] precondition f (1: Int32.t)}
    any [ return' (result: Int32.t) -> {postcondition f (1: Int32.t) result} (! return {result}) ]
  
  let rec call_with_one_mut (f: MutBorrow.t ()) (return (x: Int32.t)) =
    {[@expl:call_with_one_mut requires] precondition f.current (1: Int32.t)}
    any [ return' (result: Int32.t) -> {postcondition_mut f.current (1: Int32.t) f.final result} (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (self: MutBorrow.t ()) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t ()) = resolve'0 _1
  
  meta "rewrite_def" predicate resolve'1
  
  let rec call_with_one_once (f: ()) (return (x: Int32.t)) =
    {[@expl:call_with_one_once requires] precondition f (1: Int32.t)}
    any [ return' (result: Int32.t) -> {postcondition_once f (1: Int32.t) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec closure_fn (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &f <- () ] s1 | s1 = call_with_one {f} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_3 <- _4 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_3 = false} (! bb3) | br1 -> {_3} (! bb2) ] ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <()> {f} (fun (_ret: MutBorrow.t ()) -> [ &_11 <- _ret ] [ &f <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_final <()> {_11.current} {MutBorrow.get_id _11}
          (fun (_ret: MutBorrow.t ()) -> [ &_10 <- _ret ] [ &_11 <- { _11 with current = _ret.final } ] s2)
      | s2 = call_with_one_mut {_10} (fun (_ret: Int32.t) -> [ &_9 <- _ret ] s3)
      | s3 = bb4 ]
    | bb4 = s0
      [ s0 = -{resolve'1 _11}- s1
      | s1 = [ &_8 <- _9 = (2: Int32.t) ] s2
      | s2 = any [ br0 -> {_8 = false} (! bb6) | br1 -> {_8} (! bb5) ] ]
    | bb5 = s0 [ s0 = call_with_one_once {f} (fun (_ret: Int32.t) -> [ &_15 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_14 <- _15 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_14 = false} (! bb9) | br1 -> {_14} (! bb8) ] ]
    | bb8 = return {_0}
    | bb9 = {false} any
    | bb6 = {false} any
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & f: () = Any.any_l ()
    | & _3: bool = Any.any_l ()
    | & _4: Int32.t = Any.any_l ()
    | & _8: bool = Any.any_l ()
    | & _9: Int32.t = Any.any_l ()
    | & _10: MutBorrow.t () = Any.any_l ()
    | & _11: MutBorrow.t () = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_inference__closure_fn_mut
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type closure0 = { c0: MutBorrow.t Int32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure0) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure0) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure0) = resolve'2 _1.c0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure0) (result_state: closure0) =
    (result_state.c0).final = (self.c0).final
  
  meta "rewrite_def" predicate hist_inv
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (x: Int32.t) (return (x'0: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = Int32.add {((self.current).c0).current} {x}
          (fun (_ret: Int32.t) ->
            [ &self <- { self with current = { c0 = { (self.current).c0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 self}- s2
      | s2 = [ &_0 <- ((self.current).c0).current ] s3
      | s3 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & self: MutBorrow.t closure0 = self | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: Int32.t) (result: Int32.t) =
    let x = args in exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current = self
          /\ bor_self.final = e /\ closure0'post'return bor_self x result /\ hist_inv self e)
      /\ resolve'3 e
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: closure0) (args: Int32.t) (result_state: closure0) (result: Int32.t) =
    let x = args in exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self x result /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure0) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: Int32.t, res: Int32.t. postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: Int32.t) (res_state: closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: Int32.t, res_state: closure0, res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  predicate precondition [@inline:trivial] (self: closure0) (args: Int32.t) =
    let x = args in forall bor_self: MutBorrow.t closure0. bor_self.current = self -> closure0'pre bor_self x
  
  meta "rewrite_def" predicate precondition
  
  let rec call_with_one_mut (f: MutBorrow.t closure0) (return (x: Int32.t)) =
    {[@expl:call_with_one_mut requires] precondition f.current (1: Int32.t)}
    any [ return' (result: Int32.t) -> {postcondition_mut f.current (1: Int32.t) f.final result} (! return {result}) ]
  
  let rec call_with_one_once (f: closure0) (return (x: Int32.t)) =
    {[@expl:call_with_one_once requires] precondition f (1: Int32.t)}
    any [ return' (result: Int32.t) -> {postcondition_once f (1: Int32.t) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec closure_fn_mut (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &y <- (0: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {y}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_3 <- _ret ] [ &y <- _ret.final ] s2)
      | s2 = [ &f <- { c0 = _3 } ] s3
      | s3 = MutBorrow.borrow_mut <closure0> {f}
          (fun (_ret: MutBorrow.t closure0) -> [ &_8 <- _ret ] [ &f <- _ret.final ] s4)
      | s4 = MutBorrow.borrow_final <closure0> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret: MutBorrow.t closure0) -> [ &_7 <- _ret ] [ &_8 <- { _8 with current = _ret.final } ] s5)
      | s5 = call_with_one_mut {_7} (fun (_ret: Int32.t) -> [ &_6 <- _ret ] s6)
      | s6 = bb1 ]
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = [ &_5 <- _6 = (1: Int32.t) ] s2
      | s2 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb2) ] ]
    | bb2 = s0 [ s0 = call_with_one_once {f} (fun (_ret: Int32.t) -> [ &_12 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_11 <- _12 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_16 <- y = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_16 = false} (! bb8) | br1 -> {_16} (! bb7) ] ]
    | bb7 = return {_0}
    | bb8 = {false} any
    | bb6 = {false} any
    | bb3 = s0 [ s0 = -{resolve'3 f}- s1 | s1 = {false} any ] ]
    [ & _0: () = Any.any_l ()
    | & y: Int32.t = Any.any_l ()
    | & f: closure0 = Any.any_l ()
    | & _3: MutBorrow.t Int32.t = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _6: Int32.t = Any.any_l ()
    | & _7: MutBorrow.t closure0 = Any.any_l ()
    | & _8: MutBorrow.t closure0 = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _12: Int32.t = Any.any_l ()
    | & _16: bool = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_inference__closure_fn_once
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type closure0 = { c0: Int32.t; c1: Int32.t }
  
  let rec closure0 [@coma:extspec] (self: closure0) (x: Int32.t) (return (x'0: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = [ &move_y <- self.c0 ] s1
      | s1 = Int32.add {move_y} {x} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s2)
      | s2 = Int32.add {self.c1} {_4} (fun (_ret: Int32.t) -> [ &self <- { self with c1 = _ret } ] s3)
      | s3 = [ &_0 <- self.c1 ] s4
      | s4 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & self: closure0 = self
    | & x: Int32.t = x
    | & move_y: Int32.t = Any.any_l ()
    | & _4: Int32.t = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: closure0) (args: Int32.t) = let x = args in closure0'pre self x
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: Int32.t) (result: Int32.t) =
    let x = args in closure0'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec call_with_one_once (f: closure0) (return (x: Int32.t)) =
    {[@expl:call_with_one_once requires] precondition f (1: Int32.t)}
    any [ return' (result: Int32.t) -> {postcondition_once f (1: Int32.t) result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec closure_fn_once (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &y <- (2: Int32.t) ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &z <- (0: Int32.t) ] s1
      | s1 = [ &f <- { c0 = y; c1 = z } ] s2
      | s2 = call_with_one_once {f} (fun (_ret: Int32.t) -> [ &_6 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0 [ s0 = [ &_5 <- _6 = (3: Int32.t) ] s1 | s1 = any [ br0 -> {_5 = false} (! bb4) | br1 -> {_5} (! bb3) ] ]
    | bb3 = s0
      [ s0 = [ &_10 <- z = (0: Int32.t) ] s1 | s1 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb8) ] ]
    | bb8 = return {_0}
    | bb6 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & y: Int32.t = Any.any_l ()
    | & z: Int32.t = Any.any_l ()
    | & f: closure0 = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _6: Int32.t = Any.any_l ()
    | & _10: bool = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
