module M_inference__call_with_one [#"inference.rs" 6 0 6 52]
  let%span sinference = "inference.rs" 7 6 7 7
  let%span sinference'0 = "inference.rs" 6 40 6 41
  let%span sinference'1 = "inference.rs" 4 0 4 36
  let%span sinference'2 = "inference.rs" 5 0 5 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 199 16 199 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 199 27 199 52
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 200 26 200 60
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 114
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 100
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 179 14 179 61
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'9 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'10 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'11 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'11] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'8] hist_inv self b)
      -> ([%#sops'9] hist_inv b c) -> ([%#sops'10] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'7] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'5] postcondition_mut self args res_state res)
      -> ([%#sops'6] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'4] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'3] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops'2] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec call (self_: t_F) (arg: Int32.t) (return' (x: Int32.t)) =
    {[@expl:call 'self_' type invariant] [%#sops] inv'0 self_}
    {[@expl:call requires] [%#sops'0] precondition self_ arg}
    any [ return''0 (result: Int32.t) -> {[%#sops'1] postcondition self_ arg result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_with_one [#"inference.rs" 6 0 6 52] (f: t_F) (return' (x: Int32.t)) =
    {[@expl:call_with_one 'f' type invariant] [%#sinference'0] inv f}
    {[@expl:call_with_one requires] [%#sinference'1] precondition f (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- [%#sinference] (1: Int32.t) ] s1
      | s1 = call {f'0} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & _5: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) ->
    {[@expl:call_with_one ensures] [%#sinference'2] postcondition f (1: Int32.t) result}
      (! return' {result}) ]
end
module M_inference__call_with_one_mut [#"inference.rs" 12 0 12 60]
  let%span sinference = "inference.rs" 13 6 13 7
  let%span sinference'0 = "inference.rs" 12 43 12 44
  let%span sinference'1 = "inference.rs" 10 11 10 37
  let%span sinference'2 = "inference.rs" 11 10 11 53
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 193 16 193 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 193 27 193 52
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 194 26 194 71
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 50 20 50 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: MutBorrow.t t_F) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  let rec call_mut (self_: MutBorrow.t t_F) (arg: Int32.t) (return' (x: Int32.t)) =
    {[@expl:call_mut 'self_' type invariant] [%#sops] inv'0 self_}
    {[@expl:call_mut requires] [%#sops'0] precondition self_.current arg}
    any
    [ return''0 (result: Int32.t) -> {[%#sops'1] postcondition_mut self_.current arg self_.final result}
      (! return' {result}) ]
  
  predicate resolve'0 (self: MutBorrow.t t_F) = [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t t_F) = resolve'0 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_with_one_mut [#"inference.rs" 12 0 12 60] (f: MutBorrow.t t_F) (return' (x: Int32.t)) =
    {[@expl:call_with_one_mut 'f' type invariant] [%#sinference'0] inv'0 f}
    {[@expl:call_with_one_mut requires] [%#sinference'1] precondition f.current (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv f'0.current}
        MutBorrow.borrow_final <t_F> {f'0.current} {MutBorrow.get_id f'0}
          (fun (_ret: MutBorrow.t t_F) ->
            [ &_4 <- _ret ] -{inv _ret.final}-
            [ &f'0 <- { f'0 with current = _ret.final } ] s1)
      | s1 = [ &_5 <- [%#sinference] (1: Int32.t) ] s2
      | s2 = call_mut {_4} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 f'0} s1 | s1 = -{resolve'1 f'0}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & f'0: MutBorrow.t t_F = f
    | & _4: MutBorrow.t t_F = Any.any_l ()
    | & _5: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) ->
    {[@expl:call_with_one_mut ensures] [%#sinference'2] postcondition_mut f.current (1: Int32.t) f.final result}
      (! return' {result}) ]
end
module M_inference__call_with_one_once [#"inference.rs" 18 0 18 61]
  let%span sinference = "inference.rs" 19 6 19 7
  let%span sinference'0 = "inference.rs" 18 49 18 50
  let%span sinference'1 = "inference.rs" 16 0 16 36
  let%span sinference'2 = "inference.rs" 17 0 17 49
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 187 16 187 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 187 16 187 51
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 188 16 188 64
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  let rec call_once (self_: t_F) (arg: Int32.t) (return' (x: Int32.t)) =
    {[@expl:call_once 'self_' type invariant] [%#sops] inv self_}
    {[@expl:call_once requires] [%#sops'0] precondition self_ arg}
    any [ return''0 (result: Int32.t) -> {[%#sops'1] postcondition_once self_ arg result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_with_one_once [#"inference.rs" 18 0 18 61] (f: t_F) (return' (x: Int32.t)) =
    {[@expl:call_with_one_once 'f' type invariant] [%#sinference'0] inv f}
    {[@expl:call_with_one_once requires] [%#sinference'1] precondition f (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- [%#sinference] (1: Int32.t) ] s1
      | s1 = call_once {f'0} {_5} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & _5: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) ->
    {[@expl:call_with_one_once ensures] [%#sinference'2] postcondition_once f (1: Int32.t) result}
      (! return' {result}) ]
end
module M_inference__closure_fn [#"inference.rs" 22 0 22 19]
  let%span sinference = "inference.rs" 25 32 25 33
  let%span sinference'0 = "inference.rs" 26 41 26 42
  let%span sinference'1 = "inference.rs" 27 37 27 38
  let%span sinference'2 = "inference.rs" 27 12 27 38
  let%span sinference'3 = "inference.rs" 26 12 26 42
  let%span sinference'4 = "inference.rs" 25 12 25 33
  let%span sinference'5 = "inference.rs" 23 29 23 30
  let%span sinference'6 = "inference.rs" 4 0 4 36
  let%span sinference'7 = "inference.rs" 5 0 5 44
  let%span sinference'8 = "inference.rs" 10 11 10 37
  let%span sinference'9 = "inference.rs" 11 10 11 53
  let%span sinference'10 = "inference.rs" 16 0 16 36
  let%span sinference'11 = "inference.rs" 17 0 17 49
  let%span sinference'12 = "inference.rs" 23 16 23 24
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 179 14 179 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 50 20 50 34
  
  use creusot.int.Int32
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  
  let rec closure0 [#"inference.rs" 23 16 23 24] [@coma:extspec] (self: ()) (x: Int32.t) (return' (x'0: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = Int32.add {x'0} {[%#sinference'5] (1: Int32.t)} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1)
      | s1 = return' {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x ]
  
  predicate precondition (self: ()) (args: Int32.t) = [%#sinference'12] let x = args in closure0'pre self x
  
  predicate resolve (_0: ()) = true
  
  predicate postcondition_once (self: ()) (args: Int32.t) (result: Int32.t) =
    [%#sinference'12] let x = args in closure0'post'return' self x result /\ resolve self
  
  predicate postcondition_mut (self: ()) (args: Int32.t) (result_state: ()) (result: Int32.t) =
    [%#sinference'12] let x = args in closure0'post'return' self x result /\ self = result_state
  
  function fn_mut_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) = self = result_state
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: Int32.t) (result: Int32.t) =
    [%#sinference'12] let x = args in closure0'post'return' self x result
  
  function fn_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec call_with_one (f: ()) (return' (x: Int32.t)) =
    {[@expl:call_with_one requires] [%#sinference'6] precondition f (1: Int32.t)}
    any [ return''0 (result: Int32.t) -> {[%#sinference'7] postcondition f (1: Int32.t) result} (! return' {result}) ]
  
  let rec call_with_one_mut (f: MutBorrow.t ()) (return' (x: Int32.t)) =
    {[@expl:call_with_one_mut requires] [%#sinference'8] precondition f.current (1: Int32.t)}
    any
    [ return''0 (result: Int32.t) -> {[%#sinference'9] postcondition_mut f.current (1: Int32.t) f.final result}
      (! return' {result}) ]
  
  predicate resolve'0 (self: MutBorrow.t ()) = [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t ()) = resolve'0 _0
  
  let rec call_with_one_once (f: ()) (return' (x: Int32.t)) =
    {[@expl:call_with_one_once requires] [%#sinference'10] precondition f (1: Int32.t)}
    any
    [ return''0 (result: Int32.t) -> {[%#sinference'11] postcondition_once f (1: Int32.t) result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec closure_fn [#"inference.rs" 22 0 22 19] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &f <- () ] s1 | s1 = call_with_one {f} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_3 <- _4 = ([%#sinference] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb4) ] ]
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <()> {f} (fun (_ret: MutBorrow.t ()) -> [ &_11 <- _ret ] [ &f <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_final <()> {_11.current} {MutBorrow.get_id _11}
          (fun (_ret: MutBorrow.t ()) -> [ &_10 <- _ret ] [ &_11 <- { _11 with current = _ret.final } ] s2)
      | s2 = call_with_one_mut {_10} (fun (_ret: Int32.t) -> [ &_9 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = -{resolve'1 _11}- s1
      | s1 = [ &_8 <- _9 = ([%#sinference'0] (2: Int32.t)) ] s2
      | s2 = any [ br0 -> {_8 = false} (! bb6) | br1 -> {_8} (! bb8) ] ]
    | bb8 = s0 [ s0 = call_with_one_once {f} (fun (_ret: Int32.t) -> [ &_15 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = [ &_14 <- _15 = ([%#sinference'1] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_14 = false} (! bb10) | br1 -> {_14} (! bb12) ] ]
    | bb12 = return''0 {_0}
    | bb10 = {[%#sinference'2] false} any
    | bb6 = {[%#sinference'3] false} any
    | bb2 = {[%#sinference'4] false} any ]
    [ & _0: () = Any.any_l ()
    | & f: () = Any.any_l ()
    | & _3: bool = Any.any_l ()
    | & _4: Int32.t = Any.any_l ()
    | & _8: bool = Any.any_l ()
    | & _9: Int32.t = Any.any_l ()
    | & _10: MutBorrow.t () = Any.any_l ()
    | & _11: MutBorrow.t () = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: Int32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_inference__closure_fn_mut [#"inference.rs" 30 0 30 23]
  let%span sinference = "inference.rs" 31 16 31 17
  let%span sinference'0 = "inference.rs" 37 41 37 42
  let%span sinference'1 = "inference.rs" 38 37 38 38
  let%span sinference'2 = "inference.rs" 39 17 39 18
  let%span sinference'3 = "inference.rs" 39 12 39 18
  let%span sinference'4 = "inference.rs" 38 12 38 38
  let%span sinference'5 = "inference.rs" 37 12 37 42
  let%span sinference'6 = "inference.rs" 10 11 10 37
  let%span sinference'7 = "inference.rs" 11 10 11 53
  let%span sinference'8 = "inference.rs" 16 0 16 36
  let%span sinference'9 = "inference.rs" 17 0 17 49
  let%span sinference'10 = "inference.rs" 32 16 32 24
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 50 20 50 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type closure0 = { _0: MutBorrow.t Int32.t }
  
  predicate resolve (self: MutBorrow.t closure0) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0'0: MutBorrow.t closure0) = resolve _0'0
  
  predicate resolve'1 (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0'0: MutBorrow.t Int32.t) = resolve'1 _0'0
  
  predicate resolve'3 (_0'0: closure0) = resolve'2 _0'0._0
  
  predicate hist_inv (self: closure0) (result_state: closure0) =
    [%#sinference'10] (result_state._0).final = (self._0).final
  
  let rec closure0 [#"inference.rs" 32 16 32 24] [@coma:extspec] (self: MutBorrow.t closure0) (x: Int32.t)
    (return' (x'0: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = Int32.add {((_1.current)._0).current} {x'0}
          (fun (_ret: Int32.t) -> [ &_1 <- { _1 with current = { _0 = { (_1.current)._0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 _1}- s2
      | s2 = [ &_0'0 <- ((_1.current)._0).current ] s3
      | s3 = return' {_0'0} ] ]
    [ & _0'0: Int32.t = Any.any_l () | & _1: MutBorrow.t closure0 = self | & x'0: Int32.t = x ]
  
  predicate postcondition_once (self: closure0) (args: Int32.t) (result: Int32.t) =
    [%#sinference'10] let x = args in exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current
            = self
          /\ bor_self.final = e /\ closure0'post'return' bor_self x result /\ hist_inv self e)
      /\ resolve'3 e
  
  predicate postcondition_mut (self: closure0) (args: Int32.t) (result_state: closure0) (result: Int32.t) =
    [%#sinference'10] let x = args in exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return' bor_self x result /\ hist_inv self result_state
  
  function fn_mut_once (self: closure0) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec:
    forall self: closure0, args: Int32.t, res: Int32.t. [%#sops'5] postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: Int32.t) (res_state: closure0) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: Int32.t, res_state: closure0, res: Int32.t. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate precondition (self: closure0) (args: Int32.t) =
    [%#sinference'10] let x = args in forall bor_self: MutBorrow.t closure0. bor_self.current = self
      -> closure0'pre bor_self x
  
  let rec call_with_one_mut (f: MutBorrow.t closure0) (return' (x: Int32.t)) =
    {[@expl:call_with_one_mut requires] [%#sinference'6] precondition f.current (1: Int32.t)}
    any
    [ return''0 (result: Int32.t) -> {[%#sinference'7] postcondition_mut f.current (1: Int32.t) f.final result}
      (! return' {result}) ]
  
  let rec call_with_one_once (f: closure0) (return' (x: Int32.t)) =
    {[@expl:call_with_one_once requires] [%#sinference'8] precondition f (1: Int32.t)}
    any
    [ return''0 (result: Int32.t) -> {[%#sinference'9] postcondition_once f (1: Int32.t) result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec closure_fn_mut [#"inference.rs" 30 0 30 23] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &y <- [%#sinference] (0: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {y}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_3 <- _ret ] [ &y <- _ret.final ] s2)
      | s2 = [ &f <- { _0 = _3 } ] s3
      | s3 = MutBorrow.borrow_mut <closure0> {f}
          (fun (_ret: MutBorrow.t closure0) -> [ &_8 <- _ret ] [ &f <- _ret.final ] s4)
      | s4 = MutBorrow.borrow_final <closure0> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret: MutBorrow.t closure0) -> [ &_7 <- _ret ] [ &_8 <- { _8 with current = _ret.final } ] s5)
      | s5 = call_with_one_mut {_7} (fun (_ret: Int32.t) -> [ &_6 <- _ret ] s6)
      | s6 = bb1 ]
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = [ &_5 <- _6 = ([%#sinference'0] (1: Int32.t)) ] s2
      | s2 = any [ br0 -> {_5 = false} (! bb2) | br1 -> {_5} (! bb4) ] ]
    | bb4 = s0 [ s0 = call_with_one_once {f} (fun (_ret: Int32.t) -> [ &_12 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = [ &_11 <- _12 = ([%#sinference'1] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb8) ] ]
    | bb8 = s0
      [ s0 = [ &_16 <- y = ([%#sinference'2] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb11) ] ]
    | bb11 = return''0 {_0'0}
    | bb9 = {[%#sinference'3] false} any
    | bb6 = {[%#sinference'4] false} any
    | bb2 = s0 [ s0 = -{resolve'3 f}- s1 | s1 = {[%#sinference'5] false} any ] ]
    [ & _0'0: () = Any.any_l ()
    | & y: Int32.t = Any.any_l ()
    | & f: closure0 = Any.any_l ()
    | & _3: MutBorrow.t Int32.t = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _6: Int32.t = Any.any_l ()
    | & _7: MutBorrow.t closure0 = Any.any_l ()
    | & _8: MutBorrow.t closure0 = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _12: Int32.t = Any.any_l ()
    | & _16: bool = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_inference__closure_fn_once [#"inference.rs" 42 0 42 24]
  let%span sinference = "inference.rs" 43 21 43 22
  let%span sinference'0 = "inference.rs" 44 16 44 17
  let%span sinference'1 = "inference.rs" 51 37 51 38
  let%span sinference'2 = "inference.rs" 52 17 52 18
  let%span sinference'3 = "inference.rs" 52 12 52 18
  let%span sinference'4 = "inference.rs" 51 12 51 38
  let%span sinference'5 = "inference.rs" 16 0 16 36
  let%span sinference'6 = "inference.rs" 17 0 17 49
  let%span sinference'7 = "inference.rs" 45 12 45 25
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type closure0 = { _0: Int32.t; _1: Int32.t }
  
  let rec closure0 [#"inference.rs" 45 12 45 25] [@coma:extspec] (self: closure0) (x: Int32.t)
    (return' (x'0: Int32.t)) = bb0
    [ bb0 = s0
      [ s0 = [ &move_y <- _1'0._0 ] s1
      | s1 = Int32.add {move_y} {x'0} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s2)
      | s2 = Int32.add {_1'0._1} {_4} (fun (_ret: Int32.t) -> [ &_1'0 <- { _1'0 with _1 = _ret } ] s3)
      | s3 = [ &_0'0 <- _1'0._1 ] s4
      | s4 = bb2 ]
    | bb2 = return' {_0'0} ]
    [ & _0'0: Int32.t = Any.any_l ()
    | & _1'0: closure0 = self
    | & x'0: Int32.t = x
    | & move_y: Int32.t = Any.any_l ()
    | & _4: Int32.t = Any.any_l () ]
  
  predicate precondition (self: closure0) (args: Int32.t) = [%#sinference'7] let x = args in closure0'pre self x
  
  predicate postcondition_once (self: closure0) (args: Int32.t) (result: Int32.t) =
    [%#sinference'7] let x = args in closure0'post'return' self x result
  
  let rec call_with_one_once (f: closure0) (return' (x: Int32.t)) =
    {[@expl:call_with_one_once requires] [%#sinference'5] precondition f (1: Int32.t)}
    any
    [ return''0 (result: Int32.t) -> {[%#sinference'6] postcondition_once f (1: Int32.t) result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec closure_fn_once [#"inference.rs" 42 0 42 24] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &y <- [%#sinference] (2: Int32.t) ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &z <- [%#sinference'0] (0: Int32.t) ] s1
      | s1 = [ &f <- { _0 = y; _1 = z } ] s2
      | s2 = call_with_one_once {f} (fun (_ret: Int32.t) -> [ &_6 <- _ret ] s3)
      | s3 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_5 <- _6 = ([%#sinference'1] (3: Int32.t)) ] s1
      | s1 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_10 <- z = ([%#sinference'2] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb10) ] ]
    | bb10 = return''0 {_0'0}
    | bb6 = {[%#sinference'3] false} any
    | bb3 = {[%#sinference'4] false} any ]
    [ & _0'0: () = Any.any_l ()
    | & y: Int32.t = Any.any_l ()
    | & z: Int32.t = Any.any_l ()
    | & f: closure0 = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _6: Int32.t = Any.any_l ()
    | & _10: bool = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
