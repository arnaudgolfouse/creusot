module M_02_nested__nested_closure [#"02_nested.rs" 3 0 3 23]
  let%span s02_nested = "02_nested.rs" 4 12 4 16
  
  use creusot.prelude.Any
  
  type closure0  =
    { _0: bool }
  
  let rec closure0[#"02_nested.rs" 6 18 6 20] [@coma:extspec] (self:closure0) (return'  (x:bool))= bb0
    [ bb0 = s0 [ s0 =  [ &_0'0 <- _1._0 ] s1 | s1 = return''0 {_0'0} ]  ]
     [ & _0'0: bool = Any.any_l () | & _1: closure0 = self ]  [ return''0 (result:bool)-> return' {result} ] 
  
  type closure0'0  =
    { _0'0: bool }
  
  let rec closure0'0[#"02_nested.rs" 5 14 5 16] [@coma:extspec] (self:closure0'0) (return'  (x:bool))= bb0
    [ bb0 = s0
      [ s0 =  [ &omg <- { _0 = _1._0'0 } ] s1
      | s1 = closure0 {omg} (fun (_ret:bool) ->  [ &_0'1 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = return''0 {_0'1} ]
    
    [ & _0'1: bool = Any.any_l () | & _1: closure0'0 = self | & omg: closure0 = Any.any_l () | & _5: () = Any.any_l () ]
     [ return''0 (result:bool)-> return' {result} ] 
  
  meta "compute_max_steps" 1000000
  
  let rec nested_closure[#"02_nested.rs" 3 0 3 23] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#s02_nested] true ] s1
      | s1 =  [ &_4 <- { _0'0 = a } ] s2
      | s2 = closure0'0 {_4} (fun (_ret:bool) ->  [ &_a <- _ret ] s3)
      | s3 = bb1 ]
    
    | bb1 = return''0 {_0'1} ]
    )
    [ & _0'1: () = Any.any_l ()
    | & a: bool = Any.any_l ()
    | & _a: bool = Any.any_l ()
    | & _4: closure0'0 = Any.any_l ()
    | & _6: () = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
