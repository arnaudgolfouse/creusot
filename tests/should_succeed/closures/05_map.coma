module M_05_map__qyi10775967587165326061__next [#"05_map.rs" 20 4 20 44] (* <Map<I, F> as FakeIterator> *)
  let%span s05_map = "05_map.rs" 20 17 20 21
  let%span s05_map'0 = "05_map.rs" 20 26 20 44
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 188 16 188 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 190 31 190 34
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 188 27 188 52
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 189 26 189 60
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 158 14 158 114
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 163 14 163 101
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 168 14 168 61
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'9 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'10 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'11 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'12 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinvariant'0 = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_I
  
  predicate inv (_0: t_I)
  
  type t_F
  
  type t_Map  =
    { t_Map__iter: t_I; t_Map__func: t_F }
  
  type t_A
  
  type t_Option  =
    | C_None
    | C_Some t_A
  
  predicate invariant' (self: MutBorrow.t t_I) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_I)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_I [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef: forall args: MutBorrow.t t_I [precondition () args]. (let self = args in inv'0 self)
   -> precondition () args
  
  predicate inv'1 (_0: t_A)
  
  predicate inv'2 (_0: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'1 a_0
    end
  
  predicate postcondition_once (self: ()) (args: MutBorrow.t t_I) (result: t_Option)
  
  axiom postcondition_fndef: forall args: MutBorrow.t t_I, res: t_Option [postcondition_once () args res]. postcondition_once () args res
   -> (let self = args in inv'2 res)
  
  let rec next (self:MutBorrow.t t_I) (return'  (x:t_Option))= {[@expl:next requires] precondition () self}
    any [ return''0 (result:t_Option)-> {postcondition_once () self result} (! return' {result}) ] 
  
  let rec v_Some (input:t_Option) (ret  (field_0:t_A))= any
    [ good (field_0:t_A)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_A [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  type t_B
  
  predicate inv'3 (_0: t_F)
  
  predicate invariant''0 (self: t_F) =
    [%#sinvariant'0] inv'3 self
  
  predicate inv'4 (_0: t_F)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_F [inv'4 x]. inv'4 x = invariant''0 x
  
  predicate inv'5 (_0: t_A)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_A [inv'5 x]. inv'5 x = (let x0 = x in inv'1 x0)
  
  predicate precondition'0 (self: t_F) (args: t_A)
  
  predicate inv'6 (_0: t_B)
  
  predicate postcondition_once'0 (self: t_F) (args: t_A) (result: t_B)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: t_A) (result_state: t_F) (result: t_B)
  
  function fn_mut_once (self: t_F) (args: t_A) (res: t_B) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: t_A, res: t_B. [%#sops'12] postcondition_once'0 self args res
  = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'9] hist_inv self b)
   -> ([%#sops'10] hist_inv b c)  -> ([%#sops'11] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'8] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: t_A) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: t_F, args: t_A, res_state: t_F, res: t_B. ([%#sops'6] postcondition_mut self args res_state res)
   -> ([%#sops'7] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'5] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: t_A) (result: t_B)
  
  function fn_once (self: t_F) (args: t_A) (res: t_B) : ()
  
  axiom fn_once_spec: forall self: t_F, args: t_A, res: t_B. [%#sops'4] postcondition_once'0 self args res
  = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: t_A) (res_state: t_F) (res: t_B) : ()
  
  axiom fn_mut_spec: forall self: t_F, args: t_A, res_state: t_F, res: t_B. [%#sops'3] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  let rec call (self_:t_F) (arg:t_A) (return'  (x:t_B))= {[@expl:call 'self_' type invariant] [%#sops] inv'4 self_}
    {[@expl:call 'arg' type invariant] [%#sops'0] inv'5 arg}
    {[@expl:call requires] [%#sops'1] precondition'0 self_ arg}
    any [ return''0 (result:t_B)-> {inv'6 result} {[%#sops'2] postcondition self_ arg result} (! return' {result}) ] 
  
  predicate inv'7 (_0: t_Map)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Map [inv'7 x]. inv'7 x
  = match x with
    | {t_Map__iter = iter ; t_Map__func = func} -> inv iter /\ inv'3 func
    end
  
  predicate invariant''1 (self: MutBorrow.t t_Map) =
    [%#sinvariant] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'8 (_0: MutBorrow.t t_Map)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_Map [inv'8 x]. inv'8 x = invariant''1 x
  
  predicate resolve'0 (self: MutBorrow.t t_Map) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t t_Map) =
    resolve'0 _0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_B
  
  predicate inv'9 (_0: t_Option'0)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_Option'0 [inv'9 x]. inv'9 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'6 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec next'0[#"05_map.rs" 20 4 20 44] (self:MutBorrow.t t_Map) (return'  (x:t_Option'0))= {[@expl:next 'self' type invariant] [%#s05_map] inv'8 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv (self'0.current).t_Map__iter}
        MutBorrow.borrow_final <t_I> {(self'0.current).t_Map__iter} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
          (fun (_ret:MutBorrow.t t_I) ->
             [ &_3 <- _ret ] 
            -{inv _ret.final}-
             [ &self'0 <- { self'0 with current = { self'0.current with t_Map__iter = _ret.final } } ] 
            s1)
      | s1 = next {_3} (fun (_ret:t_Option) ->  [ &_2 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = any [ br0 -> {_2 = C_None} (! bb3) | br1 (x0:t_A)-> {_2 = C_Some x0} (! bb4) ] 
    | bb4 = s0
      [ s0 = v_Some {_2} (fun (r0:t_A) ->  [ &e <- r0 ] s1)
      | s1 =  [ &_8 <- e ] s2
      | s2 = call {(self'0.current).t_Map__func} {_8} (fun (_ret:t_B) ->  [ &_6 <- _ret ] s3)
      | s3 = bb6 ]
    
    | bb6 = s0 [ s0 = {[@expl:type invariant] inv'8 self'0} s1 | s1 = -{resolve'1 self'0}- s2 | s2 = bb7 ] 
    | bb7 = s0 [ s0 =  [ &_0 <- C_Some'0 _6 ] s1 | s1 = bb11 ] 
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'8 self'0} s1 | s1 = -{resolve'1 self'0}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- C_None'0 ] s1 | s1 = bb11 ] 
    | bb11 = return''0 {_0} ]
    )
    [ & _0: t_Option'0 = Any.any_l ()
    | & self'0: MutBorrow.t t_Map = self
    | & _2: t_Option = Any.any_l ()
    | & _3: MutBorrow.t t_I = Any.any_l ()
    | & e: t_A = Any.any_l ()
    | & _6: t_B = Any.any_l ()
    | & _8: t_A = Any.any_l () ]
    
    [ return''0 (result:t_Option'0)-> {[@expl:next result type invariant] [%#s05_map'0] inv'9 result}
      (! return' {result}) ]

end
module M_05_map__qyi10775967587165326061__next__refines [#"05_map.rs" 20 4 20 44] (* <Map<I, F> as FakeIterator> *)
  let%span s05_map = "05_map.rs" 20 4 20 44
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map  =
    { t_Map__iter: t_I; t_Map__func: t_F }
  
  predicate inv (_0: t_I)
  
  predicate inv'0 (_0: t_F)
  
  predicate inv'1 (_0: t_Map)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map [inv'1 x]. inv'1 x
  = match x with
    | {t_Map__iter = iter ; t_Map__func = func} -> inv iter /\ inv'0 func
    end
  
  predicate invariant' (self: MutBorrow.t t_Map) =
    [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_0: MutBorrow.t t_Map)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_Map [inv'2 x]. inv'2 x = invariant' x
  
  type t_B
  
  type t_Option  =
    | C_None
    | C_Some t_B
  
  predicate inv'3 (_0: t_B)
  
  predicate inv'4 (_0: t_Option)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option [inv'4 x]. inv'4 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'3 a_0
    end
  
  goal refines: [%#s05_map] forall self: MutBorrow.t t_Map. inv'2 self
   -> inv'2 self /\ (forall result: t_Option. inv'4 result  -> inv'4 result)
end
