module M_impl_FakeIterator_for_Map_I_F__next (* <Map<I, F> as FakeIterator> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  predicate inv_I (_1: t_I)
  
  type t_A
  
  type t_Option_A = None | Some t_A
  
  predicate invariant_ref_I [@inline:trivial] (self: MutBorrow.t t_I) = inv_I self.current /\ inv_I self.final
  
  meta "rewrite_def" predicate invariant_ref_I
  
  predicate inv_ref_I [@inline:trivial] (_1: MutBorrow.t t_I) = invariant_ref_I _1
  
  meta "rewrite_def" predicate inv_ref_I
  
  predicate precondition_next (self: ()) (args: MutBorrow.t t_I)
  
  axiom precondition_fndef:
    forall args: MutBorrow.t t_I [precondition_next () args]. (let self = args in inv_ref_I self)
      -> precondition_next () args
  
  predicate inv_A (_1: t_A)
  
  predicate inv_Option_A (_1: t_Option_A)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_A [inv_Option_A x]. inv_Option_A x
      = match x with
        | None -> true
        | Some f0 -> inv_A f0
        end
  
  predicate postcondition_once_next (self: ()) (args: MutBorrow.t t_I) (result: t_Option_A)
  
  axiom postcondition_fndef:
    forall args: MutBorrow.t t_I, res: t_Option_A [postcondition_once_next () args res]. postcondition_once_next () args res
      -> (let self = args in inv_Option_A res)
  
  let rec next_I (self: MutBorrow.t t_I) (return (x: t_Option_A)) = {[@expl:next requires] precondition_next () self}
    any [ return (result: t_Option_A) -> {postcondition_once_next () self result} (! return {result}) ]
  
  let rec elim_Some (input: t_Option_A) (ret (f0: t_A)) = any
    [ good (f0: t_A) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: t_A [Some f0: t_Option_A]. Some f0 <> input} (! {false} any) ]
  
  predicate inv_F (_1: t_F)
  
  predicate inv_Map_I_F (_1: t_Map_I_F)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Map_I_F [inv_Map_I_F x]. inv_Map_I_F x = (inv_I x.iter /\ inv_F x.func)
  
  predicate invariant_ref_Map_I_F [@inline:trivial] (self: MutBorrow.t t_Map_I_F) =
    inv_Map_I_F self.current /\ inv_Map_I_F self.final
  
  meta "rewrite_def" predicate invariant_ref_Map_I_F
  
  predicate inv_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = invariant_ref_Map_I_F _1
  
  meta "rewrite_def" predicate inv_ref_Map_I_F
  
  predicate resolve_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Map_I_F
  
  type t_B
  
  predicate invariant_ref_F [@inline:trivial] (self: t_F) = inv_F self
  
  meta "rewrite_def" predicate invariant_ref_F
  
  predicate inv_ref_F [@inline:trivial] (_1: t_F) = invariant_ref_F _1
  
  meta "rewrite_def" predicate inv_ref_F
  
  predicate inv_tup1_A [@inline:trivial] (_1: t_A) = inv_A _1
  
  meta "rewrite_def" predicate inv_tup1_A
  
  predicate precondition_F (self: t_F) (args: t_A)
  
  predicate inv_B (_1: t_B)
  
  predicate postcondition_once_F (self: t_F) (args: t_A) (result: t_B)
  
  predicate resolve_F (_1: t_F)
  
  predicate postcondition_mut_F (self: t_F) (args: t_A) (result_state: t_F) (result: t_B)
  
  function fn_mut_once_F (self: t_F) (args: t_A) (res: t_B) : ()
  
  axiom fn_mut_once_F_spec: forall self: t_F, args: t_A, res: t_B. postcondition_once_F self args res
      = (exists res_state: t_F. postcondition_mut_F self args res_state res /\ resolve_F res_state)
  
  predicate hist_inv_F (self: t_F) (result_state: t_F)
  
  function hist_inv_trans_F (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_F_spec: forall self: t_F, b: t_F, c: t_F. hist_inv_F self b
      -> hist_inv_F b c -> hist_inv_F self c
  
  function hist_inv_refl_F (self: t_F) : ()
  
  axiom hist_inv_refl_F_spec: forall self: t_F. hist_inv_F self self
  
  function postcondition_mut_hist_inv_F (self: t_F) (args: t_A) (res_state: t_F) (res: t_B) : ()
  
  axiom postcondition_mut_hist_inv_F_spec:
    forall self: t_F, args: t_A, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      -> hist_inv_F self res_state
  
  function fn_hist_inv_F (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_F_spec: forall self: t_F, res_state: t_F. hist_inv_F self res_state = (self = res_state)
  
  predicate postcondition_F (self: t_F) (args: t_A) (result: t_B)
  
  function fn_once_F (self: t_F) (args: t_A) (res: t_B) : ()
  
  axiom fn_once_F_spec: forall self: t_F, args: t_A, res: t_B. postcondition_once_F self args res
      = (postcondition_F self args res /\ resolve_F self)
  
  function fn_mut_F (self: t_F) (args: t_A) (res_state: t_F) (res: t_B) : ()
  
  axiom fn_mut_F_spec:
    forall self: t_F, args: t_A, res_state: t_F, res: t_B. postcondition_mut_F self args res_state res
      = (postcondition_F self args res /\ self = res_state)
  
  let rec call_F (self_: t_F) (arg: t_A) (return (x: t_B)) = {[@expl:call 'self_' type invariant] inv_ref_F self_}
    {[@expl:call 'arg' type invariant] inv_tup1_A arg}
    {[@expl:call requires] precondition_F self_ arg}
    any [ return (result: t_B) -> {inv_B result} {postcondition_F self_ arg result} (! return {result}) ]
  
  type t_Option_B = None'0 | Some'0 t_B
  
  predicate inv_Option_B (_1: t_Option_B)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Option_B [inv_Option_B x]. inv_Option_B x
      = match x with
        | None'0 -> true
        | Some'0 f0 -> inv_B f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec next_Map_I_F (self: MutBorrow.t t_Map_I_F) (return (x: t_Option_B)) =
    {[@expl:next 'self' type invariant] inv_ref_Map_I_F self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_I self.current.iter}
        MutBorrow.borrow_final <t_I> {self.current.iter} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_I) ->
            [ &_3 <- _ret ] -{inv_I _ret.final}-
            [ &self <- { self with current = { self.current with iter = _ret.final } } ] s1)
      | s1 = next_I {_3} (fun (_ret: t_Option_A) -> [ &_2 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = any [ br0 -> {_2 = None} (! bb3) | br1 (x0: t_A) -> {_2 = Some x0} (! bb4) ]
    | bb4 = s0
      [ s0 = elim_Some {_2} (fun (r0: t_A) -> [ &e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_ref_Map_I_F self} s2
      | s2 = -{resolve_ref_Map_I_F self}- s3
      | s3 = [ &_8 <- e ] s4
      | s4 = call_F {self.current.func} {_8} (fun (_ret: t_B) -> [ &_6 <- _ret ] s5)
      | s5 = bb7 ]
    | bb7 = s0 [ s0 = [ &_0 <- Some'0 _6 ] s1 | s1 = bb11 ]
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Map_I_F self} s1 | s1 = -{resolve_ref_Map_I_F self}- s2 | s2 = bb5 ]
    | bb5 = s0 [ s0 = [ &_0 <- None'0 ] s1 | s1 = bb11 ]
    | bb11 = return {_0} ]
    [ & _0: t_Option_B = Any.any_l ()
    | & self: MutBorrow.t t_Map_I_F = self
    | & _2: t_Option_A = Any.any_l ()
    | & _3: MutBorrow.t t_I = Any.any_l ()
    | & e: t_A = Any.any_l ()
    | & _6: t_B = Any.any_l ()
    | & _8: t_A = Any.any_l () ])
    [ return (result: t_Option_B) -> {[@expl:next result type invariant] inv_Option_B result} (! return {result}) ]
end
module M_impl_FakeIterator_for_Map_I_F__next__refines (* <Map<I, F> as FakeIterator> *)
  use creusot.prelude.MutBorrow
  
  type t_I
  
  type t_F
  
  type t_Map_I_F = { iter: t_I; func: t_F }
  
  predicate inv_I (_1: t_I)
  
  predicate inv_F (_1: t_F)
  
  predicate inv_Map_I_F (_1: t_Map_I_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_Map_I_F [inv_Map_I_F x]. inv_Map_I_F x = (inv_I x.iter /\ inv_F x.func)
  
  predicate invariant_ref_Map_I_F [@inline:trivial] (self: MutBorrow.t t_Map_I_F) =
    inv_Map_I_F self.current /\ inv_Map_I_F self.final
  
  meta "rewrite_def" predicate invariant_ref_Map_I_F
  
  predicate inv_ref_Map_I_F [@inline:trivial] (_1: MutBorrow.t t_Map_I_F) = invariant_ref_Map_I_F _1
  
  meta "rewrite_def" predicate inv_ref_Map_I_F
  
  type t_B
  
  type t_Option_B = None | Some t_B
  
  predicate inv_B (_1: t_B)
  
  predicate inv_Option_B (_1: t_Option_B)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_B [inv_Option_B x]. inv_Option_B x
      = match x with
        | None -> true
        | Some f0 -> inv_B f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: MutBorrow.t t_Map_I_F. inv_ref_Map_I_F self
      -> inv_ref_Map_I_F self /\ (forall result: t_Option_B. inv_Option_B result -> inv_Option_B result)
end
