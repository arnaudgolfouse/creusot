module M_01_basic__uses_closure
  use creusot.prelude.Any
  
  type closure0 = { c0: bool }
  
  let rec closure0 [@coma:extspec] (self: closure0) (return (x: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- self.c0 ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () | & self: closure0 = self ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec uses_closure (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &y <- true ] s1
      | s1 = [ &_4 <- { c0 = y } ] s2
      | s2 = closure0 {_4} (fun (_ret: bool) -> [ &_x <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & y: bool = Any.any_l ()
    | & _x: bool = Any.any_l ()
    | & _4: closure0 = Any.any_l ()
    | & _6: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_01_basic__multi_arg
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec closure0 [@coma:extspec] (self: ()) (a: Int32.t) (b: Int32.t) (return (x: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = Int32.add {a} {b} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & a: Int32.t = a | & b: Int32.t = b ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  type tuple = { f0: Int32.t; f1: Int32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec multi_arg (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- () ] s1
      | s1 = [ &_4 <- { f0 = (0: Int32.t); f1 = (3: Int32.t) } ] s2
      | s2 = closure0 {x} {_4.f0} {_4.f1} (fun (_ret: Int32.t) -> [ &_a <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & x: () = Any.any_l () | & _a: Int32.t = Any.any_l () | & _4: tuple = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_01_basic__move_closure
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type closure0 = { c0: MutBorrow.t Int32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure0) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure0) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure0) = resolve'2 _1.c0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure0) (result_state: closure0) = true
  
  meta "rewrite_def" predicate hist_inv
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (return (x: ())) = bb0
    [ bb0 = s0
      [ s0 = Int32.add {self.current.c0.current} {(1: Int32.t)}
          (fun (_ret: Int32.t) ->
            [ &self <- { self with current = { c0 = { self.current.c0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 self}- s2
      | s2 = return {_0} ] ] [ & _0: () = Any.any_l () | & self: MutBorrow.t closure0 = self ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: ()) (result: ()) =
    exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current = self
          /\ bor_self.final = e /\ closure0'post'return bor_self result /\ hist_inv self e)
      /\ resolve'3 e
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: ()) =
    exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self result /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure0) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: (), res: (). postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: ()) (res_state: closure0) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: (), res_state: closure0, res: (). postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec move_closure (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- (0: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {_2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &a <- _ret ] [ &_2 <- _ret.final ] s2)
      | s2 = [ &x <- { c0 = a } ] s3
      | s3 = MutBorrow.borrow_mut <closure0> {x}
          (fun (_ret: MutBorrow.t closure0) -> [ &_5 <- _ret ] [ &x <- _ret.final ] s4)
      | s4 = closure0 {_5} (fun (_ret: ()) -> [ &_4 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <closure0> {x}
          (fun (_ret: MutBorrow.t closure0) -> [ &_8 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = closure0 {_8} (fun (_ret: ()) -> [ &_7 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = -{resolve'3 x}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: MutBorrow.t Int32.t = Any.any_l ()
    | & _2: Int32.t = Any.any_l ()
    | & x: closure0 = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t closure0 = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t closure0 = Any.any_l ()
    | & _9: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_01_basic__move_mut
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  let rec new_ref (return (x: MutBorrow.t UInt32.t)) = any
    [ return' (result: MutBorrow.t UInt32.t) -> (! return {result}) ]
  
  type closure0 = { c0: MutBorrow.t UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t closure0) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t closure0) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure0) = resolve'0 _1.c0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure0) (result_state: closure0) = true
  
  meta "rewrite_def" predicate hist_inv
  
  let rec closure0 [@coma:extspec] (self: MutBorrow.t closure0) (return (x: ())) = bb0
    [ bb0 = s0 [ s0 = new_ref (fun (_ret: MutBorrow.t UInt32.t) -> [ &_3 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_2 <- _ret ] [ &_3 <- { _3 with current = _ret.final } ] s1)
      | s1 = -{match self with
          | {current = {c0 = x}} -> resolve'0 x
          | _ -> true
          end}-
        s2
      | s2 = [ &self <- { self with current = { c0 = _2 } } ] s3
      | s3 = -{resolve'2 self}- s4
      | s4 = -{resolve'0 _3}- s5
      | s5 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t closure0 = self
    | & _2: MutBorrow.t UInt32.t = Any.any_l ()
    | & _3: MutBorrow.t UInt32.t = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: ()) (result: ()) =
    exists e: closure0. (exists bor_self: MutBorrow.t closure0. bor_self.current = self
          /\ bor_self.final = e /\ closure0'post'return bor_self result /\ hist_inv self e)
      /\ resolve'3 e
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate postcondition_mut [@inline:trivial] (self: closure0) (args: ()) (result_state: closure0) (result: ()) =
    exists bor_self: MutBorrow.t closure0. bor_self.current = self
      /\ bor_self.final = result_state /\ closure0'post'return bor_self result /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure0) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: (), res: (). postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: ()) (res_state: closure0) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: (), res_state: closure0, res: (). postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec move_mut (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- (0: UInt32.t) ] s1
      | s1 = MutBorrow.borrow_mut <UInt32.t> {_2}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &x <- _ret ] [ &_2 <- _ret.final ] s2)
      | s2 = [ &a <- { c0 = x } ] s3
      | s3 = MutBorrow.borrow_mut <closure0> {a}
          (fun (_ret: MutBorrow.t closure0) -> [ &_5 <- _ret ] [ &a <- _ret.final ] s4)
      | s4 = closure0 {_5} (fun (_ret: ()) -> [ &_4 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <closure0> {a}
          (fun (_ret: MutBorrow.t closure0) -> [ &_8 <- _ret ] [ &a <- _ret.final ] s1)
      | s1 = closure0 {_8} (fun (_ret: ()) -> [ &_7 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = -{resolve'3 a}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: MutBorrow.t UInt32.t = Any.any_l ()
    | & _2: UInt32.t = Any.any_l ()
    | & a: closure0 = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t closure0 = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t closure0 = Any.any_l ()
    | & _9: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
