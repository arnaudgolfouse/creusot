module M_11_proof_assert_in_closure__immutable_capture [#"11_proof_assert_in_closure.rs" 4 0 4 26]
  let%span s11_proof_assert_in_closure = "11_proof_assert_in_closure.rs" 5 12 5 13
  let%span s11_proof_assert_in_closure'0 = "11_proof_assert_in_closure.rs" 8 22 8 31
  let%span s11_proof_assert_in_closure'1 = "11_proof_assert_in_closure.rs" 6 16 6 25
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type closure0 = { _0: Int32.t }
  
  let rec closure0 [#"11_proof_assert_in_closure.rs" 7 4 7 6] (self: closure0) (return' (x: ())) =
    {[@expl:closure requires] [%#s11_proof_assert_in_closure'1] self._0 = (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s11_proof_assert_in_closure'0] _1._0 = (1: Int32.t)} s1 | s1 = return''0 {_0'0} ] ]
    [ & _0'0: () = Any.any_l () | & _1: closure0 = self ]) [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec immutable_capture [#"11_proof_assert_in_closure.rs" 4 0 4 26] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- [%#s11_proof_assert_in_closure] (1: Int32.t) ] s1
      | s1 = [ &_4 <- { _0 = x } ] s2
      | s2 = closure0 {_4} (fun (_ret: ()) -> [ &_2 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = return''0 {_0'0} ]
    [ & _0'0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & _2: () = Any.any_l ()
    | & _4: closure0 = Any.any_l ()
    | & _6: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_11_proof_assert_in_closure__mutable_capture [#"11_proof_assert_in_closure.rs" 12 0 12 24]
  let%span s11_proof_assert_in_closure = "11_proof_assert_in_closure.rs" 13 16 13 17
  let%span s11_proof_assert_in_closure'0 = "11_proof_assert_in_closure.rs" 16 22 16 31
  let%span s11_proof_assert_in_closure'1 = "11_proof_assert_in_closure.rs" 17 12 17 13
  let%span s11_proof_assert_in_closure'2 = "11_proof_assert_in_closure.rs" 18 22 18 31
  let%span s11_proof_assert_in_closure'3 = "11_proof_assert_in_closure.rs" 14 16 14 25
  let%span s11_proof_assert_in_closure'4 = "11_proof_assert_in_closure.rs" 15 4 15 6
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 48 20 48 34
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type closure0 = { _0: MutBorrow.t Int32.t }
  
  predicate resolve (self: MutBorrow.t closure0) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0'0: MutBorrow.t closure0) = resolve _0'0
  
  predicate postcondition_once (self: closure0) (args: ()) (result: ()) =
    [%#s11_proof_assert_in_closure'4] let () = args in true
  
  predicate resolve'1 (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0'0: MutBorrow.t Int32.t) = resolve'1 _0'0
  
  predicate resolve'3 (_0'0: closure0) = resolve'2 _0'0._0
  
  predicate hist_inv (self: closure0) (result_state: closure0) =
    [%#s11_proof_assert_in_closure'4] (result_state._0).final = (self._0).final
  
  predicate postcondition_mut (self: closure0) (args: ()) (result_state: closure0) (result: ()) =
    [%#s11_proof_assert_in_closure'4] let () = args in hist_inv self result_state
  
  function fn_mut_once (self: closure0) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: (), res: (). [%#sops'5] postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: ()) (res_state: closure0) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: (), res_state: closure0, res: (). ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  let rec closure0 [#"11_proof_assert_in_closure.rs" 15 4 15 6] (self: MutBorrow.t closure0) (return' (x: ())) =
    {[@expl:closure requires] [%#s11_proof_assert_in_closure'3] ((self.current)._0).current = (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s11_proof_assert_in_closure'0] ((_1.current)._0).current = (1: Int32.t)} s1
      | s1 =
        [ &_1 <- { _1 with current = { _0 = { (_1.current)._0 with current = ([%#s11_proof_assert_in_closure'1] (2: Int32.t)) } } } ]
        s2
      | s2 = -{resolve'0 _1}- s3
      | s3 = {[@expl:assertion] [%#s11_proof_assert_in_closure'2] ((_1.current)._0).current = (2: Int32.t)} s4
      | s4 = return''0 {_0'0} ] ] [ & _0'0: () = Any.any_l () | & _1: MutBorrow.t closure0 = self ])
    [ return''0 (result: ()) -> {[@expl:closure hist_inv post] hist_inv self.current self.final} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec mutable_capture [#"11_proof_assert_in_closure.rs" 12 0 12 24] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- [%#s11_proof_assert_in_closure] (1: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_5 <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = [ &_4 <- { _0 = _5 } ] s3
      | s3 = MutBorrow.borrow_mut <closure0> {_4}
          (fun (_ret: MutBorrow.t closure0) -> [ &_3 <- _ret ] [ &_4 <- _ret.final ] s4)
      | s4 = closure0 {_3} (fun (_ret: ()) -> [ &_2 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0 [ s0 = -{resolve'3 _4}- s1 | s1 = return''0 {_0'0} ] ]
    [ & _0'0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & _2: () = Any.any_l ()
    | & _3: MutBorrow.t closure0 = Any.any_l ()
    | & _4: closure0 = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_11_proof_assert_in_closure__captures_and_call [#"11_proof_assert_in_closure.rs" 29 0 29 26]
  let%span s11_proof_assert_in_closure = "11_proof_assert_in_closure.rs" 30 16 30 17
  let%span s11_proof_assert_in_closure'0 = "11_proof_assert_in_closure.rs" 39 18 39 27
  let%span s11_proof_assert_in_closure'1 = "11_proof_assert_in_closure.rs" 34 22 34 31
  let%span s11_proof_assert_in_closure'2 = "11_proof_assert_in_closure.rs" 35 12 35 13
  let%span s11_proof_assert_in_closure'3 = "11_proof_assert_in_closure.rs" 36 22 36 31
  let%span s11_proof_assert_in_closure'4 = "11_proof_assert_in_closure.rs" 31 26 31 35
  let%span s11_proof_assert_in_closure'5 = "11_proof_assert_in_closure.rs" 32 14 32 23
  let%span s11_proof_assert_in_closure'6 = "11_proof_assert_in_closure.rs" 23 0 23 31
  let%span s11_proof_assert_in_closure'7 = "11_proof_assert_in_closure.rs" 24 0 24 40
  let%span s11_proof_assert_in_closure'8 = "11_proof_assert_in_closure.rs" 32 4 32 25
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 48 20 48 34
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type closure0 = { _0: MutBorrow.t Int32.t }
  
  predicate resolve (self: MutBorrow.t closure0) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0'0: MutBorrow.t closure0) = resolve _0'0
  
  predicate postcondition_once (self: closure0) (args: ()) (result: ()) =
    [%#s11_proof_assert_in_closure'8] let () = args in (self._0).final = (2: Int32.t)
  
  predicate resolve'1 (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0'0: MutBorrow.t Int32.t) = resolve'1 _0'0
  
  predicate resolve'3 (_0'0: closure0) = resolve'2 _0'0._0
  
  predicate hist_inv (self: closure0) (result_state: closure0) =
    [%#s11_proof_assert_in_closure'8] (result_state._0).final = (self._0).final
  
  predicate postcondition_mut (self: closure0) (args: ()) (result_state: closure0) (result: ()) =
    [%#s11_proof_assert_in_closure'8] let () = args in (result_state._0).current = (2: Int32.t)
    /\ hist_inv self result_state
  
  function fn_mut_once (self: closure0) (args: ()) (res: ()) : ()
  
  axiom fn_mut_once_spec: forall self: closure0, args: (), res: (). [%#sops'5] postcondition_once self args res
      = (exists res_state: closure0. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure0) (b: closure0) (c: closure0) : ()
  
  axiom hist_inv_trans_spec: forall self: closure0, b: closure0, c: closure0. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: closure0) : ()
  
  axiom hist_inv_refl_spec: forall self: closure0. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure0) (args: ()) (res_state: closure0) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure0, args: (), res_state: closure0, res: (). ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  let rec closure0 [#"11_proof_assert_in_closure.rs" 32 4 32 25] (self: MutBorrow.t closure0) (return' (x: ())) =
    {[@expl:closure requires] [%#s11_proof_assert_in_closure'4] ((self.current)._0).current = (1: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s11_proof_assert_in_closure'1] ((_1.current)._0).current = (1: Int32.t)} s1
      | s1 =
        [ &_1 <- { _1 with current = { _0 = { (_1.current)._0 with current = ([%#s11_proof_assert_in_closure'2] (2: Int32.t)) } } } ]
        s2
      | s2 = -{resolve'0 _1}- s3
      | s3 = {[@expl:assertion] [%#s11_proof_assert_in_closure'3] ((_1.current)._0).current = (2: Int32.t)} s4
      | s4 = return''0 {_0'0} ] ] [ & _0'0: () = Any.any_l () | & _1: MutBorrow.t closure0 = self ])
    [ return''0 (result: ()) -> {[@expl:closure ensures] [%#s11_proof_assert_in_closure'5] ((self.final)._0).current
      = (2: Int32.t)}
      {[@expl:closure hist_inv post] hist_inv self.current self.final}
      (! return' {result}) ]
  
  predicate precondition (self: closure0) (args: ()) =
    [%#s11_proof_assert_in_closure'8] let () = args in (self._0).current = (1: Int32.t)
  
  let rec calls_closure (f: closure0) (return' (x: ())) =
    {[@expl:calls_closure requires] [%#s11_proof_assert_in_closure'6] precondition f ()}
    any
    [ return''0 (result: ()) -> {[%#s11_proof_assert_in_closure'7] postcondition_once f () ()} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec captures_and_call [#"11_proof_assert_in_closure.rs" 29 0 29 26] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- [%#s11_proof_assert_in_closure] (1: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_3 <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = [ &clos <- { _0 = _3 } ] s3
      | s3 = calls_closure {clos} (fun (_ret: ()) -> [ &_4 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#s11_proof_assert_in_closure'0] x = (2: Int32.t)} s1 | s1 = return''0 {_0'0} ] ]
    [ & _0'0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & clos: closure0 = Any.any_l ()
    | & _3: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
