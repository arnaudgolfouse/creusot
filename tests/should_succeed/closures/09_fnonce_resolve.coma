module M_09_fnonce_resolve__f [#"09_fnonce_resolve.rs" 4 0 4 17]
  let%span s09_fnonce_resolve = "09_fnonce_resolve.rs" 5 16 5 20
  let%span s09_fnonce_resolve'0 = "09_fnonce_resolve.rs" 6 16 6 20
  let%span s09_fnonce_resolve'1 = "09_fnonce_resolve.rs" 25 18 25 28
  let%span s09_fnonce_resolve'2 = "09_fnonce_resolve.rs" 13 26 13 39
  let%span s09_fnonce_resolve'3 = "09_fnonce_resolve.rs" 15 21 15 22
  let%span s09_fnonce_resolve'4 = "09_fnonce_resolve.rs" 16 26 16 39
  let%span s09_fnonce_resolve'5 = "09_fnonce_resolve.rs" 18 26 18 38
  let%span s09_fnonce_resolve'6 = "09_fnonce_resolve.rs" 20 22 20 23
  let%span s09_fnonce_resolve'7 = "09_fnonce_resolve.rs" 21 26 21 40
  let%span s09_fnonce_resolve'8 = "09_fnonce_resolve.rs" 9 23 9 52
  let%span s09_fnonce_resolve'9 = "09_fnonce_resolve.rs" 10 14 10 47
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 62 8 62 22
  let%span sresolve'0 = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type closure0  =
    { _0: bool; _1: MutBorrow.t Int32.t; _2: MutBorrow.t Int32.t }
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve'0] self.final = self.current
  
  predicate resolve'0 (_0'0: MutBorrow.t Int32.t) =
    resolve _0'0
  
  predicate resolve'1 (self: MutBorrow.t Int32.t) =
    [%#sresolve] resolve'0 self
  
  predicate resolve'2 (_0'0: MutBorrow.t Int32.t) =
    resolve'1 _0'0
  
  predicate resolve'3 (self: MutBorrow.t Int32.t) =
    [%#sresolve] resolve'2 self
  
  predicate resolve'4 (_0'0: MutBorrow.t Int32.t) =
    resolve'3 _0'0
  
  let rec closure0[#"09_fnonce_resolve.rs" 10 4 10 49] (self:closure0) (return'  (x:()))= {[@expl:closure requires] [%#s09_fnonce_resolve'8] Int32.to_int (self._2).current
    = 1
    /\ Int32.to_int (self._1).current = 1}
    (! bb0
    [ bb0 = any [ br0 -> {_1'0._0 = false} (! bb3) | br1 -> {_1'0._0} (! bb1) ] 
    | bb1 = s0
      [ s0 = -{match _1'0 with
          | {_1 = x} -> resolve'4 x
          | _ -> true
          end}-
        s1
      | s1 = {[@expl:assertion] [%#s09_fnonce_resolve'2] Int32.to_int (_1'0._1).final = 1} s2
      | s2 =  [ &bx2 <- _1'0._2 ] s3
      | s3 = Int32.add {bx2.current} {[%#s09_fnonce_resolve'3] (1: Int32.t)}
          (fun (_ret:Int32.t) ->  [ &bx2 <- { bx2 with current = _ret } ] s4)
      | s4 = -{resolve'0 bx2}- s5
      | s5 = {[@expl:assertion] [%#s09_fnonce_resolve'4] Int32.to_int bx2.final = 2} s6
      | s6 = bb6 ]
    
    | bb3 = s0
      [ s0 = -{match _1'0 with
          | {_2 = x} -> resolve'2 x
          | _ -> true
          end}-
        s1
      | s1 = {[@expl:assertion] [%#s09_fnonce_resolve'5] Int32.to_int (_1'0._2).final = 1} s2
      | s2 =  [ &by2 <- _1'0._1 ] s3
      | s3 = Int32.add {by2.current} {[%#s09_fnonce_resolve'6] (1: Int32.t)}
          (fun (_ret:Int32.t) ->  [ &by2 <- { by2 with current = _ret } ] s4)
      | s4 = -{resolve'0 by2}- s5
      | s5 = {[@expl:assertion] [%#s09_fnonce_resolve'7] Int32.to_int by2.final = 2} s6
      | s6 = bb6 ]
    
    | bb6 = return''0 {_0'0} ]
    
    [ & _0'0: () = Any.any_l ()
    | & _1'0: closure0 = self
    | & bx2: MutBorrow.t Int32.t = Any.any_l ()
    | & by2: MutBorrow.t Int32.t = Any.any_l () ]
    )
    [ return''0 (result:())-> {[@expl:closure ensures] [%#s09_fnonce_resolve'9] Int32.to_int (self._2).final
      + Int32.to_int (self._1).final
      = 3}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f[#"09_fnonce_resolve.rs" 4 0 4 17] (c:bool) (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s09_fnonce_resolve] (1: Int32.t) ] s1
      | s1 =  [ &y <- [%#s09_fnonce_resolve'0] (1: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_5 <- _ret ]  [ &x <- _ret.final ] s3)
      | s3 =  [ &bx <- _5 ] s4
      | s4 = bb1 ]
    
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {y}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_8 <- _ret ]  [ &y <- _ret.final ] s1)
      | s1 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &by' <- _8 ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &f'0 <- { _0 = c'0; _1 = by'; _2 = bx } ] s1
      | s1 = closure0 {f'0} (fun (_ret:()) ->  [ &_10 <- _ret ] s2)
      | s2 = bb4 ]
    
    | bb4 = s0 [ s0 = {[@expl:assertion] [%#s09_fnonce_resolve'1] Int32.to_int x + Int32.to_int y = 3} s1 | s1 = bb7 ] 
    | bb7 = return''0 {_0'0} ]
    
    [ & _0'0: () = Any.any_l ()
    | & c'0: bool = c
    | & x: Int32.t = Any.any_l ()
    | & y: Int32.t = Any.any_l ()
    | & bx: MutBorrow.t Int32.t = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l ()
    | & by': MutBorrow.t Int32.t = Any.any_l ()
    | & _8: MutBorrow.t Int32.t = Any.any_l ()
    | & f'0: closure0 = Any.any_l ()
    | & _10: () = Any.any_l ()
    | & _12: () = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
