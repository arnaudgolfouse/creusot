module M_14_move_resolve__f [#"14_move_resolve.rs" 5 0 5 17]
  let%span s14_move_resolve = "14_move_resolve.rs" 6 13 6 25
  let%span s14_move_resolve'0 = "14_move_resolve.rs" 11 18 11 64
  let%span s14_move_resolve'1 = "14_move_resolve.rs" 5 12 5 13
  let%span s14_move_resolve'2 = "14_move_resolve.rs" 7 12 7 29
  let%span s14_move_resolve'3 = "14_move_resolve.rs" 7 23 7 27
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_T
  
  type closure1  =
    { _0: t_T }
  
  predicate inv (_0'0: t_T)
  
  predicate inv'0 (_0'0: closure1)
  
  axiom inv_axiom [@rewrite]: forall x: closure1 [inv'0 x]. inv'0 x = (let {_0 = x0} = x in inv x0)
  
  predicate invariant' (self: closure1) =
    [%#sinvariant] inv'0 self
  
  predicate inv'1 (_0'0: closure1)
  
  axiom inv_axiom'0 [@rewrite]: forall x: closure1 [inv'1 x]. inv'1 x = invariant' x
  
  let rec closure1[#"14_move_resolve.rs" 7 12 7 29] (self:closure1) (return'  (x:()))= {[@expl:closure 'self' type invariant] [%#s14_move_resolve'2] inv'1 self}
    {[@expl:closure requires] [%#s14_move_resolve'3] true}
    (! bb0 [ bb0 = return''0 {_0'0} ] ) [ & _0'0: () = Any.any_l () | & _1: closure1 = self ] 
    [ return''0 (result:())-> (! return' {result}) ]
  
  
  predicate resolve (_0'0: t_T)
  
  predicate postcondition_once (self: closure1) (args: ()) (result: ()) =
    [%#s14_move_resolve'2] let () = args in resolve self._0
  
  predicate resolve'0 (_0'0: closure1) =
    resolve _0'0._0
  
  meta "compute_max_steps" 1000000
  
  let rec f[#"14_move_resolve.rs" 5 0 5 17] (x:t_T) (return'  (x'0:()))= {[@expl:f 'x' type invariant] [%#s14_move_resolve'1] inv x}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &xx <- [%#s14_move_resolve] x'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &f'0 <- { _0 = x'0 } ] s1
      | s1 = {[@expl:assertion] [%#s14_move_resolve'0] postcondition_once f'0 () ()  -> resolve xx} s2
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 = closure1 {f'0} (fun (_ret:()) ->  [ &_0'0 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'0 f'0} s1 | s1 = -{resolve'0 f'0}- s2 | s2 = bb5 ] 
    | bb5 = return''0 {_0'0} ]
    )
    [ & _0'0: () = Any.any_l ()
    | & x'0: t_T = x
    | & xx: t_T = Any.any_l ()
    | & f'0: closure1 = Any.any_l ()
    | & _8: () = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_14_move_resolve__g [#"14_move_resolve.rs" 16 0 16 17]
  let%span s14_move_resolve = "14_move_resolve.rs" 17 13 17 25
  let%span s14_move_resolve'0 = "14_move_resolve.rs" 21 18 21 64
  let%span s14_move_resolve'1 = "14_move_resolve.rs" 16 12 16 13
  let%span s14_move_resolve'2 = "14_move_resolve.rs" 18 12 18 19
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_T
  
  type closure0  =
    { _0: t_T }
  
  predicate inv (_0'0: t_T)
  
  predicate inv'0 (_0'0: closure0)
  
  axiom inv_axiom [@rewrite]: forall x: closure0 [inv'0 x]. inv'0 x = (let {_0 = x0} = x in inv x0)
  
  predicate invariant' (self: closure0) =
    [%#sinvariant] inv'0 self
  
  predicate inv'1 (_0'0: closure0)
  
  axiom inv_axiom'0 [@rewrite]: forall x: closure0 [inv'1 x]. inv'1 x = invariant' x
  
  let rec closure0[#"14_move_resolve.rs" 18 12 18 19] [@coma:extspec] (self:closure0) (return'  (x:()))= bb0
    [ bb0 = return''0 {_0'0} ]
     [ & _0'0: () = Any.any_l () | & _1: closure0 = self ]  [ return''0 (result:())-> return' {result} ] 
  
  predicate resolve (_0'0: t_T)
  
  predicate resolve'0 (_0'0: closure0) =
    resolve _0'0._0
  
  predicate postcondition_once (self: closure0) (args: ()) (result: ()) =
    [%#s14_move_resolve'2] let () = args in closure0'post'return' self result /\ resolve'0 self
  
  meta "compute_max_steps" 1000000
  
  let rec g[#"14_move_resolve.rs" 16 0 16 17] (x:t_T) (return'  (x'0:()))= {[@expl:g 'x' type invariant] [%#s14_move_resolve'1] inv x}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &xx <- [%#s14_move_resolve] x'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &f <- { _0 = x'0 } ] s1
      | s1 = {[@expl:assertion] [%#s14_move_resolve'0] postcondition_once f () ()  -> resolve xx} s2
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 = closure0 {f} (fun (_ret:()) ->  [ &_0'0 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb5 ] 
    | bb5 = return''0 {_0'0} ]
    )
    [ & _0'0: () = Any.any_l ()
    | & x'0: t_T = x
    | & xx: t_T = Any.any_l ()
    | & f: closure0 = Any.any_l ()
    | & _8: () = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
