module M_f
  use creusot.prelude.Any
  
  type t_T
  
  type closure1 = { c0: t_T }
  
  predicate inv_T (_1: t_T)
  
  predicate inv_closure1 [@inline:trivial] (_1: closure1) = let {c0 = x0} = _1 in inv_T x0
  
  meta "rewrite_def" predicate inv_closure1
  
  predicate invariant_ref_closure1 [@inline:trivial] (self: closure1) = inv_closure1 self
  
  meta "rewrite_def" predicate invariant_ref_closure1
  
  predicate inv_ref_closure1 [@inline:trivial] (_1: closure1) = invariant_ref_closure1 _1
  
  meta "rewrite_def" predicate inv_ref_closure1
  
  let rec closure1 (self: closure1) (return (x: ())) = {[@expl:closure 'self' type invariant] inv_ref_closure1 self}
    {[@expl:closure requires] true}
    (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () | & self: closure1 = self ])
    [ return (result: ()) -> (! return {result}) ]
  
  predicate resolve_T (_1: t_T)
  
  predicate postcondition_once_closure1 [@inline:trivial] (self: closure1) (args: ()) (result: ()) = resolve_T self.c0
  
  meta "rewrite_def" predicate postcondition_once_closure1
  
  predicate resolve_closure1 [@inline:trivial] (_1: closure1) = resolve_T _1.c0
  
  meta "rewrite_def" predicate resolve_closure1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f_T (x: t_T) (return (x'0: ())) = {[@expl:f 'x' type invariant] inv_T x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &xx <- x ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &f <- { c0 = x } ] s1
      | s1 = {[@expl:assertion] postcondition_once_closure1 f () () -> resolve_T xx} s2
      | s2 = {[@expl:type invariant] inv_closure1 f} s3
      | s3 = -{resolve_closure1 f}- s4
      | s4 = closure1 {f} (fun (_ret: ()) -> [ &_0 <- _ret ] s5)
      | s5 = bb4 ]
    | bb4 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & x: t_T = x
    | & xx: t_T = Any.any_l ()
    | & f: closure1 = Any.any_l ()
    | & _8: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_g
  use creusot.prelude.Any
  
  type t_T
  
  type closure0 = { c0: t_T }
  
  predicate inv_T (_1: t_T)
  
  predicate inv_closure0 [@inline:trivial] (_1: closure0) = let {c0 = x0} = _1 in inv_T x0
  
  meta "rewrite_def" predicate inv_closure0
  
  predicate invariant_ref_closure0 [@inline:trivial] (self: closure0) = inv_closure0 self
  
  meta "rewrite_def" predicate invariant_ref_closure0
  
  predicate inv_ref_closure0 [@inline:trivial] (_1: closure0) = invariant_ref_closure0 _1
  
  meta "rewrite_def" predicate inv_ref_closure0
  
  let rec closure0 [@coma:extspec] (self: closure0) (return (x: ())) = bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () | & self: closure0 = self ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate resolve_T (_1: t_T)
  
  predicate resolve_closure0 [@inline:trivial] (_1: closure0) = resolve_T _1.c0
  
  meta "rewrite_def" predicate resolve_closure0
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: ()) (result: ()) =
    closure0'post'return self result /\ resolve_closure0 self
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g_T (x: t_T) (return (x'0: ())) = {[@expl:g 'x' type invariant] inv_T x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &xx <- x ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &f <- { c0 = x } ] s1
      | s1 = {[@expl:assertion] postcondition_once_closure0 f () () -> resolve_T xx} s2
      | s2 = {[@expl:type invariant] inv_closure0 f} s3
      | s3 = -{resolve_closure0 f}- s4
      | s4 = closure0 {f} (fun (_ret: ()) -> [ &_0 <- _ret ] s5)
      | s5 = bb4 ]
    | bb4 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & x: t_T = x
    | & xx: t_T = Any.any_l ()
    | & f: closure0 = Any.any_l ()
    | & _8: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
