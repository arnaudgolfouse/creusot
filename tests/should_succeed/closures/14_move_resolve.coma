module M_14_move_resolve__f
  use creusot.prelude.Any
  
  type t_T
  
  type closure1 = { _0: t_T }
  
  predicate inv (_0'0: t_T)
  
  predicate inv'0 (_0'0: closure1)
  
  axiom inv_axiom [@rewrite]: forall x: closure1 [inv'0 x]. inv'0 x = (let {_0 = x0} = x in inv x0)
  
  predicate invariant' [@inline:trivial] (self: closure1) = inv'0 self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 (_0'0: closure1)
  
  axiom inv_axiom'0 [@rewrite]: forall x: closure1 [inv'1 x]. inv'1 x = invariant' x
  
  let rec closure1 (self: closure1) (return' (x: ())) = {[@expl:closure 'self' type invariant] inv'1 self}
    {[@expl:closure requires] true}
    (! bb0
    [ bb0 = return''0 {_0'0} ] [ & _0'0: () = Any.any_l () | & _1: closure1 = self ])
    [ return''0 (result: ()) -> (! return' {result}) ]
  
  predicate resolve (_0'0: t_T)
  
  predicate postcondition_once [@inline:trivial] (self: closure1) (args: ()) (result: ()) = resolve self._0
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve'0 [@inline:trivial] (_0'0: closure1) = resolve _0'0._0
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (x: t_T) (return' (x'0: ())) = {[@expl:f 'x' type invariant] inv x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &xx <- x'0 ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &f'0 <- { _0 = x'0 } ] s1
      | s1 = {[@expl:assertion] postcondition_once f'0 () () -> resolve xx} s2
      | s2 = {[@expl:type invariant] inv'0 f'0} s3
      | s3 = -{resolve'0 f'0}- s4
      | s4 = closure1 {f'0} (fun (_ret: ()) -> [ &_0'0 <- _ret ] s5)
      | s5 = bb4 ]
    | bb4 = return''0 {_0'0} ]
    [ & _0'0: () = Any.any_l ()
    | & x'0: t_T = x
    | & xx: t_T = Any.any_l ()
    | & f'0: closure1 = Any.any_l ()
    | & _8: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_14_move_resolve__g
  use creusot.prelude.Any
  
  type t_T
  
  type closure0 = { _0: t_T }
  
  predicate inv (_0'0: t_T)
  
  predicate inv'0 (_0'0: closure0)
  
  axiom inv_axiom [@rewrite]: forall x: closure0 [inv'0 x]. inv'0 x = (let {_0 = x0} = x in inv x0)
  
  predicate invariant' [@inline:trivial] (self: closure0) = inv'0 self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 (_0'0: closure0)
  
  axiom inv_axiom'0 [@rewrite]: forall x: closure0 [inv'1 x]. inv'1 x = invariant' x
  
  let rec closure0 [@coma:extspec] (self: closure0) (return' (x: ())) = bb0
    [ bb0 = return' {_0'0} ] [ & _0'0: () = Any.any_l () | & _1: closure0 = self ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return'
  
  predicate resolve (_0'0: t_T)
  
  predicate resolve'0 [@inline:trivial] (_0'0: closure0) = resolve _0'0._0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate postcondition_once [@inline:trivial] (self: closure0) (args: ()) (result: ()) =
    closure0'post'return' self result /\ resolve'0 self
  
  meta "rewrite_def" predicate postcondition_once
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g (x: t_T) (return' (x'0: ())) = {[@expl:g 'x' type invariant] inv x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &xx <- x'0 ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &f <- { _0 = x'0 } ] s1
      | s1 = {[@expl:assertion] postcondition_once f () () -> resolve xx} s2
      | s2 = {[@expl:type invariant] inv'0 f} s3
      | s3 = -{resolve'0 f}- s4
      | s4 = closure0 {f} (fun (_ret: ()) -> [ &_0'0 <- _ret ] s5)
      | s5 = bb4 ]
    | bb4 = return''0 {_0'0} ]
    [ & _0'0: () = Any.any_l ()
    | & x'0: t_T = x
    | & xx: t_T = Any.any_l ()
    | & f: closure0 = Any.any_l ()
    | & _8: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
