module M_13_ref_box__call_fn [#"13_ref_box.rs" 6 0 6 50]
  let%span s13_ref_box = "13_ref_box.rs" 6 30 6 31
  let%span s13_ref_box'0 = "13_ref_box.rs" 4 0 4 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 5 0 5 41
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 194 16 194 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 194 27 194 52
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 195 26 195 60
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'9 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'10 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'11 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'11] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'8] hist_inv self b)
      -> ([%#sops'9] hist_inv b c) -> ([%#sops'10] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'7] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'5] postcondition_mut self args res_state res)
      -> ([%#sops'6] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'4] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'3] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops'2] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec call (self_: t_F) (arg: Int32.t) (return' (x: Int32.t)) =
    {[@expl:call 'self_' type invariant] [%#sops] inv'0 self_}
    {[@expl:call requires] [%#sops'0] precondition self_ arg}
    any [ return''0 (result: Int32.t) -> {[%#sops'1] postcondition self_ arg result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_fn [#"13_ref_box.rs" 6 0 6 50] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fn 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:call_fn requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_6 <- x'0 ] s1 | s1 = call {f'0} {_6} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x | & _6: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) -> {[@expl:call_fn ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__call_fnmut [#"13_ref_box.rs" 12 0 12 60]
  let%span s13_ref_box = "13_ref_box.rs" 12 40 12 41
  let%span s13_ref_box'0 = "13_ref_box.rs" 10 0 10 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 11 10 11 73
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 188 16 188 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 188 27 188 52
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 189 26 189 71
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 100 20 100 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: MutBorrow.t t_F) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  let rec call_mut (self_: MutBorrow.t t_F) (arg: Int32.t) (return' (x: Int32.t)) =
    {[@expl:call_mut 'self_' type invariant] [%#sops] inv'0 self_}
    {[@expl:call_mut requires] [%#sops'0] precondition self_.current arg}
    any
    [ return''0 (result: Int32.t) -> {[%#sops'1] postcondition_mut self_.current arg self_.final result}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_fnmut [#"13_ref_box.rs" 12 0 12 60] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnmut 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:call_fnmut requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv f'0}
        MutBorrow.borrow_mut <t_F> {f'0}
          (fun (_ret: MutBorrow.t t_F) -> [ &_5 <- _ret ] -{inv _ret.final}- [ &f'0 <- _ret.final ] s1)
      | s1 = [ &_6 <- x'0 ] s2
      | s2 = call_mut {_5} {_6} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & f'0: t_F = f
    | & x'0: Int32.t = x
    | & _5: MutBorrow.t t_F = Any.any_l ()
    | & _6: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) ->
    {[@expl:call_fnmut ensures] [%#s13_ref_box'1] exists f2: t_F. postcondition_mut f x f2 result /\ resolve f2}
      (! return' {result}) ]
end
module M_13_ref_box__call_fnonce [#"13_ref_box.rs" 18 0 18 58]
  let%span s13_ref_box = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'0 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 17 0 17 46
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 182 16 182 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 182 16 182 51
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 183 16 183 64
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  let rec call_once (self_: t_F) (arg: Int32.t) (return' (x: Int32.t)) =
    {[@expl:call_once 'self_' type invariant] [%#sops] inv self_}
    {[@expl:call_once requires] [%#sops'0] precondition self_ arg}
    any [ return''0 (result: Int32.t) -> {[%#sops'1] postcondition_once self_ arg result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_fnonce [#"13_ref_box.rs" 18 0 18 58] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_6 <- x'0 ] s1 | s1 = call_once {f'0} {_6} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2) | s2 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x | & _6: Int32.t = Any.any_l () ])
    [ return''0 (result: Int32.t) -> {[@expl:call_fnonce ensures] [%#s13_ref_box'1] postcondition_once f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test1 [#"13_ref_box.rs" 24 0 24 52]
  let%span s13_ref_box = "13_ref_box.rs" 24 32 24 33
  let%span s13_ref_box'0 = "13_ref_box.rs" 22 0 22 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 23 0 23 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 6 30 6 31
  let%span s13_ref_box'3 = "13_ref_box.rs" 4 0 4 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 5 0 5 41
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition self args result
  
  predicate resolve'0 (_0: t_F)
  
  predicate postcondition_mut'0 (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t) =
    postcondition self args result /\ self = result_state
  
  function fn_mut_once'0 (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv'0 (self: t_F) (result_state: t_F) = self = result_state
  
  function hist_inv_trans'0 (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec'0: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv'0 self b)
      -> ([%#sops'6] hist_inv'0 b c) -> ([%#sops'7] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: t_F. [%#sops'4] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut'0 self args res_state res)
      -> ([%#sops'3] hist_inv'0 self res_state)
  
  function fn_hist_inv'0 (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec'0: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv'0 self res_state = (self = res_state)
  
  predicate postcondition'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition self args result
  
  function fn_once'0 (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec'0: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once'0 self args res
      = (postcondition'0 self args res /\ resolve'0 self)
  
  function fn_mut'0 (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec'0:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut'0 self args res_state res
      = (postcondition'0 self args res /\ self = res_state)
  
  let rec call_fn (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fn 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fn requires] [%#s13_ref_box'3] precondition'0 f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition'0 f x result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test1 [#"13_ref_box.rs" 24 0 24 52] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test1 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test1 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0 [ s0 = call_fn {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test1 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test2 [#"13_ref_box.rs" 30 0 30 52]
  let%span s13_ref_box = "13_ref_box.rs" 30 32 30 33
  let%span s13_ref_box'0 = "13_ref_box.rs" 28 0 28 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 29 0 29 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 6 30 6 31
  let%span s13_ref_box'3 = "13_ref_box.rs" 4 0 4 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 5 0 5 41
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 58 8 58 22
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition_once self args result
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  predicate resolve'0 (self: t_F) = [%#sresolve] resolve self
  
  predicate resolve'1 (_0: t_F) = resolve'0 _0
  
  predicate postcondition_mut'0 (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t) =
    postcondition_mut self args result_state result
  
  function fn_mut_once'0 (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv'0 (self: t_F) (result_state: t_F) = hist_inv self result_state
  
  function hist_inv_trans'0 (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec'0: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv'0 self b)
      -> ([%#sops'6] hist_inv'0 b c) -> ([%#sops'7] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: t_F. [%#sops'4] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut'0 self args res_state res)
      -> ([%#sops'3] hist_inv'0 self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  function fn_hist_inv'0 (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec'0: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv'0 self res_state = (self = res_state)
  
  predicate postcondition'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition self args result
  
  function fn_once'0 (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec'0: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once'0 self args res
      = (postcondition'0 self args res /\ resolve'1 self)
  
  function fn_mut'0 (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec'0:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut'0 self args res_state res
      = (postcondition'0 self args res /\ self = res_state)
  
  let rec call_fn (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fn 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fn requires] [%#s13_ref_box'3] precondition'0 f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition'0 f x result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test2 [#"13_ref_box.rs" 30 0 30 52] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test2 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test2 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = call_fn {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test2 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test3 [#"13_ref_box.rs" 36 0 36 52]
  let%span s13_ref_box = "13_ref_box.rs" 36 32 36 33
  let%span s13_ref_box'0 = "13_ref_box.rs" 34 0 34 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 35 0 35 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 12 40 12 41
  let%span s13_ref_box'3 = "13_ref_box.rs" 10 0 10 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 11 10 11 73
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition self args result
  
  predicate resolve'0 (_0: t_F)
  
  predicate postcondition_mut'0 (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t) =
    postcondition self args result /\ self = result_state
  
  function fn_mut_once'0 (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv'0 (self: t_F) (result_state: t_F) = self = result_state
  
  function hist_inv_trans'0 (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec'0: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv'0 self b)
      -> ([%#sops'6] hist_inv'0 b c) -> ([%#sops'7] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: t_F. [%#sops'4] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut'0 self args res_state res)
      -> ([%#sops'3] hist_inv'0 self res_state)
  
  let rec call_fnmut (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnmut 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnmut requires] [%#s13_ref_box'3] precondition'0 f x}
    any
    [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] exists f2: t_F. postcondition_mut'0 f x f2 result
        /\ resolve'0 f2}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test3 [#"13_ref_box.rs" 36 0 36 52] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test3 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test3 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0 [ s0 = call_fnmut {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test3 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test4 [#"13_ref_box.rs" 42 0 42 52]
  let%span s13_ref_box = "13_ref_box.rs" 42 32 42 33
  let%span s13_ref_box'0 = "13_ref_box.rs" 40 0 40 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 41 0 41 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 12 40 12 41
  let%span s13_ref_box'3 = "13_ref_box.rs" 10 0 10 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 11 10 11 73
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 58 8 58 22
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition_once self args result
  
  predicate resolve (_0: t_F)
  
  predicate resolve'0 (self: t_F) = [%#sresolve] resolve self
  
  predicate resolve'1 (_0: t_F) = resolve'0 _0
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  predicate postcondition_mut'0 (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t) =
    postcondition_mut self args result_state result
  
  function fn_mut_once'0 (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv'0 (self: t_F) (result_state: t_F) = hist_inv self result_state
  
  function hist_inv_trans'0 (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec'0: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv'0 self b)
      -> ([%#sops'6] hist_inv'0 b c) -> ([%#sops'7] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: t_F. [%#sops'4] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut'0 self args res_state res)
      -> ([%#sops'3] hist_inv'0 self res_state)
  
  let rec call_fnmut (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnmut 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnmut requires] [%#s13_ref_box'3] precondition'0 f x}
    any
    [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] exists f2: t_F. postcondition_mut'0 f x f2 result
        /\ resolve'1 f2}
      (! return' {result}) ]
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test4 [#"13_ref_box.rs" 42 0 42 52] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test4 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test4 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = call_fnmut {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test4 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test5 [#"13_ref_box.rs" 48 0 48 56]
  let%span s13_ref_box = "13_ref_box.rs" 48 36 48 37
  let%span s13_ref_box'0 = "13_ref_box.rs" 46 0 46 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 47 0 47 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 12 40 12 41
  let%span s13_ref_box'3 = "13_ref_box.rs" 10 0 10 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 11 10 11 73
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 100 20 100 44
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: MutBorrow.t t_F) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: MutBorrow.t t_F) (args: Int32.t) = precondition self.current args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  predicate postcondition_once'0 (self: MutBorrow.t t_F) (args: Int32.t) (result: Int32.t) =
    postcondition_mut self.current args self.final result
  
  predicate resolve'0 (self: MutBorrow.t t_F) = [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t t_F) = resolve'0 _0
  
  predicate postcondition_mut'0 (self: MutBorrow.t t_F) (args: Int32.t) (result_state: MutBorrow.t t_F) (result: Int32.t) =
    postcondition_mut self.current args result_state.current result /\ self.final = result_state.final
  
  function fn_mut_once'0 (self: MutBorrow.t t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0:
    forall self: MutBorrow.t t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once'0 self args res
      = (exists res_state: MutBorrow.t t_F. postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv'0 (self: MutBorrow.t t_F) (result_state: MutBorrow.t t_F) =
    hist_inv self.current result_state.current /\ self.final = result_state.final
  
  function hist_inv_trans'0 (self: MutBorrow.t t_F) (b: MutBorrow.t t_F) (c: MutBorrow.t t_F) : ()
  
  axiom hist_inv_trans_spec'0:
    forall self: MutBorrow.t t_F, b: MutBorrow.t t_F, c: MutBorrow.t t_F. ([%#sops'5] hist_inv'0 self b)
      -> ([%#sops'6] hist_inv'0 b c) -> ([%#sops'7] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: MutBorrow.t t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: MutBorrow.t t_F. [%#sops'4] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: MutBorrow.t t_F) (args: Int32.t) (res_state: MutBorrow.t t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: MutBorrow.t t_F, args: Int32.t, res_state: MutBorrow.t t_F, res: Int32.t. ([%#sops'2] postcondition_mut'0 self args res_state res)
      -> ([%#sops'3] hist_inv'0 self res_state)
  
  let rec call_fnmut (f: MutBorrow.t t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnmut 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnmut requires] [%#s13_ref_box'3] precondition'0 f x}
    any
    [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] exists f2: MutBorrow.t t_F. postcondition_mut'0 f x f2 result
        /\ resolve'1 f2}
      (! return' {result}) ]
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test5 [#"13_ref_box.rs" 48 0 48 56] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test5 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test5 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv f'0}
        MutBorrow.borrow_mut <t_F> {f'0}
          (fun (_ret: MutBorrow.t t_F) -> [ &_5 <- _ret ] -{inv _ret.final}- [ &f'0 <- _ret.final ] s1)
      | s1 = call_fnmut {_5} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x | & _5: MutBorrow.t t_F = Any.any_l () ])
    [ return''0 (result: Int32.t) -> {[@expl:test5 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test6 [#"13_ref_box.rs" 54 0 54 52]
  let%span s13_ref_box = "13_ref_box.rs" 54 32 54 33
  let%span s13_ref_box'0 = "13_ref_box.rs" 52 0 52 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 53 0 53 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'3 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 17 0 17 46
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition self args result
  
  let rec call_fnonce (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'3] precondition'0 f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition_once'0 f x result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test6 [#"13_ref_box.rs" 54 0 54 52] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test6 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test6 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0 [ s0 = call_fnonce {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test6 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test7 [#"13_ref_box.rs" 60 0 60 52]
  let%span s13_ref_box = "13_ref_box.rs" 60 32 60 33
  let%span s13_ref_box'0 = "13_ref_box.rs" 58 0 58 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 59 0 59 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'3 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 17 0 17 46
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition_once self args result
  
  let rec call_fnonce (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'3] precondition'0 f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition_once'0 f x result} (! return' {result}) ]
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test7 [#"13_ref_box.rs" 60 0 60 52] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test7 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test7 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = call_fnonce {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test7 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test8 [#"13_ref_box.rs" 66 0 66 56]
  let%span s13_ref_box = "13_ref_box.rs" 66 36 66 37
  let%span s13_ref_box'0 = "13_ref_box.rs" 64 0 64 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 65 0 65 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'3 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 17 0 17 46
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 100 20 100 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: MutBorrow.t t_F) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: MutBorrow.t t_F) (args: Int32.t) = precondition self.current args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  predicate postcondition_once'0 (self: MutBorrow.t t_F) (args: Int32.t) (result: Int32.t) =
    postcondition_mut self.current args self.final result
  
  let rec call_fnonce (f: MutBorrow.t t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'3] precondition'0 f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition_once'0 f x result} (! return' {result}) ]
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test8 [#"13_ref_box.rs" 66 0 66 56] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test8 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test8 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv f'0}
        MutBorrow.borrow_mut <t_F> {f'0}
          (fun (_ret: MutBorrow.t t_F) -> [ &_5 <- _ret ] -{inv _ret.final}- [ &f'0 <- _ret.final ] s1)
      | s1 = call_fnonce {_5} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x | & _5: MutBorrow.t t_F = Any.any_l () ])
    [ return''0 (result: Int32.t) -> {[@expl:test8 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test9 [#"13_ref_box.rs" 72 0 72 55]
  let%span s13_ref_box = "13_ref_box.rs" 72 35 72 36
  let%span s13_ref_box'0 = "13_ref_box.rs" 70 0 70 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 71 10 71 73
  let%span s13_ref_box'2 = "13_ref_box.rs" 12 40 12 41
  let%span s13_ref_box'3 = "13_ref_box.rs" 10 0 10 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 11 10 11 73
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 58 8 58 22
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition_once self args result
  
  predicate resolve (_0: t_F)
  
  predicate resolve'0 (self: t_F) = [%#sresolve] resolve self
  
  predicate resolve'1 (_0: t_F) = resolve'0 _0
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate postcondition_mut'0 (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t) =
    postcondition_mut self args result_state result
  
  function fn_mut_once'0 (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'5] postcondition_once'0 self args res
      = (exists res_state: t_F. postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv'0 (self: t_F) (result_state: t_F) = hist_inv self result_state
  
  function hist_inv_trans'0 (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec'0: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv'0 self b)
      -> ([%#sops'3] hist_inv'0 b c) -> ([%#sops'4] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: t_F. [%#sops'1] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops] postcondition_mut'0 self args res_state res)
      -> ([%#sops'0] hist_inv'0 self res_state)
  
  let rec call_fnmut (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnmut 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnmut requires] [%#s13_ref_box'3] precondition'0 f x}
    any
    [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] exists f2: t_F. postcondition_mut'0 f x f2 result
        /\ resolve'1 f2}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test9 [#"13_ref_box.rs" 72 0 72 55] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test9 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test9 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = call_fnmut {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) ->
    {[@expl:test9 ensures] [%#s13_ref_box'1] exists f2: t_F. postcondition_mut f x f2 result /\ resolve f2}
      (! return' {result}) ]
end
module M_13_ref_box__test10 [#"13_ref_box.rs" 78 0 78 60]
  let%span s13_ref_box = "13_ref_box.rs" 78 40 78 41
  let%span s13_ref_box'0 = "13_ref_box.rs" 76 0 76 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 77 10 77 73
  let%span s13_ref_box'2 = "13_ref_box.rs" 12 40 12 41
  let%span s13_ref_box'3 = "13_ref_box.rs" 10 0 10 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 11 10 11 73
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 100 20 100 44
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: MutBorrow.t t_F) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: MutBorrow.t t_F) (args: Int32.t) = precondition self.current args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate postcondition_once'0 (self: MutBorrow.t t_F) (args: Int32.t) (result: Int32.t) =
    postcondition_mut self.current args self.final result
  
  predicate resolve'0 (self: MutBorrow.t t_F) = [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0: MutBorrow.t t_F) = resolve'0 _0
  
  predicate postcondition_mut'0 (self: MutBorrow.t t_F) (args: Int32.t) (result_state: MutBorrow.t t_F) (result: Int32.t) =
    postcondition_mut self.current args result_state.current result /\ self.final = result_state.final
  
  function fn_mut_once'0 (self: MutBorrow.t t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0:
    forall self: MutBorrow.t t_F, args: Int32.t, res: Int32.t. [%#sops'5] postcondition_once'0 self args res
      = (exists res_state: MutBorrow.t t_F. postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv'0 (self: MutBorrow.t t_F) (result_state: MutBorrow.t t_F) =
    hist_inv self.current result_state.current /\ self.final = result_state.final
  
  function hist_inv_trans'0 (self: MutBorrow.t t_F) (b: MutBorrow.t t_F) (c: MutBorrow.t t_F) : ()
  
  axiom hist_inv_trans_spec'0:
    forall self: MutBorrow.t t_F, b: MutBorrow.t t_F, c: MutBorrow.t t_F. ([%#sops'2] hist_inv'0 self b)
      -> ([%#sops'3] hist_inv'0 b c) -> ([%#sops'4] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: MutBorrow.t t_F) : ()
  
  axiom hist_inv_refl_spec'0: forall self: MutBorrow.t t_F. [%#sops'1] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: MutBorrow.t t_F) (args: Int32.t) (res_state: MutBorrow.t t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: MutBorrow.t t_F, args: Int32.t, res_state: MutBorrow.t t_F, res: Int32.t. ([%#sops] postcondition_mut'0 self args res_state res)
      -> ([%#sops'0] hist_inv'0 self res_state)
  
  let rec call_fnmut (f: MutBorrow.t t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnmut 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnmut requires] [%#s13_ref_box'3] precondition'0 f x}
    any
    [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] exists f2: MutBorrow.t t_F. postcondition_mut'0 f x f2 result
        /\ resolve'1 f2}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test10 [#"13_ref_box.rs" 78 0 78 60] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test10 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test10 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv f'0}
        MutBorrow.borrow_mut <t_F> {f'0}
          (fun (_ret: MutBorrow.t t_F) -> [ &_5 <- _ret ] -{inv _ret.final}- [ &f'0 <- _ret.final ] s1)
      | s1 = call_fnmut {_5} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x | & _5: MutBorrow.t t_F = Any.any_l () ])
    [ return''0 (result: Int32.t) ->
    {[@expl:test10 ensures] [%#s13_ref_box'1] exists f2: t_F. postcondition_mut f x f2 result /\ resolve f2}
      (! return' {result}) ]
end
module M_13_ref_box__test11 [#"13_ref_box.rs" 84 0 84 56]
  let%span s13_ref_box = "13_ref_box.rs" 84 36 84 37
  let%span s13_ref_box'0 = "13_ref_box.rs" 82 0 82 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 83 10 83 73
  let%span s13_ref_box'2 = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'3 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 17 0 17 46
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition_once self args result
  
  let rec call_fnonce (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'3] precondition'0 f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition_once'0 f x result} (! return' {result}) ]
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test11 [#"13_ref_box.rs" 84 0 84 56] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test11 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test11 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = call_fnonce {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) ->
    {[@expl:test11 ensures] [%#s13_ref_box'1] exists f2: t_F. postcondition_mut f x f2 result /\ resolve f2}
      (! return' {result}) ]
end
module M_13_ref_box__test12 [#"13_ref_box.rs" 90 0 90 60]
  let%span s13_ref_box = "13_ref_box.rs" 90 40 90 41
  let%span s13_ref_box'0 = "13_ref_box.rs" 88 0 88 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 89 10 89 73
  let%span s13_ref_box'2 = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'3 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 17 0 17 46
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 100 20 100 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: MutBorrow.t t_F) = [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: MutBorrow.t t_F) (args: Int32.t) = precondition self.current args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  predicate postcondition_once'0 (self: MutBorrow.t t_F) (args: Int32.t) (result: Int32.t) =
    postcondition_mut self.current args self.final result
  
  let rec call_fnonce (f: MutBorrow.t t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'3] precondition'0 f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition_once'0 f x result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test12 [#"13_ref_box.rs" 90 0 90 60] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test12 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test12 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv f'0}
        MutBorrow.borrow_mut <t_F> {f'0}
          (fun (_ret: MutBorrow.t t_F) -> [ &_5 <- _ret ] -{inv _ret.final}- [ &f'0 <- _ret.final ] s1)
      | s1 = call_fnonce {_5} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x | & _5: MutBorrow.t t_F = Any.any_l () ])
    [ return''0 (result: Int32.t) ->
    {[@expl:test12 ensures] [%#s13_ref_box'1] exists f2: t_F. postcondition_mut f x f2 result /\ resolve f2}
      (! return' {result}) ]
end
module M_13_ref_box__test13 [#"13_ref_box.rs" 96 0 96 56]
  let%span s13_ref_box = "13_ref_box.rs" 96 36 96 37
  let%span s13_ref_box'0 = "13_ref_box.rs" 94 0 94 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 95 0 95 46
  let%span s13_ref_box'2 = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'3 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 17 0 17 46
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate precondition'0 (self: t_F) (args: Int32.t) = precondition self args
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate postcondition_once'0 (self: t_F) (args: Int32.t) (result: Int32.t) = postcondition_once self args result
  
  let rec call_fnonce (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box'2] inv'0 f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'3] precondition'0 f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition_once'0 f x result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test13 [#"13_ref_box.rs" 96 0 96 56] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test13 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test13 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = call_fnonce {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test13 ensures] [%#s13_ref_box'1] postcondition_once f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test14 [#"13_ref_box.rs" 102 0 102 53]
  let%span s13_ref_box = "13_ref_box.rs" 102 33 102 34
  let%span s13_ref_box'0 = "13_ref_box.rs" 100 0 100 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 101 0 101 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 12 40 12 41
  let%span s13_ref_box'3 = "13_ref_box.rs" 10 0 10 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 11 10 11 73
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  let rec call_fnmut (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnmut 'f' type invariant] [%#s13_ref_box'2] inv f}
    {[@expl:call_fnmut requires] [%#s13_ref_box'3] precondition f x}
    any
    [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] exists f2: t_F. postcondition_mut f x f2 result /\ resolve f2}
      (! return' {result}) ]
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test14 [#"13_ref_box.rs" 102 0 102 53] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test14 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test14 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0 [ s0 = call_fnmut {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test14 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test15 [#"13_ref_box.rs" 108 0 108 53]
  let%span s13_ref_box = "13_ref_box.rs" 108 33 108 34
  let%span s13_ref_box'0 = "13_ref_box.rs" 106 0 106 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 107 0 107 41
  let%span s13_ref_box'2 = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'3 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 17 0 17 46
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 164 14 164 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  let rec call_fnonce (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box'2] inv f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'3] precondition f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition_once f x result} (! return' {result}) ]
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test15 [#"13_ref_box.rs" 108 0 108 53] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test15 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test15 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0 [ s0 = call_fnonce {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) -> {[@expl:test15 ensures] [%#s13_ref_box'1] postcondition f x result}
      (! return' {result}) ]
end
module M_13_ref_box__test16 [#"13_ref_box.rs" 114 0 114 56]
  let%span s13_ref_box = "13_ref_box.rs" 114 36 114 37
  let%span s13_ref_box'0 = "13_ref_box.rs" 112 0 112 33
  let%span s13_ref_box'1 = "13_ref_box.rs" 113 10 113 73
  let%span s13_ref_box'2 = "13_ref_box.rs" 18 38 18 39
  let%span s13_ref_box'3 = "13_ref_box.rs" 16 0 16 33
  let%span s13_ref_box'4 = "13_ref_box.rs" 17 0 17 46
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 129 4 129 61
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 130 4 130 40
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 135 4 135 35
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 140 4 140 33
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 141 4 141 30
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 142 4 142 32
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 147 14 148 104
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  let rec call_fnonce (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:call_fnonce 'f' type invariant] [%#s13_ref_box'2] inv f}
    {[@expl:call_fnonce requires] [%#s13_ref_box'3] precondition f x}
    any [ return''0 (result: Int32.t) -> {[%#s13_ref_box'4] postcondition_once f x result} (! return' {result}) ]
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'5] postcondition_once self args res
      = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'2] hist_inv self b)
      -> ([%#sops'3] hist_inv b c) -> ([%#sops'4] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'1] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops] postcondition_mut self args res_state res)
      -> ([%#sops'0] hist_inv self res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test16 [#"13_ref_box.rs" 114 0 114 56] (f: t_F) (x: Int32.t) (return' (x'0: Int32.t)) =
    {[@expl:test16 'f' type invariant] [%#s13_ref_box] inv f}
    {[@expl:test16 requires] [%#s13_ref_box'0] precondition f x}
    (! bb0
    [ bb0 = s0 [ s0 = call_fnonce {f'0} {x'0} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & x'0: Int32.t = x ])
    [ return''0 (result: Int32.t) ->
    {[@expl:test16 ensures] [%#s13_ref_box'1] exists f2: t_F. postcondition_mut f x f2 result /\ resolve f2}
      (! return' {result}) ]
end
