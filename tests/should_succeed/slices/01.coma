module M_01__index_slice [#"01.rs" 6 0 6 36]
  let%span s01 = "01.rs" 7 6 7 8
  let%span s01'0 = "01.rs" 7 4 7 9
  let%span s01'1 = "01.rs" 5 11 5 24
  let%span smodel = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: Slice64.slice UInt32.t) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: Slice64.slice UInt32.t. ([%#sslice] Seq.length (view self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'0] view self = Slice64.id self)
  
  function view'0 (self: Slice64.slice UInt32.t) : Seq.seq UInt32.t =
    [%#smodel] view self
  
  meta "compute_max_steps" 1000000
  
  let rec index_slice[#"01.rs" 6 0 6 36] (a:Slice64.slice UInt32.t) (return'  (x:UInt32.t))= {[@expl:index_slice requires] [%#s01'1] 10
    < Seq.length (view'0 a)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- [%#s01] (10: UInt64.t) ] s1
      | s1 =  [ &_4 <- Slice64.length a'0 ] s2
      | s2 =  [ &_5 <- UInt64.lt _3 _4 ] s3
      | s3 = {[@expl:index in bounds] [%#s01'0] _5} s4
      | s4 = bb1 ]
    
    | bb1 = s0
      [ s0 = Slice64.get <UInt32.t> {a'0} {_3} (fun (r:UInt32.t) ->  [ &_0 <- r ] s1) | s1 = return''0 {_0} ]
     ]
    )
    [ & _0: UInt32.t = Any.any_l ()
    | & a'0: Slice64.slice UInt32.t = a
    | & _3: UInt64.t = Any.any_l ()
    | & _4: UInt64.t = Any.any_l ()
    | & _5: bool = Any.any_l () ]
     [ return''0 (result:UInt32.t)-> (! return' {result}) ] 
end
module M_01__index_mut_slice [#"01.rs" 12 0 12 37]
  let%span s01 = "01.rs" 13 6 13 7
  let%span s01'0 = "01.rs" 13 4 13 8
  let%span s01'1 = "01.rs" 13 11 13 12
  let%span s01'2 = "01.rs" 10 11 10 24
  let%span s01'3 = "01.rs" 11 10 11 23
  let%span smodel = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 52 8 52 31
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use creusot.slice.Slice64
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t (Slice64.slice UInt32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (Slice64.slice UInt32.t)) =
    resolve _0
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: Slice64.slice UInt32.t) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: Slice64.slice UInt32.t. ([%#sslice] Seq.length (view self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'0] view self = Slice64.id self)
  
  function view'0 (self: MutBorrow.t (Slice64.slice UInt32.t)) : Seq.seq UInt32.t =
    [%#smodel] view self.current
  
  function index_logic [@inline:trivial] (self: Slice64.slice UInt32.t) (ix: int) : UInt32.t =
    [%#sindex] Seq.get (view self) ix
  
  meta "compute_max_steps" 1000000
  
  let rec index_mut_slice[#"01.rs" 12 0 12 37] (a:MutBorrow.t (Slice64.slice UInt32.t)) (return'  (x:()))= {[@expl:index_mut_slice requires] [%#s01'2] Seq.length (view'0 a)
    = 5}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- [%#s01] (2: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length a'0.current}-  [ &_5 <- _ptr ] s2)
      | s2 =  [ &_6 <- Slice64.slice_ptr_len _5 ] s3
      | s3 =  [ &_7 <- UInt64.lt _4 _6 ] s4
      | s4 = {[@expl:index in bounds] [%#s01'0] _7} s5
      | s5 = bb1 ]
    
    | bb1 = s0
      [ s0 = Slice64.set <UInt32.t> {a'0.current} {_4} {[%#s01'1] (3: UInt32.t)}
          (fun (r:Slice64.slice UInt32.t) ->  [ &a'0 <- { a'0 with current = r } ] s1)
      | s1 = -{resolve'0 a'0}- s2
      | s2 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & a'0: MutBorrow.t (Slice64.slice UInt32.t) = a
    | & _4: UInt64.t = Any.any_l ()
    | & _5: Opaque.ptr = Any.any_l ()
    | & _6: UInt64.t = Any.any_l ()
    | & _7: bool = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:index_mut_slice ensures] [%#s01'3] UInt32.t'int (index_logic a.final 2) = 3}
      (! return' {result}) ]

end
module M_01__slice_first [#"01.rs" 20 0 20 44]
  let%span s01 = "01.rs" 21 17 21 18
  let%span s01'0 = "01.rs" 21 29 21 30
  let%span s01'1 = "01.rs" 21 27 21 31
  let%span s01'2 = "01.rs" 20 22 20 23
  let%span s01'3 = "01.rs" 20 34 20 44
  let%span s01'4 = "01.rs" 16 10 19 1
  let%span smodel = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 238 8 238 9
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 239 18 239 40
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'2 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sslice'3 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 52 8 52 31
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 697 20 697 91
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) =
    [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 (self: Seq.seq t_T) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self  -> inv'0 (Seq.get self i)
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: Slice64.slice t_T) : Seq.seq t_T
  
  axiom view_spec: forall self: Slice64.slice t_T. ([%#sslice'1] Seq.length (view self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'2] view self = Slice64.id self)
  
  predicate invariant''1 (self: Slice64.slice t_T) =
    [%#sslice'3] inv'1 (view self)
  
  predicate inv'2 (_0: Slice64.slice t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Slice64.slice t_T [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.slice t_T) =
    [%#sinvariant] inv'2 self
  
  predicate inv'3 (_0: Slice64.slice t_T)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Slice64.slice t_T [inv'3 x]. inv'3 x = invariant''2 x
  
  function view'0 (self: Slice64.slice t_T) : Seq.seq t_T =
    [%#smodel] view self
  
  let rec len (self_:Slice64.slice t_T) (return'  (x:UInt64.t))= {[@expl:len 'self_' type invariant] [%#sslice] inv'3 self_}
    any
    [ return''0 (result:UInt64.t)-> {[%#sslice'0] Seq.length (view'0 self_) = UInt64.t'int result}
      (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some t_T
  
  predicate invariant''3 (self: t_T) =
    [%#sinvariant] inv self
  
  predicate inv'4 (_0: t_T)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_T [inv'4 x]. inv'4 x = invariant''3 x
  
  predicate inv'5 (_0: t_Option)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Option [inv'5 x]. inv'5 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'4 a_0
    end
  
  function index_logic [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T =
    [%#sindex] Seq.get (view self) ix
  
  meta "compute_max_steps" 1000000
  
  let rec slice_first[#"01.rs" 20 0 20 44] (a:Slice64.slice t_T) (return'  (x:t_Option))= {[@expl:slice_first 'a' type invariant] [%#s01'2] inv'3 a}
    (! bb0
    [ bb0 = s0 [ s0 = len {a'0} (fun (_ret:UInt64.t) ->  [ &_4 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_3 <- UInt64.gt _4 ([%#s01] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_3 = false} (! bb4) | br1 -> {_3} (! bb2) ]  ]
    
    | bb2 = s0
      [ s0 =  [ &_8 <- [%#s01'0] (0: UInt64.t) ] s1
      | s1 =  [ &_9 <- Slice64.length a'0 ] s2
      | s2 =  [ &_10 <- UInt64.lt _8 _9 ] s3
      | s3 = {[@expl:index in bounds] [%#s01'1] _10} s4
      | s4 = bb3 ]
    
    | bb3 = s0
      [ s0 = Slice64.get <t_T> {a'0} {_8} (fun (r:t_T) ->  [ &_7 <- r ] s1) | s1 =  [ &_0 <- C_Some _7 ] s2 | s2 = bb5 ]
    
    | bb4 = s0 [ s0 =  [ &_0 <- C_None ] s1 | s1 = bb5 ] 
    | bb5 = return''0 {_0} ]
    )
    [ & _0: t_Option = Any.any_l ()
    | & a'0: Slice64.slice t_T = a
    | & _3: bool = Any.any_l ()
    | & _4: UInt64.t = Any.any_l ()
    | & _7: t_T = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _9: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l () ]
    
    [ return''0 (result:t_Option)-> {[@expl:slice_first result type invariant] [%#s01'3] inv'5 result}
      {[@expl:slice_first ensures] [%#s01'4] match result with
        | C_Some v -> v = index_logic a 0
        | C_None -> Seq.length (view'0 a) = 0
        end}
      (! return' {result}) ]

end
