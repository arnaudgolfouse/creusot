module M_index_slice
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use creusot.int.UInt32
  use creusot.prelude.Any
  use seq.Seq
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec index_slice (a: Slice64.slice UInt32.t) (return (x: UInt32.t)) = {[@expl:index_slice requires] 10
    < Seq.length (Slice64.view a)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_3 <- (10: UInt64.t) ] s1
      | s1 = [ &_4 <- Slice64.length a ] s2
      | s2 = [ &_5 <- UInt64.lt _3 _4 ] s3
      | s3 = {[@expl:index in bounds] _5} s4
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = Slice64.get <UInt32.t> {a} {_3} (fun (r: UInt32.t) -> [ &_0 <- r ] s1) | s1 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & a: Slice64.slice UInt32.t = a
    | & _3: UInt64.t = Any.any_l ()
    | & _4: UInt64.t = Any.any_l ()
    | & _5: bool = Any.any_l () ]) [ return (result: UInt32.t) -> (! return {result}) ]
end
module M_index_mut_slice
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use creusot.slice.Slice64
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  
  predicate resolve_ref_slice_u32 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice UInt32.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_u32
  
  function index_slice_u32 [@inline:trivial] (self: Slice64.slice UInt32.t) (ix: int) : UInt32.t =
    Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_u32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec index_mut_slice (a: MutBorrow.t (Slice64.slice UInt32.t)) (return (x: ())) =
    {[@expl:index_mut_slice requires] Seq.length (Slice64.view a.current) = 5}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- (2: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length a.current}- [ &_5 <- _ptr ] s2)
      | s2 = [ &_6 <- Slice64.slice_ptr_len _5 ] s3
      | s3 = [ &_7 <- UInt64.lt _4 _6 ] s4
      | s4 = {[@expl:index in bounds] _7} s5
      | s5 = bb1 ]
    | bb1 = s0
      [ s0 = Slice64.set <UInt32.t> {a.current} {_4} {(3: UInt32.t)}
          (fun (r: Slice64.slice UInt32.t) -> [ &a <- { a with current = r } ] s1)
      | s1 = -{resolve_ref_slice_u32 a}- s2
      | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: MutBorrow.t (Slice64.slice UInt32.t) = a
    | & _4: UInt64.t = Any.any_l ()
    | & _5: Opaque.ptr = Any.any_l ()
    | & _6: UInt64.t = Any.any_l ()
    | & _7: bool = Any.any_l () ])
    [ return (result: ()) -> {[@expl:index_mut_slice ensures] UInt32.t'int (index_slice_u32 a.final 2) = 3}
      (! return {result}) ]
end
module M_slice_first
  use creusot.slice.Slice64
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: Slice64.slice t_T) = inv_slice_T self
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  let rec len_T (self_: Slice64.slice t_T) (return (x: UInt64.t)) =
    {[@expl:len 'self_' type invariant] inv_ref_slice_T self_}
    any [ return (result: UInt64.t) -> {Seq.length (Slice64.view self_) = UInt64.t'int result} (! return {result}) ]
  
  type t_Option_ref_T = None | Some t_T
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate inv_Option_ref_T (_1: t_Option_ref_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_ref_T [inv_Option_ref_T x]. inv_Option_ref_T x
      = match x with
        | None -> true
        | Some f0 -> inv_ref_T f0
        end
  
  function index_slice_T [@inline:trivial] (self: Slice64.slice t_T) (ix: int) : t_T = Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_slice_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_first_T (a: Slice64.slice t_T) (return (x: t_Option_ref_T)) =
    {[@expl:slice_first 'a' type invariant] inv_ref_slice_T a}
    (! bb0
    [ bb0 = s0 [ s0 = len_T {a} (fun (_ret: UInt64.t) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_3 <- UInt64.gt _4 (0: UInt64.t) ] s1 | s1 = any [ br0 -> {_3 = false} (! bb4) | br1 -> {_3} (! bb2) ] ]
    | bb2 = s0
      [ s0 = [ &_8 <- (0: UInt64.t) ] s1
      | s1 = [ &_9 <- Slice64.length a ] s2
      | s2 = [ &_10 <- UInt64.lt _8 _9 ] s3
      | s3 = {[@expl:index in bounds] _10} s4
      | s4 = bb3 ]
    | bb3 = s0
      [ s0 = Slice64.get <t_T> {a} {_8} (fun (r: t_T) -> [ &_7 <- r ] s1) | s1 = [ &_0 <- Some _7 ] s2 | s2 = bb5 ]
    | bb4 = s0 [ s0 = [ &_0 <- None ] s1 | s1 = bb5 ]
    | bb5 = return {_0} ]
    [ & _0: t_Option_ref_T = Any.any_l ()
    | & a: Slice64.slice t_T = a
    | & _3: bool = Any.any_l ()
    | & _4: UInt64.t = Any.any_l ()
    | & _7: t_T = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _9: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l () ])
    [ return (result: t_Option_ref_T) -> {[@expl:slice_first result type invariant] inv_Option_ref_T result}
      {[@expl:slice_first ensures] match result with
        | Some v -> v = index_slice_T a 0
        | None -> Seq.length (Slice64.view a) = 0
        end}
      (! return {result}) ]
end
