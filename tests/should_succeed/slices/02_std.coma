module M_02_std__binary_search [#"02_std.rs" 8 0 8 40]
  let%span s02_std = "02_std.rs" 11 20 11 27
  let%span s02_std'0 = "02_std.rs" 6 11 6 58
  let%span s02_std'1 = "02_std.rs" 7 11 7 24
  let%span s02_std'2 = "02_std.rs" 9 30 9 31
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 344 19 344 45
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 345 18 345 116
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 346 18 347 90
  let%span sslice'2 = "../../../creusot-contracts/src/std/slice.rs" 348 18 349 76
  let%span sslice'3 = "../../../creusot-contracts/src/std/slice.rs" 350 18 351 97
  let%span sslice'4 = "../../../creusot-contracts/src/std/slice.rs" 42 14 42 44
  let%span sslice'5 = "../../../creusot-contracts/src/std/slice.rs" 43 14 43 91
  let%span sslice'6 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 41
  let%span sslice'7 = "../../../creusot-contracts/src/std/slice.rs" 31 14 31 42
  let%span sresult = "../../../creusot-contracts/src/std/result.rs" 53 27 53 53
  let%span sresult'0 = "../../../creusot-contracts/src/std/result.rs" 54 26 54 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 35 8 35 28
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 52 8 52 31
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 376 8 376 40
  let%span sseq'0 = "../../../creusot-contracts/src/logic/seq.rs" 365 12 365 79
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  
  let rec promoted0__binary_search (return'  (x:UInt32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#s02_std'2] (2: UInt32.t) ] s1 | s1 = return''0 {_0} ]  ]
     [ & _0: UInt32.t = Any.any_l () ]  [ return''0 (result:UInt32.t)-> return' {result} ] 
  
  type t_Result  =
    | C_Ok UInt64.t
    | C_Err UInt64.t
  
  predicate sorted_range (self: Seq.seq int) (start: int) (end': int) =
    [%#sseq'0] forall i: int, j: int. start <= i /\ i <= j /\ j < end'  -> Seq.get self i <= Seq.get self j
  
  predicate sorted (self: Seq.seq int) =
    [%#sseq] sorted_range self 0 (Seq.length self)
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: Slice64.slice UInt32.t) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: Slice64.slice UInt32.t. [%#sslice'6] Seq.length (view self) <= UInt64.t'int v_MAX
  
  axiom view_spec'0: forall self: Slice64.slice UInt32.t. [%#sslice'7] view self = Slice64.id self
  
  function view'0 (self: Slice64.slice UInt32.t) : Seq.seq UInt32.t =
    [%#smodel] view self
  
  function deep_model (self: UInt32.t) : int =
    [%#snum] UInt32.t'int self
  
  function index_logic [@inline:trivial] (self: Slice64.slice UInt32.t) (ix: int) : UInt32.t =
    [%#sindex] Seq.get (view self) ix
  
  function deep_model'0 (self: Slice64.slice UInt32.t) : Seq.seq int
  
  axiom deep_model_spec: forall self: Slice64.slice UInt32.t. [%#sslice'4] Seq.length (view'0 self)
  = Seq.length (deep_model'0 self)
  
  axiom deep_model_spec'0: forall self: Slice64.slice UInt32.t. [%#sslice'5] forall i: int. 0 <= i
  /\ i < Seq.length (deep_model'0 self)  -> Seq.get (deep_model'0 self) i = deep_model (index_logic self i)
  
  function deep_model'1 (self: Slice64.slice UInt32.t) : Seq.seq int =
    [%#smodel'0] deep_model'0 self
  
  function deep_model'2 (self: UInt32.t) : int =
    [%#smodel'0] deep_model self
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering =
    [%#sord'12] if UInt64.lt self o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
   -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)
  
  let rec binary_search (self_:Slice64.slice UInt32.t) (x:UInt32.t) (return'  (x'0:t_Result))= {[@expl:binary_search requires] [%#sslice] sorted (deep_model'1 self_)}
    any
    [ return''0 (result:t_Result)-> {[%#sslice'0] forall i: UInt64.t. result = C_Ok i
       -> UInt64.t'int i < Seq.length (view'0 self_) /\ Seq.get (deep_model'0 self_) (UInt64.t'int i) = deep_model'2 x}
      {[%#sslice'1] forall i: UInt64.t. result = C_Err i
       -> UInt64.t'int i <= Seq.length (view'0 self_)
      /\ (forall j: int. 0 <= j /\ j < Seq.length (view'0 self_)  -> Seq.get (deep_model'1 self_) j <> deep_model'2 x)}
      {[%#sslice'2] forall i: UInt64.t. result = C_Err i
       -> (forall j: UInt64.t. UInt64.lt j i  -> Seq.get (deep_model'1 self_) (UInt64.t'int j) < deep_model'2 x)}
      {[%#sslice'3] forall i: UInt64.t. result = C_Err i
       -> (forall j: UInt64.t. UInt64.le i j /\ UInt64.t'int j < Seq.length (view'0 self_)
       -> deep_model'2 x < Seq.get (deep_model'1 self_) (UInt64.t'int j))}
      (! return' {result}) ]
  
  
  let rec unwrap (self_:t_Result) (return'  (x:UInt64.t))= {[@expl:unwrap requires] [%#sresult] exists t: UInt64.t. self_
    = C_Ok t}
    any [ return''0 (result:UInt64.t)-> {[%#sresult'0] C_Ok result = self_} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec binary_search'0[#"02_std.rs" 8 0 8 40] (s:Slice64.slice UInt32.t) (return'  (x:UInt64.t))= {[@expl:binary_search requires #0] [%#s02_std'0] forall i: int. 0
    <= i
    /\ i < Seq.length (view'0 s)  -> UInt32.t'int (index_logic s i) = i}
    {[@expl:binary_search requires #1] [%#s02_std'1] Seq.length (view'0 s) = 5}
    (! bb0
    [ bb0 = s0
      [ s0 = promoted0__binary_search (fun (pr0:UInt32.t) ->  [ &_12 <- pr0 ] s1)
      | s1 =  [ &_8 <- _12 ] s2
      | s2 = binary_search {s'0} {_8} (fun (_ret:t_Result) ->  [ &_5 <- _ret ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0 [ s0 = unwrap {_5} (fun (_ret:UInt64.t) ->  [ &ix <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#s02_std] UInt64.t'int ix < 5} s1 | s1 =  [ &_0 <- ix ] s2 | s2 = return''0 {_0} ]
     ]
    )
    [ & _0: UInt64.t = Any.any_l ()
    | & s'0: Slice64.slice UInt32.t = s
    | & ix: UInt64.t = Any.any_l ()
    | & _5: t_Result = Any.any_l ()
    | & _8: UInt32.t = Any.any_l ()
    | & _12: UInt32.t = Any.any_l () ]
     [ return''0 (result:UInt64.t)-> (! return' {result}) ] 
end
