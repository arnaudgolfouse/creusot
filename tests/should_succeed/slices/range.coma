module M_range__slice_range_inclusive
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use creusot.int.UInt32
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_RangeInclusive = {
    t_RangeInclusive__start: UInt64.t;
    t_RangeInclusive__end: UInt64.t;
    t_RangeInclusive__exhausted: bool }
  
  function start_log (self: t_RangeInclusive) : UInt64.t
  
  function end_log (self: t_RangeInclusive) : UInt64.t
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  predicate is_empty_log (self: t_RangeInclusive)
  
  axiom is_empty_log_spec: forall self: t_RangeInclusive. not is_empty_log self
      -> deep_model (start_log self) <= deep_model (end_log self)
  
  let rec new (start: UInt64.t) (end': UInt64.t) (return (x: t_RangeInclusive)) = any
    [ return (result: t_RangeInclusive) -> {start_log result = start}
      {end_log result = end'}
      {deep_model start <= deep_model end' -> not is_empty_log result}
      (! return {result}) ]
  
  predicate in_bounds (self: t_RangeInclusive) (seq: Seq.seq UInt32.t)
  
  axiom in_bounds_spec: forall self: t_RangeInclusive, seq: Seq.seq UInt32.t. UInt64.t'int (end_log self)
          < Seq.length seq
        /\ UInt64.t'int (start_log self) <= UInt64.t'int (end_log self) + 1 -> in_bounds self seq
  
  axiom in_bounds_spec'0: forall self: t_RangeInclusive, seq: Seq.seq UInt32.t. UInt64.t'int (end_log self)
        >= Seq.length seq -> not in_bounds self seq
  
  predicate has_value (self: t_RangeInclusive) (seq: Seq.seq UInt32.t) (out: Slice64.slice UInt32.t) =
    if is_empty_log self then
      Slice64.view out = (Seq.empty: Seq.seq UInt32.t)
    else
      Seq.([..]) seq (UInt64.t'int (start_log self)) (UInt64.t'int (end_log self) + 1) = Slice64.view out
  
  
  predicate resolve_elswhere (self: t_RangeInclusive) (old': Seq.seq UInt32.t) (fin: Seq.seq UInt32.t) =
    forall i: int. 0 <= i
        /\ (i < UInt64.t'int (start_log self) \/ UInt64.t'int (end_log self) < i \/ is_empty_log self)
        /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_: MutBorrow.t (Slice64.slice UInt32.t)) (ix: t_RangeInclusive)
    (return (x: MutBorrow.t (Slice64.slice UInt32.t))) =
    {[@expl:index_mut requires] in_bounds ix (Slice64.view self_.current)}
    any
    [ return (result: MutBorrow.t (Slice64.slice UInt32.t)) ->
    {has_value ix (Slice64.view self_.current) result.current}
      {has_value ix (Slice64.view self_.final) result.final}
      {resolve_elswhere ix (Slice64.view self_.current) (Slice64.view self_.final)}
      {Seq.length (Slice64.view self_.final) = Seq.length (Slice64.view self_.current)}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t (Slice64.slice UInt32.t)) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t (Slice64.slice UInt32.t)) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_range_inclusive (a: MutBorrow.t (Slice64.slice UInt32.t)) (return (x: ())) =
    {[@expl:slice_range_inclusive requires] Slice64.view a.current
    = Seq.create 4 [|(0: UInt32.t);(0: UInt32.t);(0: UInt32.t);(0: UInt32.t)|]}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice UInt32.t> {a.current} {MutBorrow.get_id a}
          (fun (_ret: MutBorrow.t (Slice64.slice UInt32.t)) ->
            [ &_6 <- _ret ] [ &a <- { a with current = _ret.final } ] s1)
      | s1 = new {(1: UInt64.t)} {(2: UInt64.t)} (fun (_ret: t_RangeInclusive) -> [ &_7 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = index_mut {_6} {_7} (fun (_ret: MutBorrow.t (Slice64.slice UInt32.t)) -> [ &_5 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret: MutBorrow.t (Slice64.slice UInt32.t)) ->
            [ &s <- _ret ] [ &_5 <- { _5 with current = _ret.final } ] s1)
      | s1 = [ &_8 <- (0: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s.current}- [ &_9 <- _ptr ] s3)
      | s3 = [ &_10 <- Slice64.slice_ptr_len _9 ] s4
      | s4 = [ &_11 <- UInt64.lt _8 _10 ] s5
      | s5 = {[@expl:index in bounds] _11} s6
      | s6 = bb3 ]
    | bb3 = s0
      [ s0 = Slice64.set <UInt32.t> {s.current} {_8} {(1: UInt32.t)}
          (fun (r: Slice64.slice UInt32.t) -> [ &s <- { s with current = r } ] s1)
      | s1 = [ &_12 <- (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr
          (fun (_ptr: Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s.current}- [ &_13 <- _ptr ] s3)
      | s3 = [ &_14 <- Slice64.slice_ptr_len _13 ] s4
      | s4 = [ &_15 <- UInt64.lt _12 _14 ] s5
      | s5 = {[@expl:index in bounds] _15} s6
      | s6 = bb4 ]
    | bb4 = s0
      [ s0 = Slice64.set <UInt32.t> {s.current} {_12} {(1: UInt32.t)}
          (fun (r: Slice64.slice UInt32.t) -> [ &s <- { s with current = r } ] s1)
      | s1 = -{resolve'0 s}- s2
      | s2 = -{resolve'0 _5}- s3
      | s3 = -{resolve'0 a}- s4
      | s4 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: MutBorrow.t (Slice64.slice UInt32.t) = a
    | & s: MutBorrow.t (Slice64.slice UInt32.t) = Any.any_l ()
    | & _5: MutBorrow.t (Slice64.slice UInt32.t) = Any.any_l ()
    | & _6: MutBorrow.t (Slice64.slice UInt32.t) = Any.any_l ()
    | & _7: t_RangeInclusive = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _9: Opaque.ptr = Any.any_l ()
    | & _10: UInt64.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: Opaque.ptr = Any.any_l ()
    | & _14: UInt64.t = Any.any_l ()
    | & _15: bool = Any.any_l () ])
    [ return (result: ()) -> {[@expl:slice_range_inclusive ensures] Slice64.view a.final
      = Seq.create 4 [|(0: UInt32.t);(1: UInt32.t);(1: UInt32.t);(0: UInt32.t)|]}
      (! return {result}) ]
end
