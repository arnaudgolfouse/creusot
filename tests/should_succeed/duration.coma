module M_test_duration
  use creusot.int.UInt64
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.int.UInt128
  use creusot.prelude.Any
  
  type t_Duration
  
  function nanos_to_secs (nanos: int) : int = Int.div nanos 1000000000
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate inv_Duration (_1: t_Duration)
  
  function secs_to_nanos (secs: int) : int = secs * 1000000000
  
  function view_Duration (self: t_Duration) : int
  
  axiom view_Duration_spec: forall self: t_Duration. view_Duration self >= 0
      /\ view_Duration self <= secs_to_nanos (UInt64.t'int const_MAX) + 999999999
  
  let rec new (secs: UInt64.t) (nanos: UInt32.t) (return (x: t_Duration)) = {[@expl:new requires] UInt64.t'int secs
      + nanos_to_secs (UInt32.t'int nanos)
    <= UInt64.t'int const_MAX}
    any
    [ return (result: t_Duration) -> {inv_Duration result}
      {view_Duration result = secs_to_nanos (UInt64.t'int secs) + UInt32.t'int nanos}
      (! return {result}) ]
  
  predicate invariant_ref_Duration [@inline:trivial] (self: t_Duration) = inv_Duration self
  
  meta "rewrite_def" predicate invariant_ref_Duration
  
  predicate inv_ref_Duration [@inline:trivial] (_1: t_Duration) = invariant_ref_Duration _1
  
  meta "rewrite_def" predicate inv_ref_Duration
  
  let rec as_nanos (self_: t_Duration) (return (x: UInt128.t)) =
    {[@expl:as_nanos 'self_' type invariant] inv_ref_Duration self_}
    any
    [ return (result: UInt128.t) -> {UInt128.t'int result = view_Duration self_}
      {UInt128.t'int result <= secs_to_nanos (UInt64.t'int const_MAX) + 999999999}
      (! return {result}) ]
  
  let rec from_secs (secs: UInt64.t) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {inv_Duration result}
      {view_Duration result = secs_to_nanos (UInt64.t'int secs)}
      (! return {result}) ]
  
  let rec from_millis (millis: UInt64.t) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {inv_Duration result}
      {view_Duration result = UInt64.t'int millis * 1000000}
      (! return {result}) ]
  
  let rec from_micros (micros: UInt64.t) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {inv_Duration result}
      {view_Duration result = UInt64.t'int micros * 1000}
      (! return {result}) ]
  
  let rec from_nanos (nanos: UInt64.t) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {inv_Duration result}
      {view_Duration result = UInt64.t'int nanos}
      (! return {result}) ]
  
  let rec is_zero (self_: t_Duration) (return (x: bool)) =
    {[@expl:is_zero 'self_' type invariant] inv_ref_Duration self_}
    any
    [ return (result: bool) -> {view_Duration self_ = 0 -> result = true}
      {view_Duration self_ <> 0 -> result = false}
      (! return {result}) ]
  
  let rec as_secs (self_: t_Duration) (return (x: UInt64.t)) =
    {[@expl:as_secs 'self_' type invariant] inv_ref_Duration self_}
    any [ return (result: UInt64.t) -> {UInt64.t'int result = nanos_to_secs (view_Duration self_)} (! return {result}) ]
  
  function nanos_to_millis (nanos: int) : int = Int.div nanos 1000000
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_u32 (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      Less
    else
      if self = o then Equal else Greater
  
  
  function eq_cmp_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_u32_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log_u32 x y = Equal)
  
  function antisym2_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Greater -> cmp_log_u32 y x = Less
  
  function antisym1_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Less -> cmp_log_u32 y x = Greater
  
  function trans_u32 (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_u32_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log_u32 x y = o
      -> cmp_log_u32 y z = o -> cmp_log_u32 x z = o
  
  function refl_u32 (x: UInt32.t) : ()
  
  axiom refl_u32_spec: forall x: UInt32.t. cmp_log_u32 x x = Equal
  
  function cmp_gt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log_u32 x y = Greater)
  
  function cmp_ge_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log_u32 x y <> Less)
  
  function cmp_lt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log_u32 x y = Less)
  
  function cmp_le_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log_u32 x y <> Greater)
  
  let rec subsec_millis (self_: t_Duration) (return (x: UInt32.t)) =
    {[@expl:subsec_millis 'self_' type invariant] inv_ref_Duration self_}
    any
    [ return (result: UInt32.t) -> {UInt32.t'int result = Int.mod (nanos_to_millis (view_Duration self_)) 1000}
      {UInt32.lt result (1000: UInt32.t)}
      (! return {result}) ]
  
  function nanos_to_micros (nanos: int) : int = Int.div nanos 1000
  
  let rec subsec_micros (self_: t_Duration) (return (x: UInt32.t)) =
    {[@expl:subsec_micros 'self_' type invariant] inv_ref_Duration self_}
    any
    [ return (result: UInt32.t) -> {UInt32.t'int result = Int.mod (nanos_to_micros (view_Duration self_)) 1000000}
      {UInt32.lt result (1000000: UInt32.t)}
      (! return {result}) ]
  
  let rec subsec_nanos (self_: t_Duration) (return (x: UInt32.t)) =
    {[@expl:subsec_nanos 'self_' type invariant] inv_ref_Duration self_}
    any
    [ return (result: UInt32.t) -> {UInt32.t'int result = Int.mod (view_Duration self_) 1000000000}
      {UInt32.lt result (1000000000: UInt32.t)}
      (! return {result}) ]
  
  let rec as_millis (self_: t_Duration) (return (x: UInt128.t)) =
    {[@expl:as_millis 'self_' type invariant] inv_ref_Duration self_}
    any
    [ return (result: UInt128.t) -> {UInt128.t'int result = nanos_to_millis (view_Duration self_)} (! return {result}) ]
  
  let rec as_micros (self_: t_Duration) (return (x: UInt128.t)) =
    {[@expl:as_micros 'self_' type invariant] inv_ref_Duration self_}
    any
    [ return (result: UInt128.t) -> {UInt128.t'int result = nanos_to_micros (view_Duration self_)} (! return {result}) ]
  
  type t_Option_Duration = None | Some t_Duration
  
  predicate inv_Option_Duration (_1: t_Option_Duration)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_Duration [inv_Option_Duration x]. inv_Option_Duration x
      = match x with
        | None -> true
        | Some f0 -> inv_Duration f0
        end
  
  type t_Option_Int = None'0 | Some'0 int
  
  function deep_model_Duration [@inline:trivial] (self: t_Duration) : int = view_Duration self
  
  meta "rewrite_def" function deep_model_Duration
  
  function deep_model_Option_Duration [@inline:trivial] (self: t_Option_Duration) : t_Option_Int = match self with
      | Some t -> Some'0 (deep_model_Duration t)
      | None -> None'0
      end
  
  meta "rewrite_def" function deep_model_Option_Duration
  
  let rec checked_add (self_: t_Duration) (rhs: t_Duration) (return (x: t_Option_Duration)) =
    {[@expl:checked_add 'self_' type invariant] inv_Duration self_}
    {[@expl:checked_add 'rhs' type invariant] inv_Duration rhs}
    any
    [ return (result: t_Option_Duration) -> {inv_Option_Duration result}
      {nanos_to_secs (view_Duration self_ + view_Duration rhs) > UInt64.t'int const_MAX -> result = None}
      {nanos_to_secs (view_Duration self_ + view_Duration rhs) <= UInt64.t'int const_MAX
      -> deep_model_Option_Duration result = Some'0 (view_Duration self_ + view_Duration rhs)}
      (! return {result}) ]
  
  predicate invariant_ref_Option_Duration [@inline:trivial] (self: t_Option_Duration) = inv_Option_Duration self
  
  meta "rewrite_def" predicate invariant_ref_Option_Duration
  
  predicate inv_ref_Option_Duration [@inline:trivial] (_1: t_Option_Duration) = invariant_ref_Option_Duration _1
  
  meta "rewrite_def" predicate inv_ref_Option_Duration
  
  let rec is_none_Duration (self_: t_Option_Duration) (return (x: bool)) =
    {[@expl:is_none 'self_' type invariant] inv_ref_Option_Duration self_}
    any [ return (result: bool) -> {result = (self_ = None)} (! return {result}) ]
  
  let rec is_some_Duration (self_: t_Option_Duration) (return (x: bool)) =
    {[@expl:is_some 'self_' type invariant] inv_ref_Option_Duration self_}
    any [ return (result: bool) -> {result = (self_ <> None)} (! return {result}) ]
  
  let rec checked_sub (self_: t_Duration) (rhs: t_Duration) (return (x: t_Option_Duration)) =
    {[@expl:checked_sub 'self_' type invariant] inv_Duration self_}
    {[@expl:checked_sub 'rhs' type invariant] inv_Duration rhs}
    any
    [ return (result: t_Option_Duration) -> {inv_Option_Duration result}
      {view_Duration self_ - view_Duration rhs < 0 -> result = None}
      {view_Duration self_ - view_Duration rhs >= 0
      -> deep_model_Option_Duration result = Some'0 (view_Duration self_ - view_Duration rhs)}
      (! return {result}) ]
  
  let rec checked_mul (self_: t_Duration) (rhs: UInt32.t) (return (x: t_Option_Duration)) =
    {[@expl:checked_mul 'self_' type invariant] inv_Duration self_}
    any
    [ return (result: t_Option_Duration) -> {inv_Option_Duration result}
      {nanos_to_secs (view_Duration self_ * UInt32.t'int rhs) > UInt64.t'int const_MAX -> result = None}
      {nanos_to_secs (view_Duration self_ * UInt32.t'int rhs) <= UInt64.t'int const_MAX
      -> deep_model_Option_Duration result = Some'0 (view_Duration self_ * UInt32.t'int rhs)}
      (! return {result}) ]
  
  let rec checked_div (self_: t_Duration) (rhs: UInt32.t) (return (x: t_Option_Duration)) =
    {[@expl:checked_div 'self_' type invariant] inv_Duration self_}
    any
    [ return (result: t_Option_Duration) -> {inv_Option_Duration result}
      {rhs = (0: UInt32.t) -> result = None}
      {rhs <> (0: UInt32.t)
      -> deep_model_Option_Duration result = Some'0 (Int.div (view_Duration self_) (UInt32.t'int rhs))}
      (! return {result}) ]
  
  let rec add_Duration (self_: t_Duration) (rhs: t_Duration) (return (x: t_Duration)) =
    {[@expl:add 'self_' type invariant] inv_Duration self_}
    {[@expl:add 'rhs' type invariant] inv_Duration rhs}
    {[@expl:add requires] view_Duration self_ + view_Duration rhs <= secs_to_nanos (UInt64.t'int const_MAX) + 999999999}
    any
    [ return (result: t_Duration) -> {inv_Duration result}
      {view_Duration self_ + view_Duration rhs = view_Duration result}
      (! return {result}) ]
  
  let rec sub_Duration (self_: t_Duration) (rhs: t_Duration) (return (x: t_Duration)) =
    {[@expl:sub 'self_' type invariant] inv_Duration self_}
    {[@expl:sub 'rhs' type invariant] inv_Duration rhs}
    {[@expl:sub requires] view_Duration self_ - view_Duration rhs >= 0}
    any
    [ return (result: t_Duration) -> {inv_Duration result}
      {view_Duration self_ - view_Duration rhs = view_Duration result}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_duration (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new {(0: UInt64.t)} {(0: UInt32.t)} (fun (_ret: t_Duration) -> [ &zero <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] view_Duration zero = 0} s1
      | s1 = as_nanos {zero} (fun (_ret: UInt128.t) -> [ &_6 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_5 <- _6 = (0: UInt128.t) ] s1 | s1 = any [ br0 -> {_5 = false} (! bb4) | br1 -> {_5} (! bb3) ] ]
    | bb3 = s0
      [ s0 = new {const_MAX} {(999999999: UInt32.t)} (fun (_ret: t_Duration) -> [ &max <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0 [ s0 = from_secs {(1: UInt64.t)} (fun (_ret: t_Duration) -> [ &d_secs <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0
      [ s0 = {[@expl:assertion] view_Duration d_secs = 1000000000} s1
      | s1 = from_millis {(1: UInt64.t)} (fun (_ret: t_Duration) -> [ &d_millis <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = {[@expl:assertion] view_Duration d_millis = 1000000} s1
      | s1 = from_micros {(1: UInt64.t)} (fun (_ret: t_Duration) -> [ &d_micros <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0
      [ s0 = {[@expl:assertion] view_Duration d_micros = 1000} s1
      | s1 = from_nanos {(1: UInt64.t)} (fun (_ret: t_Duration) -> [ &d_nanos <- _ret ] s2)
      | s2 = bb9 ]
    | bb9 = s0
      [ s0 = {[@expl:assertion] view_Duration d_nanos = 1} s1
      | s1 = is_zero {zero} (fun (_ret: bool) -> [ &_23 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = any [ br0 -> {_23 = false} (! bb12) | br1 -> {_23} (! bb11) ]
    | bb11 = s0 [ s0 = is_zero {d_secs} (fun (_ret: bool) -> [ &_27 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = any [ br0 -> {_27 = false} (! bb15) | br1 -> {_27} (! bb14) ]
    | bb14 = {false} any
    | bb15 = s0 [ s0 = as_secs {d_secs} (fun (_ret: UInt64.t) -> [ &_32 <- _ret ] s1) | s1 = bb16 ]
    | bb16 = s0
      [ s0 = [ &_31 <- (1: UInt64.t) = _32 ] s1 | s1 = any [ br0 -> {_31 = false} (! bb18) | br1 -> {_31} (! bb17) ] ]
    | bb17 = s0 [ s0 = subsec_millis {d_secs} (fun (_ret: UInt32.t) -> [ &_37 <- _ret ] s1) | s1 = bb19 ]
    | bb19 = s0
      [ s0 = [ &_36 <- (0: UInt32.t) = _37 ] s1 | s1 = any [ br0 -> {_36 = false} (! bb21) | br1 -> {_36} (! bb20) ] ]
    | bb20 = s0 [ s0 = subsec_micros {d_secs} (fun (_ret: UInt32.t) -> [ &_42 <- _ret ] s1) | s1 = bb22 ]
    | bb22 = s0
      [ s0 = [ &_41 <- (0: UInt32.t) = _42 ] s1 | s1 = any [ br0 -> {_41 = false} (! bb24) | br1 -> {_41} (! bb23) ] ]
    | bb23 = s0 [ s0 = subsec_nanos {d_secs} (fun (_ret: UInt32.t) -> [ &_47 <- _ret ] s1) | s1 = bb25 ]
    | bb25 = s0
      [ s0 = [ &_46 <- (0: UInt32.t) = _47 ] s1 | s1 = any [ br0 -> {_46 = false} (! bb27) | br1 -> {_46} (! bb26) ] ]
    | bb26 = s0 [ s0 = subsec_millis {d_millis} (fun (_ret: UInt32.t) -> [ &_53 <- _ret ] s1) | s1 = bb28 ]
    | bb28 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _53} (fun (_ret_from: UInt128.t) -> [ &_52 <- _ret_from ] s1)
      | s1 = as_millis {d_millis} (fun (_ret: UInt128.t) -> [ &_55 <- _ret ] s2)
      | s2 = bb29 ]
    | bb29 = s0 [ s0 = [ &_51 <- _52 = _55 ] s1 | s1 = any [ br0 -> {_51 = false} (! bb31) | br1 -> {_51} (! bb30) ] ]
    | bb30 = s0 [ s0 = subsec_micros {d_micros} (fun (_ret: UInt32.t) -> [ &_61 <- _ret ] s1) | s1 = bb32 ]
    | bb32 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _61} (fun (_ret_from: UInt128.t) -> [ &_60 <- _ret_from ] s1)
      | s1 = as_micros {d_micros} (fun (_ret: UInt128.t) -> [ &_63 <- _ret ] s2)
      | s2 = bb33 ]
    | bb33 = s0 [ s0 = [ &_59 <- _60 = _63 ] s1 | s1 = any [ br0 -> {_59 = false} (! bb35) | br1 -> {_59} (! bb34) ] ]
    | bb34 = s0 [ s0 = subsec_nanos {d_nanos} (fun (_ret: UInt32.t) -> [ &_69 <- _ret ] s1) | s1 = bb36 ]
    | bb36 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _69} (fun (_ret_from: UInt128.t) -> [ &_68 <- _ret_from ] s1)
      | s1 = as_nanos {d_nanos} (fun (_ret: UInt128.t) -> [ &_71 <- _ret ] s2)
      | s2 = bb37 ]
    | bb37 = s0 [ s0 = [ &_67 <- _68 = _71 ] s1 | s1 = any [ br0 -> {_67 = false} (! bb39) | br1 -> {_67} (! bb38) ] ]
    | bb38 = s0 [ s0 = checked_add {d_secs} {max} (fun (_ret: t_Option_Duration) -> [ &_77 <- _ret ] s1) | s1 = bb40 ]
    | bb40 = s0 [ s0 = is_none_Duration {_77} (fun (_ret: bool) -> [ &_75 <- _ret ] s1) | s1 = bb41 ]
    | bb41 = any [ br0 -> {_75 = false} (! bb43) | br1 -> {_75} (! bb42) ]
    | bb42 = s0
      [ s0 = checked_add {d_secs} {d_secs} (fun (_ret: t_Option_Duration) -> [ &_84 <- _ret ] s1) | s1 = bb44 ]
    | bb44 = s0 [ s0 = is_some_Duration {_84} (fun (_ret: bool) -> [ &_82 <- _ret ] s1) | s1 = bb45 ]
    | bb45 = any [ br0 -> {_82 = false} (! bb47) | br1 -> {_82} (! bb46) ]
    | bb46 = s0 [ s0 = checked_sub {d_secs} {max} (fun (_ret: t_Option_Duration) -> [ &_91 <- _ret ] s1) | s1 = bb48 ]
    | bb48 = s0 [ s0 = is_none_Duration {_91} (fun (_ret: bool) -> [ &_89 <- _ret ] s1) | s1 = bb49 ]
    | bb49 = any [ br0 -> {_89 = false} (! bb51) | br1 -> {_89} (! bb50) ]
    | bb50 = s0
      [ s0 = checked_sub {d_secs} {d_millis} (fun (_ret: t_Option_Duration) -> [ &_98 <- _ret ] s1) | s1 = bb52 ]
    | bb52 = s0 [ s0 = is_some_Duration {_98} (fun (_ret: bool) -> [ &_96 <- _ret ] s1) | s1 = bb53 ]
    | bb53 = any [ br0 -> {_96 = false} (! bb55) | br1 -> {_96} (! bb54) ]
    | bb54 = s0
      [ s0 = checked_mul {max} {(2: UInt32.t)} (fun (_ret: t_Option_Duration) -> [ &_105 <- _ret ] s1) | s1 = bb56 ]
    | bb56 = s0 [ s0 = is_none_Duration {_105} (fun (_ret: bool) -> [ &_103 <- _ret ] s1) | s1 = bb57 ]
    | bb57 = any [ br0 -> {_103 = false} (! bb59) | br1 -> {_103} (! bb58) ]
    | bb58 = s0
      [ s0 = checked_mul {d_secs} {(10: UInt32.t)} (fun (_ret: t_Option_Duration) -> [ &_111 <- _ret ] s1) | s1 = bb60 ]
    | bb60 = s0 [ s0 = is_some_Duration {_111} (fun (_ret: bool) -> [ &_109 <- _ret ] s1) | s1 = bb61 ]
    | bb61 = any [ br0 -> {_109 = false} (! bb63) | br1 -> {_109} (! bb62) ]
    | bb62 = s0
      [ s0 = checked_div {d_secs} {(0: UInt32.t)} (fun (_ret: t_Option_Duration) -> [ &_117 <- _ret ] s1) | s1 = bb64 ]
    | bb64 = s0 [ s0 = is_none_Duration {_117} (fun (_ret: bool) -> [ &_115 <- _ret ] s1) | s1 = bb65 ]
    | bb65 = any [ br0 -> {_115 = false} (! bb67) | br1 -> {_115} (! bb66) ]
    | bb66 = s0
      [ s0 = checked_div {d_secs} {(10: UInt32.t)} (fun (_ret: t_Option_Duration) -> [ &_123 <- _ret ] s1) | s1 = bb68 ]
    | bb68 = s0 [ s0 = is_some_Duration {_123} (fun (_ret: bool) -> [ &_121 <- _ret ] s1) | s1 = bb69 ]
    | bb69 = any [ br0 -> {_121 = false} (! bb71) | br1 -> {_121} (! bb70) ]
    | bb70 = s0 [ s0 = add_Duration {d_millis} {d_micros} (fun (_ret: t_Duration) -> [ &sum <- _ret ] s1) | s1 = bb72 ]
    | bb72 = s0
      [ s0 = sub_Duration {d_millis} {d_micros} (fun (_ret: t_Duration) -> [ &difference <- _ret ] s1) | s1 = bb73 ]
    | bb73 = s0
      [ s0 = {[@expl:assertion] view_Duration sum = 1001000} s1
      | s1 = {[@expl:assertion] view_Duration difference = 999000} s2
      | s2 = return {_0} ]
    | bb71 = {false} any
    | bb67 = {false} any
    | bb63 = {false} any
    | bb59 = {false} any
    | bb55 = {false} any
    | bb51 = {false} any
    | bb47 = {false} any
    | bb43 = {false} any
    | bb39 = {false} any
    | bb35 = {false} any
    | bb31 = {false} any
    | bb27 = {false} any
    | bb24 = {false} any
    | bb21 = {false} any
    | bb18 = {false} any
    | bb12 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & zero: t_Duration = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _6: UInt128.t = Any.any_l ()
    | & max: t_Duration = Any.any_l ()
    | & d_secs: t_Duration = Any.any_l ()
    | & d_millis: t_Duration = Any.any_l ()
    | & d_micros: t_Duration = Any.any_l ()
    | & d_nanos: t_Duration = Any.any_l ()
    | & _23: bool = Any.any_l ()
    | & _27: bool = Any.any_l ()
    | & _31: bool = Any.any_l ()
    | & _32: UInt64.t = Any.any_l ()
    | & _36: bool = Any.any_l ()
    | & _37: UInt32.t = Any.any_l ()
    | & _41: bool = Any.any_l ()
    | & _42: UInt32.t = Any.any_l ()
    | & _46: bool = Any.any_l ()
    | & _47: UInt32.t = Any.any_l ()
    | & _51: bool = Any.any_l ()
    | & _52: UInt128.t = Any.any_l ()
    | & _53: UInt32.t = Any.any_l ()
    | & _55: UInt128.t = Any.any_l ()
    | & _59: bool = Any.any_l ()
    | & _60: UInt128.t = Any.any_l ()
    | & _61: UInt32.t = Any.any_l ()
    | & _63: UInt128.t = Any.any_l ()
    | & _67: bool = Any.any_l ()
    | & _68: UInt128.t = Any.any_l ()
    | & _69: UInt32.t = Any.any_l ()
    | & _71: UInt128.t = Any.any_l ()
    | & _75: bool = Any.any_l ()
    | & _77: t_Option_Duration = Any.any_l ()
    | & _82: bool = Any.any_l ()
    | & _84: t_Option_Duration = Any.any_l ()
    | & _89: bool = Any.any_l ()
    | & _91: t_Option_Duration = Any.any_l ()
    | & _96: bool = Any.any_l ()
    | & _98: t_Option_Duration = Any.any_l ()
    | & _103: bool = Any.any_l ()
    | & _105: t_Option_Duration = Any.any_l ()
    | & _109: bool = Any.any_l ()
    | & _111: t_Option_Duration = Any.any_l ()
    | & _115: bool = Any.any_l ()
    | & _117: t_Option_Duration = Any.any_l ()
    | & _121: bool = Any.any_l ()
    | & _123: t_Option_Duration = Any.any_l ()
    | & sum: t_Duration = Any.any_l ()
    | & difference: t_Duration = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
