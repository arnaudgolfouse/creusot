module M_duration__test_duration [#"duration.rs" 7 0 7 22]
  let%span sduration = "duration.rs" 8 29 8 30
  let%span sduration'0 = "duration.rs" 8 32 8 33
  let%span sduration'1 = "duration.rs" 9 18 9 28
  let%span sduration'2 = "duration.rs" 10 31 10 32
  let%span sduration'3 = "duration.rs" 12 28 12 36
  let%span sduration'4 = "duration.rs" 12 38 12 49
  let%span sduration'5 = "duration.rs" 14 37 14 38
  let%span sduration'6 = "duration.rs" 15 18 15 42
  let%span sduration'7 = "duration.rs" 17 41 17 42
  let%span sduration'8 = "duration.rs" 18 18 18 40
  let%span sduration'9 = "duration.rs" 20 41 20 42
  let%span sduration'10 = "duration.rs" 21 18 21 36
  let%span sduration'11 = "duration.rs" 23 39 23 40
  let%span sduration'12 = "duration.rs" 24 18 24 31
  let%span sduration'13 = "duration.rs" 29 12 29 13
  let%span sduration'14 = "duration.rs" 30 12 30 13
  let%span sduration'15 = "duration.rs" 31 12 31 13
  let%span sduration'16 = "duration.rs" 32 12 32 13
  let%span sduration'17 = "duration.rs" 44 28 44 29
  let%span sduration'18 = "duration.rs" 45 31 45 33
  let%span sduration'19 = "duration.rs" 47 31 47 32
  let%span sduration'20 = "duration.rs" 48 31 48 33
  let%span sduration'21 = "duration.rs" 52 18 52 35
  let%span sduration'22 = "duration.rs" 53 18 53 39
  let%span sduration'23 = "duration.rs" 48 12 48 44
  let%span sduration'24 = "duration.rs" 47 12 47 43
  let%span sduration'25 = "duration.rs" 45 12 45 44
  let%span sduration'26 = "duration.rs" 44 12 44 40
  let%span sduration'27 = "duration.rs" 42 12 42 50
  let%span sduration'28 = "duration.rs" 41 12 41 45
  let%span sduration'29 = "duration.rs" 39 12 39 48
  let%span sduration'30 = "duration.rs" 38 12 38 45
  let%span sduration'31 = "duration.rs" 36 12 36 64
  let%span sduration'32 = "duration.rs" 35 12 35 68
  let%span sduration'33 = "duration.rs" 34 12 34 68
  let%span sduration'34 = "duration.rs" 32 12 32 38
  let%span sduration'35 = "duration.rs" 31 12 31 39
  let%span sduration'36 = "duration.rs" 30 12 30 39
  let%span sduration'37 = "duration.rs" 29 12 29 33
  let%span sduration'38 = "duration.rs" 27 12 27 29
  let%span sduration'39 = "duration.rs" 26 12 26 26
  let%span sduration'40 = "duration.rs" 10 12 10 32
  let%span stime = "../../creusot-contracts/src/std/time.rs" 71 27 71 69
  let%span stime'0 = "../../creusot-contracts/src/std/time.rs" 72 26 72 66
  let%span stime'1 = "../../creusot-contracts/src/std/time.rs" 12 14 12 77
  let%span stime'2 = "../../creusot-contracts/src/std/time.rs" 124 26 124 42
  let%span stime'3 = "../../creusot-contracts/src/std/time.rs" 125 26 125 75
  let%span stime'4 = "../../creusot-contracts/src/std/time.rs" 76 26 76 57
  let%span stime'5 = "../../creusot-contracts/src/std/time.rs" 80 26 80 58
  let%span stime'6 = "../../creusot-contracts/src/std/time.rs" 84 26 84 54
  let%span stime'7 = "../../creusot-contracts/src/std/time.rs" 88 26 88 43
  let%span stime'8 = "../../creusot-contracts/src/std/time.rs" 92 26 92 55
  let%span stime'9 = "../../creusot-contracts/src/std/time.rs" 93 26 93 56
  let%span stime'10 = "../../creusot-contracts/src/std/time.rs" 97 26 97 57
  let%span stime'11 = "../../creusot-contracts/src/std/time.rs" 101 26 101 67
  let%span stime'12 = "../../creusot-contracts/src/std/time.rs" 102 26 102 44
  let%span stime'13 = "../../creusot-contracts/src/std/time.rs" 106 26 106 71
  let%span stime'14 = "../../creusot-contracts/src/std/time.rs" 107 26 107 48
  let%span stime'15 = "../../creusot-contracts/src/std/time.rs" 111 26 111 60
  let%span stime'16 = "../../creusot-contracts/src/std/time.rs" 112 26 112 52
  let%span stime'17 = "../../creusot-contracts/src/std/time.rs" 116 26 116 59
  let%span stime'18 = "../../creusot-contracts/src/std/time.rs" 120 26 120 59
  let%span stime'19 = "../../creusot-contracts/src/std/time.rs" 129 26 129 84
  let%span stime'20 = "../../creusot-contracts/src/std/time.rs" 130 26 130 112
  let%span stime'21 = "../../creusot-contracts/src/std/time.rs" 134 26 134 61
  let%span stime'22 = "../../creusot-contracts/src/std/time.rs" 135 26 135 89
  let%span stime'23 = "../../creusot-contracts/src/std/time.rs" 139 26 139 84
  let%span stime'24 = "../../creusot-contracts/src/std/time.rs" 140 26 140 112
  let%span stime'25 = "../../creusot-contracts/src/std/time.rs" 144 26 144 56
  let%span stime'26 = "../../creusot-contracts/src/std/time.rs" 145 26 145 83
  let%span stime'27 = "../../creusot-contracts/src/std/time.rs" 188 19 188 73
  let%span stime'28 = "../../creusot-contracts/src/std/time.rs" 189 18 189 41
  let%span stime'29 = "../../creusot-contracts/src/std/time.rs" 195 19 195 36
  let%span stime'30 = "../../creusot-contracts/src/std/time.rs" 196 18 196 41
  let%span stime'31 = "../../creusot-contracts/src/std/time.rs" 38 4 38 25
  let%span stime'32 = "../../creusot-contracts/src/std/time.rs" 43 4 43 24
  let%span stime'33 = "../../creusot-contracts/src/std/time.rs" 33 4 33 21
  let%span stime'34 = "../../creusot-contracts/src/std/time.rs" 29 4 29 17
  let%span stime'35 = "../../creusot-contracts/src/std/time.rs" 21 4 21 18
  let%span soption = "../../creusot-contracts/src/std/option.rs" 74 26 74 51
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 50 26 50 51
  let%span soption'1 = "../../creusot-contracts/src/std/option.rs" 12 8 15 9
  let%span smodel = "../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../creusot-contracts/src/logic/ord.rs" 211 16 217 17
  
  use creusot.int.UInt64
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.int.UInt128
  use creusot.prelude.Any
  
  type t_Nanoseconds = { t_Nanoseconds__0: UInt32.t }
  
  type t_Duration = { t_Duration__secs: UInt64.t; t_Duration__nanos: t_Nanoseconds }
  
  function nanos_to_secs (nanos: int) : int = [%#stime'31] Int.div nanos 1000000000
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function secs_to_nanos (secs: int) : int = [%#stime'32] secs * 1000000000
  
  function view (self: t_Duration) : int
  
  axiom view_spec: forall self: t_Duration. [%#stime'1] view self >= 0
      /\ view self <= secs_to_nanos (UInt64.t'int const_MAX) + 999999999
  
  let rec new (secs: UInt64.t) (nanos: UInt32.t) (return' (x: t_Duration)) =
    {[@expl:new requires] [%#stime] UInt64.t'int secs + nanos_to_secs (UInt32.t'int nanos) <= UInt64.t'int const_MAX}
    any
    [ return''0 (result: t_Duration) -> {[%#stime'0] view result
      = secs_to_nanos (UInt64.t'int secs) + UInt32.t'int nanos}
      (! return' {result}) ]
  
  function view'0 (self: t_Duration) : int = [%#smodel] view self
  
  let rec as_nanos (self_: t_Duration) (return' (x: UInt128.t)) = any
    [ return''0 (result: UInt128.t) -> {[%#stime'2] UInt128.t'int result = view'0 self_}
      {[%#stime'3] UInt128.t'int result <= secs_to_nanos (UInt64.t'int const_MAX) + 999999999}
      (! return' {result}) ]
  
  let rec from_secs (secs: UInt64.t) (return' (x: t_Duration)) = any
    [ return''0 (result: t_Duration) -> {[%#stime'4] view result = secs_to_nanos (UInt64.t'int secs)}
      (! return' {result}) ]
  
  let rec from_millis (millis: UInt64.t) (return' (x: t_Duration)) = any
    [ return''0 (result: t_Duration) -> {[%#stime'5] view result = UInt64.t'int millis * 1000000} (! return' {result}) ]
  
  let rec from_micros (micros: UInt64.t) (return' (x: t_Duration)) = any
    [ return''0 (result: t_Duration) -> {[%#stime'6] view result = UInt64.t'int micros * 1000} (! return' {result}) ]
  
  let rec from_nanos (nanos: UInt64.t) (return' (x: t_Duration)) = any
    [ return''0 (result: t_Duration) -> {[%#stime'7] view result = UInt64.t'int nanos} (! return' {result}) ]
  
  let rec is_zero (self_: t_Duration) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#stime'8] view'0 self_ = 0 -> result = true}
      {[%#stime'9] view'0 self_ <> 0 -> result = false}
      (! return' {result}) ]
  
  let rec as_secs (self_: t_Duration) (return' (x: UInt64.t)) = any
    [ return''0 (result: UInt64.t) -> {[%#stime'10] UInt64.t'int result = nanos_to_secs (view'0 self_)}
      (! return' {result}) ]
  
  function nanos_to_millis (nanos: int) : int = [%#stime'33] Int.div nanos 1000000
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  let rec subsec_millis (self_: t_Duration) (return' (x: UInt32.t)) = any
    [ return''0 (result: UInt32.t) -> {[%#stime'11] UInt32.t'int result = Int.mod (nanos_to_millis (view'0 self_)) 1000}
      {[%#stime'12] UInt32.lt result (1000: UInt32.t)}
      (! return' {result}) ]
  
  function nanos_to_micros (nanos: int) : int = [%#stime'34] Int.div nanos 1000
  
  let rec subsec_micros (self_: t_Duration) (return' (x: UInt32.t)) = any
    [ return''0 (result: UInt32.t) -> {[%#stime'13] UInt32.t'int result
      = Int.mod (nanos_to_micros (view'0 self_)) 1000000}
      {[%#stime'14] UInt32.lt result (1000000: UInt32.t)}
      (! return' {result}) ]
  
  let rec subsec_nanos (self_: t_Duration) (return' (x: UInt32.t)) = any
    [ return''0 (result: UInt32.t) -> {[%#stime'15] UInt32.t'int result = Int.mod (view'0 self_) 1000000000}
      {[%#stime'16] UInt32.lt result (1000000000: UInt32.t)}
      (! return' {result}) ]
  
  let rec as_millis (self_: t_Duration) (return' (x: UInt128.t)) = any
    [ return''0 (result: UInt128.t) -> {[%#stime'17] UInt128.t'int result = nanos_to_millis (view'0 self_)}
      (! return' {result}) ]
  
  let rec as_micros (self_: t_Duration) (return' (x: UInt128.t)) = any
    [ return''0 (result: UInt128.t) -> {[%#stime'18] UInt128.t'int result = nanos_to_micros (view'0 self_)}
      (! return' {result}) ]
  
  type t_Option = C_None | C_Some t_Duration
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model (self: t_Duration) : int = [%#stime'35] view self
  
  function deep_model'0 (self: t_Option) : t_Option'0 = [%#soption'1] match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  let rec checked_add (self_: t_Duration) (rhs: t_Duration) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#stime'19] nanos_to_secs (view self_ + view rhs) > UInt64.t'int const_MAX
      -> result = C_None}
      {[%#stime'20] nanos_to_secs (view self_ + view rhs) <= UInt64.t'int const_MAX
      -> deep_model'0 result = C_Some'0 (view self_ + view rhs)}
      (! return' {result}) ]
  
  let rec is_none (self_: t_Option) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#soption] result = (self_ = C_None)} (! return' {result}) ]
  
  let rec is_some (self_: t_Option) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#soption'0] result = (self_ <> C_None)} (! return' {result}) ]
  
  let rec checked_sub (self_: t_Duration) (rhs: t_Duration) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#stime'21] view self_ - view rhs < 0 -> result = C_None}
      {[%#stime'22] view self_ - view rhs >= 0 -> deep_model'0 result = C_Some'0 (view self_ - view rhs)}
      (! return' {result}) ]
  
  let rec checked_mul (self_: t_Duration) (rhs: UInt32.t) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#stime'23] nanos_to_secs (view self_ * UInt32.t'int rhs)
        > UInt64.t'int const_MAX -> result = C_None}
      {[%#stime'24] nanos_to_secs (view self_ * UInt32.t'int rhs) <= UInt64.t'int const_MAX
      -> deep_model'0 result = C_Some'0 (view self_ * UInt32.t'int rhs)}
      (! return' {result}) ]
  
  let rec checked_div (self_: t_Duration) (rhs: UInt32.t) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#stime'25] rhs = (0: UInt32.t) -> result = C_None}
      {[%#stime'26] rhs <> (0: UInt32.t) -> deep_model'0 result = C_Some'0 (Int.div (view self_) (UInt32.t'int rhs))}
      (! return' {result}) ]
  
  let rec add (self_: t_Duration) (rhs: t_Duration) (return' (x: t_Duration)) =
    {[@expl:add requires] [%#stime'27] view self_ + view rhs <= secs_to_nanos (UInt64.t'int const_MAX) + 999999999}
    any [ return''0 (result: t_Duration) -> {[%#stime'28] view self_ + view rhs = view result} (! return' {result}) ]
  
  let rec sub (self_: t_Duration) (rhs: t_Duration) (return' (x: t_Duration)) =
    {[@expl:sub requires] [%#stime'29] view self_ - view rhs >= 0}
    any [ return''0 (result: t_Duration) -> {[%#stime'30] view self_ - view rhs = view result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_duration [#"duration.rs" 7 0 7 22] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = new {[%#sduration] (0: UInt64.t)} {[%#sduration'0] (0: UInt32.t)}
          (fun (_ret: t_Duration) -> [ &zero <- _ret ] s1)
      | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sduration'1] view zero = 0} s1
      | s1 = as_nanos {zero} (fun (_ret: UInt128.t) -> [ &_6 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_5 <- _6 = ([%#sduration'2] (0: UInt128.t)) ] s1
      | s1 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb5) ] ]
    | bb5 = s0
      [ s0 = new {[%#sduration'3] const_MAX} {[%#sduration'4] (999999999: UInt32.t)}
          (fun (_ret: t_Duration) -> [ &max <- _ret ] s1)
      | s1 = bb6 ]
    | bb6 = s0
      [ s0 = from_secs {[%#sduration'5] (1: UInt64.t)} (fun (_ret: t_Duration) -> [ &d_secs <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0
      [ s0 = {[@expl:assertion] [%#sduration'6] view d_secs = 1000000000} s1
      | s1 = from_millis {[%#sduration'7] (1: UInt64.t)} (fun (_ret: t_Duration) -> [ &d_millis <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#sduration'8] view d_millis = 1000000} s1
      | s1 = from_micros {[%#sduration'9] (1: UInt64.t)} (fun (_ret: t_Duration) -> [ &d_micros <- _ret ] s2)
      | s2 = bb9 ]
    | bb9 = s0
      [ s0 = {[@expl:assertion] [%#sduration'10] view d_micros = 1000} s1
      | s1 = from_nanos {[%#sduration'11] (1: UInt64.t)} (fun (_ret: t_Duration) -> [ &d_nanos <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = s0
      [ s0 = {[@expl:assertion] [%#sduration'12] view d_nanos = 1} s1
      | s1 = is_zero {zero} (fun (_ret: bool) -> [ &_23 <- _ret ] s2)
      | s2 = bb11 ]
    | bb11 = any [ br0 -> {_23 = false} (! bb12) | br1 -> {_23} (! bb14) ]
    | bb14 = s0 [ s0 = is_zero {d_secs} (fun (_ret: bool) -> [ &_28 <- _ret ] s1) | s1 = bb15 ]
    | bb15 = s0 [ s0 = [ &_27 <- not _28 ] s1 | s1 = any [ br0 -> {_27 = false} (! bb16) | br1 -> {_27} (! bb18) ] ]
    | bb18 = s0 [ s0 = as_secs {d_secs} (fun (_ret: UInt64.t) -> [ &_33 <- _ret ] s1) | s1 = bb19 ]
    | bb19 = s0
      [ s0 = [ &_32 <- ([%#sduration'13] (1: UInt64.t)) = _33 ] s1
      | s1 = any [ br0 -> {_32 = false} (! bb20) | br1 -> {_32} (! bb22) ] ]
    | bb22 = s0 [ s0 = subsec_millis {d_secs} (fun (_ret: UInt32.t) -> [ &_38 <- _ret ] s1) | s1 = bb23 ]
    | bb23 = s0
      [ s0 = [ &_37 <- ([%#sduration'14] (0: UInt32.t)) = _38 ] s1
      | s1 = any [ br0 -> {_37 = false} (! bb24) | br1 -> {_37} (! bb26) ] ]
    | bb26 = s0 [ s0 = subsec_micros {d_secs} (fun (_ret: UInt32.t) -> [ &_43 <- _ret ] s1) | s1 = bb27 ]
    | bb27 = s0
      [ s0 = [ &_42 <- ([%#sduration'15] (0: UInt32.t)) = _43 ] s1
      | s1 = any [ br0 -> {_42 = false} (! bb28) | br1 -> {_42} (! bb30) ] ]
    | bb30 = s0 [ s0 = subsec_nanos {d_secs} (fun (_ret: UInt32.t) -> [ &_48 <- _ret ] s1) | s1 = bb31 ]
    | bb31 = s0
      [ s0 = [ &_47 <- ([%#sduration'16] (0: UInt32.t)) = _48 ] s1
      | s1 = any [ br0 -> {_47 = false} (! bb32) | br1 -> {_47} (! bb34) ] ]
    | bb34 = s0 [ s0 = subsec_millis {d_millis} (fun (_ret: UInt32.t) -> [ &_54 <- _ret ] s1) | s1 = bb35 ]
    | bb35 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _54} (fun (_ret_from: UInt128.t) -> [ &_53 <- _ret_from ] s1)
      | s1 = as_millis {d_millis} (fun (_ret: UInt128.t) -> [ &_56 <- _ret ] s2)
      | s2 = bb36 ]
    | bb36 = s0 [ s0 = [ &_52 <- _53 = _56 ] s1 | s1 = any [ br0 -> {_52 = false} (! bb37) | br1 -> {_52} (! bb39) ] ]
    | bb39 = s0 [ s0 = subsec_micros {d_micros} (fun (_ret: UInt32.t) -> [ &_62 <- _ret ] s1) | s1 = bb40 ]
    | bb40 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _62} (fun (_ret_from: UInt128.t) -> [ &_61 <- _ret_from ] s1)
      | s1 = as_micros {d_micros} (fun (_ret: UInt128.t) -> [ &_64 <- _ret ] s2)
      | s2 = bb41 ]
    | bb41 = s0 [ s0 = [ &_60 <- _61 = _64 ] s1 | s1 = any [ br0 -> {_60 = false} (! bb42) | br1 -> {_60} (! bb44) ] ]
    | bb44 = s0 [ s0 = subsec_nanos {d_nanos} (fun (_ret: UInt32.t) -> [ &_70 <- _ret ] s1) | s1 = bb45 ]
    | bb45 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _70} (fun (_ret_from: UInt128.t) -> [ &_69 <- _ret_from ] s1)
      | s1 = as_nanos {d_nanos} (fun (_ret: UInt128.t) -> [ &_72 <- _ret ] s2)
      | s2 = bb46 ]
    | bb46 = s0 [ s0 = [ &_68 <- _69 = _72 ] s1 | s1 = any [ br0 -> {_68 = false} (! bb47) | br1 -> {_68} (! bb49) ] ]
    | bb49 = s0 [ s0 = checked_add {d_secs} {max} (fun (_ret: t_Option) -> [ &_78 <- _ret ] s1) | s1 = bb50 ]
    | bb50 = s0 [ s0 = is_none {_78} (fun (_ret: bool) -> [ &_76 <- _ret ] s1) | s1 = bb51 ]
    | bb51 = any [ br0 -> {_76 = false} (! bb52) | br1 -> {_76} (! bb54) ]
    | bb54 = s0 [ s0 = checked_add {d_secs} {d_secs} (fun (_ret: t_Option) -> [ &_85 <- _ret ] s1) | s1 = bb55 ]
    | bb55 = s0 [ s0 = is_some {_85} (fun (_ret: bool) -> [ &_83 <- _ret ] s1) | s1 = bb56 ]
    | bb56 = any [ br0 -> {_83 = false} (! bb57) | br1 -> {_83} (! bb59) ]
    | bb59 = s0 [ s0 = checked_sub {d_secs} {max} (fun (_ret: t_Option) -> [ &_92 <- _ret ] s1) | s1 = bb60 ]
    | bb60 = s0 [ s0 = is_none {_92} (fun (_ret: bool) -> [ &_90 <- _ret ] s1) | s1 = bb61 ]
    | bb61 = any [ br0 -> {_90 = false} (! bb62) | br1 -> {_90} (! bb64) ]
    | bb64 = s0 [ s0 = checked_sub {d_secs} {d_millis} (fun (_ret: t_Option) -> [ &_99 <- _ret ] s1) | s1 = bb65 ]
    | bb65 = s0 [ s0 = is_some {_99} (fun (_ret: bool) -> [ &_97 <- _ret ] s1) | s1 = bb66 ]
    | bb66 = any [ br0 -> {_97 = false} (! bb67) | br1 -> {_97} (! bb69) ]
    | bb69 = s0
      [ s0 = checked_mul {max} {[%#sduration'17] (2: UInt32.t)} (fun (_ret: t_Option) -> [ &_106 <- _ret ] s1)
      | s1 = bb70 ]
    | bb70 = s0 [ s0 = is_none {_106} (fun (_ret: bool) -> [ &_104 <- _ret ] s1) | s1 = bb71 ]
    | bb71 = any [ br0 -> {_104 = false} (! bb72) | br1 -> {_104} (! bb74) ]
    | bb74 = s0
      [ s0 = checked_mul {d_secs} {[%#sduration'18] (10: UInt32.t)} (fun (_ret: t_Option) -> [ &_112 <- _ret ] s1)
      | s1 = bb75 ]
    | bb75 = s0 [ s0 = is_some {_112} (fun (_ret: bool) -> [ &_110 <- _ret ] s1) | s1 = bb76 ]
    | bb76 = any [ br0 -> {_110 = false} (! bb77) | br1 -> {_110} (! bb79) ]
    | bb79 = s0
      [ s0 = checked_div {d_secs} {[%#sduration'19] (0: UInt32.t)} (fun (_ret: t_Option) -> [ &_118 <- _ret ] s1)
      | s1 = bb80 ]
    | bb80 = s0 [ s0 = is_none {_118} (fun (_ret: bool) -> [ &_116 <- _ret ] s1) | s1 = bb81 ]
    | bb81 = any [ br0 -> {_116 = false} (! bb82) | br1 -> {_116} (! bb84) ]
    | bb84 = s0
      [ s0 = checked_div {d_secs} {[%#sduration'20] (10: UInt32.t)} (fun (_ret: t_Option) -> [ &_124 <- _ret ] s1)
      | s1 = bb85 ]
    | bb85 = s0 [ s0 = is_some {_124} (fun (_ret: bool) -> [ &_122 <- _ret ] s1) | s1 = bb86 ]
    | bb86 = any [ br0 -> {_122 = false} (! bb87) | br1 -> {_122} (! bb89) ]
    | bb89 = s0 [ s0 = add {d_millis} {d_micros} (fun (_ret: t_Duration) -> [ &sum <- _ret ] s1) | s1 = bb90 ]
    | bb90 = s0 [ s0 = sub {d_millis} {d_micros} (fun (_ret: t_Duration) -> [ &difference <- _ret ] s1) | s1 = bb91 ]
    | bb91 = s0
      [ s0 = {[@expl:assertion] [%#sduration'21] view sum = 1001000} s1
      | s1 = {[@expl:assertion] [%#sduration'22] view difference = 999000} s2
      | s2 = return''0 {_0} ]
    | bb87 = {[%#sduration'23] false} any
    | bb82 = {[%#sduration'24] false} any
    | bb77 = {[%#sduration'25] false} any
    | bb72 = {[%#sduration'26] false} any
    | bb67 = {[%#sduration'27] false} any
    | bb62 = {[%#sduration'28] false} any
    | bb57 = {[%#sduration'29] false} any
    | bb52 = {[%#sduration'30] false} any
    | bb47 = {[%#sduration'31] false} any
    | bb42 = {[%#sduration'32] false} any
    | bb37 = {[%#sduration'33] false} any
    | bb32 = {[%#sduration'34] false} any
    | bb28 = {[%#sduration'35] false} any
    | bb24 = {[%#sduration'36] false} any
    | bb20 = {[%#sduration'37] false} any
    | bb16 = {[%#sduration'38] false} any
    | bb12 = {[%#sduration'39] false} any
    | bb3 = {[%#sduration'40] false} any ]
    [ & _0: () = Any.any_l ()
    | & zero: t_Duration = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _6: UInt128.t = Any.any_l ()
    | & max: t_Duration = Any.any_l ()
    | & d_secs: t_Duration = Any.any_l ()
    | & d_millis: t_Duration = Any.any_l ()
    | & d_micros: t_Duration = Any.any_l ()
    | & d_nanos: t_Duration = Any.any_l ()
    | & _23: bool = Any.any_l ()
    | & _27: bool = Any.any_l ()
    | & _28: bool = Any.any_l ()
    | & _32: bool = Any.any_l ()
    | & _33: UInt64.t = Any.any_l ()
    | & _37: bool = Any.any_l ()
    | & _38: UInt32.t = Any.any_l ()
    | & _42: bool = Any.any_l ()
    | & _43: UInt32.t = Any.any_l ()
    | & _47: bool = Any.any_l ()
    | & _48: UInt32.t = Any.any_l ()
    | & _52: bool = Any.any_l ()
    | & _53: UInt128.t = Any.any_l ()
    | & _54: UInt32.t = Any.any_l ()
    | & _56: UInt128.t = Any.any_l ()
    | & _60: bool = Any.any_l ()
    | & _61: UInt128.t = Any.any_l ()
    | & _62: UInt32.t = Any.any_l ()
    | & _64: UInt128.t = Any.any_l ()
    | & _68: bool = Any.any_l ()
    | & _69: UInt128.t = Any.any_l ()
    | & _70: UInt32.t = Any.any_l ()
    | & _72: UInt128.t = Any.any_l ()
    | & _76: bool = Any.any_l ()
    | & _78: t_Option = Any.any_l ()
    | & _83: bool = Any.any_l ()
    | & _85: t_Option = Any.any_l ()
    | & _90: bool = Any.any_l ()
    | & _92: t_Option = Any.any_l ()
    | & _97: bool = Any.any_l ()
    | & _99: t_Option = Any.any_l ()
    | & _104: bool = Any.any_l ()
    | & _106: t_Option = Any.any_l ()
    | & _110: bool = Any.any_l ()
    | & _112: t_Option = Any.any_l ()
    | & _116: bool = Any.any_l ()
    | & _118: t_Option = Any.any_l ()
    | & _122: bool = Any.any_l ()
    | & _124: t_Option = Any.any_l ()
    | & sum: t_Duration = Any.any_l ()
    | & difference: t_Duration = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
