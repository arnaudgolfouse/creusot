module M_binary_search__qyi14442247409995256824__len_logic [#"binary_search.rs" 22 4 22 33] (* List<T> *)
  let%span sbinary_search = "binary_search.rs" 21 14 21 25
  let%span sbinary_search'0 = "binary_search.rs" 23 8 26 9
  
  use mach.int.Int
  
  type t_T
  
  type t_List = C_Cons t_T t_List | C_Nil
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_List
  
  function len_logic [#"binary_search.rs" 22 4 22 33] (self'0: t_List) : int
  
  goal vc_len_logic: match self with
      | C_Cons _ ls -> ([%#sbinary_search] len_logic ls >= 0)
      -> ([@expl:len_logic ensures] [%#sbinary_search] 1 + len_logic ls >= 0)
      | C_Nil -> [@expl:len_logic ensures] [%#sbinary_search] 0 >= 0
      end
end
module M_binary_search__qyi14442247409995256824__index [#"binary_search.rs" 45 4 45 40] (* List<T> *)
  let%span sbinary_search = "binary_search.rs" 51 20 51 26
  let%span sbinary_search'0 = "binary_search.rs" 50 20 50 52
  let%span sbinary_search'1 = "binary_search.rs" 49 20 49 39
  let%span sbinary_search'2 = "binary_search.rs" 53 20 53 21
  let%span sbinary_search'3 = "binary_search.rs" 55 22 55 23
  let%span sbinary_search'4 = "binary_search.rs" 45 14 45 18
  let%span sbinary_search'5 = "binary_search.rs" 43 15 43 37
  let%span sbinary_search'6 = "binary_search.rs" 45 38 45 40
  let%span sbinary_search'7 = "binary_search.rs" 44 14 44 44
  let%span sbinary_search'8 = "binary_search.rs" 31 8 40 9
  let%span sbinary_search'9 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search'10 = "binary_search.rs" 23 8 26 9
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_T
  
  type t_List = C_Cons t_T t_List | C_Nil
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_List)
  
  predicate invariant' (self: t_List) = [%#sboxed] inv'0 self
  
  predicate inv'1 (_0: t_List)
  
  axiom inv_axiom [@rewrite]: forall x: t_List [inv'1 x]. inv'1 x = invariant' x
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'0 x]. inv'0 x
      = match x with
        | C_Cons a_0 a_1 -> inv a_0 /\ inv'1 a_1
        | C_Nil -> true
        end
  
  predicate invariant''0 [@inline:trivial] (self: t_List) = [%#sinvariant] inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 (_0: t_List)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x = invariant''0 x
  
  type t_Option = C_None | C_Some t_T
  
  function get [#"binary_search.rs" 30 4 30 42] (self: t_List) (ix: int) : t_Option =
    [%#sbinary_search'8] match self with
      | C_Cons t ls -> if ix = 0 then C_Some t else get ls (ix - 1)
      | C_Nil -> C_None
      end
  
  function len_logic [#"binary_search.rs" 22 4 22 33] (self: t_List) : int = [%#sbinary_search'10] match self with
      | C_Cons _ ls -> 1 + len_logic ls
      | C_Nil -> 0
      end
  
  axiom len_logic_spec: forall self: t_List. [%#sbinary_search'9] len_logic self >= 0
  
  let rec v_Cons (input: t_List) (ret (field_0: t_T) (field_1: t_List)) = any
    [ good (field_0: t_T) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: t_T, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1 <> input}
      (! {false}
      any) ]
  
  predicate invariant''1 [@inline:trivial] (self: t_T) = [%#sinvariant] inv self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'3 (_0: t_T)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_T [inv'3 x]. inv'3 x = invariant''1 x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec index [#"binary_search.rs" 45 4 45 40] (self: t_List) (ix: UInt64.t) (return' (x: t_T)) =
    {[@expl:index 'self' type invariant] [%#sbinary_search'4] inv'2 self}
    {[@expl:index requires] [%#sbinary_search'5] UInt64.t'int ix < len_logic self}
    (! bb0
    [ bb0 = s0 [ s0 = [ &orig_ix <- ix'0 ] s1 | s1 = [ &l <- self'0 ] s2 | s2 = bb1 ]
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:loop invariant #0] [%#sbinary_search'1] UInt64.t'int ix'0 < len_logic l}
        {[@expl:loop invariant #1] [%#sbinary_search'0] get self'0 (UInt64.t'int orig_ix) = get l (UInt64.t'int ix'0)}
        {[@expl:loop invariant #2] [%#sbinary_search] inv'2 l}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = any [ br0 (x0: t_T) (x1: t_List) -> {l = C_Cons x0 x1} (! bb4) | br1 -> {l = C_Nil} (! bb7) ]
        | bb4 = s0
          [ s0 = v_Cons {l} (fun (r0: t_T) (r1: t_List) -> [ &t <- r0 ] s1)
          | s1 = v_Cons {l} (fun (r0: t_T) (r1: t_List) -> [ &ls <- r1 ] s2)
          | s2 = [ &_16 <- UInt64.gt ix'0 ([%#sbinary_search'2] (0: UInt64.t)) ] s3
          | s3 = any [ br0 -> {_16 = false} (! bb6) | br1 -> {_16} (! bb5) ] ]
        | bb5 = s0
          [ s0 = [ &_19 <- ls ] s1
          | s1 = [ &l <- _19 ] s2
          | s2 = UInt64.sub {ix'0} {[%#sbinary_search'3] (1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &ix'0 <- _ret ] s3)
          | s3 = bb1'0 ] ] ]
    | bb7 = {false} any
    | bb6 = s0 [ s0 = [ &_0 <- t ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: t_T = Any.any_l ()
    | & self'0: t_List = self
    | & ix'0: UInt64.t = ix
    | & orig_ix: UInt64.t = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & t: t_T = Any.any_l ()
    | & ls: t_List = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _19: t_List = Any.any_l () ])
    [ return''0 (result: t_T) -> {[@expl:index result type invariant] [%#sbinary_search'6] inv'3 result}
      {[@expl:index ensures] [%#sbinary_search'7] C_Some result = get self (UInt64.t'int ix)}
      (! return' {result}) ]
end
module M_binary_search__qyi14442247409995256824__len [#"binary_search.rs" 67 4 67 26] (* List<T> *)
  let%span sbinary_search = "binary_search.rs" 68 29 68 30
  let%span sbinary_search'0 = "binary_search.rs" 71 20 71 26
  let%span sbinary_search'1 = "binary_search.rs" 70 20 70 60
  let%span sbinary_search'2 = "binary_search.rs" 73 19 73 20
  let%span sbinary_search'3 = "binary_search.rs" 67 12 67 16
  let%span sbinary_search'4 = "binary_search.rs" 64 15 64 44
  let%span sbinary_search'5 = "binary_search.rs" 65 14 65 30
  let%span sbinary_search'6 = "binary_search.rs" 66 14 66 41
  let%span sbinary_search'7 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search'8 = "binary_search.rs" 23 8 26 9
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../creusot-contracts/src/logic/ord.rs" 211 16 217 17
  
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  type t_List = C_Cons t_T t_List | C_Nil
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_List)
  
  predicate invariant' (self: t_List) = [%#sboxed] inv'0 self
  
  predicate inv'1 (_0: t_List)
  
  axiom inv_axiom [@rewrite]: forall x: t_List [inv'1 x]. inv'1 x = invariant' x
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'0 x]. inv'0 x
      = match x with
        | C_Cons a_0 a_1 -> inv a_0 /\ inv'1 a_1
        | C_Nil -> true
        end
  
  predicate invariant''0 [@inline:trivial] (self: t_List) = [%#sinvariant] inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 (_0: t_List)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x = invariant''0 x
  
  function len_logic [#"binary_search.rs" 22 4 22 33] (self: t_List) : int = [%#sbinary_search'8] match self with
      | C_Cons _ ls -> 1 + len_logic ls
      | C_Nil -> 0
      end
  
  axiom len_logic_spec: forall self: t_List. [%#sbinary_search'7] len_logic self >= 0
  
  let rec v_Cons (input: t_List) (ret (field_0: t_T) (field_1: t_List)) = any
    [ good (field_0: t_T) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: t_T, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1 <> input}
      (! {false}
      any) ]
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering = [%#sord'12] if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec len [#"binary_search.rs" 67 4 67 26] (self: t_List) (return' (x: UInt64.t)) =
    {[@expl:len 'self' type invariant] [%#sbinary_search'3] inv'2 self}
    {[@expl:len requires] [%#sbinary_search'4] len_logic self <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = [ &len'0 <- [%#sbinary_search] (0: UInt64.t) ] s1 | s1 = [ &l <- self'0 ] s2 | s2 = bb1 ]
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:loop invariant #0] [%#sbinary_search'1] UInt64.t'int len'0 + len_logic l = len_logic self'0}
        {[@expl:loop invariant #1] [%#sbinary_search'0] inv'2 l}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = any [ br0 (x0: t_T) (x1: t_List) -> {l = C_Cons x0 x1} (! bb4) | br1 -> {l = C_Nil} (! bb5) ]
        | bb4 = s0
          [ s0 = v_Cons {l} (fun (r0: t_T) (r1: t_List) -> [ &ls <- r1 ] s1)
          | s1 = UInt64.add {len'0} {[%#sbinary_search'2] (1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &len'0 <- _ret ] s2)
          | s2 = [ &l <- ls ] s3
          | s3 = bb1'0 ] ] ]
    | bb5 = s0 [ s0 = [ &_0 <- len'0 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l ()
    | & self'0: t_List = self
    | & len'0: UInt64.t = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & ls: t_List = Any.any_l () ])
    [ return''0 (result: UInt64.t) -> {[@expl:len ensures #0] [%#sbinary_search'5] UInt64.ge result (0: UInt64.t)}
      {[@expl:len ensures #1] [%#sbinary_search'6] UInt64.t'int result = len_logic self}
      (! return' {result}) ]
end
module M_binary_search__binary_search [#"binary_search.rs" 111 0 111 72]
  let%span sbinary_search = "binary_search.rs" 112 20 112 21
  let%span sbinary_search'0 = "binary_search.rs" 113 19 113 20
  let%span sbinary_search'1 = "binary_search.rs" 116 19 116 20
  let%span sbinary_search'2 = "binary_search.rs" 120 16 120 116
  let%span sbinary_search'3 = "binary_search.rs" 119 16 119 81
  let%span sbinary_search'4 = "binary_search.rs" 118 16 118 63
  let%span sbinary_search'5 = "binary_search.rs" 121 17 121 18
  let%span sbinary_search'6 = "binary_search.rs" 122 26 122 27
  let%span sbinary_search'7 = "binary_search.rs" 122 19 122 27
  let%span sbinary_search'8 = "binary_search.rs" 133 19 133 20
  let%span sbinary_search'9 = "binary_search.rs" 104 11 104 39
  let%span sbinary_search'10 = "binary_search.rs" 105 0 105 28
  let%span sbinary_search'11 = "binary_search.rs" 106 10 106 71
  let%span sbinary_search'12 = "binary_search.rs" 107 10 108 76
  let%span sbinary_search'13 = "binary_search.rs" 109 10 110 88
  let%span sbinary_search'14 = "binary_search.rs" 64 15 64 44
  let%span sbinary_search'15 = "binary_search.rs" 65 14 65 30
  let%span sbinary_search'16 = "binary_search.rs" 66 14 66 41
  let%span sbinary_search'17 = "binary_search.rs" 21 14 21 25
  let%span sbinary_search'18 = "binary_search.rs" 23 8 26 9
  let%span sbinary_search'19 = "binary_search.rs" 81 8 84 9
  let%span sbinary_search'20 = "binary_search.rs" 43 15 43 37
  let%span sbinary_search'21 = "binary_search.rs" 44 14 44 44
  let%span sbinary_search'22 = "binary_search.rs" 93 16 98 21
  let%span sbinary_search'23 = "binary_search.rs" 31 8 40 9
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'13 = "../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'14 = "../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'15 = "../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'16 = "../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'17 = "../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'18 = "../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'19 = "../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'20 = "../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'21 = "../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'22 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'23 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'24 = "../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'25 = "../../creusot-contracts/src/logic/ord.rs" 211 16 217 17
  let%span sord'26 = "../../creusot-contracts/src/logic/ord.rs" 211 16 217 17
  
  use creusot.int.UInt64
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  function len_logic [#"binary_search.rs" 22 4 22 33] (self: t_List) : int = [%#sbinary_search'18] match self with
      | C_Cons _ ls -> 1 + len_logic ls
      | C_Nil -> 0
      end
  
  axiom len_logic_spec: forall self: t_List. [%#sbinary_search'17] len_logic self >= 0
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering = [%#sord'26] if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'24] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'22] cmp_log x y = C_Greater)
      -> ([%#sord'23] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'20] cmp_log x y = C_Less)
      -> ([%#sord'21] cmp_log y x = C_Greater)
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'17] cmp_log x y = o)
      -> ([%#sord'18] cmp_log y z = o) -> ([%#sord'19] cmp_log x z = o)
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. [%#sord'16] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'15] UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'14] UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'13] UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'12] UInt64.le x y = (cmp_log x y <> C_Greater)
  
  let rec len (self: t_List) (return' (x: UInt64.t)) = {[@expl:len requires] [%#sbinary_search'14] len_logic self
    <= 1000000}
    any
    [ return''0 (result: UInt64.t) -> {[%#sbinary_search'15] UInt64.ge result (0: UInt64.t)}
      {[%#sbinary_search'16] UInt64.t'int result = len_logic self}
      (! return' {result}) ]
  
  type t_Result = C_Ok UInt64.t | C_Err UInt64.t
  
  function cmp_log'0 (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'25] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp'0 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec'0: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log'0 x y = C_Equal)
  
  function antisym2'0 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec'0: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log'0 x y = C_Greater)
      -> ([%#sord'10] cmp_log'0 y x = C_Less)
  
  function antisym1'0 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec'0: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log'0 x y = C_Less)
      -> ([%#sord'8] cmp_log'0 y x = C_Greater)
  
  function trans'0 (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec'0: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log'0 x y = o)
      -> ([%#sord'5] cmp_log'0 y z = o) -> ([%#sord'6] cmp_log'0 x z = o)
  
  function refl'0 (x: UInt32.t) : ()
  
  axiom refl_spec'0: forall x: UInt32.t. [%#sord'3] cmp_log'0 x x = C_Equal
  
  function cmp_gt_log'0 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec'0: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log'0 x y = C_Greater)
  
  function cmp_ge_log'0 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec'0: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log'0 x y <> C_Less)
  
  function cmp_lt_log'0 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec'0: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log'0 x y = C_Less)
  
  function cmp_le_log'0 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec'0: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log'0 x y <> C_Greater)
  
  type t_Option = C_None | C_Some UInt32.t
  
  function get [#"binary_search.rs" 30 4 30 42] (self: t_List) (ix: int) : t_Option =
    [%#sbinary_search'23] match self with
      | C_Cons t ls -> if ix = 0 then C_Some t else get ls (ix - 1)
      | C_Nil -> C_None
      end
  
  function get_default [#"binary_search.rs" 80 4 80 50] (self: t_List) (ix: int) (def: UInt32.t) : UInt32.t =
    [%#sbinary_search'19] match get self ix with
      | C_Some v -> v
      | C_None -> def
      end
  
  let rec index (self: t_List) (ix: UInt64.t) (return' (x: UInt32.t)) =
    {[@expl:index requires] [%#sbinary_search'20] UInt64.t'int ix < len_logic self}
    any
    [ return''0 (result: UInt32.t) -> {[%#sbinary_search'21] C_Some result = get self (UInt64.t'int ix)}
      (! return' {result}) ]
  
  type tuple = { _p0: t_Option; _p1: t_Option }
  
  predicate is_sorted [#"binary_search.rs" 90 4 90 34] (self: t_List) =
    [%#sbinary_search'22] forall x1: int, x2: int. x1 <= x2
      -> match { _p0 = get self x1; _p1 = get self x2 } with
        | {_p0 = C_Some v1; _p1 = C_Some v2} -> UInt32.le v1 v2
        | {_p0 = C_None; _p1 = C_None} -> true
        | _ -> false
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec binary_search [#"binary_search.rs" 111 0 111 72] (arr: t_List) (elem: UInt32.t) (return' (x: t_Result)) =
    {[@expl:binary_search requires #0] [%#sbinary_search'9] len_logic arr <= 1000000}
    {[@expl:binary_search requires #1] [%#sbinary_search'10] is_sorted arr}
    (! bb0
    [ bb0 = s0 [ s0 = len {arr'0} (fun (_ret: UInt64.t) -> [ &_10 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_9 <- _10 = ([%#sbinary_search] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ] ]
    | bb2 = s0 [ s0 = [ &_0 <- C_Err ([%#sbinary_search'0] (0: UInt64.t)) ] s1 | s1 = bb21 ]
    | bb3 = s0 [ s0 = len {arr'0} (fun (_ret: UInt64.t) -> [ &size <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &base <- [%#sbinary_search'1] (0: UInt64.t) ] s1 | s1 = bb5 ]
    | bb5 = bb5'0
      [ bb5'0 = {[@expl:loop invariant #0] [%#sbinary_search'4] 0 < UInt64.t'int size
        /\ UInt64.t'int size + UInt64.t'int base <= len_logic arr'0}
        {[@expl:loop invariant #1] [%#sbinary_search'3] forall i: UInt64.t. UInt64.lt i base
          -> UInt32.le (get_default arr'0 (UInt64.t'int i) (0: UInt32.t)) elem'0}
        {[@expl:loop invariant #2] [%#sbinary_search'2] forall i: UInt64.t. UInt64.t'int base + UInt64.t'int size
              < UInt64.t'int i
            /\ UInt64.t'int i < len_logic arr'0 -> UInt32.lt elem'0 (get_default arr'0 (UInt64.t'int i) (0: UInt32.t))}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = [ &_22 <- UInt64.gt size ([%#sbinary_search'5] (1: UInt64.t)) ] s1
          | s1 = any [ br0 -> {_22 = false} (! bb13) | br1 -> {_22} (! bb7) ] ]
        | bb7 = s0
          [ s0 = [ &_26 <- ([%#sbinary_search'6] (2: UInt64.t)) = ([%#sbinary_search'7] (0: UInt64.t)) ] s1
          | s1 = {[@expl:division by zero] [%#sbinary_search'7] not _26} s2
          | s2 = bb8 ]
        | bb8 = s0
          [ s0 = UInt64.div {size} {[%#sbinary_search'6] (2: UInt64.t)} (fun (_ret: UInt64.t) -> [ &half <- _ret ] s1)
          | s1 = UInt64.add {base} {half} (fun (_ret: UInt64.t) -> [ &mid <- _ret ] s2)
          | s2 = index {arr'0} {mid} (fun (_ret: UInt32.t) -> [ &_33 <- _ret ] s3)
          | s3 = bb9 ]
        | bb9 = s0
          [ s0 = [ &_31 <- UInt32.gt _33 elem'0 ] s1
          | s1 = any [ br0 -> {_31 = false} (! bb11) | br1 -> {_31} (! bb10) ] ]
        | bb10 = s0 [ s0 = [ &_30 <- base ] s1 | s1 = bb12 ]
        | bb11 = s0 [ s0 = [ &_30 <- mid ] s1 | s1 = bb12 ]
        | bb12 = s0
          [ s0 = [ &base <- _30 ] s1
          | s1 = UInt64.sub {size} {half} (fun (_ret: UInt64.t) -> [ &size <- _ret ] s2)
          | s2 = bb5'0 ] ] ]
    | bb13 = s0 [ s0 = index {arr'0} {base} (fun (_ret: UInt32.t) -> [ &_40 <- _ret ] s1) | s1 = bb14 ]
    | bb14 = s0
      [ s0 = [ &cmp <- _40 ] s1
      | s1 = [ &_43 <- cmp = elem'0 ] s2
      | s2 = any [ br0 -> {_43 = false} (! bb16) | br1 -> {_43} (! bb15) ] ]
    | bb15 = s0 [ s0 = [ &_0 <- C_Ok base ] s1 | s1 = bb21 ]
    | bb16 = s0
      [ s0 = [ &_47 <- UInt32.lt cmp elem'0 ] s1 | s1 = any [ br0 -> {_47 = false} (! bb18) | br1 -> {_47} (! bb17) ] ]
    | bb17 = s0
      [ s0 = UInt64.add {base} {[%#sbinary_search'8] (1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_50 <- _ret ] s1)
      | s1 = [ &_0 <- C_Err _50 ] s2
      | s2 = bb21 ]
    | bb18 = s0 [ s0 = [ &_0 <- C_Err base ] s1 | s1 = bb21 ]
    | bb21 = return''0 {_0} ]
    [ & _0: t_Result = Any.any_l ()
    | & arr'0: t_List = arr
    | & elem'0: UInt32.t = elem
    | & _9: bool = Any.any_l ()
    | & _10: UInt64.t = Any.any_l ()
    | & size: UInt64.t = Any.any_l ()
    | & base: UInt64.t = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & half: UInt64.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & mid: UInt64.t = Any.any_l ()
    | & _30: UInt64.t = Any.any_l ()
    | & _31: bool = Any.any_l ()
    | & _33: UInt32.t = Any.any_l ()
    | & cmp: UInt32.t = Any.any_l ()
    | & _40: UInt32.t = Any.any_l ()
    | & _43: bool = Any.any_l ()
    | & _47: bool = Any.any_l ()
    | & _50: UInt64.t = Any.any_l () ])
    [ return''0 (result: t_Result) -> {[@expl:binary_search ensures #0] [%#sbinary_search'11] forall x: UInt64.t. result
          = C_Ok x -> get arr (UInt64.t'int x) = C_Some elem}
      {[@expl:binary_search ensures #1] [%#sbinary_search'12] forall x: UInt64.t. result = C_Err x
        -> (forall i: UInt64.t. 0 <= UInt64.t'int i /\ UInt64.t'int i < UInt64.t'int x
          -> UInt32.le (get_default arr (UInt64.t'int i) (0: UInt32.t)) elem)}
      {[@expl:binary_search ensures #2] [%#sbinary_search'13] forall x: UInt64.t. result = C_Err x
        -> (forall i: UInt64.t. UInt64.t'int x < UInt64.t'int i /\ UInt64.t'int i < len_logic arr
          -> UInt32.lt elem (get_default arr (UInt64.t'int i) (0: UInt32.t)))}
      (! return' {result}) ]
end
