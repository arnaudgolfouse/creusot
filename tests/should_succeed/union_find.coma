module M_union_find__implementation__qyi17232405883558456141__eq [#"union_find.rs" 19 8 19 42] (* <implementation::Element<T> as creusot_contracts::PartialEq> *)
  let%span sunion_find = "union_find.rs" 18 18 18 69
  let%span sunion_find'0 = "union_find.rs" 25 8 25 16
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 109 22 109 66
  let%span smodel = "../../creusot-contracts/src/model.rs" 36 8 36 28
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  let rec addr_eq (p: Opaque.ptr) (q: Opaque.ptr) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#sptr] result = (addr_logic p = addr_logic q)} (! return' {result}) ]
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'0] addr_logic self.t_Element__0
  
  function deep_model'0 (self: t_Element) : UInt64.t = [%#smodel] deep_model self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec eq [#"union_find.rs" 19 8 19 42] (self: t_Element) (other: t_Element) (return' (x: bool)) = (! bb0
    [ bb0 = s0
      [ s0 = addr_eq {self'0.t_Element__0} {other'0.t_Element__0} (fun (_ret: bool) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = return''0 {_0} ] [ & _0: bool = Any.any_l () | & self'0: t_Element = self | & other'0: t_Element = other ])
    [ return''0 (result: bool) -> {[@expl:eq ensures] [%#sunion_find] result = (deep_model'0 self = deep_model'0 other)}
      (! return' {result}) ]
end
module M_union_find__implementation__qyi10464084137166016688__clone [#"union_find.rs" 39 8 39 31] (* <implementation::Element<T> as creusot_contracts::Clone> *)
  let%span sunion_find = "union_find.rs" 37 18 37 33
  
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec clone' [#"union_find.rs" 39 8 39 31] (self: t_Element) (return' (x: t_Element)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- { t_Element__0 = self'0.t_Element__0 } ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: t_Element = Any.any_l () | & self'0: t_Element = self ])
    [ return''0 (result: t_Element) -> {[@expl:clone ensures] [%#sunion_find] self = result} (! return' {result}) ]
end
module M_union_find__implementation__qyi1944850640244667852__domain [#"union_find.rs" 98 8 98 47] (* implementation::UnionFind<T> *)
  let%span sunion_find = "union_find.rs" 96 19 96 28
  let%span sunion_find'0 = "union_find.rs" 97 18 97 150
  let%span sunion_find'1 = "union_find.rs" 95 8 95 16
  let%span sunion_find'2 = "union_find.rs" 25 8 25 16
  let%span sunion_find'3 = "union_find.rs" 73 12 88 53
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.Opaque
  use set.Fset
  use map.Map
  use creusot.int.UInt64
  use mach.int.Int
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'2] addr_logic self.t_Element__0
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'1] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap] get self k <> C_None
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'0] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'2] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'0] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'3] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> inv'2 val''0
        end)
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap'3] forall k: t_Element. contains'0 self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_UnionFind
  
  function domain [#"union_find.rs" 98 8 98 47] (self'0: t_UnionFind) : Fset.fset t_Element
  
  goal vc_domain: ([%#sunion_find] inv'6 self)
    -> (let result = (self.t_UnionFind__0).t_UFInner__domain in [@expl:domain ensures] [%#sunion_find'0] forall e1: t_Element, e2: t_Element. contains result e1
        /\ contains result e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
end
module M_union_find__implementation__qyi1944850640244667852__roots_map [#"union_find.rs" 119 8 119 65] (* implementation::UnionFind<T> *)
  let%span sunion_find = "union_find.rs" 114 19 114 28
  let%span sunion_find'0 = "union_find.rs" 115 18 117 42
  let%span sunion_find'1 = "union_find.rs" 113 8 113 16
  let%span sunion_find'2 = "union_find.rs" 103 8 103 16
  let%span sunion_find'3 = "union_find.rs" 96 19 96 28
  let%span sunion_find'4 = "union_find.rs" 97 18 97 150
  let%span sunion_find'5 = "union_find.rs" 95 8 95 16
  let%span sunion_find'6 = "union_find.rs" 73 12 88 53
  let%span sunion_find'7 = "union_find.rs" 25 8 25 16
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.Opaque
  use set.Fset
  use map.Map
  use creusot.int.UInt64
  use mach.int.Int
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'7] addr_logic self.t_Element__0
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'1] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap] get self k <> C_None
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'0] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'2] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'0] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'6] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> inv'2 val''0
        end)
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap'3] forall k: t_Element. contains'0 self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'5] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'3] inv'6 self)
      -> ([%#sunion_find'4] forall e1: t_Element, e2: t_Element. contains (domain self) e1
          /\ contains (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'2] contains (domain self) e
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_UnionFind
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self'0: t_UnionFind) : Map.map t_Element t_Element
  
  goal vc_roots_map: ([%#sunion_find] inv'6 self)
    -> (let result = (self.t_UnionFind__0).t_UFInner__roots in [@expl:roots_map ensures] [%#sunion_find'0] forall e: t_Element. in_domain self e
      -> in_domain self (index_logic'1 result e)
      /\ index_logic'1 result e = index_logic'1 result (index_logic'1 result e))
end
module M_union_find__implementation__new [#"union_find.rs" 176 4 176 42]
  let%span sunion_find = "union_find.rs" 180 28 180 52
  let%span sunion_find'0 = "union_find.rs" 182 30 182 60
  let%span sunion_find'1 = "union_find.rs" 183 27 183 57
  let%span sunion_find'2 = "union_find.rs" 184 27 184 57
  let%span sunion_find'3 = "union_find.rs" 185 31 185 43
  let%span sunion_find'4 = "union_find.rs" 176 23 176 42
  let%span sunion_find'5 = "union_find.rs" 175 4 175 42
  let%span sunion_find'6 = "union_find.rs" 96 19 96 28
  let%span sunion_find'7 = "union_find.rs" 97 18 97 150
  let%span sunion_find'8 = "union_find.rs" 95 8 95 16
  let%span sunion_find'9 = "union_find.rs" 25 8 25 16
  let%span sunion_find'10 = "union_find.rs" 73 12 88 53
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 286 4 286 31
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 284 4 284 33
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 120 4 120 12
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 186 14 186 39
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 189 12 189 35
  let%span sfmap'4 = "../../creusot-contracts/src/logic/fmap.rs" 52 14 52 31
  let%span sfmap'5 = "../../creusot-contracts/src/logic/fmap.rs" 53 14 53 43
  let%span sfmap'6 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'7 = "../../creusot-contracts/src/logic/fmap.rs" 61 14 61 25
  let%span sfmap'8 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span sfmap'9 = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'10 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'11 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 205 22 205 26
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 205 4 207 17
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 203 14 203 29
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 183 15 183 16
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 183 4 185 17
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  
  use set.Fset
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use map.Map
  use mach.int.Int
  use map.Const
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_T
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'6] Map.get (view self) k
  
  predicate contains [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap'9] get self k <> C_None
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate invariant' (self: t_PtrOwn) = [%#sptr_own] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''0 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant' x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val'} -> inv'2 val'
        end)
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'0] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'11] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'10] lookup self key
  
  predicate invariant''1 (self: t_FMap) =
    [%#sfmap'8] forall k: t_Element. contains self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''1 x
  
  predicate invariant''2 (self: t_FMap) = [%#sghost'5] inv'4 self
  
  predicate inv'5 (_0: t_FMap)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_FMap [inv'5 x]. inv'5 x = invariant''2 x
  
  predicate ext_eq (self: t_FMap) (other: t_FMap) = [%#sfmap'3] forall k: t_Element. get self k = get other k
  
  axiom ext_eq_spec: forall self: t_FMap, other: t_FMap. [%#sfmap'2] ext_eq self other = (self = other)
  
  function len (self: t_FMap) : int
  
  axiom len_spec: forall self: t_FMap. [%#sfmap'7] len self >= 0
  
  constant empty : t_FMap
  
  axiom empty_spec: [%#sfmap'4] len empty = 0
  
  axiom empty_spec'0: [%#sfmap'5] view empty = Const.const (C_None)
  
  predicate is_empty (self: t_FMap) = [%#sfmap'1] ext_eq self empty
  
  let rec new (return' (x: t_FMap)) = any
    [ return''0 (result: t_FMap) -> {[%#sfmap] inv'5 result} {[%#sfmap'0] is_empty result} (! return' {result}) ]
  
  let rec into_inner (self: t_FMap) (return' (x: t_FMap)) =
    {[@expl:into_inner 'self' type invariant] [%#sghost] inv'5 self}
    any [ return''0 (result: t_FMap) -> {[%#sghost'0] inv'4 result} {[%#sghost'1] result = self} (! return' {result}) ]
  
  predicate index_logic'1 (self: Map.map (Map.map t_Element t_T) bool) (a: Map.map t_Element t_T) =
    [%#smapping] Map.get self a
  
  function such_that'0 (p: Map.map (Map.map t_Element t_T) bool) : Map.map t_Element t_T
  
  axiom such_that_spec'0:
    forall p: Map.map (Map.map t_Element t_T) bool. ([%#slogic] exists x: Map.map t_Element t_T. index_logic'1 p x)
      -> ([%#slogic'0] index_logic'1 p (such_that'0 p))
  
  predicate index_logic'2 (self: Map.map (Map.map t_Element int) bool) (a: Map.map t_Element int) =
    [%#smapping] Map.get self a
  
  function such_that'1 (p: Map.map (Map.map t_Element int) bool) : Map.map t_Element int
  
  axiom such_that_spec'1:
    forall p: Map.map (Map.map t_Element int) bool. ([%#slogic] exists x: Map.map t_Element int. index_logic'2 p x)
      -> ([%#slogic'0] index_logic'2 p (such_that'1 p))
  
  predicate index_logic'3 (self: Map.map (Map.map t_Element t_Element) bool) (a: Map.map t_Element t_Element) =
    [%#smapping] Map.get self a
  
  function such_that'2 (p: Map.map (Map.map t_Element t_Element) bool) : Map.map t_Element t_Element
  
  axiom such_that_spec'2:
    forall p: Map.map (Map.map t_Element t_Element) bool. ([%#slogic] exists x: Map.map t_Element t_Element. index_logic'3 p x)
      -> ([%#slogic'0] index_logic'3 p (such_that'2 p))
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains'0 [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'9] addr_logic self.t_Element__0
  
  function index_logic'4 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'5 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'6 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant''3 [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'10] (forall e1: t_Element, e2: t_Element. contains'0 (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains'0 (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains'0 (self.t_UnionFind__0).t_UFInner__domain e]. contains'0 (self.t_UnionFind__0).t_UFInner__domain e
      -> contains (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains'0 (self.t_UnionFind__0).t_UFInner__domain (index_logic'4 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'4 (self.t_UnionFind__0).t_UFInner__roots (index_logic'4 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'4 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'4 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains'0 (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'4 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'4 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'4 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'5 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'6 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'6 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'6 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv'6 (_0: t_UFInner)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UFInner [inv'6 x]. inv'6 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'7 (_0: t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_UnionFind [inv'7 x]. inv'7 x
      = (invariant''3 x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'6 a_0
        end)
  
  predicate invariant''4 (self: t_UnionFind) = [%#sghost'5] inv'7 self
  
  predicate inv'8 (_0: t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_UnionFind [inv'8 x]. inv'8 x = invariant''4 x
  
  let rec new'0 (x: t_UnionFind) (return' (x'0: t_UnionFind)) = {[@expl:new 'x' type invariant] [%#sghost'2] inv'7 x}
    any
    [ return''0 (result: t_UnionFind) -> {[%#sghost'3] inv'8 result} {[%#sghost'4] result = x} (! return' {result}) ]
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'8] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'6] inv'7 self)
      -> ([%#sunion_find'7] forall e1: t_Element, e2: t_Element. contains'0 (domain self) e1
          /\ contains'0 (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new'1 [#"union_find.rs" 176 4 176 42] (return' (x: t_UnionFind)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_4 <- [%#sunion_find] Fset.empty: Fset.fset t_Element ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = new (fun (_ret: t_FMap) -> [ &_7 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = into_inner {_7} (fun (_ret: t_FMap) -> [ &_6 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = [ &_8 <- [%#sunion_find'0] such_that'0 (fun (__0: Map.map t_Element t_T) -> true) ] s1 | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_10 <- [%#sunion_find'1] such_that'1 (fun (__0: Map.map t_Element int) -> true) ] s1 | s1 = bb5 ]
    | bb5 = s0
      [ s0 = [ &_12 <- [%#sunion_find'2] such_that'2 (fun (__0: Map.map t_Element t_Element) -> true) ] s1 | s1 = bb6 ]
    | bb6 = s0 [ s0 = [ &_14 <- [%#sunion_find'3] 0 ] s1 | s1 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_3 <- { t_UFInner__domain = _4;
                        t_UFInner__perms = _6;
                        t_UFInner__payloads = _8;
                        t_UFInner__roots = _12;
                        t_UFInner__depth = _10;
                        t_UFInner__max_depth = _14 } ] s1
      | s1 = [ &_2 <- { t_UnionFind__0 = _3 } ] s2
      | s2 = new'0 {_2} (fun (_ret: t_UnionFind) -> [ &_0 <- _ret ] s3)
      | s3 = bb8 ]
    | bb8 = return''0 {_0} ]
    [ & _0: t_UnionFind = Any.any_l ()
    | & _2: t_UnionFind = Any.any_l ()
    | & _3: t_UFInner = Any.any_l ()
    | & _4: Fset.fset t_Element = Any.any_l ()
    | & _6: t_FMap = Any.any_l ()
    | & _7: t_FMap = Any.any_l ()
    | & _8: Map.map t_Element t_T = Any.any_l ()
    | & _10: Map.map t_Element int = Any.any_l ()
    | & _12: Map.map t_Element t_Element = Any.any_l ()
    | & _14: int = Any.any_l () ])
    [ return''0 (result: t_UnionFind) -> {[@expl:new result type invariant] [%#sunion_find'4] inv'8 result}
      {[@expl:new ensures] [%#sunion_find'5] Fset.is_empty (domain result)}
      (! return' {result}) ]
end
module M_union_find__implementation__make [#"union_find.rs" 195 4 195 78]
  let%span sunion_find = "union_find.rs" 196 27 196 45
  let%span sunion_find'0 = "union_find.rs" 205 37 206 73
  let%span sunion_find'1 = "union_find.rs" 214 26 214 60
  let%span sunion_find'2 = "union_find.rs" 215 28 215 76
  let%span sunion_find'3 = "union_find.rs" 216 25 216 72
  let%span sunion_find'4 = "union_find.rs" 217 25 217 60
  let%span sunion_find'5 = "union_find.rs" 195 23 195 25
  let%span sunion_find'6 = "union_find.rs" 195 53 195 60
  let%span sunion_find'7 = "union_find.rs" 191 4 191 37
  let%span sunion_find'8 = "union_find.rs" 192 14 192 58
  let%span sunion_find'9 = "union_find.rs" 193 14 193 69
  let%span sunion_find'10 = "union_find.rs" 194 14 194 76
  let%span sunion_find'11 = "union_find.rs" 103 8 103 16
  let%span sunion_find'12 = "union_find.rs" 25 8 25 16
  let%span sunion_find'13 = "union_find.rs" 96 19 96 28
  let%span sunion_find'14 = "union_find.rs" 97 18 97 150
  let%span sunion_find'15 = "union_find.rs" 95 8 95 16
  let%span sunion_find'16 = "union_find.rs" 114 19 114 28
  let%span sunion_find'17 = "union_find.rs" 115 18 117 42
  let%span sunion_find'18 = "union_find.rs" 113 8 113 16
  let%span sunion_find'19 = "union_find.rs" 134 8 134 16
  let%span sunion_find'20 = "union_find.rs" 73 12 88 53
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 62 8 62 26
  let%span sfset'0 = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 354 22 354 26
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 354 4 354 50
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 353 14 353 55
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 445 29 445 33
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 445 43 445 48
  let%span sfmap'4 = "../../creusot-contracts/src/logic/fmap.rs" 445 4 445 65
  let%span sfmap'5 = "../../creusot-contracts/src/logic/fmap.rs" 443 14 443 49
  let%span sfmap'6 = "../../creusot-contracts/src/logic/fmap.rs" 444 14 444 40
  let%span sfmap'7 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'8 = "../../creusot-contracts/src/logic/fmap.rs" 69 14 69 46
  let%span sfmap'9 = "../../creusot-contracts/src/logic/fmap.rs" 70 14 70 88
  let%span sfmap'10 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span sfmap'11 = "../../creusot-contracts/src/logic/fmap.rs" 61 14 61 25
  let%span sfmap'12 = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'13 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'14 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 764 8 767 9
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 775 8 778 9
  let%span soption'1 = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'2 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 53 15 53 16
  let%span sptr_own'0 = "../../creusot-contracts/src/ghost/ptr_own.rs" 53 4 53 52
  let%span sptr_own'1 = "../../creusot-contracts/src/ghost/ptr_own.rs" 52 14 52 64
  let%span sptr_own'2 = "../../creusot-contracts/src/ghost/ptr_own.rs" 136 26 136 30
  let%span sptr_own'3 = "../../creusot-contracts/src/ghost/ptr_own.rs" 136 48 136 52
  let%span sptr_own'4 = "../../creusot-contracts/src/ghost/ptr_own.rs" 133 14 133 64
  let%span sptr_own'5 = "../../creusot-contracts/src/ghost/ptr_own.rs" 134 14 134 28
  let%span sptr_own'6 = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 205 22 205 26
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 205 4 207 17
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 203 14 203 29
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span speano = "../../creusot-contracts/src/peano.rs" 111 14 111 30
  let%span ssnapshot = "../../creusot-contracts/src/snapshot.rs" 125 14 125 30
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 95 8 95 18
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use set.Fset
  use map.Map
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  let rec new (return' (x: t_PeanoInt)) = any
    [ return''0 (result: t_PeanoInt) -> {[%#speano] result.t_PeanoInt__0 = (0: UInt64.t)} (! return' {result}) ]
  
  type t_T
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type tuple = { _p0: Opaque.ptr; _p1: t_PtrOwn }
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Node)
  
  axiom inv_axiom [@rewrite]: forall x: t_Node [inv'0 x]. inv'0 x
      = match x with
        | C_Root rank payload -> inv payload
        | C_Link a_0 -> true
        end
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate invariant' (self: t_PtrOwn) = [%#sptr_own'6] not is_null_logic (ptr self)
  
  predicate invariant''0 (self: t_Node) = [%#sboxed] inv'0 self
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate inv'2 (_0: t_PtrOwn)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PtrOwn [inv'2 x]. inv'2 x
      = (invariant' x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val'} -> inv'1 val'
        end)
  
  predicate invariant''1 (self: t_PtrOwn) = [%#sghost'4] inv'2 self
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x = invariant''1 x
  
  predicate inv'4 (_0: tuple)
  
  axiom inv_axiom'3 [@rewrite]: forall x: tuple [inv'4 x]. inv'4 x = (let {_p0 = x0; _p1 = x1} = x in inv'3 x1)
  
  function val' (self: t_PtrOwn) : t_Node
  
  let rec new'0 (v: t_Node) (return' (x: tuple)) = {[@expl:new 'v' type invariant] [%#sptr_own] inv'0 v}
    any
    [ return''0 (result: tuple) -> {[%#sptr_own'0] inv'4 result}
      {[%#sptr_own'1] ptr result._p1 = result._p0 /\ val' result._p1 = v}
      (! return' {result}) ]
  
  let rec into_inner (self: t_PtrOwn) (return' (x: t_PtrOwn)) =
    {[@expl:into_inner 'self' type invariant] [%#sghost] inv'3 self}
    any
    [ return''0 (result: t_PtrOwn) -> {[%#sghost'0] inv'2 result} {[%#sghost'1] result = self} (! return' {result}) ]
  
  type t_FMap
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset'0] Fset.mem e self
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'12] addr_logic self.t_Element__0
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'7] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap'12] get self k <> C_None
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'2] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'14] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'13] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant''2 [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'20] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv'5 (_0: t_Element)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Element [inv'5 x]. inv'5 x = true
  
  predicate invariant''3 (self: t_FMap) =
    [%#sfmap'10] forall k: t_Element. contains'0 self k -> inv'5 k /\ inv'2 (index_logic'0 self k)
  
  predicate inv'6 (_0: t_FMap)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_FMap [inv'6 x]. inv'6 x = invariant''3 x
  
  predicate inv'7 (_0: t_UFInner)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_UFInner [inv'7 x]. inv'7 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'6 perms
        end
  
  predicate inv'8 (_0: t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_UnionFind [inv'8 x]. inv'8 x
      = (invariant''2 x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'7 a_0
        end)
  
  predicate invariant''4 (self: MutBorrow.t t_UnionFind) = [%#sinvariant] inv'8 self.current /\ inv'8 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'9 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'8 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'9 x]. inv'9 x = invariant''4 x
  
  predicate invariant''5 (self: MutBorrow.t t_UnionFind) = [%#sghost'4] inv'9 self
  
  predicate inv'10 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'9 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'10 x]. inv'10 x = invariant''5 x
  
  let rec into_inner'0 (self: MutBorrow.t t_UnionFind) (return' (x: MutBorrow.t t_UnionFind)) =
    {[@expl:into_inner 'self' type invariant] [%#sghost] inv'10 self}
    any
    [ return''0 (result: MutBorrow.t t_UnionFind) -> {[%#sghost'0] inv'9 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  type tuple'0 = { _p0'0: t_PtrOwn; _p1'0: MutBorrow.t t_UnionFind }
  
  predicate index_logic'4 (self: Map.map t_Element bool) (a: t_Element) = [%#smapping] Map.get self a
  
  function such_that'0 (p: Map.map t_Element bool) : t_Element
  
  axiom such_that_spec'0: forall p: Map.map t_Element bool. ([%#slogic] exists x: t_Element. index_logic'4 p x)
      -> ([%#slogic'0] index_logic'4 p (such_that'0 p))
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'15] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'13] inv'8 self)
      -> ([%#sunion_find'14] forall e1: t_Element, e2: t_Element. contains (domain self) e1
          /\ contains (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'11] contains (domain self) e
  
  let rec into_ghost (self: Opaque.ptr) (return' (x: Opaque.ptr)) = any
    [ return''0 (result: Opaque.ptr) -> {[%#ssnapshot] result = self} (! return' {result}) ]
  
  let rec into_inner'1 (self: Opaque.ptr) (return' (x: Opaque.ptr)) = any
    [ return''0 (result: Opaque.ptr) -> {[%#sghost'1] result = self} (! return' {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 t_PtrOwn
  
  predicate invariant''6 (self: t_FMap) = [%#sinvariant'0] inv'6 self
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'11 (_0: t_FMap)
  
  axiom inv_axiom'10 [@rewrite]: forall x: t_FMap [inv'11 x]. inv'11 x = invariant''6 x
  
  predicate invariant''7 (self: t_PtrOwn) = [%#sinvariant'0] inv'2 self
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'12 (_0: t_PtrOwn)
  
  axiom inv_axiom'11 [@rewrite]: forall x: t_PtrOwn [inv'12 x]. inv'12 x = invariant''7 x
  
  predicate inv'13 (_0: t_Option'0)
  
  axiom inv_axiom'12 [@rewrite]: forall x: t_Option'0 [inv'13 x]. inv'13 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'12 a_0
        end
  
  function map_logic (self: t_Option) (f: Map.map t_PtrOwn t_PtrOwn) : t_Option'0 = [%#soption] match self with
      | C_None -> C_None'0
      | C_Some x -> C_Some'0 (Map.get f x)
      end
  
  let rec get_ghost (self: t_FMap) (key: t_Element) (return' (x: t_Option'0)) =
    {[@expl:get_ghost 'self' type invariant] [%#sfmap] inv'11 self}
    any
    [ return''0 (result: t_Option'0) -> {[%#sfmap'0] inv'13 result}
      {[%#sfmap'1] result = map_logic (get self key) (fun (v: t_PtrOwn) -> v)}
      (! return' {result}) ]
  
  let rec v_Some (input: t_Option'0) (ret (field_0: t_PtrOwn)) = any
    [ good (field_0: t_PtrOwn) -> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_PtrOwn [C_Some'0 field_0: t_Option'0]. C_Some'0 field_0 <> input} (! {false} any) ]
  
  predicate invariant''8 (self: MutBorrow.t t_PtrOwn) = [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''8
  
  predicate inv'14 (_0: MutBorrow.t t_PtrOwn)
  
  axiom inv_axiom'13 [@rewrite]: forall x: MutBorrow.t t_PtrOwn [inv'14 x]. inv'14 x = invariant''8 x
  
  let rec disjoint_lemma (own1: MutBorrow.t t_PtrOwn) (own2: t_PtrOwn) (return' (x: ())) =
    {[@expl:disjoint_lemma 'own1' type invariant] [%#sptr_own'2] inv'14 own1}
    {[@expl:disjoint_lemma 'own2' type invariant] [%#sptr_own'3] inv'12 own2}
    any
    [ return''0 (result: ()) -> {[%#sptr_own'4] addr_logic (ptr own1.current) <> addr_logic (ptr own2)}
      {[%#sptr_own'5] own1.current = own1.final}
      (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t t_PtrOwn) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t t_PtrOwn) = resolve _0
  
  predicate invariant''9 (self: MutBorrow.t t_FMap) = [%#sinvariant] inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''9
  
  predicate inv'15 (_0: MutBorrow.t t_FMap)
  
  axiom inv_axiom'14 [@rewrite]: forall x: MutBorrow.t t_FMap [inv'15 x]. inv'15 x = invariant''9 x
  
  predicate inv'16 (_0: t_Option)
  
  axiom inv_axiom'15 [@rewrite]: forall x: t_Option [inv'16 x]. inv'16 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'2 a_0
        end
  
  function len (self: t_FMap) : int
  
  axiom len_spec: forall self: t_FMap. [%#sfmap'11] len self >= 0
  
  function insert (self: t_FMap) (k: t_Element) (v: t_PtrOwn) : t_FMap
  
  axiom insert_spec: forall self: t_FMap, k: t_Element, v: t_PtrOwn. [%#sfmap'8] view (insert self k v)
      = Map.set (view self) k (C_Some v)
  
  axiom insert_spec'0: forall self: t_FMap, k: t_Element, v: t_PtrOwn. [%#sfmap'9] len (insert self k v)
      = (if contains'0 self k then len self else len self + 1)
  
  let rec insert_ghost (self: MutBorrow.t t_FMap) (key: t_Element) (value: t_PtrOwn) (return' (x: t_Option)) =
    {[@expl:insert_ghost 'self' type invariant] [%#sfmap'2] inv'15 self}
    {[@expl:insert_ghost 'value' type invariant] [%#sfmap'3] inv'2 value}
    any
    [ return''0 (result: t_Option) -> {[%#sfmap'4] inv'16 result}
      {[%#sfmap'5] self.final = insert self.current key value}
      {[%#sfmap'6] result = get self.current key}
      (! return' {result}) ]
  
  predicate resolve'1 (_0: t_PtrOwn) = true
  
  predicate resolve'2 (self: t_Option) =
    [%#soption'0] match self with
      | C_Some x -> resolve'1 x
      | C_None -> true
      end
  
  predicate resolve'3 (_0: t_Option) = resolve'2 _0
  
  function insert'0 [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) : Fset.fset t_Element =
    [%#sfset] Fset.add e self
  
  predicate resolve'4 (self: MutBorrow.t t_UnionFind) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 (_0: MutBorrow.t t_UnionFind) = resolve'4 _0
  
  let rec new'1 (x: ()) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sghost'2] result = x} (! return' {result}) ]
  
  function fin (self: MutBorrow.t t_UnionFind) : t_UnionFind = [%#sghost'3] self.final
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self: t_UnionFind) : Map.map t_Element t_Element =
    [%#sunion_find'18] (self.t_UnionFind__0).t_UFInner__roots
  
  axiom roots_map_spec: forall self: t_UnionFind. ([%#sunion_find'16] inv'8 self)
      -> ([%#sunion_find'17] forall e: t_Element. in_domain self e
        -> in_domain self (index_logic'1 (roots_map self) e)
        /\ index_logic'1 (roots_map self) e = index_logic'1 (roots_map self) (index_logic'1 (roots_map self) e))
  
  function payloads_map [#"union_find.rs" 135 8 135 59] (self: t_UnionFind) : Map.map t_Element t_T =
    [%#sunion_find'19] (self.t_UnionFind__0).t_UFInner__payloads
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec make [#"union_find.rs" 195 4 195 78] (uf: MutBorrow.t t_UnionFind) (payload: t_T) (return' (x: t_Element)) =
    {[@expl:make 'uf' type invariant] [%#sunion_find'5] inv'10 uf}
    {[@expl:make 'payload' type invariant] [%#sunion_find'6] inv payload}
    (! bb0
    [ bb0 = s0 [ s0 = [ &payload_snap <- [%#sunion_find] payload'0 ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = new (fun (_ret: t_PeanoInt) -> [ &_13 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_12 <- C_Root _13 payload'0 ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = new'0 {_12} (fun (_ret: tuple) -> [ &_11 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &ptr'0 <- _11._p0 ] s1
      | s1 = [ &perm <- _11._p1 ] s2
      | s2 = [ &elt <- { t_Element__0 = ptr'0 } ] s3
      | s3 = into_inner {perm} (fun (_ret: t_PtrOwn) -> [ &_22 <- _ret ] s4)
      | s4 = bb5 ]
    | bb5 = s0 [ s0 = into_inner'0 {uf'0} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_24 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0 [ s0 = [ &_21 <- { _p0'0 = _22; _p1'0 = _24 } ] s1 | s1 = bb7 ]
    | bb7 = s0 [ s0 = [ &perm'0 <- _21._p0'0 ] s1 | s1 = [ &uf'1 <- _21._p1'0 ] s2 | s2 = bb8 ]
    | bb8 = s0
      [ s0 = [ &other_elt_ptr_snap <- [%#sunion_find'0] (such_that'0 (fun (e: t_Element) -> in_domain uf'1.current e
        /\ deep_model e = deep_model elt)).t_Element__0 ] s1
      | s1 = bb9 ]
    | bb9 = s0 [ s0 = into_ghost {other_elt_ptr_snap} (fun (_ret: Opaque.ptr) -> [ &_30 <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0 [ s0 = into_inner'1 {_30} (fun (_ret: Opaque.ptr) -> [ &_29 <- _ret ] s1) | s1 = bb11 ]
    | bb11 = s0
      [ s0 = [ &other_elt <- { t_Element__0 = _29 } ] s1
      | s1 = [ &_36 <- other_elt ] s2
      | s2 = get_ghost {((uf'1.current).t_UnionFind__0).t_UFInner__perms} {_36}
          (fun (_ret: t_Option'0) -> [ &_33 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = any [ br0 -> {_33 = C_None'0} (! bb18) | br1 (x0: t_PtrOwn) -> {_33 = C_Some'0 x0} (! bb15) ]
    | bb15 = s0
      [ s0 = v_Some {_33} (fun (r0: t_PtrOwn) -> [ &other_perm <- r0 ] s1)
      | s1 = {inv'2 perm'0}
        MutBorrow.borrow_mut <t_PtrOwn> {perm'0}
          (fun (_ret: MutBorrow.t t_PtrOwn) -> [ &_40 <- _ret ] -{inv'2 _ret.final}- [ &perm'0 <- _ret.final ] s2)
      | s2 = {inv'2 _40.current}
        MutBorrow.borrow_final <t_PtrOwn> {_40.current} {MutBorrow.get_id _40}
          (fun (_ret: MutBorrow.t t_PtrOwn) ->
            [ &_39 <- _ret ] -{inv'2 _ret.final}-
            [ &_40 <- { _40 with current = _ret.final } ] s3)
      | s3 = disjoint_lemma {_39} {other_perm} (fun (_ret: ()) -> [ &_32 <- _ret ] s4)
      | s4 = bb17 ]
    | bb17 = s0 [ s0 = {[@expl:type invariant] inv'14 _40} s1 | s1 = -{resolve'0 _40}- s2 | s2 = bb18 ]
    | bb18 = s0
      [ s0 = {inv'6 ((uf'1.current).t_UnionFind__0).t_UFInner__perms}
        MutBorrow.borrow_final <t_FMap> {((uf'1.current).t_UnionFind__0).t_UFInner__perms}
          {MutBorrow.inherit_id (MutBorrow.inherit_id (MutBorrow.get_id uf'1) 1) 2}
          (fun (_ret: MutBorrow.t t_FMap) ->
            [ &_43 <- _ret ] -{inv'6 _ret.final}-
            [ &uf'1 <- { uf'1 with current = { t_UnionFind__0 = { (uf'1.current).t_UnionFind__0 with t_UFInner__perms = _ret.final } } } ]
            s1)
      | s1 = insert_ghost {_43} {elt} {perm'0} (fun (_ret: t_Option) -> [ &_42 <- _ret ] s2)
      | s2 = {[@expl:type invariant] inv'16 _42} s3
      | s3 = -{resolve'3 _42}- s4
      | s4 = bb20 ]
    | bb20 = s0
      [ s0 = [ &_46 <- [%#sunion_find'1] insert'0 ((uf'1.current).t_UnionFind__0).t_UFInner__domain elt ] s1
      | s1 = bb21 ]
    | bb21 = s0
      [ s0 =
        [ &uf'1 <- { uf'1 with current = { t_UnionFind__0 = { (uf'1.current).t_UnionFind__0 with t_UFInner__domain = _46 } } } ]
        s1
      | s1 = [ &_48 <- [%#sunion_find'2] Map.set ((uf'1.current).t_UnionFind__0).t_UFInner__payloads elt payload_snap ]
        s2
      | s2 = bb22 ]
    | bb22 = s0
      [ s0 =
        [ &uf'1 <- { uf'1 with current = { t_UnionFind__0 = { (uf'1.current).t_UnionFind__0 with t_UFInner__payloads = _48 } } } ]
        s1
      | s1 =
        [ &_50 <- [%#sunion_find'3] Map.set ((uf'1.current).t_UnionFind__0).t_UFInner__depth elt ((uf'1.current).t_UnionFind__0).t_UFInner__max_depth ]
        s2
      | s2 = bb23 ]
    | bb23 = s0
      [ s0 =
        [ &uf'1 <- { uf'1 with current = { t_UnionFind__0 = { (uf'1.current).t_UnionFind__0 with t_UFInner__depth = _50 } } } ]
        s1
      | s1 = [ &_52 <- [%#sunion_find'4] Map.set ((uf'1.current).t_UnionFind__0).t_UFInner__roots elt elt ] s2
      | s2 = bb24 ]
    | bb24 = s0
      [ s0 =
        [ &uf'1 <- { uf'1 with current = { t_UnionFind__0 = { (uf'1.current).t_UnionFind__0 with t_UFInner__roots = _52 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv'9 uf'1} s2
      | s2 = -{resolve'5 uf'1}- s3
      | s3 = bb25 ]
    | bb25 = s0 [ s0 = new'1 {_18} (fun (_ret: ()) -> [ &_17 <- _ret ] s1) | s1 = bb26 ]
    | bb26 = s0 [ s0 = [ &_0 <- elt ] s1 | s1 = bb27 ]
    | bb27 = return''0 {_0} ]
    [ & _0: t_Element = Any.any_l ()
    | & uf'0: MutBorrow.t t_UnionFind = uf
    | & payload'0: t_T = payload
    | & payload_snap: t_T = Any.any_l ()
    | & ptr'0: Opaque.ptr = Any.any_l ()
    | & perm: t_PtrOwn = Any.any_l ()
    | & _11: tuple = Any.any_l ()
    | & _12: t_Node = Any.any_l ()
    | & _13: t_PeanoInt = Any.any_l ()
    | & elt: t_Element = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _18: () = Any.any_l ()
    | & perm'0: t_PtrOwn = Any.any_l ()
    | & uf'1: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _21: tuple'0 = Any.any_l ()
    | & _22: t_PtrOwn = Any.any_l ()
    | & _24: MutBorrow.t t_UnionFind = Any.any_l ()
    | & other_elt_ptr_snap: Opaque.ptr = Any.any_l ()
    | & other_elt: t_Element = Any.any_l ()
    | & _29: Opaque.ptr = Any.any_l ()
    | & _30: Opaque.ptr = Any.any_l ()
    | & _32: () = Any.any_l ()
    | & _33: t_Option'0 = Any.any_l ()
    | & _36: t_Element = Any.any_l ()
    | & other_perm: t_PtrOwn = Any.any_l ()
    | & _39: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _40: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _42: t_Option = Any.any_l ()
    | & _43: MutBorrow.t t_FMap = Any.any_l ()
    | & _46: Fset.fset t_Element = Any.any_l ()
    | & _48: Map.map t_Element t_T = Any.any_l ()
    | & _50: Map.map t_Element int = Any.any_l ()
    | & _52: Map.map t_Element t_Element = Any.any_l () ])
    [ return''0 (result: t_Element) -> {[@expl:make ensures #0] [%#sunion_find'7] not in_domain uf.current result}
      {[@expl:make ensures #1] [%#sunion_find'8] domain (fin uf) = insert'0 (domain uf.current) result}
      {[@expl:make ensures #2] [%#sunion_find'9] roots_map (fin uf) = Map.set (roots_map uf.current) result result}
      {[@expl:make ensures #3] [%#sunion_find'10] payloads_map (fin uf)
      = Map.set (payloads_map uf.current) result payload}
      (! return' {result}) ]
end
module M_union_find__implementation__find_inner [#"union_find.rs" 229 4 229 86]
  let%span sunion_find = "union_find.rs" 237 30 237 61
  let%span sunion_find'0 = "union_find.rs" 229 25 229 27
  let%span sunion_find'1 = "union_find.rs" 223 4 223 35
  let%span sunion_find'2 = "union_find.rs" 224 14 224 37
  let%span sunion_find'3 = "union_find.rs" 225 4 225 30
  let%span sunion_find'4 = "union_find.rs" 227 14 227 41
  let%span sunion_find'5 = "union_find.rs" 228 14 228 52
  let%span sunion_find'6 = "union_find.rs" 103 8 103 16
  let%span sunion_find'7 = "union_find.rs" 127 8 127 16
  let%span sunion_find'8 = "union_find.rs" 154 16 156 64
  let%span sunion_find'9 = "union_find.rs" 96 19 96 28
  let%span sunion_find'10 = "union_find.rs" 97 18 97 150
  let%span sunion_find'11 = "union_find.rs" 95 8 95 16
  let%span sunion_find'12 = "union_find.rs" 114 19 114 28
  let%span sunion_find'13 = "union_find.rs" 115 18 117 42
  let%span sunion_find'14 = "union_find.rs" 113 8 113 16
  let%span sunion_find'15 = "union_find.rs" 134 8 134 16
  let%span sunion_find'16 = "union_find.rs" 73 12 88 53
  let%span sunion_find'17 = "union_find.rs" 25 8 25 16
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 354 22 354 26
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 354 4 354 50
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 353 14 353 55
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 387 30 387 34
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 387 4 387 62
  let%span sfmap'4 = "../../creusot-contracts/src/logic/fmap.rs" 376 14 384 9
  let%span sfmap'5 = "../../creusot-contracts/src/logic/fmap.rs" 385 14 385 73
  let%span sfmap'6 = "../../creusot-contracts/src/logic/fmap.rs" 386 14 386 44
  let%span sfmap'7 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'8 = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'9 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'10 = "../../creusot-contracts/src/logic/fmap.rs" 61 14 61 25
  let%span sfmap'11 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span sfmap'12 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 145 16 145 17
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 146 27 146 39
  let%span soption'1 = "../../creusot-contracts/src/std/option.rs" 147 26 147 46
  let%span soption'2 = "../../creusot-contracts/src/std/option.rs" 764 8 767 9
  let%span soption'3 = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'4 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 79 40 79 43
  let%span sptr_own'0 = "../../creusot-contracts/src/ghost/ptr_own.rs" 76 15 76 31
  let%span sptr_own'1 = "../../creusot-contracts/src/ghost/ptr_own.rs" 79 4 79 69
  let%span sptr_own'2 = "../../creusot-contracts/src/ghost/ptr_own.rs" 77 14 77 35
  let%span sptr_own'3 = "../../creusot-contracts/src/ghost/ptr_own.rs" 97 40 97 43
  let%span sptr_own'4 = "../../creusot-contracts/src/ghost/ptr_own.rs" 93 15 93 31
  let%span sptr_own'5 = "../../creusot-contracts/src/ghost/ptr_own.rs" 97 4 97 77
  let%span sptr_own'6 = "../../creusot-contracts/src/ghost/ptr_own.rs" 94 14 94 35
  let%span sptr_own'7 = "../../creusot-contracts/src/ghost/ptr_own.rs" 95 14 95 39
  let%span sptr_own'8 = "../../creusot-contracts/src/ghost/ptr_own.rs" 96 14 96 38
  let%span sptr_own'9 = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 78 14 78 18
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 78 4 78 36
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 77 14 77 31
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 183 15 183 16
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 183 4 185 17
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 89 22 89 26
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 89 4 89 48
  let%span sghost'7 = "../../creusot-contracts/src/ghost.rs" 88 14 88 35
  let%span sghost'8 = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'9 = "../../creusot-contracts/src/ghost.rs" 127 8 127 22
  let%span sghost'10 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 95 8 95 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use set.Fset
  use map.Map
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'17] addr_logic self.t_Element__0
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'7] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap'8] get self k <> C_None
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'4] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'12] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'9] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'16] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own'9] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> inv'2 val''0
        end)
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap'11] forall k: t_Element. contains'0 self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  predicate invariant''3 (self: MutBorrow.t t_UnionFind) = [%#sinvariant] inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate invariant''4 (self: MutBorrow.t t_UnionFind) = [%#sghost'10] inv'7 self
  
  predicate inv'8 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'8 x]. inv'8 x = invariant''4 x
  
  predicate invariant''5 (self: MutBorrow.t t_UnionFind) = [%#sinvariant'0] inv'8 self
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'9 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'8 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'9 x]. inv'9 x = invariant''5 x
  
  predicate invariant''6 (self: MutBorrow.t t_UnionFind) = [%#sinvariant'0] inv'7 self
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'10 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'9 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'10 x]. inv'10 x = invariant''6 x
  
  let rec deref (self: MutBorrow.t t_UnionFind) (return' (x: MutBorrow.t t_UnionFind)) =
    {[@expl:deref 'self' type invariant] [%#sghost] inv'9 self}
    any
    [ return''0 (result: MutBorrow.t t_UnionFind) -> {[%#sghost'0] inv'10 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 t_PtrOwn
  
  predicate invariant''7 (self: t_FMap) = [%#sinvariant'0] inv'4 self
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'11 (_0: t_FMap)
  
  axiom inv_axiom'10 [@rewrite]: forall x: t_FMap [inv'11 x]. inv'11 x = invariant''7 x
  
  predicate invariant''8 (self: t_PtrOwn) = [%#sinvariant'0] inv'3 self
  
  meta "rewrite_def" predicate invariant''8
  
  predicate inv'12 (_0: t_PtrOwn)
  
  axiom inv_axiom'11 [@rewrite]: forall x: t_PtrOwn [inv'12 x]. inv'12 x = invariant''8 x
  
  predicate inv'13 (_0: t_Option'0)
  
  axiom inv_axiom'12 [@rewrite]: forall x: t_Option'0 [inv'13 x]. inv'13 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'12 a_0
        end
  
  function map_logic (self: t_Option) (f: Map.map t_PtrOwn t_PtrOwn) : t_Option'0 = [%#soption'2] match self with
      | C_None -> C_None'0
      | C_Some x -> C_Some'0 (Map.get f x)
      end
  
  let rec get_ghost (self: t_FMap) (key: t_Element) (return' (x: t_Option'0)) =
    {[@expl:get_ghost 'self' type invariant] [%#sfmap] inv'11 self}
    any
    [ return''0 (result: t_Option'0) -> {[%#sfmap'0] inv'13 result}
      {[%#sfmap'1] result = map_logic (get self key) (fun (v: t_PtrOwn) -> v)}
      (! return' {result}) ]
  
  let rec unwrap (self_: t_Option'0) (return' (x: t_PtrOwn)) =
    {[@expl:unwrap 'self_' type invariant] [%#soption] inv'13 self_}
    {[@expl:unwrap requires] [%#soption'0] self_ <> C_None'0}
    any [ return''0 (result: t_PtrOwn) -> {inv'12 result} {[%#soption'1] C_Some'0 result = self_} (! return' {result}) ]
  
  predicate invariant''9 (self: t_PtrOwn) = [%#sghost'10] inv'12 self
  
  predicate inv'14 (_0: t_PtrOwn)
  
  axiom inv_axiom'13 [@rewrite]: forall x: t_PtrOwn [inv'14 x]. inv'14 x = invariant''9 x
  
  let rec new (x: t_PtrOwn) (return' (x'0: t_PtrOwn)) = {[@expl:new 'x' type invariant] [%#sghost'2] inv'12 x}
    any [ return''0 (result: t_PtrOwn) -> {[%#sghost'3] inv'14 result} {[%#sghost'4] result = x} (! return' {result}) ]
  
  predicate invariant''10 (self: t_Node) = [%#sinvariant'0] inv'1 self
  
  meta "rewrite_def" predicate invariant''10
  
  predicate inv'15 (_0: t_Node)
  
  axiom inv_axiom'14 [@rewrite]: forall x: t_Node [inv'15 x]. inv'15 x = invariant''10 x
  
  let rec as_ref (ptr'0: Opaque.ptr) (own: t_PtrOwn) (return' (x: t_Node)) =
    {[@expl:as_ref 'own' type invariant] [%#sptr_own] inv'14 own}
    {[@expl:as_ref requires] [%#sptr_own'0] ptr'0 = ptr own}
    any
    [ return''0 (result: t_Node) -> {[%#sptr_own'1] inv'15 result}
      {[%#sptr_own'2] result = val' own}
      (! return' {result}) ]
  
  let rec v_Link (input: t_Node) (ret (field_0: t_Element)) = any
    [ good (field_0: t_Element) -> {C_Link field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Element [C_Link field_0: t_Node]. C_Link field_0 <> input} (! {false} any) ]
  
  predicate invariant''11 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) =
    [%#sinvariant] inv'8 self.current /\ inv'8 self.final
  
  meta "rewrite_def" predicate invariant''11
  
  predicate inv'16 (_0: MutBorrow.t (MutBorrow.t t_UnionFind))
  
  axiom inv_axiom'15 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UnionFind) [inv'16 x]. inv'16 x = invariant''11 x
  
  predicate invariant''12 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) =
    [%#sinvariant] inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''12
  
  predicate inv'17 (_0: MutBorrow.t (MutBorrow.t t_UnionFind))
  
  axiom inv_axiom'16 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UnionFind) [inv'17 x]. inv'17 x = invariant''12 x
  
  let rec deref_mut (self: MutBorrow.t (MutBorrow.t t_UnionFind)) (return' (x: MutBorrow.t (MutBorrow.t t_UnionFind))) =
    {[@expl:deref_mut 'self' type invariant] [%#sghost'5] inv'16 self}
    any
    [ return''0 (result: MutBorrow.t (MutBorrow.t t_UnionFind)) -> {[%#sghost'6] inv'17 result}
      {[%#sghost'7] result = self}
      (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t (MutBorrow.t t_UnionFind)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t (MutBorrow.t t_UnionFind)) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_UnionFind) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: MutBorrow.t t_UnionFind) = resolve'1 _0
  
  let rec new'0 (x: MutBorrow.t t_UnionFind) (return' (x'0: MutBorrow.t t_UnionFind)) =
    {[@expl:new 'x' type invariant] [%#sghost'2] inv'7 x}
    any
    [ return''0 (result: MutBorrow.t t_UnionFind) -> {[%#sghost'3] inv'8 result}
      {[%#sghost'4] result = x}
      (! return' {result}) ]
  
  predicate invariant''13 (self: MutBorrow.t t_UFInner) = [%#sinvariant] inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''13
  
  predicate inv'18 (_0: MutBorrow.t t_UFInner)
  
  axiom inv_axiom'17 [@rewrite]: forall x: MutBorrow.t t_UFInner [inv'18 x]. inv'18 x = invariant''13 x
  
  predicate invariant''14 (self: MutBorrow.t t_UFInner) = [%#sghost'10] inv'18 self
  
  predicate inv'19 (_0: MutBorrow.t t_UFInner)
  
  axiom inv_axiom'18 [@rewrite]: forall x: MutBorrow.t t_UFInner [inv'19 x]. inv'19 x = invariant''14 x
  
  let rec new'1 (x: MutBorrow.t t_UFInner) (return' (x'0: MutBorrow.t t_UFInner)) =
    {[@expl:new 'x' type invariant] [%#sghost'2] inv'18 x}
    any
    [ return''0 (result: MutBorrow.t t_UFInner) -> {[%#sghost'3] inv'19 result}
      {[%#sghost'4] result = x}
      (! return' {result}) ]
  
  predicate invariant''15 (self: MutBorrow.t (MutBorrow.t t_UFInner)) =
    [%#sinvariant] inv'19 self.current /\ inv'19 self.final
  
  meta "rewrite_def" predicate invariant''15
  
  predicate inv'20 (_0: MutBorrow.t (MutBorrow.t t_UFInner))
  
  axiom inv_axiom'19 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UFInner) [inv'20 x]. inv'20 x = invariant''15 x
  
  predicate invariant''16 (self: MutBorrow.t (MutBorrow.t t_UFInner)) =
    [%#sinvariant] inv'18 self.current /\ inv'18 self.final
  
  meta "rewrite_def" predicate invariant''16
  
  predicate inv'21 (_0: MutBorrow.t (MutBorrow.t t_UFInner))
  
  axiom inv_axiom'20 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UFInner) [inv'21 x]. inv'21 x = invariant''16 x
  
  let rec deref_mut'0 (self: MutBorrow.t (MutBorrow.t t_UFInner)) (return' (x: MutBorrow.t (MutBorrow.t t_UFInner))) =
    {[@expl:deref_mut 'self' type invariant] [%#sghost'5] inv'20 self}
    any
    [ return''0 (result: MutBorrow.t (MutBorrow.t t_UFInner)) -> {[%#sghost'6] inv'21 result}
      {[%#sghost'7] result = self}
      (! return' {result}) ]
  
  type t_Option'1 = C_None'1 | C_Some'1 (MutBorrow.t t_PtrOwn)
  
  predicate invariant''17 (self: MutBorrow.t t_FMap) = [%#sinvariant] inv'4 self.current /\ inv'4 self.final
  
  meta "rewrite_def" predicate invariant''17
  
  predicate inv'22 (_0: MutBorrow.t t_FMap)
  
  axiom inv_axiom'21 [@rewrite]: forall x: MutBorrow.t t_FMap [inv'22 x]. inv'22 x = invariant''17 x
  
  predicate invariant''18 (self: MutBorrow.t t_PtrOwn) = [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''18
  
  predicate inv'23 (_0: MutBorrow.t t_PtrOwn)
  
  axiom inv_axiom'22 [@rewrite]: forall x: MutBorrow.t t_PtrOwn [inv'23 x]. inv'23 x = invariant''18 x
  
  predicate inv'24 (_0: t_Option'1)
  
  axiom inv_axiom'23 [@rewrite]: forall x: t_Option'1 [inv'24 x]. inv'24 x
      = match x with
        | C_None'1 -> true
        | C_Some'1 a_0 -> inv'23 a_0
        end
  
  function len (self: t_FMap) : int
  
  axiom len_spec: forall self: t_FMap. [%#sfmap'10] len self >= 0
  
  let rec get_mut_ghost (self: MutBorrow.t t_FMap) (key: t_Element) (return' (x: t_Option'1)) =
    {[@expl:get_mut_ghost 'self' type invariant] [%#sfmap'2] inv'22 self}
    any
    [ return''0 (result: t_Option'1) -> {[%#sfmap'3] inv'24 result}
      {[%#sfmap'4] if contains'0 self.current key then
        match result with
          | C_None'1 -> false
          | C_Some'1 r -> contains'0 self.final key
          /\ index_logic'0 self.current key = r.current /\ index_logic'0 self.final key = r.final
          end
      else
        result = C_None'1 /\ self.current = self.final
      }
      {[%#sfmap'5] forall k: t_Element. k <> key -> get self.current k = get self.final k}
      {[%#sfmap'6] len self.current = len self.final}
      (! return' {result}) ]
  
  let rec unwrap'0 (self_: t_Option'1) (return' (x: MutBorrow.t t_PtrOwn)) =
    {[@expl:unwrap 'self_' type invariant] [%#soption] inv'24 self_}
    {[@expl:unwrap requires] [%#soption'0] self_ <> C_None'1}
    any
    [ return''0 (result: MutBorrow.t t_PtrOwn) -> {inv'23 result}
      {[%#soption'1] C_Some'1 result = self_}
      (! return' {result}) ]
  
  predicate resolve'3 (self: MutBorrow.t (MutBorrow.t t_UFInner)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 (_0: MutBorrow.t (MutBorrow.t t_UFInner)) = resolve'3 _0
  
  predicate invariant''19 (self: MutBorrow.t t_PtrOwn) = [%#sghost'10] inv'23 self
  
  predicate inv'25 (_0: MutBorrow.t t_PtrOwn)
  
  axiom inv_axiom'24 [@rewrite]: forall x: MutBorrow.t t_PtrOwn [inv'25 x]. inv'25 x = invariant''19 x
  
  let rec new'2 (x: MutBorrow.t t_PtrOwn) (return' (x'0: MutBorrow.t t_PtrOwn)) =
    {[@expl:new 'x' type invariant] [%#sghost'2] inv'23 x}
    any
    [ return''0 (result: MutBorrow.t t_PtrOwn) -> {[%#sghost'3] inv'25 result}
      {[%#sghost'4] result = x}
      (! return' {result}) ]
  
  predicate resolve'5 (self: MutBorrow.t t_PtrOwn) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 (_0: MutBorrow.t t_PtrOwn) = resolve'5 _0
  
  predicate invariant''20 (self: MutBorrow.t t_Node) = [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''20
  
  predicate inv'26 (_0: MutBorrow.t t_Node)
  
  axiom inv_axiom'25 [@rewrite]: forall x: MutBorrow.t t_Node [inv'26 x]. inv'26 x = invariant''20 x
  
  function fin (self: MutBorrow.t t_PtrOwn) : t_PtrOwn = [%#sghost'8] self.final
  
  let rec as_mut (ptr'0: Opaque.ptr) (own: MutBorrow.t t_PtrOwn) (return' (x: MutBorrow.t t_Node)) =
    {[@expl:as_mut 'own' type invariant] [%#sptr_own'3] inv'25 own}
    {[@expl:as_mut requires] [%#sptr_own'4] ptr'0 = ptr own.current}
    any
    [ return''0 (result: MutBorrow.t t_Node) -> {[%#sptr_own'5] inv'26 result}
      {[%#sptr_own'6] result.current = val' own.current}
      {[%#sptr_own'7] ptr (fin own) = ptr own.current}
      {[%#sptr_own'8] val' (fin own) = result.final}
      (! return' {result}) ]
  
  predicate resolve'7 (self: MutBorrow.t t_Node) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'7
  
  predicate resolve'8 (_0: MutBorrow.t t_Node) = resolve'7 _0
  
  predicate resolve'9 (self: MutBorrow.t t_UFInner) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'9
  
  predicate resolve'10 (_0: MutBorrow.t t_UFInner) = resolve'9 _0
  
  predicate resolve'11 (self: MutBorrow.t t_UFInner) = [%#sghost'9] resolve'10 self
  
  predicate resolve'12 (_0: MutBorrow.t t_UFInner) = resolve'11 _0
  
  predicate resolve'13 (self: MutBorrow.t t_UnionFind) = [%#sghost'9] resolve'2 self
  
  predicate resolve'14 (_0: MutBorrow.t t_UnionFind) = resolve'13 _0
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'11] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'9] inv'6 self)
      -> ([%#sunion_find'10] forall e1: t_Element, e2: t_Element. contains (domain self) e1
          /\ contains (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'6] contains (domain self) e
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self: t_UnionFind) : Map.map t_Element t_Element =
    [%#sunion_find'14] (self.t_UnionFind__0).t_UFInner__roots
  
  axiom roots_map_spec: forall self: t_UnionFind. ([%#sunion_find'12] inv'6 self)
      -> ([%#sunion_find'13] forall e: t_Element. in_domain self e
        -> in_domain self (index_logic'1 (roots_map self) e)
        /\ index_logic'1 (roots_map self) e = index_logic'1 (roots_map self) (index_logic'1 (roots_map self) e))
  
  function root [#"union_find.rs" 129 8 129 54] (self: t_UnionFind) (e: t_Element) : t_Element =
    [%#sunion_find'7] index_logic'1 (roots_map self) e
  
  function payloads_map [#"union_find.rs" 135 8 135 59] (self: t_UnionFind) : Map.map t_Element t_T =
    [%#sunion_find'15] (self.t_UnionFind__0).t_UFInner__payloads
  
  predicate unchanged [#"union_find.rs" 152 8 152 43] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'8] domain self.current = domain self.final
    /\ roots_map self.current = roots_map self.final /\ payloads_map self.current = payloads_map self.final
  
  function fin'0 (self: MutBorrow.t t_UnionFind) : t_UnionFind = [%#sghost'8] self.final
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec find_inner [#"union_find.rs" 229 4 229 86] (uf: MutBorrow.t t_UnionFind) (elem: t_Element)
    (return' (x: t_Element)) = {[@expl:find_inner 'uf' type invariant] [%#sunion_find'0] inv'8 uf}
    {[@expl:find_inner requires] [%#sunion_find'1] in_domain uf.current elem}
    (! bb0
    [ bb0 = s0 [ s0 = deref {uf'0} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_12 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_15 <- elem'0 ] s1
      | s1 = get_ghost {((_12.current).t_UnionFind__0).t_UFInner__perms} {_15}
          (fun (_ret: t_Option'0) -> [ &_10 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = unwrap {_10} (fun (_ret: t_PtrOwn) -> [ &_9 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = new {_9} (fun (_ret: t_PtrOwn) -> [ &perm <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = as_ref {elem'0.t_Element__0} {perm} (fun (_ret: t_Node) -> [ &_16 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = any
      [ br0 (x0: t_PeanoInt) (x1: t_T) -> {_16 = C_Root x0 x1} (! bb9)
      | br1 (x0: t_Element) -> {_16 = C_Link x0} (! bb8) ]
    | bb8 = s0
      [ s0 = v_Link {_16} (fun (r0: t_Element) -> [ &e <- r0 ] s1)
      | s1 = {inv'8 uf'0}
        MutBorrow.borrow_mut <MutBorrow.t t_UnionFind> {uf'0}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) ->
            [ &_27 <- _ret ] -{inv'8 _ret.final}-
            [ &uf'0 <- _ret.final ] s2)
      | s2 = deref_mut {_27} (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) -> [ &_26 <- _ret ] s3)
      | s3 = bb10 ]
    | bb10 = s0
      [ s0 = {inv'6 (_26.current).current}
        MutBorrow.borrow_mut <t_UnionFind> {(_26.current).current}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_25 <- _ret ] -{inv'6 _ret.final}-
            [ &_26 <- { _26 with current = { _26.current with current = _ret.final } } ] s1)
      | s1 = {inv'6 _25.current}
        MutBorrow.borrow_final <t_UnionFind> {_25.current} {MutBorrow.get_id _25}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_24 <- _ret ] -{inv'6 _ret.final}-
            [ &_25 <- { _25 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv'17 _26} s3
      | s3 = -{resolve'0 _26}- s4
      | s4 = {[@expl:type invariant] inv'7 _25} s5
      | s5 = -{resolve'2 _25}- s6
      | s6 = {inv'6 _24.current}
        MutBorrow.borrow_final <t_UnionFind> {_24.current} {MutBorrow.get_id _24}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_23 <- _ret ] -{inv'6 _ret.final}-
            [ &_24 <- { _24 with current = _ret.final } ] s7)
      | s7 = new'0 {_23} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_22 <- _ret ] s8)
      | s8 = bb11 ]
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv'7 _24} s1
      | s1 = -{resolve'2 _24}- s2
      | s2 = find_inner {_22} {e} (fun (_ret: t_Element) -> [ &root'0 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = s0
      [ s0 = {inv'8 uf'0}
        MutBorrow.borrow_mut <MutBorrow.t t_UnionFind> {uf'0}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) ->
            [ &_31 <- _ret ] -{inv'8 _ret.final}-
            [ &uf'0 <- _ret.final ] s1)
      | s1 = deref_mut {_31} (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) -> [ &_30 <- _ret ] s2)
      | s2 = bb13 ]
    | bb13 = s0
      [ s0 = {inv'5 ((_30.current).current).t_UnionFind__0}
        MutBorrow.borrow_mut <t_UFInner> {((_30.current).current).t_UnionFind__0}
          (fun (_ret: MutBorrow.t t_UFInner) ->
            [ &__temp <- _ret ] -{inv'5 _ret.final}-
            [ &_30 <- { _30 with current = { _30.current with current = { t_UnionFind__0 = _ret.final } } } ] s1)
      | s1 = new'1 {__temp} (fun (_ret: MutBorrow.t t_UFInner) -> [ &uf'1 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = s0
      [ s0 = {[@expl:assertion] [%#sunion_find] index_logic'3 (uf'1.current).t_UFInner__depth elem'0
        < index_logic'3 (uf'1.current).t_UFInner__depth root'0}
        s1
      | s1 = {inv'19 uf'1}
        MutBorrow.borrow_mut <MutBorrow.t t_UFInner> {uf'1}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) ->
            [ &_42 <- _ret ] -{inv'19 _ret.final}-
            [ &uf'1 <- _ret.final ] s2)
      | s2 = deref_mut'0 {_42} (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) -> [ &_41 <- _ret ] s3)
      | s3 = bb15 ]
    | bb15 = s0
      [ s0 = [ &_44 <- elem'0 ] s1
      | s1 = {inv'4 ((_41.current).current).t_UFInner__perms}
        MutBorrow.borrow_mut <t_FMap> {((_41.current).current).t_UFInner__perms}
          (fun (_ret: MutBorrow.t t_FMap) ->
            [ &_40 <- _ret ] -{inv'4 _ret.final}-
            [ &_41 <- { _41 with current = { _41.current with current = { (_41.current).current with t_UFInner__perms = _ret.final } } } ]
            s2)
      | s2 = get_mut_ghost {_40} {_44} (fun (_ret: t_Option'1) -> [ &_39 <- _ret ] s3)
      | s3 = bb16 ]
    | bb16 = s0 [ s0 = unwrap'0 {_39} (fun (_ret: MutBorrow.t t_PtrOwn) -> [ &_38 <- _ret ] s1) | s1 = bb17 ]
    | bb17 = s0
      [ s0 = {[@expl:type invariant] inv'21 _41} s1
      | s1 = -{resolve'4 _41}- s2
      | s2 = {inv'3 _38.current}
        MutBorrow.borrow_final <t_PtrOwn> {_38.current} {MutBorrow.get_id _38}
          (fun (_ret: MutBorrow.t t_PtrOwn) ->
            [ &_37 <- _ret ] -{inv'3 _ret.final}-
            [ &_38 <- { _38 with current = _ret.final } ] s3)
      | s3 = new'2 {_37} (fun (_ret: MutBorrow.t t_PtrOwn) -> [ &mut_perm <- _ret ] s4)
      | s4 = bb18 ]
    | bb18 = s0
      [ s0 = {[@expl:type invariant] inv'23 _38} s1
      | s1 = -{resolve'6 _38}- s2
      | s2 = [ &_46 <- C_Link root'0 ] s3
      | s3 = as_mut {elem'0.t_Element__0} {mut_perm} (fun (_ret: MutBorrow.t t_Node) -> [ &_48 <- _ret ] s4)
      | s4 = bb20 ]
    | bb20 = s0
      [ s0 = {[@expl:type invariant] inv'1 _48.current} s1
      | s1 = [ &_48 <- { _48 with current = _46 } ] s2
      | s2 = {[@expl:type invariant] inv'26 _48} s3
      | s3 = -{resolve'8 _48}- s4
      | s4 = {[@expl:type invariant] inv'19 uf'1} s5
      | s5 = -{resolve'12 uf'1}- s6
      | s6 = {[@expl:type invariant] inv'17 _30} s7
      | s7 = -{resolve'0 _30}- s8
      | s8 = {[@expl:type invariant] inv'8 uf'0} s9
      | s9 = -{resolve'14 uf'0}- s10
      | s10 = bb22 ]
    | bb22 = s0 [ s0 = [ &_0 <- root'0 ] s1 | s1 = bb23 ]
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'8 uf'0} s1
      | s1 = -{resolve'14 uf'0}- s2
      | s2 = [ &_0 <- elem'0 ] s3
      | s3 = bb23 ]
    | bb23 = return''0 {_0} ]
    [ & _0: t_Element = Any.any_l ()
    | & uf'0: MutBorrow.t t_UnionFind = uf
    | & elem'0: t_Element = elem
    | & perm: t_PtrOwn = Any.any_l ()
    | & _9: t_PtrOwn = Any.any_l ()
    | & _10: t_Option'0 = Any.any_l ()
    | & _12: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _15: t_Element = Any.any_l ()
    | & _16: t_Node = Any.any_l ()
    | & e: t_Element = Any.any_l ()
    | & root'0: t_Element = Any.any_l ()
    | & _22: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _23: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _24: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _25: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _26: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & _27: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & __temp: MutBorrow.t t_UFInner = Any.any_l ()
    | & _30: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & _31: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & uf'1: MutBorrow.t t_UFInner = Any.any_l ()
    | & mut_perm: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _37: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _38: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _39: t_Option'1 = Any.any_l ()
    | & _40: MutBorrow.t t_FMap = Any.any_l ()
    | & _41: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _42: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _44: t_Element = Any.any_l ()
    | & _46: t_Node = Any.any_l ()
    | & _48: MutBorrow.t t_Node = Any.any_l () ])
    [ return''0 (result: t_Element) -> {[@expl:find_inner ensures #0] [%#sunion_find'2] result = root uf.current elem}
      {[@expl:find_inner ensures #1] [%#sunion_find'3] unchanged uf}
      {[@expl:find_inner ensures #2] [%#sunion_find'4] ((fin'0 uf).t_UnionFind__0).t_UFInner__depth
      = ((uf.current).t_UnionFind__0).t_UFInner__depth}
      {[@expl:find_inner ensures #3] [%#sunion_find'5] index_logic'3 ((uf.current).t_UnionFind__0).t_UFInner__depth result
      >= index_logic'3 ((uf.current).t_UnionFind__0).t_UFInner__depth elem}
      (! return' {result}) ]
end
module M_union_find__implementation__find [#"union_find.rs" 249 4 249 80]
  let%span sunion_find = "union_find.rs" 249 19 249 21
  let%span sunion_find'0 = "union_find.rs" 246 4 246 35
  let%span sunion_find'1 = "union_find.rs" 247 14 247 37
  let%span sunion_find'2 = "union_find.rs" 248 4 248 30
  let%span sunion_find'3 = "union_find.rs" 229 25 229 27
  let%span sunion_find'4 = "union_find.rs" 223 4 223 35
  let%span sunion_find'5 = "union_find.rs" 224 14 224 37
  let%span sunion_find'6 = "union_find.rs" 225 4 225 30
  let%span sunion_find'7 = "union_find.rs" 227 14 227 41
  let%span sunion_find'8 = "union_find.rs" 228 14 228 52
  let%span sunion_find'9 = "union_find.rs" 103 8 103 16
  let%span sunion_find'10 = "union_find.rs" 127 8 127 16
  let%span sunion_find'11 = "union_find.rs" 154 16 156 64
  let%span sunion_find'12 = "union_find.rs" 96 19 96 28
  let%span sunion_find'13 = "union_find.rs" 97 18 97 150
  let%span sunion_find'14 = "union_find.rs" 95 8 95 16
  let%span sunion_find'15 = "union_find.rs" 114 19 114 28
  let%span sunion_find'16 = "union_find.rs" 115 18 117 42
  let%span sunion_find'17 = "union_find.rs" 113 8 113 16
  let%span sunion_find'18 = "union_find.rs" 134 8 134 16
  let%span sunion_find'19 = "union_find.rs" 25 8 25 16
  let%span sunion_find'20 = "union_find.rs" 73 12 88 53
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use set.Fset
  use map.Map
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'19] addr_logic self.t_Element__0
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'1] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap] get self k <> C_None
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'0] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'2] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'0] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'20] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> inv'2 val''0
        end)
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap'3] forall k: t_Element. contains'0 self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  predicate invariant''3 (self: MutBorrow.t t_UnionFind) = [%#sinvariant] inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate invariant''4 (self: MutBorrow.t t_UnionFind) = [%#sghost'0] inv'7 self
  
  predicate inv'8 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'8 x]. inv'8 x = invariant''4 x
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'14] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'12] inv'6 self)
      -> ([%#sunion_find'13] forall e1: t_Element, e2: t_Element. contains (domain self) e1
          /\ contains (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'9] contains (domain self) e
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self: t_UnionFind) : Map.map t_Element t_Element =
    [%#sunion_find'17] (self.t_UnionFind__0).t_UFInner__roots
  
  axiom roots_map_spec: forall self: t_UnionFind. ([%#sunion_find'15] inv'6 self)
      -> ([%#sunion_find'16] forall e: t_Element. in_domain self e
        -> in_domain self (index_logic'1 (roots_map self) e)
        /\ index_logic'1 (roots_map self) e = index_logic'1 (roots_map self) (index_logic'1 (roots_map self) e))
  
  function root [#"union_find.rs" 129 8 129 54] (self: t_UnionFind) (e: t_Element) : t_Element =
    [%#sunion_find'10] index_logic'1 (roots_map self) e
  
  function payloads_map [#"union_find.rs" 135 8 135 59] (self: t_UnionFind) : Map.map t_Element t_T =
    [%#sunion_find'18] (self.t_UnionFind__0).t_UFInner__payloads
  
  predicate unchanged [#"union_find.rs" 152 8 152 43] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'11] domain self.current = domain self.final
    /\ roots_map self.current = roots_map self.final /\ payloads_map self.current = payloads_map self.final
  
  function fin (self: MutBorrow.t t_UnionFind) : t_UnionFind = [%#sghost] self.final
  
  let rec find_inner (uf: MutBorrow.t t_UnionFind) (elem: t_Element) (return' (x: t_Element)) =
    {[@expl:find_inner 'uf' type invariant] [%#sunion_find'3] inv'8 uf}
    {[@expl:find_inner requires] [%#sunion_find'4] in_domain uf.current elem}
    any
    [ return''0 (result: t_Element) -> {[%#sunion_find'5] result = root uf.current elem}
      {[%#sunion_find'6] unchanged uf}
      {[%#sunion_find'7] ((fin uf).t_UnionFind__0).t_UFInner__depth = ((uf.current).t_UnionFind__0).t_UFInner__depth}
      {[%#sunion_find'8] index_logic'3 ((uf.current).t_UnionFind__0).t_UFInner__depth result
      >= index_logic'3 ((uf.current).t_UnionFind__0).t_UFInner__depth elem}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec find [#"union_find.rs" 249 4 249 80] (uf: MutBorrow.t t_UnionFind) (elem: t_Element)
    (return' (x: t_Element)) = {[@expl:find 'uf' type invariant] [%#sunion_find] inv'8 uf}
    {[@expl:find requires] [%#sunion_find'0] in_domain uf.current elem}
    (! bb0
    [ bb0 = s0 [ s0 = find_inner {uf'0} {elem'0} (fun (_ret: t_Element) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = return''0 {_0} ]
    [ & _0: t_Element = Any.any_l () | & uf'0: MutBorrow.t t_UnionFind = uf | & elem'0: t_Element = elem ])
    [ return''0 (result: t_Element) -> {[@expl:find ensures #0] [%#sunion_find'1] result = root uf.current elem}
      {[@expl:find ensures #1] [%#sunion_find'2] unchanged uf}
      (! return' {result}) ]
end
module M_union_find__implementation__get [#"union_find.rs" 259 4 259 67]
  let%span sunion_find = "union_find.rs" 259 18 259 20
  let%span sunion_find'0 = "union_find.rs" 256 4 256 35
  let%span sunion_find'1 = "union_find.rs" 257 15 257 36
  let%span sunion_find'2 = "union_find.rs" 259 65 259 67
  let%span sunion_find'3 = "union_find.rs" 258 14 258 41
  let%span sunion_find'4 = "union_find.rs" 103 8 103 16
  let%span sunion_find'5 = "union_find.rs" 127 8 127 16
  let%span sunion_find'6 = "union_find.rs" 143 8 143 16
  let%span sunion_find'7 = "union_find.rs" 96 19 96 28
  let%span sunion_find'8 = "union_find.rs" 97 18 97 150
  let%span sunion_find'9 = "union_find.rs" 95 8 95 16
  let%span sunion_find'10 = "union_find.rs" 114 19 114 28
  let%span sunion_find'11 = "union_find.rs" 115 18 117 42
  let%span sunion_find'12 = "union_find.rs" 113 8 113 16
  let%span sunion_find'13 = "union_find.rs" 134 8 134 16
  let%span sunion_find'14 = "union_find.rs" 25 8 25 16
  let%span sunion_find'15 = "union_find.rs" 73 12 88 53
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 354 22 354 26
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 354 4 354 50
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 353 14 353 55
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'4 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'5 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span sfmap'6 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 145 16 145 17
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 146 27 146 39
  let%span soption'1 = "../../creusot-contracts/src/std/option.rs" 147 26 147 46
  let%span soption'2 = "../../creusot-contracts/src/std/option.rs" 764 8 767 9
  let%span soption'3 = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'4 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 79 40 79 43
  let%span sptr_own'0 = "../../creusot-contracts/src/ghost/ptr_own.rs" 76 15 76 31
  let%span sptr_own'1 = "../../creusot-contracts/src/ghost/ptr_own.rs" 79 4 79 69
  let%span sptr_own'2 = "../../creusot-contracts/src/ghost/ptr_own.rs" 77 14 77 35
  let%span sptr_own'3 = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 78 14 78 18
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 78 4 78 36
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 77 14 77 31
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 183 15 183 16
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 183 4 185 17
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 95 8 95 18
  
  use creusot.prelude.Opaque
  use set.Fset
  use map.Map
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'14] addr_logic self.t_Element__0
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'2] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap'3] get self k <> C_None
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'4] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'6] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'4] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'15] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own'3] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> inv'2 val''0
        end)
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap'5] forall k: t_Element. contains'0 self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  predicate invariant''3 (self: t_UnionFind) = [%#sinvariant] inv'6 self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_UnionFind [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate invariant''4 (self: t_UnionFind) = [%#sghost'5] inv'7 self
  
  predicate inv'8 (_0: t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_UnionFind [inv'8 x]. inv'8 x = invariant''4 x
  
  predicate invariant''5 (self: t_UnionFind) = [%#sinvariant] inv'8 self
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'9 (_0: t_UnionFind)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_UnionFind [inv'9 x]. inv'9 x = invariant''5 x
  
  predicate invariant''6 (self: t_UnionFind) = [%#sinvariant] inv'7 self
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'10 (_0: t_UnionFind)
  
  axiom inv_axiom'9 [@rewrite]: forall x: t_UnionFind [inv'10 x]. inv'10 x = invariant''6 x
  
  let rec deref (self: t_UnionFind) (return' (x: t_UnionFind)) =
    {[@expl:deref 'self' type invariant] [%#sghost] inv'9 self}
    any
    [ return''0 (result: t_UnionFind) -> {[%#sghost'0] inv'10 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 t_PtrOwn
  
  predicate invariant''7 (self: t_FMap) = [%#sinvariant] inv'4 self
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'11 (_0: t_FMap)
  
  axiom inv_axiom'10 [@rewrite]: forall x: t_FMap [inv'11 x]. inv'11 x = invariant''7 x
  
  predicate invariant''8 (self: t_PtrOwn) = [%#sinvariant] inv'3 self
  
  meta "rewrite_def" predicate invariant''8
  
  predicate inv'12 (_0: t_PtrOwn)
  
  axiom inv_axiom'11 [@rewrite]: forall x: t_PtrOwn [inv'12 x]. inv'12 x = invariant''8 x
  
  predicate inv'13 (_0: t_Option'0)
  
  axiom inv_axiom'12 [@rewrite]: forall x: t_Option'0 [inv'13 x]. inv'13 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'12 a_0
        end
  
  function map_logic (self: t_Option) (f: Map.map t_PtrOwn t_PtrOwn) : t_Option'0 = [%#soption'2] match self with
      | C_None -> C_None'0
      | C_Some x -> C_Some'0 (Map.get f x)
      end
  
  let rec get_ghost (self: t_FMap) (key: t_Element) (return' (x: t_Option'0)) =
    {[@expl:get_ghost 'self' type invariant] [%#sfmap] inv'11 self}
    any
    [ return''0 (result: t_Option'0) -> {[%#sfmap'0] inv'13 result}
      {[%#sfmap'1] result = map_logic (get self key) (fun (v: t_PtrOwn) -> v)}
      (! return' {result}) ]
  
  let rec unwrap (self_: t_Option'0) (return' (x: t_PtrOwn)) =
    {[@expl:unwrap 'self_' type invariant] [%#soption] inv'13 self_}
    {[@expl:unwrap requires] [%#soption'0] self_ <> C_None'0}
    any [ return''0 (result: t_PtrOwn) -> {inv'12 result} {[%#soption'1] C_Some'0 result = self_} (! return' {result}) ]
  
  predicate invariant''9 (self: t_PtrOwn) = [%#sghost'5] inv'12 self
  
  predicate inv'14 (_0: t_PtrOwn)
  
  axiom inv_axiom'13 [@rewrite]: forall x: t_PtrOwn [inv'14 x]. inv'14 x = invariant''9 x
  
  let rec new (x: t_PtrOwn) (return' (x'0: t_PtrOwn)) = {[@expl:new 'x' type invariant] [%#sghost'2] inv'12 x}
    any [ return''0 (result: t_PtrOwn) -> {[%#sghost'3] inv'14 result} {[%#sghost'4] result = x} (! return' {result}) ]
  
  predicate invariant''10 (self: t_Node) = [%#sinvariant] inv'1 self
  
  meta "rewrite_def" predicate invariant''10
  
  predicate inv'15 (_0: t_Node)
  
  axiom inv_axiom'14 [@rewrite]: forall x: t_Node [inv'15 x]. inv'15 x = invariant''10 x
  
  let rec as_ref (ptr'0: Opaque.ptr) (own: t_PtrOwn) (return' (x: t_Node)) =
    {[@expl:as_ref 'own' type invariant] [%#sptr_own] inv'14 own}
    {[@expl:as_ref requires] [%#sptr_own'0] ptr'0 = ptr own}
    any
    [ return''0 (result: t_Node) -> {[%#sptr_own'1] inv'15 result}
      {[%#sptr_own'2] result = val' own}
      (! return' {result}) ]
  
  let rec v_Root (input: t_Node) (ret (rank: t_PeanoInt) (payload: t_T)) = any
    [ good (rank: t_PeanoInt) (payload: t_T) -> {C_Root rank payload = input} (! ret {rank} {payload})
    | bad -> {forall rank: t_PeanoInt, payload: t_T [C_Root rank payload: t_Node]. C_Root rank payload <> input}
      (! {false}
      any) ]
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'9] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'7] inv'6 self)
      -> ([%#sunion_find'8] forall e1: t_Element, e2: t_Element. contains (domain self) e1
          /\ contains (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'4] contains (domain self) e
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self: t_UnionFind) : Map.map t_Element t_Element =
    [%#sunion_find'12] (self.t_UnionFind__0).t_UFInner__roots
  
  axiom roots_map_spec: forall self: t_UnionFind. ([%#sunion_find'10] inv'6 self)
      -> ([%#sunion_find'11] forall e: t_Element. in_domain self e
        -> in_domain self (index_logic'1 (roots_map self) e)
        /\ index_logic'1 (roots_map self) e = index_logic'1 (roots_map self) (index_logic'1 (roots_map self) e))
  
  function root [#"union_find.rs" 129 8 129 54] (self: t_UnionFind) (e: t_Element) : t_Element =
    [%#sunion_find'5] index_logic'1 (roots_map self) e
  
  predicate invariant''11 (self: t_T) = [%#sinvariant] inv'0 self
  
  meta "rewrite_def" predicate invariant''11
  
  predicate inv'16 (_0: t_T)
  
  axiom inv_axiom'15 [@rewrite]: forall x: t_T [inv'16 x]. inv'16 x = invariant''11 x
  
  function payloads_map [#"union_find.rs" 135 8 135 59] (self: t_UnionFind) : Map.map t_Element t_T =
    [%#sunion_find'13] (self.t_UnionFind__0).t_UFInner__payloads
  
  function payload [#"union_find.rs" 145 8 145 48] (self: t_UnionFind) (e: t_Element) : t_T =
    [%#sunion_find'6] index_logic'2 (payloads_map self) e
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get'0 [#"union_find.rs" 259 4 259 67] (uf: t_UnionFind) (elem: t_Element) (return' (x: t_T)) =
    {[@expl:get 'uf' type invariant] [%#sunion_find] inv'8 uf}
    {[@expl:get requires #0] [%#sunion_find'0] in_domain uf elem}
    {[@expl:get requires #1] [%#sunion_find'1] root uf elem = elem}
    (! bb0
    [ bb0 = s0 [ s0 = deref {uf'0} (fun (_ret: t_UnionFind) -> [ &_10 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_13 <- elem'0 ] s1
      | s1 = get_ghost {(_10.t_UnionFind__0).t_UFInner__perms} {_13} (fun (_ret: t_Option'0) -> [ &_8 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = unwrap {_8} (fun (_ret: t_PtrOwn) -> [ &_7 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = new {_7} (fun (_ret: t_PtrOwn) -> [ &perm <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = as_ref {elem'0.t_Element__0} {perm} (fun (_ret: t_Node) -> [ &_14 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = any
      [ br0 (x0: t_PeanoInt) (x1: t_T) -> {_14 = C_Root x0 x1} (! bb8)
      | br1 (x0: t_Element) -> {_14 = C_Link x0} (! bb6) ]
    | bb6 = {false} any
    | bb8 = s0
      [ s0 = v_Root {_14} (fun (rrank: t_PeanoInt) (rpayload: t_T) -> [ &payload'0 <- rpayload ] s1)
      | s1 = [ &_0 <- payload'0 ] s2
      | s2 = return''0 {_0} ] ]
    [ & _0: t_T = Any.any_l ()
    | & uf'0: t_UnionFind = uf
    | & elem'0: t_Element = elem
    | & perm: t_PtrOwn = Any.any_l ()
    | & _7: t_PtrOwn = Any.any_l ()
    | & _8: t_Option'0 = Any.any_l ()
    | & _10: t_UnionFind = Any.any_l ()
    | & _13: t_Element = Any.any_l ()
    | & _14: t_Node = Any.any_l ()
    | & payload'0: t_T = Any.any_l () ])
    [ return''0 (result: t_T) -> {[@expl:get result type invariant] [%#sunion_find'2] inv'16 result}
      {[@expl:get ensures] [%#sunion_find'3] result = payload uf elem}
      (! return' {result}) ]
end
module M_union_find__implementation__equiv [#"union_find.rs" 272 4 272 93]
  let%span sunion_find = "union_find.rs" 272 24 272 26
  let%span sunion_find'0 = "union_find.rs" 268 4 268 33
  let%span sunion_find'1 = "union_find.rs" 269 4 269 33
  let%span sunion_find'2 = "union_find.rs" 270 14 270 52
  let%span sunion_find'3 = "union_find.rs" 271 4 271 30
  let%span sunion_find'4 = "union_find.rs" 249 19 249 21
  let%span sunion_find'5 = "union_find.rs" 246 4 246 35
  let%span sunion_find'6 = "union_find.rs" 247 14 247 37
  let%span sunion_find'7 = "union_find.rs" 248 4 248 30
  let%span sunion_find'8 = "union_find.rs" 18 18 18 69
  let%span sunion_find'9 = "union_find.rs" 103 8 103 16
  let%span sunion_find'10 = "union_find.rs" 127 8 127 16
  let%span sunion_find'11 = "union_find.rs" 154 16 156 64
  let%span sunion_find'12 = "union_find.rs" 96 19 96 28
  let%span sunion_find'13 = "union_find.rs" 97 18 97 150
  let%span sunion_find'14 = "union_find.rs" 95 8 95 16
  let%span sunion_find'15 = "union_find.rs" 114 19 114 28
  let%span sunion_find'16 = "union_find.rs" 115 18 117 42
  let%span sunion_find'17 = "union_find.rs" 113 8 113 16
  let%span sunion_find'18 = "union_find.rs" 134 8 134 16
  let%span sunion_find'19 = "union_find.rs" 73 12 88 53
  let%span sunion_find'20 = "union_find.rs" 25 8 25 16
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span smodel = "../../creusot-contracts/src/model.rs" 36 8 36 28
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 89 22 89 26
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 89 4 89 48
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 88 14 88 35
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 183 15 183 16
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 183 4 185 17
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use set.Fset
  use map.Map
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'20] addr_logic self.t_Element__0
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'1] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap] get self k <> C_None
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'0] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'2] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'0] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'19] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> inv'2 val''0
        end)
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap'3] forall k: t_Element. contains'0 self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  predicate invariant''3 (self: MutBorrow.t t_UnionFind) = [%#sinvariant] inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate invariant''4 (self: MutBorrow.t t_UnionFind) = [%#sghost'5] inv'7 self
  
  predicate inv'8 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'8 x]. inv'8 x = invariant''4 x
  
  predicate invariant''5 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) =
    [%#sinvariant] inv'8 self.current /\ inv'8 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'9 (_0: MutBorrow.t (MutBorrow.t t_UnionFind))
  
  axiom inv_axiom'8 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UnionFind) [inv'9 x]. inv'9 x = invariant''5 x
  
  predicate invariant''6 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) =
    [%#sinvariant] inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'10 (_0: MutBorrow.t (MutBorrow.t t_UnionFind))
  
  axiom inv_axiom'9 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UnionFind) [inv'10 x]. inv'10 x = invariant''6 x
  
  let rec deref_mut (self: MutBorrow.t (MutBorrow.t t_UnionFind)) (return' (x: MutBorrow.t (MutBorrow.t t_UnionFind))) =
    {[@expl:deref_mut 'self' type invariant] [%#sghost] inv'9 self}
    any
    [ return''0 (result: MutBorrow.t (MutBorrow.t t_UnionFind)) -> {[%#sghost'0] inv'10 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t (MutBorrow.t t_UnionFind)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t (MutBorrow.t t_UnionFind)) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_UnionFind) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: MutBorrow.t t_UnionFind) = resolve'1 _0
  
  let rec new (x: MutBorrow.t t_UnionFind) (return' (x'0: MutBorrow.t t_UnionFind)) =
    {[@expl:new 'x' type invariant] [%#sghost'2] inv'7 x}
    any
    [ return''0 (result: MutBorrow.t t_UnionFind) -> {[%#sghost'3] inv'8 result}
      {[%#sghost'4] result = x}
      (! return' {result}) ]
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'14] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'12] inv'6 self)
      -> ([%#sunion_find'13] forall e1: t_Element, e2: t_Element. contains (domain self) e1
          /\ contains (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'9] contains (domain self) e
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self: t_UnionFind) : Map.map t_Element t_Element =
    [%#sunion_find'17] (self.t_UnionFind__0).t_UFInner__roots
  
  axiom roots_map_spec: forall self: t_UnionFind. ([%#sunion_find'15] inv'6 self)
      -> ([%#sunion_find'16] forall e: t_Element. in_domain self e
        -> in_domain self (index_logic'1 (roots_map self) e)
        /\ index_logic'1 (roots_map self) e = index_logic'1 (roots_map self) (index_logic'1 (roots_map self) e))
  
  function root [#"union_find.rs" 129 8 129 54] (self: t_UnionFind) (e: t_Element) : t_Element =
    [%#sunion_find'10] index_logic'1 (roots_map self) e
  
  function payloads_map [#"union_find.rs" 135 8 135 59] (self: t_UnionFind) : Map.map t_Element t_T =
    [%#sunion_find'18] (self.t_UnionFind__0).t_UFInner__payloads
  
  predicate unchanged [#"union_find.rs" 152 8 152 43] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'11] domain self.current = domain self.final
    /\ roots_map self.current = roots_map self.final /\ payloads_map self.current = payloads_map self.final
  
  let rec find (uf: MutBorrow.t t_UnionFind) (elem: t_Element) (return' (x: t_Element)) =
    {[@expl:find 'uf' type invariant] [%#sunion_find'4] inv'8 uf}
    {[@expl:find requires] [%#sunion_find'5] in_domain uf.current elem}
    any
    [ return''0 (result: t_Element) -> {[%#sunion_find'6] result = root uf.current elem}
      {[%#sunion_find'7] unchanged uf}
      (! return' {result}) ]
  
  function deep_model'0 (self: t_Element) : UInt64.t = [%#smodel] deep_model self
  
  let rec eq (self: t_Element) (other: t_Element) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#sunion_find'8] result = (deep_model'0 self = deep_model'0 other)}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec equiv [#"union_find.rs" 272 4 272 93] (uf: MutBorrow.t t_UnionFind) (e1: t_Element) (e2: t_Element)
    (return' (x: bool)) = {[@expl:equiv 'uf' type invariant] [%#sunion_find] inv'8 uf}
    {[@expl:equiv requires #0] [%#sunion_find'0] in_domain uf.current e1}
    {[@expl:equiv requires #1] [%#sunion_find'1] in_domain uf.current e2}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'8 uf'0}
        MutBorrow.borrow_mut <MutBorrow.t t_UnionFind> {uf'0}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) ->
            [ &_14 <- _ret ] -{inv'8 _ret.final}-
            [ &uf'0 <- _ret.final ] s1)
      | s1 = deref_mut {_14} (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) -> [ &_13 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'6 (_13.current).current}
        MutBorrow.borrow_mut <t_UnionFind> {(_13.current).current}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_12 <- _ret ] -{inv'6 _ret.final}-
            [ &_13 <- { _13 with current = { _13.current with current = _ret.final } } ] s1)
      | s1 = {inv'6 _12.current}
        MutBorrow.borrow_final <t_UnionFind> {_12.current} {MutBorrow.get_id _12}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_11 <- _ret ] -{inv'6 _ret.final}-
            [ &_12 <- { _12 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv'10 _13} s3
      | s3 = -{resolve'0 _13}- s4
      | s4 = {[@expl:type invariant] inv'7 _12} s5
      | s5 = -{resolve'2 _12}- s6
      | s6 = {inv'6 _11.current}
        MutBorrow.borrow_final <t_UnionFind> {_11.current} {MutBorrow.get_id _11}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_10 <- _ret ] -{inv'6 _ret.final}-
            [ &_11 <- { _11 with current = _ret.final } ] s7)
      | s7 = new {_10} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_9 <- _ret ] s8)
      | s8 = bb2 ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'7 _11} s1
      | s1 = -{resolve'2 _11}- s2
      | s2 = find {_9} {e1'0} (fun (_ret: t_Element) -> [ &r1 <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0 [ s0 = find {uf'0} {e2'0} (fun (_ret: t_Element) -> [ &r2 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = eq {r1} {r2} (fun (_ret: bool) -> [ &_0 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = return''0 {_0} ]
    [ & _0: bool = Any.any_l ()
    | & uf'0: MutBorrow.t t_UnionFind = uf
    | & e1'0: t_Element = e1
    | & e2'0: t_Element = e2
    | & r1: t_Element = Any.any_l ()
    | & _9: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _10: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _11: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _12: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _13: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & _14: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & r2: t_Element = Any.any_l () ])
    [ return''0 (result: bool) -> {[@expl:equiv ensures #0] [%#sunion_find'2] result
      = (root uf.current e1 = root uf.current e2)}
      {[@expl:equiv ensures #1] [%#sunion_find'3] unchanged uf}
      (! return' {result}) ]
end
module M_union_find__implementation__link [#"union_find.rs" 288 4 288 92]
  let%span sunion_find = "union_find.rs" 304 27 304 92
  let%span sunion_find'0 = "union_find.rs" 305 31 305 59
  let%span sunion_find'1 = "union_find.rs" 306 27 306 87
  let%span sunion_find'2 = "union_find.rs" 315 27 315 92
  let%span sunion_find'3 = "union_find.rs" 316 31 316 59
  let%span sunion_find'4 = "union_find.rs" 317 27 317 87
  let%span sunion_find'5 = "union_find.rs" 288 19 288 21
  let%span sunion_find'6 = "union_find.rs" 279 4 279 51
  let%span sunion_find'7 = "union_find.rs" 280 15 280 49
  let%span sunion_find'8 = "union_find.rs" 281 4 281 64
  let%span sunion_find'9 = "union_find.rs" 282 14 282 58
  let%span sunion_find'10 = "union_find.rs" 283 14 283 42
  let%span sunion_find'11 = "union_find.rs" 284 14 286 98
  let%span sunion_find'12 = "union_find.rs" 18 18 18 69
  let%span sunion_find'13 = "union_find.rs" 103 8 103 16
  let%span sunion_find'14 = "union_find.rs" 127 8 127 16
  let%span sunion_find'15 = "union_find.rs" 164 24 164 60
  let%span sunion_find'16 = "union_find.rs" 171 24 171 72
  let%span sunion_find'17 = "union_find.rs" 96 19 96 28
  let%span sunion_find'18 = "union_find.rs" 97 18 97 150
  let%span sunion_find'19 = "union_find.rs" 95 8 95 16
  let%span sunion_find'20 = "union_find.rs" 114 19 114 28
  let%span sunion_find'21 = "union_find.rs" 115 18 117 42
  let%span sunion_find'22 = "union_find.rs" 113 8 113 16
  let%span sunion_find'23 = "union_find.rs" 134 8 134 16
  let%span sunion_find'24 = "union_find.rs" 25 8 25 16
  let%span sunion_find'25 = "union_find.rs" 73 12 88 53
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span smodel = "../../creusot-contracts/src/model.rs" 36 8 36 28
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 54 8 54 28
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 417 32 417 36
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 414 4 414 36
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 417 4 417 69
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 415 14 415 47
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 416 14 416 85
  let%span sfmap'4 = "../../creusot-contracts/src/logic/fmap.rs" 387 30 387 34
  let%span sfmap'5 = "../../creusot-contracts/src/logic/fmap.rs" 387 4 387 62
  let%span sfmap'6 = "../../creusot-contracts/src/logic/fmap.rs" 376 14 384 9
  let%span sfmap'7 = "../../creusot-contracts/src/logic/fmap.rs" 385 14 385 73
  let%span sfmap'8 = "../../creusot-contracts/src/logic/fmap.rs" 386 14 386 44
  let%span sfmap'9 = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'10 = "../../creusot-contracts/src/logic/fmap.rs" 85 14 85 43
  let%span sfmap'11 = "../../creusot-contracts/src/logic/fmap.rs" 86 14 86 84
  let%span sfmap'12 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'13 = "../../creusot-contracts/src/logic/fmap.rs" 69 14 69 46
  let%span sfmap'14 = "../../creusot-contracts/src/logic/fmap.rs" 70 14 70 88
  let%span sfmap'15 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'16 = "../../creusot-contracts/src/logic/fmap.rs" 61 14 61 25
  let%span sfmap'17 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span sfmap'18 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 145 16 145 17
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 146 27 146 39
  let%span soption'1 = "../../creusot-contracts/src/std/option.rs" 147 26 147 46
  let%span soption'2 = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'3 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 97 40 97 43
  let%span sptr_own'0 = "../../creusot-contracts/src/ghost/ptr_own.rs" 93 15 93 31
  let%span sptr_own'1 = "../../creusot-contracts/src/ghost/ptr_own.rs" 97 4 97 77
  let%span sptr_own'2 = "../../creusot-contracts/src/ghost/ptr_own.rs" 94 14 94 35
  let%span sptr_own'3 = "../../creusot-contracts/src/ghost/ptr_own.rs" 95 14 95 39
  let%span sptr_own'4 = "../../creusot-contracts/src/ghost/ptr_own.rs" 96 14 96 38
  let%span sptr_own'5 = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 89 22 89 26
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 89 4 89 48
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 88 14 88 35
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 183 15 183 16
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 183 4 185 17
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 232 17 232 21
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 232 4 232 46
  let%span sghost'7 = "../../creusot-contracts/src/ghost.rs" 230 14 230 36
  let%span sghost'8 = "../../creusot-contracts/src/ghost.rs" 231 14 231 36
  let%span sghost'9 = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'10 = "../../creusot-contracts/src/ghost.rs" 127 8 127 22
  let%span sghost'11 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span speano = "../../creusot-contracts/src/peano.rs" 132 14 132 38
  let%span speano'0 = "../../creusot-contracts/src/peano.rs" 41 4 41 12
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  let%span scmp = "../../creusot-contracts/src/std/cmp.rs" 35 26 35 76
  let%span scmp'0 = "../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use set.Fset
  use map.Map
  use mach.int.Int
  use int.MinMax
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'24] addr_logic self.t_Element__0
  
  function deep_model'0 (self: t_Element) : UInt64.t = [%#smodel] deep_model self
  
  let rec eq (self: t_Element) (other: t_Element) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#sunion_find'12] result = (deep_model'0 self = deep_model'0 other)}
      (! return' {result}) ]
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'15] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap'9] get self k <> C_None
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'3] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'18] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'12] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'25] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own'5] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> inv'2 val''0
        end)
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap'17] forall k: t_Element. contains'0 self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  predicate invariant''3 (self: MutBorrow.t t_UnionFind) = [%#sinvariant] inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate invariant''4 (self: MutBorrow.t t_UnionFind) = [%#sghost'11] inv'7 self
  
  predicate inv'8 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'8 x]. inv'8 x = invariant''4 x
  
  predicate resolve (self: MutBorrow.t t_UnionFind) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t t_UnionFind) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_UnionFind) = [%#sghost'10] resolve'0 self
  
  predicate resolve'2 (_0: MutBorrow.t t_UnionFind) = resolve'1 _0
  
  predicate invariant''5 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) =
    [%#sinvariant] inv'8 self.current /\ inv'8 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'9 (_0: MutBorrow.t (MutBorrow.t t_UnionFind))
  
  axiom inv_axiom'8 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UnionFind) [inv'9 x]. inv'9 x = invariant''5 x
  
  predicate invariant''6 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) =
    [%#sinvariant] inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'10 (_0: MutBorrow.t (MutBorrow.t t_UnionFind))
  
  axiom inv_axiom'9 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UnionFind) [inv'10 x]. inv'10 x = invariant''6 x
  
  let rec deref_mut (self: MutBorrow.t (MutBorrow.t t_UnionFind)) (return' (x: MutBorrow.t (MutBorrow.t t_UnionFind))) =
    {[@expl:deref_mut 'self' type invariant] [%#sghost] inv'9 self}
    any
    [ return''0 (result: MutBorrow.t (MutBorrow.t t_UnionFind)) -> {[%#sghost'0] inv'10 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  predicate invariant''7 (self: MutBorrow.t t_UFInner) = [%#sinvariant] inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'11 (_0: MutBorrow.t t_UFInner)
  
  axiom inv_axiom'10 [@rewrite]: forall x: MutBorrow.t t_UFInner [inv'11 x]. inv'11 x = invariant''7 x
  
  predicate invariant''8 (self: MutBorrow.t t_UFInner) = [%#sghost'11] inv'11 self
  
  predicate inv'12 (_0: MutBorrow.t t_UFInner)
  
  axiom inv_axiom'11 [@rewrite]: forall x: MutBorrow.t t_UFInner [inv'12 x]. inv'12 x = invariant''8 x
  
  let rec new (x: MutBorrow.t t_UFInner) (return' (x'0: MutBorrow.t t_UFInner)) =
    {[@expl:new 'x' type invariant] [%#sghost'2] inv'11 x}
    any
    [ return''0 (result: MutBorrow.t t_UFInner) -> {[%#sghost'3] inv'12 result}
      {[%#sghost'4] result = x}
      (! return' {result}) ]
  
  predicate invariant''9 (self: MutBorrow.t (MutBorrow.t t_UFInner)) =
    [%#sinvariant] inv'12 self.current /\ inv'12 self.final
  
  meta "rewrite_def" predicate invariant''9
  
  predicate inv'13 (_0: MutBorrow.t (MutBorrow.t t_UFInner))
  
  axiom inv_axiom'12 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UFInner) [inv'13 x]. inv'13 x = invariant''9 x
  
  predicate invariant''10 (self: MutBorrow.t (MutBorrow.t t_UFInner)) =
    [%#sinvariant] inv'11 self.current /\ inv'11 self.final
  
  meta "rewrite_def" predicate invariant''10
  
  predicate inv'14 (_0: MutBorrow.t (MutBorrow.t t_UFInner))
  
  axiom inv_axiom'13 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UFInner) [inv'14 x]. inv'14 x = invariant''10 x
  
  let rec deref_mut'0 (self: MutBorrow.t (MutBorrow.t t_UFInner)) (return' (x: MutBorrow.t (MutBorrow.t t_UFInner))) =
    {[@expl:deref_mut 'self' type invariant] [%#sghost] inv'13 self}
    any
    [ return''0 (result: MutBorrow.t (MutBorrow.t t_UFInner)) -> {[%#sghost'0] inv'14 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  type tuple = { _p0: MutBorrow.t t_PtrOwn; _p1: MutBorrow.t t_FMap }
  
  predicate invariant''11 (self: MutBorrow.t t_FMap) = [%#sinvariant] inv'4 self.current /\ inv'4 self.final
  
  meta "rewrite_def" predicate invariant''11
  
  predicate inv'15 (_0: MutBorrow.t t_FMap)
  
  axiom inv_axiom'14 [@rewrite]: forall x: MutBorrow.t t_FMap [inv'15 x]. inv'15 x = invariant''11 x
  
  predicate invariant''12 (self: MutBorrow.t t_PtrOwn) = [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''12
  
  predicate inv'16 (_0: MutBorrow.t t_PtrOwn)
  
  axiom inv_axiom'15 [@rewrite]: forall x: MutBorrow.t t_PtrOwn [inv'16 x]. inv'16 x = invariant''12 x
  
  predicate inv'17 (_0: tuple)
  
  axiom inv_axiom'16 [@rewrite]: forall x: tuple [inv'17 x]. inv'17 x
      = (let {_p0 = x0; _p1 = x1} = x in inv'16 x0 /\ inv'15 x1)
  
  function len (self: t_FMap) : int
  
  axiom len_spec: forall self: t_FMap. [%#sfmap'16] len self >= 0
  
  function remove (self: t_FMap) (k: t_Element) : t_FMap
  
  axiom remove_spec: forall self: t_FMap, k: t_Element. [%#sfmap'10] view (remove self k)
      = Map.set (view self) k (C_None)
  
  axiom remove_spec'0: forall self: t_FMap, k: t_Element. [%#sfmap'11] len (remove self k)
      = (if contains'0 self k then len self - 1 else len self)
  
  function insert (self: t_FMap) (k: t_Element) (v: t_PtrOwn) : t_FMap
  
  axiom insert_spec: forall self: t_FMap, k: t_Element, v: t_PtrOwn. [%#sfmap'13] view (insert self k v)
      = Map.set (view self) k (C_Some v)
  
  axiom insert_spec'0: forall self: t_FMap, k: t_Element, v: t_PtrOwn. [%#sfmap'14] len (insert self k v)
      = (if contains'0 self k then len self else len self + 1)
  
  let rec split_mut_ghost (self: MutBorrow.t t_FMap) (key: t_Element) (return' (x: tuple)) =
    {[@expl:split_mut_ghost 'self' type invariant] [%#sfmap] inv'15 self}
    {[@expl:split_mut_ghost requires] [%#sfmap'0] contains'0 self.current key}
    any
    [ return''0 (result: tuple) -> {[%#sfmap'1] inv'17 result}
      {[%#sfmap'2] (result._p1).current = remove self.current key}
      {[%#sfmap'3] index_logic'0 self.current key = (result._p0).current
      /\ self.final = insert (result._p1).final key (result._p0).final}
      (! return' {result}) ]
  
  predicate resolve'3 (self: MutBorrow.t (MutBorrow.t t_UFInner)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 (_0: MutBorrow.t (MutBorrow.t t_UFInner)) = resolve'3 _0
  
  predicate invariant''13 (self: tuple) = [%#sghost'11] inv'17 self
  
  predicate inv'18 (_0: tuple)
  
  axiom inv_axiom'17 [@rewrite]: forall x: tuple [inv'18 x]. inv'18 x = invariant''13 x
  
  let rec new'0 (x: tuple) (return' (x'0: tuple)) = {[@expl:new 'x' type invariant] [%#sghost'2] inv'17 x}
    any [ return''0 (result: tuple) -> {[%#sghost'3] inv'18 result} {[%#sghost'4] result = x} (! return' {result}) ]
  
  type tuple'0 = { _p0'0: MutBorrow.t t_PtrOwn; _p1'0: MutBorrow.t t_FMap }
  
  predicate invariant''14 (self: MutBorrow.t t_PtrOwn) = [%#sghost'11] inv'16 self
  
  predicate inv'19 (_0: MutBorrow.t t_PtrOwn)
  
  axiom inv_axiom'18 [@rewrite]: forall x: MutBorrow.t t_PtrOwn [inv'19 x]. inv'19 x = invariant''14 x
  
  predicate invariant''15 (self: MutBorrow.t t_FMap) = [%#sghost'11] inv'15 self
  
  predicate inv'20 (_0: MutBorrow.t t_FMap)
  
  axiom inv_axiom'19 [@rewrite]: forall x: MutBorrow.t t_FMap [inv'20 x]. inv'20 x = invariant''15 x
  
  predicate inv'21 (_0: tuple'0)
  
  axiom inv_axiom'20 [@rewrite]: forall x: tuple'0 [inv'21 x]. inv'21 x
      = (let {_p0'0 = x0; _p1'0 = x1} = x in inv'19 x0 /\ inv'20 x1)
  
  let rec split (self: tuple) (return' (x: tuple'0)) = {[@expl:split 'self' type invariant] [%#sghost'5] inv'18 self}
    any
    [ return''0 (result: tuple'0) -> {[%#sghost'6] inv'21 result}
      {[%#sghost'7] self._p0 = result._p0'0}
      {[%#sghost'8] self._p1 = result._p1'0}
      (! return' {result}) ]
  
  predicate invariant''16 (self: MutBorrow.t t_Node) = [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''16
  
  predicate inv'22 (_0: MutBorrow.t t_Node)
  
  axiom inv_axiom'21 [@rewrite]: forall x: MutBorrow.t t_Node [inv'22 x]. inv'22 x = invariant''16 x
  
  function fin (self: MutBorrow.t t_PtrOwn) : t_PtrOwn = [%#sghost'9] self.final
  
  let rec as_mut (ptr'0: Opaque.ptr) (own: MutBorrow.t t_PtrOwn) (return' (x: MutBorrow.t t_Node)) =
    {[@expl:as_mut 'own' type invariant] [%#sptr_own] inv'19 own}
    {[@expl:as_mut requires] [%#sptr_own'0] ptr'0 = ptr own.current}
    any
    [ return''0 (result: MutBorrow.t t_Node) -> {[%#sptr_own'1] inv'22 result}
      {[%#sptr_own'2] result.current = val' own.current}
      {[%#sptr_own'3] ptr (fin own) = ptr own.current}
      {[%#sptr_own'4] val' (fin own) = result.final}
      (! return' {result}) ]
  
  predicate resolve'5 (self: MutBorrow.t t_Node) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 (_0: MutBorrow.t t_Node) = resolve'5 _0
  
  predicate invariant''17 (self: MutBorrow.t (MutBorrow.t t_FMap)) =
    [%#sinvariant] inv'20 self.current /\ inv'20 self.final
  
  meta "rewrite_def" predicate invariant''17
  
  predicate inv'23 (_0: MutBorrow.t (MutBorrow.t t_FMap))
  
  axiom inv_axiom'22 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_FMap) [inv'23 x]. inv'23 x = invariant''17 x
  
  predicate invariant''18 (self: MutBorrow.t (MutBorrow.t t_FMap)) =
    [%#sinvariant] inv'15 self.current /\ inv'15 self.final
  
  meta "rewrite_def" predicate invariant''18
  
  predicate inv'24 (_0: MutBorrow.t (MutBorrow.t t_FMap))
  
  axiom inv_axiom'23 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_FMap) [inv'24 x]. inv'24 x = invariant''18 x
  
  let rec deref_mut'1 (self: MutBorrow.t (MutBorrow.t t_FMap)) (return' (x: MutBorrow.t (MutBorrow.t t_FMap))) =
    {[@expl:deref_mut 'self' type invariant] [%#sghost] inv'23 self}
    any
    [ return''0 (result: MutBorrow.t (MutBorrow.t t_FMap)) -> {[%#sghost'0] inv'24 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 (MutBorrow.t t_PtrOwn)
  
  predicate inv'25 (_0: t_Option'0)
  
  axiom inv_axiom'24 [@rewrite]: forall x: t_Option'0 [inv'25 x]. inv'25 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'16 a_0
        end
  
  let rec get_mut_ghost (self: MutBorrow.t t_FMap) (key: t_Element) (return' (x: t_Option'0)) =
    {[@expl:get_mut_ghost 'self' type invariant] [%#sfmap'4] inv'15 self}
    any
    [ return''0 (result: t_Option'0) -> {[%#sfmap'5] inv'25 result}
      {[%#sfmap'6] if contains'0 self.current key then
        match result with
          | C_None'0 -> false
          | C_Some'0 r -> contains'0 self.final key
          /\ index_logic'0 self.current key = r.current /\ index_logic'0 self.final key = r.final
          end
      else
        result = C_None'0 /\ self.current = self.final
      }
      {[%#sfmap'7] forall k: t_Element. k <> key -> get self.current k = get self.final k}
      {[%#sfmap'8] len self.current = len self.final}
      (! return' {result}) ]
  
  let rec unwrap (self_: t_Option'0) (return' (x: MutBorrow.t t_PtrOwn)) =
    {[@expl:unwrap 'self_' type invariant] [%#soption] inv'25 self_}
    {[@expl:unwrap requires] [%#soption'0] self_ <> C_None'0}
    any
    [ return''0 (result: MutBorrow.t t_PtrOwn) -> {inv'16 result}
      {[%#soption'1] C_Some'0 result = self_}
      (! return' {result}) ]
  
  predicate resolve'7 (self: MutBorrow.t (MutBorrow.t t_FMap)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'7
  
  predicate resolve'8 (_0: MutBorrow.t (MutBorrow.t t_FMap)) = resolve'7 _0
  
  predicate resolve'9 (self: MutBorrow.t t_PtrOwn) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'9
  
  predicate resolve'10 (_0: MutBorrow.t t_PtrOwn) = resolve'9 _0
  
  let rec new'1 (x: MutBorrow.t t_PtrOwn) (return' (x'0: MutBorrow.t t_PtrOwn)) =
    {[@expl:new 'x' type invariant] [%#sghost'2] inv'16 x}
    any
    [ return''0 (result: MutBorrow.t t_PtrOwn) -> {[%#sghost'3] inv'19 result}
      {[%#sghost'4] result = x}
      (! return' {result}) ]
  
  let rec v_Root (input: t_Node) (ret (rank: t_PeanoInt) (payload: t_T)) = any
    [ good (rank: t_PeanoInt) (payload: t_T) -> {C_Root rank payload = input} (! ret {rank} {payload})
    | bad -> {forall rank: t_PeanoInt, payload: t_T [C_Root rank payload: t_Node]. C_Root rank payload <> input}
      (! {false}
      any) ]
  
  predicate resolve'11 (self: MutBorrow.t t_PeanoInt) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'11
  
  predicate resolve'12 (_0: MutBorrow.t t_PeanoInt) = resolve'11 _0
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering = [%#sord'12] if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)
  
  function deep_model'1 (self: t_PeanoInt) : UInt64.t = [%#speano'0] self.t_PeanoInt__0
  
  function deep_model'2 (self: MutBorrow.t t_PeanoInt) : UInt64.t = [%#smodel'0] deep_model'1 self.current
  
  function deep_model'3 (self: MutBorrow.t t_PeanoInt) : UInt64.t = [%#smodel] deep_model'2 self
  
  let rec lt (self_: MutBorrow.t t_PeanoInt) (other: MutBorrow.t t_PeanoInt) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#scmp] result = UInt64.lt (deep_model'3 self_) (deep_model'3 other)}
      (! return' {result}) ]
  
  predicate resolve'13 (self: MutBorrow.t t_FMap) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'13
  
  predicate resolve'14 (_0: MutBorrow.t t_FMap) = resolve'13 _0
  
  predicate resolve'15 (self: MutBorrow.t t_FMap) = [%#sghost'10] resolve'14 self
  
  predicate resolve'16 (_0: MutBorrow.t t_FMap) = resolve'15 _0
  
  predicate resolve'17 (self: MutBorrow.t t_UFInner) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'17
  
  predicate resolve'18 (_0: MutBorrow.t t_UFInner) = resolve'17 _0
  
  predicate resolve'19 (self: MutBorrow.t t_UFInner) = [%#sghost'10] resolve'18 self
  
  predicate resolve'20 (_0: MutBorrow.t t_UFInner) = resolve'19 _0
  
  predicate resolve'21 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'21
  
  predicate resolve'22 (_0: MutBorrow.t (MutBorrow.t t_UnionFind)) = resolve'21 _0
  
  let rec new'2 (x: ()) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sghost'4] result = x} (! return' {result}) ]
  
  let rec eq'0 (self_: MutBorrow.t t_PeanoInt) (rhs: MutBorrow.t t_PeanoInt) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#scmp'0] result = (deep_model'3 self_ = deep_model'3 rhs)} (! return' {result}) ]
  
  let rec incr (self: t_PeanoInt) (return' (x: t_PeanoInt)) = any
    [ return''0 (result: t_PeanoInt) -> {[%#speano] UInt64.t'int result.t_PeanoInt__0
      = UInt64.t'int self.t_PeanoInt__0 + 1}
      (! return' {result}) ]
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'19] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'17] inv'6 self)
      -> ([%#sunion_find'18] forall e1: t_Element, e2: t_Element. contains (domain self) e1
          /\ contains (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'13] contains (domain self) e
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self: t_UnionFind) : Map.map t_Element t_Element =
    [%#sunion_find'22] (self.t_UnionFind__0).t_UFInner__roots
  
  axiom roots_map_spec: forall self: t_UnionFind. ([%#sunion_find'20] inv'6 self)
      -> ([%#sunion_find'21] forall e: t_Element. in_domain self e
        -> in_domain self (index_logic'1 (roots_map self) e)
        /\ index_logic'1 (roots_map self) e = index_logic'1 (roots_map self) (index_logic'1 (roots_map self) e))
  
  function root [#"union_find.rs" 129 8 129 54] (self: t_UnionFind) (e: t_Element) : t_Element =
    [%#sunion_find'14] index_logic'1 (roots_map self) e
  
  predicate domain_unchanged [#"union_find.rs" 163 8 163 50] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'15] domain self.current = domain self.final
  
  function payloads_map [#"union_find.rs" 135 8 135 59] (self: t_UnionFind) : Map.map t_Element t_T =
    [%#sunion_find'23] (self.t_UnionFind__0).t_UFInner__payloads
  
  predicate payloads_unchanged [#"union_find.rs" 170 8 170 52] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'16] payloads_map self.current = payloads_map self.final
  
  function fin'0 (self: MutBorrow.t t_UnionFind) : t_UnionFind = [%#sghost'9] self.final
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec link [#"union_find.rs" 288 4 288 92] (uf: MutBorrow.t t_UnionFind) (x: t_Element) (y: t_Element)
    (return' (x'0: t_Element)) = {[@expl:link 'uf' type invariant] [%#sunion_find'5] inv'8 uf}
    {[@expl:link requires #0] [%#sunion_find'6] in_domain uf.current x /\ in_domain uf.current y}
    {[@expl:link requires #1] [%#sunion_find'7] root uf.current x = x /\ root uf.current y = y}
    (! bb0
    [ bb0 = s0 [ s0 = eq {x'0} {y'0} (fun (_ret: bool) -> [ &_11 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = any [ br0 -> {_11 = false} (! bb3) | br1 -> {_11} (! bb2) ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'8 uf'0} s1 | s1 = -{resolve'2 uf'0}- s2 | s2 = [ &_0 <- x'0 ] s3 | s3 = bb51 ]
    | bb3 = s0
      [ s0 = {inv'8 uf'0}
        MutBorrow.borrow_mut <MutBorrow.t t_UnionFind> {uf'0}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) ->
            [ &_17 <- _ret ] -{inv'8 _ret.final}-
            [ &uf'0 <- _ret.final ] s1)
      | s1 = deref_mut {_17} (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) -> [ &_16 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0
      [ s0 = {inv'5 ((_16.current).current).t_UnionFind__0}
        MutBorrow.borrow_mut <t_UFInner> {((_16.current).current).t_UnionFind__0}
          (fun (_ret: MutBorrow.t t_UFInner) ->
            [ &__temp <- _ret ] -{inv'5 _ret.final}-
            [ &_16 <- { _16 with current = { _16.current with current = { t_UnionFind__0 = _ret.final } } } ] s1)
      | s1 = new {__temp} (fun (_ret: MutBorrow.t t_UFInner) -> [ &uf'1 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0
      [ s0 = {inv'12 uf'1}
        MutBorrow.borrow_mut <MutBorrow.t t_UFInner> {uf'1}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) ->
            [ &_27 <- _ret ] -{inv'12 _ret.final}-
            [ &uf'1 <- _ret.final ] s1)
      | s1 = deref_mut'0 {_27} (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) -> [ &_26 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0
      [ s0 = [ &_29 <- x'0 ] s1
      | s1 = {inv'4 ((_26.current).current).t_UFInner__perms}
        MutBorrow.borrow_mut <t_FMap> {((_26.current).current).t_UFInner__perms}
          (fun (_ret: MutBorrow.t t_FMap) ->
            [ &_25 <- _ret ] -{inv'4 _ret.final}-
            [ &_26 <- { _26 with current = { _26.current with current = { (_26.current).current with t_UFInner__perms = _ret.final } } } ]
            s2)
      | s2 = split_mut_ghost {_25} {_29} (fun (_ret: tuple) -> [ &_24 <- _ret ] s3)
      | s3 = bb7 ]
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'14 _26} s1
      | s1 = -{resolve'4 _26}- s2
      | s2 = new'0 {_24} (fun (_ret: tuple) -> [ &_23 <- _ret ] s3)
      | s3 = bb8 ]
    | bb8 = s0 [ s0 = split {_23} (fun (_ret: tuple'0) -> [ &_22 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = [ &perm_x <- _22._p0'0 ] s1
      | s1 = [ &m <- _22._p1'0 ] s2
      | s2 = as_mut {x'0.t_Element__0} {perm_x} (fun (_ret: MutBorrow.t t_Node) -> [ &_31 <- _ret ] s3)
      | s3 = bb10 ]
    | bb10 = s0
      [ s0 = {inv'1 _31.current}
        MutBorrow.borrow_final <t_Node> {_31.current} {MutBorrow.get_id _31}
          (fun (_ret: MutBorrow.t t_Node) ->
            [ &bx <- _ret ] -{inv'1 _ret.final}-
            [ &_31 <- { _31 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv'22 _31} s2
      | s2 = -{resolve'6 _31}- s3
      | s3 = {inv'20 m}
        MutBorrow.borrow_mut <MutBorrow.t t_FMap> {m}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_FMap)) ->
            [ &_44 <- _ret ] -{inv'20 _ret.final}-
            [ &m <- _ret.final ] s4)
      | s4 = deref_mut'1 {_44} (fun (_ret: MutBorrow.t (MutBorrow.t t_FMap)) -> [ &_43 <- _ret ] s5)
      | s5 = bb11 ]
    | bb11 = s0
      [ s0 = [ &_46 <- y'0 ] s1
      | s1 = {inv'4 (_43.current).current}
        MutBorrow.borrow_mut <t_FMap> {(_43.current).current}
          (fun (_ret: MutBorrow.t t_FMap) ->
            [ &_42 <- _ret ] -{inv'4 _ret.final}-
            [ &_43 <- { _43 with current = { _43.current with current = _ret.final } } ] s2)
      | s2 = get_mut_ghost {_42} {_46} (fun (_ret: t_Option'0) -> [ &_41 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = s0 [ s0 = unwrap {_41} (fun (_ret: MutBorrow.t t_PtrOwn) -> [ &_40 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0
      [ s0 = {inv'3 _40.current}
        MutBorrow.borrow_final <t_PtrOwn> {_40.current} {MutBorrow.get_id _40}
          (fun (_ret: MutBorrow.t t_PtrOwn) ->
            [ &_39 <- _ret ] -{inv'3 _ret.final}-
            [ &_40 <- { _40 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv'24 _43} s2
      | s2 = -{resolve'8 _43}- s3
      | s3 = {[@expl:type invariant] inv'16 _40} s4
      | s4 = -{resolve'10 _40}- s5
      | s5 = {inv'3 _39.current}
        MutBorrow.borrow_final <t_PtrOwn> {_39.current} {MutBorrow.get_id _39}
          (fun (_ret: MutBorrow.t t_PtrOwn) ->
            [ &_38 <- _ret ] -{inv'3 _ret.final}-
            [ &_39 <- { _39 with current = _ret.final } ] s6)
      | s6 = new'1 {_38} (fun (_ret: MutBorrow.t t_PtrOwn) -> [ &_37 <- _ret ] s7)
      | s7 = bb14 ]
    | bb14 = s0
      [ s0 = {[@expl:type invariant] inv'16 _39} s1
      | s1 = -{resolve'10 _39}- s2
      | s2 = as_mut {y'0.t_Element__0} {_37} (fun (_ret: MutBorrow.t t_Node) -> [ &_35 <- _ret ] s3)
      | s3 = bb15 ]
    | bb15 = s0
      [ s0 = {inv'1 _35.current}
        MutBorrow.borrow_final <t_Node> {_35.current} {MutBorrow.get_id _35}
          (fun (_ret: MutBorrow.t t_Node) ->
            [ &by' <- _ret ] -{inv'1 _ret.final}-
            [ &_35 <- { _35 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv'22 _35} s2
      | s2 = -{resolve'6 _35}- s3
      | s3 = any
        [ br0 (x0: t_PeanoInt) (x1: t_T) -> {bx.current = C_Root x0 x1} (! bb18)
        | br1 (x0: t_Element) -> {bx.current = C_Link x0} (! bb16) ] ]
    | bb16 = s0
      [ s0 = {[@expl:type invariant] inv'22 by'} s1
      | s1 = -{resolve'6 by'}- s2
      | s2 = {[@expl:type invariant] inv'22 bx} s3
      | s3 = -{resolve'6 bx}- s4
      | s4 = {false} any ]
    | bb18 = s0
      [ s0 = v_Root {bx.current}
          (fun (rrank: t_PeanoInt) (rpayload: t_T) ->
            MutBorrow.borrow_mut <t_PeanoInt> {rrank}
              (fun (_ret: MutBorrow.t t_PeanoInt) ->
                [ &rx <- _ret ] [ &bx <- { bx with current = C_Root _ret.final rpayload } ] s1))
      | s1 = any
        [ br0 (x0: t_PeanoInt) (x1: t_T) -> {by'.current = C_Root x0 x1} (! bb21)
        | br1 (x0: t_Element) -> {by'.current = C_Link x0} (! bb19) ] ]
    | bb19 = s0
      [ s0 = -{resolve'12 rx}- s1
      | s1 = {[@expl:type invariant] inv'22 by'} s2
      | s2 = -{resolve'6 by'}- s3
      | s3 = {false} any ]
    | bb21 = s0
      [ s0 = v_Root {by'.current}
          (fun (rrank: t_PeanoInt) (rpayload: t_T) ->
            MutBorrow.borrow_mut <t_PeanoInt> {rrank}
              (fun (_ret: MutBorrow.t t_PeanoInt) ->
                [ &ry <- _ret ] [ &by' <- { by' with current = C_Root _ret.final rpayload } ] s1))
      | s1 = MutBorrow.borrow_final <t_PeanoInt> {ry.current} {MutBorrow.get_id ry}
          (fun (_ret: MutBorrow.t t_PeanoInt) -> [ &_56 <- _ret ] [ &ry <- { ry with current = _ret.final } ] s2)
      | s2 = lt {rx} {_56} (fun (_ret: bool) -> [ &_53 <- _ret ] s3)
      | s3 = bb22 ]
    | bb22 = s0 [ s0 = -{resolve'12 _56}- s1 | s1 = any [ br0 -> {_53 = false} (! bb34) | br1 -> {_53} (! bb23) ] ]
    | bb23 = s0
      [ s0 = -{resolve'12 ry}- s1
      | s1 = -{resolve'12 rx}- s2
      | s2 = {[@expl:type invariant] inv'22 by'} s3
      | s3 = -{resolve'6 by'}- s4
      | s4 = {[@expl:type invariant] inv'20 m} s5
      | s5 = -{resolve'16 m}- s6
      | s6 = [ &_57 <- C_Link y'0 ] s7
      | s7 = bb24 ]
    | bb24 = s0
      [ s0 = {[@expl:type invariant] inv'1 bx.current} s1
      | s1 = [ &bx <- { bx with current = _57 } ] s2
      | s2 = {[@expl:type invariant] inv'22 bx} s3
      | s3 = -{resolve'6 bx}- s4
      | s4 = bb26 ]
    | bb26 = s0
      [ s0 = [ &_61 <- [%#sunion_find] fun (z: t_Element) -> if index_logic'1 (uf'1.current).t_UFInner__roots z
        = x'0 then
          y'0
        else
          index_logic'1 (uf'1.current).t_UFInner__roots z
         ] s1
      | s1 = bb27 ]
    | bb27 = s0
      [ s0 = {inv'12 uf'1}
        MutBorrow.borrow_mut <MutBorrow.t t_UFInner> {uf'1}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) ->
            [ &_64 <- _ret ] -{inv'12 _ret.final}-
            [ &uf'1 <- _ret.final ] s1)
      | s1 = deref_mut'0 {_64} (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) -> [ &_63 <- _ret ] s2)
      | s2 = bb28 ]
    | bb28 = s0
      [ s0 =
        [ &_63 <- { _63 with current = { _63.current with current = { (_63.current).current with t_UFInner__roots = _61 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv'14 _63} s2
      | s2 = -{resolve'4 _63}- s3
      | s3 = [ &_65 <- [%#sunion_find'0] (uf'1.current).t_UFInner__max_depth + 1 ] s4
      | s4 = bb29 ]
    | bb29 = s0
      [ s0 = {inv'12 uf'1}
        MutBorrow.borrow_mut <MutBorrow.t t_UFInner> {uf'1}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) ->
            [ &_68 <- _ret ] -{inv'12 _ret.final}-
            [ &uf'1 <- _ret.final ] s1)
      | s1 = deref_mut'0 {_68} (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) -> [ &_67 <- _ret ] s2)
      | s2 = bb30 ]
    | bb30 = s0
      [ s0 =
        [ &_67 <- { _67 with current = { _67.current with current = { (_67.current).current with t_UFInner__max_depth = _65 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv'14 _67} s2
      | s2 = -{resolve'4 _67}- s3
      | s3 = [ &_69 <- [%#sunion_find'1] Map.set (uf'1.current).t_UFInner__depth y'0 (1
        + MinMax.max (index_logic'3 (uf'1.current).t_UFInner__depth x'0) (index_logic'3 (uf'1.current).t_UFInner__depth y'0)) ]
        s4
      | s4 = bb31 ]
    | bb31 = s0
      [ s0 = {inv'12 uf'1}
        MutBorrow.borrow_mut <MutBorrow.t t_UFInner> {uf'1}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) ->
            [ &_72 <- _ret ] -{inv'12 _ret.final}-
            [ &uf'1 <- _ret.final ] s1)
      | s1 = deref_mut'0 {_72} (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) -> [ &_71 <- _ret ] s2)
      | s2 = bb32 ]
    | bb32 = s0
      [ s0 =
        [ &_71 <- { _71 with current = { _71.current with current = { (_71.current).current with t_UFInner__depth = _69 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv'14 _71} s2
      | s2 = -{resolve'4 _71}- s3
      | s3 = {[@expl:type invariant] inv'12 uf'1} s4
      | s4 = -{resolve'20 uf'1}- s5
      | s5 = {[@expl:type invariant] inv'10 _16} s6
      | s6 = -{resolve'22 _16}- s7
      | s7 = {[@expl:type invariant] inv'8 uf'0} s8
      | s8 = -{resolve'2 uf'0}- s9
      | s9 = new'2 {_60} (fun (_ret: ()) -> [ &_59 <- _ret ] s10)
      | s10 = bb33 ]
    | bb33 = s0 [ s0 = [ &_0 <- y'0 ] s1 | s1 = bb51 ]
    | bb34 = s0 [ s0 = eq'0 {rx} {ry} (fun (_ret: bool) -> [ &_74 <- _ret ] s1) | s1 = bb35 ]
    | bb35 = s0 [ s0 = -{resolve'12 ry}- s1 | s1 = any [ br0 -> {_74 = false} (! bb38) | br1 -> {_74} (! bb36) ] ]
    | bb36 = s0
      [ s0 = -{resolve'12 rx}- s1 | s1 = incr {rx.current} (fun (_ret: t_PeanoInt) -> [ &_77 <- _ret ] s2) | s2 = bb37 ]
    | bb37 = s0 [ s0 = {[@expl:type invariant] inv'22 bx} s1 | s1 = -{resolve'6 bx}- s2 | s2 = bb39 ]
    | bb38 = s0
      [ s0 = -{resolve'12 rx}- s1 | s1 = {[@expl:type invariant] inv'22 bx} s2 | s2 = -{resolve'6 bx}- s3 | s3 = bb39 ]
    | bb39 = s0 [ s0 = [ &_79 <- C_Link x'0 ] s1 | s1 = bb40 ]
    | bb40 = s0
      [ s0 = {[@expl:type invariant] inv'1 by'.current} s1
      | s1 = [ &by' <- { by' with current = _79 } ] s2
      | s2 = {[@expl:type invariant] inv'22 by'} s3
      | s3 = -{resolve'6 by'}- s4
      | s4 = {[@expl:type invariant] inv'20 m} s5
      | s5 = -{resolve'16 m}- s6
      | s6 = bb42 ]
    | bb42 = s0
      [ s0 = [ &_83 <- [%#sunion_find'2] fun (z: t_Element) -> if index_logic'1 (uf'1.current).t_UFInner__roots z
        = y'0 then
          x'0
        else
          index_logic'1 (uf'1.current).t_UFInner__roots z
         ] s1
      | s1 = bb43 ]
    | bb43 = s0
      [ s0 = {inv'12 uf'1}
        MutBorrow.borrow_mut <MutBorrow.t t_UFInner> {uf'1}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) ->
            [ &_86 <- _ret ] -{inv'12 _ret.final}-
            [ &uf'1 <- _ret.final ] s1)
      | s1 = deref_mut'0 {_86} (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) -> [ &_85 <- _ret ] s2)
      | s2 = bb44 ]
    | bb44 = s0
      [ s0 =
        [ &_85 <- { _85 with current = { _85.current with current = { (_85.current).current with t_UFInner__roots = _83 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv'14 _85} s2
      | s2 = -{resolve'4 _85}- s3
      | s3 = [ &_87 <- [%#sunion_find'3] (uf'1.current).t_UFInner__max_depth + 1 ] s4
      | s4 = bb45 ]
    | bb45 = s0
      [ s0 = {inv'12 uf'1}
        MutBorrow.borrow_mut <MutBorrow.t t_UFInner> {uf'1}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) ->
            [ &_90 <- _ret ] -{inv'12 _ret.final}-
            [ &uf'1 <- _ret.final ] s1)
      | s1 = deref_mut'0 {_90} (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) -> [ &_89 <- _ret ] s2)
      | s2 = bb46 ]
    | bb46 = s0
      [ s0 =
        [ &_89 <- { _89 with current = { _89.current with current = { (_89.current).current with t_UFInner__max_depth = _87 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv'14 _89} s2
      | s2 = -{resolve'4 _89}- s3
      | s3 = [ &_91 <- [%#sunion_find'4] Map.set (uf'1.current).t_UFInner__depth x'0 (1
        + MinMax.max (index_logic'3 (uf'1.current).t_UFInner__depth x'0) (index_logic'3 (uf'1.current).t_UFInner__depth y'0)) ]
        s4
      | s4 = bb47 ]
    | bb47 = s0
      [ s0 = {inv'12 uf'1}
        MutBorrow.borrow_mut <MutBorrow.t t_UFInner> {uf'1}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) ->
            [ &_94 <- _ret ] -{inv'12 _ret.final}-
            [ &uf'1 <- _ret.final ] s1)
      | s1 = deref_mut'0 {_94} (fun (_ret: MutBorrow.t (MutBorrow.t t_UFInner)) -> [ &_93 <- _ret ] s2)
      | s2 = bb48 ]
    | bb48 = s0
      [ s0 =
        [ &_93 <- { _93 with current = { _93.current with current = { (_93.current).current with t_UFInner__depth = _91 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv'14 _93} s2
      | s2 = -{resolve'4 _93}- s3
      | s3 = {[@expl:type invariant] inv'12 uf'1} s4
      | s4 = -{resolve'20 uf'1}- s5
      | s5 = {[@expl:type invariant] inv'10 _16} s6
      | s6 = -{resolve'22 _16}- s7
      | s7 = {[@expl:type invariant] inv'8 uf'0} s8
      | s8 = -{resolve'2 uf'0}- s9
      | s9 = new'2 {_82} (fun (_ret: ()) -> [ &_81 <- _ret ] s10)
      | s10 = bb49 ]
    | bb49 = s0 [ s0 = [ &_0 <- x'0 ] s1 | s1 = bb51 ]
    | bb51 = return''0 {_0} ]
    [ & _0: t_Element = Any.any_l ()
    | & uf'0: MutBorrow.t t_UnionFind = uf
    | & x'0: t_Element = x
    | & y'0: t_Element = y
    | & _11: bool = Any.any_l ()
    | & __temp: MutBorrow.t t_UFInner = Any.any_l ()
    | & _16: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & _17: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & uf'1: MutBorrow.t t_UFInner = Any.any_l ()
    | & perm_x: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & m: MutBorrow.t t_FMap = Any.any_l ()
    | & _22: tuple'0 = Any.any_l ()
    | & _23: tuple = Any.any_l ()
    | & _24: tuple = Any.any_l ()
    | & _25: MutBorrow.t t_FMap = Any.any_l ()
    | & _26: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _27: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _29: t_Element = Any.any_l ()
    | & bx: MutBorrow.t t_Node = Any.any_l ()
    | & _31: MutBorrow.t t_Node = Any.any_l ()
    | & by': MutBorrow.t t_Node = Any.any_l ()
    | & _35: MutBorrow.t t_Node = Any.any_l ()
    | & _37: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _38: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _39: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _40: MutBorrow.t t_PtrOwn = Any.any_l ()
    | & _41: t_Option'0 = Any.any_l ()
    | & _42: MutBorrow.t t_FMap = Any.any_l ()
    | & _43: MutBorrow.t (MutBorrow.t t_FMap) = Any.any_l ()
    | & _44: MutBorrow.t (MutBorrow.t t_FMap) = Any.any_l ()
    | & _46: t_Element = Any.any_l ()
    | & rx: MutBorrow.t t_PeanoInt = Any.any_l ()
    | & ry: MutBorrow.t t_PeanoInt = Any.any_l ()
    | & _53: bool = Any.any_l ()
    | & _56: MutBorrow.t t_PeanoInt = Any.any_l ()
    | & _57: t_Node = Any.any_l ()
    | & _59: () = Any.any_l ()
    | & _60: () = Any.any_l ()
    | & _61: Map.map t_Element t_Element = Any.any_l ()
    | & _63: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _64: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _65: int = Any.any_l ()
    | & _67: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _68: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _69: Map.map t_Element int = Any.any_l ()
    | & _71: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _72: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _74: bool = Any.any_l ()
    | & _77: t_PeanoInt = Any.any_l ()
    | & _79: t_Node = Any.any_l ()
    | & _81: () = Any.any_l ()
    | & _82: () = Any.any_l ()
    | & _83: Map.map t_Element t_Element = Any.any_l ()
    | & _85: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _86: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _87: int = Any.any_l ()
    | & _89: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _90: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _91: Map.map t_Element int = Any.any_l ()
    | & _93: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l ()
    | & _94: MutBorrow.t (MutBorrow.t t_UFInner) = Any.any_l () ])
    [ return''0 (result: t_Element) -> {[@expl:link ensures #0] [%#sunion_find'8] domain_unchanged uf
      /\ payloads_unchanged uf}
      {[@expl:link ensures #1] [%#sunion_find'9] result = root uf.current x \/ result = root uf.current y}
      {[@expl:link ensures #2] [%#sunion_find'10] result = root (fin'0 uf) result}
      {[@expl:link ensures #3] [%#sunion_find'11] forall z: t_Element. in_domain uf.current z
        -> root (fin'0 uf) z
        = (if root uf.current z = root uf.current x \/ root uf.current z = root uf.current y then
          result
        else
          root uf.current z
        )}
      (! return' {result}) ]
end
module M_union_find__implementation__union [#"union_find.rs" 332 4 332 97]
  let%span sunion_find = "union_find.rs" 332 24 332 26
  let%span sunion_find'0 = "union_find.rs" 324 4 324 51
  let%span sunion_find'1 = "union_find.rs" 325 4 325 64
  let%span sunion_find'2 = "union_find.rs" 326 14 326 58
  let%span sunion_find'3 = "union_find.rs" 327 14 330 31
  let%span sunion_find'4 = "union_find.rs" 249 19 249 21
  let%span sunion_find'5 = "union_find.rs" 246 4 246 35
  let%span sunion_find'6 = "union_find.rs" 247 14 247 37
  let%span sunion_find'7 = "union_find.rs" 248 4 248 30
  let%span sunion_find'8 = "union_find.rs" 288 19 288 21
  let%span sunion_find'9 = "union_find.rs" 279 4 279 51
  let%span sunion_find'10 = "union_find.rs" 280 15 280 49
  let%span sunion_find'11 = "union_find.rs" 281 4 281 64
  let%span sunion_find'12 = "union_find.rs" 282 14 282 58
  let%span sunion_find'13 = "union_find.rs" 283 14 283 42
  let%span sunion_find'14 = "union_find.rs" 284 14 286 98
  let%span sunion_find'15 = "union_find.rs" 103 8 103 16
  let%span sunion_find'16 = "union_find.rs" 164 24 164 60
  let%span sunion_find'17 = "union_find.rs" 171 24 171 72
  let%span sunion_find'18 = "union_find.rs" 127 8 127 16
  let%span sunion_find'19 = "union_find.rs" 154 16 156 64
  let%span sunion_find'20 = "union_find.rs" 96 19 96 28
  let%span sunion_find'21 = "union_find.rs" 97 18 97 150
  let%span sunion_find'22 = "union_find.rs" 95 8 95 16
  let%span sunion_find'23 = "union_find.rs" 134 8 134 16
  let%span sunion_find'24 = "union_find.rs" 114 19 114 28
  let%span sunion_find'25 = "union_find.rs" 115 18 117 42
  let%span sunion_find'26 = "union_find.rs" 113 8 113 16
  let%span sunion_find'27 = "union_find.rs" 73 12 88 53
  let%span sunion_find'28 = "union_find.rs" 25 8 25 16
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 89 22 89 26
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 89 4 89 48
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 88 14 88 35
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 183 15 183 16
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 183 4 185 17
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use set.Fset
  use map.Map
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate contains [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'28] addr_logic self.t_Element__0
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'1] Map.get (view self) k
  
  predicate contains'0 [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap] get self k <> C_None
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'0] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'2] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'0] lookup self key
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function val' (self: t_PtrOwn) : t_Node
  
  function index_logic'2 (self: Map.map t_Element t_T) (a: t_Element) : t_T = [%#smapping] Map.get self a
  
  function index_logic'3 (self: Map.map t_Element int) (a: t_Element) : int = [%#smapping] Map.get self a
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind) =
    [%#sunion_find'27] (forall e1: t_Element, e2: t_Element. contains (self.t_UnionFind__0).t_UFInner__domain e1
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
    /\ (forall e: t_Element [contains (self.t_UnionFind__0).t_UFInner__domain e]. contains (self.t_UnionFind__0).t_UFInner__domain e
      -> contains'0 (self.t_UnionFind__0).t_UFInner__perms e
      /\ ptr (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) = e.t_Element__0
      /\ contains (self.t_UnionFind__0).t_UFInner__domain (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
      /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots (index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e)
        = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e <> e
          /\ contains (self.t_UnionFind__0).t_UFInner__domain e2
          /\ index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e
          = index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e2
          | C_Root _ payload -> index_logic'1 (self.t_UnionFind__0).t_UFInner__roots e = e
          /\ index_logic'2 (self.t_UnionFind__0).t_UFInner__payloads e = payload
          end
      /\ match val' (index_logic'0 (self.t_UnionFind__0).t_UFInner__perms e) with
          | C_Link e2 -> index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e
          < index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e2
          | C_Root _ _ -> true
          end
      /\ index_logic'3 (self.t_UnionFind__0).t_UFInner__depth e <= (self.t_UnionFind__0).t_UFInner__max_depth)
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val''0} -> inv'2 val''0
        end)
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap'3] forall k: t_Element. contains'0 self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  predicate invariant''3 (self: MutBorrow.t t_UnionFind) = [%#sinvariant] inv'6 self.current /\ inv'6 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate invariant''4 (self: MutBorrow.t t_UnionFind) = [%#sghost'6] inv'7 self
  
  predicate inv'8 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'8 x]. inv'8 x = invariant''4 x
  
  predicate invariant''5 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) =
    [%#sinvariant] inv'8 self.current /\ inv'8 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'9 (_0: MutBorrow.t (MutBorrow.t t_UnionFind))
  
  axiom inv_axiom'8 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UnionFind) [inv'9 x]. inv'9 x = invariant''5 x
  
  predicate invariant''6 (self: MutBorrow.t (MutBorrow.t t_UnionFind)) =
    [%#sinvariant] inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'10 (_0: MutBorrow.t (MutBorrow.t t_UnionFind))
  
  axiom inv_axiom'9 [@rewrite]: forall x: MutBorrow.t (MutBorrow.t t_UnionFind) [inv'10 x]. inv'10 x = invariant''6 x
  
  let rec deref_mut (self: MutBorrow.t (MutBorrow.t t_UnionFind)) (return' (x: MutBorrow.t (MutBorrow.t t_UnionFind))) =
    {[@expl:deref_mut 'self' type invariant] [%#sghost] inv'9 self}
    any
    [ return''0 (result: MutBorrow.t (MutBorrow.t t_UnionFind)) -> {[%#sghost'0] inv'10 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t (MutBorrow.t t_UnionFind)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t (MutBorrow.t t_UnionFind)) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_UnionFind) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: MutBorrow.t t_UnionFind) = resolve'1 _0
  
  let rec new (x: MutBorrow.t t_UnionFind) (return' (x'0: MutBorrow.t t_UnionFind)) =
    {[@expl:new 'x' type invariant] [%#sghost'2] inv'7 x}
    any
    [ return''0 (result: MutBorrow.t t_UnionFind) -> {[%#sghost'3] inv'8 result}
      {[%#sghost'4] result = x}
      (! return' {result}) ]
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element =
    [%#sunion_find'22] (self.t_UnionFind__0).t_UFInner__domain
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'20] inv'6 self)
      -> ([%#sunion_find'21] forall e1: t_Element, e2: t_Element. contains (domain self) e1
          /\ contains (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'15] contains (domain self) e
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self: t_UnionFind) : Map.map t_Element t_Element =
    [%#sunion_find'26] (self.t_UnionFind__0).t_UFInner__roots
  
  axiom roots_map_spec: forall self: t_UnionFind. ([%#sunion_find'24] inv'6 self)
      -> ([%#sunion_find'25] forall e: t_Element. in_domain self e
        -> in_domain self (index_logic'1 (roots_map self) e)
        /\ index_logic'1 (roots_map self) e = index_logic'1 (roots_map self) (index_logic'1 (roots_map self) e))
  
  function root [#"union_find.rs" 129 8 129 54] (self: t_UnionFind) (e: t_Element) : t_Element =
    [%#sunion_find'18] index_logic'1 (roots_map self) e
  
  function payloads_map [#"union_find.rs" 135 8 135 59] (self: t_UnionFind) : Map.map t_Element t_T =
    [%#sunion_find'23] (self.t_UnionFind__0).t_UFInner__payloads
  
  predicate unchanged [#"union_find.rs" 152 8 152 43] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'19] domain self.current = domain self.final
    /\ roots_map self.current = roots_map self.final /\ payloads_map self.current = payloads_map self.final
  
  let rec find (uf: MutBorrow.t t_UnionFind) (elem: t_Element) (return' (x: t_Element)) =
    {[@expl:find 'uf' type invariant] [%#sunion_find'4] inv'8 uf}
    {[@expl:find requires] [%#sunion_find'5] in_domain uf.current elem}
    any
    [ return''0 (result: t_Element) -> {[%#sunion_find'6] result = root uf.current elem}
      {[%#sunion_find'7] unchanged uf}
      (! return' {result}) ]
  
  predicate domain_unchanged [#"union_find.rs" 163 8 163 50] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'16] domain self.current = domain self.final
  
  predicate payloads_unchanged [#"union_find.rs" 170 8 170 52] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'17] payloads_map self.current = payloads_map self.final
  
  function fin (self: MutBorrow.t t_UnionFind) : t_UnionFind = [%#sghost'5] self.final
  
  let rec link (uf: MutBorrow.t t_UnionFind) (x: t_Element) (y: t_Element) (return' (x'0: t_Element)) =
    {[@expl:link 'uf' type invariant] [%#sunion_find'8] inv'8 uf}
    {[@expl:link requires #0] [%#sunion_find'9] in_domain uf.current x /\ in_domain uf.current y}
    {[@expl:link requires #1] [%#sunion_find'10] root uf.current x = x /\ root uf.current y = y}
    any
    [ return''0 (result: t_Element) -> {[%#sunion_find'11] domain_unchanged uf /\ payloads_unchanged uf}
      {[%#sunion_find'12] result = root uf.current x \/ result = root uf.current y}
      {[%#sunion_find'13] result = root (fin uf) result}
      {[%#sunion_find'14] forall z: t_Element. in_domain uf.current z
        -> root (fin uf) z
        = (if root uf.current z = root uf.current x \/ root uf.current z = root uf.current y then
          result
        else
          root uf.current z
        )}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec union [#"union_find.rs" 332 4 332 97] (uf: MutBorrow.t t_UnionFind) (x: t_Element) (y: t_Element)
    (return' (x'0: t_Element)) = {[@expl:union 'uf' type invariant] [%#sunion_find] inv'8 uf}
    {[@expl:union requires] [%#sunion_find'0] in_domain uf.current x /\ in_domain uf.current y}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'8 uf'0}
        MutBorrow.borrow_mut <MutBorrow.t t_UnionFind> {uf'0}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) ->
            [ &_14 <- _ret ] -{inv'8 _ret.final}-
            [ &uf'0 <- _ret.final ] s1)
      | s1 = deref_mut {_14} (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) -> [ &_13 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'6 (_13.current).current}
        MutBorrow.borrow_mut <t_UnionFind> {(_13.current).current}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_12 <- _ret ] -{inv'6 _ret.final}-
            [ &_13 <- { _13 with current = { _13.current with current = _ret.final } } ] s1)
      | s1 = {inv'6 _12.current}
        MutBorrow.borrow_final <t_UnionFind> {_12.current} {MutBorrow.get_id _12}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_11 <- _ret ] -{inv'6 _ret.final}-
            [ &_12 <- { _12 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv'10 _13} s3
      | s3 = -{resolve'0 _13}- s4
      | s4 = {[@expl:type invariant] inv'7 _12} s5
      | s5 = -{resolve'2 _12}- s6
      | s6 = {inv'6 _11.current}
        MutBorrow.borrow_final <t_UnionFind> {_11.current} {MutBorrow.get_id _11}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_10 <- _ret ] -{inv'6 _ret.final}-
            [ &_11 <- { _11 with current = _ret.final } ] s7)
      | s7 = new {_10} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_9 <- _ret ] s8)
      | s8 = bb2 ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'7 _11} s1
      | s1 = -{resolve'2 _11}- s2
      | s2 = find {_9} {x'0} (fun (_ret: t_Element) -> [ &rx <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0
      [ s0 = {inv'8 uf'0}
        MutBorrow.borrow_mut <MutBorrow.t t_UnionFind> {uf'0}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) ->
            [ &_22 <- _ret ] -{inv'8 _ret.final}-
            [ &uf'0 <- _ret.final ] s1)
      | s1 = deref_mut {_22} (fun (_ret: MutBorrow.t (MutBorrow.t t_UnionFind)) -> [ &_21 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0
      [ s0 = {inv'6 (_21.current).current}
        MutBorrow.borrow_mut <t_UnionFind> {(_21.current).current}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_20 <- _ret ] -{inv'6 _ret.final}-
            [ &_21 <- { _21 with current = { _21.current with current = _ret.final } } ] s1)
      | s1 = {inv'6 _20.current}
        MutBorrow.borrow_final <t_UnionFind> {_20.current} {MutBorrow.get_id _20}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_19 <- _ret ] -{inv'6 _ret.final}-
            [ &_20 <- { _20 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv'10 _21} s3
      | s3 = -{resolve'0 _21}- s4
      | s4 = {[@expl:type invariant] inv'7 _20} s5
      | s5 = -{resolve'2 _20}- s6
      | s6 = {inv'6 _19.current}
        MutBorrow.borrow_final <t_UnionFind> {_19.current} {MutBorrow.get_id _19}
          (fun (_ret: MutBorrow.t t_UnionFind) ->
            [ &_18 <- _ret ] -{inv'6 _ret.final}-
            [ &_19 <- { _19 with current = _ret.final } ] s7)
      | s7 = new {_18} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_17 <- _ret ] s8)
      | s8 = bb5 ]
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'7 _19} s1
      | s1 = -{resolve'2 _19}- s2
      | s2 = find {_17} {y'0} (fun (_ret: t_Element) -> [ &ry <- _ret ] s3)
      | s3 = bb6 ]
    | bb6 = s0 [ s0 = link {uf'0} {rx} {ry} (fun (_ret: t_Element) -> [ &_0 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = return''0 {_0} ]
    [ & _0: t_Element = Any.any_l ()
    | & uf'0: MutBorrow.t t_UnionFind = uf
    | & x'0: t_Element = x
    | & y'0: t_Element = y
    | & rx: t_Element = Any.any_l ()
    | & _9: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _10: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _11: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _12: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _13: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & _14: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & ry: t_Element = Any.any_l ()
    | & _17: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _18: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _19: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _20: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _21: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l ()
    | & _22: MutBorrow.t (MutBorrow.t t_UnionFind) = Any.any_l () ])
    [ return''0 (result: t_Element) -> {[@expl:union ensures #0] [%#sunion_find'1] domain_unchanged uf
      /\ payloads_unchanged uf}
      {[@expl:union ensures #1] [%#sunion_find'2] result = root uf.current x \/ result = root uf.current y}
      {[@expl:union ensures #2] [%#sunion_find'3] forall z: t_Element. in_domain uf.current z
        -> root (fin uf) z
        = (if root uf.current z = root uf.current x \/ root uf.current z = root uf.current y then
          result
        else
          root uf.current z
        )}
      (! return' {result}) ]
end
module M_union_find__example [#"union_find.rs" 342 0 342 16]
  let%span sunion_find = "union_find.rs" 345 34 345 35
  let%span sunion_find'0 = "union_find.rs" 346 34 346 35
  let%span sunion_find'1 = "union_find.rs" 347 34 347 35
  let%span sunion_find'2 = "union_find.rs" 349 36 349 37
  let%span sunion_find'3 = "union_find.rs" 350 36 350 37
  let%span sunion_find'4 = "union_find.rs" 351 36 351 37
  let%span sunion_find'5 = "union_find.rs" 360 36 360 37
  let%span sunion_find'6 = "union_find.rs" 360 12 360 37
  let%span sunion_find'7 = "union_find.rs" 359 12 359 58
  let%span sunion_find'8 = "union_find.rs" 354 12 354 40
  let%span sunion_find'9 = "union_find.rs" 351 12 351 37
  let%span sunion_find'10 = "union_find.rs" 350 12 350 37
  let%span sunion_find'11 = "union_find.rs" 349 12 349 37
  let%span sunion_find'12 = "union_find.rs" 176 23 176 42
  let%span sunion_find'13 = "union_find.rs" 175 4 175 42
  let%span sunion_find'14 = "union_find.rs" 195 23 195 25
  let%span sunion_find'15 = "union_find.rs" 191 4 191 37
  let%span sunion_find'16 = "union_find.rs" 192 14 192 58
  let%span sunion_find'17 = "union_find.rs" 193 14 193 69
  let%span sunion_find'18 = "union_find.rs" 194 14 194 76
  let%span sunion_find'19 = "union_find.rs" 259 18 259 20
  let%span sunion_find'20 = "union_find.rs" 256 4 256 35
  let%span sunion_find'21 = "union_find.rs" 257 15 257 36
  let%span sunion_find'22 = "union_find.rs" 258 14 258 41
  let%span sunion_find'23 = "union_find.rs" 332 24 332 26
  let%span sunion_find'24 = "union_find.rs" 324 4 324 51
  let%span sunion_find'25 = "union_find.rs" 325 4 325 64
  let%span sunion_find'26 = "union_find.rs" 326 14 326 58
  let%span sunion_find'27 = "union_find.rs" 327 14 330 31
  let%span sunion_find'28 = "union_find.rs" 272 24 272 26
  let%span sunion_find'29 = "union_find.rs" 268 4 268 33
  let%span sunion_find'30 = "union_find.rs" 269 4 269 33
  let%span sunion_find'31 = "union_find.rs" 270 14 270 52
  let%span sunion_find'32 = "union_find.rs" 271 4 271 30
  let%span sunion_find'33 = "union_find.rs" 249 19 249 21
  let%span sunion_find'34 = "union_find.rs" 246 4 246 35
  let%span sunion_find'35 = "union_find.rs" 247 14 247 37
  let%span sunion_find'36 = "union_find.rs" 248 4 248 30
  let%span sunion_find'37 = "union_find.rs" 96 19 96 28
  let%span sunion_find'38 = "union_find.rs" 97 18 97 150
  let%span sunion_find'39 = "union_find.rs" 103 8 103 16
  let%span sunion_find'40 = "union_find.rs" 114 19 114 28
  let%span sunion_find'41 = "union_find.rs" 115 18 117 42
  let%span sunion_find'42 = "union_find.rs" 127 8 127 16
  let%span sunion_find'43 = "union_find.rs" 143 8 143 16
  let%span sunion_find'44 = "union_find.rs" 164 24 164 60
  let%span sunion_find'45 = "union_find.rs" 171 24 171 72
  let%span sunion_find'46 = "union_find.rs" 154 16 156 64
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 62 8 62 26
  let%span sfset'0 = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 150 27 150 31
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 150 4 150 49
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 149 14 149 36
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 142 19 142 23
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 142 4 142 37
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 141 14 141 32
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 95 8 95 18
  
  use creusot.prelude.Opaque
  use set.Fset
  use creusot.int.Int32
  use map.Map
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  type t_FMap
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element Int32.t;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind)
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt Int32.t | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'2] Map.get (view self) k
  
  predicate contains [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap'0] get self k <> C_None
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_PtrOwn)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn [inv'0 x]. inv'0 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val'} -> true
        end)
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'0] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'3] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'1] lookup self key
  
  predicate invariant''1 (self: t_FMap) =
    [%#sfmap] forall k: t_Element. contains self k -> inv k /\ inv'0 (index_logic'0 self k)
  
  predicate inv'1 (_0: t_FMap)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_FMap [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate inv'2 (_0: t_UFInner)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_UFInner [inv'2 x]. inv'2 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'1 perms
        end
  
  predicate inv'3 (_0: t_UnionFind)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_UnionFind [inv'3 x]. inv'3 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'2 a_0
        end)
  
  predicate invariant''2 (self: t_UnionFind) = [%#sghost'6] inv'3 self
  
  predicate inv'4 (_0: t_UnionFind)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UnionFind [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate contains'0 [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset'0] Fset.mem e self
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'37] inv'3 self)
      -> ([%#sunion_find'38] forall e1: t_Element, e2: t_Element. contains'0 (domain self) e1
          /\ contains'0 (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  let rec new (return' (x: t_UnionFind)) = any
    [ return''0 (result: t_UnionFind) -> {[%#sunion_find'12] inv'4 result}
      {[%#sunion_find'13] Fset.is_empty (domain result)}
      (! return' {result}) ]
  
  predicate invariant''3 (self: MutBorrow.t t_UnionFind) = [%#sinvariant] inv'4 self.current /\ inv'4 self.final
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'5 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'5 x]. inv'5 x = invariant''3 x
  
  predicate invariant''4 (self: MutBorrow.t t_UnionFind) = [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'6 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'6 x]. inv'6 x = invariant''4 x
  
  predicate invariant''5 (self: MutBorrow.t t_UnionFind) = [%#sghost'6] inv'6 self
  
  predicate inv'7 (_0: MutBorrow.t t_UnionFind)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_UnionFind [inv'7 x]. inv'7 x = invariant''5 x
  
  let rec borrow_mut (self: MutBorrow.t t_UnionFind) (return' (x: MutBorrow.t t_UnionFind)) =
    {[@expl:borrow_mut 'self' type invariant] [%#sghost] inv'5 self}
    any
    [ return''0 (result: MutBorrow.t t_UnionFind) -> {[%#sghost'0] inv'7 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'39] contains'0 (domain self) e
  
  function fin (self: MutBorrow.t t_UnionFind) : t_UnionFind = [%#sghost'5] self.final
  
  function insert [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) : Fset.fset t_Element =
    [%#sfset] Fset.add e self
  
  function index_logic'1 (self: Map.map t_Element t_Element) (a: t_Element) : t_Element = [%#smapping] Map.get self a
  
  function roots_map [#"union_find.rs" 119 8 119 65] (self: t_UnionFind) : Map.map t_Element t_Element
  
  axiom roots_map_spec: forall self: t_UnionFind. ([%#sunion_find'40] inv'3 self)
      -> ([%#sunion_find'41] forall e: t_Element. in_domain self e
        -> in_domain self (index_logic'1 (roots_map self) e)
        /\ index_logic'1 (roots_map self) e = index_logic'1 (roots_map self) (index_logic'1 (roots_map self) e))
  
  function payloads_map [#"union_find.rs" 135 8 135 59] (self: t_UnionFind) : Map.map t_Element Int32.t
  
  let rec make (uf: MutBorrow.t t_UnionFind) (payload: Int32.t) (return' (x: t_Element)) =
    {[@expl:make 'uf' type invariant] [%#sunion_find'14] inv'7 uf}
    any
    [ return''0 (result: t_Element) -> {[%#sunion_find'15] not in_domain uf.current result}
      {[%#sunion_find'16] domain (fin uf) = insert (domain uf.current) result}
      {[%#sunion_find'17] roots_map (fin uf) = Map.set (roots_map uf.current) result result}
      {[%#sunion_find'18] payloads_map (fin uf) = Map.set (payloads_map uf.current) result payload}
      (! return' {result}) ]
  
  predicate invariant''6 (self: t_UnionFind) = [%#sinvariant'0] inv'4 self
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'8 (_0: t_UnionFind)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_UnionFind [inv'8 x]. inv'8 x = invariant''6 x
  
  predicate invariant''7 (self: t_UnionFind) = [%#sinvariant'0] inv'3 self
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'9 (_0: t_UnionFind)
  
  axiom inv_axiom'9 [@rewrite]: forall x: t_UnionFind [inv'9 x]. inv'9 x = invariant''7 x
  
  predicate invariant''8 (self: t_UnionFind) = [%#sghost'6] inv'9 self
  
  predicate inv'10 (_0: t_UnionFind)
  
  axiom inv_axiom'10 [@rewrite]: forall x: t_UnionFind [inv'10 x]. inv'10 x = invariant''8 x
  
  let rec borrow (self: t_UnionFind) (return' (x: t_UnionFind)) =
    {[@expl:borrow 'self' type invariant] [%#sghost'2] inv'8 self}
    any
    [ return''0 (result: t_UnionFind) -> {[%#sghost'3] inv'10 result}
      {[%#sghost'4] result = self}
      (! return' {result}) ]
  
  function root [#"union_find.rs" 129 8 129 54] (self: t_UnionFind) (e: t_Element) : t_Element =
    [%#sunion_find'42] index_logic'1 (roots_map self) e
  
  function index_logic'2 (self: Map.map t_Element Int32.t) (a: t_Element) : Int32.t = [%#smapping] Map.get self a
  
  function payload [#"union_find.rs" 145 8 145 48] (self: t_UnionFind) (e: t_Element) : Int32.t =
    [%#sunion_find'43] index_logic'2 (payloads_map self) e
  
  let rec get'0 (uf: t_UnionFind) (elem: t_Element) (return' (x: Int32.t)) =
    {[@expl:get 'uf' type invariant] [%#sunion_find'19] inv'10 uf}
    {[@expl:get requires #0] [%#sunion_find'20] in_domain uf elem}
    {[@expl:get requires #1] [%#sunion_find'21] root uf elem = elem}
    any [ return''0 (result: Int32.t) -> {[%#sunion_find'22] result = payload uf elem} (! return' {result}) ]
  
  predicate domain_unchanged [#"union_find.rs" 163 8 163 50] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'44] domain self.current = domain self.final
  
  predicate payloads_unchanged [#"union_find.rs" 170 8 170 52] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'45] payloads_map self.current = payloads_map self.final
  
  let rec union (uf: MutBorrow.t t_UnionFind) (x: t_Element) (y: t_Element) (return' (x'0: t_Element)) =
    {[@expl:union 'uf' type invariant] [%#sunion_find'23] inv'7 uf}
    {[@expl:union requires] [%#sunion_find'24] in_domain uf.current x /\ in_domain uf.current y}
    any
    [ return''0 (result: t_Element) -> {[%#sunion_find'25] domain_unchanged uf /\ payloads_unchanged uf}
      {[%#sunion_find'26] result = root uf.current x \/ result = root uf.current y}
      {[%#sunion_find'27] forall z: t_Element. in_domain uf.current z
        -> root (fin uf) z
        = (if root uf.current z = root uf.current x \/ root uf.current z = root uf.current y then
          result
        else
          root uf.current z
        )}
      (! return' {result}) ]
  
  predicate unchanged [#"union_find.rs" 152 8 152 43] (self: MutBorrow.t t_UnionFind) =
    [%#sunion_find'46] domain self.current = domain self.final
    /\ roots_map self.current = roots_map self.final /\ payloads_map self.current = payloads_map self.final
  
  let rec equiv (uf: MutBorrow.t t_UnionFind) (e1: t_Element) (e2: t_Element) (return' (x: bool)) =
    {[@expl:equiv 'uf' type invariant] [%#sunion_find'28] inv'7 uf}
    {[@expl:equiv requires #0] [%#sunion_find'29] in_domain uf.current e1}
    {[@expl:equiv requires #1] [%#sunion_find'30] in_domain uf.current e2}
    any
    [ return''0 (result: bool) -> {[%#sunion_find'31] result = (root uf.current e1 = root uf.current e2)}
      {[%#sunion_find'32] unchanged uf}
      (! return' {result}) ]
  
  let rec find (uf: MutBorrow.t t_UnionFind) (elem: t_Element) (return' (x: t_Element)) =
    {[@expl:find 'uf' type invariant] [%#sunion_find'33] inv'7 uf}
    {[@expl:find requires] [%#sunion_find'34] in_domain uf.current elem}
    any
    [ return''0 (result: t_Element) -> {[%#sunion_find'35] result = root uf.current elem}
      {[%#sunion_find'36] unchanged uf}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec example [#"union_find.rs" 342 0 342 16] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: t_UnionFind) -> [ &uf <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'4 uf}
        MutBorrow.borrow_mut <t_UnionFind> {uf}
          (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_4 <- _ret ] -{inv'4 _ret.final}- [ &uf <- _ret.final ] s1)
      | s1 = borrow_mut {_4} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = make {_3} {[%#sunion_find] (1: Int32.t)} (fun (_ret: t_Element) -> [ &x <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = {inv'4 uf}
        MutBorrow.borrow_mut <t_UnionFind> {uf}
          (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_7 <- _ret ] -{inv'4 _ret.final}- [ &uf <- _ret.final ] s1)
      | s1 = borrow_mut {_7} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_6 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0
      [ s0 = make {_6} {[%#sunion_find'0] (2: Int32.t)} (fun (_ret: t_Element) -> [ &y <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = {inv'4 uf}
        MutBorrow.borrow_mut <t_UnionFind> {uf}
          (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_10 <- _ret ] -{inv'4 _ret.final}- [ &uf <- _ret.final ] s1)
      | s1 = borrow_mut {_10} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_9 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0
      [ s0 = make {_9} {[%#sunion_find'1] (3: Int32.t)} (fun (_ret: t_Element) -> [ &z <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0 [ s0 = borrow {uf} (fun (_ret: t_UnionFind) -> [ &_15 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0 [ s0 = get'0 {_15} {x} (fun (_ret: Int32.t) -> [ &_14 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = [ &_12 <- _14 = ([%#sunion_find'2] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_12 = false} (! bb10) | br1 -> {_12} (! bb12) ] ]
    | bb12 = s0 [ s0 = borrow {uf} (fun (_ret: t_UnionFind) -> [ &_23 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0 [ s0 = get'0 {_23} {y} (fun (_ret: Int32.t) -> [ &_22 <- _ret ] s1) | s1 = bb14 ]
    | bb14 = s0
      [ s0 = [ &_20 <- _22 = ([%#sunion_find'3] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_20 = false} (! bb15) | br1 -> {_20} (! bb17) ] ]
    | bb17 = s0 [ s0 = borrow {uf} (fun (_ret: t_UnionFind) -> [ &_31 <- _ret ] s1) | s1 = bb18 ]
    | bb18 = s0 [ s0 = get'0 {_31} {z} (fun (_ret: Int32.t) -> [ &_30 <- _ret ] s1) | s1 = bb19 ]
    | bb19 = s0
      [ s0 = [ &_28 <- _30 = ([%#sunion_find'4] (3: Int32.t)) ] s1
      | s1 = any [ br0 -> {_28 = false} (! bb20) | br1 -> {_28} (! bb22) ] ]
    | bb22 = s0
      [ s0 = {inv'4 uf}
        MutBorrow.borrow_mut <t_UnionFind> {uf}
          (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_37 <- _ret ] -{inv'4 _ret.final}- [ &uf <- _ret.final ] s1)
      | s1 = borrow_mut {_37} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_36 <- _ret ] s2)
      | s2 = bb23 ]
    | bb23 = s0 [ s0 = union {_36} {x} {y} (fun (_ret: t_Element) -> [ &_35 <- _ret ] s1) | s1 = bb24 ]
    | bb24 = s0
      [ s0 = {inv'4 uf}
        MutBorrow.borrow_mut <t_UnionFind> {uf}
          (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_43 <- _ret ] -{inv'4 _ret.final}- [ &uf <- _ret.final ] s1)
      | s1 = borrow_mut {_43} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_42 <- _ret ] s2)
      | s2 = bb25 ]
    | bb25 = s0 [ s0 = equiv {_42} {x} {y} (fun (_ret: bool) -> [ &_41 <- _ret ] s1) | s1 = bb26 ]
    | bb26 = any [ br0 -> {_41 = false} (! bb27) | br1 -> {_41} (! bb29) ]
    | bb29 = s0
      [ s0 = {inv'4 uf}
        MutBorrow.borrow_mut <t_UnionFind> {uf}
          (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_49 <- _ret ] -{inv'4 _ret.final}- [ &uf <- _ret.final ] s1)
      | s1 = borrow_mut {_49} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_48 <- _ret ] s2)
      | s2 = bb30 ]
    | bb30 = s0 [ s0 = find {_48} {x} (fun (_ret: t_Element) -> [ &xr <- _ret ] s1) | s1 = bb31 ]
    | bb31 = s0
      [ s0 = {inv'4 uf}
        MutBorrow.borrow_mut <t_UnionFind> {uf}
          (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_53 <- _ret ] -{inv'4 _ret.final}- [ &uf <- _ret.final ] s1)
      | s1 = borrow_mut {_53} (fun (_ret: MutBorrow.t t_UnionFind) -> [ &_52 <- _ret ] s2)
      | s2 = bb32 ]
    | bb32 = s0 [ s0 = find {_52} {y} (fun (_ret: t_Element) -> [ &yr <- _ret ] s1) | s1 = bb33 ]
    | bb33 = s0 [ s0 = borrow {uf} (fun (_ret: t_UnionFind) -> [ &_59 <- _ret ] s1) | s1 = bb34 ]
    | bb34 = s0 [ s0 = get'0 {_59} {xr} (fun (_ret: Int32.t) -> [ &_58 <- _ret ] s1) | s1 = bb35 ]
    | bb35 = s0 [ s0 = borrow {uf} (fun (_ret: t_UnionFind) -> [ &_64 <- _ret ] s1) | s1 = bb36 ]
    | bb36 = s0 [ s0 = get'0 {_64} {yr} (fun (_ret: Int32.t) -> [ &_63 <- _ret ] s1) | s1 = bb37 ]
    | bb37 = s0 [ s0 = [ &_56 <- _58 = _63 ] s1 | s1 = any [ br0 -> {_56 = false} (! bb38) | br1 -> {_56} (! bb40) ] ]
    | bb40 = s0 [ s0 = borrow {uf} (fun (_ret: t_UnionFind) -> [ &_72 <- _ret ] s1) | s1 = bb41 ]
    | bb41 = s0 [ s0 = get'0 {_72} {z} (fun (_ret: Int32.t) -> [ &_71 <- _ret ] s1) | s1 = bb42 ]
    | bb42 = s0
      [ s0 = [ &_69 <- _71 = ([%#sunion_find'5] (3: Int32.t)) ] s1
      | s1 = any [ br0 -> {_69 = false} (! bb43) | br1 -> {_69} (! bb45) ] ]
    | bb45 = return''0 {_0}
    | bb43 = {[%#sunion_find'6] false} any
    | bb38 = {[%#sunion_find'7] false} any
    | bb27 = {[%#sunion_find'8] false} any
    | bb20 = {[%#sunion_find'9] false} any
    | bb15 = {[%#sunion_find'10] false} any
    | bb10 = {[%#sunion_find'11] false} any ]
    [ & _0: () = Any.any_l ()
    | & uf: t_UnionFind = Any.any_l ()
    | & x: t_Element = Any.any_l ()
    | & _3: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _4: MutBorrow.t t_UnionFind = Any.any_l ()
    | & y: t_Element = Any.any_l ()
    | & _6: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _7: MutBorrow.t t_UnionFind = Any.any_l ()
    | & z: t_Element = Any.any_l ()
    | & _9: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _10: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _14: Int32.t = Any.any_l ()
    | & _15: t_UnionFind = Any.any_l ()
    | & _20: bool = Any.any_l ()
    | & _22: Int32.t = Any.any_l ()
    | & _23: t_UnionFind = Any.any_l ()
    | & _28: bool = Any.any_l ()
    | & _30: Int32.t = Any.any_l ()
    | & _31: t_UnionFind = Any.any_l ()
    | & _35: t_Element = Any.any_l ()
    | & _36: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _37: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _41: bool = Any.any_l ()
    | & _42: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _43: MutBorrow.t t_UnionFind = Any.any_l ()
    | & xr: t_Element = Any.any_l ()
    | & _48: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _49: MutBorrow.t t_UnionFind = Any.any_l ()
    | & yr: t_Element = Any.any_l ()
    | & _52: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _53: MutBorrow.t t_UnionFind = Any.any_l ()
    | & _56: bool = Any.any_l ()
    | & _58: Int32.t = Any.any_l ()
    | & _59: t_UnionFind = Any.any_l ()
    | & _63: Int32.t = Any.any_l ()
    | & _64: t_UnionFind = Any.any_l ()
    | & _69: bool = Any.any_l ()
    | & _71: Int32.t = Any.any_l ()
    | & _72: t_UnionFind = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_union_find__example_addrs_eq [#"union_find.rs" 364 0 364 77]
  let%span sunion_find = "union_find.rs" 368 22 368 30
  let%span sunion_find'0 = "union_find.rs" 364 27 364 29
  let%span sunion_find'1 = "union_find.rs" 363 0 363 49
  let%span sunion_find'2 = "union_find.rs" 18 18 18 69
  let%span sunion_find'3 = "union_find.rs" 103 8 103 16
  let%span sunion_find'4 = "union_find.rs" 96 19 96 28
  let%span sunion_find'5 = "union_find.rs" 97 18 97 150
  let%span sptr = "../../creusot-contracts/src/std/ptr.rs" 59 14 59 53
  let%span sptr'0 = "../../creusot-contracts/src/std/ptr.rs" 61 8 61 35
  let%span smodel = "../../creusot-contracts/src/model.rs" 36 8 36 28
  let%span sfset = "../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfmap = "../../creusot-contracts/src/logic/fmap.rs" 514 20 514 76
  let%span sfmap'0 = "../../creusot-contracts/src/logic/fmap.rs" 116 8 116 27
  let%span sfmap'1 = "../../creusot-contracts/src/logic/fmap.rs" 271 4 271 12
  let%span sfmap'2 = "../../creusot-contracts/src/logic/fmap.rs" 94 4 94 12
  let%span sfmap'3 = "../../creusot-contracts/src/logic/fmap.rs" 104 4 104 12
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 67 4 67 12
  let%span soption = "../../creusot-contracts/src/std/option.rs" 744 15 744 27
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 746 8 749 9
  let%span slogic = "../../creusot-contracts/src/logic.rs" 32 11 32 28
  let%span slogic'0 = "../../creusot-contracts/src/logic.rs" 33 0 33 21
  let%span sptr_own = "../../creusot-contracts/src/ghost/ptr_own.rs" 42 4 42 12
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 95 8 95 18
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.Any
  use set.Fset
  use map.Map
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t
  
  function deep_model'0 (self: t_Element) : UInt64.t = [%#smodel] deep_model self
  
  let rec eq (self: t_Element) (other: t_Element) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#sunion_find'2] result = (deep_model'0 self = deep_model'0 other)}
      (! return' {result}) ]
  
  type t_FMap
  
  type t_T
  
  type t_UFInner = {
    t_UFInner__domain: Fset.fset t_Element;
    t_UFInner__perms: t_FMap;
    t_UFInner__payloads: Map.map t_Element t_T;
    t_UFInner__roots: Map.map t_Element t_Element;
    t_UFInner__depth: Map.map t_Element int;
    t_UFInner__max_depth: int }
  
  type t_UnionFind = { t_UnionFind__0: t_UFInner }
  
  predicate invariant' [@inline:trivial] [#"union_find.rs" 70 8 70 34] (self: t_UnionFind)
  
  type t_PeanoInt = { t_PeanoInt__0: UInt64.t }
  
  type t_Node = C_Root t_PeanoInt t_T | C_Link t_Element
  
  type t_PtrOwn = { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }
  
  type t_Option = C_None | C_Some t_PtrOwn
  
  function view (self: t_FMap) : Map.map t_Element t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: t_Element) : t_Option = [%#sfmap'2] Map.get (view self) k
  
  predicate contains [@inline:trivial] (self: t_FMap) (k: t_Element) = [%#sfmap'0] get self k <> C_None
  
  predicate inv (_0: t_Element)
  
  axiom inv_axiom [@rewrite]: forall x: t_Element [inv x]. inv x = true
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  predicate is_null_logic (self: Opaque.ptr) = [%#sptr'0] addr_logic self = (0: UInt64.t)
  
  axiom is_null_logic_spec: forall self: Opaque.ptr. [%#sptr] is_null_logic self = (addr_logic self = (0: UInt64.t))
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate invariant''0 (self: t_PtrOwn) = [%#sptr_own] not is_null_logic (ptr self)
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_Node)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Node [inv'1 x]. inv'1 x
      = match x with
        | C_Root rank payload -> inv'0 payload
        | C_Link a_0 -> true
        end
  
  predicate invariant''1 (self: t_Node) = [%#sboxed] inv'1 self
  
  predicate inv'2 (_0: t_Node)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Node [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate inv'3 (_0: t_PtrOwn)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PtrOwn [inv'3 x]. inv'3 x
      = (invariant''0 x
      /\ match x with
        | {t_PtrOwn__ptr = ptr'0; t_PtrOwn__val = val'} -> inv'2 val'
        end)
  
  predicate index_logic (self: Map.map t_PtrOwn bool) (a: t_PtrOwn) = [%#smapping] Map.get self a
  
  function such_that (p: Map.map t_PtrOwn bool) : t_PtrOwn
  
  axiom such_that_spec: forall p: Map.map t_PtrOwn bool. ([%#slogic] exists x: t_PtrOwn. index_logic p x)
      -> ([%#slogic'0] index_logic p (such_that p))
  
  function unwrap_logic (self: t_Option) : t_PtrOwn = [%#soption'0] match self with
      | C_Some x -> x
      | C_None -> such_that (fun (__0: t_PtrOwn) -> true)
      end
  
  function lookup [@inline:trivial] (self: t_FMap) (k: t_Element) : t_PtrOwn = [%#sfmap'3] unwrap_logic (get self k)
  
  function index_logic'0 [@inline:trivial] (self: t_FMap) (key: t_Element) : t_PtrOwn = [%#sfmap'1] lookup self key
  
  predicate invariant''2 (self: t_FMap) =
    [%#sfmap] forall k: t_Element. contains self k -> inv k /\ inv'3 (index_logic'0 self k)
  
  predicate inv'4 (_0: t_FMap)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_FMap [inv'4 x]. inv'4 x = invariant''2 x
  
  predicate inv'5 (_0: t_UFInner)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_UFInner [inv'5 x]. inv'5 x
      = match x with
        | {t_UFInner__domain = domain; t_UFInner__perms = perms; t_UFInner__payloads = payloads; t_UFInner__roots = roots; t_UFInner__depth = depth; t_UFInner__max_depth = max_depth} -> inv'4 perms
        end
  
  predicate inv'6 (_0: t_UnionFind)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_UnionFind [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_UnionFind__0 = a_0} -> inv'5 a_0
        end)
  
  predicate invariant''3 (self: t_UnionFind) = [%#sinvariant] inv'6 self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: t_UnionFind)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_UnionFind [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate contains'0 [@inline:trivial] (self: Fset.fset t_Element) (e: t_Element) = [%#sfset] Fset.mem e self
  
  function domain [#"union_find.rs" 98 8 98 47] (self: t_UnionFind) : Fset.fset t_Element
  
  axiom domain_spec: forall self: t_UnionFind. ([%#sunion_find'4] inv'6 self)
      -> ([%#sunion_find'5] forall e1: t_Element, e2: t_Element. contains'0 (domain self) e1
          /\ contains'0 (domain self) e2 /\ deep_model e1 = deep_model e2 -> e1 = e2)
  
  predicate in_domain [#"union_find.rs" 105 8 105 53] (self: t_UnionFind) (e: t_Element) =
    [%#sunion_find'3] contains'0 (domain self) e
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec example_addrs_eq [#"union_find.rs" 364 0 364 77] (uf: t_UnionFind) (e1: t_Element) (e2: t_Element)
    (return' (x: ())) = {[@expl:example_addrs_eq 'uf' type invariant] [%#sunion_find'0] inv'7 uf}
    {[@expl:example_addrs_eq requires] [%#sunion_find'1] in_domain uf e1 /\ in_domain uf e2}
    (! bb0
    [ bb0 = s0 [ s0 = eq {e1'0} {e2'0} (fun (_ret: bool) -> [ &_5 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = any [ br0 -> {_5 = false} (! bb4) | br1 -> {_5} (! bb2) ]
    | bb2 = s0 [ s0 = {[@expl:assertion] [%#sunion_find] e1'0 = e2'0} s1 | s1 = bb4 ]
    | bb4 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & e1'0: t_Element = e1 | & e2'0: t_Element = e2 | & _5: bool = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_union_find__implementation__qyi17232405883558456141__eq__refines [#"union_find.rs" 19 8 19 42] (* <implementation::Element<T> as creusot_contracts::PartialEq> *)
  let%span sunion_find = "union_find.rs" 19 8 19 42
  let%span sunion_find'0 = "union_find.rs" 25 8 25 16
  let%span smodel = "../../creusot-contracts/src/model.rs" 36 8 36 28
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  
  type t_Element = { t_Element__0: Opaque.ptr }
  
  function addr_logic (self: Opaque.ptr) : UInt64.t
  
  function deep_model [#"union_find.rs" 26 8 26 36] (self: t_Element) : UInt64.t =
    [%#sunion_find'0] addr_logic self.t_Element__0
  
  function deep_model'0 (self: t_Element) : UInt64.t = [%#smodel] deep_model self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#sunion_find] forall self_: t_Element. forall rhs: t_Element. forall result: bool. result
            = (deep_model'0 self_ = deep_model'0 rhs) -> result = (deep_model'0 self_ = deep_model'0 rhs)
end
