module M_drop_pair__drop_pair [#"drop_pair.rs" 7 0 7 42]
  let%span sdrop_pair = "drop_pair.rs" 4 10 4 21
  let%span sdrop_pair'0 = "drop_pair.rs" 5 10 5 24
  let%span sdrop_pair'1 = "drop_pair.rs" 6 10 6 24
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 38 8 38 42
  let%span sresolve'0 = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type tuple = { _p0: MutBorrow.t UInt32.t; _p1: MutBorrow.t UInt32.t }
  
  predicate resolve (self: MutBorrow.t UInt32.t) = [%#sresolve'0] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) = resolve _0
  
  predicate resolve'1 (self: tuple) = [%#sresolve] resolve'0 self._p0 /\ resolve'0 self._p1
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: tuple) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec drop_pair [#"drop_pair.rs" 7 0 7 42] (_x: tuple) (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = -{resolve'2 _x'0}- s1 | s1 = return''0 {_0} ] ] [ & _0: () = Any.any_l () | & _x'0: tuple = _x ])
    [ return''0 (result: ()) -> {[@expl:drop_pair ensures #0] [%#sdrop_pair] resolve'2 _x}
      {[@expl:drop_pair ensures #1] [%#sdrop_pair'0] (_x._p0).final = (_x._p0).current}
      {[@expl:drop_pair ensures #2] [%#sdrop_pair'1] (_x._p1).final = (_x._p1).current}
      (! return' {result}) ]
end
module M_drop_pair__drop_pair2 [#"drop_pair.rs" 9 0 9 42]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 38 8 38 42
  let%span sresolve'0 = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type tuple = { _p0: MutBorrow.t UInt32.t; _p1: MutBorrow.t UInt32.t }
  
  predicate resolve (self: MutBorrow.t UInt32.t) = [%#sresolve'0] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) = resolve _0
  
  predicate resolve'1 (self: tuple) = [%#sresolve] resolve'0 self._p0 /\ resolve'0 self._p1
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: tuple) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec drop_pair2 [#"drop_pair.rs" 9 0 9 42] (x: tuple) (return' (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = -{resolve'2 x'0}- s1 | s1 = return''0 {_0} ] ] [ & _0: () = Any.any_l () | & x'0: tuple = x ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_drop_pair__drop [#"drop_pair.rs" 15 0 15 52]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) = resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec drop [#"drop_pair.rs" 15 0 15 52] (_x: MutBorrow.t UInt32.t) (y: MutBorrow.t UInt32.t) (return' (x: ())) =
    (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _x'0}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {y'0.current} {MutBorrow.get_id y'0}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_3 <- _ret ] [ &y'0 <- { y'0 with current = _ret.final } ] s2)
      | s2 = [ &_x'0 <- _3 ] s3
      | s3 = -{resolve'0 _x'0}- s4
      | s4 = -{resolve'0 y'0}- s5
      | s5 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & _x'0: MutBorrow.t UInt32.t = _x
    | & y'0: MutBorrow.t UInt32.t = y
    | & _3: MutBorrow.t UInt32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
