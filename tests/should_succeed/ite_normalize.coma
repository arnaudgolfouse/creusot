module M_ite_normalize__qyi15119799284333837974__clone [#"ite_normalize.rs" 55 9 55 14] (* <Expr as creusot_contracts::Clone> *)
  let%span site_normalize = "ite_normalize.rs" 55 9 55 14
  let%span site_normalize'0 = "ite_normalize.rs" 72 26 72 41
  let%span sclone = "../../creusot-contracts/src/std/clone.rs" 15 26 15 41
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  let rec v_Var (input:t_Expr) (ret  (v:UInt64.t))= any
    [ good (v:UInt64.t)-> {C_Var v = input} (! ret {v})
    | bad -> {forall v: UInt64.t [C_Var v: t_Expr]. C_Var v <> input} (! {false} any) ]
  
  
  let rec clone' (self_:UInt64.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#sclone] result = self_} (! return' {result}) ]
  
  
  let rec v_IfThenElse (input:t_Expr) (ret  (c:t_Expr) (t:t_Expr) (e:t_Expr))= any
    [ good (c:t_Expr) (t:t_Expr) (e:t_Expr)-> {C_IfThenElse c t e = input} (! ret {c} {t} {e})
    | bad -> {forall c: t_Expr, t: t_Expr, e: t_Expr [C_IfThenElse c t e: t_Expr]. C_IfThenElse c t e <> input}
      (! {false}
      any) ]
  
  
  let rec clone''0 (self_:t_Expr) (return'  (x:t_Expr))= any
    [ return''0 (result:t_Expr)-> {[%#site_normalize'0] result = self_} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec clone''1[#"ite_normalize.rs" 55 9 55 14] (self:t_Expr) (return'  (x:t_Expr))= (! bb0
    [ bb0 = any
      [ br0 (x0:t_Expr) (x1:t_Expr) (x2:t_Expr)-> {self'0 = C_IfThenElse x0 x1 x2} (! bb2)
      | br1 (x0:UInt64.t)-> {self'0 = C_Var x0} (! bb3)
      | br2 -> {self'0 = C_True} (! bb4)
      | br3 -> {self'0 = C_False} (! bb5) ]
    
    | bb5 = s0 [ s0 =  [ &_0 <- C_False ] s1 | s1 = bb16 ] 
    | bb4 = bb6
    | bb6 = s0 [ s0 =  [ &_0 <- C_True ] s1 | s1 = bb16 ] 
    | bb3 = bb7
    | bb7 = s0
      [ s0 = v_Var {self'0} (fun (rv:UInt64.t) ->  [ &v_1 <- rv ] s1)
      | s1 =  [ &_19 <- v_1 ] s2
      | s2 = clone' {_19} (fun (_ret:UInt64.t) ->  [ &_17 <- _ret ] s3)
      | s3 = bb15 ]
    
    | bb15 = s0 [ s0 =  [ &_0 <- C_Var _17 ] s1 | s1 = bb16 ] 
    | bb2 = bb8
    | bb8 = s0
      [ s0 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &c_1 <- rc ] s1)
      | s1 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &t_1 <- rt ] s2)
      | s2 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &e_1 <- re ] s3)
      | s3 =  [ &_9 <- c_1 ] s4
      | s4 = clone''0 {_9} (fun (_ret:t_Expr) ->  [ &_7 <- _ret ] s5)
      | s5 = bb9 ]
    
    | bb9 = s0
      [ s0 =  [ &_12 <- t_1 ] s1 | s1 = clone''0 {_12} (fun (_ret:t_Expr) ->  [ &_10 <- _ret ] s2) | s2 = bb10 ]
    
    | bb10 = s0
      [ s0 =  [ &_15 <- e_1 ] s1 | s1 = clone''0 {_15} (fun (_ret:t_Expr) ->  [ &_13 <- _ret ] s2) | s2 = bb11 ]
    
    | bb11 = s0 [ s0 =  [ &_0 <- C_IfThenElse _7 _10 _13 ] s1 | s1 = bb12 ] 
    | bb12 = bb13
    | bb13 = bb14
    | bb14 = bb16
    | bb16 = return''0 {_0} ]
    )
    [ & _0: t_Expr = Any.any_l ()
    | & self'0: t_Expr = self
    | & c_1: t_Expr = Any.any_l ()
    | & t_1: t_Expr = Any.any_l ()
    | & e_1: t_Expr = Any.any_l ()
    | & _7: t_Expr = Any.any_l ()
    | & _9: t_Expr = Any.any_l ()
    | & _10: t_Expr = Any.any_l ()
    | & _12: t_Expr = Any.any_l ()
    | & _13: t_Expr = Any.any_l ()
    | & _15: t_Expr = Any.any_l ()
    | & v_1: UInt64.t = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _19: UInt64.t = Any.any_l () ]
     [ return''0 (result:t_Expr)-> {[@expl:clone ensures] [%#site_normalize] result = self} (! return' {result}) ] 
end
module M_ite_normalize__qyi12210208226808281580__from [#"ite_normalize.rs" 80 4 80 29] (* <Expr as std::convert::From<usize>> *)
  let%span site_normalize = "ite_normalize.rs" 97 14 97 39
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  let rec variable (v:UInt64.t) (return'  (x:t_Expr))= any
    [ return''0 (result:t_Expr)-> {[%#site_normalize] result = C_Var v} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec from[#"ite_normalize.rs" 80 4 80 29] (a:UInt64.t) (return'  (x:t_Expr))= (! bb0
    [ bb0 = s0 [ s0 = variable {a'0} (fun (_ret:t_Expr) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ]  | bb1 = return''0 {_0} ]
    ) [ & _0: t_Expr = Any.any_l () | & a'0: UInt64.t = a ]  [ return''0 (result:t_Expr)-> (! return' {result}) ] 
end
module M_ite_normalize__qyi1874907776010341903__from [#"ite_normalize.rs" 86 4 86 28] (* <Expr as std::convert::From<bool>> *)
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  meta "compute_max_steps" 1000000
  
  let rec from[#"ite_normalize.rs" 86 4 86 28] (b:bool) (return'  (x:t_Expr))= (! bb0
    [ bb0 = any [ br0 -> {b'0 = false} (! bb2) | br1 -> {b'0} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_0 <- C_True ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- C_False ] s1 | s1 = bb3 ] 
    | bb3 = return''0 {_0} ]
    ) [ & _0: t_Expr = Any.any_l () | & b'0: bool = b ]  [ return''0 (result:t_Expr)-> (! return' {result}) ] 
end
module M_ite_normalize__qyi17570407315987535457__ite [#"ite_normalize.rs" 93 4 93 49] (* Expr *)
  let%span site_normalize = "ite_normalize.rs" 92 14 92 91
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  meta "compute_max_steps" 1000000
  
  let rec ite[#"ite_normalize.rs" 93 4 93 49] (c:t_Expr) (t:t_Expr) (e:t_Expr) (return'  (x:t_Expr))= (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- C_IfThenElse c'0 t'0 e'0 ] s1 | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = return''0 {_0} ]
    ) [ & _0: t_Expr = Any.any_l () | & c'0: t_Expr = c | & t'0: t_Expr = t | & e'0: t_Expr = e ] 
    [ return''0 (result:t_Expr)-> {[@expl:ite ensures] [%#site_normalize] result = C_IfThenElse c t e}
      (! return' {result}) ]

end
module M_ite_normalize__qyi17570407315987535457__variable [#"ite_normalize.rs" 98 4 98 37] (* Expr *)
  let%span site_normalize = "ite_normalize.rs" 97 14 97 39
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  meta "compute_max_steps" 1000000
  
  let rec variable[#"ite_normalize.rs" 98 4 98 37] (v:UInt64.t) (return'  (x:t_Expr))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- C_Var v'0 ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0: t_Expr = Any.any_l () | & v'0: UInt64.t = v ] 
    [ return''0 (result:t_Expr)-> {[@expl:variable ensures] [%#site_normalize] result = C_Var v} (! return' {result}) ]

end
module M_ite_normalize__qyi17570407315987535457__transpose [#"ite_normalize.rs" 107 4 107 52] (* Expr *)
  let%span site_normalize = "ite_normalize.rs" 102 15 102 35
  let%span site_normalize'0 = "ite_normalize.rs" 103 15 103 32
  let%span site_normalize'1 = "ite_normalize.rs" 104 15 104 32
  let%span site_normalize'2 = "ite_normalize.rs" 105 14 105 36
  let%span site_normalize'3 = "ite_normalize.rs" 106 14 106 18
  let%span site_normalize'4 = "ite_normalize.rs" 55 9 55 14
  let%span site_normalize'5 = "ite_normalize.rs" 124 8 137 9
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  let rec v_IfThenElse (input:t_Expr) (ret  (c:t_Expr) (t:t_Expr) (e:t_Expr))= any
    [ good (c:t_Expr) (t:t_Expr) (e:t_Expr)-> {C_IfThenElse c t e = input} (! ret {c} {t} {e})
    | bad -> {forall c: t_Expr, t: t_Expr, e: t_Expr [C_IfThenElse c t e: t_Expr]. C_IfThenElse c t e <> input}
      (! {false}
      any) ]
  
  
  let rec clone' (self:t_Expr) (return'  (x:t_Expr))= any
    [ return''0 (result:t_Expr)-> {[%#site_normalize'4] result = self} (! return' {result}) ]
  
  
  predicate is_normalized [#"ite_normalize.rs" 123 4 123 34] (self: t_Expr) =
    [%#site_normalize'5] match self with
      | C_IfThenElse c t e -> is_normalized c
      /\ is_normalized t
      /\ is_normalized e
      /\ match c with
        | C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | C_Var _ -> true
      | C_True -> true
      | C_False -> true
      end
  
  meta "compute_max_steps" 1000000
  
  let rec transpose[#"ite_normalize.rs" 107 4 107 52] (self:t_Expr) (a:t_Expr) (b:t_Expr) (return'  (x:t_Expr))= {[@expl:transpose requires #0] [%#site_normalize] is_normalized self}
    {[@expl:transpose requires #1] [%#site_normalize'0] is_normalized a}
    {[@expl:transpose requires #2] [%#site_normalize'1] is_normalized b}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = any
      [ br0 (x0:t_Expr) (x1:t_Expr) (x2:t_Expr)-> {self'0 = C_IfThenElse x0 x1 x2} (! bb6)
      | br1 (x0:UInt64.t)-> {self'0 = C_Var x0} (! bb7)
      | br2 -> {self'0 = C_True} (! bb8)
      | br3 -> {self'0 = C_False} (! bb9) ]
    
    | bb9 = s0 [ s0 =  [ &_0 <- b'0 ] s1 | s1 = bb31 ] 
    | bb8 = bb10
    | bb10 = s0 [ s0 =  [ &_0 <- a'0 ] s1 | s1 = bb31 ] 
    | bb7 = bb11
    | bb11 = bb25
    | bb25 = bb26
    | bb26 = bb27
    | bb27 = s0 [ s0 =  [ &_0 <- C_IfThenElse self'0 a'0 b'0 ] s1 | s1 = bb28 ] 
    | bb28 = bb29
    | bb29 = bb30
    | bb30 = bb31
    | bb6 = bb12
    | bb12 = s0
      [ s0 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &c <- rc ] s1)
      | s1 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &t <- rt ] s2)
      | s2 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &e <- re ] s3)
      | s3 = clone' {a'0} (fun (_ret:t_Expr) ->  [ &_17 <- _ret ] s4)
      | s4 = bb13 ]
    
    | bb13 = s0 [ s0 = clone' {b'0} (fun (_ret:t_Expr) ->  [ &_19 <- _ret ] s1) | s1 = bb14 ] 
    | bb14 = s0 [ s0 = transpose {t} {_17} {_19} (fun (_ret:t_Expr) ->  [ &_15 <- _ret ] s1) | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = s0 [ s0 = transpose {e} {a'0} {b'0} (fun (_ret:t_Expr) ->  [ &_22 <- _ret ] s1) | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = s0 [ s0 =  [ &_0 <- C_IfThenElse c _15 _22 ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = bb22
    | bb22 = bb23
    | bb23 = bb24
    | bb24 = bb31
    | bb31 = bb32
    | bb32 = bb33
    | bb33 = bb34
    | bb34 = return''0 {_0} ]
    )
    [ & _0: t_Expr = Any.any_l ()
    | & self'0: t_Expr = self
    | & a'0: t_Expr = a
    | & b'0: t_Expr = b
    | & c: t_Expr = Any.any_l ()
    | & t: t_Expr = Any.any_l ()
    | & e: t_Expr = Any.any_l ()
    | & _15: t_Expr = Any.any_l ()
    | & _17: t_Expr = Any.any_l ()
    | & _19: t_Expr = Any.any_l ()
    | & _22: t_Expr = Any.any_l () ]
    
    [ return''0 (result:t_Expr)-> {[@expl:transpose ensures] [%#site_normalize'2] is_normalized result}
      (! return' {result}) ]

end
module M_ite_normalize__qyi17570407315987535457__normalize [#"ite_normalize.rs" 142 4 142 35] (* Expr *)
  let%span site_normalize = "ite_normalize.rs" 140 14 140 36
  let%span site_normalize'0 = "ite_normalize.rs" 141 14 141 18
  let%span site_normalize'1 = "ite_normalize.rs" 55 9 55 14
  let%span site_normalize'2 = "ite_normalize.rs" 102 15 102 35
  let%span site_normalize'3 = "ite_normalize.rs" 103 15 103 32
  let%span site_normalize'4 = "ite_normalize.rs" 104 15 104 32
  let%span site_normalize'5 = "ite_normalize.rs" 105 14 105 36
  let%span site_normalize'6 = "ite_normalize.rs" 106 14 106 18
  let%span site_normalize'7 = "ite_normalize.rs" 124 8 137 9
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  let rec clone' (self:t_Expr) (return'  (x:t_Expr))= any
    [ return''0 (result:t_Expr)-> {[%#site_normalize'1] result = self} (! return' {result}) ]
  
  
  let rec v_IfThenElse (input:t_Expr) (ret  (c:t_Expr) (t:t_Expr) (e:t_Expr))= any
    [ good (c:t_Expr) (t:t_Expr) (e:t_Expr)-> {C_IfThenElse c t e = input} (! ret {c} {t} {e})
    | bad -> {forall c: t_Expr, t: t_Expr, e: t_Expr [C_IfThenElse c t e: t_Expr]. C_IfThenElse c t e <> input}
      (! {false}
      any) ]
  
  
  predicate is_normalized [#"ite_normalize.rs" 123 4 123 34] (self: t_Expr) =
    [%#site_normalize'7] match self with
      | C_IfThenElse c t e -> is_normalized c
      /\ is_normalized t
      /\ is_normalized e
      /\ match c with
        | C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | C_Var _ -> true
      | C_True -> true
      | C_False -> true
      end
  
  let rec transpose (self:t_Expr) (a:t_Expr) (b:t_Expr) (return'  (x:t_Expr))= {[@expl:transpose requires #0] [%#site_normalize'2] is_normalized self}
    {[@expl:transpose requires #1] [%#site_normalize'3] is_normalized a}
    {[@expl:transpose requires #2] [%#site_normalize'4] is_normalized b}
    any [ return''0 (result:t_Expr)-> {[%#site_normalize'5] is_normalized result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec normalize[#"ite_normalize.rs" 142 4 142 35] (self:t_Expr) (return'  (x:t_Expr))= (! bb0
    [ bb0 = any
      [ br0 (x0:t_Expr) (x1:t_Expr) (x2:t_Expr)-> {self'0 = C_IfThenElse x0 x1 x2} (! bb2)
      | br1 (x0:UInt64.t)-> {self'0 = C_Var x0} (! bb1)
      | br2 -> {self'0 = C_True} (! bb1)
      | br3 -> {self'0 = C_False} (! bb1) ]
    
    | bb1 = s0
      [ s0 =  [ &e'0 <- self'0 ] s1 | s1 = clone' {e'0} (fun (_ret:t_Expr) ->  [ &_0 <- _ret ] s2) | s2 = bb11 ]
    
    | bb11 = bb12
    | bb2 = bb3
    | bb3 = s0
      [ s0 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &c <- rc ] s1)
      | s1 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &t <- rt ] s2)
      | s2 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &e <- re ] s3)
      | s3 = normalize {c} (fun (_ret:t_Expr) ->  [ &cp <- _ret ] s4)
      | s4 = bb4 ]
    
    | bb4 = s0 [ s0 = normalize {t} (fun (_ret:t_Expr) ->  [ &tp <- _ret ] s1) | s1 = bb5 ] 
    | bb5 = s0 [ s0 = normalize {e} (fun (_ret:t_Expr) ->  [ &ep <- _ret ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = transpose {cp} {tp} {ep} (fun (_ret:t_Expr) ->  [ &_0 <- _ret ] s1) | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb12
    | bb12 = return''0 {_0} ]
    )
    [ & _0: t_Expr = Any.any_l ()
    | & self'0: t_Expr = self
    | & c: t_Expr = Any.any_l ()
    | & t: t_Expr = Any.any_l ()
    | & e: t_Expr = Any.any_l ()
    | & cp: t_Expr = Any.any_l ()
    | & tp: t_Expr = Any.any_l ()
    | & ep: t_Expr = Any.any_l ()
    | & e'0: t_Expr = Any.any_l () ]
    
    [ return''0 (result:t_Expr)-> {[@expl:normalize ensures] [%#site_normalize] is_normalized result}
      (! return' {result}) ]

end
module M_ite_normalize__qyi17570407315987535457__simplify [#"ite_normalize.rs" 178 4 178 33] (* Expr *)
  let%span site_normalize = "ite_normalize.rs" 176 15 176 35
  let%span site_normalize'0 = "ite_normalize.rs" 177 14 177 36
  let%span site_normalize'1 = "ite_normalize.rs" 182 15 182 35
  let%span site_normalize'2 = "ite_normalize.rs" 183 14 183 105
  let%span site_normalize'3 = "ite_normalize.rs" 184 14 184 36
  let%span site_normalize'4 = "ite_normalize.rs" 185 14 185 18
  let%span site_normalize'5 = "ite_normalize.rs" 124 8 137 9
  let%span site_normalize'6 = "ite_normalize.rs" 156 8 162 9
  let%span site_normalize'7 = "ite_normalize.rs" 167 8 173 9
  
  use creusot.int.UInt64
  use map.Map
  use creusot.prelude.Any
  
  type t_BTreeMap
  
  let rec new (return'  (x:t_BTreeMap))= any [ return''0 (result:t_BTreeMap)-> (! return' {result}) ] 
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  predicate is_normalized [#"ite_normalize.rs" 123 4 123 34] (self: t_Expr) =
    [%#site_normalize'5] match self with
      | C_IfThenElse c t e -> is_normalized c
      /\ is_normalized t
      /\ is_normalized e
      /\ match c with
        | C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | C_Var _ -> true
      | C_True -> true
      | C_False -> true
      end
  
  type t_Option  =
    | C_None
    | C_Some bool
  
  function view [#"ite_normalize.rs" 50 4 50 33] (self: t_BTreeMap) : Map.map int t_Option
  
  predicate does_not_contain [#"ite_normalize.rs" 166 4 166 48] (self: t_Expr) (vp: UInt64.t) =
    [%#site_normalize'7] match self with
      | C_IfThenElse c t e -> does_not_contain c vp /\ does_not_contain t vp /\ does_not_contain e vp
      | C_Var v -> v <> vp
      | _ -> true
      end
  
  predicate is_simplified [#"ite_normalize.rs" 155 4 155 34] (self: t_Expr) =
    [%#site_normalize'6] match self with
      | C_IfThenElse c t e -> match c with
        | C_Var v -> does_not_contain t v /\ does_not_contain e v
        | c'0 -> is_simplified c'0 /\ is_simplified t /\ is_simplified e
        end
      | _ -> true
      end
  
  let rec simplify_helper (self:t_Expr) (state:t_BTreeMap) (return'  (x:t_Expr))= {[@expl:simplify_helper requires] [%#site_normalize'1] is_normalized self}
    any
    [ return''0 (result:t_Expr)-> {[%#site_normalize'2] forall i: UInt64.t. (exists v: bool. Map.get (view state) (UInt64.t'int i)
      = C_Some v)  -> does_not_contain result i}
      {[%#site_normalize'3] is_simplified result}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec simplify[#"ite_normalize.rs" 178 4 178 33] (self:t_Expr) (return'  (x:t_Expr))= {[@expl:simplify requires] [%#site_normalize] is_normalized self}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = new (fun (_ret:t_BTreeMap) ->  [ &_5 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = simplify_helper {self'0} {_5} (fun (_ret:t_Expr) ->  [ &_0 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return''0 {_0} ]
    ) [ & _0: t_Expr = Any.any_l () | & self'0: t_Expr = self | & _5: t_BTreeMap = Any.any_l () ] 
    [ return''0 (result:t_Expr)-> {[@expl:simplify ensures] [%#site_normalize'0] is_simplified result}
      (! return' {result}) ]

end
module M_ite_normalize__qyi17570407315987535457__simplify_helper [#"ite_normalize.rs" 186 4 186 66] (* Expr *)
  let%span site_normalize = "ite_normalize.rs" 196 46 196 50
  let%span site_normalize'0 = "ite_normalize.rs" 201 46 201 51
  let%span site_normalize'1 = "ite_normalize.rs" 182 15 182 35
  let%span site_normalize'2 = "ite_normalize.rs" 183 14 183 105
  let%span site_normalize'3 = "ite_normalize.rs" 184 14 184 36
  let%span site_normalize'4 = "ite_normalize.rs" 185 14 185 18
  let%span site_normalize'5 = "ite_normalize.rs" 17 14 17 68
  let%span site_normalize'6 = "ite_normalize.rs" 18 14 18 89
  let%span site_normalize'7 = "ite_normalize.rs" 38 14 38 29
  let%span site_normalize'8 = "ite_normalize.rs" 27 14 27 123
  let%span site_normalize'9 = "ite_normalize.rs" 124 8 137 9
  let%span site_normalize'10 = "ite_normalize.rs" 167 8 173 9
  let%span site_normalize'11 = "ite_normalize.rs" 156 8 162 9
  let%span smodel = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span smodel'1 = "../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span snum = "../../creusot-contracts/src/std/num.rs" 24 28 24 33
  
  use creusot.int.UInt64
  use map.Map
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  let rec v_Var (input:t_Expr) (ret  (v:UInt64.t))= any
    [ good (v:UInt64.t)-> {C_Var v = input} (! ret {v})
    | bad -> {forall v: UInt64.t [C_Var v: t_Expr]. C_Var v <> input} (! {false} any) ]
  
  
  type t_Option  =
    | C_None
    | C_Some bool
  
  type t_BTreeMap
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 bool
  
  function view [#"ite_normalize.rs" 50 4 50 33] (self: t_BTreeMap) : Map.map int t_Option'0
  
  function view'0 (self: t_BTreeMap) : Map.map int t_Option'0 =
    [%#smodel] view self
  
  function deep_model (self: UInt64.t) : int =
    [%#snum] UInt64.t'int self
  
  function deep_model'0 (self: UInt64.t) : int =
    [%#smodel'0] deep_model self
  
  let rec get (self:t_BTreeMap) (key:UInt64.t) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#site_normalize'5] result = C_None
       -> Map.get (view'0 self) (deep_model'0 key) = C_None'0}
      {[%#site_normalize'6] forall v: bool. result = C_Some v  -> Map.get (view'0 self) (deep_model'0 key) = C_Some'0 v}
      (! return' {result}) ]
  
  
  let rec v_Some (input:t_Option) (ret  (field_0:bool))= any
    [ good (field_0:bool)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: bool [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  let rec v_IfThenElse (input:t_Expr) (ret  (c:t_Expr) (t:t_Expr) (e:t_Expr))= any
    [ good (c:t_Expr) (t:t_Expr) (e:t_Expr)-> {C_IfThenElse c t e = input} (! ret {c} {t} {e})
    | bad -> {forall c: t_Expr, t: t_Expr, e: t_Expr [C_IfThenElse c t e: t_Expr]. C_IfThenElse c t e <> input}
      (! {false}
      any) ]
  
  
  let rec clone' (self:t_BTreeMap) (return'  (x:t_BTreeMap))= any
    [ return''0 (result:t_BTreeMap)-> {[%#site_normalize'7] self = result} (! return' {result}) ]
  
  
  function view'1 (self: MutBorrow.t t_BTreeMap) : Map.map int t_Option'0 =
    [%#smodel'1] view self.current
  
  let rec insert (self:MutBorrow.t t_BTreeMap) (key:UInt64.t) (value:bool) (return'  (x:t_Option'0))= any
    [ return''0 (result:t_Option'0)-> {[%#site_normalize'8] forall i: int. Map.get (view self.final) i
      = (if i = deep_model key then C_Some'0 value else Map.get (view'1 self) i)}
      (! return' {result}) ]
  
  
  predicate is_normalized [#"ite_normalize.rs" 123 4 123 34] (self: t_Expr) =
    [%#site_normalize'9] match self with
      | C_IfThenElse c t e -> is_normalized c
      /\ is_normalized t
      /\ is_normalized e
      /\ match c with
        | C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | C_Var _ -> true
      | C_True -> true
      | C_False -> true
      end
  
  predicate does_not_contain [#"ite_normalize.rs" 166 4 166 48] (self: t_Expr) (vp: UInt64.t) =
    [%#site_normalize'10] match self with
      | C_IfThenElse c t e -> does_not_contain c vp /\ does_not_contain t vp /\ does_not_contain e vp
      | C_Var v -> v <> vp
      | _ -> true
      end
  
  predicate is_simplified [#"ite_normalize.rs" 155 4 155 34] (self: t_Expr) =
    [%#site_normalize'11] match self with
      | C_IfThenElse c t e -> match c with
        | C_Var v -> does_not_contain t v /\ does_not_contain e v
        | c'0 -> is_simplified c'0 /\ is_simplified t /\ is_simplified e
        end
      | _ -> true
      end
  
  meta "compute_max_steps" 1000000
  
  let rec simplify_helper[#"ite_normalize.rs" 186 4 186 66] (self:t_Expr) (state:t_BTreeMap) (return'  (x:t_Expr))= {[@expl:simplify_helper requires] [%#site_normalize'1] is_normalized self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = any
      [ br0 (x0:t_Expr) (x1:t_Expr) (x2:t_Expr)-> {self'0 = C_IfThenElse x0 x1 x2} (! bb5)
      | br1 (x0:UInt64.t)-> {self'0 = C_Var x0} (! bb6)
      | br2 -> {self'0 = C_True} (! bb4)
      | br3 -> {self'0 = C_False} (! bb4) ]
    
    | bb4 = s0 [ s0 =  [ &c'1 <- self'0 ] s1 | s1 =  [ &_0 <- c'1 ] s2 | s2 = bb51 ] 
    | bb51 = bb52
    | bb6 = bb7
    | bb7 = s0
      [ s0 = v_Var {self'0} (fun (rv:UInt64.t) ->  [ &v'0 <- rv ] s1)
      | s1 =  [ &_52 <- v'0 ] s2
      | s2 = get {state'0} {_52} (fun (_ret:t_Option) ->  [ &_49 <- _ret ] s3)
      | s3 = bb43 ]
    
    | bb43 = any [ br0 -> {_49 = C_None} (! bb49) | br1 (x0:bool)-> {_49 = C_Some x0} (! bb44) ] 
    | bb49 = s0 [ s0 =  [ &_0 <- C_Var v'0 ] s1 | s1 = bb50 ] 
    | bb44 = bb45
    | bb45 = s0
      [ s0 = v_Some {_49} (fun (r0:bool) ->  [ &b'0 <- r0 ] s1)
      | s1 = any [ br0 -> {b'0 = false} (! bb47) | br1 -> {b'0} (! bb46) ]  ]
    
    | bb46 = s0 [ s0 =  [ &_0 <- C_True ] s1 | s1 = bb48 ] 
    | bb47 = s0 [ s0 =  [ &_0 <- C_False ] s1 | s1 = bb48 ] 
    | bb48 = bb50
    | bb50 = bb52
    | bb5 = bb8
    | bb8 = s0
      [ s0 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &c <- rc ] s1)
      | s1 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &t <- rt ] s2)
      | s2 = v_IfThenElse {self'0} (fun (rc:t_Expr) (rt:t_Expr) (re:t_Expr) ->  [ &e <- re ] s3)
      | s3 = any
        [ br0 (x0:t_Expr) (x1:t_Expr) (x2:t_Expr)-> {c = C_IfThenElse x0 x1 x2} (! bb9)
        | br1 (x0:UInt64.t)-> {c = C_Var x0} (! bb10)
        | br2 -> {c = C_True} (! bb9)
        | br3 -> {c = C_False} (! bb9) ]
       ]
    
    | bb9 = s0
      [ s0 =  [ &c'0 <- c ] s1
      | s1 = simplify_helper {c'0} {state'0} (fun (_ret:t_Expr) ->  [ &_0 <- _ret ] s2)
      | s2 = bb37 ]
    
    | bb37 = bb38
    | bb38 = bb39
    | bb10 = bb11
    | bb11 = s0
      [ s0 = v_Var {c} (fun (rv:UInt64.t) ->  [ &v <- rv ] s1)
      | s1 =  [ &_16 <- v ] s2
      | s2 = get {state'0} {_16} (fun (_ret:t_Option) ->  [ &_13 <- _ret ] s3)
      | s3 = bb12 ]
    
    | bb12 = any [ br0 -> {_13 = C_None} (! bb20) | br1 (x0:bool)-> {_13 = C_Some x0} (! bb13) ] 
    | bb20 = s0 [ s0 = clone' {state'0} (fun (_ret:t_BTreeMap) ->  [ &state_t <- _ret ] s1) | s1 = bb21 ] 
    | bb21 = s0
      [ s0 = MutBorrow.borrow_mut <t_BTreeMap> {state_t}
          (fun (_ret:MutBorrow.t t_BTreeMap) ->  [ &_27 <- _ret ]  [ &state_t <- _ret.final ] s1)
      | s1 = insert {_27} {v} {[%#site_normalize] true} (fun (_ret:t_Option'0) ->  [ &_26 <- _ret ] s2)
      | s2 = bb22 ]
    
    | bb22 = s0 [ s0 = simplify_helper {t} {state_t} (fun (_ret:t_Expr) ->  [ &tp <- _ret ] s1) | s1 = bb23 ] 
    | bb23 = s0 [ s0 = clone' {state'0} (fun (_ret:t_BTreeMap) ->  [ &state_e <- _ret ] s1) | s1 = bb24 ] 
    | bb24 = s0
      [ s0 = MutBorrow.borrow_mut <t_BTreeMap> {state_e}
          (fun (_ret:MutBorrow.t t_BTreeMap) ->  [ &_35 <- _ret ]  [ &state_e <- _ret.final ] s1)
      | s1 = insert {_35} {v} {[%#site_normalize'0] false} (fun (_ret:t_Option'0) ->  [ &_34 <- _ret ] s2)
      | s2 = bb25 ]
    
    | bb25 = s0 [ s0 = simplify_helper {e} {state_e} (fun (_ret:t_Expr) ->  [ &ep <- _ret ] s1) | s1 = bb26 ] 
    | bb26 = bb27
    | bb27 = bb28
    | bb28 = s0 [ s0 =  [ &_0 <- C_IfThenElse c tp ep ] s1 | s1 = bb29 ] 
    | bb29 = bb30
    | bb30 = bb31
    | bb31 = bb32
    | bb32 = bb33
    | bb33 = bb34
    | bb34 = bb35
    | bb35 = bb36
    | bb13 = bb14
    | bb14 = s0
      [ s0 = v_Some {_13} (fun (r0:bool) ->  [ &b <- r0 ] s1)
      | s1 = any [ br0 -> {b = false} (! bb17) | br1 -> {b} (! bb15) ]  ]
    
    | bb15 = s0 [ s0 = simplify_helper {t} {state'0} (fun (_ret:t_Expr) ->  [ &_0 <- _ret ] s1) | s1 = bb16 ] 
    | bb16 = bb19
    | bb17 = s0 [ s0 = simplify_helper {e} {state'0} (fun (_ret:t_Expr) ->  [ &_0 <- _ret ] s1) | s1 = bb18 ] 
    | bb18 = bb19
    | bb19 = bb36
    | bb36 = bb39
    | bb39 = bb40
    | bb40 = bb41
    | bb41 = bb42
    | bb42 = bb52
    | bb52 = bb53
    | bb53 = bb54
    | bb54 = return''0 {_0} ]
    )
    [ & _0: t_Expr = Any.any_l ()
    | & self'0: t_Expr = self
    | & state'0: t_BTreeMap = state
    | & c: t_Expr = Any.any_l ()
    | & t: t_Expr = Any.any_l ()
    | & e: t_Expr = Any.any_l ()
    | & v: UInt64.t = Any.any_l ()
    | & _13: t_Option = Any.any_l ()
    | & _16: UInt64.t = Any.any_l ()
    | & b: bool = Any.any_l ()
    | & state_t: t_BTreeMap = Any.any_l ()
    | & _26: t_Option'0 = Any.any_l ()
    | & _27: MutBorrow.t t_BTreeMap = Any.any_l ()
    | & tp: t_Expr = Any.any_l ()
    | & state_e: t_BTreeMap = Any.any_l ()
    | & _34: t_Option'0 = Any.any_l ()
    | & _35: MutBorrow.t t_BTreeMap = Any.any_l ()
    | & ep: t_Expr = Any.any_l ()
    | & c'0: t_Expr = Any.any_l ()
    | & v'0: UInt64.t = Any.any_l ()
    | & _49: t_Option = Any.any_l ()
    | & _52: UInt64.t = Any.any_l ()
    | & b'0: bool = Any.any_l ()
    | & c'1: t_Expr = Any.any_l () ]
    
    [ return''0 (result:t_Expr)-> {[@expl:simplify_helper ensures #0] [%#site_normalize'2] forall i: UInt64.t. (exists v: bool. Map.get (view state) (UInt64.t'int i)
      = C_Some'0 v)  -> does_not_contain result i}
      {[@expl:simplify_helper ensures #1] [%#site_normalize'3] is_simplified result}
      (! return' {result}) ]

end
module M_ite_normalize__qyi8160480900349400821__clone__refines [#"ite_normalize.rs" 39 4 39 27] (* <BTreeMap<K, V> as creusot_contracts::Clone> *)
  let%span site_normalize = "ite_normalize.rs" 39 4 39 27
  
  type t_BTreeMap
  
  goal refines: [%#site_normalize] forall self_: t_BTreeMap. forall result: t_BTreeMap. self_ = result
   -> result = self_
end
module M_ite_normalize__qyi15119799284333837974__clone__refines [#"ite_normalize.rs" 55 9 55 14] (* <Expr as creusot_contracts::Clone> *)
  let%span site_normalize = "ite_normalize.rs" 55 9 55 14
  
  use creusot.int.UInt64
  
  type t_Expr  =
    | C_IfThenElse t_Expr t_Expr t_Expr
    | C_Var UInt64.t
    | C_True
    | C_False
  
  goal refines: [%#site_normalize] forall self_: t_Expr. forall result: t_Expr. result = self_  -> result = self_
end
