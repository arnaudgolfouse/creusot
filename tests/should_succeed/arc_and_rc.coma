module M_arc_and_rc__rc
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Rc
  
  predicate inv (_1: t_Rc)
  
  function view (self: t_Rc) : Int32.t
  
  let rec new (value: Int32.t) (return (x: t_Rc)) = any
    [ return (result: t_Rc) -> {inv result} {view result = value} (! return {result}) ]
  
  predicate invariant' [@inline:trivial] (self: t_Rc) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: t_Rc)
  
  axiom inv_axiom [@rewrite]: forall x: t_Rc [inv'0 x]. inv'0 x = invariant' x
  
  let rec as_ref (self_: t_Rc) (return (x: Int32.t)) = {[@expl:as_ref 'self_' type invariant] inv'0 self_}
    any [ return (result: Int32.t) -> {result = view self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec rc (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new {(1: Int32.t)} (fun (_ret: t_Rc) -> [ &rc'0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] view rc'0 = (1: Int32.t)} s1
      | s1 = as_ref {rc'0} (fun (_ret: Int32.t) -> [ &inner <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:assertion] Int32.to_int inner = 1} s1 | s1 = bb3 ]
    | bb3 = return {_0} ] [ & _0: () = Any.any_l () | & rc'0: t_Rc = Any.any_l () | & inner: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_arc_and_rc__arc
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Arc
  
  predicate inv (_1: t_Arc)
  
  function view (self: t_Arc) : Int32.t
  
  let rec new (value: Int32.t) (return (x: t_Arc)) = any
    [ return (result: t_Arc) -> {inv result} {view result = value} (! return {result}) ]
  
  predicate invariant' [@inline:trivial] (self: t_Arc) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: t_Arc)
  
  axiom inv_axiom [@rewrite]: forall x: t_Arc [inv'0 x]. inv'0 x = invariant' x
  
  let rec as_ref (self_: t_Arc) (return (x: Int32.t)) = {[@expl:as_ref 'self_' type invariant] inv'0 self_}
    any [ return (result: Int32.t) -> {result = view self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec arc (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new {(2: Int32.t)} (fun (_ret: t_Arc) -> [ &arc'0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] view arc'0 = (2: Int32.t)} s1
      | s1 = as_ref {arc'0} (fun (_ret: Int32.t) -> [ &inner <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = {[@expl:assertion] Int32.to_int inner = 2} s1 | s1 = bb3 ]
    | bb3 = return {_0} ] [ & _0: () = Any.any_l () | & arc'0: t_Arc = Any.any_l () | & inner: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
