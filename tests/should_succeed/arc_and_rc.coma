module M_arc_and_rc__rc [#"arc_and_rc.rs" 6 0 6 11]
  let%span src = "../../creusot-contracts/src/std/rc.rs" 30 26 30 43
  let%span src'0 = "../../creusot-contracts/src/std/rc.rs" 35 26 35 46
  let%span sarc_and_rc = "arc_and_rc.rs" 7 21 7 22
  let%span sarc_and_rc'0 = "arc_and_rc.rs" 8 18 8 30
  let%span sarc_and_rc'1 = "arc_and_rc.rs" 10 18 10 29
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Rc  =
    { t_Rc__ptr: t_NonNull; t_Rc__phantom: (); t_Rc__alloc: () }
  
  function view (self: t_Rc) : Int32.t
  
  let rec new (value:Int32.t) (return'  (x:t_Rc))= any
    [ return''0 (result:t_Rc)-> {[%#src] view result = value} (! return' {result}) ]
  
  
  let rec as_ref (self_:t_Rc) (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#src'0] result = view self_} (! return' {result}) ]
  
  
  function view'0 (self: Int32.t) : int =
    [%#smodel] Int32.to_int self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec rc[#"arc_and_rc.rs" 6 0 6 11] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = new {[%#sarc_and_rc] (1: Int32.t)} (fun (_ret:t_Rc) ->  [ &rc'0 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sarc_and_rc'0] view rc'0 = (1: Int32.t)} s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = as_ref {rc'0} (fun (_ret:Int32.t) ->  [ &inner <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#sarc_and_rc'1] view'0 inner = 1} s1 | s1 = bb4 ] 
    | bb4 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () | & rc'0: t_Rc = Any.any_l () | & inner: Int32.t = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_arc_and_rc__arc [#"arc_and_rc.rs" 13 0 13 12]
  let%span sarc_and_rc = "arc_and_rc.rs" 14 23 14 24
  let%span sarc_and_rc'0 = "arc_and_rc.rs" 15 18 15 31
  let%span sarc_and_rc'1 = "arc_and_rc.rs" 17 18 17 29
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span ssync = "../../creusot-contracts/src/std/sync.rs" 30 26 30 43
  let%span ssync'0 = "../../creusot-contracts/src/std/sync.rs" 35 26 35 46
  
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Arc  =
    { t_Arc__ptr: t_NonNull; t_Arc__phantom: (); t_Arc__alloc: () }
  
  function view (self: t_Arc) : Int32.t
  
  let rec new (value:Int32.t) (return'  (x:t_Arc))= any
    [ return''0 (result:t_Arc)-> {[%#ssync] view result = value} (! return' {result}) ]
  
  
  let rec as_ref (self_:t_Arc) (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#ssync'0] result = view self_} (! return' {result}) ]
  
  
  function view'0 (self: Int32.t) : int =
    [%#smodel] Int32.to_int self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec arc[#"arc_and_rc.rs" 13 0 13 12] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = new {[%#sarc_and_rc] (2: Int32.t)} (fun (_ret:t_Arc) ->  [ &arc'0 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sarc_and_rc'0] view arc'0 = (2: Int32.t)} s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = as_ref {arc'0} (fun (_ret:Int32.t) ->  [ &inner <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#sarc_and_rc'1] view'0 inner = 2} s1 | s1 = bb4 ] 
    | bb4 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () | & arc'0: t_Arc = Any.any_l () | & inner: Int32.t = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
