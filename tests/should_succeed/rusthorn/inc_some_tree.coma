module M_inc_some_tree__qyi12127997673864742005__lemma_sum_nonneg (* Tree *)
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_Tree = C_Node t_Tree UInt32.t t_Tree | C_Leaf
  
  function sum (self: t_Tree) : int = match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Tree
  
  function lemma_sum_nonneg (self: t_Tree) : ()
  
  goal vc_lemma_sum_nonneg: match self with
      | C_Node tl _ tr -> sum tl >= 0
      -> (let _ = lemma_sum_nonneg tl in sum tr >= 0
      -> (let _ = lemma_sum_nonneg tr in [@expl:lemma_sum_nonneg ensures] sum self >= 0))
      | C_Leaf -> [@expl:lemma_sum_nonneg ensures] sum self >= 0
      end
end
module M_inc_some_tree__qyi12127997673864742005__sum_x (* Tree *)
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Tree = C_Node t_Tree UInt32.t t_Tree | C_Leaf
  
  let rec v_Node (input: t_Tree) (ret (field_0: t_Tree) (field_1: UInt32.t) (field_2: t_Tree)) = any
    [ good (field_0: t_Tree) (field_1: UInt32.t) (field_2: t_Tree) -> {C_Node field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad ->
    {forall field_0: t_Tree, field_1: UInt32.t, field_2: t_Tree [C_Node field_0 field_1 field_2: t_Tree]. C_Node field_0 field_1 field_2
        <> input}
      (! {false}
      any) ]
  
  function sum (self: t_Tree) : int = match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  function lemma_sum_nonneg (self: t_Tree) : () = match self with
      | C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | C_Leaf -> ()
      end
  
  axiom lemma_sum_nonneg_spec: forall self: t_Tree. sum self >= 0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_x (self: t_Tree) (return (x: UInt32.t)) = {[@expl:sum_x requires] sum self <= 1000000}
    (! bb0
    [ bb0 = any
      [ br0 (x0: t_Tree) (x1: UInt32.t) (x2: t_Tree) -> {self = C_Node x0 x1 x2} (! bb4)
      | br1 -> {self = C_Leaf} (! bb3) ]
    | bb3 = s0 [ s0 = [ &_0 <- (0: UInt32.t) ] s1 | s1 = bb7 ]
    | bb4 = s0
      [ s0 = v_Node {self} (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) -> [ &tl <- r0 ] s1)
      | s1 = v_Node {self} (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) -> [ &a <- r1 ] s2)
      | s2 = v_Node {self} (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) -> [ &tr <- r2 ] s3)
      | s3 = {[@expl:assertion] let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in true} s4
      | s4 = sum_x {tl} (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s5)
      | s5 = bb5 ]
    | bb5 = s0
      [ s0 = UInt32.add {_11} {a} (fun (_ret: UInt32.t) -> [ &_10 <- _ret ] s1)
      | s1 = sum_x {tr} (fun (_ret: UInt32.t) -> [ &_14 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0 [ s0 = UInt32.add {_10} {_14} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = return {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & self: t_Tree = self
    | & tl: t_Tree = Any.any_l ()
    | & a: UInt32.t = Any.any_l ()
    | & tr: t_Tree = Any.any_l ()
    | & _10: UInt32.t = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _14: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> {[@expl:sum_x ensures] UInt32.t'int result = sum self} (! return {result}) ]
end
module M_inc_some_tree__qyi12127997673864742005__take_some (* Tree *)
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Tree = C_Node t_Tree UInt32.t t_Tree | C_Leaf
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_Tree) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  let rec v_Node (input: t_Tree) (ret (field_0: t_Tree) (field_1: UInt32.t) (field_2: t_Tree)) = any
    [ good (field_0: t_Tree) (field_1: UInt32.t) (field_2: t_Tree) -> {C_Node field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad ->
    {forall field_0: t_Tree, field_1: UInt32.t, field_2: t_Tree [C_Node field_0 field_1 field_2: t_Tree]. C_Node field_0 field_1 field_2
        <> input}
      (! {false}
      any) ]
  
  function sum (self: t_Tree) : int = match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  function lemma_sum_nonneg (self: t_Tree) : () = match self with
      | C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | C_Leaf -> ()
      end
  
  axiom lemma_sum_nonneg_spec: forall self: t_Tree. sum self >= 0
  
  let rec random (return (x: bool)) = any [ return (result: bool) -> (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Tree) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_some (self: MutBorrow.t t_Tree) (return (x: MutBorrow.t UInt32.t)) = (! bb0
    [ bb0 = any
      [ br0 (x0: t_Tree) (x1: UInt32.t) (x2: t_Tree) -> {self.current = C_Node x0 x1 x2} (! bb4)
      | br1 -> {self.current = C_Leaf} (! bb3) ]
    | bb3 = s0 [ s0 = -{resolve self}- s1 | s1 = bb15 ]
    | bb15 = bb15 [ bb15 = (! bb15) ]
    | bb4 = s0
      [ s0 = v_Node {self.current}
          (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) ->
            MutBorrow.borrow_final <t_Tree> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
              (fun (_ret: MutBorrow.t t_Tree) ->
                [ &mtl <- _ret ] [ &self <- { self with current = C_Node _ret.final r1 r2 } ] s1))
      | s1 = v_Node {self.current}
          (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) ->
            MutBorrow.borrow_final <UInt32.t> {r1} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
              (fun (_ret: MutBorrow.t UInt32.t) ->
                [ &ma <- _ret ] [ &self <- { self with current = C_Node r0 _ret.final r2 } ] s2))
      | s2 = v_Node {self.current}
          (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) ->
            MutBorrow.borrow_final <t_Tree> {r2} {MutBorrow.inherit_id (MutBorrow.get_id self) 3}
              (fun (_ret: MutBorrow.t t_Tree) ->
                [ &mtr <- _ret ] [ &self <- { self with current = C_Node r0 r1 _ret.final } ] s3))
      | s3 = {[@expl:assertion] let _ = lemma_sum_nonneg mtl.current in let _ = lemma_sum_nonneg mtr.current in true} s4
      | s4 = random (fun (_ret: bool) -> [ &_14 <- _ret ] s5)
      | s5 = bb5 ]
    | bb5 = any [ br0 -> {_14 = false} (! bb7) | br1 -> {_14} (! bb6) ]
    | bb6 = s0
      [ s0 = -{resolve'0 mtr}- s1
      | s1 = -{resolve'0 mtl}- s2
      | s2 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_15 <- _ret ] [ &ma <- { ma with current = _ret.final } ] s3)
      | s3 = MutBorrow.borrow_final <UInt32.t> {_15.current} {MutBorrow.get_id _15}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_13 <- _ret ] [ &_15 <- { _15 with current = _ret.final } ] s4)
      | s4 = -{resolve'1 _15}- s5
      | s5 = bb14 ]
    | bb7 = s0 [ s0 = -{resolve'1 ma}- s1 | s1 = random (fun (_ret: bool) -> [ &_16 <- _ret ] s2) | s2 = bb8 ]
    | bb8 = any [ br0 -> {_16 = false} (! bb11) | br1 -> {_16} (! bb9) ]
    | bb9 = s0
      [ s0 = -{resolve'0 mtr}- s1
      | s1 = MutBorrow.borrow_final <t_Tree> {mtl.current} {MutBorrow.get_id mtl}
          (fun (_ret: MutBorrow.t t_Tree) -> [ &_19 <- _ret ] [ &mtl <- { mtl with current = _ret.final } ] s2)
      | s2 = take_some {_19} (fun (_ret: MutBorrow.t UInt32.t) -> [ &_18 <- _ret ] s3)
      | s3 = bb10 ]
    | bb10 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_17 <- _ret ] [ &_18 <- { _18 with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_17.current} {MutBorrow.get_id _17}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_13 <- _ret ] [ &_17 <- { _17 with current = _ret.final } ] s2)
      | s2 = -{resolve'1 _18}- s3
      | s3 = -{resolve'1 _17}- s4
      | s4 = bb14 ]
    | bb11 = s0
      [ s0 = -{resolve'0 mtl}- s1
      | s1 = MutBorrow.borrow_final <t_Tree> {mtr.current} {MutBorrow.get_id mtr}
          (fun (_ret: MutBorrow.t t_Tree) -> [ &_21 <- _ret ] [ &mtr <- { mtr with current = _ret.final } ] s2)
      | s2 = take_some {_21} (fun (_ret: MutBorrow.t UInt32.t) -> [ &_20 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_20.current} {MutBorrow.get_id _20}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_13 <- _ret ] [ &_20 <- { _20 with current = _ret.final } ] s1)
      | s1 = -{resolve'1 _20}- s2
      | s2 = bb14 ]
    | bb14 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_13.current} {MutBorrow.get_id _13}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_10 <- _ret ] [ &_13 <- { _13 with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_10.current} {MutBorrow.get_id _10}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_5 <- _ret ] [ &_10 <- { _10 with current = _ret.final } ] s2)
      | s2 = -{resolve'1 _13}- s3
      | s3 = -{resolve'1 _10}- s4
      | s4 = -{resolve'0 mtr}- s5
      | s5 = -{resolve'1 ma}- s6
      | s6 = -{resolve'0 mtl}- s7
      | s7 = MutBorrow.borrow_final <UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_2 <- _ret ] [ &_5 <- { _5 with current = _ret.final } ] s8)
      | s8 = MutBorrow.borrow_final <UInt32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s9)
      | s9 = -{resolve'1 _5}- s10
      | s10 = -{resolve'1 _2}- s11
      | s11 = -{resolve self}- s12
      | s12 = return {_0} ] ]
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & self: MutBorrow.t t_Tree = self
    | & _2: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: MutBorrow.t UInt32.t = Any.any_l ()
    | & mtl: MutBorrow.t t_Tree = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & mtr: MutBorrow.t t_Tree = Any.any_l ()
    | & _10: MutBorrow.t UInt32.t = Any.any_l ()
    | & _13: MutBorrow.t UInt32.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: MutBorrow.t UInt32.t = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _17: MutBorrow.t UInt32.t = Any.any_l ()
    | & _18: MutBorrow.t UInt32.t = Any.any_l ()
    | & _19: MutBorrow.t t_Tree = Any.any_l ()
    | & _20: MutBorrow.t UInt32.t = Any.any_l ()
    | & _21: MutBorrow.t t_Tree = Any.any_l () ])
    [ return (result: MutBorrow.t UInt32.t) -> {[@expl:take_some ensures #0] sum self.final - sum self.current
      = UInt32.t'int result.final - UInt32.t'int result.current}
      {[@expl:take_some ensures #1] UInt32.t'int result.current <= sum self.current}
      (! return {result}) ]
end
module M_inc_some_tree__inc_some_tree
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Tree = C_Node t_Tree UInt32.t t_Tree | C_Leaf
  
  function sum (self: t_Tree) : int = match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  let rec sum_x (self: t_Tree) (return (x: UInt32.t)) = {[@expl:sum_x requires] sum self <= 1000000}
    any [ return (result: UInt32.t) -> {UInt32.t'int result = sum self} (! return {result}) ]
  
  let rec take_some (self: MutBorrow.t t_Tree) (return (x: MutBorrow.t UInt32.t)) = any
    [ return (result: MutBorrow.t UInt32.t) -> {sum self.final - sum self.current
      = UInt32.t'int result.final - UInt32.t'int result.current}
      {UInt32.t'int result.current <= sum self.current}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inc_some_tree (t: t_Tree) (k: UInt32.t) (return (x: ())) = {[@expl:inc_some_tree requires] sum t
      + UInt32.t'int k
    <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = sum_x {t} (fun (_ret: UInt32.t) -> [ &sum0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_Tree> {t}
          (fun (_ret: MutBorrow.t t_Tree) -> [ &_7 <- _ret ] [ &t <- _ret.final ] s1)
      | s1 = take_some {_7} (fun (_ret: MutBorrow.t UInt32.t) -> [ &ma <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = UInt32.add {ma.current} {k} (fun (_ret: UInt32.t) -> [ &ma <- { ma with current = _ret } ] s1)
      | s1 = -{resolve ma}- s2
      | s2 = sum_x {t} (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0
      [ s0 = UInt32.add {sum0} {k} (fun (_ret: UInt32.t) -> [ &_13 <- _ret ] s1)
      | s1 = [ &_10 <- _11 = _13 ] s2
      | s2 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb6) ] ]
    | bb6 = return {_0}
    | bb5 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & t: t_Tree = t
    | & k: UInt32.t = k
    | & sum0: UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & _7: MutBorrow.t t_Tree = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _13: UInt32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
