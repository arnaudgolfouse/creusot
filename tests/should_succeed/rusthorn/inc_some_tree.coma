module M_inc_some_tree__qyi12127997673864742005__lemma_sum_nonneg [#"inc_some_tree.rs" 28 4 28 30] (* Tree *)
  let%span sinc_some_tree = "inc_some_tree.rs" 27 14 27 29
  let%span sinc_some_tree'0 = "inc_some_tree.rs" 29 8 35 9
  let%span sinc_some_tree'1 = "inc_some_tree.rs" 19 12 22 13
  
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_Tree = C_Node t_Tree UInt32.t t_Tree | C_Leaf
  
  function sum [#"inc_some_tree.rs" 17 4 17 27] (self: t_Tree) : int = [%#sinc_some_tree'1] match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Tree
  
  function lemma_sum_nonneg [#"inc_some_tree.rs" 28 4 28 30] (self'0: t_Tree) : ()
  
  goal vc_lemma_sum_nonneg: match self with
      | C_Node tl _ tr -> ([%#sinc_some_tree] sum tl >= 0)
      -> (let _ = lemma_sum_nonneg tl in ([%#sinc_some_tree] sum tr >= 0)
      -> (let _ = lemma_sum_nonneg tr in [@expl:lemma_sum_nonneg ensures] [%#sinc_some_tree] sum self >= 0))
      | C_Leaf -> [@expl:lemma_sum_nonneg ensures] [%#sinc_some_tree] sum self >= 0
      end
end
module M_inc_some_tree__qyi12127997673864742005__sum_x [#"inc_some_tree.rs" 40 4 40 26] (* Tree *)
  let%span sinc_some_tree = "inc_some_tree.rs" 50 20 50 21
  let%span sinc_some_tree'0 = "inc_some_tree.rs" 43 16 47 17
  let%span sinc_some_tree'1 = "inc_some_tree.rs" 38 15 38 38
  let%span sinc_some_tree'2 = "inc_some_tree.rs" 39 14 39 35
  let%span sinc_some_tree'3 = "inc_some_tree.rs" 27 14 27 29
  let%span sinc_some_tree'4 = "inc_some_tree.rs" 29 8 35 9
  let%span sinc_some_tree'5 = "inc_some_tree.rs" 19 12 22 13
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Tree = C_Node t_Tree UInt32.t t_Tree | C_Leaf
  
  let rec v_Node (input: t_Tree) (ret (field_0: t_Tree) (field_1: UInt32.t) (field_2: t_Tree)) = any
    [ good (field_0: t_Tree) (field_1: UInt32.t) (field_2: t_Tree) -> {C_Node field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad ->
    {forall field_0: t_Tree, field_1: UInt32.t, field_2: t_Tree [C_Node field_0 field_1 field_2: t_Tree]. C_Node field_0 field_1 field_2
        <> input}
      (! {false}
      any) ]
  
  function sum [#"inc_some_tree.rs" 17 4 17 27] (self: t_Tree) : int = [%#sinc_some_tree'5] match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  function lemma_sum_nonneg [#"inc_some_tree.rs" 28 4 28 30] (self: t_Tree) : () = [%#sinc_some_tree'4] match self with
      | C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | C_Leaf -> ()
      end
  
  axiom lemma_sum_nonneg_spec: forall self: t_Tree. [%#sinc_some_tree'3] sum self >= 0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_x [#"inc_some_tree.rs" 40 4 40 26] (self: t_Tree) (return' (x: UInt32.t)) =
    {[@expl:sum_x requires] [%#sinc_some_tree'1] sum self <= 1000000}
    (! bb0
    [ bb0 = any
      [ br0 (x0: t_Tree) (x1: UInt32.t) (x2: t_Tree) -> {self'0 = C_Node x0 x1 x2} (! bb4)
      | br1 -> {self'0 = C_Leaf} (! bb3) ]
    | bb3 = s0 [ s0 = [ &_0 <- [%#sinc_some_tree] (0: UInt32.t) ] s1 | s1 = bb7 ]
    | bb4 = s0
      [ s0 = v_Node {self'0} (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) -> [ &tl <- r0 ] s1)
      | s1 = v_Node {self'0} (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) -> [ &a <- r1 ] s2)
      | s2 = v_Node {self'0} (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) -> [ &tr <- r2 ] s3)
      | s3 = {[@expl:assertion] [%#sinc_some_tree'0] let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in true}
        s4
      | s4 = sum_x {tl} (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s5)
      | s5 = bb5 ]
    | bb5 = s0
      [ s0 = UInt32.add {_11} {a} (fun (_ret: UInt32.t) -> [ &_10 <- _ret ] s1)
      | s1 = sum_x {tr} (fun (_ret: UInt32.t) -> [ &_14 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0 [ s0 = UInt32.add {_10} {_14} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = return''0 {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & self'0: t_Tree = self
    | & tl: t_Tree = Any.any_l ()
    | & a: UInt32.t = Any.any_l ()
    | & tr: t_Tree = Any.any_l ()
    | & _10: UInt32.t = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _14: UInt32.t = Any.any_l () ])
    [ return''0 (result: UInt32.t) -> {[@expl:sum_x ensures] [%#sinc_some_tree'2] UInt32.t'int result = sum self}
      (! return' {result}) ]
end
module M_inc_some_tree__qyi12127997673864742005__take_some [#"inc_some_tree.rs" 56 4 56 39] (* Tree *)
  let%span sinc_some_tree = "inc_some_tree.rs" 59 16 63 17
  let%span sinc_some_tree'0 = "inc_some_tree.rs" 54 14 54 64
  let%span sinc_some_tree'1 = "inc_some_tree.rs" 55 14 55 35
  let%span sinc_some_tree'2 = "inc_some_tree.rs" 27 14 27 29
  let%span sinc_some_tree'3 = "inc_some_tree.rs" 29 8 35 9
  let%span sinc_some_tree'4 = "inc_some_tree.rs" 19 12 22 13
  let%span smodel = "../../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Tree = C_Node t_Tree UInt32.t t_Tree | C_Leaf
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Tree) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Tree) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Node (input: t_Tree) (ret (field_0: t_Tree) (field_1: UInt32.t) (field_2: t_Tree)) = any
    [ good (field_0: t_Tree) (field_1: UInt32.t) (field_2: t_Tree) -> {C_Node field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad ->
    {forall field_0: t_Tree, field_1: UInt32.t, field_2: t_Tree [C_Node field_0 field_1 field_2: t_Tree]. C_Node field_0 field_1 field_2
        <> input}
      (! {false}
      any) ]
  
  function sum [#"inc_some_tree.rs" 17 4 17 27] (self: t_Tree) : int = [%#sinc_some_tree'4] match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  function lemma_sum_nonneg [#"inc_some_tree.rs" 28 4 28 30] (self: t_Tree) : () = [%#sinc_some_tree'3] match self with
      | C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | C_Leaf -> ()
      end
  
  axiom lemma_sum_nonneg_spec: forall self: t_Tree. [%#sinc_some_tree'2] sum self >= 0
  
  let rec random (return' (x: bool)) = any [ return''0 (result: bool) -> (! return' {result}) ]
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_Tree) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_Tree) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: MutBorrow.t UInt32.t) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  function view [@inline:trivial] (self: MutBorrow.t UInt32.t) : int = [%#smodel] UInt32.t'int self.current
  
  meta "rewrite_def" function view
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_some [#"inc_some_tree.rs" 56 4 56 39] (self: MutBorrow.t t_Tree) (return' (x: MutBorrow.t UInt32.t)) =
    (! bb0
    [ bb0 = any
      [ br0 (x0: t_Tree) (x1: UInt32.t) (x2: t_Tree) -> {self'0.current = C_Node x0 x1 x2} (! bb4)
      | br1 -> {self'0.current = C_Leaf} (! bb3) ]
    | bb3 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = bb15 ]
    | bb15 = bb15'0 [ bb15'0 = (! bb15'0) ]
    | bb4 = s0
      [ s0 = v_Node {self'0.current}
          (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) ->
            MutBorrow.borrow_final <t_Tree> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
              (fun (_ret: MutBorrow.t t_Tree) ->
                [ &mtl <- _ret ] [ &self'0 <- { self'0 with current = C_Node _ret.final r1 r2 } ] s1))
      | s1 = v_Node {self'0.current}
          (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) ->
            MutBorrow.borrow_final <UInt32.t> {r1} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
              (fun (_ret: MutBorrow.t UInt32.t) ->
                [ &ma <- _ret ] [ &self'0 <- { self'0 with current = C_Node r0 _ret.final r2 } ] s2))
      | s2 = v_Node {self'0.current}
          (fun (r0: t_Tree) (r1: UInt32.t) (r2: t_Tree) ->
            MutBorrow.borrow_final <t_Tree> {r2} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 3}
              (fun (_ret: MutBorrow.t t_Tree) ->
                [ &mtr <- _ret ] [ &self'0 <- { self'0 with current = C_Node r0 r1 _ret.final } ] s3))
      | s3 =
        {[@expl:assertion] [%#sinc_some_tree] let _ = lemma_sum_nonneg mtl.current in let _ = lemma_sum_nonneg mtr.current in true}
        s4
      | s4 = random (fun (_ret: bool) -> [ &_14 <- _ret ] s5)
      | s5 = bb5 ]
    | bb5 = any [ br0 -> {_14 = false} (! bb7) | br1 -> {_14} (! bb6) ]
    | bb6 = s0
      [ s0 = -{resolve'2 mtr}- s1
      | s1 = -{resolve'2 mtl}- s2
      | s2 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_15 <- _ret ] [ &ma <- { ma with current = _ret.final } ] s3)
      | s3 = MutBorrow.borrow_final <UInt32.t> {_15.current} {MutBorrow.get_id _15}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_13 <- _ret ] [ &_15 <- { _15 with current = _ret.final } ] s4)
      | s4 = -{resolve'4 _15}- s5
      | s5 = bb14 ]
    | bb7 = s0 [ s0 = -{resolve'4 ma}- s1 | s1 = random (fun (_ret: bool) -> [ &_16 <- _ret ] s2) | s2 = bb8 ]
    | bb8 = any [ br0 -> {_16 = false} (! bb11) | br1 -> {_16} (! bb9) ]
    | bb9 = s0
      [ s0 = -{resolve'2 mtr}- s1
      | s1 = MutBorrow.borrow_final <t_Tree> {mtl.current} {MutBorrow.get_id mtl}
          (fun (_ret: MutBorrow.t t_Tree) -> [ &_19 <- _ret ] [ &mtl <- { mtl with current = _ret.final } ] s2)
      | s2 = take_some {_19} (fun (_ret: MutBorrow.t UInt32.t) -> [ &_18 <- _ret ] s3)
      | s3 = bb10 ]
    | bb10 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_17 <- _ret ] [ &_18 <- { _18 with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_17.current} {MutBorrow.get_id _17}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_13 <- _ret ] [ &_17 <- { _17 with current = _ret.final } ] s2)
      | s2 = -{resolve'4 _18}- s3
      | s3 = -{resolve'4 _17}- s4
      | s4 = bb14 ]
    | bb11 = s0
      [ s0 = -{resolve'2 mtl}- s1
      | s1 = MutBorrow.borrow_final <t_Tree> {mtr.current} {MutBorrow.get_id mtr}
          (fun (_ret: MutBorrow.t t_Tree) -> [ &_21 <- _ret ] [ &mtr <- { mtr with current = _ret.final } ] s2)
      | s2 = take_some {_21} (fun (_ret: MutBorrow.t UInt32.t) -> [ &_20 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_20.current} {MutBorrow.get_id _20}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_13 <- _ret ] [ &_20 <- { _20 with current = _ret.final } ] s1)
      | s1 = -{resolve'4 _20}- s2
      | s2 = bb14 ]
    | bb14 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_13.current} {MutBorrow.get_id _13}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_10 <- _ret ] [ &_13 <- { _13 with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_10.current} {MutBorrow.get_id _10}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_5 <- _ret ] [ &_10 <- { _10 with current = _ret.final } ] s2)
      | s2 = -{resolve'4 _13}- s3
      | s3 = -{resolve'4 _10}- s4
      | s4 = -{resolve'2 mtr}- s5
      | s5 = -{resolve'4 ma}- s6
      | s6 = -{resolve'2 mtl}- s7
      | s7 = MutBorrow.borrow_final <UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_2 <- _ret ] [ &_5 <- { _5 with current = _ret.final } ] s8)
      | s8 = MutBorrow.borrow_final <UInt32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s9)
      | s9 = -{resolve'4 _5}- s10
      | s10 = -{resolve'4 _2}- s11
      | s11 = -{resolve'0 self'0}- s12
      | s12 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & self'0: MutBorrow.t t_Tree = self
    | & _2: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: MutBorrow.t UInt32.t = Any.any_l ()
    | & mtl: MutBorrow.t t_Tree = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & mtr: MutBorrow.t t_Tree = Any.any_l ()
    | & _10: MutBorrow.t UInt32.t = Any.any_l ()
    | & _13: MutBorrow.t UInt32.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: MutBorrow.t UInt32.t = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _17: MutBorrow.t UInt32.t = Any.any_l ()
    | & _18: MutBorrow.t UInt32.t = Any.any_l ()
    | & _19: MutBorrow.t t_Tree = Any.any_l ()
    | & _20: MutBorrow.t UInt32.t = Any.any_l ()
    | & _21: MutBorrow.t t_Tree = Any.any_l () ])
    [ return''0 (result: MutBorrow.t UInt32.t) -> {[@expl:take_some ensures #0] [%#sinc_some_tree'0] sum self.final
        - sum self.current
      = UInt32.t'int result.final - view result}
      {[@expl:take_some ensures #1] [%#sinc_some_tree'1] view result <= sum self.current}
      (! return' {result}) ]
end
module M_inc_some_tree__inc_some_tree [#"inc_some_tree.rs" 78 0 78 41]
  let%span sinc_some_tree = "inc_some_tree.rs" 82 12 82 33
  let%span sinc_some_tree'0 = "inc_some_tree.rs" 77 11 77 36
  let%span sinc_some_tree'1 = "inc_some_tree.rs" 38 15 38 38
  let%span sinc_some_tree'2 = "inc_some_tree.rs" 39 14 39 35
  let%span sinc_some_tree'3 = "inc_some_tree.rs" 54 14 54 64
  let%span sinc_some_tree'4 = "inc_some_tree.rs" 55 14 55 35
  let%span sinc_some_tree'5 = "inc_some_tree.rs" 19 12 22 13
  let%span smodel = "../../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Tree = C_Node t_Tree UInt32.t t_Tree | C_Leaf
  
  function sum [#"inc_some_tree.rs" 17 4 17 27] (self: t_Tree) : int = [%#sinc_some_tree'5] match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  let rec sum_x (self: t_Tree) (return' (x: UInt32.t)) = {[@expl:sum_x requires] [%#sinc_some_tree'1] sum self
    <= 1000000}
    any [ return''0 (result: UInt32.t) -> {[%#sinc_some_tree'2] UInt32.t'int result = sum self} (! return' {result}) ]
  
  function view [@inline:trivial] (self: MutBorrow.t UInt32.t) : int = [%#smodel] UInt32.t'int self.current
  
  meta "rewrite_def" function view
  
  let rec take_some (self: MutBorrow.t t_Tree) (return' (x: MutBorrow.t UInt32.t)) = any
    [ return''0 (result: MutBorrow.t UInt32.t) -> {[%#sinc_some_tree'3] sum self.final - sum self.current
      = UInt32.t'int result.final - view result}
      {[%#sinc_some_tree'4] view result <= sum self.current}
      (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t UInt32.t) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inc_some_tree [#"inc_some_tree.rs" 78 0 78 41] (t: t_Tree) (k: UInt32.t) (return' (x: ())) =
    {[@expl:inc_some_tree requires] [%#sinc_some_tree'0] sum t + UInt32.t'int k <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = sum_x {t'0} (fun (_ret: UInt32.t) -> [ &sum0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_Tree> {t'0}
          (fun (_ret: MutBorrow.t t_Tree) -> [ &_7 <- _ret ] [ &t'0 <- _ret.final ] s1)
      | s1 = take_some {_7} (fun (_ret: MutBorrow.t UInt32.t) -> [ &ma <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = UInt32.add {ma.current} {k'0} (fun (_ret: UInt32.t) -> [ &ma <- { ma with current = _ret } ] s1)
      | s1 = -{resolve'0 ma}- s2
      | s2 = sum_x {t'0} (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0
      [ s0 = UInt32.add {sum0} {k'0} (fun (_ret: UInt32.t) -> [ &_13 <- _ret ] s1)
      | s1 = [ &_10 <- _11 = _13 ] s2
      | s2 = any [ br0 -> {_10 = false} (! bb4) | br1 -> {_10} (! bb7) ] ]
    | bb7 = return''0 {_0}
    | bb4 = {[%#sinc_some_tree] false} any ]
    [ & _0: () = Any.any_l ()
    | & t'0: t_Tree = t
    | & k'0: UInt32.t = k
    | & sum0: UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & _7: MutBorrow.t t_Tree = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _13: UInt32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
