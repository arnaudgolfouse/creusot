module M_take_max
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_u32 (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      Less
    else
      if self = o then Equal else Greater
  
  
  function eq_cmp_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_u32_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log_u32 x y = Equal)
  
  function antisym2_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Greater -> cmp_log_u32 y x = Less
  
  function antisym1_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Less -> cmp_log_u32 y x = Greater
  
  function trans_u32 (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_u32_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log_u32 x y = o
      -> cmp_log_u32 y z = o -> cmp_log_u32 x z = o
  
  function refl_u32 (x: UInt32.t) : ()
  
  axiom refl_u32_spec: forall x: UInt32.t. cmp_log_u32 x x = Equal
  
  function cmp_gt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log_u32 x y = Greater)
  
  function cmp_ge_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log_u32 x y <> Less)
  
  function cmp_lt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log_u32 x y = Less)
  
  function cmp_le_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log_u32 x y <> Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_max (ma: MutBorrow.t UInt32.t) (mb: MutBorrow.t UInt32.t) (return (x: MutBorrow.t UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_6 <- UInt32.ge ma.current mb.current ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb2) | br1 -> {_6} (! bb1) ] ]
    | bb1 = s0
      [ s0 = -{resolve_ref_u32 mb}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_9 <- _ret ] [ &ma <- { ma with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_5 <- _ret ] [ &_9 <- { _9 with current = _ret.final } ] s3)
      | s3 = -{resolve_ref_u32 _9}- s4
      | s4 = bb3 ]
    | bb2 = s0
      [ s0 = -{resolve_ref_u32 ma}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {mb.current} {MutBorrow.get_id mb}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_5 <- _ret ] [ &mb <- { mb with current = _ret.final } ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_3 <- _ret ] [ &_5 <- { _5 with current = _ret.final } ] s1)
      | s1 = -{resolve_ref_u32 _5}- s2
      | s2 = MutBorrow.borrow_final <UInt32.t> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_0 <- _ret ] [ &_3 <- { _3 with current = _ret.final } ] s3)
      | s3 = -{resolve_ref_u32 _3}- s4
      | s4 = -{resolve_ref_u32 mb}- s5
      | s5 = -{resolve_ref_u32 ma}- s6
      | s6 = return {_0} ] ]
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = ma
    | & mb: MutBorrow.t UInt32.t = mb
    | & _3: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: MutBorrow.t UInt32.t = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _9: MutBorrow.t UInt32.t = Any.any_l () ])
    [ return (result: MutBorrow.t UInt32.t) -> {[@expl:take_max ensures] if UInt32.ge ma.current mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return {result}) ]
end
module M_inc_max_repeat
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Range_u32 = { start: UInt32.t; end': UInt32.t }
  
  let rec into_iter_Range_u32 (self_: t_Range_u32) (return (x: t_Range_u32)) = any
    [ return (result: t_Range_u32) -> {result = self_} (! return {result}) ]
  
  function deep_model_u32 [@inline:trivial] (self: UInt32.t) : int = UInt32.t'int self
  
  meta "rewrite_def" function deep_model_u32
  
  predicate produces_Range_u32 (self: t_Range_u32) (visited: Seq.seq UInt32.t) (o: t_Range_u32) =
    self.end' = o.end'
    /\ deep_model_u32 self.start <= deep_model_u32 o.start
    /\ (Seq.length visited > 0 -> deep_model_u32 o.start <= deep_model_u32 o.end')
    /\ Seq.length visited = deep_model_u32 o.start - deep_model_u32 self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_u32 (Seq.get visited i) = deep_model_u32 self.start + i)
  
  function produces_trans_Range_u32 (a: t_Range_u32) (ab: Seq.seq UInt32.t) (b: t_Range_u32) (bc: Seq.seq UInt32.t) (c: t_Range_u32) : ()
  
  axiom produces_trans_Range_u32_spec:
    forall a: t_Range_u32, ab: Seq.seq UInt32.t, b: t_Range_u32, bc: Seq.seq UInt32.t, c: t_Range_u32. produces_Range_u32 a ab b
      -> produces_Range_u32 b bc c -> produces_Range_u32 a (Seq.(++) ab bc) c
  
  function produces_refl_Range_u32 (self: t_Range_u32) : ()
  
  axiom produces_refl_Range_u32_spec:
    forall self: t_Range_u32. produces_Range_u32 self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate inv_Range_u32 [@inline:trivial] (_1: t_Range_u32) = true
  
  meta "rewrite_def" predicate inv_Range_u32
  
  predicate inv_Seq_u32 [@inline:trivial] (_1: Seq.seq UInt32.t) = true
  
  meta "rewrite_def" predicate inv_Seq_u32
  
  type t_Option_u32 = None | Some UInt32.t
  
  predicate resolve_ref_Range_u32 [@inline:trivial] (_1: MutBorrow.t t_Range_u32) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_u32
  
  predicate completed_Range_u32 (self: MutBorrow.t t_Range_u32) =
    resolve_ref_Range_u32 self /\ deep_model_u32 self.current.start >= deep_model_u32 self.current.end'
  
  let rec next_Range_u32 (self_: MutBorrow.t t_Range_u32) (return (x: t_Option_u32)) = any
    [ return (result: t_Option_u32) -> {match result with
        | None -> completed_Range_u32 self_
        | Some v -> produces_Range_u32 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_u32) (ret (f0: UInt32.t)) = any
    [ good (f0: UInt32.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: UInt32.t [Some f0: t_Option_u32]. Some f0 <> input} (! {false} any) ]
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_u32 (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      Less
    else
      if self = o then Equal else Greater
  
  
  function eq_cmp_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_u32_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log_u32 x y = Equal)
  
  function antisym2_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Greater -> cmp_log_u32 y x = Less
  
  function antisym1_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Less -> cmp_log_u32 y x = Greater
  
  function trans_u32 (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_u32_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log_u32 x y = o
      -> cmp_log_u32 y z = o -> cmp_log_u32 x z = o
  
  function refl_u32 (x: UInt32.t) : ()
  
  axiom refl_u32_spec: forall x: UInt32.t. cmp_log_u32 x x = Equal
  
  function cmp_gt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log_u32 x y = Greater)
  
  function cmp_ge_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log_u32 x y <> Less)
  
  function cmp_lt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log_u32 x y = Less)
  
  function cmp_le_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log_u32 x y <> Greater)
  
  let rec take_max (ma: MutBorrow.t UInt32.t) (mb: MutBorrow.t UInt32.t) (return (x: MutBorrow.t UInt32.t)) = any
    [ return (result: MutBorrow.t UInt32.t) -> {if UInt32.ge ma.current mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return {result}) ]
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inc_max_repeat (a: UInt32.t) (b: UInt32.t) (n: UInt32.t) (return (x: ())) =
    {[@expl:inc_max_repeat requires] UInt32.le a (1000000: UInt32.t)
    /\ UInt32.le b (1000000: UInt32.t) /\ UInt32.le n (1000000: UInt32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_7 <- { start = (0: UInt32.t); end' = n } ] s1
      | s1 = into_iter_Range_u32 {_7} (fun (_ret: t_Range_u32) -> [ &iter <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt32.t ] s1 | s1 = bb4 ]
    | bb4 = bb4
      [ bb4 = {[@expl:for invariant] inv_Seq_u32 produced}
        {[@expl:for invariant] inv_Range_u32 iter}
        {[@expl:for invariant] produces_Range_u32 iter_old produced iter}
        {[@expl:loop invariant #0] UInt32.t'int a <= 1000000 + Seq.length produced
        /\ UInt32.t'int b <= 1000000 + Seq.length produced}
        {[@expl:loop invariant #1] UInt32.t'int a >= UInt32.t'int b + Seq.length produced
        \/ UInt32.t'int b >= UInt32.t'int a + Seq.length produced}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_u32> {iter}
              (fun (_ret: MutBorrow.t t_Range_u32) -> [ &_22 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_u32> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret: MutBorrow.t t_Range_u32) -> [ &_21 <- _ret ] [ &_22 <- { _22 with current = _ret.final } ] s2)
          | s2 = next_Range_u32 {_21} (fun (_ret: t_Option_u32) -> [ &_20 <- _ret ] s3)
          | s3 = bb6 ]
        | bb6 = s0
          [ s0 = -{resolve_ref_Range_u32 _22}- s1
          | s1 = any [ br0 -> {_20 = None} (! bb9) | br1 (x0: UInt32.t) -> {_20 = Some x0} (! bb10) ] ]
        | bb10 = s0
          [ s0 = elim_Some {_20} (fun (r0: UInt32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_25 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb11 ]
        | bb11 = s0
          [ s0 = [ &produced <- _25 ] s1
          | s1 = MutBorrow.borrow_mut <UInt32.t> {a}
              (fun (_ret: MutBorrow.t UInt32.t) -> [ &_29 <- _ret ] [ &a <- _ret.final ] s2)
          | s2 = MutBorrow.borrow_mut <UInt32.t> {b}
              (fun (_ret: MutBorrow.t UInt32.t) -> [ &_31 <- _ret ] [ &b <- _ret.final ] s3)
          | s3 = MutBorrow.borrow_final <UInt32.t> {_29.current} {MutBorrow.get_id _29}
              (fun (_ret: MutBorrow.t UInt32.t) -> [ &_28 <- _ret ] [ &_29 <- { _29 with current = _ret.final } ] s4)
          | s4 = MutBorrow.borrow_final <UInt32.t> {_31.current} {MutBorrow.get_id _31}
              (fun (_ret: MutBorrow.t UInt32.t) -> [ &_30 <- _ret ] [ &_31 <- { _31 with current = _ret.final } ] s5)
          | s5 = take_max {_28} {_30} (fun (_ret: MutBorrow.t UInt32.t) -> [ &mc <- _ret ] s6)
          | s6 = bb12 ]
        | bb12 = s0
          [ s0 = -{resolve_ref_u32 _31}- s1
          | s1 = -{resolve_ref_u32 _29}- s2
          | s2 = UInt32.add {mc.current} {(1: UInt32.t)}
              (fun (_ret: UInt32.t) -> [ &mc <- { mc with current = _ret } ] s3)
          | s3 = -{resolve_ref_u32 mc}- s4
          | s4 = bb4 ] ] ]
    | bb9 = s0
      [ s0 = UInt32.add {b} {n} (fun (_ret: UInt32.t) -> [ &_36 <- _ret ] s1)
      | s1 = [ &_34 <- UInt32.ge a _36 ] s2
      | s2 = any [ br0 -> {_34 = false} (! bb14) | br1 -> {_34} (! bb17) ] ]
    | bb14 = s0
      [ s0 = UInt32.add {a} {n} (fun (_ret: UInt32.t) -> [ &_41 <- _ret ] s1)
      | s1 = [ &_39 <- UInt32.ge b _41 ] s2
      | s2 = any [ br0 -> {_39 = false} (! bb16) | br1 -> {_39} (! bb17) ] ]
    | bb17 = return {_0}
    | bb16 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & a: UInt32.t = a
    | & b: UInt32.t = b
    | & n: UInt32.t = n
    | & iter: t_Range_u32 = Any.any_l ()
    | & _7: t_Range_u32 = Any.any_l ()
    | & iter_old: t_Range_u32 = Any.any_l ()
    | & produced: Seq.seq UInt32.t = Any.any_l ()
    | & _20: t_Option_u32 = Any.any_l ()
    | & _21: MutBorrow.t t_Range_u32 = Any.any_l ()
    | & _22: MutBorrow.t t_Range_u32 = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt32.t = Any.any_l ()
    | & _25: Seq.seq UInt32.t = Any.any_l ()
    | & mc: MutBorrow.t UInt32.t = Any.any_l ()
    | & _28: MutBorrow.t UInt32.t = Any.any_l ()
    | & _29: MutBorrow.t UInt32.t = Any.any_l ()
    | & _30: MutBorrow.t UInt32.t = Any.any_l ()
    | & _31: MutBorrow.t UInt32.t = Any.any_l ()
    | & _34: bool = Any.any_l ()
    | & _36: UInt32.t = Any.any_l ()
    | & _39: bool = Any.any_l ()
    | & _41: UInt32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
