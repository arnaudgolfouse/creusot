module M_inc_some_2_tree__qyi9454558703362393917__lemma_sum_nonneg [#"inc_some_2_tree.rs" 32 4 32 30] (* Tree *)
  let%span sinc_some_2_tree = "inc_some_2_tree.rs" 31 14 31 29
  let%span sinc_some_2_tree'0 = "inc_some_2_tree.rs" 33 8 39 9
  let%span sinc_some_2_tree'1 = "inc_some_2_tree.rs" 23 12 26 13
  
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_Tree  =
    | C_Node t_Tree UInt32.t t_Tree
    | C_Leaf
  
  function sum [#"inc_some_2_tree.rs" 21 4 21 23] (self : t_Tree) : int =
    [%#sinc_some_2_tree'1] match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  constant self  : t_Tree
  
  function lemma_sum_nonneg [#"inc_some_2_tree.rs" 32 4 32 30] (self'0 : t_Tree) : ()
  
  goal vc_lemma_sum_nonneg : match self with
    | C_Node tl _ tr -> ([%#sinc_some_2_tree] sum tl >= 0)
     -> (let _ = lemma_sum_nonneg tl in ([%#sinc_some_2_tree] sum tr >= 0)
     -> (let _ = lemma_sum_nonneg tr in [%#sinc_some_2_tree] sum self >= 0))
    | C_Leaf -> [%#sinc_some_2_tree] sum self >= 0
    end
end
module M_inc_some_2_tree__qyi9454558703362393917__sum_x [#"inc_some_2_tree.rs" 44 4 44 26] (* Tree *)
  let%span sinc_some_2_tree = "inc_some_2_tree.rs" 54 20 54 21
  let%span sinc_some_2_tree'0 = "inc_some_2_tree.rs" 48 20 48 41
  let%span sinc_some_2_tree'1 = "inc_some_2_tree.rs" 42 15 42 38
  let%span sinc_some_2_tree'2 = "inc_some_2_tree.rs" 43 14 43 35
  let%span sinc_some_2_tree'3 = "inc_some_2_tree.rs" 31 14 31 29
  let%span sinc_some_2_tree'4 = "inc_some_2_tree.rs" 33 8 39 9
  let%span sinc_some_2_tree'5 = "inc_some_2_tree.rs" 23 12 26 13
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Tree  =
    | C_Node t_Tree UInt32.t t_Tree
    | C_Leaf
  
  let rec v_Node (input:t_Tree) (ret  (field_0:t_Tree) (field_1:UInt32.t) (field_2:t_Tree))= any
    [ good (field_0:t_Tree) (field_1:UInt32.t) (field_2:t_Tree)-> {C_Node field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad -> {forall field_0 : t_Tree, field_1 : UInt32.t, field_2 : t_Tree [C_Node field_0 field_1 field_2 : t_Tree] . C_Node field_0 field_1 field_2
      <> input}
      (! {false}
      any) ]
  
  
  function sum [#"inc_some_2_tree.rs" 21 4 21 23] (self : t_Tree) : int =
    [%#sinc_some_2_tree'5] match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  function lemma_sum_nonneg [#"inc_some_2_tree.rs" 32 4 32 30] (self : t_Tree) : () =
    [%#sinc_some_2_tree'4] match self with
      | C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | C_Leaf -> ()
      end
  
  axiom lemma_sum_nonneg_spec : forall self : t_Tree . [%#sinc_some_2_tree'3] sum self >= 0
  
  meta "compute_max_steps" 1000000
  
  let rec sum_x[#"inc_some_2_tree.rs" 44 4 44 26] (self:t_Tree) (return'  (x:UInt32.t))= {[@expl:sum_x requires] [%#sinc_some_2_tree'1] sum self
    <= 1000000}
    (! bb0
    [ bb0 = any
      [ br0 (x0:t_Tree) (x1:UInt32.t) (x2:t_Tree)-> {self'0 = C_Node x0 x1 x2} (! bb2)
      | br1 -> {self'0 = C_Leaf} (! bb3) ]
    
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sinc_some_2_tree] (0 : UInt32.t) ] s1 | s1 = bb7 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Node {self'0} (fun (r0:t_Tree) (r1:UInt32.t) (r2:t_Tree) ->  [ &tl <- r0 ] s1)
      | s1 = v_Node {self'0} (fun (r0:t_Tree) (r1:UInt32.t) (r2:t_Tree) ->  [ &a <- r1 ] s2)
      | s2 = v_Node {self'0} (fun (r0:t_Tree) (r1:UInt32.t) (r2:t_Tree) ->  [ &tr <- r2 ] s3)
      | s3 = {[@expl:assertion] [%#sinc_some_2_tree'0] let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in true}
        s4
      | s4 = sum_x {tl} (fun (_ret:UInt32.t) ->  [ &_11 <- _ret ] s5)
      | s5 = bb5 ]
    
    | bb5 = s0
      [ s0 = UInt32.add {_11} {a} (fun (_ret:UInt32.t) ->  [ &_10 <- _ret ] s1)
      | s1 = sum_x {tr} (fun (_ret:UInt32.t) ->  [ &_14 <- _ret ] s2)
      | s2 = bb6 ]
    
    | bb6 = s0 [ s0 = UInt32.add {_10} {_14} (fun (_ret:UInt32.t) ->  [ &_0 <- _ret ] s1) | s1 = bb7 ] 
    | bb7 = return''0 {_0} ]
    )
    [ & _0 : UInt32.t = Any.any_l ()
    | & self'0 : t_Tree = self
    | & tl : t_Tree = Any.any_l ()
    | & a : UInt32.t = Any.any_l ()
    | & tr : t_Tree = Any.any_l ()
    | & _10 : UInt32.t = Any.any_l ()
    | & _11 : UInt32.t = Any.any_l ()
    | & _14 : UInt32.t = Any.any_l () ]
    
    [ return''0 (result:UInt32.t)-> {[@expl:sum_x ensures] [%#sinc_some_2_tree'2] UInt32.t'int result = sum self}
      (! return' {result}) ]

end
module M_inc_some_2_tree__qyi9454558703362393917__take_some_rest [#"inc_some_2_tree.rs" 62 4 62 57] (* Tree *)
  let%span sinc_some_2_tree = "inc_some_2_tree.rs" 66 20 66 42
  let%span sinc_some_2_tree'0 = "inc_some_2_tree.rs" 58 14 59 72
  let%span sinc_some_2_tree'1 = "inc_some_2_tree.rs" 60 14 60 37
  let%span sinc_some_2_tree'2 = "inc_some_2_tree.rs" 61 14 61 42
  let%span sinc_some_2_tree'3 = "inc_some_2_tree.rs" 31 14 31 29
  let%span sinc_some_2_tree'4 = "inc_some_2_tree.rs" 33 8 39 9
  let%span sinc_some_2_tree'5 = "inc_some_2_tree.rs" 23 12 26 13
  let%span smodel = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 53 20 53 34
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Tree  =
    | C_Node t_Tree UInt32.t t_Tree
    | C_Leaf
  
  predicate resolve (self : MutBorrow.t t_Tree) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t t_Tree) =
    resolve _0
  
  let rec v_Node (input:t_Tree) (ret  (field_0:t_Tree) (field_1:UInt32.t) (field_2:t_Tree))= any
    [ good (field_0:t_Tree) (field_1:UInt32.t) (field_2:t_Tree)-> {C_Node field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad -> {forall field_0 : t_Tree, field_1 : UInt32.t, field_2 : t_Tree [C_Node field_0 field_1 field_2 : t_Tree] . C_Node field_0 field_1 field_2
      <> input}
      (! {false}
      any) ]
  
  
  function sum [#"inc_some_2_tree.rs" 21 4 21 23] (self : t_Tree) : int =
    [%#sinc_some_2_tree'5] match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  function lemma_sum_nonneg [#"inc_some_2_tree.rs" 32 4 32 30] (self : t_Tree) : () =
    [%#sinc_some_2_tree'4] match self with
      | C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | C_Leaf -> ()
      end
  
  axiom lemma_sum_nonneg_spec : forall self : t_Tree . [%#sinc_some_2_tree'3] sum self >= 0
  
  let rec random (return'  (x:bool))= any [ return''0 (result:bool)-> (! return' {result}) ] 
  
  predicate resolve'1 (self : MutBorrow.t t_Tree) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0 : MutBorrow.t t_Tree) =
    resolve'1 _0
  
  type tuple  =
    { _p0: MutBorrow.t UInt32.t; _p1: MutBorrow.t t_Tree }
  
  predicate resolve'3 (self : MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0 : MutBorrow.t UInt32.t) =
    resolve'3 _0
  
  function view (self : MutBorrow.t UInt32.t) : int =
    [%#smodel] UInt32.t'int self.current
  
  meta "compute_max_steps" 1000000
  
  let rec take_some_rest[#"inc_some_2_tree.rs" 62 4 62 57] (self:MutBorrow.t t_Tree) (return'  (x:tuple))= (! bb0
    [ bb0 = any
      [ br0 (x0:t_Tree) (x1:UInt32.t) (x2:t_Tree)-> {self'0.current = C_Node x0 x1 x2} (! bb2)
      | br1 -> {self'0.current = C_Leaf} (! bb3) ]
    
    | bb3 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = bb19 ] 
    | bb19 = bb19'0 [ bb19'0 = (! bb20) [ bb20 = bb19'0 ]  ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Node {self'0.current}
          (fun (r0:t_Tree) (r1:UInt32.t) (r2:t_Tree) ->
            MutBorrow.borrow_final <t_Tree> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
              (fun (_ret:MutBorrow.t t_Tree) ->
                 [ &mtl <- _ret ] 
                 [ &self'0 <- { self'0 with current = C_Node _ret.final r1 r2 } ] 
                s1))
      | s1 = v_Node {self'0.current}
          (fun (r0:t_Tree) (r1:UInt32.t) (r2:t_Tree) ->
            MutBorrow.borrow_final <UInt32.t> {r1} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
              (fun (_ret:MutBorrow.t UInt32.t) ->
                 [ &ma <- _ret ] 
                 [ &self'0 <- { self'0 with current = C_Node r0 _ret.final r2 } ] 
                s2))
      | s2 = v_Node {self'0.current}
          (fun (r0:t_Tree) (r1:UInt32.t) (r2:t_Tree) ->
            MutBorrow.borrow_final <t_Tree> {r2} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 3}
              (fun (_ret:MutBorrow.t t_Tree) ->
                 [ &mtr <- _ret ] 
                 [ &self'0 <- { self'0 with current = C_Node r0 r1 _ret.final } ] 
                s3))
      | s3 = {[@expl:assertion] [%#sinc_some_2_tree] let _ = lemma_sum_nonneg mtl.current in let _ = lemma_sum_nonneg mtr.current in true}
        s4
      | s4 = random (fun (_ret:bool) ->  [ &_11 <- _ret ] s5)
      | s5 = bb5 ]
    
    | bb5 = any [ br0 -> {_11 = false} (! bb11) | br1 -> {_11} (! bb6) ] 
    | bb6 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_12 <- _ret ]  [ &ma <- { ma with current = _ret.final } ] s1)
      | s1 = random (fun (_ret:bool) ->  [ &_15 <- _ret ] s2)
      | s2 = bb7 ]
    
    | bb7 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ] 
    | bb8 = s0
      [ s0 = -{resolve'2 mtr}- s1
      | s1 = MutBorrow.borrow_final <t_Tree> {mtl.current} {MutBorrow.get_id mtl}
          (fun (_ret:MutBorrow.t t_Tree) ->  [ &_16 <- _ret ]  [ &mtl <- { mtl with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <t_Tree> {_16.current} {MutBorrow.get_id _16}
          (fun (_ret:MutBorrow.t t_Tree) ->  [ &_14 <- _ret ]  [ &_16 <- { _16 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _16}- s4
      | s4 = bb10 ]
    
    | bb9 = s0
      [ s0 = -{resolve'2 mtl}- s1
      | s1 = MutBorrow.borrow_final <t_Tree> {mtr.current} {MutBorrow.get_id mtr}
          (fun (_ret:MutBorrow.t t_Tree) ->  [ &_14 <- _ret ]  [ &mtr <- { mtr with current = _ret.final } ] s2)
      | s2 = bb10 ]
    
    | bb10 = s0
      [ s0 = MutBorrow.borrow_final <t_Tree> {_14.current} {MutBorrow.get_id _14}
          (fun (_ret:MutBorrow.t t_Tree) ->  [ &_13 <- _ret ]  [ &_14 <- { _14 with current = _ret.final } ] s1)
      | s1 =  [ &_0 <- { _p0 = _12; _p1 = _13 } ] s2
      | s2 = -{resolve'0 _14}- s3
      | s3 = bb18 ]
    
    | bb11 = s0 [ s0 = -{resolve'4 ma}- s1 | s1 = random (fun (_ret:bool) ->  [ &_17 <- _ret ] s2) | s2 = bb12 ] 
    | bb12 = any [ br0 -> {_17 = false} (! bb15) | br1 -> {_17} (! bb13) ] 
    | bb13 = s0
      [ s0 = -{resolve'2 mtr}- s1
      | s1 = MutBorrow.borrow_final <t_Tree> {mtl.current} {MutBorrow.get_id mtl}
          (fun (_ret:MutBorrow.t t_Tree) ->  [ &_18 <- _ret ]  [ &mtl <- { mtl with current = _ret.final } ] s2)
      | s2 = take_some_rest {_18} (fun (_ret:tuple) ->  [ &_0 <- _ret ] s3)
      | s3 = bb14 ]
    
    | bb14 = bb17
    | bb15 = s0
      [ s0 = -{resolve'2 mtl}- s1
      | s1 = MutBorrow.borrow_final <t_Tree> {mtr.current} {MutBorrow.get_id mtr}
          (fun (_ret:MutBorrow.t t_Tree) ->  [ &_19 <- _ret ]  [ &mtr <- { mtr with current = _ret.final } ] s2)
      | s2 = take_some_rest {_19} (fun (_ret:tuple) ->  [ &_0 <- _ret ] s3)
      | s3 = bb16 ]
    
    | bb16 = bb17
    | bb17 = bb18
    | bb18 = s0
      [ s0 = -{resolve'2 mtr}- s1
      | s1 = -{resolve'4 ma}- s2
      | s2 = -{resolve'2 mtl}- s3
      | s3 = -{resolve'0 self'0}- s4
      | s4 = return''0 {_0} ]
     ]
    )
    [ & _0 : tuple = Any.any_l ()
    | & self'0 : MutBorrow.t t_Tree = self
    | & mtl : MutBorrow.t t_Tree = Any.any_l ()
    | & ma : MutBorrow.t UInt32.t = Any.any_l ()
    | & mtr : MutBorrow.t t_Tree = Any.any_l ()
    | & _11 : bool = Any.any_l ()
    | & _12 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _13 : MutBorrow.t t_Tree = Any.any_l ()
    | & _14 : MutBorrow.t t_Tree = Any.any_l ()
    | & _15 : bool = Any.any_l ()
    | & _16 : MutBorrow.t t_Tree = Any.any_l ()
    | & _17 : bool = Any.any_l ()
    | & _18 : MutBorrow.t t_Tree = Any.any_l ()
    | & _19 : MutBorrow.t t_Tree = Any.any_l () ]
    
    [ return''0 (result:tuple)-> {[@expl:take_some_rest ensures #0] [%#sinc_some_2_tree'0] sum self.final
      - sum self.current
      = UInt32.t'int (result._p0).final + sum (result._p1).final - view result._p0 - sum (result._p1).current}
      {[@expl:take_some_rest ensures #1] [%#sinc_some_2_tree'1] view result._p0 <= sum self.current}
      {[@expl:take_some_rest ensures #2] [%#sinc_some_2_tree'2] sum (result._p1).current <= sum self.current}
      (! return' {result}) ]

end
module M_inc_some_2_tree__inc_some_2_tree [#"inc_some_2_tree.rs" 84 0 84 51]
  let%span sinc_some_2_tree = "inc_some_2_tree.rs" 90 4 90 38
  let%span sinc_some_2_tree'0 = "inc_some_2_tree.rs" 83 11 83 41
  let%span sinc_some_2_tree'1 = "inc_some_2_tree.rs" 42 15 42 38
  let%span sinc_some_2_tree'2 = "inc_some_2_tree.rs" 43 14 43 35
  let%span sinc_some_2_tree'3 = "inc_some_2_tree.rs" 58 14 59 72
  let%span sinc_some_2_tree'4 = "inc_some_2_tree.rs" 60 14 60 37
  let%span sinc_some_2_tree'5 = "inc_some_2_tree.rs" 61 14 61 42
  let%span sinc_some_2_tree'6 = "inc_some_2_tree.rs" 23 12 26 13
  let%span smodel = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 53 20 53 34
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Tree  =
    | C_Node t_Tree UInt32.t t_Tree
    | C_Leaf
  
  function sum [#"inc_some_2_tree.rs" 21 4 21 23] (self : t_Tree) : int =
    [%#sinc_some_2_tree'6] match self with
      | C_Node tl a tr -> sum tl + UInt32.t'int a + sum tr
      | C_Leaf -> 0
      end
  
  let rec sum_x (self:t_Tree) (return'  (x:UInt32.t))= {[@expl:sum_x requires] [%#sinc_some_2_tree'1] sum self
    <= 1000000}
    any [ return''0 (result:UInt32.t)-> {[%#sinc_some_2_tree'2] UInt32.t'int result = sum self} (! return' {result}) ] 
  
  type tuple  =
    { _p0: MutBorrow.t UInt32.t; _p1: MutBorrow.t t_Tree }
  
  function view (self : MutBorrow.t UInt32.t) : int =
    [%#smodel] UInt32.t'int self.current
  
  let rec take_some_rest (self:MutBorrow.t t_Tree) (return'  (x:tuple))= any
    [ return''0 (result:tuple)-> {[%#sinc_some_2_tree'3] sum self.final - sum self.current
      = UInt32.t'int (result._p0).final + sum (result._p1).final - view result._p0 - sum (result._p1).current}
      {[%#sinc_some_2_tree'4] view result._p0 <= sum self.current}
      {[%#sinc_some_2_tree'5] sum (result._p1).current <= sum self.current}
      (! return' {result}) ]
  
  
  predicate resolve (self : MutBorrow.t t_Tree) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t t_Tree) =
    resolve _0
  
  predicate resolve'1 (self : MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0 : MutBorrow.t UInt32.t) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec inc_some_2_tree[#"inc_some_2_tree.rs" 84 0 84 51] (t:t_Tree) (j:UInt32.t) (k:UInt32.t) (return'  (x:()))= {[@expl:inc_some_2_tree requires] [%#sinc_some_2_tree'0] sum t
    + UInt32.t'int j
    + UInt32.t'int k
    <= 1000000}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = sum_x {t'0} (fun (_ret:UInt32.t) ->  [ &sum0 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_Tree> {t'0}
          (fun (_ret:MutBorrow.t t_Tree) ->  [ &_10 <- _ret ]  [ &t'0 <- _ret.final ] s1)
      | s1 = take_some_rest {_10} (fun (_ret:tuple) ->  [ &_9 <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 =  [ &ma <- _9._p0 ] s1
      | s1 =  [ &mt <- _9._p1 ] s2
      | s2 = MutBorrow.borrow_final <t_Tree> {mt.current} {MutBorrow.get_id mt}
          (fun (_ret:MutBorrow.t t_Tree) ->  [ &_13 <- _ret ]  [ &mt <- { mt with current = _ret.final } ] s3)
      | s3 = take_some_rest {_13} (fun (_ret:tuple) ->  [ &_12 <- _ret ] s4)
      | s4 = bb4 ]
    
    | bb4 = s0
      [ s0 = -{match _12 with
          | {_p1 = x} -> resolve'0 x
          | _ -> true
          end}-
        s1
      | s1 =  [ &mb <- _12._p0 ] s2
      | s2 = UInt32.add {ma.current} {j'0} (fun (_ret:UInt32.t) ->  [ &ma <- { ma with current = _ret } ] s3)
      | s3 = -{resolve'2 ma}- s4
      | s4 = UInt32.add {mb.current} {k'0} (fun (_ret:UInt32.t) ->  [ &mb <- { mb with current = _ret } ] s5)
      | s5 = -{resolve'2 mb}- s6
      | s6 = -{resolve'0 mt}- s7
      | s7 = sum_x {t'0} (fun (_ret:UInt32.t) ->  [ &_18 <- _ret ] s8)
      | s8 = bb5 ]
    
    | bb5 = s0
      [ s0 = UInt32.add {sum0} {j'0} (fun (_ret:UInt32.t) ->  [ &_21 <- _ret ] s1)
      | s1 = UInt32.add {_21} {k'0} (fun (_ret:UInt32.t) ->  [ &_20 <- _ret ] s2)
      | s2 =  [ &_17 <- _18 = _20 ] s3
      | s3 = any [ br0 -> {_17 = false} (! bb7) | br1 -> {_17} (! bb6) ]  ]
    
    | bb6 = bb8
    | bb8 = return''0 {_0}
    | bb7 = {[%#sinc_some_2_tree] false} any ]
    )
    [ & _0 : () = Any.any_l ()
    | & t'0 : t_Tree = t
    | & j'0 : UInt32.t = j
    | & k'0 : UInt32.t = k
    | & sum0 : UInt32.t = Any.any_l ()
    | & ma : MutBorrow.t UInt32.t = Any.any_l ()
    | & mt : MutBorrow.t t_Tree = Any.any_l ()
    | & _9 : tuple = Any.any_l ()
    | & _10 : MutBorrow.t t_Tree = Any.any_l ()
    | & mb : MutBorrow.t UInt32.t = Any.any_l ()
    | & _12 : tuple = Any.any_l ()
    | & _13 : MutBorrow.t t_Tree = Any.any_l ()
    | & _17 : bool = Any.any_l ()
    | & _18 : UInt32.t = Any.any_l ()
    | & _20 : UInt32.t = Any.any_l ()
    | & _21 : UInt32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
