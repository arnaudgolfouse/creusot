module M_inc_max_many__take_max
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t UInt32.t) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_max (ma: MutBorrow.t UInt32.t) (mb: MutBorrow.t UInt32.t) (return' (x: MutBorrow.t UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_6 <- UInt32.ge ma'0.current mb'0.current ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb2) | br1 -> {_6} (! bb1) ] ]
    | bb1 = s0
      [ s0 = -{resolve'0 mb'0}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {ma'0.current} {MutBorrow.get_id ma'0}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_9 <- _ret ] [ &ma'0 <- { ma'0 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_5 <- _ret ] [ &_9 <- { _9 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _9}- s4
      | s4 = bb3 ]
    | bb2 = s0
      [ s0 = -{resolve'0 ma'0}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {mb'0.current} {MutBorrow.get_id mb'0}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_5 <- _ret ] [ &mb'0 <- { mb'0 with current = _ret.final } ] s2)
      | s2 = bb3 ]
    | bb3 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_3 <- _ret ] [ &_5 <- { _5 with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_0 <- _ret ] [ &_3 <- { _3 with current = _ret.final } ] s2)
      | s2 = -{resolve'0 _5}- s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = -{resolve'0 mb'0}- s5
      | s5 = -{resolve'0 ma'0}- s6
      | s6 = return''0 {_0} ] ]
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & ma'0: MutBorrow.t UInt32.t = ma
    | & mb'0: MutBorrow.t UInt32.t = mb
    | & _3: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: MutBorrow.t UInt32.t = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _9: MutBorrow.t UInt32.t = Any.any_l () ])
    [ return''0 (result: MutBorrow.t UInt32.t) -> {[@expl:take_max ensures] if UInt32.ge ma.current mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
end
module M_inc_max_many__inc_max_many
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  let rec take_max (ma: MutBorrow.t UInt32.t) (mb: MutBorrow.t UInt32.t) (return' (x: MutBorrow.t UInt32.t)) = any
    [ return''0 (result: MutBorrow.t UInt32.t) -> {if UInt32.ge ma.current mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t UInt32.t) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inc_max_many (a: UInt32.t) (b: UInt32.t) (k: UInt32.t) (return' (x: ())) =
    {[@expl:inc_max_many requires] UInt32.le a (1000000: UInt32.t)
    /\ UInt32.le b (1000000: UInt32.t) /\ UInt32.le k (1000000: UInt32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {a'0}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_7 <- _ret ] [ &a'0 <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_mut <UInt32.t> {b'0}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_9 <- _ret ] [ &b'0 <- _ret.final ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_6 <- _ret ] [ &_7 <- { _7 with current = _ret.final } ] s3)
      | s3 = MutBorrow.borrow_final <UInt32.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_8 <- _ret ] [ &_9 <- { _9 with current = _ret.final } ] s4)
      | s4 = take_max {_6} {_8} (fun (_ret: MutBorrow.t UInt32.t) -> [ &mc <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0
      [ s0 = -{resolve'0 _9}- s1
      | s1 = -{resolve'0 _7}- s2
      | s2 = UInt32.add {mc.current} {k'0} (fun (_ret: UInt32.t) -> [ &mc <- { mc with current = _ret } ] s3)
      | s3 = -{resolve'0 mc}- s4
      | s4 = UInt32.add {b'0} {k'0} (fun (_ret: UInt32.t) -> [ &_14 <- _ret ] s5)
      | s5 = [ &_12 <- UInt32.ge a'0 _14 ] s6
      | s6 = any [ br0 -> {_12 = false} (! bb3) | br1 -> {_12} (! bb6) ] ]
    | bb3 = s0
      [ s0 = UInt32.add {a'0} {k'0} (fun (_ret: UInt32.t) -> [ &_19 <- _ret ] s1)
      | s1 = [ &_17 <- UInt32.ge b'0 _19 ] s2
      | s2 = any [ br0 -> {_17 = false} (! bb5) | br1 -> {_17} (! bb6) ] ]
    | bb6 = return''0 {_0}
    | bb5 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & a'0: UInt32.t = a
    | & b'0: UInt32.t = b
    | & k'0: UInt32.t = k
    | & mc: MutBorrow.t UInt32.t = Any.any_l ()
    | & _6: MutBorrow.t UInt32.t = Any.any_l ()
    | & _7: MutBorrow.t UInt32.t = Any.any_l ()
    | & _8: MutBorrow.t UInt32.t = Any.any_l ()
    | & _9: MutBorrow.t UInt32.t = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _14: UInt32.t = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & _19: UInt32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
