module M_inc_max_many__take_max [#"inc_max_many.rs" 6 0 6 64]
  let%span sinc_max_many = "inc_max_many.rs" 4 10 5 54
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 53 20 53 34
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve (self : MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t UInt32.t) =
    resolve _0
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self : UInt32.t) (o : UInt32.t) : t_Ordering =
    [%#sord'12] if UInt32.lt self o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering) : ()
  
  axiom trans_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering . ([%#sord'4] cmp_log x y = o)
   -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x : UInt32.t) : ()
  
  axiom refl_spec : forall x : UInt32.t . [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  let rec take_max[#"inc_max_many.rs" 6 0 6 64] (ma:MutBorrow.t UInt32.t) (mb:MutBorrow.t UInt32.t) (return'  (x:MutBorrow.t UInt32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_6 <- UInt32.ge ma'0.current mb'0.current ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb2) | br1 -> {_6} (! bb1) ]  ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 mb'0}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {ma'0.current} {MutBorrow.get_id ma'0}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_9 <- _ret ]  [ &ma'0 <- { ma'0 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_5 <- _ret ]  [ &_9 <- { _9 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _9}- s4
      | s4 = bb3 ]
    
    | bb2 = s0
      [ s0 = -{resolve'0 ma'0}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {mb'0.current} {MutBorrow.get_id mb'0}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_5 <- _ret ]  [ &mb'0 <- { mb'0 with current = _ret.final } ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_3 <- _ret ]  [ &_5 <- { _5 with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_0 <- _ret ]  [ &_3 <- { _3 with current = _ret.final } ] s2)
      | s2 = -{resolve'0 _5}- s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = -{resolve'0 mb'0}- s5
      | s5 = -{resolve'0 ma'0}- s6
      | s6 = return''0 {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t UInt32.t = Any.any_l ()
    | & ma'0 : MutBorrow.t UInt32.t = ma
    | & mb'0 : MutBorrow.t UInt32.t = mb
    | & _3 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _5 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _6 : bool = Any.any_l ()
    | & _9 : MutBorrow.t UInt32.t = Any.any_l () ]
    
    [ return''0 (result:MutBorrow.t UInt32.t)-> {[@expl:take_max ensures] [%#sinc_max_many] if UInt32.ge ma.current mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]

end
module M_inc_max_many__inc_max_many [#"inc_max_many.rs" 11 0 11 51]
  let%span sinc_max_many = "inc_max_many.rs" 14 4 14 37
  let%span sinc_max_many'0 = "inc_max_many.rs" 10 11 10 70
  let%span sinc_max_many'1 = "inc_max_many.rs" 4 10 5 54
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 53 20 53 34
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self : UInt32.t) (o : UInt32.t) : t_Ordering =
    [%#sord'12] if UInt32.lt self o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering) : ()
  
  axiom trans_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering . ([%#sord'4] cmp_log x y = o)
   -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x : UInt32.t) : ()
  
  axiom refl_spec : forall x : UInt32.t . [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log_spec : forall x : UInt32.t, y : UInt32.t . [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  let rec take_max (ma:MutBorrow.t UInt32.t) (mb:MutBorrow.t UInt32.t) (return'  (x:MutBorrow.t UInt32.t))= any
    [ return''0 (result:MutBorrow.t UInt32.t)-> {[%#sinc_max_many'1] if UInt32.ge ma.current mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
  
  
  predicate resolve (self : MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t UInt32.t) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec inc_max_many[#"inc_max_many.rs" 11 0 11 51] (a:UInt32.t) (b:UInt32.t) (k:UInt32.t) (return'  (x:()))= {[@expl:inc_max_many requires] [%#sinc_max_many'0] UInt32.le a (1000000 : UInt32.t)
    /\ UInt32.le b (1000000 : UInt32.t) /\ UInt32.le k (1000000 : UInt32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {a'0}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_7 <- _ret ]  [ &a'0 <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_mut <UInt32.t> {b'0}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_9 <- _ret ]  [ &b'0 <- _ret.final ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_6 <- _ret ]  [ &_7 <- { _7 with current = _ret.final } ] s3)
      | s3 = MutBorrow.borrow_final <UInt32.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_8 <- _ret ]  [ &_9 <- { _9 with current = _ret.final } ] s4)
      | s4 = take_max {_6} {_8} (fun (_ret:MutBorrow.t UInt32.t) ->  [ &mc <- _ret ] s5)
      | s5 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 _9}- s1
      | s1 = -{resolve'0 _7}- s2
      | s2 = UInt32.add {mc.current} {k'0} (fun (_ret:UInt32.t) ->  [ &mc <- { mc with current = _ret } ] s3)
      | s3 = -{resolve'0 mc}- s4
      | s4 = UInt32.add {b'0} {k'0} (fun (_ret:UInt32.t) ->  [ &_14 <- _ret ] s5)
      | s5 =  [ &_12 <- UInt32.ge a'0 _14 ] s6
      | s6 = any [ br0 -> {_12 = false} (! bb3) | br1 -> {_12} (! bb2) ]  ]
    
    | bb2 = bb6
    | bb3 = s0
      [ s0 = UInt32.add {a'0} {k'0} (fun (_ret:UInt32.t) ->  [ &_19 <- _ret ] s1)
      | s1 =  [ &_17 <- UInt32.ge b'0 _19 ] s2
      | s2 = any [ br0 -> {_17 = false} (! bb5) | br1 -> {_17} (! bb4) ]  ]
    
    | bb4 = bb6
    | bb6 = return''0 {_0}
    | bb5 = {[%#sinc_max_many] false} any ]
    )
    [ & _0 : () = Any.any_l ()
    | & a'0 : UInt32.t = a
    | & b'0 : UInt32.t = b
    | & k'0 : UInt32.t = k
    | & mc : MutBorrow.t UInt32.t = Any.any_l ()
    | & _6 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _7 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _8 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _9 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _12 : bool = Any.any_l ()
    | & _14 : UInt32.t = Any.any_l ()
    | & _17 : bool = Any.any_l ()
    | & _19 : UInt32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
