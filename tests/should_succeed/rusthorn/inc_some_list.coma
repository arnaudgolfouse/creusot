module M_inc_some_list__qyi14489061725823948544__lemma_sum_nonneg [#"inc_some_list.rs" 32 4 32 30] (* List *)
  let%span sinc_some_list = "inc_some_list.rs" 31 14 31 29
  let%span sinc_some_list'0 = "inc_some_list.rs" 33 8 36 9
  let%span sinc_some_list'1 = "inc_some_list.rs" 23 12 26 13
  
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_List  =
    | C_Cons UInt32.t t_List
    | C_Nil
  
  function sum [#"inc_some_list.rs" 21 4 21 23] (self: t_List) : int =
    [%#sinc_some_list'1] match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self  : t_List
  
  function lemma_sum_nonneg [#"inc_some_list.rs" 32 4 32 30] (self'0: t_List) : ()
  
  goal vc_lemma_sum_nonneg: match self with
    | C_Cons _ l -> ([%#sinc_some_list] sum l >= 0)
     -> ([@expl:lemma_sum_nonneg ensures] [%#sinc_some_list] sum self >= 0)
    | C_Nil -> [@expl:lemma_sum_nonneg ensures] [%#sinc_some_list] sum self >= 0
    end
end
module M_inc_some_list__qyi14489061725823948544__sum_x [#"inc_some_list.rs" 41 4 41 26] (* List *)
  let%span sinc_some_list = "inc_some_list.rs" 44 19 44 20
  let%span sinc_some_list'0 = "inc_some_list.rs" 39 15 39 38
  let%span sinc_some_list'1 = "inc_some_list.rs" 40 14 40 35
  let%span sinc_some_list'2 = "inc_some_list.rs" 23 12 26 13
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_List  =
    | C_Cons UInt32.t t_List
    | C_Nil
  
  let rec v_Cons (input:t_List) (ret  (field_0:UInt32.t) (field_1:t_List))= any
    [ good (field_0:UInt32.t) (field_1:t_List)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: UInt32.t, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1
      <> input}
      (! {false}
      any) ]
  
  
  function sum [#"inc_some_list.rs" 21 4 21 23] (self: t_List) : int =
    [%#sinc_some_list'2] match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_x[#"inc_some_list.rs" 41 4 41 26] (self:t_List) (return'  (x:UInt32.t))= {[@expl:sum_x requires] [%#sinc_some_list'0] sum self
    <= 1000000}
    (! bb0
    [ bb0 = any [ br0 (x0:UInt32.t) (x1:t_List)-> {self'0 = C_Cons x0 x1} (! bb4) | br1 -> {self'0 = C_Nil} (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sinc_some_list] (0: UInt32.t) ] s1 | s1 = bb6 ] 
    | bb4 = s0
      [ s0 = v_Cons {self'0} (fun (r0:UInt32.t) (r1:t_List) ->  [ &a <- r0 ] s1)
      | s1 = v_Cons {self'0} (fun (r0:UInt32.t) (r1:t_List) ->  [ &l <- r1 ] s2)
      | s2 = sum_x {l} (fun (_ret:UInt32.t) ->  [ &_8 <- _ret ] s3)
      | s3 = bb5 ]
    
    | bb5 = s0 [ s0 = UInt32.add {a} {_8} (fun (_ret:UInt32.t) ->  [ &_0 <- _ret ] s1) | s1 = bb6 ] 
    | bb6 = return''0 {_0} ]
    )
    [ & _0: UInt32.t = Any.any_l ()
    | & self'0: t_List = self
    | & a: UInt32.t = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & _8: UInt32.t = Any.any_l () ]
    
    [ return''0 (result:UInt32.t)-> {[@expl:sum_x ensures] [%#sinc_some_list'1] UInt32.t'int result = sum self}
      (! return' {result}) ]

end
module M_inc_some_list__qyi14489061725823948544__take_some [#"inc_some_list.rs" 50 4 50 39] (* List *)
  let%span sinc_some_list = "inc_some_list.rs" 53 16 53 51
  let%span sinc_some_list'0 = "inc_some_list.rs" 48 14 48 64
  let%span sinc_some_list'1 = "inc_some_list.rs" 49 14 49 35
  let%span sinc_some_list'2 = "inc_some_list.rs" 31 14 31 29
  let%span sinc_some_list'3 = "inc_some_list.rs" 33 8 36 9
  let%span sinc_some_list'4 = "inc_some_list.rs" 23 12 26 13
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_List  =
    | C_Cons UInt32.t t_List
    | C_Nil
  
  predicate resolve (self: MutBorrow.t t_List) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_List) =
    resolve _0
  
  let rec v_Cons (input:t_List) (ret  (field_0:UInt32.t) (field_1:t_List))= any
    [ good (field_0:UInt32.t) (field_1:t_List)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: UInt32.t, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1
      <> input}
      (! {false}
      any) ]
  
  
  function sum [#"inc_some_list.rs" 21 4 21 23] (self: t_List) : int =
    [%#sinc_some_list'4] match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  function lemma_sum_nonneg [#"inc_some_list.rs" 32 4 32 30] (self: t_List) : () =
    [%#sinc_some_list'3] match self with
      | C_Cons _ l -> lemma_sum_nonneg l
      | C_Nil -> ()
      end
  
  axiom lemma_sum_nonneg_spec: forall self: t_List. [%#sinc_some_list'2] sum self >= 0
  
  let rec random (return'  (x:bool))= any [ return''0 (result:bool)-> (! return' {result}) ] 
  
  predicate resolve'1 (self: MutBorrow.t t_List) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_List) =
    resolve'1 _0
  
  predicate resolve'3 (self: MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0: MutBorrow.t UInt32.t) =
    resolve'3 _0
  
  function view (self: MutBorrow.t UInt32.t) : int =
    [%#smodel] UInt32.t'int self.current
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_some[#"inc_some_list.rs" 50 4 50 39] (self:MutBorrow.t t_List) (return'  (x:MutBorrow.t UInt32.t))= (! bb0
    [ bb0 = any
      [ br0 (x0:UInt32.t) (x1:t_List)-> {self'0.current = C_Cons x0 x1} (! bb4)
      | br1 -> {self'0.current = C_Nil} (! bb3) ]
    
    | bb3 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = bb11 ] 
    | bb11 = bb11'0 [ bb11'0 = (! bb11'0) ] 
    | bb4 = s0
      [ s0 = v_Cons {self'0.current}
          (fun (r0:UInt32.t) (r1:t_List) ->
            MutBorrow.borrow_final <UInt32.t> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
              (fun (_ret:MutBorrow.t UInt32.t) ->
                 [ &ma <- _ret ] 
                 [ &self'0 <- { self'0 with current = C_Cons _ret.final r1 } ] 
                s1))
      | s1 = v_Cons {self'0.current}
          (fun (r0:UInt32.t) (r1:t_List) ->
            MutBorrow.borrow_final <t_List> {r1} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
              (fun (_ret:MutBorrow.t t_List) ->
                 [ &ml <- _ret ] 
                 [ &self'0 <- { self'0 with current = C_Cons r0 _ret.final } ] 
                s2))
      | s2 =  [ &_10 <- [%#sinc_some_list] lemma_sum_nonneg ml.current ] s3
      | s3 = bb5 ]
    
    | bb5 = s0 [ s0 = random (fun (_ret:bool) ->  [ &_13 <- _ret ] s1) | s1 = bb6 ] 
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = s0
      [ s0 = -{resolve'2 ml}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_14 <- _ret ]  [ &ma <- { ma with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_14.current} {MutBorrow.get_id _14}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_12 <- _ret ]  [ &_14 <- { _14 with current = _ret.final } ] s3)
      | s3 = -{resolve'4 _14}- s4
      | s4 = bb10 ]
    
    | bb8 = s0
      [ s0 = -{resolve'4 ma}- s1
      | s1 = MutBorrow.borrow_final <t_List> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret:MutBorrow.t t_List) ->  [ &_16 <- _ret ]  [ &ml <- { ml with current = _ret.final } ] s2)
      | s2 = take_some {_16} (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_15 <- _ret ] s3)
      | s3 = bb9 ]
    
    | bb9 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_15.current} {MutBorrow.get_id _15}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_12 <- _ret ]  [ &_15 <- { _15 with current = _ret.final } ] s1)
      | s1 = -{resolve'4 _15}- s2
      | s2 = bb10 ]
    
    | bb10 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_12.current} {MutBorrow.get_id _12}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_9 <- _ret ]  [ &_12 <- { _12 with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_5 <- _ret ]  [ &_9 <- { _9 with current = _ret.final } ] s2)
      | s2 = -{resolve'4 _12}- s3
      | s3 = -{resolve'4 _9}- s4
      | s4 = -{resolve'2 ml}- s5
      | s5 = -{resolve'4 ma}- s6
      | s6 = MutBorrow.borrow_final <UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_2 <- _ret ]  [ &_5 <- { _5 with current = _ret.final } ] s7)
      | s7 = MutBorrow.borrow_final <UInt32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_0 <- _ret ]  [ &_2 <- { _2 with current = _ret.final } ] s8)
      | s8 = -{resolve'4 _5}- s9
      | s9 = -{resolve'4 _2}- s10
      | s10 = -{resolve'0 self'0}- s11
      | s11 = return''0 {_0} ]
     ]
    )
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & self'0: MutBorrow.t t_List = self
    | & _2: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: MutBorrow.t UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & ml: MutBorrow.t t_List = Any.any_l ()
    | & _9: MutBorrow.t UInt32.t = Any.any_l ()
    | & _10: () = Any.any_l ()
    | & _12: MutBorrow.t UInt32.t = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _14: MutBorrow.t UInt32.t = Any.any_l ()
    | & _15: MutBorrow.t UInt32.t = Any.any_l ()
    | & _16: MutBorrow.t t_List = Any.any_l () ]
    
    [ return''0 (result:MutBorrow.t UInt32.t)-> {[@expl:take_some ensures #0] [%#sinc_some_list'0] sum self.final
      - sum self.current
      = UInt32.t'int result.final - view result}
      {[@expl:take_some ensures #1] [%#sinc_some_list'1] view result <= sum self.current}
      (! return' {result}) ]

end
module M_inc_some_list__inc_some_list [#"inc_some_list.rs" 62 0 62 41]
  let%span sinc_some_list = "inc_some_list.rs" 66 4 66 34
  let%span sinc_some_list'0 = "inc_some_list.rs" 61 11 61 36
  let%span sinc_some_list'1 = "inc_some_list.rs" 39 15 39 38
  let%span sinc_some_list'2 = "inc_some_list.rs" 40 14 40 35
  let%span sinc_some_list'3 = "inc_some_list.rs" 48 14 48 64
  let%span sinc_some_list'4 = "inc_some_list.rs" 49 14 49 35
  let%span sinc_some_list'5 = "inc_some_list.rs" 23 12 26 13
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_List  =
    | C_Cons UInt32.t t_List
    | C_Nil
  
  function sum [#"inc_some_list.rs" 21 4 21 23] (self: t_List) : int =
    [%#sinc_some_list'5] match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  let rec sum_x (self:t_List) (return'  (x:UInt32.t))= {[@expl:sum_x requires] [%#sinc_some_list'1] sum self <= 1000000}
    any [ return''0 (result:UInt32.t)-> {[%#sinc_some_list'2] UInt32.t'int result = sum self} (! return' {result}) ] 
  
  function view (self: MutBorrow.t UInt32.t) : int =
    [%#smodel] UInt32.t'int self.current
  
  let rec take_some (self:MutBorrow.t t_List) (return'  (x:MutBorrow.t UInt32.t))= any
    [ return''0 (result:MutBorrow.t UInt32.t)-> {[%#sinc_some_list'3] sum self.final - sum self.current
      = UInt32.t'int result.final - view result}
      {[%#sinc_some_list'4] view result <= sum self.current}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inc_some_list[#"inc_some_list.rs" 62 0 62 41] (l:t_List) (k:UInt32.t) (return'  (x:()))= {[@expl:inc_some_list requires] [%#sinc_some_list'0] sum l
    + UInt32.t'int k
    <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = sum_x {l'0} (fun (_ret:UInt32.t) ->  [ &sum0 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_List> {l'0}
          (fun (_ret:MutBorrow.t t_List) ->  [ &_7 <- _ret ]  [ &l'0 <- _ret.final ] s1)
      | s1 = take_some {_7} (fun (_ret:MutBorrow.t UInt32.t) ->  [ &ma <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = UInt32.add {ma.current} {k'0} (fun (_ret:UInt32.t) ->  [ &ma <- { ma with current = _ret } ] s1)
      | s1 = -{resolve'0 ma}- s2
      | s2 = sum_x {l'0} (fun (_ret:UInt32.t) ->  [ &_11 <- _ret ] s3)
      | s3 = bb3 ]
    
    | bb3 = s0
      [ s0 = UInt32.add {sum0} {k'0} (fun (_ret:UInt32.t) ->  [ &_13 <- _ret ] s1)
      | s1 =  [ &_10 <- _11 = _13 ] s2
      | s2 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb6) ]  ]
    
    | bb6 = return''0 {_0}
    | bb5 = {[%#sinc_some_list] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & l'0: t_List = l
    | & k'0: UInt32.t = k
    | & sum0: UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & _7: MutBorrow.t t_List = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _13: UInt32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
