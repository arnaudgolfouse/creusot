module M_impl_List__lemma_sum_nonneg (* List *)
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_List = Cons UInt32.t t_List | Nil
  
  function sum (self: t_List) : int = match self with
      | Cons a l -> UInt32.t'int a + sum l
      | Nil -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_List
  
  function lemma_sum_nonneg (self: t_List) : ()
  
  goal vc_lemma_sum_nonneg: match self with
      | Cons _ l -> sum l >= 0 -> ([@expl:lemma_sum_nonneg ensures] sum self >= 0)
      | Nil -> [@expl:lemma_sum_nonneg ensures] sum self >= 0
      end
end
module M_impl_List__sum_x (* List *)
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_List = Cons UInt32.t t_List | Nil
  
  let rec elim_Cons (input: t_List) (ret (f0: UInt32.t) (f1: t_List)) = any
    [ good (f0: UInt32.t) (f1: t_List) -> {Cons f0 f1 = input} (! ret {f0} {f1})
    | bad -> {forall f0: UInt32.t, f1: t_List [Cons f0 f1: t_List]. Cons f0 f1 <> input} (! {false} any) ]
  
  function sum (self: t_List) : int = match self with
      | Cons a l -> UInt32.t'int a + sum l
      | Nil -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_x (self: t_List) (return (x: UInt32.t)) = {[@expl:sum_x requires] sum self <= 1000000}
    (! bb0
    [ bb0 = any [ br0 (x0: UInt32.t) (x1: t_List) -> {self = Cons x0 x1} (! bb4) | br1 -> {self = Nil} (! bb3) ]
    | bb3 = s0 [ s0 = [ &_0 <- (0: UInt32.t) ] s1 | s1 = bb6 ]
    | bb4 = s0
      [ s0 = elim_Cons {self} (fun (r0: UInt32.t) (r1: t_List) -> [ &a <- r0 ] s1)
      | s1 = elim_Cons {self} (fun (r0: UInt32.t) (r1: t_List) -> [ &l <- r1 ] s2)
      | s2 = sum_x {l} (fun (_ret: UInt32.t) -> [ &_8 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = UInt32.add {a} {_8} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = return {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & self: t_List = self
    | & a: UInt32.t = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & _8: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> {[@expl:sum_x ensures] UInt32.t'int result = sum self} (! return {result}) ]
end
module M_impl_List__take_some (* List *)
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_List = Cons UInt32.t t_List | Nil
  
  predicate resolve_ref_List [@inline:trivial] (_1: MutBorrow.t t_List) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_List
  
  let rec elim_Cons (input: t_List) (ret (f0: UInt32.t) (f1: t_List)) = any
    [ good (f0: UInt32.t) (f1: t_List) -> {Cons f0 f1 = input} (! ret {f0} {f1})
    | bad -> {forall f0: UInt32.t, f1: t_List [Cons f0 f1: t_List]. Cons f0 f1 <> input} (! {false} any) ]
  
  function sum (self: t_List) : int = match self with
      | Cons a l -> UInt32.t'int a + sum l
      | Nil -> 0
      end
  
  function lemma_sum_nonneg (self: t_List) : () = match self with
      | Cons _ l -> lemma_sum_nonneg l
      | Nil -> ()
      end
  
  axiom lemma_sum_nonneg_spec: forall self: t_List. sum self >= 0
  
  let rec random (return (x: bool)) = any [ return (result: bool) -> (! return {result}) ]
  
  predicate resolve_ref_Box_List_Global [@inline:trivial] (_1: MutBorrow.t t_List) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Box_List_Global
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_some (self: MutBorrow.t t_List) (return (x: MutBorrow.t UInt32.t)) = (! bb0
    [ bb0 = any
      [ br0 (x0: UInt32.t) (x1: t_List) -> {self.current = Cons x0 x1} (! bb4) | br1 -> {self.current = Nil} (! bb3) ]
    | bb3 = s0 [ s0 = -{resolve_ref_List self}- s1 | s1 = bb11 ]
    | bb11 = bb11 [ bb11 = (! bb11) ]
    | bb4 = s0
      [ s0 = elim_Cons {self.current}
          (fun (r0: UInt32.t) (r1: t_List) ->
            MutBorrow.borrow_final <UInt32.t> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
              (fun (_ret: MutBorrow.t UInt32.t) ->
                [ &ma <- _ret ] [ &self <- { self with current = Cons _ret.final r1 } ] s1))
      | s1 = elim_Cons {self.current}
          (fun (r0: UInt32.t) (r1: t_List) ->
            MutBorrow.borrow_final <t_List> {r1} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
              (fun (_ret: MutBorrow.t t_List) ->
                [ &ml <- _ret ] [ &self <- { self with current = Cons r0 _ret.final } ] s2))
      | s2 = [ &_10 <- lemma_sum_nonneg ml.current ] s3
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = random (fun (_ret: bool) -> [ &_13 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ]
    | bb7 = s0
      [ s0 = -{resolve_ref_Box_List_Global ml}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_14 <- _ret ] [ &ma <- { ma with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_14.current} {MutBorrow.get_id _14}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_12 <- _ret ] [ &_14 <- { _14 with current = _ret.final } ] s3)
      | s3 = -{resolve_ref_u32 _14}- s4
      | s4 = bb10 ]
    | bb8 = s0
      [ s0 = -{resolve_ref_u32 ma}- s1
      | s1 = MutBorrow.borrow_final <t_List> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret: MutBorrow.t t_List) -> [ &_16 <- _ret ] [ &ml <- { ml with current = _ret.final } ] s2)
      | s2 = take_some {_16} (fun (_ret: MutBorrow.t UInt32.t) -> [ &_15 <- _ret ] s3)
      | s3 = bb9 ]
    | bb9 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_15.current} {MutBorrow.get_id _15}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_12 <- _ret ] [ &_15 <- { _15 with current = _ret.final } ] s1)
      | s1 = -{resolve_ref_u32 _15}- s2
      | s2 = bb10 ]
    | bb10 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_12.current} {MutBorrow.get_id _12}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_9 <- _ret ] [ &_12 <- { _12 with current = _ret.final } ] s1)
      | s1 = -{resolve_ref_u32 _12}- s2
      | s2 = MutBorrow.borrow_final <UInt32.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_5 <- _ret ] [ &_9 <- { _9 with current = _ret.final } ] s3)
      | s3 = -{resolve_ref_u32 _9}- s4
      | s4 = -{resolve_ref_Box_List_Global ml}- s5
      | s5 = -{resolve_ref_u32 ma}- s6
      | s6 = MutBorrow.borrow_final <UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_2 <- _ret ] [ &_5 <- { _5 with current = _ret.final } ] s7)
      | s7 = -{resolve_ref_u32 _5}- s8
      | s8 = MutBorrow.borrow_final <UInt32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_0 <- _ret ] [ &_2 <- { _2 with current = _ret.final } ] s9)
      | s9 = -{resolve_ref_u32 _2}- s10
      | s10 = -{resolve_ref_List self}- s11
      | s11 = return {_0} ] ]
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & self: MutBorrow.t t_List = self
    | & _2: MutBorrow.t UInt32.t = Any.any_l ()
    | & _5: MutBorrow.t UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & ml: MutBorrow.t t_List = Any.any_l ()
    | & _9: MutBorrow.t UInt32.t = Any.any_l ()
    | & _10: () = Any.any_l ()
    | & _12: MutBorrow.t UInt32.t = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _14: MutBorrow.t UInt32.t = Any.any_l ()
    | & _15: MutBorrow.t UInt32.t = Any.any_l ()
    | & _16: MutBorrow.t t_List = Any.any_l () ])
    [ return (result: MutBorrow.t UInt32.t) -> {[@expl:take_some ensures #0] sum self.final - sum self.current
      = UInt32.t'int result.final - UInt32.t'int result.current}
      {[@expl:take_some ensures #1] UInt32.t'int result.current <= sum self.current}
      (! return {result}) ]
end
module M_inc_some_list
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_List = Cons UInt32.t t_List | Nil
  
  function sum (self: t_List) : int = match self with
      | Cons a l -> UInt32.t'int a + sum l
      | Nil -> 0
      end
  
  let rec sum_x (self: t_List) (return (x: UInt32.t)) = {[@expl:sum_x requires] sum self <= 1000000}
    any [ return (result: UInt32.t) -> {UInt32.t'int result = sum self} (! return {result}) ]
  
  let rec take_some (self: MutBorrow.t t_List) (return (x: MutBorrow.t UInt32.t)) = any
    [ return (result: MutBorrow.t UInt32.t) -> {sum self.final - sum self.current
      = UInt32.t'int result.final - UInt32.t'int result.current}
      {UInt32.t'int result.current <= sum self.current}
      (! return {result}) ]
  
  predicate resolve_ref_u32 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_u32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inc_some_list (l: t_List) (k: UInt32.t) (return (x: ())) = {[@expl:inc_some_list requires] sum l
      + UInt32.t'int k
    <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = sum_x {l} (fun (_ret: UInt32.t) -> [ &sum0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_List> {l}
          (fun (_ret: MutBorrow.t t_List) -> [ &_7 <- _ret ] [ &l <- _ret.final ] s1)
      | s1 = take_some {_7} (fun (_ret: MutBorrow.t UInt32.t) -> [ &ma <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = UInt32.add {ma.current} {k} (fun (_ret: UInt32.t) -> [ &ma <- { ma with current = _ret } ] s1)
      | s1 = -{resolve_ref_u32 ma}- s2
      | s2 = sum_x {l} (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0
      [ s0 = UInt32.add {sum0} {k} (fun (_ret: UInt32.t) -> [ &_13 <- _ret ] s1)
      | s1 = [ &_10 <- _11 = _13 ] s2
      | s2 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb6) ] ]
    | bb6 = return {_0}
    | bb5 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & l: t_List = l
    | & k: UInt32.t = k
    | & sum0: UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & _7: MutBorrow.t t_List = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _13: UInt32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
