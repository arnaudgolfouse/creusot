module M_inc_some_2_list__qyi7504674480942992291__lemma_sum_nonneg [#"inc_some_2_list.rs" 32 4 32 30] (* List *)
  let%span sinc_some_2_list = "inc_some_2_list.rs" 31 14 31 29
  let%span sinc_some_2_list'0 = "inc_some_2_list.rs" 33 8 36 9
  let%span sinc_some_2_list'1 = "inc_some_2_list.rs" 23 12 26 13
  
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  function sum [#"inc_some_2_list.rs" 21 4 21 27] (self: t_List) : int = [%#sinc_some_2_list'1] match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_List
  
  function lemma_sum_nonneg [#"inc_some_2_list.rs" 32 4 32 30] (self'0: t_List) : ()
  
  goal vc_lemma_sum_nonneg: match self with
      | C_Cons _ l -> ([%#sinc_some_2_list] sum l >= 0)
      -> ([@expl:lemma_sum_nonneg ensures] [%#sinc_some_2_list] sum self >= 0)
      | C_Nil -> [@expl:lemma_sum_nonneg ensures] [%#sinc_some_2_list] sum self >= 0
      end
end
module M_inc_some_2_list__qyi7504674480942992291__sum_x [#"inc_some_2_list.rs" 41 4 41 26] (* List *)
  let%span sinc_some_2_list = "inc_some_2_list.rs" 44 19 44 20
  let%span sinc_some_2_list'0 = "inc_some_2_list.rs" 39 15 39 38
  let%span sinc_some_2_list'1 = "inc_some_2_list.rs" 40 14 40 35
  let%span sinc_some_2_list'2 = "inc_some_2_list.rs" 23 12 26 13
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  let rec v_Cons (input: t_List) (ret (field_0: UInt32.t) (field_1: t_List)) = any
    [ good (field_0: UInt32.t) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: UInt32.t, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1
        <> input}
      (! {false}
      any) ]
  
  function sum [#"inc_some_2_list.rs" 21 4 21 27] (self: t_List) : int = [%#sinc_some_2_list'2] match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_x [#"inc_some_2_list.rs" 41 4 41 26] (self: t_List) (return' (x: UInt32.t)) =
    {[@expl:sum_x requires] [%#sinc_some_2_list'0] sum self <= 1000000}
    (! bb0
    [ bb0 = any [ br0 (x0: UInt32.t) (x1: t_List) -> {self'0 = C_Cons x0 x1} (! bb4) | br1 -> {self'0 = C_Nil} (! bb3) ]
    | bb3 = s0 [ s0 = [ &_0 <- [%#sinc_some_2_list] (0: UInt32.t) ] s1 | s1 = bb6 ]
    | bb4 = s0
      [ s0 = v_Cons {self'0} (fun (r0: UInt32.t) (r1: t_List) -> [ &a <- r0 ] s1)
      | s1 = v_Cons {self'0} (fun (r0: UInt32.t) (r1: t_List) -> [ &l <- r1 ] s2)
      | s2 = sum_x {l} (fun (_ret: UInt32.t) -> [ &_8 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = UInt32.add {a} {_8} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = return''0 {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & self'0: t_List = self
    | & a: UInt32.t = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & _8: UInt32.t = Any.any_l () ])
    [ return''0 (result: UInt32.t) -> {[@expl:sum_x ensures] [%#sinc_some_2_list'1] UInt32.t'int result = sum self}
      (! return' {result}) ]
end
module M_inc_some_2_list__qyi7504674480942992291__take_some_rest [#"inc_some_2_list.rs" 52 4 52 57] (* List *)
  let%span sinc_some_2_list = "inc_some_2_list.rs" 55 16 55 51
  let%span sinc_some_2_list'0 = "inc_some_2_list.rs" 48 14 49 72
  let%span sinc_some_2_list'1 = "inc_some_2_list.rs" 50 14 50 37
  let%span sinc_some_2_list'2 = "inc_some_2_list.rs" 51 14 51 42
  let%span sinc_some_2_list'3 = "inc_some_2_list.rs" 31 14 31 29
  let%span sinc_some_2_list'4 = "inc_some_2_list.rs" 33 8 36 9
  let%span sinc_some_2_list'5 = "inc_some_2_list.rs" 23 12 26 13
  let%span smodel = "../../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  predicate resolve (self: MutBorrow.t t_List) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_List) = resolve _0
  
  let rec v_Cons (input: t_List) (ret (field_0: UInt32.t) (field_1: t_List)) = any
    [ good (field_0: UInt32.t) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: UInt32.t, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1
        <> input}
      (! {false}
      any) ]
  
  function sum [#"inc_some_2_list.rs" 21 4 21 27] (self: t_List) : int = [%#sinc_some_2_list'5] match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  function lemma_sum_nonneg [#"inc_some_2_list.rs" 32 4 32 30] (self: t_List) : () =
    [%#sinc_some_2_list'4] match self with
      | C_Cons _ l -> lemma_sum_nonneg l
      | C_Nil -> ()
      end
  
  axiom lemma_sum_nonneg_spec: forall self: t_List. [%#sinc_some_2_list'3] sum self >= 0
  
  let rec random (return' (x: bool)) = any [ return''0 (result: bool) -> (! return' {result}) ]
  
  type tuple = { _p0: MutBorrow.t UInt32.t; _p1: MutBorrow.t t_List }
  
  predicate resolve'1 (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t UInt32.t) = resolve'1 _0
  
  predicate resolve'3 (self: MutBorrow.t t_List) = [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0: MutBorrow.t t_List) = resolve'3 _0
  
  function view (self: MutBorrow.t UInt32.t) : int = [%#smodel] UInt32.t'int self.current
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_some_rest [#"inc_some_2_list.rs" 52 4 52 57] (self: MutBorrow.t t_List) (return' (x: tuple)) = (! bb0
    [ bb0 = any
      [ br0 (x0: UInt32.t) (x1: t_List) -> {self'0.current = C_Cons x0 x1} (! bb4)
      | br1 -> {self'0.current = C_Nil} (! bb3) ]
    | bb3 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = bb11 ]
    | bb11 = bb11'0 [ bb11'0 = (! bb11'0) ]
    | bb4 = s0
      [ s0 = v_Cons {self'0.current}
          (fun (r0: UInt32.t) (r1: t_List) ->
            MutBorrow.borrow_final <UInt32.t> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
              (fun (_ret: MutBorrow.t UInt32.t) ->
                [ &ma <- _ret ] [ &self'0 <- { self'0 with current = C_Cons _ret.final r1 } ] s1))
      | s1 = v_Cons {self'0.current}
          (fun (r0: UInt32.t) (r1: t_List) ->
            MutBorrow.borrow_final <t_List> {r1} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
              (fun (_ret: MutBorrow.t t_List) ->
                [ &ml <- _ret ] [ &self'0 <- { self'0 with current = C_Cons r0 _ret.final } ] s2))
      | s2 = [ &_8 <- [%#sinc_some_2_list] lemma_sum_nonneg ml.current ] s3
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = random (fun (_ret: bool) -> [ &_10 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb7) ]
    | bb7 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_11 <- _ret ] [ &ma <- { ma with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <t_List> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret: MutBorrow.t t_List) -> [ &_12 <- _ret ] [ &ml <- { ml with current = _ret.final } ] s2)
      | s2 = [ &_0 <- { _p0 = _11; _p1 = _12 } ] s3
      | s3 = bb10 ]
    | bb8 = s0
      [ s0 = -{resolve'2 ma}- s1
      | s1 = MutBorrow.borrow_final <t_List> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret: MutBorrow.t t_List) -> [ &_13 <- _ret ] [ &ml <- { ml with current = _ret.final } ] s2)
      | s2 = take_some_rest {_13} (fun (_ret: tuple) -> [ &_0 <- _ret ] s3)
      | s3 = bb10 ]
    | bb10 = s0
      [ s0 = -{resolve'4 ml}- s1 | s1 = -{resolve'2 ma}- s2 | s2 = -{resolve'0 self'0}- s3 | s3 = return''0 {_0} ] ]
    [ & _0: tuple = Any.any_l ()
    | & self'0: MutBorrow.t t_List = self
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & ml: MutBorrow.t t_List = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: MutBorrow.t UInt32.t = Any.any_l ()
    | & _12: MutBorrow.t t_List = Any.any_l ()
    | & _13: MutBorrow.t t_List = Any.any_l () ])
    [ return''0 (result: tuple) -> {[@expl:take_some_rest ensures #0] [%#sinc_some_2_list'0] sum self.final
        - sum self.current
      = UInt32.t'int (result._p0).final + sum (result._p1).final - view result._p0 - sum (result._p1).current}
      {[@expl:take_some_rest ensures #1] [%#sinc_some_2_list'1] view result._p0 <= sum self.current}
      {[@expl:take_some_rest ensures #2] [%#sinc_some_2_list'2] sum (result._p1).current <= sum self.current}
      (! return' {result}) ]
end
module M_inc_some_2_list__inc_some_2_list [#"inc_some_2_list.rs" 64 0 64 51]
  let%span sinc_some_2_list = "inc_some_2_list.rs" 70 12 70 37
  let%span sinc_some_2_list'0 = "inc_some_2_list.rs" 63 11 63 41
  let%span sinc_some_2_list'1 = "inc_some_2_list.rs" 39 15 39 38
  let%span sinc_some_2_list'2 = "inc_some_2_list.rs" 40 14 40 35
  let%span sinc_some_2_list'3 = "inc_some_2_list.rs" 48 14 49 72
  let%span sinc_some_2_list'4 = "inc_some_2_list.rs" 50 14 50 37
  let%span sinc_some_2_list'5 = "inc_some_2_list.rs" 51 14 51 42
  let%span sinc_some_2_list'6 = "inc_some_2_list.rs" 23 12 26 13
  let%span smodel = "../../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  function sum [#"inc_some_2_list.rs" 21 4 21 27] (self: t_List) : int = [%#sinc_some_2_list'6] match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  let rec sum_x (self: t_List) (return' (x: UInt32.t)) = {[@expl:sum_x requires] [%#sinc_some_2_list'1] sum self
    <= 1000000}
    any [ return''0 (result: UInt32.t) -> {[%#sinc_some_2_list'2] UInt32.t'int result = sum self} (! return' {result}) ]
  
  type tuple = { _p0: MutBorrow.t UInt32.t; _p1: MutBorrow.t t_List }
  
  function view (self: MutBorrow.t UInt32.t) : int = [%#smodel] UInt32.t'int self.current
  
  let rec take_some_rest (self: MutBorrow.t t_List) (return' (x: tuple)) = any
    [ return''0 (result: tuple) -> {[%#sinc_some_2_list'3] sum self.final - sum self.current
      = UInt32.t'int (result._p0).final + sum (result._p1).final - view result._p0 - sum (result._p1).current}
      {[%#sinc_some_2_list'4] view result._p0 <= sum self.current}
      {[%#sinc_some_2_list'5] sum (result._p1).current <= sum self.current}
      (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t t_List) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_List) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t UInt32.t) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inc_some_2_list [#"inc_some_2_list.rs" 64 0 64 51] (l: t_List) (j: UInt32.t) (k: UInt32.t) (return' (x: ())) =
    {[@expl:inc_some_2_list requires] [%#sinc_some_2_list'0] sum l + UInt32.t'int j + UInt32.t'int k <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = sum_x {l'0} (fun (_ret: UInt32.t) -> [ &sum0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_List> {l'0}
          (fun (_ret: MutBorrow.t t_List) -> [ &_10 <- _ret ] [ &l'0 <- _ret.final ] s1)
      | s1 = take_some_rest {_10} (fun (_ret: tuple) -> [ &_9 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = [ &ma <- _9._p0 ] s1
      | s1 = [ &ml <- _9._p1 ] s2
      | s2 = MutBorrow.borrow_final <t_List> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret: MutBorrow.t t_List) -> [ &_13 <- _ret ] [ &ml <- { ml with current = _ret.final } ] s3)
      | s3 = take_some_rest {_13} (fun (_ret: tuple) -> [ &_12 <- _ret ] s4)
      | s4 = bb3 ]
    | bb3 = s0
      [ s0 = -{resolve'0 _12._p1}- s1
      | s1 = [ &mb <- _12._p0 ] s2
      | s2 = UInt32.add {ma.current} {j'0} (fun (_ret: UInt32.t) -> [ &ma <- { ma with current = _ret } ] s3)
      | s3 = -{resolve'2 ma}- s4
      | s4 = UInt32.add {mb.current} {k'0} (fun (_ret: UInt32.t) -> [ &mb <- { mb with current = _ret } ] s5)
      | s5 = -{resolve'2 mb}- s6
      | s6 = -{resolve'0 ml}- s7
      | s7 = sum_x {l'0} (fun (_ret: UInt32.t) -> [ &_18 <- _ret ] s8)
      | s8 = bb4 ]
    | bb4 = s0
      [ s0 = UInt32.add {sum0} {j'0} (fun (_ret: UInt32.t) -> [ &_21 <- _ret ] s1)
      | s1 = UInt32.add {_21} {k'0} (fun (_ret: UInt32.t) -> [ &_20 <- _ret ] s2)
      | s2 = [ &_17 <- _18 = _20 ] s3
      | s3 = any [ br0 -> {_17 = false} (! bb5) | br1 -> {_17} (! bb8) ] ]
    | bb8 = return''0 {_0}
    | bb5 = {[%#sinc_some_2_list] false} any ]
    [ & _0: () = Any.any_l ()
    | & l'0: t_List = l
    | & j'0: UInt32.t = j
    | & k'0: UInt32.t = k
    | & sum0: UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & ml: MutBorrow.t t_List = Any.any_l ()
    | & _9: tuple = Any.any_l ()
    | & _10: MutBorrow.t t_List = Any.any_l ()
    | & mb: MutBorrow.t UInt32.t = Any.any_l ()
    | & _12: tuple = Any.any_l ()
    | & _13: MutBorrow.t t_List = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & _18: UInt32.t = Any.any_l ()
    | & _20: UInt32.t = Any.any_l ()
    | & _21: UInt32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
