module M_inc_some_2_list__qyi7504674480942992291__lemma_sum_nonneg (* List *)
  use creusot.int.UInt32
  use mach.int.Int
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  function sum (self: t_List) : int = match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_List
  
  function lemma_sum_nonneg (self: t_List) : ()
  
  goal vc_lemma_sum_nonneg: match self with
      | C_Cons _ l -> sum l >= 0 -> ([@expl:lemma_sum_nonneg ensures] sum self >= 0)
      | C_Nil -> [@expl:lemma_sum_nonneg ensures] sum self >= 0
      end
end
module M_inc_some_2_list__qyi7504674480942992291__sum_x (* List *)
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  let rec v_Cons (input: t_List) (ret (field_0: UInt32.t) (field_1: t_List)) = any
    [ good (field_0: UInt32.t) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: UInt32.t, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1
        <> input}
      (! {false}
      any) ]
  
  function sum (self: t_List) : int = match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_x (self: t_List) (return (x: UInt32.t)) = {[@expl:sum_x requires] sum self <= 1000000}
    (! bb0
    [ bb0 = any [ br0 (x0: UInt32.t) (x1: t_List) -> {self = C_Cons x0 x1} (! bb4) | br1 -> {self = C_Nil} (! bb3) ]
    | bb3 = s0 [ s0 = [ &_0 <- (0: UInt32.t) ] s1 | s1 = bb6 ]
    | bb4 = s0
      [ s0 = v_Cons {self} (fun (r0: UInt32.t) (r1: t_List) -> [ &a <- r0 ] s1)
      | s1 = v_Cons {self} (fun (r0: UInt32.t) (r1: t_List) -> [ &l <- r1 ] s2)
      | s2 = sum_x {l} (fun (_ret: UInt32.t) -> [ &_8 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = UInt32.add {a} {_8} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = return {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & self: t_List = self
    | & a: UInt32.t = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & _8: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> {[@expl:sum_x ensures] UInt32.t'int result = sum self} (! return {result}) ]
end
module M_inc_some_2_list__qyi7504674480942992291__take_some_rest (* List *)
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_List) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_List) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Cons (input: t_List) (ret (field_0: UInt32.t) (field_1: t_List)) = any
    [ good (field_0: UInt32.t) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: UInt32.t, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1
        <> input}
      (! {false}
      any) ]
  
  function sum (self: t_List) : int = match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  function lemma_sum_nonneg (self: t_List) : () = match self with
      | C_Cons _ l -> lemma_sum_nonneg l
      | C_Nil -> ()
      end
  
  axiom lemma_sum_nonneg_spec: forall self: t_List. sum self >= 0
  
  let rec random (return (x: bool)) = any [ return' (result: bool) -> (! return {result}) ]
  
  type tuple = { f0: MutBorrow.t UInt32.t; f1: MutBorrow.t t_List }
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_List) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_1: MutBorrow.t t_List) = resolve'3 _1
  
  meta "rewrite_def" predicate resolve'4
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_some_rest (self: MutBorrow.t t_List) (return (x: tuple)) = (! bb0
    [ bb0 = any
      [ br0 (x0: UInt32.t) (x1: t_List) -> {self.current = C_Cons x0 x1} (! bb4)
      | br1 -> {self.current = C_Nil} (! bb3) ]
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb11 ]
    | bb11 = bb11 [ bb11 = (! bb11) ]
    | bb4 = s0
      [ s0 = v_Cons {self.current}
          (fun (r0: UInt32.t) (r1: t_List) ->
            MutBorrow.borrow_final <UInt32.t> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
              (fun (_ret: MutBorrow.t UInt32.t) ->
                [ &ma <- _ret ] [ &self <- { self with current = C_Cons _ret.final r1 } ] s1))
      | s1 = v_Cons {self.current}
          (fun (r0: UInt32.t) (r1: t_List) ->
            MutBorrow.borrow_final <t_List> {r1} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
              (fun (_ret: MutBorrow.t t_List) ->
                [ &ml <- _ret ] [ &self <- { self with current = C_Cons r0 _ret.final } ] s2))
      | s2 = [ &_8 <- lemma_sum_nonneg ml.current ] s3
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = random (fun (_ret: bool) -> [ &_10 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb7) ]
    | bb7 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_11 <- _ret ] [ &ma <- { ma with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <t_List> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret: MutBorrow.t t_List) -> [ &_12 <- _ret ] [ &ml <- { ml with current = _ret.final } ] s2)
      | s2 = [ &_0 <- { f0 = _11; f1 = _12 } ] s3
      | s3 = bb10 ]
    | bb8 = s0
      [ s0 = -{resolve'2 ma}- s1
      | s1 = MutBorrow.borrow_final <t_List> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret: MutBorrow.t t_List) -> [ &_13 <- _ret ] [ &ml <- { ml with current = _ret.final } ] s2)
      | s2 = take_some_rest {_13} (fun (_ret: tuple) -> [ &_0 <- _ret ] s3)
      | s3 = bb10 ]
    | bb10 = s0
      [ s0 = -{resolve'4 ml}- s1 | s1 = -{resolve'2 ma}- s2 | s2 = -{resolve'0 self}- s3 | s3 = return {_0} ] ]
    [ & _0: tuple = Any.any_l ()
    | & self: MutBorrow.t t_List = self
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & ml: MutBorrow.t t_List = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: MutBorrow.t UInt32.t = Any.any_l ()
    | & _12: MutBorrow.t t_List = Any.any_l ()
    | & _13: MutBorrow.t t_List = Any.any_l () ])
    [ return (result: tuple) -> {[@expl:take_some_rest ensures #0] sum self.final - sum self.current
      = UInt32.t'int (result.f0).final + sum (result.f1).final - UInt32.t'int (result.f0).current
      - sum (result.f1).current}
      {[@expl:take_some_rest ensures #1] UInt32.t'int (result.f0).current <= sum self.current}
      {[@expl:take_some_rest ensures #2] sum (result.f1).current <= sum self.current}
      (! return {result}) ]
end
module M_inc_some_2_list__inc_some_2_list
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_List = C_Cons UInt32.t t_List | C_Nil
  
  function sum (self: t_List) : int = match self with
      | C_Cons a l -> UInt32.t'int a + sum l
      | C_Nil -> 0
      end
  
  let rec sum_x (self: t_List) (return (x: UInt32.t)) = {[@expl:sum_x requires] sum self <= 1000000}
    any [ return' (result: UInt32.t) -> {UInt32.t'int result = sum self} (! return {result}) ]
  
  type tuple = { f0: MutBorrow.t UInt32.t; f1: MutBorrow.t t_List }
  
  let rec take_some_rest (self: MutBorrow.t t_List) (return (x: tuple)) = any
    [ return' (result: tuple) -> {sum self.final - sum self.current
      = UInt32.t'int (result.f0).final + sum (result.f1).final - UInt32.t'int (result.f0).current
      - sum (result.f1).current}
      {UInt32.t'int (result.f0).current <= sum self.current}
      {sum (result.f1).current <= sum self.current}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_List) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_List) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inc_some_2_list (l: t_List) (j: UInt32.t) (k: UInt32.t) (return (x: ())) =
    {[@expl:inc_some_2_list requires] sum l + UInt32.t'int j + UInt32.t'int k <= 1000000}
    (! bb0
    [ bb0 = s0 [ s0 = sum_x {l} (fun (_ret: UInt32.t) -> [ &sum0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_List> {l}
          (fun (_ret: MutBorrow.t t_List) -> [ &_10 <- _ret ] [ &l <- _ret.final ] s1)
      | s1 = take_some_rest {_10} (fun (_ret: tuple) -> [ &_9 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = [ &ma <- _9.f0 ] s1
      | s1 = [ &ml <- _9.f1 ] s2
      | s2 = MutBorrow.borrow_final <t_List> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret: MutBorrow.t t_List) -> [ &_13 <- _ret ] [ &ml <- { ml with current = _ret.final } ] s3)
      | s3 = take_some_rest {_13} (fun (_ret: tuple) -> [ &_12 <- _ret ] s4)
      | s4 = bb3 ]
    | bb3 = s0
      [ s0 = -{resolve'0 _12.f1}- s1
      | s1 = [ &mb <- _12.f0 ] s2
      | s2 = UInt32.add {ma.current} {j} (fun (_ret: UInt32.t) -> [ &ma <- { ma with current = _ret } ] s3)
      | s3 = -{resolve'2 ma}- s4
      | s4 = UInt32.add {mb.current} {k} (fun (_ret: UInt32.t) -> [ &mb <- { mb with current = _ret } ] s5)
      | s5 = -{resolve'2 mb}- s6
      | s6 = -{resolve'0 ml}- s7
      | s7 = sum_x {l} (fun (_ret: UInt32.t) -> [ &_18 <- _ret ] s8)
      | s8 = bb4 ]
    | bb4 = s0
      [ s0 = UInt32.add {sum0} {j} (fun (_ret: UInt32.t) -> [ &_21 <- _ret ] s1)
      | s1 = UInt32.add {_21} {k} (fun (_ret: UInt32.t) -> [ &_20 <- _ret ] s2)
      | s2 = [ &_17 <- _18 = _20 ] s3
      | s3 = any [ br0 -> {_17 = false} (! bb6) | br1 -> {_17} (! bb7) ] ]
    | bb7 = return {_0}
    | bb6 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & l: t_List = l
    | & j: UInt32.t = j
    | & k: UInt32.t = k
    | & sum0: UInt32.t = Any.any_l ()
    | & ma: MutBorrow.t UInt32.t = Any.any_l ()
    | & ml: MutBorrow.t t_List = Any.any_l ()
    | & _9: tuple = Any.any_l ()
    | & _10: MutBorrow.t t_List = Any.any_l ()
    | & mb: MutBorrow.t UInt32.t = Any.any_l ()
    | & _12: tuple = Any.any_l ()
    | & _13: MutBorrow.t t_List = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & _18: UInt32.t = Any.any_l ()
    | & _20: UInt32.t = Any.any_l ()
    | & _21: UInt32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
