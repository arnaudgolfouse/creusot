module M_assert_in_ghost__ghost_only [#"assert_in_ghost.rs" 4 0 4 19]
  let%span sassert_in_ghost = "assert_in_ghost.rs" 6 16 6 20
  let%span sassert_in_ghost'0 = "assert_in_ghost.rs" 7 22 7 31
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 173 14 173 26
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec new (x: ()) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sghost] result = x} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_only [#"assert_in_ghost.rs" 4 0 4 19] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- [%#sassert_in_ghost] (1: Int32.t) ] s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost'0] x = (1: Int32.t)} s2
      | s2 = new {_2} (fun (_ret: ()) -> [ &_1 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & _1: () = Any.any_l () | & _2: () = Any.any_l () | & x: Int32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_assert_in_ghost__ghost_capture [#"assert_in_ghost.rs" 11 0 11 22]
  let%span sassert_in_ghost = "assert_in_ghost.rs" 12 12 12 17
  let%span sassert_in_ghost'0 = "assert_in_ghost.rs" 16 22 16 32
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 173 14 173 26
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec new (x: ()) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sghost] result = x} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_capture [#"assert_in_ghost.rs" 11 0 11 22] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- [%#sassert_in_ghost] (42: Int32.t) ] s1
      | s1 = [ &y <- x ] s2
      | s2 = {[@expl:assertion] [%#sassert_in_ghost'0] y = (42: Int32.t)} s3
      | s3 = new {_3} (fun (_ret: ()) -> [ &_2 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & _2: () = Any.any_l ()
    | & _3: () = Any.any_l ()
    | & y: Int32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_assert_in_ghost__ghost_mutate [#"assert_in_ghost.rs" 20 0 20 21]
  let%span sassert_in_ghost = "assert_in_ghost.rs" 21 25 21 29
  let%span sassert_in_ghost'0 = "assert_in_ghost.rs" 21 31 21 35
  let%span sassert_in_ghost'1 = "assert_in_ghost.rs" 24 14 24 15
  let%span sassert_in_ghost'2 = "assert_in_ghost.rs" 28 22 28 33
  let%span sassert_in_ghost'3 = "assert_in_ghost.rs" 29 22 29 33
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 173 14 173 26
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 80 14 80 35
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple = { _p0: Int32.t; _p1: Int32.t }
  
  let rec new (x: tuple) (return' (x'0: tuple)) = any
    [ return''0 (result: tuple) -> {[%#sghost] result = x} (! return' {result}) ]
  
  let rec deref_mut (self: MutBorrow.t tuple) (return' (x: MutBorrow.t tuple)) = any
    [ return''0 (result: MutBorrow.t tuple) -> {[%#sghost'0] result = self} (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t tuple) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t tuple) = resolve _0
  
  let rec new'0 (x: ()) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sghost] result = x} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_mutate [#"assert_in_ghost.rs" 20 0 20 21] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- { _p0 = ([%#sassert_in_ghost] (2: Int32.t)); _p1 = ([%#sassert_in_ghost'0] (3: Int32.t)) } ] s1
      | s1 = new {_2} (fun (_ret: tuple) -> [ &p <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <tuple> {p} (fun (_ret: MutBorrow.t tuple) -> [ &_6 <- _ret ] [ &p <- _ret.final ] s1)
      | s1 = deref_mut {_6} (fun (_ret: MutBorrow.t tuple) -> [ &_5 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_5 <- { _5 with current = { _5.current with _p0 = ([%#sassert_in_ghost'1] (4: Int32.t)) } } ] s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = new'0 {_4} (fun (_ret: ()) -> [ &_3 <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0
      [ s0 = {[@expl:assertion] [%#sassert_in_ghost'2] p._p0 = (4: Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost'3] p._p1 = (3: Int32.t)} s2
      | s2 = new'0 {_8} (fun (_ret: ()) -> [ &_7 <- _ret ] s3)
      | s3 = bb4 ]
    | bb4 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & p: tuple = Any.any_l ()
    | & _2: tuple = Any.any_l ()
    | & _3: () = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t tuple = Any.any_l ()
    | & _6: MutBorrow.t tuple = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
