module M_snapshot_in_ghost__foo [#"snapshot_in_ghost.rs" 5 0 5 12]
  let%span ssnapshot_in_ghost = "snapshot_in_ghost.rs" 7 16 7 28
  let%span ssnapshot_in_ghost'0 = "snapshot_in_ghost.rs" 8 22 8 29
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 162 14 162 26
  
  use creusot.prelude.Any
  
  let rec new (x:()) (return'  (x'0: ()))= any
    [ return''0 (result: ())-> {[%#sghost] result = x} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo[#"snapshot_in_ghost.rs" 5 0 5 12] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost] 1 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost'0] x = 1} s1
      | s1 = new {_2} (fun (_ret: ()) ->  [ &_1 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = return''0 {_0} ]
     [ & _0: () = Any.any_l () | & _1:  () = Any.any_l () | & _2: () = Any.any_l () | & x: int = Any.any_l () ] )
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_snapshot_in_ghost__is_ghost [#"snapshot_in_ghost.rs" 14 0 14 17]
  let%span ssnapshot_in_ghost = "snapshot_in_ghost.rs" 15 12 15 24
  let%span ssnapshot_in_ghost'0 = "snapshot_in_ghost.rs" 16 18 16 25
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_ghost[#"snapshot_in_ghost.rs" 14 0 14 17] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost] 1 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost'0] x = 1} s1 | s1 = return''0 {_0} ]  ]
     [ & _0: () = Any.any_l () | & x: int = Any.any_l () ] ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_snapshot_in_ghost__bar [#"snapshot_in_ghost.rs" 21 0 21 12]
  let%span ssnapshot_in_ghost = "snapshot_in_ghost.rs" 22 21 22 25
  let%span ssnapshot_in_ghost'0 = "snapshot_in_ghost.rs" 24 16 24 28
  let%span ssnapshot_in_ghost'1 = "snapshot_in_ghost.rs" 25 22 25 55
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 162 14 162 26
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec new (x:()) (return'  (x'0: ()))= any
    [ return''0 (result: ())-> {[%#sghost] result = x} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec bar[#"snapshot_in_ghost.rs" 21 0 21 12] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost] (1: Int32.t) ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#ssnapshot_in_ghost'0] x ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost'1] exists y: Int32.t. x = y} s1
      | s1 = new {_3} (fun (_ret: ()) ->  [ &_2 <- _ret ] s2)
      | s2 = bb4 ]
    
    | bb4 = return''0 {_0} ]
    
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & _2:  () = Any.any_l ()
    | & _3: () = Any.any_l ()
    | & _4: Int32.t = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
