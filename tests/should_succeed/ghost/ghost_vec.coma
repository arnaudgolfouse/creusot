module M_ghost_vec__ghost_vec [#"ghost_vec.rs" 4 0 4 18]
  let%span sghost_vec = "ghost_vec.rs" 6 18 6 49
  let%span sghost_vec'0 = "ghost_vec.rs" 8 26 8 28
  let%span sghost_vec'1 = "ghost_vec.rs" 9 22 9 35
  let%span sghost_vec'2 = "ghost_vec.rs" 10 22 10 34
  let%span sghost_vec'3 = "ghost_vec.rs" 12 26 12 28
  let%span sghost_vec'4 = "ghost_vec.rs" 13 26 13 28
  let%span sghost_vec'5 = "ghost_vec.rs" 15 22 15 30
  let%span sghost_vec'6 = "ghost_vec.rs" 16 22 16 69
  let%span sghost_vec'7 = "ghost_vec.rs" 18 31 18 35
  let%span sghost_vec'8 = "ghost_vec.rs" 19 31 19 35
  let%span sghost_vec'9 = "ghost_vec.rs" 20 22 20 42
  let%span sghost_vec'10 = "ghost_vec.rs" 21 22 21 34
  let%span sghost_vec'11 = "ghost_vec.rs" 23 41 23 45
  let%span sghost_vec'12 = "ghost_vec.rs" 24 17 24 19
  let%span sghost_vec'13 = "ghost_vec.rs" 26 22 26 35
  let%span sghost_vec'14 = "ghost_vec.rs" 33 22 33 41
  let%span sghost_vec'15 = "ghost_vec.rs" 34 22 34 41
  let%span sghost_vec'16 = "ghost_vec.rs" 35 22 35 41
  let%span sghost_vec'17 = "ghost_vec.rs" 36 22 36 34
  let%span sghost_vec'18 = "ghost_vec.rs" 37 22 37 34
  let%span sghost_vec'19 = "ghost_vec.rs" 42 27 42 28
  let%span sghost_vec'20 = "ghost_vec.rs" 43 27 43 28
  let%span sghost_vec'21 = "ghost_vec.rs" 44 27 44 28
  let%span sghost_vec'22 = "ghost_vec.rs" 49 22 49 40
  let%span sghost_vec'23 = "ghost_vec.rs" 50 22 50 40
  let%span sghost_vec'24 = "ghost_vec.rs" 51 22 51 40
  let%span sghost_vec'25 = "ghost_vec.rs" 52 22 52 34
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 449 14 449 36
  let%span sseq'0 = "../../../creusot-contracts/src/logic/seq.rs" 86 8 86 82
  let%span sseq'1 = "../../../creusot-contracts/src/logic/seq.rs" 517 14 517 40
  let%span sseq'2 = "../../../creusot-contracts/src/logic/seq.rs" 474 14 474 34
  let%span sseq'3 = "../../../creusot-contracts/src/logic/seq.rs" 542 14 545 5
  let%span sseq'4 = "../../../creusot-contracts/src/logic/seq.rs" 571 14 574 5
  let%span sseq'5 = "../../../creusot-contracts/src/logic/seq.rs" 575 14 575 76
  let%span sseq'6 = "../../../creusot-contracts/src/logic/seq.rs" 576 14 576 44
  let%span sseq'7 = "../../../creusot-contracts/src/logic/seq.rs" 600 14 603 5
  let%span sseq'8 = "../../../creusot-contracts/src/logic/seq.rs" 495 14 495 41
  let%span sseq'9 = "../../../creusot-contracts/src/logic/seq.rs" 626 14 629 5
  let%span sseq'10 = "../../../creusot-contracts/src/logic/seq.rs" 247 8 247 27
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 75 14 75 31
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 76 14 76 31
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 65 14 65 43
  let%span sghost'2 = "../../../creusot-contracts/src/ghost.rs" 179 14 179 29
  let%span sghost'3 = "../../../creusot-contracts/src/ghost.rs" 160 14 160 26
  let%span sint = "../../../creusot-contracts/src/logic/int.rs" 56 14 56 31
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.int.Int128
  use creusot.prelude.Any
  
  let rec new (return'  (x: (Seq.seq Int32.t)))= any
    [ return''0 (result: (Seq.seq Int32.t))-> {[%#sseq] result = (Seq.empty : Seq.seq Int32.t)} (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some Int32.t
  
  function get (self : Seq.seq Int32.t) (ix : int) : t_Option =
    [%#sseq'0] if 0 <= ix /\ ix < Seq.length self then C_Some (Seq.get self ix) else C_None
  
  let rec deref_mut (self:MutBorrow.t ( (Seq.seq Int32.t))) (return'  (x:MutBorrow.t (Seq.seq Int32.t)))= any
    [ return''0 (result:MutBorrow.t (Seq.seq Int32.t))-> {[%#sghost] result.current = self.current}
      {[%#sghost'0] result.final = self.final}
      (! return' {result}) ]
  
  
  let rec push_back_ghost (self:MutBorrow.t (Seq.seq Int32.t)) (x:Int32.t) (return'  (x'0:()))= any
    [ return''0 (result:())-> {[%#sseq'1] self.final = Seq.snoc self.current x} (! return' {result}) ]
  
  
  predicate resolve (self : MutBorrow.t (Seq.seq Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t (Seq.seq Int32.t)) =
    resolve _0
  
  let rec deref (self: (Seq.seq Int32.t)) (return'  (x:Seq.seq Int32.t))= any
    [ return''0 (result:Seq.seq Int32.t)-> {[%#sghost'1] self = result} (! return' {result}) ]
  
  
  let rec len_ghost (self:Seq.seq Int32.t) (return'  (x:int))= any
    [ return''0 (result:int)-> {[%#sseq'2] result = Seq.length self} (! return' {result}) ]
  
  
  let rec new'0 (value:Int128.t) (return'  (x: int))= any
    [ return''0 (result: int)-> {[%#sint] result = Int128.to_int value} (! return' {result}) ]
  
  
  let rec into_inner (self: int) (return'  (x:int))= any
    [ return''0 (result:int)-> {[%#sghost'2] result = self} (! return' {result}) ]
  
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 Int32.t
  
  let rec get_ghost (self:Seq.seq Int32.t) (index:int) (return'  (x:t_Option'0))= any
    [ return''0 (result:t_Option'0)-> {[%#sseq'3] match get self index with
        | C_None -> result = C_None'0
        | C_Some v -> result = C_Some'0 v
        end}
      (! return' {result}) ]
  
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 (MutBorrow.t Int32.t)
  
  let rec get_mut_ghost (self:MutBorrow.t (Seq.seq Int32.t)) (index:int) (return'  (x:t_Option'1))= any
    [ return''0 (result:t_Option'1)-> {[%#sseq'4] match result with
        | C_None'1 -> get self.current index = C_None /\ self.current = self.final
        | C_Some'1 r -> get self.current index = C_Some (r.current) /\ r.final = Seq.get self.final index
        end}
      {[%#sseq'5] forall i : int . i <> index  -> get self.current i = get self.final i}
      {[%#sseq'6] Seq.length self.current = Seq.length self.final}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0 : MutBorrow.t Int32.t) =
    resolve'1 _0
  
  let rec v_Some (input:t_Option'1) (ret  (field_0:MutBorrow.t Int32.t))= any
    [ good (field_0:MutBorrow.t Int32.t)-> {C_Some'1 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : MutBorrow.t Int32.t [C_Some'1 field_0 : t_Option'1] . C_Some'1 field_0 <> input}
      (! {false}
      any) ]
  
  
  let rec pop_back_ghost (self:MutBorrow.t (Seq.seq Int32.t)) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sseq'7] match result with
        | C_None -> self.current = (Seq.empty : Seq.seq Int32.t) /\ self.current = self.final
        | C_Some r -> self.current = Seq.snoc self.final r
        end}
      (! return' {result}) ]
  
  
  let rec new'1 (x:()) (return'  (x'0: ()))= any
    [ return''0 (result: ())-> {[%#sghost'3] result = x} (! return' {result}) ]
  
  
  function push_front [@inline:trivial] (self : Seq.seq Int32.t) (x : Int32.t) : Seq.seq Int32.t =
    [%#sseq'10] Seq.cons x self
  
  let rec push_front_ghost (self:MutBorrow.t (Seq.seq Int32.t)) (x:Int32.t) (return'  (x'0:()))= any
    [ return''0 (result:())-> {[%#sseq'8] self.final = push_front self.current x} (! return' {result}) ]
  
  
  let rec pop_front_ghost (self:MutBorrow.t (Seq.seq Int32.t)) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sseq'9] match result with
        | C_None -> self.current = (Seq.empty : Seq.seq Int32.t) /\ self.current = self.final
        | C_Some r -> self.current = push_front self.final r
        end}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_vec[#"ghost_vec.rs" 4 0 4 18] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: (Seq.seq Int32.t)) ->  [ &v <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec] forall i : int . get v i = C_None} s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_9 <- _ret ]  [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_9} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_8 <- _ret ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_7 <- _ret ]  [ &_8 <- { _8 with current = _ret.final } ] s1)
      | s1 = push_back_ghost {_7} {[%#sghost_vec'0] (21 : Int32.t)} (fun (_ret:()) ->  [ &_6 <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec'1] Seq.get v 0 = (21 : Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec'2] Seq.length v = 1} s3
      | s3 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_17 <- _ret ]  [ &v <- _ret.final ] s4)
      | s4 = deref_mut {_17} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_16 <- _ret ] s5)
      | s5 = bb4 ]
    
    | bb4 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_16.current} {MutBorrow.get_id _16}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_15 <- _ret ] 
             [ &_16 <- { _16 with current = _ret.final } ] 
            s1)
      | s1 = push_back_ghost {_15} {[%#sghost_vec'3] (10 : Int32.t)} (fun (_ret:()) ->  [ &_14 <- _ret ] s2)
      | s2 = bb5 ]
    
    | bb5 = s0
      [ s0 = -{resolve'0 _16}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_21 <- _ret ]  [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_21} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_20 <- _ret ] s3)
      | s3 = bb6 ]
    
    | bb6 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_20.current} {MutBorrow.get_id _20}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_19 <- _ret ] 
             [ &_20 <- { _20 with current = _ret.final } ] 
            s1)
      | s1 = push_back_ghost {_19} {[%#sghost_vec'4] (30 : Int32.t)} (fun (_ret:()) ->  [ &_18 <- _ret ] s2)
      | s2 = bb7 ]
    
    | bb7 = s0
      [ s0 = -{resolve'0 _20}- s1 | s1 = deref {v} (fun (_ret:Seq.seq Int32.t) ->  [ &_24 <- _ret ] s2) | s2 = bb8 ]
    
    | bb8 = s0 [ s0 = len_ghost {_24} (fun (_ret:int) ->  [ &len <- _ret ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec'5] len = 3} s1
      | s1 = {[@expl:assertion] [%#sghost_vec'6] Seq.get v 0 = (21 : Int32.t)
        /\ Seq.get v 1 = (10 : Int32.t) /\ Seq.get v 2 = (30 : Int32.t)}
        s2
      | s2 = deref {v} (fun (_ret:Seq.seq Int32.t) ->  [ &_32 <- _ret ] s3)
      | s3 = bb10 ]
    
    | bb10 = s0 [ s0 = new'0 {[%#sghost_vec'7] (1 : Int128.t)} (fun (_ret: int) ->  [ &_35 <- _ret ] s1) | s1 = bb11 ] 
    | bb11 = s0 [ s0 = into_inner {_35} (fun (_ret:int) ->  [ &_34 <- _ret ] s1) | s1 = bb12 ] 
    | bb12 = s0 [ s0 = get_ghost {_32} {_34} (fun (_ret:t_Option'0) ->  [ &get1 <- _ret ] s1) | s1 = bb13 ] 
    | bb13 = s0 [ s0 = deref {v} (fun (_ret:Seq.seq Int32.t) ->  [ &_38 <- _ret ] s1) | s1 = bb14 ] 
    | bb14 = s0 [ s0 = new'0 {[%#sghost_vec'8] (3 : Int128.t)} (fun (_ret: int) ->  [ &_41 <- _ret ] s1) | s1 = bb15 ] 
    | bb15 = s0 [ s0 = into_inner {_41} (fun (_ret:int) ->  [ &_40 <- _ret ] s1) | s1 = bb16 ] 
    | bb16 = s0 [ s0 = get_ghost {_38} {_40} (fun (_ret:t_Option'0) ->  [ &get2 <- _ret ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec'9] get1 = C_Some'0 (10 : Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sghost_vec'10] get2 = C_None'0} s2
      | s2 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_50 <- _ret ]  [ &v <- _ret.final ] s3)
      | s3 = deref_mut {_50} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_49 <- _ret ] s4)
      | s4 = bb18 ]
    
    | bb18 = s0 [ s0 = new'0 {[%#sghost_vec'11] (0 : Int128.t)} (fun (_ret: int) ->  [ &_52 <- _ret ] s1) | s1 = bb19 ] 
    | bb19 = s0 [ s0 = into_inner {_52} (fun (_ret:int) ->  [ &_51 <- _ret ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_49.current} {MutBorrow.get_id _49}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_48 <- _ret ] 
             [ &_49 <- { _49 with current = _ret.final } ] 
            s1)
      | s1 = get_mut_ghost {_48} {_51} (fun (_ret:t_Option'1) ->  [ &_47 <- _ret ] s2)
      | s2 = bb21 ]
    
    | bb21 = any [ br0 -> {_47 = C_None'1} (! bb24) | br1 (x0:MutBorrow.t Int32.t)-> {_47 = C_Some'1 x0} (! bb22) ] 
    | bb24 = s0
      [ s0 = -{match _47 with
          | C_Some'1 x'0 -> resolve'2 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _49}- s2
      | s2 = bb25 ]
    
    | bb22 = bb23
    | bb23 = s0
      [ s0 = v_Some {_47} (fun (r0:MutBorrow.t Int32.t) ->  [ &x <- r0 ] s1)
      | s1 =  [ &x <- { x with current = ([%#sghost_vec'12] (42 : Int32.t)) } ] s2
      | s2 = -{resolve'2 x}- s3
      | s3 = -{resolve'0 _49}- s4
      | s4 = bb25 ]
    
    | bb25 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec'13] Seq.get v 0 = (42 : Int32.t)} s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_60 <- _ret ]  [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_60} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_59 <- _ret ] s3)
      | s3 = bb26 ]
    
    | bb26 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_59.current} {MutBorrow.get_id _59}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_58 <- _ret ] 
             [ &_59 <- { _59 with current = _ret.final } ] 
            s1)
      | s1 = pop_back_ghost {_58} (fun (_ret:t_Option) ->  [ &pop1 <- _ret ] s2)
      | s2 = bb27 ]
    
    | bb27 = s0
      [ s0 = -{resolve'0 _59}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_64 <- _ret ]  [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_64} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_63 <- _ret ] s3)
      | s3 = bb28 ]
    
    | bb28 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_63.current} {MutBorrow.get_id _63}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_62 <- _ret ] 
             [ &_63 <- { _63 with current = _ret.final } ] 
            s1)
      | s1 = pop_back_ghost {_62} (fun (_ret:t_Option) ->  [ &pop2 <- _ret ] s2)
      | s2 = bb29 ]
    
    | bb29 = s0
      [ s0 = -{resolve'0 _63}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_68 <- _ret ]  [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_68} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_67 <- _ret ] s3)
      | s3 = bb30 ]
    
    | bb30 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_67.current} {MutBorrow.get_id _67}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_66 <- _ret ] 
             [ &_67 <- { _67 with current = _ret.final } ] 
            s1)
      | s1 = pop_back_ghost {_66} (fun (_ret:t_Option) ->  [ &pop3 <- _ret ] s2)
      | s2 = bb31 ]
    
    | bb31 = s0
      [ s0 = -{resolve'0 _67}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_72 <- _ret ]  [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_72} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_71 <- _ret ] s3)
      | s3 = bb32 ]
    
    | bb32 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_71.current} {MutBorrow.get_id _71}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_70 <- _ret ] 
             [ &_71 <- { _71 with current = _ret.final } ] 
            s1)
      | s1 = pop_back_ghost {_70} (fun (_ret:t_Option) ->  [ &pop4 <- _ret ] s2)
      | s2 = bb33 ]
    
    | bb33 = s0
      [ s0 = -{resolve'0 _71}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_76 <- _ret ]  [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_76} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_75 <- _ret ] s3)
      | s3 = bb34 ]
    
    | bb34 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_75.current} {MutBorrow.get_id _75}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_74 <- _ret ] 
             [ &_75 <- { _75 with current = _ret.final } ] 
            s1)
      | s1 = pop_back_ghost {_74} (fun (_ret:t_Option) ->  [ &pop5 <- _ret ] s2)
      | s2 = bb35 ]
    
    | bb35 = s0
      [ s0 = -{resolve'0 _75}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec'14] pop1 = C_Some (30 : Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec'15] pop2 = C_Some (10 : Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec'16] pop3 = C_Some (42 : Int32.t)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec'17] pop4 = C_None} s5
      | s5 = {[@expl:assertion] [%#sghost_vec'18] pop5 = C_None} s6
      | s6 = new'1 {_5} (fun (_ret: ()) ->  [ &_4 <- _ret ] s7)
      | s7 = bb36 ]
    
    | bb36 = s0 [ s0 = new (fun (_ret: (Seq.seq Int32.t)) ->  [ &v'0 <- _ret ] s1) | s1 = bb37 ] 
    | bb37 = s0
      [ s0 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v'0}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_93 <- _ret ]  [ &v'0 <- _ret.final ] s1)
      | s1 = deref_mut {_93} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_92 <- _ret ] s2)
      | s2 = bb38 ]
    
    | bb38 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_92.current} {MutBorrow.get_id _92}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_91 <- _ret ] 
             [ &_92 <- { _92 with current = _ret.final } ] 
            s1)
      | s1 = push_front_ghost {_91} {[%#sghost_vec'19] (1 : Int32.t)} (fun (_ret:()) ->  [ &_90 <- _ret ] s2)
      | s2 = bb39 ]
    
    | bb39 = s0
      [ s0 = -{resolve'0 _92}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v'0}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_97 <- _ret ]  [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_97} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_96 <- _ret ] s3)
      | s3 = bb40 ]
    
    | bb40 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_96.current} {MutBorrow.get_id _96}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_95 <- _ret ] 
             [ &_96 <- { _96 with current = _ret.final } ] 
            s1)
      | s1 = push_front_ghost {_95} {[%#sghost_vec'20] (2 : Int32.t)} (fun (_ret:()) ->  [ &_94 <- _ret ] s2)
      | s2 = bb41 ]
    
    | bb41 = s0
      [ s0 = -{resolve'0 _96}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v'0}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_101 <- _ret ]  [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_101} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_100 <- _ret ] s3)
      | s3 = bb42 ]
    
    | bb42 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_100.current} {MutBorrow.get_id _100}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_99 <- _ret ] 
             [ &_100 <- { _100 with current = _ret.final } ] 
            s1)
      | s1 = push_front_ghost {_99} {[%#sghost_vec'21] (3 : Int32.t)} (fun (_ret:()) ->  [ &_98 <- _ret ] s2)
      | s2 = bb43 ]
    
    | bb43 = s0
      [ s0 = -{resolve'0 _100}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v'0}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_105 <- _ret ]  [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_105} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_104 <- _ret ] s3)
      | s3 = bb44 ]
    
    | bb44 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_104.current} {MutBorrow.get_id _104}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_103 <- _ret ] 
             [ &_104 <- { _104 with current = _ret.final } ] 
            s1)
      | s1 = pop_front_ghost {_103} (fun (_ret:t_Option) ->  [ &pop1'0 <- _ret ] s2)
      | s2 = bb45 ]
    
    | bb45 = s0
      [ s0 = -{resolve'0 _104}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v'0}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_109 <- _ret ]  [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_109} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_108 <- _ret ] s3)
      | s3 = bb46 ]
    
    | bb46 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_108.current} {MutBorrow.get_id _108}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_107 <- _ret ] 
             [ &_108 <- { _108 with current = _ret.final } ] 
            s1)
      | s1 = pop_front_ghost {_107} (fun (_ret:t_Option) ->  [ &pop2'0 <- _ret ] s2)
      | s2 = bb47 ]
    
    | bb47 = s0
      [ s0 = -{resolve'0 _108}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v'0}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_113 <- _ret ]  [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_113} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_112 <- _ret ] s3)
      | s3 = bb48 ]
    
    | bb48 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_112.current} {MutBorrow.get_id _112}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_111 <- _ret ] 
             [ &_112 <- { _112 with current = _ret.final } ] 
            s1)
      | s1 = pop_front_ghost {_111} (fun (_ret:t_Option) ->  [ &pop3'0 <- _ret ] s2)
      | s2 = bb49 ]
    
    | bb49 = s0
      [ s0 = -{resolve'0 _112}- s1
      | s1 = MutBorrow.borrow_mut < (Seq.seq Int32.t)> {v'0}
          (fun (_ret:MutBorrow.t ( (Seq.seq Int32.t))) ->  [ &_117 <- _ret ]  [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_117} (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->  [ &_116 <- _ret ] s3)
      | s3 = bb50 ]
    
    | bb50 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_116.current} {MutBorrow.get_id _116}
          (fun (_ret:MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_115 <- _ret ] 
             [ &_116 <- { _116 with current = _ret.final } ] 
            s1)
      | s1 = pop_front_ghost {_115} (fun (_ret:t_Option) ->  [ &pop4'0 <- _ret ] s2)
      | s2 = bb51 ]
    
    | bb51 = s0
      [ s0 = -{resolve'0 _116}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec'22] pop1'0 = C_Some (3 : Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec'23] pop2'0 = C_Some (2 : Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec'24] pop3'0 = C_Some (1 : Int32.t)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec'25] pop4'0 = C_None} s5
      | s5 = new'1 {_89} (fun (_ret: ()) ->  [ &_88 <- _ret ] s6)
      | s6 = bb52 ]
    
    | bb52 = return''0 {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & v :  (Seq.seq Int32.t) = Any.any_l ()
    | & _4 :  () = Any.any_l ()
    | & _5 : () = Any.any_l ()
    | & _6 : () = Any.any_l ()
    | & _7 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _8 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _9 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & _14 : () = Any.any_l ()
    | & _15 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _16 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _17 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & _18 : () = Any.any_l ()
    | & _19 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _20 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _21 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & len : int = Any.any_l ()
    | & _24 : Seq.seq Int32.t = Any.any_l ()
    | & get1 : t_Option'0 = Any.any_l ()
    | & _32 : Seq.seq Int32.t = Any.any_l ()
    | & _34 : int = Any.any_l ()
    | & _35 :  int = Any.any_l ()
    | & get2 : t_Option'0 = Any.any_l ()
    | & _38 : Seq.seq Int32.t = Any.any_l ()
    | & _40 : int = Any.any_l ()
    | & _41 :  int = Any.any_l ()
    | & _47 : t_Option'1 = Any.any_l ()
    | & _48 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _49 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _50 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & _51 : int = Any.any_l ()
    | & _52 :  int = Any.any_l ()
    | & x : MutBorrow.t Int32.t = Any.any_l ()
    | & pop1 : t_Option = Any.any_l ()
    | & _58 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _59 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _60 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & pop2 : t_Option = Any.any_l ()
    | & _62 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _63 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _64 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & pop3 : t_Option = Any.any_l ()
    | & _66 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _67 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _68 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & pop4 : t_Option = Any.any_l ()
    | & _70 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _71 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _72 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & pop5 : t_Option = Any.any_l ()
    | & _74 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _75 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _76 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & v'0 :  (Seq.seq Int32.t) = Any.any_l ()
    | & _88 :  () = Any.any_l ()
    | & _89 : () = Any.any_l ()
    | & _90 : () = Any.any_l ()
    | & _91 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _92 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _93 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & _94 : () = Any.any_l ()
    | & _95 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _96 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _97 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & _98 : () = Any.any_l ()
    | & _99 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _100 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _101 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & pop1'0 : t_Option = Any.any_l ()
    | & _103 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _104 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _105 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & pop2'0 : t_Option = Any.any_l ()
    | & _107 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _108 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _109 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & pop3'0 : t_Option = Any.any_l ()
    | & _111 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _112 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _113 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l ()
    | & pop4'0 : t_Option = Any.any_l ()
    | & _115 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _116 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _117 : MutBorrow.t ( (Seq.seq Int32.t)) = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
