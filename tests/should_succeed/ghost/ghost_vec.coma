module M_ghost_vec__ghost_vec [#"ghost_vec.rs" 4 0 4 18]
  let%span sghost_vec = "ghost_vec.rs" 6 18 6 44
  let%span sghost_vec'0 = "ghost_vec.rs" 9 26 9 28
  let%span sghost_vec'1 = "ghost_vec.rs" 11 22 11 35
  let%span sghost_vec'2 = "ghost_vec.rs" 12 22 12 34
  let%span sghost_vec'3 = "ghost_vec.rs" 14 26 14 28
  let%span sghost_vec'4 = "ghost_vec.rs" 15 26 15 28
  let%span sghost_vec'5 = "ghost_vec.rs" 17 22 17 30
  let%span sghost_vec'6 = "ghost_vec.rs" 18 22 18 69
  let%span sghost_vec'7 = "ghost_vec.rs" 20 31 20 35
  let%span sghost_vec'8 = "ghost_vec.rs" 21 31 21 35
  let%span sghost_vec'9 = "ghost_vec.rs" 22 22 22 42
  let%span sghost_vec'10 = "ghost_vec.rs" 23 22 23 34
  let%span sghost_vec'11 = "ghost_vec.rs" 25 41 25 45
  let%span sghost_vec'12 = "ghost_vec.rs" 26 17 26 19
  let%span sghost_vec'13 = "ghost_vec.rs" 28 22 28 35
  let%span sghost_vec'14 = "ghost_vec.rs" 35 22 35 41
  let%span sghost_vec'15 = "ghost_vec.rs" 36 22 36 41
  let%span sghost_vec'16 = "ghost_vec.rs" 37 22 37 41
  let%span sghost_vec'17 = "ghost_vec.rs" 38 22 38 34
  let%span sghost_vec'18 = "ghost_vec.rs" 39 22 39 34
  let%span sghost_vec'19 = "ghost_vec.rs" 44 27 44 28
  let%span sghost_vec'20 = "ghost_vec.rs" 45 27 45 28
  let%span sghost_vec'21 = "ghost_vec.rs" 46 27 46 28
  let%span sghost_vec'22 = "ghost_vec.rs" 51 22 51 40
  let%span sghost_vec'23 = "ghost_vec.rs" 52 22 52 40
  let%span sghost_vec'24 = "ghost_vec.rs" 53 22 53 40
  let%span sghost_vec'25 = "ghost_vec.rs" 54 22 54 34
  let%span sghost_vec'26 = "ghost_vec.rs" 10 16 10 35
  let%span sghost_vec'27 = "ghost_vec.rs" 8 16 8 34
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 425 14 425 38
  let%span sseq'0 = "../../../creusot-contracts/src/logic/seq.rs" 78 8 78 82
  let%span sseq'1 = "../../../creusot-contracts/src/logic/seq.rs" 474 14 474 41
  let%span sseq'2 = "../../../creusot-contracts/src/logic/seq.rs" 517 14 517 40
  let%span sseq'3 = "../../../creusot-contracts/src/logic/seq.rs" 450 14 450 34
  let%span sseq'4 = "../../../creusot-contracts/src/logic/seq.rs" 542 14 545 5
  let%span sseq'5 = "../../../creusot-contracts/src/logic/seq.rs" 571 14 574 5
  let%span sseq'6 = "../../../creusot-contracts/src/logic/seq.rs" 575 14 575 71
  let%span sseq'7 = "../../../creusot-contracts/src/logic/seq.rs" 576 14 576 44
  let%span sseq'8 = "../../../creusot-contracts/src/logic/seq.rs" 600 14 603 5
  let%span sseq'9 = "../../../creusot-contracts/src/logic/seq.rs" 495 14 495 41
  let%span sseq'10 = "../../../creusot-contracts/src/logic/seq.rs" 626 14 629 5
  let%span sseq'11 = "../../../creusot-contracts/src/logic/seq.rs" 237 8 237 27
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 77 14 77 31
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 88 14 88 35
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 199 14 199 29
  let%span sghost'2 = "../../../creusot-contracts/src/ghost.rs" 177 14 177 26
  let%span sint = "../../../creusot-contracts/src/logic/int.rs" 58 14 58 31
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 48 20 48 34
  
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.int.Int128
  use creusot.prelude.Any
  
  let rec new (return' (x: Seq.seq Int32.t)) = any
    [ return''0 (result: Seq.seq Int32.t) -> {[%#sseq] result = (Seq.empty: Seq.seq Int32.t)} (! return' {result}) ]
  
  type t_Option = C_None | C_Some Int32.t
  
  function get (self: Seq.seq Int32.t) (ix: int) : t_Option = [%#sseq'0] if 0 <= ix /\ ix < Seq.length self then
      C_Some (Seq.get self ix)
    else
      C_None
  
  
  let rec deref (self: Seq.seq Int32.t) (return' (x: Seq.seq Int32.t)) = any
    [ return''0 (result: Seq.seq Int32.t) -> {[%#sghost] result = self} (! return' {result}) ]
  
  let rec is_empty_ghost (self: Seq.seq Int32.t) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#sseq'1] result = (Seq.length self = 0)} (! return' {result}) ]
  
  let rec deref_mut (self: MutBorrow.t (Seq.seq Int32.t)) (return' (x: MutBorrow.t (Seq.seq Int32.t))) = any
    [ return''0 (result: MutBorrow.t (Seq.seq Int32.t)) -> {[%#sghost'0] result = self} (! return' {result}) ]
  
  let rec push_back_ghost (self: MutBorrow.t (Seq.seq Int32.t)) (x: Int32.t) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sseq'2] self.final = Seq.snoc self.current x} (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t (Seq.seq Int32.t)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t (Seq.seq Int32.t)) = resolve _0
  
  let rec len_ghost (self: Seq.seq Int32.t) (return' (x: int)) = any
    [ return''0 (result: int) -> {[%#sseq'3] result = Seq.length self} (! return' {result}) ]
  
  let rec new'0 (value: Int128.t) (return' (x: int)) = any
    [ return''0 (result: int) -> {[%#sint] result = Int128.to_int value} (! return' {result}) ]
  
  let rec into_inner (self: int) (return' (x: int)) = any
    [ return''0 (result: int) -> {[%#sghost'1] result = self} (! return' {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 Int32.t
  
  let rec get_ghost (self: Seq.seq Int32.t) (index: int) (return' (x: t_Option'0)) = any
    [ return''0 (result: t_Option'0) -> {[%#sseq'4] match get self index with
        | C_None -> result = C_None'0
        | C_Some v -> result = C_Some'0 v
        end}
      (! return' {result}) ]
  
  type t_Option'1 = C_None'1 | C_Some'1 (MutBorrow.t Int32.t)
  
  let rec get_mut_ghost (self: MutBorrow.t (Seq.seq Int32.t)) (index: int) (return' (x: t_Option'1)) = any
    [ return''0 (result: t_Option'1) -> {[%#sseq'5] match result with
        | C_None'1 -> get self.current index = C_None /\ self.current = self.final
        | C_Some'1 r -> get self.current index = C_Some (r.current) /\ r.final = Seq.get self.final index
        end}
      {[%#sseq'6] forall i: int. i <> index -> get self.current i = get self.final i}
      {[%#sseq'7] Seq.length self.current = Seq.length self.final}
      (! return' {result}) ]
  
  predicate resolve'1 (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: MutBorrow.t Int32.t) = resolve'1 _0
  
  let rec v_Some (input: t_Option'1) (ret (field_0: MutBorrow.t Int32.t)) = any
    [ good (field_0: MutBorrow.t Int32.t) -> {C_Some'1 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: MutBorrow.t Int32.t [C_Some'1 field_0: t_Option'1]. C_Some'1 field_0 <> input}
      (! {false}
      any) ]
  
  let rec pop_back_ghost (self: MutBorrow.t (Seq.seq Int32.t)) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#sseq'8] match result with
        | C_None -> self.current = (Seq.empty: Seq.seq Int32.t) /\ self.current = self.final
        | C_Some r -> self.current = Seq.snoc self.final r
        end}
      (! return' {result}) ]
  
  let rec new'1 (x: ()) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sghost'2] result = x} (! return' {result}) ]
  
  function push_front [@inline:trivial] (self: Seq.seq Int32.t) (x: Int32.t) : Seq.seq Int32.t =
    [%#sseq'11] Seq.cons x self
  
  let rec push_front_ghost (self: MutBorrow.t (Seq.seq Int32.t)) (x: Int32.t) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sseq'9] self.final = push_front self.current x} (! return' {result}) ]
  
  let rec pop_front_ghost (self: MutBorrow.t (Seq.seq Int32.t)) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#sseq'10] match result with
        | C_None -> self.current = (Seq.empty: Seq.seq Int32.t) /\ self.current = self.final
        | C_Some r -> self.current = push_front self.final r
        end}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_vec [#"ghost_vec.rs" 4 0 4 18] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: Seq.seq Int32.t) -> [ &v <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec] forall i: int. get v i = C_None} s1
      | s1 = deref {v} (fun (_ret: Seq.seq Int32.t) -> [ &_9 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = is_empty_ghost {_9} (fun (_ret: bool) -> [ &_7 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = any [ br0 -> {_7 = false} (! bb4) | br1 -> {_7} (! bb6) ]
    | bb6 = s0
      [ s0 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_15 <- _ret ] [ &v <- _ret.final ] s1)
      | s1 = deref_mut {_15} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_14 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_14.current} {MutBorrow.get_id _14}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_13 <- _ret ] [ &_14 <- { _14 with current = _ret.final } ] s1)
      | s1 = push_back_ghost {_13} {[%#sghost_vec'0] (21: Int32.t)} (fun (_ret: ()) -> [ &_12 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0
      [ s0 = -{resolve'0 _14}- s1 | s1 = deref {v} (fun (_ret: Seq.seq Int32.t) -> [ &_20 <- _ret ] s2) | s2 = bb9 ]
    | bb9 = s0 [ s0 = is_empty_ghost {_20} (fun (_ret: bool) -> [ &_18 <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0 [ s0 = [ &_17 <- not _18 ] s1 | s1 = any [ br0 -> {_17 = false} (! bb11) | br1 -> {_17} (! bb13) ] ]
    | bb13 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec'1] Seq.get v 0 = (21: Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sghost_vec'2] Seq.length v = 1} s2
      | s2 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_30 <- _ret ] [ &v <- _ret.final ] s3)
      | s3 = deref_mut {_30} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_29 <- _ret ] s4)
      | s4 = bb14 ]
    | bb14 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_29.current} {MutBorrow.get_id _29}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_28 <- _ret ] [ &_29 <- { _29 with current = _ret.final } ] s1)
      | s1 = push_back_ghost {_28} {[%#sghost_vec'3] (10: Int32.t)} (fun (_ret: ()) -> [ &_27 <- _ret ] s2)
      | s2 = bb15 ]
    | bb15 = s0
      [ s0 = -{resolve'0 _29}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_34 <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_34} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_33 <- _ret ] s3)
      | s3 = bb16 ]
    | bb16 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_33.current} {MutBorrow.get_id _33}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_32 <- _ret ] [ &_33 <- { _33 with current = _ret.final } ] s1)
      | s1 = push_back_ghost {_32} {[%#sghost_vec'4] (30: Int32.t)} (fun (_ret: ()) -> [ &_31 <- _ret ] s2)
      | s2 = bb17 ]
    | bb17 = s0
      [ s0 = -{resolve'0 _33}- s1 | s1 = deref {v} (fun (_ret: Seq.seq Int32.t) -> [ &_37 <- _ret ] s2) | s2 = bb18 ]
    | bb18 = s0 [ s0 = len_ghost {_37} (fun (_ret: int) -> [ &len <- _ret ] s1) | s1 = bb19 ]
    | bb19 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec'5] len = 3} s1
      | s1 = {[@expl:assertion] [%#sghost_vec'6] Seq.get v 0 = (21: Int32.t)
        /\ Seq.get v 1 = (10: Int32.t) /\ Seq.get v 2 = (30: Int32.t)}
        s2
      | s2 = deref {v} (fun (_ret: Seq.seq Int32.t) -> [ &_45 <- _ret ] s3)
      | s3 = bb20 ]
    | bb20 = s0 [ s0 = new'0 {[%#sghost_vec'7] (1: Int128.t)} (fun (_ret: int) -> [ &_48 <- _ret ] s1) | s1 = bb21 ]
    | bb21 = s0 [ s0 = into_inner {_48} (fun (_ret: int) -> [ &_47 <- _ret ] s1) | s1 = bb22 ]
    | bb22 = s0 [ s0 = get_ghost {_45} {_47} (fun (_ret: t_Option'0) -> [ &get1 <- _ret ] s1) | s1 = bb23 ]
    | bb23 = s0 [ s0 = deref {v} (fun (_ret: Seq.seq Int32.t) -> [ &_51 <- _ret ] s1) | s1 = bb24 ]
    | bb24 = s0 [ s0 = new'0 {[%#sghost_vec'8] (3: Int128.t)} (fun (_ret: int) -> [ &_54 <- _ret ] s1) | s1 = bb25 ]
    | bb25 = s0 [ s0 = into_inner {_54} (fun (_ret: int) -> [ &_53 <- _ret ] s1) | s1 = bb26 ]
    | bb26 = s0 [ s0 = get_ghost {_51} {_53} (fun (_ret: t_Option'0) -> [ &get2 <- _ret ] s1) | s1 = bb27 ]
    | bb27 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec'9] get1 = C_Some'0 (10: Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sghost_vec'10] get2 = C_None'0} s2
      | s2 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_63 <- _ret ] [ &v <- _ret.final ] s3)
      | s3 = deref_mut {_63} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_62 <- _ret ] s4)
      | s4 = bb28 ]
    | bb28 = s0 [ s0 = new'0 {[%#sghost_vec'11] (0: Int128.t)} (fun (_ret: int) -> [ &_65 <- _ret ] s1) | s1 = bb29 ]
    | bb29 = s0 [ s0 = into_inner {_65} (fun (_ret: int) -> [ &_64 <- _ret ] s1) | s1 = bb30 ]
    | bb30 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_62.current} {MutBorrow.get_id _62}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_61 <- _ret ] [ &_62 <- { _62 with current = _ret.final } ] s1)
      | s1 = get_mut_ghost {_61} {_64} (fun (_ret: t_Option'1) -> [ &_60 <- _ret ] s2)
      | s2 = bb31 ]
    | bb31 = any [ br0 -> {_60 = C_None'1} (! bb34) | br1 (x0: MutBorrow.t Int32.t) -> {_60 = C_Some'1 x0} (! bb33) ]
    | bb34 = s0
      [ s0 = -{match _60 with
          | C_Some'1 x'0 -> resolve'2 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _62}- s2
      | s2 = bb35 ]
    | bb33 = s0
      [ s0 = v_Some {_60} (fun (r0: MutBorrow.t Int32.t) -> [ &x <- r0 ] s1)
      | s1 = [ &x <- { x with current = ([%#sghost_vec'12] (42: Int32.t)) } ] s2
      | s2 = -{resolve'2 x}- s3
      | s3 = -{resolve'0 _62}- s4
      | s4 = bb35 ]
    | bb35 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec'13] Seq.get v 0 = (42: Int32.t)} s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_73 <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_73} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_72 <- _ret ] s3)
      | s3 = bb36 ]
    | bb36 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_72.current} {MutBorrow.get_id _72}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_71 <- _ret ] [ &_72 <- { _72 with current = _ret.final } ] s1)
      | s1 = pop_back_ghost {_71} (fun (_ret: t_Option) -> [ &pop1 <- _ret ] s2)
      | s2 = bb37 ]
    | bb37 = s0
      [ s0 = -{resolve'0 _72}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_77 <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_77} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_76 <- _ret ] s3)
      | s3 = bb38 ]
    | bb38 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_76.current} {MutBorrow.get_id _76}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_75 <- _ret ] [ &_76 <- { _76 with current = _ret.final } ] s1)
      | s1 = pop_back_ghost {_75} (fun (_ret: t_Option) -> [ &pop2 <- _ret ] s2)
      | s2 = bb39 ]
    | bb39 = s0
      [ s0 = -{resolve'0 _76}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_81 <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_81} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_80 <- _ret ] s3)
      | s3 = bb40 ]
    | bb40 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_80.current} {MutBorrow.get_id _80}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_79 <- _ret ] [ &_80 <- { _80 with current = _ret.final } ] s1)
      | s1 = pop_back_ghost {_79} (fun (_ret: t_Option) -> [ &pop3 <- _ret ] s2)
      | s2 = bb41 ]
    | bb41 = s0
      [ s0 = -{resolve'0 _80}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_85 <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_85} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_84 <- _ret ] s3)
      | s3 = bb42 ]
    | bb42 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_84.current} {MutBorrow.get_id _84}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_83 <- _ret ] [ &_84 <- { _84 with current = _ret.final } ] s1)
      | s1 = pop_back_ghost {_83} (fun (_ret: t_Option) -> [ &pop4 <- _ret ] s2)
      | s2 = bb43 ]
    | bb43 = s0
      [ s0 = -{resolve'0 _84}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_89 <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = deref_mut {_89} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_88 <- _ret ] s3)
      | s3 = bb44 ]
    | bb44 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_88.current} {MutBorrow.get_id _88}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_87 <- _ret ] [ &_88 <- { _88 with current = _ret.final } ] s1)
      | s1 = pop_back_ghost {_87} (fun (_ret: t_Option) -> [ &pop5 <- _ret ] s2)
      | s2 = bb45 ]
    | bb45 = s0
      [ s0 = -{resolve'0 _88}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec'14] pop1 = C_Some (30: Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec'15] pop2 = C_Some (10: Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec'16] pop3 = C_Some (42: Int32.t)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec'17] pop4 = C_None} s5
      | s5 = {[@expl:assertion] [%#sghost_vec'18] pop5 = C_None} s6
      | s6 = new'1 {_5} (fun (_ret: ()) -> [ &_4 <- _ret ] s7)
      | s7 = bb46 ]
    | bb46 = s0 [ s0 = new (fun (_ret: Seq.seq Int32.t) -> [ &v'0 <- _ret ] s1) | s1 = bb47 ]
    | bb47 = s0
      [ s0 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v'0}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_106 <- _ret ] [ &v'0 <- _ret.final ] s1)
      | s1 = deref_mut {_106} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_105 <- _ret ] s2)
      | s2 = bb48 ]
    | bb48 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_105.current} {MutBorrow.get_id _105}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_104 <- _ret ] [ &_105 <- { _105 with current = _ret.final } ] s1)
      | s1 = push_front_ghost {_104} {[%#sghost_vec'19] (1: Int32.t)} (fun (_ret: ()) -> [ &_103 <- _ret ] s2)
      | s2 = bb49 ]
    | bb49 = s0
      [ s0 = -{resolve'0 _105}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v'0}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_110 <- _ret ] [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_110} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_109 <- _ret ] s3)
      | s3 = bb50 ]
    | bb50 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_109.current} {MutBorrow.get_id _109}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_108 <- _ret ] [ &_109 <- { _109 with current = _ret.final } ] s1)
      | s1 = push_front_ghost {_108} {[%#sghost_vec'20] (2: Int32.t)} (fun (_ret: ()) -> [ &_107 <- _ret ] s2)
      | s2 = bb51 ]
    | bb51 = s0
      [ s0 = -{resolve'0 _109}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v'0}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_114 <- _ret ] [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_114} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_113 <- _ret ] s3)
      | s3 = bb52 ]
    | bb52 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_113.current} {MutBorrow.get_id _113}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_112 <- _ret ] [ &_113 <- { _113 with current = _ret.final } ] s1)
      | s1 = push_front_ghost {_112} {[%#sghost_vec'21] (3: Int32.t)} (fun (_ret: ()) -> [ &_111 <- _ret ] s2)
      | s2 = bb53 ]
    | bb53 = s0
      [ s0 = -{resolve'0 _113}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v'0}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_118 <- _ret ] [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_118} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_117 <- _ret ] s3)
      | s3 = bb54 ]
    | bb54 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_117.current} {MutBorrow.get_id _117}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_116 <- _ret ] [ &_117 <- { _117 with current = _ret.final } ] s1)
      | s1 = pop_front_ghost {_116} (fun (_ret: t_Option) -> [ &pop1'0 <- _ret ] s2)
      | s2 = bb55 ]
    | bb55 = s0
      [ s0 = -{resolve'0 _117}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v'0}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_122 <- _ret ] [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_122} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_121 <- _ret ] s3)
      | s3 = bb56 ]
    | bb56 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_121.current} {MutBorrow.get_id _121}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_120 <- _ret ] [ &_121 <- { _121 with current = _ret.final } ] s1)
      | s1 = pop_front_ghost {_120} (fun (_ret: t_Option) -> [ &pop2'0 <- _ret ] s2)
      | s2 = bb57 ]
    | bb57 = s0
      [ s0 = -{resolve'0 _121}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v'0}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_126 <- _ret ] [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_126} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_125 <- _ret ] s3)
      | s3 = bb58 ]
    | bb58 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_125.current} {MutBorrow.get_id _125}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_124 <- _ret ] [ &_125 <- { _125 with current = _ret.final } ] s1)
      | s1 = pop_front_ghost {_124} (fun (_ret: t_Option) -> [ &pop3'0 <- _ret ] s2)
      | s2 = bb59 ]
    | bb59 = s0
      [ s0 = -{resolve'0 _125}- s1
      | s1 = MutBorrow.borrow_mut <Seq.seq Int32.t> {v'0}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_130 <- _ret ] [ &v'0 <- _ret.final ] s2)
      | s2 = deref_mut {_130} (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) -> [ &_129 <- _ret ] s3)
      | s3 = bb60 ]
    | bb60 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_129.current} {MutBorrow.get_id _129}
          (fun (_ret: MutBorrow.t (Seq.seq Int32.t)) ->
            [ &_128 <- _ret ] [ &_129 <- { _129 with current = _ret.final } ] s1)
      | s1 = pop_front_ghost {_128} (fun (_ret: t_Option) -> [ &pop4'0 <- _ret ] s2)
      | s2 = bb61 ]
    | bb61 = s0
      [ s0 = -{resolve'0 _129}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec'22] pop1'0 = C_Some (3: Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec'23] pop2'0 = C_Some (2: Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec'24] pop3'0 = C_Some (1: Int32.t)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec'25] pop4'0 = C_None} s5
      | s5 = new'1 {_102} (fun (_ret: ()) -> [ &_101 <- _ret ] s6)
      | s6 = bb62 ]
    | bb62 = return''0 {_0}
    | bb11 = {[%#sghost_vec'26] false} any
    | bb4 = {[%#sghost_vec'27] false} any ]
    [ & _0: () = Any.any_l ()
    | & v: Seq.seq Int32.t = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _9: Seq.seq Int32.t = Any.any_l ()
    | & _12: () = Any.any_l ()
    | & _13: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _14: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _15: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _20: Seq.seq Int32.t = Any.any_l ()
    | & _27: () = Any.any_l ()
    | & _28: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _29: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _30: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _31: () = Any.any_l ()
    | & _32: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _33: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _34: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & len: int = Any.any_l ()
    | & _37: Seq.seq Int32.t = Any.any_l ()
    | & get1: t_Option'0 = Any.any_l ()
    | & _45: Seq.seq Int32.t = Any.any_l ()
    | & _47: int = Any.any_l ()
    | & _48: int = Any.any_l ()
    | & get2: t_Option'0 = Any.any_l ()
    | & _51: Seq.seq Int32.t = Any.any_l ()
    | & _53: int = Any.any_l ()
    | & _54: int = Any.any_l ()
    | & _60: t_Option'1 = Any.any_l ()
    | & _61: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _62: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _63: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _64: int = Any.any_l ()
    | & _65: int = Any.any_l ()
    | & x: MutBorrow.t Int32.t = Any.any_l ()
    | & pop1: t_Option = Any.any_l ()
    | & _71: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _72: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _73: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & pop2: t_Option = Any.any_l ()
    | & _75: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _76: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _77: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & pop3: t_Option = Any.any_l ()
    | & _79: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _80: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _81: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & pop4: t_Option = Any.any_l ()
    | & _83: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _84: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _85: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & pop5: t_Option = Any.any_l ()
    | & _87: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _88: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _89: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & v'0: Seq.seq Int32.t = Any.any_l ()
    | & _101: () = Any.any_l ()
    | & _102: () = Any.any_l ()
    | & _103: () = Any.any_l ()
    | & _104: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _105: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _106: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _107: () = Any.any_l ()
    | & _108: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _109: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _110: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _111: () = Any.any_l ()
    | & _112: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _113: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _114: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & pop1'0: t_Option = Any.any_l ()
    | & _116: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _117: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _118: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & pop2'0: t_Option = Any.any_l ()
    | & _120: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _121: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _122: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & pop3'0: t_Option = Any.any_l ()
    | & _124: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _125: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _126: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & pop4'0: t_Option = Any.any_l ()
    | & _128: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _129: MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _130: MutBorrow.t (Seq.seq Int32.t) = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
