module M_ghost_let__foo [#"ghost_let.rs" 14 0 14 34]
  let%span sghost_let = "ghost_let.rs" 14 11 14 12
  let%span sghost_let'0 = "ghost_let.rs" 13 11 13 15
  let%span sghost_let'1 = "ghost_let.rs" 21 10 21 24
  let%span sghost_let'2 = "ghost_let.rs" 9 8 9 22
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 203 22 203 26
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 203 4 205 17
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 201 14 201 29
  let%span sghost'2 = "../../../creusot-contracts/src/ghost.rs" 179 14 179 26
  let%span sghost'3 = "../../../creusot-contracts/src/ghost.rs" 118 8 118 18
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 99 20 99 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_WithInv = { t_WithInv__0: Int32.t }
  
  predicate invariant' [#"ghost_let.rs" 8 4 8 30] (self: t_WithInv) = [%#sghost_let'2] self.t_WithInv__0 = (1: Int32.t)
  
  predicate inv (_0: t_WithInv)
  
  axiom inv_axiom [@rewrite]: forall x: t_WithInv [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_WithInv__0 = a_0} -> true
        end)
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_WithInv) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 (_0: MutBorrow.t t_WithInv)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_WithInv [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_WithInv) = [%#sghost'3] inv'0 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: MutBorrow.t t_WithInv)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_WithInv [inv'1 x]. inv'1 x = invariant''1 x
  
  let rec into_inner (self: MutBorrow.t t_WithInv) (return' (x: MutBorrow.t t_WithInv)) =
    {[@expl:into_inner 'self' type invariant] [%#sghost] inv'1 self}
    any
    [ return''0 (result: MutBorrow.t t_WithInv) -> {[%#sghost'0] inv'0 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  let rec new (x: MutBorrow.t Int32.t) (return' (x'0: MutBorrow.t Int32.t)) = any
    [ return''0 (result: MutBorrow.t Int32.t) -> {[%#sghost'2] result = x} (! return' {result}) ]
  
  let rec bar (g2: MutBorrow.t Int32.t) (return' (x: ())) = any
    [ return''0 (result: ()) -> {[%#sghost_let'1] g2.final = (1: Int32.t)} (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_WithInv) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_WithInv) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo [#"ghost_let.rs" 14 0 14 34] (g: MutBorrow.t t_WithInv) (return' (x: ())) =
    {[@expl:foo 'g' type invariant] [%#sghost_let] inv'1 g}
    {[@expl:foo requires] [%#sghost_let'0] true}
    (! bb0
    [ bb0 = s0 [ s0 = into_inner {g'0} (fun (_ret: MutBorrow.t t_WithInv) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <Int32.t> {(_4.current).t_WithInv__0} {MutBorrow.inherit_id (MutBorrow.get_id _4) 1}
          (fun (_ret: MutBorrow.t Int32.t) ->
            [ &__temp <- _ret ] [ &_4 <- { _4 with current = { t_WithInv__0 = _ret.final } } ] s1)
      | s1 = new {__temp} (fun (_ret: MutBorrow.t Int32.t) -> [ &g2 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = bar {g2} (fun (_ret: ()) -> [ &_8 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'0 _4} s1 | s1 = -{resolve'0 _4}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & g'0: MutBorrow.t t_WithInv = g
    | & __temp: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: MutBorrow.t t_WithInv = Any.any_l ()
    | & g2: MutBorrow.t Int32.t = Any.any_l ()
    | & _8: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_ghost_let__bar [#"ghost_let.rs" 22 0 22 31]
  let%span sghost_let = "ghost_let.rs" 24 15 24 16
  let%span sghost_let'0 = "ghost_let.rs" 21 10 21 24
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 89 14 89 35
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 179 14 179 26
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 125 8 125 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 44 20 44 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec deref_mut (self: MutBorrow.t (MutBorrow.t Int32.t)) (return' (x: MutBorrow.t (MutBorrow.t Int32.t))) = any
    [ return''0 (result: MutBorrow.t (MutBorrow.t Int32.t)) -> {[%#sghost] result = self} (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t (MutBorrow.t Int32.t)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t (MutBorrow.t Int32.t)) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t Int32.t) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t Int32.t) = [%#sghost'1] resolve'2 self
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: MutBorrow.t Int32.t) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  let rec new (x: ()) (return' (x'0: ())) = any
    [ return''0 (result: ()) -> {[%#sghost'0] result = x} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec bar [#"ghost_let.rs" 22 0 22 31] (g2: MutBorrow.t Int32.t) (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <MutBorrow.t Int32.t> {g2'0}
          (fun (_ret: MutBorrow.t (MutBorrow.t Int32.t)) -> [ &_6 <- _ret ] [ &g2'0 <- _ret.final ] s1)
      | s1 = deref_mut {_6} (fun (_ret: MutBorrow.t (MutBorrow.t Int32.t)) -> [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_5 <- { _5 with current = { _5.current with current = ([%#sghost_let] (1: Int32.t)) } } ] s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = -{resolve'4 g2'0}- s3
      | s3 = new {_4} (fun (_ret: ()) -> [ &_3 <- _ret ] s4)
      | s4 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & g2'0: MutBorrow.t Int32.t = g2
    | & _3: () = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l ()
    | & _6: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:bar ensures] [%#sghost_let'0] g2.final = (1: Int32.t)} (! return' {result}) ]
end
