module M_typing__ghost_enter_ghost
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonCopy = { t_NonCopy__0: Int32.t }
  
  let rec new (x: t_NonCopy) (return (x'0: t_NonCopy)) = any
    [ return (result: t_NonCopy) -> {result = x} (! return {result}) ]
  
  let rec deref (self: t_NonCopy) (return (x: t_NonCopy)) = any
    [ return (result: t_NonCopy) -> {result = self} (! return {result}) ]
  
  let rec deref_mut (self: MutBorrow.t t_NonCopy) (return (x: MutBorrow.t t_NonCopy)) = any
    [ return (result: MutBorrow.t t_NonCopy) -> {result = self} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_NonCopy) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_NonCopy) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  let rec new'0 (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  function view (self: t_NonCopy) : int = Int32.to_int self.t_NonCopy__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_enter_ghost (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- { t_NonCopy__0 = (1: Int32.t) } ] s1
      | s1 = new {_2} (fun (_ret: t_NonCopy) -> [ &g_move <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_4 <- { t_NonCopy__0 = (2: Int32.t) } ] s1
      | s1 = new {_4} (fun (_ret: t_NonCopy) -> [ &g_read <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_6 <- { t_NonCopy__0 = (3: Int32.t) } ] s1
      | s1 = new {_6} (fun (_ret: t_NonCopy) -> [ &g_mut <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = deref {g_read} (fun (_ret: t_NonCopy) -> [ &_9 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_11 <- { t_NonCopy__0 = (4: Int32.t) } ] s1
      | s1 = MutBorrow.borrow_mut <t_NonCopy> {g_mut}
          (fun (_ret: MutBorrow.t t_NonCopy) -> [ &_13 <- _ret ] [ &g_mut <- _ret.final ] s2)
      | s2 = deref_mut {_13} (fun (_ret: MutBorrow.t t_NonCopy) -> [ &_12 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = [ &_12 <- { _12 with current = _11 } ] s1
      | s1 = -{resolve'0 _12}- s2
      | s2 = new'0 {_8} (fun (_ret: ()) -> [ &_7 <- _ret ] s3)
      | s3 = bb6 ]
    | bb6 = s0
      [ s0 = {[@expl:assertion] view g_read = 2} s1 | s1 = {[@expl:assertion] view g_mut = 4} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & g_move: t_NonCopy = Any.any_l ()
    | & _2: t_NonCopy = Any.any_l ()
    | & g_read: t_NonCopy = Any.any_l ()
    | & _4: t_NonCopy = Any.any_l ()
    | & g_mut: t_NonCopy = Any.any_l ()
    | & _6: t_NonCopy = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _9: t_NonCopy = Any.any_l ()
    | & _11: t_NonCopy = Any.any_l ()
    | & _12: MutBorrow.t t_NonCopy = Any.any_l ()
    | & _13: MutBorrow.t t_NonCopy = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_typing__snapshot_enter_ghost
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_NonCopy = { t_NonCopy__0: Int32.t }
  
  function view (self: t_NonCopy) : int = Int32.to_int self.t_NonCopy__0
  
  let rec new (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec snapshot_enter_ghost (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &g_read <- { t_NonCopy__0 = (1: Int32.t) } ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_6 <- { t_NonCopy__0 = (3: Int32.t) } ] s1 | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &g_mut <- _6 ] s1
      | s1 = {[@expl:assertion] view g_mut = 3} s2
      | s2 = [ &_10 <- { t_NonCopy__0 = (4: Int32.t) } ] s3
      | s3 = bb3 ]
    | bb3 = s0 [ s0 = [ &g_mut <- _10 ] s1 | s1 = new {_5} (fun (_ret: ()) -> [ &_4 <- _ret ] s2) | s2 = bb4 ]
    | bb4 = s0
      [ s0 = {[@expl:assertion] view g_read = 1} s1 | s1 = {[@expl:assertion] view g_mut = 4} s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & g_read: t_NonCopy = Any.any_l ()
    | & g_mut: t_NonCopy = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _6: t_NonCopy = Any.any_l ()
    | & _10: t_NonCopy = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_typing__copy_enter_ghost
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple = { f0: Int32.t; f1: Int32.t }
  
  let rec new (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec copy_enter_ghost (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (2: Int32.t) ] s1
      | s1 = [ &pair <- { f0 = (6: Int32.t); f1 = (42: Int32.t) } ] s2
      | s2 = [ &_x <- x ] s3
      | s3 = [ &_pair <- pair ] s4
      | s4 = new {_5} (fun (_ret: ()) -> [ &_4 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] Int32.to_int x = 2} s1
      | s1 = {[@expl:assertion] Int32.to_int pair.f0 = 6 /\ Int32.to_int pair.f1 = 42} s2
      | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & pair: tuple = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _x: Int32.t = Any.any_l ()
    | & _pair: tuple = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
