module M_loop_in_ghost__foo [#"loop_in_ghost.rs" 5 0 5 32]
  let%span sloop_in_ghost = "loop_in_ghost.rs" 7 20 7 21
  let%span sloop_in_ghost'0 = "loop_in_ghost.rs" 9 18 9 19
  let%span sloop_in_ghost'1 = "loop_in_ghost.rs" 10 20 10 33
  let%span sloop_in_ghost'2 = "loop_in_ghost.rs" 11 18 11 19
  let%span sloop_in_ghost'3 = "loop_in_ghost.rs" 12 17 12 18
  let%span sloop_in_ghost'4 = "loop_in_ghost.rs" 13 17 13 18
  let%span sloop_in_ghost'5 = "loop_in_ghost.rs" 4 10 4 22
  let%span swell_founded = "../../../creusot-contracts/src/logic/well_founded.rs" 62 16 62 28
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 179 14 179 26
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 124 39 124 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 128 39 128 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 132 39 132 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 136 39 136 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 140 39 140 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 144 40 144 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 145 40 145 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 146 39 146 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 150 40 150 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 151 39 151 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 160 39 160 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 240 16 246 17
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = [%#sord'12] if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  predicate well_founded_relation (self: UInt32.t) (other: UInt32.t) = [%#swell_founded] UInt32.gt self other
  
  let rec new (x: UInt32.t) (return' (x'0: UInt32.t)) = any
    [ return''0 (result: UInt32.t) -> {[%#sghost] result = x} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo [#"loop_in_ghost.rs" 5 0 5 32] (x: UInt32.t) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &y <- [%#sloop_in_ghost] (0: UInt32.t) ] s1 | s1 = [ &i <- x'0 ] s2 | s2 = bb1 ]
    | bb1 = bb1invariant
      [ bb1'0 = {[@expl:loop variant] well_founded_relation variant_old_bb1 i} bb1invariant
      | bb1invariant = {[@expl:loop invariant] [%#sloop_in_ghost'1] UInt32.t'int y + UInt32.t'int i = UInt32.t'int x'0}
        (! [ &variant_old_bb1 <- [%#sloop_in_ghost'0] i ] s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = [ &_11 <- UInt32.gt i ([%#sloop_in_ghost'2] (0: UInt32.t)) ] s1
          | s1 = any [ br0 -> {_11 = false} (! bb4) | br1 -> {_11} (! bb3) ] ]
        | bb3 = s0
          [ s0 = UInt32.sub {i} {[%#sloop_in_ghost'3] (1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &i <- _ret ] s1)
          | s1 = UInt32.add {y} {[%#sloop_in_ghost'4] (1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &y <- _ret ] s2)
          | s2 = bb1'0 ] ] ]
    | bb4 = s0 [ s0 = new {y} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = return''0 {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x'0: UInt32.t = x
    | & y: UInt32.t = Any.any_l ()
    | & i: UInt32.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & variant_old_bb1: UInt32.t = Any.any_l () ])
    [ return''0 (result: UInt32.t) -> {[@expl:foo ensures] [%#sloop_in_ghost'5] result = x} (! return' {result}) ]
end
