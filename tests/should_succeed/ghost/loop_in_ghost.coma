module M_foo
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_u32 (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      Less
    else
      if self = o then Equal else Greater
  
  
  function eq_cmp_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_u32_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log_u32 x y = Equal)
  
  function antisym2_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Greater -> cmp_log_u32 y x = Less
  
  function antisym1_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_u32_spec: forall x: UInt32.t, y: UInt32.t. cmp_log_u32 x y = Less -> cmp_log_u32 y x = Greater
  
  function trans_u32 (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_u32_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log_u32 x y = o
      -> cmp_log_u32 y z = o -> cmp_log_u32 x z = o
  
  function refl_u32 (x: UInt32.t) : ()
  
  axiom refl_u32_spec: forall x: UInt32.t. cmp_log_u32 x x = Equal
  
  function cmp_gt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log_u32 x y = Greater)
  
  function cmp_ge_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log_u32 x y <> Less)
  
  function cmp_lt_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log_u32 x y = Less)
  
  function cmp_le_log_u32 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_u32_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log_u32 x y <> Greater)
  
  predicate well_founded_relation_u32 [@inline:trivial] (self: UInt32.t) (other: UInt32.t) = UInt32.gt self other
  
  meta "rewrite_def" predicate well_founded_relation_u32
  
  let rec new_u32 (x: UInt32.t) (return (x'0: UInt32.t)) = any
    [ return (result: UInt32.t) -> {result = x} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo (x: UInt32.t) (return (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &y <- (0: UInt32.t) ] s1 | s1 = [ &i <- x ] s2 | s2 = bb1 ]
    | bb1 = bb1invariant
      [ bb1 = {[@expl:loop variant] well_founded_relation_u32 variant_old_bb1 i} bb1invariant
      | bb1invariant = {[@expl:loop invariant] UInt32.t'int y + UInt32.t'int i = UInt32.t'int x}
        (! [ &variant_old_bb1 <- i ] s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = [ &_11 <- UInt32.gt i (0: UInt32.t) ] s1
          | s1 = any [ br0 -> {_11 = false} (! bb4) | br1 -> {_11} (! bb3) ] ]
        | bb3 = s0
          [ s0 = UInt32.sub {i} {(1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &i <- _ret ] s1)
          | s1 = UInt32.add {y} {(1: UInt32.t)} (fun (_ret: UInt32.t) -> [ &y <- _ret ] s2)
          | s2 = bb1 ] ] ]
    | bb4 = s0 [ s0 = new_u32 {y} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = return {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x: UInt32.t = x
    | & y: UInt32.t = Any.any_l ()
    | & i: UInt32.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & variant_old_bb1: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> {[@expl:foo ensures] result = x} (! return {result}) ]
end
