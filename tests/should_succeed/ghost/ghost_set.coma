module M_ghost_set__ghost_map [#"ghost_set.rs" 4 0 4 18]
  let%span sghost_set = "ghost_set.rs" 7 22 7 53
  let%span sghost_set'0 = "ghost_set.rs" 8 25 8 26
  let%span sghost_set'1 = "ghost_set.rs" 10 22 10 63
  let%span sghost_set'2 = "ghost_set.rs" 11 22 11 34
  let%span sghost_set'3 = "ghost_set.rs" 12 28 12 29
  let%span sghost_set'4 = "ghost_set.rs" 12 31 12 32
  let%span sghost_set'5 = "ghost_set.rs" 12 34 12 35
  let%span sghost_set'6 = "ghost_set.rs" 14 45 14 46
  let%span sghost_set'7 = "ghost_set.rs" 15 46 15 47
  let%span sghost_set'8 = "ghost_set.rs" 17 22 17 54
  let%span sghost_set'9 = "ghost_set.rs" 18 22 18 34
  let%span sghost_set'10 = "ghost_set.rs" 19 22 19 62
  let%span sghost_set'11 = "ghost_set.rs" 24 22 24 69
  let%span sghost_set'12 = "ghost_set.rs" 25 22 25 41
  let%span sghost_set'13 = "ghost_set.rs" 26 22 26 36
  let%span sghost_set'14 = "ghost_set.rs" 31 22 31 31
  let%span sghost_set'15 = "ghost_set.rs" 32 22 32 32
  let%span sghost_set'16 = "ghost_set.rs" 33 22 33 32
  let%span sfset = "../../../creusot-contracts/src/logic/fset.rs" 319 14 319 31
  let%span sfset'0 = "../../../creusot-contracts/src/logic/fset.rs" 43 8 43 26
  let%span sfset'1 = "../../../creusot-contracts/src/logic/fset.rs" 400 14 400 44
  let%span sfset'2 = "../../../creusot-contracts/src/logic/fset.rs" 401 14 401 48
  let%span sfset'3 = "../../../creusot-contracts/src/logic/fset.rs" 346 14 346 34
  let%span sfset'4 = "../../../creusot-contracts/src/logic/fset.rs" 436 14 436 45
  let%span sfset'5 = "../../../creusot-contracts/src/logic/fset.rs" 437 14 437 48
  let%span sfset'6 = "../../../creusot-contracts/src/logic/fset.rs" 367 14 367 45
  let%span sfset'7 = "../../../creusot-contracts/src/logic/fset.rs" 62 8 62 26
  let%span sfset'8 = "../../../creusot-contracts/src/logic/fset.rs" 89 8 89 26
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 79 14 79 35
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 68 14 68 43
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 162 14 162 26
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.Int32
  use set.Fset
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  let rec new (return'  (x: (Fset.fset Int32.t)))= any
    [ return''0 (result: (Fset.fset Int32.t))-> {[%#sfset] Fset.is_empty result} (! return' {result}) ]
  
  
  predicate contains [@inline:trivial] (self: Fset.fset Int32.t) (e: Int32.t) =
    [%#sfset'0] Fset.mem e self
  
  let rec deref_mut (self:MutBorrow.t ( (Fset.fset Int32.t))) (return'  (x:MutBorrow.t (Fset.fset Int32.t)))= any
    [ return''0 (result:MutBorrow.t (Fset.fset Int32.t))-> {[%#sghost] result = self} (! return' {result}) ]
  
  
  function insert [@inline:trivial] (self: Fset.fset Int32.t) (e: Int32.t) : Fset.fset Int32.t =
    [%#sfset'7] Fset.add e self
  
  let rec insert_ghost (self:MutBorrow.t (Fset.fset Int32.t)) (value:Int32.t) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#sfset'1] self.final = insert self.current value}
      {[%#sfset'2] result = (not contains self.current value)}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t (Fset.fset Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (Fset.fset Int32.t)) =
    resolve _0
  
  let rec deref (self: (Fset.fset Int32.t)) (return'  (x:Fset.fset Int32.t))= any
    [ return''0 (result:Fset.fset Int32.t)-> {[%#sghost'0] self = result} (! return' {result}) ]
  
  
  let rec len_ghost (self:Fset.fset Int32.t) (return'  (x:int))= any
    [ return''0 (result:int)-> {[%#sfset'3] result = Fset.cardinal self} (! return' {result}) ]
  
  
  type tuple  =
    { _p0: Int32.t; _p1: Int32.t; _p2: Int32.t }
  
  function remove [@inline:trivial] (self: Fset.fset Int32.t) (e: Int32.t) : Fset.fset Int32.t =
    [%#sfset'8] Fset.remove e self
  
  let rec remove_ghost (self:MutBorrow.t (Fset.fset Int32.t)) (value:Int32.t) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#sfset'4] self.final = remove self.current value}
      {[%#sfset'5] result = contains self.current value}
      (! return' {result}) ]
  
  
  let rec contains_ghost (self:Fset.fset Int32.t) (value:Int32.t) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#sfset'6] result = contains self value} (! return' {result}) ]
  
  
  let rec new'0 (x:()) (return'  (x'0: ()))= any
    [ return''0 (result: ())-> {[%#sghost'1] result = x} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_map[#"ghost_set.rs" 4 0 4 18] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: (Fset.fset Int32.t)) ->  [ &set <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set] forall k: Int32.t. not contains set k} s1
      | s1 = MutBorrow.borrow_mut < (Fset.fset Int32.t)> {set}
          (fun (_ret:MutBorrow.t ( (Fset.fset Int32.t))) ->  [ &_9 <- _ret ]  [ &set <- _ret.final ] s2)
      | s2 = deref_mut {_9} (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->  [ &_8 <- _ret ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_7 <- _ret ] 
             [ &_8 <- { _8 with current = _ret.final } ] 
            s1)
      | s1 = insert_ghost {_7} {[%#sghost_set'0] (1: Int32.t)} (fun (_ret:bool) ->  [ &_6 <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = -{resolve'0 _8}- s1 | s1 = deref {set} (fun (_ret:Fset.fset Int32.t) ->  [ &_12 <- _ret ] s2) | s2 = bb4 ]
    
    | bb4 = s0 [ s0 = len_ghost {_12} (fun (_ret:int) ->  [ &length1 <- _ret ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set'1] contains set (1: Int32.t) /\ not contains set (2: Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sghost_set'2] length1 = 1} s2
      | s2 = 
        [ &_21 <- { _p0 = ([%#sghost_set'3] (1: Int32.t));
                    _p1 = ([%#sghost_set'4] (2: Int32.t));
                    _p2 = ([%#sghost_set'5] (3: Int32.t)) } ]
        
        s3
      | s3 =  [ &x1 <- _21._p0 ] s4
      | s4 =  [ &x2 <- _21._p1 ] s5
      | s5 =  [ &x3 <- _21._p2 ] s6
      | s6 = MutBorrow.borrow_mut < (Fset.fset Int32.t)> {set}
          (fun (_ret:MutBorrow.t ( (Fset.fset Int32.t))) ->  [ &_25 <- _ret ]  [ &set <- _ret.final ] s7)
      | s7 = deref_mut {_25} (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->  [ &_24 <- _ret ] s8)
      | s8 = bb6 ]
    
    | bb6 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_24.current} {MutBorrow.get_id _24}
          (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_23 <- _ret ] 
             [ &_24 <- { _24 with current = _ret.final } ] 
            s1)
      | s1 = insert_ghost {_23} {[%#sghost_set'6] (2: Int32.t)} (fun (_ret:bool) ->  [ &inserted_true <- _ret ] s2)
      | s2 = bb7 ]
    
    | bb7 = s0
      [ s0 = -{resolve'0 _24}- s1
      | s1 = MutBorrow.borrow_mut < (Fset.fset Int32.t)> {set}
          (fun (_ret:MutBorrow.t ( (Fset.fset Int32.t))) ->  [ &_29 <- _ret ]  [ &set <- _ret.final ] s2)
      | s2 = deref_mut {_29} (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->  [ &_28 <- _ret ] s3)
      | s3 = bb8 ]
    
    | bb8 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_28.current} {MutBorrow.get_id _28}
          (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_27 <- _ret ] 
             [ &_28 <- { _28 with current = _ret.final } ] 
            s1)
      | s1 = insert_ghost {_27} {[%#sghost_set'7] (2: Int32.t)} (fun (_ret:bool) ->  [ &inserted_false <- _ret ] s2)
      | s2 = bb9 ]
    
    | bb9 = s0
      [ s0 = -{resolve'0 _28}- s1
      | s1 = deref {set} (fun (_ret:Fset.fset Int32.t) ->  [ &_32 <- _ret ] s2)
      | s2 = bb10 ]
    
    | bb10 = s0 [ s0 = len_ghost {_32} (fun (_ret:int) ->  [ &length2 <- _ret ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set'8] inserted_true /\ not inserted_false} s1
      | s1 = {[@expl:assertion] [%#sghost_set'9] length2 = 2} s2
      | s2 = {[@expl:assertion] [%#sghost_set'10] contains set (1: Int32.t) /\ contains set (2: Int32.t)} s3
      | s3 = MutBorrow.borrow_mut < (Fset.fset Int32.t)> {set}
          (fun (_ret:MutBorrow.t ( (Fset.fset Int32.t))) ->  [ &_43 <- _ret ]  [ &set <- _ret.final ] s4)
      | s4 = deref_mut {_43} (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->  [ &_42 <- _ret ] s5)
      | s5 = bb12 ]
    
    | bb12 = s0
      [ s0 =  [ &_45 <- x3 ] s1
      | s1 = MutBorrow.borrow_final <Fset.fset Int32.t> {_42.current} {MutBorrow.get_id _42}
          (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_41 <- _ret ] 
             [ &_42 <- { _42 with current = _ret.final } ] 
            s2)
      | s2 = remove_ghost {_41} {_45} (fun (_ret:bool) ->  [ &remove_false1 <- _ret ] s3)
      | s3 = bb13 ]
    
    | bb13 = s0
      [ s0 = -{resolve'0 _42}- s1
      | s1 = MutBorrow.borrow_mut < (Fset.fset Int32.t)> {set}
          (fun (_ret:MutBorrow.t ( (Fset.fset Int32.t))) ->  [ &_49 <- _ret ]  [ &set <- _ret.final ] s2)
      | s2 = deref_mut {_49} (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->  [ &_48 <- _ret ] s3)
      | s3 = bb14 ]
    
    | bb14 = s0
      [ s0 =  [ &_51 <- x2 ] s1
      | s1 = MutBorrow.borrow_final <Fset.fset Int32.t> {_48.current} {MutBorrow.get_id _48}
          (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_47 <- _ret ] 
             [ &_48 <- { _48 with current = _ret.final } ] 
            s2)
      | s2 = remove_ghost {_47} {_51} (fun (_ret:bool) ->  [ &remove_true <- _ret ] s3)
      | s3 = bb15 ]
    
    | bb15 = s0
      [ s0 = -{resolve'0 _48}- s1
      | s1 = MutBorrow.borrow_mut < (Fset.fset Int32.t)> {set}
          (fun (_ret:MutBorrow.t ( (Fset.fset Int32.t))) ->  [ &_55 <- _ret ]  [ &set <- _ret.final ] s2)
      | s2 = deref_mut {_55} (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->  [ &_54 <- _ret ] s3)
      | s3 = bb16 ]
    
    | bb16 = s0
      [ s0 =  [ &_57 <- x2 ] s1
      | s1 = MutBorrow.borrow_final <Fset.fset Int32.t> {_54.current} {MutBorrow.get_id _54}
          (fun (_ret:MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_53 <- _ret ] 
             [ &_54 <- { _54 with current = _ret.final } ] 
            s2)
      | s2 = remove_ghost {_53} {_57} (fun (_ret:bool) ->  [ &remove_false2 <- _ret ] s3)
      | s3 = bb17 ]
    
    | bb17 = s0
      [ s0 = -{resolve'0 _54}- s1
      | s1 = {[@expl:assertion] [%#sghost_set'11] not remove_false1 /\ remove_true /\ not remove_false2} s2
      | s2 = {[@expl:assertion] [%#sghost_set'12] not contains set (2: Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_set'13] Fset.cardinal set = 1} s4
      | s4 = deref {set} (fun (_ret:Fset.fset Int32.t) ->  [ &_66 <- _ret ] s5)
      | s5 = bb18 ]
    
    | bb18 = s0
      [ s0 =  [ &_69 <- x1 ] s1
      | s1 = contains_ghost {_66} {_69} (fun (_ret:bool) ->  [ &contains1 <- _ret ] s2)
      | s2 = bb19 ]
    
    | bb19 = s0 [ s0 = deref {set} (fun (_ret:Fset.fset Int32.t) ->  [ &_72 <- _ret ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 =  [ &_75 <- x2 ] s1
      | s1 = contains_ghost {_72} {_75} (fun (_ret:bool) ->  [ &contains2 <- _ret ] s2)
      | s2 = bb21 ]
    
    | bb21 = s0 [ s0 = deref {set} (fun (_ret:Fset.fset Int32.t) ->  [ &_78 <- _ret ] s1) | s1 = bb22 ] 
    | bb22 = s0
      [ s0 =  [ &_81 <- x3 ] s1
      | s1 = contains_ghost {_78} {_81} (fun (_ret:bool) ->  [ &contains3 <- _ret ] s2)
      | s2 = bb23 ]
    
    | bb23 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set'14] contains1} s1
      | s1 = {[@expl:assertion] [%#sghost_set'15] not contains2} s2
      | s2 = {[@expl:assertion] [%#sghost_set'16] not contains3} s3
      | s3 = new'0 {_3} (fun (_ret: ()) ->  [ &_2 <- _ret ] s4)
      | s4 = bb24 ]
    
    | bb24 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & set:  (Fset.fset Int32.t) = Any.any_l ()
    | & _2:  () = Any.any_l ()
    | & _3: () = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _7: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _8: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _9: MutBorrow.t ( (Fset.fset Int32.t)) = Any.any_l ()
    | & length1: int = Any.any_l ()
    | & _12: Fset.fset Int32.t = Any.any_l ()
    | & x1: Int32.t = Any.any_l ()
    | & x2: Int32.t = Any.any_l ()
    | & x3: Int32.t = Any.any_l ()
    | & _21: tuple = Any.any_l ()
    | & inserted_true: bool = Any.any_l ()
    | & _23: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _24: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _25: MutBorrow.t ( (Fset.fset Int32.t)) = Any.any_l ()
    | & inserted_false: bool = Any.any_l ()
    | & _27: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _28: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _29: MutBorrow.t ( (Fset.fset Int32.t)) = Any.any_l ()
    | & length2: int = Any.any_l ()
    | & _32: Fset.fset Int32.t = Any.any_l ()
    | & remove_false1: bool = Any.any_l ()
    | & _41: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _42: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _43: MutBorrow.t ( (Fset.fset Int32.t)) = Any.any_l ()
    | & _45: Int32.t = Any.any_l ()
    | & remove_true: bool = Any.any_l ()
    | & _47: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _48: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _49: MutBorrow.t ( (Fset.fset Int32.t)) = Any.any_l ()
    | & _51: Int32.t = Any.any_l ()
    | & remove_false2: bool = Any.any_l ()
    | & _53: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _54: MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _55: MutBorrow.t ( (Fset.fset Int32.t)) = Any.any_l ()
    | & _57: Int32.t = Any.any_l ()
    | & contains1: bool = Any.any_l ()
    | & _66: Fset.fset Int32.t = Any.any_l ()
    | & _69: Int32.t = Any.any_l ()
    | & contains2: bool = Any.any_l ()
    | & _72: Fset.fset Int32.t = Any.any_l ()
    | & _75: Int32.t = Any.any_l ()
    | & contains3: bool = Any.any_l ()
    | & _78: Fset.fset Int32.t = Any.any_l ()
    | & _81: Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
