module M_implementation__impl_Clone_for_PersistentArray_T__clone (* <implementation::PersistentArray<T> as std::clone::Clone> *)
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use seq.Seq
  use creusot.prelude.Any
  
  type t_Rc_PermCell_Inner_T_Global
  
  type t_Fragment_Id_Seq_T
  
  type t_Rc_LocalInvariant_PA_T_Global
  
  type t_PersistentArray_T = {
    permcell: t_Rc_PermCell_Inner_T_Global;
    frag: t_Fragment_Id_Seq_T;
    inv: t_Rc_LocalInvariant_PA_T_Global }
  
  predicate inv_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate invariant_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (self: t_Rc_PermCell_Inner_T_Global) =
    inv_Rc_PermCell_Inner_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_PermCell_Inner_T_Global
  
  predicate inv_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (_1: t_Rc_PermCell_Inner_T_Global) =
    invariant_ref_Rc_PermCell_Inner_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_PermCell_Inner_T_Global
  
  let rec clone_Rc_PermCell_Inner_T_Global (self_: t_Rc_PermCell_Inner_T_Global)
    (return (x: t_Rc_PermCell_Inner_T_Global)) =
    {[@expl:clone 'self_' type invariant] inv_ref_Rc_PermCell_Inner_T_Global self_}
    any
    [ return (result: t_Rc_PermCell_Inner_T_Global) -> {inv_Rc_PermCell_Inner_T_Global result}
      {result = self_}
      (! return {result}) ]
  
  predicate invariant_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T)
  
  predicate inv_Fragment_Id_Seq_T (_1: t_Fragment_Id_Seq_T)
  
  axiom inv_axiom: forall x: t_Fragment_Id_Seq_T [inv_Fragment_Id_Seq_T x]. inv_Fragment_Id_Seq_T x
      -> invariant_Fragment_Id_Seq_T x
  
  predicate invariant_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Fragment_Id_Seq_T
  
  predicate inv_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Fragment_Id_Seq_T
  
  predicate invariant_ref_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) =
    inv_Ghost_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Fragment_Id_Seq_T
  
  predicate inv_ref_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_ref_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Fragment_Id_Seq_T
  
  predicate invariant_ref_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Fragment_Id_Seq_T
  
  predicate inv_ref_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) = invariant_ref_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Fragment_Id_Seq_T
  
  let rec deref_Ghost_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) (return (x: t_Fragment_Id_Seq_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_Fragment_Id_Seq_T self}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_ref_Fragment_Id_Seq_T result} {result = self} (! return {result}) ]
  
  type t_Id
  
  type t_T
  
  type tup2_Id_Seq_T = { f0: t_Id; f1: Seq.seq t_T }
  
  function view_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) : tup2_Id_Seq_T
  
  function id_Id (self: t_Fragment_Id_Seq_T) : t_Id
  
  let rec clone_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) (return (x: t_Fragment_Id_Seq_T)) =
    {[@expl:clone 'self' type invariant] inv_ref_Fragment_Id_Seq_T self}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Fragment_Id_Seq_T result}
      {view_Fragment_Id_Seq_T result = view_Fragment_Id_Seq_T self}
      {id_Id result = id_Id self}
      (! return {result}) ]
  
  let rec new_Fragment_Id_Seq_T (x: t_Fragment_Id_Seq_T) (return (x'0: t_Fragment_Id_Seq_T)) =
    {[@expl:new 'x' type invariant] inv_Fragment_Id_Seq_T x}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Ghost_Fragment_Id_Seq_T result} {result = x} (! return {result}) ]
  
  predicate inv_Rc_LocalInvariant_PA_T_Global (_1: t_Rc_LocalInvariant_PA_T_Global)
  
  predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Ghost_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate invariant_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_ref_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_LocalInvariant_PA_T_Global
  
  let rec deref_Ghost_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global)
    (return (x: t_Rc_LocalInvariant_PA_T_Global)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global self}
    any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_ref_Rc_LocalInvariant_PA_T_Global result}
      {result = self}
      (! return {result}) ]
  
  let rec clone_Rc_LocalInvariant_PA_T_Global (self_: t_Rc_LocalInvariant_PA_T_Global)
    (return (x: t_Rc_LocalInvariant_PA_T_Global)) =
    {[@expl:clone 'self_' type invariant] inv_ref_Rc_LocalInvariant_PA_T_Global self_}
    any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_Rc_LocalInvariant_PA_T_Global result}
      {result = self_}
      (! return {result}) ]
  
  let rec new_Rc_LocalInvariant_PA_T_Global (x: t_Rc_LocalInvariant_PA_T_Global)
    (return (x'0: t_Rc_LocalInvariant_PA_T_Global)) =
    {[@expl:new 'x' type invariant] inv_Rc_LocalInvariant_PA_T_Global x}
    any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_Ghost_Rc_LocalInvariant_PA_T_Global result}
      {result = x}
      (! return {result}) ]
  
  type t_PermCell_Inner_T
  
  function id_Inner_T (self: t_PermCell_Inner_T) : t_Id
  
  function view_Rc_PermCell_Inner_T_Global (self: t_Rc_PermCell_Inner_T_Global) : t_PermCell_Inner_T
  
  type t_LocalInvariant_PA_T
  
  function public_PA_T (self: t_LocalInvariant_PA_T) : t_Id
  
  function view_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) : t_LocalInvariant_PA_T
  
  function namespace_PA_T (self: t_LocalInvariant_PA_T) : t_Namespace
  
  predicate invariant_PersistentArray_T (self: t_PersistentArray_T) =
    (view_Fragment_Id_Seq_T self.frag).f0 = id_Inner_T (view_Rc_PermCell_Inner_T_Global self.permcell)
    /\ id_Id self.frag = public_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv)
    /\ namespace_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv) = Namespace_PARRAY 0
  
  predicate inv_PersistentArray_T (_1: t_PersistentArray_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PersistentArray_T [inv_PersistentArray_T x]. inv_PersistentArray_T x
      = (invariant_PersistentArray_T x
      /\ inv_Rc_PermCell_Inner_T_Global x.permcell
      /\ inv_Ghost_Fragment_Id_Seq_T x.frag /\ inv_Ghost_Rc_LocalInvariant_PA_T_Global x.inv)
  
  predicate invariant_ref_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) = inv_PersistentArray_T self
  
  meta "rewrite_def" predicate invariant_ref_PersistentArray_T
  
  predicate inv_ref_PersistentArray_T [@inline:trivial] (_1: t_PersistentArray_T) = invariant_ref_PersistentArray_T _1
  
  meta "rewrite_def" predicate inv_ref_PersistentArray_T
  
  function view_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) : Seq.seq t_T =
    (view_Fragment_Id_Seq_T self.frag).f1
  
  meta "rewrite_def" function view_PersistentArray_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec clone_PersistentArray_T (self: t_PersistentArray_T) (return (x: t_PersistentArray_T)) =
    {[@expl:clone 'self' type invariant] inv_ref_PersistentArray_T self}
    (! bb0
    [ bb0 = s0
      [ s0 = clone_Rc_PermCell_Inner_T_Global {self.permcell}
          (fun (_ret: t_Rc_PermCell_Inner_T_Global) -> [ &_3 <- _ret ] s1)
      | s1 = bb1 ]
    | bb1 = s0
      [ s0 = deref_Ghost_Fragment_Id_Seq_T {self.frag} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_8 <- _ret ] s1)
      | s1 = bb2 ]
    | bb2 = s0 [ s0 = clone_Fragment_Id_Seq_T {_8} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_6 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = new_Fragment_Id_Seq_T {_6} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_5 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = deref_Ghost_Rc_LocalInvariant_PA_T_Global {self.inv}
          (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &_13 <- _ret ] s1)
      | s1 = bb5 ]
    | bb5 = s0
      [ s0 = clone_Rc_LocalInvariant_PA_T_Global {_13}
          (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &_11 <- _ret ] s1)
      | s1 = bb6 ]
    | bb6 = s0
      [ s0 = new_Rc_LocalInvariant_PA_T_Global {_11}
          (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &_10 <- _ret ] s1)
      | s1 = bb7 ]
    | bb7 = s0 [ s0 = [ &_0 <- { permcell = _3; frag = _5; inv = _10 } ] s1 | s1 = bb8 ]
    | bb8 = return {_0} ]
    [ & _0: t_PersistentArray_T = Any.any_l ()
    | & self: t_PersistentArray_T = self
    | & _3: t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & _5: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _6: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _8: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _10: t_Rc_LocalInvariant_PA_T_Global = Any.any_l ()
    | & _11: t_Rc_LocalInvariant_PA_T_Global = Any.any_l ()
    | & _13: t_Rc_LocalInvariant_PA_T_Global = Any.any_l () ])
    [ return (result: t_PersistentArray_T) -> {[@expl:clone result type invariant] inv_PersistentArray_T result}
      {[@expl:clone ensures] view_PersistentArray_T result = view_PersistentArray_T self}
      (! return {result}) ]
end
module M_implementation__impl_PersistentArray_T__new (* implementation::PersistentArray<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use map.Map
  use map.Const
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_T_Global
  
  type t_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  type t_Rc_PermCell_Inner_T_Global
  
  type t_Inner_T = Direct t_Vec_T_Global | Link UInt64.t t_T t_Rc_PermCell_Inner_T_Global
  
  type t_PermCell_Inner_T
  
  type t_PermCellOwn_Inner_T
  
  type tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T = { f0: t_PermCell_Inner_T; f1: t_PermCellOwn_Inner_T }
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate inv_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate inv_Inner_T (_1: t_Inner_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Inner_T [inv_Inner_T x]. inv_Inner_T x
      = match x with
        | Direct f0'0 -> inv_Vec_T_Global f0'0
        | Link index value next -> inv_T value /\ inv_Rc_PermCell_Inner_T_Global next
        end
  
  predicate invariant_ref_Inner_T [@inline:trivial] (self: t_Inner_T) = inv_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_Inner_T
  
  predicate inv_ref_Inner_T [@inline:trivial] (_1: t_Inner_T) = invariant_ref_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Inner_T
  
  function val_Inner_T (self: t_PermCellOwn_Inner_T) : t_Inner_T
  
  predicate invariant_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_ref_Inner_T (val_Inner_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_Inner_T
  
  predicate inv_PermCellOwn_Inner_T (_1: t_PermCellOwn_Inner_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellOwn_Inner_T [inv_PermCellOwn_Inner_T x]. inv_PermCellOwn_Inner_T x
      = invariant_PermCellOwn_Inner_T x
  
  predicate invariant_Ghost_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_Ghost_PermCellOwn_Inner_T
  
  predicate inv_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_Ghost_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_Ghost_PermCellOwn_Inner_T
  
  predicate inv_tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T) =
    inv_Ghost_PermCellOwn_Inner_T _1.f1
  
  meta "rewrite_def" predicate inv_tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T
  
  type t_Id
  
  function id_Inner_T (self: t_PermCell_Inner_T) : t_Id
  
  function id_Inner_T'0 (self: t_PermCellOwn_Inner_T) : t_Id
  
  function view_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) : t_Inner_T = val_Inner_T self
  
  meta "rewrite_def" function view_PermCellOwn_Inner_T
  
  let rec new_Inner_T (value: t_Inner_T) (return (x: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T)) =
    {[@expl:new 'value' type invariant] inv_Inner_T value}
    any
    [ return (result: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T) ->
    {inv_tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T result}
      {id_Inner_T result.f0 = id_Inner_T'0 result.f1}
      {view_PermCellOwn_Inner_T result.f1 = value}
      (! return {result}) ]
  
  type t_Authority_Id_Seq_T
  
  predicate invariant_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T)
  
  predicate inv_Authority_Id_Seq_T (_1: t_Authority_Id_Seq_T)
  
  axiom inv_axiom'2: forall x: t_Authority_Id_Seq_T [inv_Authority_Id_Seq_T x]. inv_Authority_Id_Seq_T x
      -> invariant_Authority_Id_Seq_T x
  
  predicate invariant_Ghost_Authority_Id_Seq_T [@inline:trivial] (self: t_Authority_Id_Seq_T) =
    inv_Authority_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Authority_Id_Seq_T
  
  predicate inv_Ghost_Authority_Id_Seq_T [@inline:trivial] (_1: t_Authority_Id_Seq_T) =
    invariant_Ghost_Authority_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Authority_Id_Seq_T
  
  type t_FMap_Id_Seq_T
  
  function view_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T) : t_FMap_Id_Seq_T
  
  function len_Id (self: t_FMap_Id_Seq_T) : int
  
  axiom len_Id_spec: forall self: t_FMap_Id_Seq_T. len_Id self >= 0
  
  type t_Option_Seq_T = None | Some (Seq.seq t_T)
  
  function view_FMap_Id_Seq_T (self: t_FMap_Id_Seq_T) : Map.map t_Id t_Option_Seq_T
  
  constant empty_Id : t_FMap_Id_Seq_T
  
  axiom empty_Id_spec: len_Id empty_Id = 0
  
  axiom empty_Id_spec'0: view_FMap_Id_Seq_T empty_Id = Const.const (None)
  
  let rec new_Id (return (x: t_Authority_Id_Seq_T)) = any
    [ return (result: t_Authority_Id_Seq_T) -> {inv_Ghost_Authority_Id_Seq_T result}
      {view_Authority_Id_Seq_T result = empty_Id}
      (! return {result}) ]
  
  predicate invariant_ref_Ghost_Authority_Id_Seq_T [@inline:trivial] (self: MutBorrow.t t_Authority_Id_Seq_T) =
    inv_Ghost_Authority_Id_Seq_T self.current /\ inv_Ghost_Authority_Id_Seq_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Authority_Id_Seq_T
  
  predicate inv_ref_Ghost_Authority_Id_Seq_T [@inline:trivial] (_1: MutBorrow.t t_Authority_Id_Seq_T) =
    invariant_ref_Ghost_Authority_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Authority_Id_Seq_T
  
  predicate invariant_ref_Authority_Id_Seq_T [@inline:trivial] (self: MutBorrow.t t_Authority_Id_Seq_T) =
    inv_Authority_Id_Seq_T self.current /\ inv_Authority_Id_Seq_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Authority_Id_Seq_T
  
  predicate inv_ref_Authority_Id_Seq_T [@inline:trivial] (_1: MutBorrow.t t_Authority_Id_Seq_T) =
    invariant_ref_Authority_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Authority_Id_Seq_T
  
  let rec deref_mut_Ghost_Authority_Id_Seq_T (self: MutBorrow.t t_Authority_Id_Seq_T)
    (return (x: MutBorrow.t t_Authority_Id_Seq_T)) =
    {[@expl:deref_mut 'self' type invariant] inv_ref_Ghost_Authority_Id_Seq_T self}
    any
    [ return (result: MutBorrow.t t_Authority_Id_Seq_T) -> {inv_ref_Authority_Id_Seq_T result}
      {result = self}
      (! return {result}) ]
  
  type t_Fragment_Id_Seq_T
  
  function get_Id [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : t_Option_Seq_T =
    Map.get (view_FMap_Id_Seq_T self) k
  
  meta "rewrite_def" function get_Id
  
  predicate contains_Id [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) = get_Id self k <> None
  
  meta "rewrite_def" predicate contains_Id
  
  predicate invariant_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T)
  
  predicate inv_Fragment_Id_Seq_T (_1: t_Fragment_Id_Seq_T)
  
  axiom inv_axiom'3: forall x: t_Fragment_Id_Seq_T [inv_Fragment_Id_Seq_T x]. inv_Fragment_Id_Seq_T x
      -> invariant_Fragment_Id_Seq_T x
  
  function insert_Id (self: t_FMap_Id_Seq_T) (k: t_Id) (v: Seq.seq t_T) : t_FMap_Id_Seq_T
  
  axiom insert_Id_spec: forall self: t_FMap_Id_Seq_T, k: t_Id, v: Seq.seq t_T. view_FMap_Id_Seq_T (insert_Id self k v)
      = Map.set (view_FMap_Id_Seq_T self) k (Some v)
  
  axiom insert_Id_spec'0: forall self: t_FMap_Id_Seq_T, k: t_Id, v: Seq.seq t_T. len_Id (insert_Id self k v)
      = (if contains_Id self k then len_Id self else len_Id self + 1)
  
  function id_Id (self: t_Authority_Id_Seq_T) : t_Id
  
  type tup2_Id_Seq_T = { f0'0: t_Id; f1'0: Seq.seq t_T }
  
  function view_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) : tup2_Id_Seq_T
  
  function id_Id'0 (self: t_Fragment_Id_Seq_T) : t_Id
  
  let rec insert_Id'0 (self: MutBorrow.t t_Authority_Id_Seq_T) (k: t_Id) (v: Seq.seq t_T)
    (return (x: t_Fragment_Id_Seq_T)) = {[@expl:insert 'self' type invariant] inv_ref_Authority_Id_Seq_T self}
    {[@expl:insert requires] not contains_Id (view_Authority_Id_Seq_T self.current) k}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Fragment_Id_Seq_T result}
      {view_Authority_Id_Seq_T self.final = insert_Id (view_Authority_Id_Seq_T self.current) k v}
      {id_Id self.final = id_Id self.current}
      {view_Fragment_Id_Seq_T result = { f0'0 = k; f1'0 = v }}
      {id_Id'0 result = id_Id self.current}
      (! return {result}) ]
  
  predicate resolve_ref_Authority_Id_Seq_T [@inline:trivial] (_1: MutBorrow.t t_Authority_Id_Seq_T) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Authority_Id_Seq_T
  
  predicate invariant_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Fragment_Id_Seq_T
  
  predicate inv_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Fragment_Id_Seq_T
  
  let rec new_Fragment_Id_Seq_T (x: t_Fragment_Id_Seq_T) (return (x'0: t_Fragment_Id_Seq_T)) =
    {[@expl:new 'x' type invariant] inv_Fragment_Id_Seq_T x}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Ghost_Fragment_Id_Seq_T result} {result = x} (! return {result}) ]
  
  type t_FMap_Id_PermCellOwn_Inner_T
  
  type t_Option_PermCellOwn_Inner_T = None'0 | Some'0 t_PermCellOwn_Inner_T
  
  function view_FMap_Id_PermCellOwn_Inner_T (self: t_FMap_Id_PermCellOwn_Inner_T) : Map.map t_Id t_Option_PermCellOwn_Inner_T
  
  function get_Id'0 [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_Option_PermCellOwn_Inner_T =
    Map.get (view_FMap_Id_PermCellOwn_Inner_T self) k
  
  meta "rewrite_def" function get_Id'0
  
  predicate contains_Id'0 [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) = get_Id'0 self k <> None'0
  
  meta "rewrite_def" predicate contains_Id'0
  
  predicate inv_Id [@inline:trivial] (_1: t_Id) = true
  
  meta "rewrite_def" predicate inv_Id
  
  predicate index_Mapping_PermCellOwn_Inner_T_bool [@inline:trivial] (self: Map.map t_PermCellOwn_Inner_T bool) (a: t_PermCellOwn_Inner_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_PermCellOwn_Inner_T_bool
  
  function such_that_PermCellOwn_Inner_T (p: Map.map t_PermCellOwn_Inner_T bool) : t_PermCellOwn_Inner_T
  
  axiom such_that_PermCellOwn_Inner_T_spec:
    forall p: Map.map t_PermCellOwn_Inner_T bool. (exists x: t_PermCellOwn_Inner_T. index_Mapping_PermCellOwn_Inner_T_bool p x)
      -> index_Mapping_PermCellOwn_Inner_T_bool p (such_that_PermCellOwn_Inner_T p)
  
  function unwrap_Option_PermCellOwn_Inner_T (self: t_Option_PermCellOwn_Inner_T) : t_PermCellOwn_Inner_T =
    match self with
      | Some'0 x -> x
      | None'0 -> such_that_PermCellOwn_Inner_T (fun (__0: t_PermCellOwn_Inner_T) -> true)
      end
  
  function lookup_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_PermCellOwn_Inner_T =
    unwrap_Option_PermCellOwn_Inner_T (get_Id'0 self k)
  
  meta "rewrite_def" function lookup_Id
  
  function index_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) : t_PermCellOwn_Inner_T
   = lookup_Id self key
  
  meta "rewrite_def" function index_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    forall k: t_Id. contains_Id'0 self k
      -> inv_Id k /\ inv_PermCellOwn_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self k)
  
  meta "rewrite_def" predicate invariant_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_FMap_Id_PermCellOwn_Inner_T (_1: t_FMap_Id_PermCellOwn_Inner_T)
  
  axiom inv_axiom'4 [@rewrite]:
    forall x: t_FMap_Id_PermCellOwn_Inner_T [inv_FMap_Id_PermCellOwn_Inner_T x]. inv_FMap_Id_PermCellOwn_Inner_T x
      = invariant_FMap_Id_PermCellOwn_Inner_T x
  
  predicate invariant_Ghost_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    inv_FMap_Id_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_Ghost_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_Ghost_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (_1: t_FMap_Id_PermCellOwn_Inner_T) =
    invariant_Ghost_FMap_Id_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_Ghost_FMap_Id_PermCellOwn_Inner_T
  
  predicate ext_eq_Id (self: t_FMap_Id_PermCellOwn_Inner_T) (other: t_FMap_Id_PermCellOwn_Inner_T) =
    forall k: t_Id. get_Id'0 self k = get_Id'0 other k
  
  axiom ext_eq_Id_spec:
    forall self: t_FMap_Id_PermCellOwn_Inner_T, other: t_FMap_Id_PermCellOwn_Inner_T. ext_eq_Id self other
      = (self = other)
  
  function len_Id'0 (self: t_FMap_Id_PermCellOwn_Inner_T) : int
  
  axiom len_Id_spec'0: forall self: t_FMap_Id_PermCellOwn_Inner_T. len_Id'0 self >= 0
  
  constant empty_Id'0 : t_FMap_Id_PermCellOwn_Inner_T
  
  axiom empty_Id_spec'1: len_Id'0 empty_Id'0 = 0
  
  axiom empty_Id_spec'2: view_FMap_Id_PermCellOwn_Inner_T empty_Id'0 = Const.const (None'0)
  
  predicate is_empty_Id (self: t_FMap_Id_PermCellOwn_Inner_T) = ext_eq_Id self empty_Id'0
  
  let rec new_Id'0 (return (x: t_FMap_Id_PermCellOwn_Inner_T)) = any
    [ return (result: t_FMap_Id_PermCellOwn_Inner_T) -> {inv_Ghost_FMap_Id_PermCellOwn_Inner_T result}
      {is_empty_Id result}
      (! return {result}) ]
  
  predicate invariant_ref_Ghost_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    inv_Ghost_FMap_Id_PermCellOwn_Inner_T self.current /\ inv_Ghost_FMap_Id_PermCellOwn_Inner_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_ref_Ghost_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    invariant_ref_Ghost_FMap_Id_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    inv_FMap_Id_PermCellOwn_Inner_T self.current /\ inv_FMap_Id_PermCellOwn_Inner_T self.final
  
  meta "rewrite_def" predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    invariant_ref_FMap_Id_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_FMap_Id_PermCellOwn_Inner_T
  
  let rec deref_mut_Ghost_FMap_Id_PermCellOwn_Inner_T (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T)
    (return (x: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T)) =
    {[@expl:deref_mut 'self' type invariant] inv_ref_Ghost_FMap_Id_PermCellOwn_Inner_T self}
    any
    [ return (result: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) -> {inv_ref_FMap_Id_PermCellOwn_Inner_T result}
      {result = self}
      (! return {result}) ]
  
  predicate invariant_ref_Ghost_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_Ghost_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_PermCellOwn_Inner_T
  
  predicate inv_ref_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_ref_Ghost_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_PermCellOwn_Inner_T
  
  predicate invariant_ref_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_Inner_T
  
  predicate inv_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_ref_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_Inner_T
  
  let rec deref_Ghost_PermCellOwn_Inner_T (self: t_PermCellOwn_Inner_T) (return (x: t_PermCellOwn_Inner_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_PermCellOwn_Inner_T self}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_ref_PermCellOwn_Inner_T result}
      {result = self}
      (! return {result}) ]
  
  let rec id_ghost_Inner_T (self: t_PermCellOwn_Inner_T) (return (x: t_Id)) =
    {[@expl:id_ghost 'self' type invariant] inv_ref_PermCellOwn_Inner_T self}
    any [ return (result: t_Id) -> {result = id_Inner_T'0 self} (! return {result}) ]
  
  let rec deref_Ghost_Id (self: t_Id) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = self} (! return {result}) ]
  
  let rec into_inner_PermCellOwn_Inner_T (self: t_PermCellOwn_Inner_T) (return (x: t_PermCellOwn_Inner_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_PermCellOwn_Inner_T self}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_PermCellOwn_Inner_T result} {result = self} (! return {result}) ]
  
  predicate inv_Option_PermCellOwn_Inner_T (_1: t_Option_PermCellOwn_Inner_T)
  
  axiom inv_axiom'5 [@rewrite]:
    forall x: t_Option_PermCellOwn_Inner_T [inv_Option_PermCellOwn_Inner_T x]. inv_Option_PermCellOwn_Inner_T x
      = match x with
        | None'0 -> true
        | Some'0 f0'1 -> inv_PermCellOwn_Inner_T f0'1
        end
  
  function insert_Id'1 (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) (v: t_PermCellOwn_Inner_T) : t_FMap_Id_PermCellOwn_Inner_T
  
  axiom insert_Id_spec'1:
    forall self: t_FMap_Id_PermCellOwn_Inner_T, k: t_Id, v: t_PermCellOwn_Inner_T. view_FMap_Id_PermCellOwn_Inner_T (insert_Id'1 self k v)
      = Map.set (view_FMap_Id_PermCellOwn_Inner_T self) k (Some'0 v)
  
  axiom insert_Id_spec'2:
    forall self: t_FMap_Id_PermCellOwn_Inner_T, k: t_Id, v: t_PermCellOwn_Inner_T. len_Id'0 (insert_Id'1 self k v)
      = (if contains_Id'0 self k then len_Id'0 self else len_Id'0 self + 1)
  
  let rec insert_ghost_Id (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) (value: t_PermCellOwn_Inner_T)
    (return (x: t_Option_PermCellOwn_Inner_T)) =
    {[@expl:insert_ghost 'self' type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T self}
    {[@expl:insert_ghost 'value' type invariant] inv_PermCellOwn_Inner_T value}
    any
    [ return (result: t_Option_PermCellOwn_Inner_T) -> {inv_Option_PermCellOwn_Inner_T result}
      {self.final = insert_Id'1 self.current key value}
      {result = get_Id'0 self.current key}
      (! return {result}) ]
  
  predicate resolve_ref_Inner_T [@inline:trivial] (_1: t_Inner_T) = true
  
  meta "rewrite_def" predicate resolve_ref_Inner_T
  
  predicate resolve_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    resolve_ref_Inner_T (val_Inner_T self)
  
  meta "rewrite_def" predicate resolve_PermCellOwn_Inner_T
  
  predicate resolve_PermCellOwn_Inner_T'0 (_1: t_PermCellOwn_Inner_T)
  
  axiom resolve_axiom:
    forall x: t_PermCellOwn_Inner_T [resolve_PermCellOwn_Inner_T'0 x]. resolve_PermCellOwn_Inner_T'0 x
      -> resolve_PermCellOwn_Inner_T x
  
  predicate resolve_Option_PermCellOwn_Inner_T (_1: t_Option_PermCellOwn_Inner_T)
  
  axiom resolve_axiom'0 [@rewrite]:
    forall x: t_Option_PermCellOwn_Inner_T [resolve_Option_PermCellOwn_Inner_T x]. resolve_Option_PermCellOwn_Inner_T x
      = match x with
        | None'0 -> true
        | Some'0 x0 -> resolve_PermCellOwn_Inner_T'0 x0
        end
  
  predicate resolve_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_FMap_Id_PermCellOwn_Inner_T
  
  let rec into_inner_FMap_Id_PermCellOwn_Inner_T (self: t_FMap_Id_PermCellOwn_Inner_T)
    (return (x: t_FMap_Id_PermCellOwn_Inner_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_FMap_Id_PermCellOwn_Inner_T self}
    any
    [ return (result: t_FMap_Id_PermCellOwn_Inner_T) -> {inv_FMap_Id_PermCellOwn_Inner_T result}
      {result = self}
      (! return {result}) ]
  
  let rec into_inner_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T) (return (x: t_Authority_Id_Seq_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_Authority_Id_Seq_T self}
    any [ return (result: t_Authority_Id_Seq_T) -> {inv_Authority_Id_Seq_T result} {result = self} (! return {result}) ]
  
  type t_PA_T = { perms: t_FMap_Id_PermCellOwn_Inner_T; auth: t_Authority_Id_Seq_T; depth: Map.map t_Id int }
  
  predicate inv_PA_T (_1: t_PA_T)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_PA_T [inv_PA_T x]. inv_PA_T x
      = (inv_FMap_Id_PermCellOwn_Inner_T x.perms /\ inv_Authority_Id_Seq_T x.auth)
  
  predicate invariant_Ghost_PA_T [@inline:trivial] (self: t_PA_T) = inv_PA_T self
  
  meta "rewrite_def" predicate invariant_Ghost_PA_T
  
  predicate inv_Ghost_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_Ghost_PA_T _1
  
  meta "rewrite_def" predicate inv_Ghost_PA_T
  
  let rec new_PA_T (x: t_PA_T) (return (x'0: t_PA_T)) = {[@expl:new 'x' type invariant] inv_PA_T x}
    any [ return (result: t_PA_T) -> {inv_Ghost_PA_T result} {result = x} (! return {result}) ]
  
  type t_LocalInvariant_PA_T
  
  predicate index_Mapping_Seq_T_bool [@inline:trivial] (self: Map.map (Seq.seq t_T) bool) (a: Seq.seq t_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_Seq_T_bool
  
  function such_that_Seq_T (p: Map.map (Seq.seq t_T) bool) : Seq.seq t_T
  
  axiom such_that_Seq_T_spec:
    forall p: Map.map (Seq.seq t_T) bool. (exists x: Seq.seq t_T. index_Mapping_Seq_T_bool p x)
      -> index_Mapping_Seq_T_bool p (such_that_Seq_T p)
  
  function unwrap_Option_Seq_T (self: t_Option_Seq_T) : Seq.seq t_T = match self with
      | Some x -> x
      | None -> such_that_Seq_T (fun (__0: Seq.seq t_T) -> true)
      end
  
  function lookup_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : Seq.seq t_T =
    unwrap_Option_Seq_T (get_Id self k)
  
  meta "rewrite_def" function lookup_Id'0
  
  function index_FMap_Id_Seq_T [@inline:trivial] (self: t_FMap_Id_Seq_T) (key: t_Id) : Seq.seq t_T =
    lookup_Id'0 self key
  
  meta "rewrite_def" function index_FMap_Id_Seq_T
  
  function view_Rc_PermCell_Inner_T_Global (self: t_Rc_PermCell_Inner_T_Global) : t_PermCell_Inner_T
  
  function index_Mapping_Id_Int [@inline:trivial] (self: Map.map t_Id int) (a: t_Id) : int = Map.get self a
  
  meta "rewrite_def" function index_Mapping_Id_Int
  
  predicate partial_invariant_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    id_Id self.auth = resource_id
    /\ (forall id: t_Id. contains_Id (view_Authority_Id_Seq_T self.auth) id /\ contains_Id'0 self.perms id
      -> id_Inner_T'0 (index_FMap_Id_PermCellOwn_Inner_T self.perms id) = id
      /\ match val_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self.perms id) with
        | Direct v -> index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id = view_Vec_T_Global v
        | Link index value next -> contains_Id (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))
        /\ index_Mapping_Id_Int self.depth id
          > index_Mapping_Id_Int self.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))
        /\ UInt64.t'int index
          < Seq.length (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next)))
        /\ index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id
        = Seq.set (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))) (UInt64.t'int index) value
        end)
  
  meta "rewrite_def" predicate partial_invariant_T
  
  predicate protocol_PA_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    partial_invariant_T self resource_id
    /\ (forall id: t_Id. contains_Id (view_Authority_Id_Seq_T self.auth) id -> contains_Id'0 self.perms id)
  
  meta "rewrite_def" predicate protocol_PA_T
  
  function public_PA_T (self: t_LocalInvariant_PA_T) : t_Id
  
  function namespace_PA_T (self: t_LocalInvariant_PA_T) : t_Namespace
  
  let rec new_PA_T'0 (value: t_PA_T) (public: t_Id) (namespace: t_Namespace) (return (x: t_LocalInvariant_PA_T)) =
    {[@expl:new 'value' type invariant] inv_Ghost_PA_T value}
    {[@expl:new requires] protocol_PA_T value public}
    any
    [ return (result: t_LocalInvariant_PA_T) -> {public_PA_T result = public}
      {namespace_PA_T result = namespace}
      (! return {result}) ]
  
  let rec into_inner_LocalInvariant_PA_T (self: t_LocalInvariant_PA_T) (return (x: t_LocalInvariant_PA_T)) = any
    [ return (result: t_LocalInvariant_PA_T) -> {result = self} (! return {result}) ]
  
  type t_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Rc_LocalInvariant_PA_T_Global (_1: t_Rc_LocalInvariant_PA_T_Global)
  
  function view_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) : t_LocalInvariant_PA_T
  
  let rec new_LocalInvariant_PA_T (value: t_LocalInvariant_PA_T) (return (x: t_Rc_LocalInvariant_PA_T_Global)) = any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_Rc_LocalInvariant_PA_T_Global result}
      {view_Rc_LocalInvariant_PA_T_Global result = value}
      (! return {result}) ]
  
  predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global
  
  let rec new_Rc_LocalInvariant_PA_T_Global (x: t_Rc_LocalInvariant_PA_T_Global)
    (return (x'0: t_Rc_LocalInvariant_PA_T_Global)) =
    {[@expl:new 'x' type invariant] inv_Rc_LocalInvariant_PA_T_Global x}
    any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_Ghost_Rc_LocalInvariant_PA_T_Global result}
      {result = x}
      (! return {result}) ]
  
  let rec new_PermCell_Inner_T (value: t_PermCell_Inner_T) (return (x: t_Rc_PermCell_Inner_T_Global)) = any
    [ return (result: t_Rc_PermCell_Inner_T_Global) -> {inv_Rc_PermCell_Inner_T_Global result}
      {view_Rc_PermCell_Inner_T_Global result = value}
      (! return {result}) ]
  
  type t_PersistentArray_T = {
    permcell: t_Rc_PermCell_Inner_T_Global;
    frag: t_Fragment_Id_Seq_T;
    inv: t_Rc_LocalInvariant_PA_T_Global }
  
  predicate invariant_PersistentArray_T (self: t_PersistentArray_T) =
    (view_Fragment_Id_Seq_T self.frag).f0'0 = id_Inner_T (view_Rc_PermCell_Inner_T_Global self.permcell)
    /\ id_Id'0 self.frag = public_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv)
    /\ namespace_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv) = Namespace_PARRAY 0
  
  predicate inv_PersistentArray_T (_1: t_PersistentArray_T)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_PersistentArray_T [inv_PersistentArray_T x]. inv_PersistentArray_T x
      = (invariant_PersistentArray_T x
      /\ inv_Rc_PermCell_Inner_T_Global x.permcell
      /\ inv_Ghost_Fragment_Id_Seq_T x.frag /\ inv_Ghost_Rc_LocalInvariant_PA_T_Global x.inv)
  
  function view_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) : Seq.seq t_T =
    (view_Fragment_Id_Seq_T self.frag).f1'0
  
  meta "rewrite_def" function view_PersistentArray_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new_T (v: t_Vec_T_Global) (return (x: t_PersistentArray_T)) =
    {[@expl:new 'v' type invariant] inv_Vec_T_Global v}
    (! bb0
    [ bb0 = s0 [ s0 = [ &seq <- view_Vec_T_Global v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_8 <- Direct v ] s1 | s1 = bb2 ]
    | bb2 = s0
      [ s0 = new_Inner_T {_8} (fun (_ret: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T) -> [ &_7 <- _ret ] s1)
      | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &permcell'0 <- _7.f0 ] s1 | s1 = [ &permcellown <- _7.f1 ] s2 | s2 = bb4 ]
    | bb4 = s0 [ s0 = new_Id (fun (_ret: t_Authority_Id_Seq_T) -> [ &auth'0 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = {inv_Ghost_Authority_Id_Seq_T auth'0}
        MutBorrow.borrow_mut <t_Authority_Id_Seq_T> {auth'0}
          (fun (_ret: MutBorrow.t t_Authority_Id_Seq_T) ->
            [ &_15 <- _ret ] -{inv_Ghost_Authority_Id_Seq_T _ret.final}-
            [ &auth'0 <- _ret.final ] s1)
      | s1 = deref_mut_Ghost_Authority_Id_Seq_T {_15}
          (fun (_ret: MutBorrow.t t_Authority_Id_Seq_T) -> [ &_14 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0 [ s0 = [ &_16 <- id_Inner_T'0 permcellown ] s1 | s1 = bb7 ]
    | bb7 = s0
      [ s0 = {inv_Authority_Id_Seq_T _14.current}
        MutBorrow.borrow_final <t_Authority_Id_Seq_T> {_14.current} {MutBorrow.get_id _14}
          (fun (_ret: MutBorrow.t t_Authority_Id_Seq_T) ->
            [ &_13 <- _ret ] -{inv_Authority_Id_Seq_T _ret.final}-
            [ &_14 <- { _14 with current = _ret.final } ] s1)
      | s1 = insert_Id'0 {_13} {_16} {seq} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_12 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Authority_Id_Seq_T _14} s1
      | s1 = -{resolve_ref_Authority_Id_Seq_T _14}- s2
      | s2 = new_Fragment_Id_Seq_T {_12} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &frag'0 <- _ret ] s3)
      | s3 = bb9 ]
    | bb9 = s0 [ s0 = new_Id'0 (fun (_ret: t_FMap_Id_PermCellOwn_Inner_T) -> [ &perms'0 <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0
      [ s0 = {inv_Ghost_FMap_Id_PermCellOwn_Inner_T perms'0}
        MutBorrow.borrow_mut <t_FMap_Id_PermCellOwn_Inner_T> {perms'0}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) ->
            [ &_25 <- _ret ] -{inv_Ghost_FMap_Id_PermCellOwn_Inner_T _ret.final}-
            [ &perms'0 <- _ret.final ] s1)
      | s1 = deref_mut_Ghost_FMap_Id_PermCellOwn_Inner_T {_25}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) -> [ &_24 <- _ret ] s2)
      | s2 = bb11 ]
    | bb11 = s0
      [ s0 = deref_Ghost_PermCellOwn_Inner_T {permcellown} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_31 <- _ret ] s1)
      | s1 = bb12 ]
    | bb12 = s0 [ s0 = id_ghost_Inner_T {_31} (fun (_ret: t_Id) -> [ &_29 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0 [ s0 = deref_Ghost_Id {_29} (fun (_ret: t_Id) -> [ &_27 <- _ret ] s1) | s1 = bb14 ]
    | bb14 = s0
      [ s0 = into_inner_PermCellOwn_Inner_T {permcellown} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_33 <- _ret ] s1)
      | s1 = bb15 ]
    | bb15 = s0
      [ s0 = {inv_FMap_Id_PermCellOwn_Inner_T _24.current}
        MutBorrow.borrow_final <t_FMap_Id_PermCellOwn_Inner_T> {_24.current} {MutBorrow.get_id _24}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) ->
            [ &_23 <- _ret ] -{inv_FMap_Id_PermCellOwn_Inner_T _ret.final}-
            [ &_24 <- { _24 with current = _ret.final } ] s1)
      | s1 = insert_ghost_Id {_23} {_27} {_33} (fun (_ret: t_Option_PermCellOwn_Inner_T) -> [ &_22 <- _ret ] s2)
      | s2 = {[@expl:type invariant] inv_Option_PermCellOwn_Inner_T _22} s3
      | s3 = -{resolve_Option_PermCellOwn_Inner_T _22}- s4
      | s4 = bb16 ]
    | bb16 = s0
      [ s0 = {[@expl:type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T _24} s1
      | s1 = -{resolve_ref_FMap_Id_PermCellOwn_Inner_T _24}- s2
      | s2 = into_inner_FMap_Id_PermCellOwn_Inner_T {perms'0}
          (fun (_ret: t_FMap_Id_PermCellOwn_Inner_T) -> [ &_38 <- _ret ] s3)
      | s3 = bb17 ]
    | bb17 = s0
      [ s0 = into_inner_Authority_Id_Seq_T {auth'0} (fun (_ret: t_Authority_Id_Seq_T) -> [ &_40 <- _ret ] s1)
      | s1 = bb18 ]
    | bb18 = s0 [ s0 = [ &_42 <- fun (__0: t_Id) -> 0 ] s1 | s1 = bb19 ]
    | bb19 = s0
      [ s0 = [ &_37 <- { perms = _38; auth = _40; depth = _42 } ] s1
      | s1 = new_PA_T {_37} (fun (_ret: t_PA_T) -> [ &_36 <- _ret ] s2)
      | s2 = bb20 ]
    | bb20 = s0 [ s0 = [ &_44 <- id_Id'0 frag'0 ] s1 | s1 = bb21 ]
    | bb21 = s0 [ s0 = [ &_46 <- Namespace_PARRAY 0 ] s1 | s1 = bb22 ]
    | bb22 = s0
      [ s0 = new_PA_T'0 {_36} {_44} {_46} (fun (_ret: t_LocalInvariant_PA_T) -> [ &local_inv <- _ret ] s1) | s1 = bb23 ]
    | bb23 = s0
      [ s0 = into_inner_LocalInvariant_PA_T {local_inv} (fun (_ret: t_LocalInvariant_PA_T) -> [ &_48 <- _ret ] s1)
      | s1 = bb24 ]
    | bb24 = s0
      [ s0 = new_LocalInvariant_PA_T {_48} (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &_20 <- _ret ] s1)
      | s1 = bb25 ]
    | bb25 = s0
      [ s0 = new_Rc_LocalInvariant_PA_T_Global {_20}
          (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &inv'0 <- _ret ] s1)
      | s1 = bb26 ]
    | bb26 = s0
      [ s0 = new_PermCell_Inner_T {permcell'0} (fun (_ret: t_Rc_PermCell_Inner_T_Global) -> [ &_50 <- _ret ] s1)
      | s1 = bb27 ]
    | bb27 = s0 [ s0 = [ &_0 <- { permcell = _50; frag = frag'0; inv = inv'0 } ] s1 | s1 = bb30 ]
    | bb30 = return {_0} ]
    [ & _0: t_PersistentArray_T = Any.any_l ()
    | & v: t_Vec_T_Global = v
    | & seq: Seq.seq t_T = Any.any_l ()
    | & permcell'0: t_PermCell_Inner_T = Any.any_l ()
    | & permcellown: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _7: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T = Any.any_l ()
    | & _8: t_Inner_T = Any.any_l ()
    | & auth'0: t_Authority_Id_Seq_T = Any.any_l ()
    | & frag'0: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _12: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _13: MutBorrow.t t_Authority_Id_Seq_T = Any.any_l ()
    | & _14: MutBorrow.t t_Authority_Id_Seq_T = Any.any_l ()
    | & _15: MutBorrow.t t_Authority_Id_Seq_T = Any.any_l ()
    | & _16: t_Id = Any.any_l ()
    | & inv'0: t_Rc_LocalInvariant_PA_T_Global = Any.any_l ()
    | & _20: t_Rc_LocalInvariant_PA_T_Global = Any.any_l ()
    | & perms'0: t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _22: t_Option_PermCellOwn_Inner_T = Any.any_l ()
    | & _23: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _24: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _25: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _27: t_Id = Any.any_l ()
    | & _29: t_Id = Any.any_l ()
    | & _31: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _33: t_PermCellOwn_Inner_T = Any.any_l ()
    | & local_inv: t_LocalInvariant_PA_T = Any.any_l ()
    | & _36: t_PA_T = Any.any_l ()
    | & _37: t_PA_T = Any.any_l ()
    | & _38: t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _40: t_Authority_Id_Seq_T = Any.any_l ()
    | & _42: Map.map t_Id int = Any.any_l ()
    | & _44: t_Id = Any.any_l ()
    | & _46: t_Namespace = Any.any_l ()
    | & _48: t_LocalInvariant_PA_T = Any.any_l ()
    | & _50: t_Rc_PermCell_Inner_T_Global = Any.any_l () ])
    [ return (result: t_PersistentArray_T) -> {[@expl:new result type invariant] inv_PersistentArray_T result}
      {[@expl:new ensures] view_PersistentArray_T result = view_Vec_T_Global v}
      (! return {result}) ]
end
module M_implementation__impl_PersistentArray_T__set (* implementation::PersistentArray<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use map.Map
  use creusot.prelude.Any
  use set.Set
  
  type t_Rc_PermCell_Inner_T_Global
  
  type t_Fragment_Id_Seq_T
  
  type t_Rc_LocalInvariant_PA_T_Global
  
  type t_PersistentArray_T = {
    permcell: t_Rc_PermCell_Inner_T_Global;
    frag: t_Fragment_Id_Seq_T;
    inv: t_Rc_LocalInvariant_PA_T_Global }
  
  type t_T
  
  type t_Id
  
  type tup2_Id_Seq_T = { f0: t_Id; f1: Seq.seq t_T }
  
  function view_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) : tup2_Id_Seq_T
  
  function view_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) : Seq.seq t_T =
    (view_Fragment_Id_Seq_T self.frag).f1
  
  meta "rewrite_def" function view_PersistentArray_T
  
  predicate inv_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate invariant_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (self: t_Rc_PermCell_Inner_T_Global) =
    inv_Rc_PermCell_Inner_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_PermCell_Inner_T_Global
  
  predicate inv_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (_1: t_Rc_PermCell_Inner_T_Global) =
    invariant_ref_Rc_PermCell_Inner_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_PermCell_Inner_T_Global
  
  let rec clone_Rc_PermCell_Inner_T_Global (self_: t_Rc_PermCell_Inner_T_Global)
    (return (x: t_Rc_PermCell_Inner_T_Global)) =
    {[@expl:clone 'self_' type invariant] inv_ref_Rc_PermCell_Inner_T_Global self_}
    any
    [ return (result: t_Rc_PermCell_Inner_T_Global) -> {inv_Rc_PermCell_Inner_T_Global result}
      {result = self_}
      (! return {result}) ]
  
  type t_Vec_T_Global
  
  type t_Inner_T = Direct t_Vec_T_Global | Link UInt64.t t_T t_Rc_PermCell_Inner_T_Global
  
  type t_PermCell_Inner_T
  
  type t_PermCellOwn_Inner_T
  
  type tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T = { f0'0: t_PermCell_Inner_T; f1'0: t_PermCellOwn_Inner_T }
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate inv_Inner_T (_1: t_Inner_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Inner_T [inv_Inner_T x]. inv_Inner_T x
      = match x with
        | Direct f0'1 -> inv_Vec_T_Global f0'1
        | Link index value next -> inv_T value /\ inv_Rc_PermCell_Inner_T_Global next
        end
  
  predicate invariant_ref_Inner_T [@inline:trivial] (self: t_Inner_T) = inv_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_Inner_T
  
  predicate inv_ref_Inner_T [@inline:trivial] (_1: t_Inner_T) = invariant_ref_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Inner_T
  
  function val_Inner_T (self: t_PermCellOwn_Inner_T) : t_Inner_T
  
  predicate invariant_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_ref_Inner_T (val_Inner_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_Inner_T
  
  predicate inv_PermCellOwn_Inner_T (_1: t_PermCellOwn_Inner_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellOwn_Inner_T [inv_PermCellOwn_Inner_T x]. inv_PermCellOwn_Inner_T x
      = invariant_PermCellOwn_Inner_T x
  
  predicate invariant_Ghost_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_Ghost_PermCellOwn_Inner_T
  
  predicate inv_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_Ghost_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_Ghost_PermCellOwn_Inner_T
  
  predicate inv_tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T) =
    inv_Ghost_PermCellOwn_Inner_T _1.f1'0
  
  meta "rewrite_def" predicate inv_tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T
  
  function id_Inner_T (self: t_PermCell_Inner_T) : t_Id
  
  function id_Inner_T'0 (self: t_PermCellOwn_Inner_T) : t_Id
  
  function view_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) : t_Inner_T = val_Inner_T self
  
  meta "rewrite_def" function view_PermCellOwn_Inner_T
  
  let rec new_Inner_T (value: t_Inner_T) (return (x: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T)) =
    {[@expl:new 'value' type invariant] inv_Inner_T value}
    any
    [ return (result: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T) ->
    {inv_tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T result}
      {id_Inner_T result.f0'0 = id_Inner_T'0 result.f1'0}
      {view_PermCellOwn_Inner_T result.f1'0 = value}
      (! return {result}) ]
  
  type t_FMap_Id_PermCellOwn_Inner_T
  
  type t_Authority_Id_Seq_T
  
  type t_PA_T = { perms: t_FMap_Id_PermCellOwn_Inner_T; auth: t_Authority_Id_Seq_T; depth: Map.map t_Id int }
  
  type t_Option_PermCellOwn_Inner_T = None | Some t_PermCellOwn_Inner_T
  
  function view_FMap_Id_PermCellOwn_Inner_T (self: t_FMap_Id_PermCellOwn_Inner_T) : Map.map t_Id t_Option_PermCellOwn_Inner_T
  
  function get_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_Option_PermCellOwn_Inner_T =
    Map.get (view_FMap_Id_PermCellOwn_Inner_T self) k
  
  meta "rewrite_def" function get_Id
  
  predicate contains_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) = get_Id self k <> None
  
  meta "rewrite_def" predicate contains_Id
  
  predicate inv_Id [@inline:trivial] (_1: t_Id) = true
  
  meta "rewrite_def" predicate inv_Id
  
  predicate index_Mapping_PermCellOwn_Inner_T_bool [@inline:trivial] (self: Map.map t_PermCellOwn_Inner_T bool) (a: t_PermCellOwn_Inner_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_PermCellOwn_Inner_T_bool
  
  function such_that_PermCellOwn_Inner_T (p: Map.map t_PermCellOwn_Inner_T bool) : t_PermCellOwn_Inner_T
  
  axiom such_that_PermCellOwn_Inner_T_spec:
    forall p: Map.map t_PermCellOwn_Inner_T bool. (exists x: t_PermCellOwn_Inner_T. index_Mapping_PermCellOwn_Inner_T_bool p x)
      -> index_Mapping_PermCellOwn_Inner_T_bool p (such_that_PermCellOwn_Inner_T p)
  
  function unwrap_Option_PermCellOwn_Inner_T (self: t_Option_PermCellOwn_Inner_T) : t_PermCellOwn_Inner_T =
    match self with
      | Some x -> x
      | None -> such_that_PermCellOwn_Inner_T (fun (__0: t_PermCellOwn_Inner_T) -> true)
      end
  
  function lookup_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_PermCellOwn_Inner_T =
    unwrap_Option_PermCellOwn_Inner_T (get_Id self k)
  
  meta "rewrite_def" function lookup_Id
  
  function index_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) : t_PermCellOwn_Inner_T
   = lookup_Id self key
  
  meta "rewrite_def" function index_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    forall k: t_Id. contains_Id self k -> inv_Id k /\ inv_PermCellOwn_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self k)
  
  meta "rewrite_def" predicate invariant_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_FMap_Id_PermCellOwn_Inner_T (_1: t_FMap_Id_PermCellOwn_Inner_T)
  
  axiom inv_axiom'2 [@rewrite]:
    forall x: t_FMap_Id_PermCellOwn_Inner_T [inv_FMap_Id_PermCellOwn_Inner_T x]. inv_FMap_Id_PermCellOwn_Inner_T x
      = invariant_FMap_Id_PermCellOwn_Inner_T x
  
  predicate invariant_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T)
  
  predicate inv_Authority_Id_Seq_T (_1: t_Authority_Id_Seq_T)
  
  axiom inv_axiom'3: forall x: t_Authority_Id_Seq_T [inv_Authority_Id_Seq_T x]. inv_Authority_Id_Seq_T x
      -> invariant_Authority_Id_Seq_T x
  
  predicate inv_PA_T (_1: t_PA_T)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_PA_T [inv_PA_T x]. inv_PA_T x
      = (inv_FMap_Id_PermCellOwn_Inner_T x.perms /\ inv_Authority_Id_Seq_T x.auth)
  
  predicate invariant_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) =
    inv_PA_T self.current /\ inv_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PA_T
  
  predicate inv_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_PA_T
  
  predicate invariant_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PA_T
  
  predicate inv_Ghost_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PA_T
  
  predicate invariant_ref_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) = inv_Ghost_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_ref_PA_T
  
  predicate inv_ref_Ghost_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_ref_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_ref_PA_T
  
  predicate invariant_ref_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_ref_PA_T
  
  predicate inv_ref_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_ref_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_ref_PA_T
  
  let rec deref_Ghost_ref_PA_T (self: MutBorrow.t t_PA_T) (return (x: MutBorrow.t t_PA_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_ref_PA_T self}
    any [ return (result: MutBorrow.t t_PA_T) -> {inv_ref_ref_PA_T result} {result = self} (! return {result}) ]
  
  type closure0 = { c0: t_PersistentArray_T; c1: t_PermCell_Inner_T; c2: t_PermCellOwn_Inner_T; c3: Seq.seq t_T }
  
  predicate invariant_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T)
  
  predicate inv_Fragment_Id_Seq_T (_1: t_Fragment_Id_Seq_T)
  
  axiom inv_axiom'5: forall x: t_Fragment_Id_Seq_T [inv_Fragment_Id_Seq_T x]. inv_Fragment_Id_Seq_T x
      -> invariant_Fragment_Id_Seq_T x
  
  predicate invariant_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Fragment_Id_Seq_T
  
  predicate inv_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Fragment_Id_Seq_T
  
  predicate invariant_ref_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) =
    inv_Ghost_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Fragment_Id_Seq_T
  
  predicate inv_ref_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_ref_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Fragment_Id_Seq_T
  
  predicate invariant_ref_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Fragment_Id_Seq_T
  
  predicate inv_ref_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) = invariant_ref_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Fragment_Id_Seq_T
  
  let rec deref_Ghost_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) (return (x: t_Fragment_Id_Seq_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_Fragment_Id_Seq_T self}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_ref_Fragment_Id_Seq_T result} {result = self} (! return {result}) ]
  
  predicate invariant_ref_Authority_Id_Seq_T [@inline:trivial] (self: t_Authority_Id_Seq_T) =
    inv_Authority_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Authority_Id_Seq_T
  
  predicate inv_ref_Authority_Id_Seq_T [@inline:trivial] (_1: t_Authority_Id_Seq_T) =
    invariant_ref_Authority_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Authority_Id_Seq_T
  
  function id_Id (self: t_Authority_Id_Seq_T) : t_Id
  
  function id_Id'0 (self: t_Fragment_Id_Seq_T) : t_Id
  
  type t_FMap_Id_Seq_T
  
  type t_Option_Seq_T = None'0 | Some'0 (Seq.seq t_T)
  
  function view_FMap_Id_Seq_T (self: t_FMap_Id_Seq_T) : Map.map t_Id t_Option_Seq_T
  
  function get_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : t_Option_Seq_T =
    Map.get (view_FMap_Id_Seq_T self) k
  
  meta "rewrite_def" function get_Id'0
  
  function view_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T) : t_FMap_Id_Seq_T
  
  let rec contains_Id'0 (self: t_Authority_Id_Seq_T) (frag'0: t_Fragment_Id_Seq_T) (return (x: ())) =
    {[@expl:contains 'self' type invariant] inv_ref_Authority_Id_Seq_T self}
    {[@expl:contains 'frag' type invariant] inv_ref_Fragment_Id_Seq_T frag'0}
    {[@expl:contains requires] id_Id self = id_Id'0 frag'0}
    any
    [ return (result: ()) -> {get_Id'0 (view_Authority_Id_Seq_T self) (view_Fragment_Id_Seq_T frag'0).f0
      = Some'0 ((view_Fragment_Id_Seq_T frag'0).f1)}
      (! return {result}) ]
  
  let rec id_ghost_Inner_T (self: t_PermCell_Inner_T) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = id_Inner_T self} (! return {result}) ]
  
  let rec into_inner_Id (self: t_Id) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = self} (! return {result}) ]
  
  predicate invariant_ref_Ghost_ref_PA_T'0 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t t_PA_T)) =
    inv_Ghost_ref_PA_T self.current /\ inv_Ghost_ref_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_ref_PA_T'0
  
  predicate inv_ref_Ghost_ref_PA_T'0 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) =
    invariant_ref_Ghost_ref_PA_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_ref_PA_T'0
  
  predicate invariant_ref_ref_PA_T'0 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t t_PA_T)) =
    inv_ref_PA_T self.current /\ inv_ref_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_ref_PA_T'0
  
  predicate inv_ref_ref_PA_T'0 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) = invariant_ref_ref_PA_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_ref_PA_T'0
  
  let rec deref_mut_Ghost_ref_PA_T (self: MutBorrow.t (MutBorrow.t t_PA_T))
    (return (x: MutBorrow.t (MutBorrow.t t_PA_T))) =
    {[@expl:deref_mut 'self' type invariant] inv_ref_Ghost_ref_PA_T'0 self}
    any
    [ return (result: MutBorrow.t (MutBorrow.t t_PA_T)) -> {inv_ref_ref_PA_T'0 result}
      {result = self}
      (! return {result}) ]
  
  type t_Option_ref_PermCellOwn_Inner_T = None'1 | Some'1 (MutBorrow.t t_PermCellOwn_Inner_T)
  
  predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    inv_FMap_Id_PermCellOwn_Inner_T self.current /\ inv_FMap_Id_PermCellOwn_Inner_T self.final
  
  meta "rewrite_def" predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    invariant_ref_FMap_Id_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_ref_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self.current /\ inv_PermCellOwn_Inner_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_Inner_T
  
  predicate inv_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_Inner_T) =
    invariant_ref_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_Inner_T
  
  predicate inv_Option_ref_PermCellOwn_Inner_T (_1: t_Option_ref_PermCellOwn_Inner_T)
  
  axiom inv_axiom'6 [@rewrite]:
    forall x: t_Option_ref_PermCellOwn_Inner_T [inv_Option_ref_PermCellOwn_Inner_T x]. inv_Option_ref_PermCellOwn_Inner_T x
      = match x with
        | None'1 -> true
        | Some'1 f0'1 -> inv_ref_PermCellOwn_Inner_T f0'1
        end
  
  function len_Id (self: t_FMap_Id_PermCellOwn_Inner_T) : int
  
  axiom len_Id_spec: forall self: t_FMap_Id_PermCellOwn_Inner_T. len_Id self >= 0
  
  let rec get_mut_ghost_Id (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id)
    (return (x: t_Option_ref_PermCellOwn_Inner_T)) =
    {[@expl:get_mut_ghost 'self' type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T self}
    any
    [ return (result: t_Option_ref_PermCellOwn_Inner_T) -> {inv_Option_ref_PermCellOwn_Inner_T result}
      {if contains_Id self.current key then
        match result with
          | None'1 -> false
          | Some'1 r -> contains_Id self.final key
          /\ index_FMap_Id_PermCellOwn_Inner_T self.current key = r.current
          /\ index_FMap_Id_PermCellOwn_Inner_T self.final key = r.final
          end
      else
        result = None'1 /\ self.current = self.final
      }
      {forall k: t_Id. k <> key -> get_Id self.current k = get_Id self.final k}
      {len_Id self.current = len_Id self.final}
      (! return {result}) ]
  
  predicate resolve_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_Inner_T) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PermCellOwn_Inner_T
  
  predicate resolve_ref_ref_PA_T [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_ref_PA_T
  
  let rec elim_Some (input: t_Option_ref_PermCellOwn_Inner_T) (ret (f0'1: MutBorrow.t t_PermCellOwn_Inner_T)) = any
    [ good (f0'1: MutBorrow.t t_PermCellOwn_Inner_T) -> {Some'1 f0'1 = input} (! ret {f0'1})
    | bad ->
    {forall f0'1: MutBorrow.t t_PermCellOwn_Inner_T [Some'1 f0'1: t_Option_ref_PermCellOwn_Inner_T]. Some'1 f0'1
        <> input}
      (! {false}
      any) ]
  
  predicate invariant_ref_Ghost_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_Ghost_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_PermCellOwn_Inner_T
  
  predicate inv_ref_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_ref_Ghost_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_PermCellOwn_Inner_T
  
  predicate invariant_ref_PermCellOwn_Inner_T'0 [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_Inner_T'0
  
  predicate inv_ref_PermCellOwn_Inner_T'0 [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_ref_PermCellOwn_Inner_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_Inner_T'0
  
  let rec deref_Ghost_PermCellOwn_Inner_T (self: t_PermCellOwn_Inner_T) (return (x: t_PermCellOwn_Inner_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_PermCellOwn_Inner_T self}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_ref_PermCellOwn_Inner_T'0 result}
      {result = self}
      (! return {result}) ]
  
  let rec disjoint_lemma_Inner_T (own1: MutBorrow.t t_PermCellOwn_Inner_T) (own2: t_PermCellOwn_Inner_T)
    (return (x: ())) = {[@expl:disjoint_lemma 'own1' type invariant] inv_ref_PermCellOwn_Inner_T own1}
    {[@expl:disjoint_lemma 'own2' type invariant] inv_ref_PermCellOwn_Inner_T'0 own2}
    any
    [ return (result: ()) -> {id_Inner_T'0 own1.current <> id_Inner_T'0 own2}
      {own1.current = own1.final}
      (! return {result}) ]
  
  let rec into_inner_PermCellOwn_Inner_T (self: t_PermCellOwn_Inner_T) (return (x: t_PermCellOwn_Inner_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_PermCellOwn_Inner_T self}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_PermCellOwn_Inner_T result} {result = self} (! return {result}) ]
  
  predicate inv_Option_PermCellOwn_Inner_T (_1: t_Option_PermCellOwn_Inner_T)
  
  axiom inv_axiom'7 [@rewrite]:
    forall x: t_Option_PermCellOwn_Inner_T [inv_Option_PermCellOwn_Inner_T x]. inv_Option_PermCellOwn_Inner_T x
      = match x with
        | None -> true
        | Some f0'1 -> inv_PermCellOwn_Inner_T f0'1
        end
  
  function insert_Id (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) (v: t_PermCellOwn_Inner_T) : t_FMap_Id_PermCellOwn_Inner_T
  
  axiom insert_Id_spec:
    forall self: t_FMap_Id_PermCellOwn_Inner_T, k: t_Id, v: t_PermCellOwn_Inner_T. view_FMap_Id_PermCellOwn_Inner_T (insert_Id self k v)
      = Map.set (view_FMap_Id_PermCellOwn_Inner_T self) k (Some v)
  
  axiom insert_Id_spec'0:
    forall self: t_FMap_Id_PermCellOwn_Inner_T, k: t_Id, v: t_PermCellOwn_Inner_T. len_Id (insert_Id self k v)
      = (if contains_Id self k then len_Id self else len_Id self + 1)
  
  let rec insert_ghost_Id (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) (value: t_PermCellOwn_Inner_T)
    (return (x: t_Option_PermCellOwn_Inner_T)) =
    {[@expl:insert_ghost 'self' type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T self}
    {[@expl:insert_ghost 'value' type invariant] inv_PermCellOwn_Inner_T value}
    any
    [ return (result: t_Option_PermCellOwn_Inner_T) -> {inv_Option_PermCellOwn_Inner_T result}
      {self.final = insert_Id self.current key value}
      {result = get_Id self.current key}
      (! return {result}) ]
  
  predicate resolve_ref_Inner_T [@inline:trivial] (_1: t_Inner_T) = true
  
  meta "rewrite_def" predicate resolve_ref_Inner_T
  
  predicate resolve_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    resolve_ref_Inner_T (val_Inner_T self)
  
  meta "rewrite_def" predicate resolve_PermCellOwn_Inner_T
  
  predicate resolve_PermCellOwn_Inner_T'0 (_1: t_PermCellOwn_Inner_T)
  
  axiom resolve_axiom:
    forall x: t_PermCellOwn_Inner_T [resolve_PermCellOwn_Inner_T'0 x]. resolve_PermCellOwn_Inner_T'0 x
      -> resolve_PermCellOwn_Inner_T x
  
  predicate resolve_Option_PermCellOwn_Inner_T (_1: t_Option_PermCellOwn_Inner_T)
  
  axiom resolve_axiom'0 [@rewrite]:
    forall x: t_Option_PermCellOwn_Inner_T [resolve_Option_PermCellOwn_Inner_T x]. resolve_Option_PermCellOwn_Inner_T x
      = match x with
        | None -> true
        | Some x0 -> resolve_PermCellOwn_Inner_T'0 x0
        end
  
  function index_Mapping_Id_Int [@inline:trivial] (self: Map.map t_Id int) (a: t_Id) : int = Map.get self a
  
  meta "rewrite_def" function index_Mapping_Id_Int
  
  function view_Rc_PermCell_Inner_T_Global (self: t_Rc_PermCell_Inner_T_Global) : t_PermCell_Inner_T
  
  predicate invariant_ref_Authority_Id_Seq_T'0 [@inline:trivial] (self: MutBorrow.t t_Authority_Id_Seq_T) =
    inv_Authority_Id_Seq_T self.current /\ inv_Authority_Id_Seq_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Authority_Id_Seq_T'0
  
  predicate inv_ref_Authority_Id_Seq_T'0 [@inline:trivial] (_1: MutBorrow.t t_Authority_Id_Seq_T) =
    invariant_ref_Authority_Id_Seq_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_Authority_Id_Seq_T'0
  
  predicate contains_Id'1 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) = get_Id'0 self k <> None'0
  
  meta "rewrite_def" predicate contains_Id'1
  
  function len_Id'0 (self: t_FMap_Id_Seq_T) : int
  
  axiom len_Id_spec'0: forall self: t_FMap_Id_Seq_T. len_Id'0 self >= 0
  
  function insert_Id'0 (self: t_FMap_Id_Seq_T) (k: t_Id) (v: Seq.seq t_T) : t_FMap_Id_Seq_T
  
  axiom insert_Id_spec'1:
    forall self: t_FMap_Id_Seq_T, k: t_Id, v: Seq.seq t_T. view_FMap_Id_Seq_T (insert_Id'0 self k v)
      = Map.set (view_FMap_Id_Seq_T self) k (Some'0 v)
  
  axiom insert_Id_spec'2: forall self: t_FMap_Id_Seq_T, k: t_Id, v: Seq.seq t_T. len_Id'0 (insert_Id'0 self k v)
      = (if contains_Id'1 self k then len_Id'0 self else len_Id'0 self + 1)
  
  let rec insert_Id'1 (self: MutBorrow.t t_Authority_Id_Seq_T) (k: t_Id) (v: Seq.seq t_T)
    (return (x: t_Fragment_Id_Seq_T)) = {[@expl:insert 'self' type invariant] inv_ref_Authority_Id_Seq_T'0 self}
    {[@expl:insert requires] not contains_Id'1 (view_Authority_Id_Seq_T self.current) k}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Fragment_Id_Seq_T result}
      {view_Authority_Id_Seq_T self.final = insert_Id'0 (view_Authority_Id_Seq_T self.current) k v}
      {id_Id self.final = id_Id self.current}
      {view_Fragment_Id_Seq_T result = { f0 = k; f1 = v }}
      {id_Id'0 result = id_Id self.current}
      (! return {result}) ]
  
  predicate resolve_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PA_T
  
  predicate resolve_Ghost_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = resolve_ref_PA_T _1
  
  meta "rewrite_def" predicate resolve_Ghost_ref_PA_T
  
  let rec new_Fragment_Id_Seq_T (x: t_Fragment_Id_Seq_T) (return (x'0: t_Fragment_Id_Seq_T)) =
    {[@expl:new 'x' type invariant] inv_Fragment_Id_Seq_T x}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Ghost_Fragment_Id_Seq_T result} {result = x} (! return {result}) ]
  
  type t_LocalInvariant_PA_T
  
  function public_PA_T (self: t_LocalInvariant_PA_T) : t_Id
  
  function view_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) : t_LocalInvariant_PA_T
  
  function namespace_PA_T (self: t_LocalInvariant_PA_T) : t_Namespace
  
  predicate invariant_PersistentArray_T (self: t_PersistentArray_T) =
    (view_Fragment_Id_Seq_T self.frag).f0 = id_Inner_T (view_Rc_PermCell_Inner_T_Global self.permcell)
    /\ id_Id'0 self.frag = public_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv)
    /\ namespace_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv) = Namespace_PARRAY 0
  
  predicate inv_Rc_LocalInvariant_PA_T_Global (_1: t_Rc_LocalInvariant_PA_T_Global)
  
  predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_PersistentArray_T (_1: t_PersistentArray_T)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_PersistentArray_T [inv_PersistentArray_T x]. inv_PersistentArray_T x
      = (invariant_PersistentArray_T x
      /\ inv_Rc_PermCell_Inner_T_Global x.permcell
      /\ inv_Ghost_Fragment_Id_Seq_T x.frag /\ inv_Ghost_Rc_LocalInvariant_PA_T_Global x.inv)
  
  predicate invariant_ref_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) = inv_PersistentArray_T self
  
  meta "rewrite_def" predicate invariant_ref_PersistentArray_T
  
  predicate inv_ref_PersistentArray_T [@inline:trivial] (_1: t_PersistentArray_T) = invariant_ref_PersistentArray_T _1
  
  meta "rewrite_def" predicate inv_ref_PersistentArray_T
  
  predicate inv_closure0 [@inline:trivial] (_1: closure0) =
    let {c0 = x0; c1 = x1; c2 = x2; c3 = x3} = _1 in inv_ref_PersistentArray_T x0 /\ inv_Ghost_PermCellOwn_Inner_T x2
  
  meta "rewrite_def" predicate inv_closure0
  
  let rec closure0 [@coma:extspec] (self: closure0) (pa: MutBorrow.t t_PA_T) (return (x: t_Fragment_Id_Seq_T)) = bb0
    [ bb0 = s0 [ s0 = deref_Ghost_ref_PA_T {pa} (fun (_ret: MutBorrow.t t_PA_T) -> [ &_6 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_11 <- self.c0.frag ] s1
      | s1 = deref_Ghost_Fragment_Id_Seq_T {_11} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_9 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = contains_Id'0 {_6.current.auth} {_9} (fun (_ret: ()) -> [ &_4 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = id_ghost_Inner_T {self.c1} (fun (_ret: t_Id) -> [ &_13 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = into_inner_Id {_13} (fun (_ret: t_Id) -> [ &cell_id <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_19 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s1)
      | s1 = deref_mut_Ghost_ref_PA_T {_19} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_18 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0
      [ s0 = [ &_21 <- cell_id ] s1
      | s1 = {inv_FMap_Id_PermCellOwn_Inner_T _18.current.current.perms}
        MutBorrow.borrow_mut <t_FMap_Id_PermCellOwn_Inner_T> {_18.current.current.perms}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) ->
            [ &_17 <- _ret ] -{inv_FMap_Id_PermCellOwn_Inner_T _ret.final}-
            [ &_18 <- { _18 with current = { _18.current with current = { _18.current.current with perms = _ret.final } } } ]
            s2)
      | s2 = get_mut_ghost_Id {_17} {_21} (fun (_ret: t_Option_ref_PermCellOwn_Inner_T) -> [ &_16 <- _ret ] s3)
      | s3 = bb7 ]
    | bb7 = any
      [ br0 -> {_16 = None'1} (! bb12) | br1 (x0: MutBorrow.t t_PermCellOwn_Inner_T) -> {_16 = Some'1 x0} (! bb9) ]
    | bb12 = s0
      [ s0 = {[@expl:type invariant] match _16 with
          | Some'1 x -> inv_ref_PermCellOwn_Inner_T x
          | _ -> true
          end}
        s1
      | s1 = -{match _16 with
          | Some'1 x -> resolve_ref_PermCellOwn_Inner_T x
          | _ -> true
          end}-
        s2
      | s2 = {[@expl:type invariant] inv_ref_ref_PA_T'0 _18} s3
      | s3 = -{resolve_ref_ref_PA_T _18}- s4
      | s4 = bb13 ]
    | bb9 = s0
      [ s0 = elim_Some {_16} (fun (r0: MutBorrow.t t_PermCellOwn_Inner_T) -> [ &other <- r0 ] s1)
      | s1 = [ &_29 <- self.c2 ] s2
      | s2 = deref_Ghost_PermCellOwn_Inner_T {_29} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_27 <- _ret ] s3)
      | s3 = bb10 ]
    | bb10 = s0
      [ s0 = {inv_PermCellOwn_Inner_T other.current}
        MutBorrow.borrow_final <t_PermCellOwn_Inner_T> {other.current} {MutBorrow.get_id other}
          (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) ->
            [ &_25 <- _ret ] -{inv_PermCellOwn_Inner_T _ret.final}-
            [ &other <- { other with current = _ret.final } ] s1)
      | s1 = disjoint_lemma_Inner_T {_25} {_27} (fun (_ret: ()) -> [ &_24 <- _ret ] s2)
      | s2 = bb11 ]
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PermCellOwn_Inner_T other} s1
      | s1 = -{resolve_ref_PermCellOwn_Inner_T other}- s2
      | s2 = {[@expl:type invariant] inv_ref_ref_PA_T'0 _18} s3
      | s3 = -{resolve_ref_ref_PA_T _18}- s4
      | s4 = bb13 ]
    | bb13 = s0
      [ s0 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_33 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s1)
      | s1 = deref_mut_Ghost_ref_PA_T {_33} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_32 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = s0
      [ s0 = into_inner_PermCellOwn_Inner_T {self.c2} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_35 <- _ret ] s1)
      | s1 = bb15 ]
    | bb15 = s0
      [ s0 = {inv_FMap_Id_PermCellOwn_Inner_T _32.current.current.perms}
        MutBorrow.borrow_mut <t_FMap_Id_PermCellOwn_Inner_T> {_32.current.current.perms}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) ->
            [ &_31 <- _ret ] -{inv_FMap_Id_PermCellOwn_Inner_T _ret.final}-
            [ &_32 <- { _32 with current = { _32.current with current = { _32.current.current with perms = _ret.final } } } ]
            s1)
      | s1 = insert_ghost_Id {_31} {cell_id} {_35} (fun (_ret: t_Option_PermCellOwn_Inner_T) -> [ &_30 <- _ret ] s2)
      | s2 = {[@expl:type invariant] inv_Option_PermCellOwn_Inner_T _30} s3
      | s3 = -{resolve_Option_PermCellOwn_Inner_T _30}- s4
      | s4 = bb16 ]
    | bb16 = s0
      [ s0 = {[@expl:type invariant] inv_ref_ref_PA_T'0 _32} s1
      | s1 = -{resolve_ref_ref_PA_T _32}- s2
      | s2 =
        [ &_37 <- Map.set pa.current.depth cell_id (index_Mapping_Id_Int pa.current.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global self.c0.permcell))
        + 1) ] s3
      | s3 = bb17 ]
    | bb17 = s0
      [ s0 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_40 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s1)
      | s1 = deref_mut_Ghost_ref_PA_T {_40} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_39 <- _ret ] s2)
      | s2 = bb18 ]
    | bb18 = s0
      [ s0 = [ &_39 <- { _39 with current = { _39.current with current = { _39.current.current with depth = _37 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv_ref_ref_PA_T'0 _39} s2
      | s2 = -{resolve_ref_ref_PA_T _39}- s3
      | s3 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_43 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s4)
      | s4 = deref_mut_Ghost_ref_PA_T {_43} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_42 <- _ret ] s5)
      | s5 = bb19 ]
    | bb19 = s0 [ s0 = [ &_44 <- cell_id ] s1 | s1 = bb20 ]
    | bb20 = s0
      [ s0 = {inv_Authority_Id_Seq_T _42.current.current.auth}
        MutBorrow.borrow_mut <t_Authority_Id_Seq_T> {_42.current.current.auth}
          (fun (_ret: MutBorrow.t t_Authority_Id_Seq_T) ->
            [ &_41 <- _ret ] -{inv_Authority_Id_Seq_T _ret.final}-
            [ &_42 <- { _42 with current = { _42.current with current = { _42.current.current with auth = _ret.final } } } ]
            s1)
      | s1 = insert_Id'1 {_41} {_44} {self.c3} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_3 <- _ret ] s2)
      | s2 = bb21 ]
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv_ref_ref_PA_T'0 _42} s1
      | s1 = -{resolve_ref_ref_PA_T _42}- s2
      | s2 = {[@expl:type invariant] inv_Ghost_ref_PA_T pa} s3
      | s3 = -{resolve_Ghost_ref_PA_T pa}- s4
      | s4 = new_Fragment_Id_Seq_T {_3} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_0 <- _ret ] s5)
      | s5 = bb22 ]
    | bb22 = return {_0} ]
    [ & _0: t_Fragment_Id_Seq_T = Any.any_l ()
    | & self: closure0 = self
    | & pa: MutBorrow.t t_PA_T = pa
    | & _3: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _6: MutBorrow.t t_PA_T = Any.any_l ()
    | & _9: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _11: t_Fragment_Id_Seq_T = Any.any_l ()
    | & cell_id: t_Id = Any.any_l ()
    | & _13: t_Id = Any.any_l ()
    | & _16: t_Option_ref_PermCellOwn_Inner_T = Any.any_l ()
    | & _17: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _18: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _19: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _21: t_Id = Any.any_l ()
    | & other: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _24: () = Any.any_l ()
    | & _25: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _27: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _29: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _30: t_Option_PermCellOwn_Inner_T = Any.any_l ()
    | & _31: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _32: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _33: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _35: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _37: Map.map t_Id int = Any.any_l ()
    | & _39: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _40: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _41: MutBorrow.t t_Authority_Id_Seq_T = Any.any_l ()
    | & _42: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _43: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _44: t_Id = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  type t_Tokens
  
  predicate invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Ghost_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global
  
  type tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0 = {
    f0'1: t_Rc_LocalInvariant_PA_T_Global;
    f1'1: t_Tokens;
    f2'1: closure0 }
  
  predicate postcondition_once_deref [@inline:trivial] (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (result: t_LocalInvariant_PA_T) =
    let self_ = args in result = view_Rc_LocalInvariant_PA_T_Global self_
  
  meta "rewrite_def" predicate postcondition_once_deref
  
  predicate resolve_deref [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_deref
  
  predicate postcondition_mut_deref [@inline:trivial] (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (result_state: ()) (result: t_LocalInvariant_PA_T) =
    let self_ = args in result = view_Rc_LocalInvariant_PA_T_Global self_
  
  meta "rewrite_def" predicate postcondition_mut_deref
  
  function fn_mut_once_deref (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (res: t_LocalInvariant_PA_T) : ()
  
  axiom fn_mut_once_deref_spec:
    forall self: (), args: t_Rc_LocalInvariant_PA_T_Global, res: t_LocalInvariant_PA_T. postcondition_once_deref self args res
      = (exists res_state: (). postcondition_mut_deref self args res_state res /\ resolve_deref res_state)
  
  predicate hist_inv_deref [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_deref
  
  function hist_inv_trans_deref (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_deref_spec: forall self: (), b: (), c: (). hist_inv_deref self b
      -> hist_inv_deref b c -> hist_inv_deref self c
  
  function hist_inv_refl_deref (self: ()) : ()
  
  axiom hist_inv_refl_deref_spec: forall self: (). hist_inv_deref self self
  
  function postcondition_mut_hist_inv_deref (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (res_state: ()) (res: t_LocalInvariant_PA_T) : ()
  
  axiom postcondition_mut_hist_inv_deref_spec:
    forall self: (), args: t_Rc_LocalInvariant_PA_T_Global, res_state: (), res: t_LocalInvariant_PA_T. postcondition_mut_deref self args res_state res
      -> hist_inv_deref self res_state
  
  function fn_hist_inv_deref (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_deref_spec: forall self: (), res_state: (). hist_inv_deref self res_state = (self = res_state)
  
  predicate postcondition_deref [@inline:trivial] (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (result: t_LocalInvariant_PA_T) =
    let self_ = args in result = view_Rc_LocalInvariant_PA_T_Global self_
  
  meta "rewrite_def" predicate postcondition_deref
  
  function fn_once_deref (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (res: t_LocalInvariant_PA_T) : ()
  
  axiom fn_once_deref_spec:
    forall self: (), args: t_Rc_LocalInvariant_PA_T_Global, res: t_LocalInvariant_PA_T. postcondition_once_deref self args res
      = (postcondition_deref self args res /\ resolve_deref self)
  
  function fn_mut_deref (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (res_state: ()) (res: t_LocalInvariant_PA_T) : ()
  
  axiom fn_mut_deref_spec:
    forall self: (), args: t_Rc_LocalInvariant_PA_T_Global, res_state: (), res: t_LocalInvariant_PA_T. postcondition_mut_deref self args res_state res
      = (postcondition_deref self args res /\ self = res_state)
  
  type tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0 = {
    f0'2: t_LocalInvariant_PA_T;
    f1'2: t_Tokens;
    f2'2: closure0 }
  
  predicate index_Mapping_Seq_T_bool [@inline:trivial] (self: Map.map (Seq.seq t_T) bool) (a: Seq.seq t_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_Seq_T_bool
  
  function such_that_Seq_T (p: Map.map (Seq.seq t_T) bool) : Seq.seq t_T
  
  axiom such_that_Seq_T_spec:
    forall p: Map.map (Seq.seq t_T) bool. (exists x: Seq.seq t_T. index_Mapping_Seq_T_bool p x)
      -> index_Mapping_Seq_T_bool p (such_that_Seq_T p)
  
  function unwrap_Option_Seq_T (self: t_Option_Seq_T) : Seq.seq t_T = match self with
      | Some'0 x -> x
      | None'0 -> such_that_Seq_T (fun (__0: Seq.seq t_T) -> true)
      end
  
  function lookup_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : Seq.seq t_T =
    unwrap_Option_Seq_T (get_Id'0 self k)
  
  meta "rewrite_def" function lookup_Id'0
  
  function index_FMap_Id_Seq_T [@inline:trivial] (self: t_FMap_Id_Seq_T) (key: t_Id) : Seq.seq t_T =
    lookup_Id'0 self key
  
  meta "rewrite_def" function index_FMap_Id_Seq_T
  
  predicate partial_invariant_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    id_Id self.auth = resource_id
    /\ (forall id: t_Id. contains_Id'1 (view_Authority_Id_Seq_T self.auth) id /\ contains_Id self.perms id
      -> id_Inner_T'0 (index_FMap_Id_PermCellOwn_Inner_T self.perms id) = id
      /\ match val_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self.perms id) with
        | Direct v -> index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id = view_Vec_T_Global v
        | Link index value next -> contains_Id'1 (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))
        /\ index_Mapping_Id_Int self.depth id
          > index_Mapping_Id_Int self.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))
        /\ UInt64.t'int index
          < Seq.length (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next)))
        /\ index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id
        = Seq.set (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))) (UInt64.t'int index) value
        end)
  
  meta "rewrite_def" predicate partial_invariant_T
  
  predicate protocol_PA_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    partial_invariant_T self resource_id
    /\ (forall id: t_Id. contains_Id'1 (view_Authority_Id_Seq_T self.auth) id -> contains_Id self.perms id)
  
  meta "rewrite_def" predicate protocol_PA_T
  
  predicate precondition_closure0 [@inline:trivial] (self: closure0) (args: MutBorrow.t t_PA_T) =
    let pa = args in closure0'pre self pa
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: MutBorrow.t t_PA_T) (result: t_Fragment_Id_Seq_T) =
    let pa = args in closure0'post'return self pa result
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  function fin_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) : t_PA_T = self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PA_T
  
  predicate contains_Namespace [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) = Set.mem e self
  
  meta "rewrite_def" predicate contains_Namespace
  
  function namespaces (self: t_Tokens) : Set.set t_Namespace
  
  predicate contains (self: t_Tokens) (namespace: t_Namespace) = contains_Namespace (namespaces self) namespace
  
  predicate precondition_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) =
    let {f0'2 = self'0; f1'2 = tokens; f2'2 = f} = args in (forall t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self'0)
          /\ inv_Ghost_ref_PA_T t
        -> precondition_closure0 f t
        /\ (forall res: t_Fragment_Id_Seq_T. postcondition_once_closure0 f t res
          -> protocol_PA_T (fin_Ghost_ref_PA_T t) (public_PA_T self'0)))
    /\ contains tokens (namespace_PA_T self'0) /\ inv_closure0 f
  
  meta "rewrite_def" predicate precondition_open
  
  function new_ref_LocalInvariant_PA_T (x: t_LocalInvariant_PA_T) : t_LocalInvariant_PA_T
  
  axiom new_ref_LocalInvariant_PA_T_spec: forall x: t_LocalInvariant_PA_T. new_ref_LocalInvariant_PA_T x = x
  
  predicate invariant_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_ref_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate precondition_deref [@inline:trivial] (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) =
    let self_ = args in inv_ref_Rc_LocalInvariant_PA_T_Global self_
  
  meta "rewrite_def" predicate precondition_deref
  
  predicate invariant_Ghost_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_ref_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Ghost_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_Ghost_ref_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate precondition_open'0 [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) =
    let {f0'1 = self'0; f1'1 = tokens; f2'1 = f} = args in (forall this: t_LocalInvariant_PA_T. postcondition_deref () self'0 this
        -> precondition_open () { f0'2 = new_ref_LocalInvariant_PA_T this; f1'2 = tokens; f2'2 = f })
    /\ precondition_deref () self'0 /\ inv_closure0 f /\ inv_Ghost_ref_Rc_LocalInvariant_PA_T_Global self'0
  
  meta "rewrite_def" predicate precondition_open'0
  
  let rec deref_Rc_LocalInvariant_PA_T_Global (self_: t_Rc_LocalInvariant_PA_T_Global)
    (return (x: t_LocalInvariant_PA_T)) =
    {[@expl:deref 'self_' type invariant] inv_ref_Rc_LocalInvariant_PA_T_Global self_}
    any
    [ return (result: t_LocalInvariant_PA_T) -> {result = view_Rc_LocalInvariant_PA_T_Global self_}
      (! return {result}) ]
  
  let rec open_Ghost_ref_LocalInvariant_PA_T (self: t_LocalInvariant_PA_T) (tokens: t_Tokens) (f: closure0)
    (return (x: t_Fragment_Id_Seq_T)) = {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires #0] contains tokens (namespace_PA_T self)}
    {[@expl:open requires #1] forall t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self)
        /\ inv_Ghost_ref_PA_T t
      -> precondition_closure0 f t
      /\ (forall res: t_Fragment_Id_Seq_T. postcondition_once_closure0 f t res
        -> protocol_PA_T (fin_Ghost_ref_PA_T t) (public_PA_T self))}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Ghost_Fragment_Id_Seq_T result}
      {exists t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self)
        /\ postcondition_once_closure0 f t result}
      (! return {result}) ]
  
  predicate postcondition_once_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (result: t_Fragment_Id_Seq_T) =
    let {f0'2 = self'0; f1'2 = tokens; f2'2 = f} = args in (exists t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_Ghost_Fragment_Id_Seq_T result
  
  meta "rewrite_def" predicate postcondition_once_open
  
  predicate resolve_open [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_open
  
  predicate postcondition_mut_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (result_state: ()) (result: t_Fragment_Id_Seq_T) =
    let {f0'2 = self'0; f1'2 = tokens; f2'2 = f} = args in (exists t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_Ghost_Fragment_Id_Seq_T result
  
  meta "rewrite_def" predicate postcondition_mut_open
  
  function fn_mut_once_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (res: t_Fragment_Id_Seq_T) : ()
  
  axiom fn_mut_once_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0, res: t_Fragment_Id_Seq_T. postcondition_once_open self args res
      = (exists res_state: (). postcondition_mut_open self args res_state res /\ resolve_open res_state)
  
  predicate hist_inv_open [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_open
  
  function hist_inv_trans_open (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_open_spec: forall self: (), b: (), c: (). hist_inv_open self b
      -> hist_inv_open b c -> hist_inv_open self c
  
  function hist_inv_refl_open (self: ()) : ()
  
  axiom hist_inv_refl_open_spec: forall self: (). hist_inv_open self self
  
  function postcondition_mut_hist_inv_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (res_state: ()) (res: t_Fragment_Id_Seq_T) : ()
  
  axiom postcondition_mut_hist_inv_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0, res_state: (), res: t_Fragment_Id_Seq_T. postcondition_mut_open self args res_state res
      -> hist_inv_open self res_state
  
  function fn_hist_inv_open (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_open_spec: forall self: (), res_state: (). hist_inv_open self res_state = (self = res_state)
  
  predicate postcondition_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (result: t_Fragment_Id_Seq_T) =
    let {f0'2 = self'0; f1'2 = tokens; f2'2 = f} = args in (exists t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_Ghost_Fragment_Id_Seq_T result
  
  meta "rewrite_def" predicate postcondition_open
  
  function fn_once_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (res: t_Fragment_Id_Seq_T) : ()
  
  axiom fn_once_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0, res: t_Fragment_Id_Seq_T. postcondition_once_open self args res
      = (postcondition_open self args res /\ resolve_open self)
  
  function fn_mut_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (res_state: ()) (res: t_Fragment_Id_Seq_T) : ()
  
  axiom fn_mut_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0, res_state: (), res: t_Fragment_Id_Seq_T. postcondition_mut_open self args res_state res
      = (postcondition_open self args res /\ self = res_state)
  
  let rec open_Ghost_ref_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) (tokens: t_Tokens)
    (f: closure0) (return (x: t_Fragment_Id_Seq_T)) =
    {[@expl:open 'self' type invariant] inv_Ghost_ref_Rc_LocalInvariant_PA_T_Global self}
    {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires #0] precondition_deref () self}
    {[@expl:open requires #1] forall this: t_LocalInvariant_PA_T. postcondition_deref () self this
      -> precondition_open () { f0'2 = new_ref_LocalInvariant_PA_T this; f1'2 = tokens; f2'2 = f }}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Ghost_Fragment_Id_Seq_T result}
      {exists this: t_LocalInvariant_PA_T. postcondition_deref () self this
        /\ postcondition_open () { f0'2 = new_ref_LocalInvariant_PA_T this; f1'2 = tokens; f2'2 = f } result}
      (! return {result}) ]
  
  function new_ref_Rc_LocalInvariant_PA_T_Global (x: t_Rc_LocalInvariant_PA_T_Global) : t_Rc_LocalInvariant_PA_T_Global
  
  axiom new_ref_Rc_LocalInvariant_PA_T_Global_spec:
    forall x: t_Rc_LocalInvariant_PA_T_Global. new_ref_Rc_LocalInvariant_PA_T_Global x = x
  
  predicate postcondition_once_open'0 [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (result: t_Fragment_Id_Seq_T) =
    let {f0'1 = self'0; f1'1 = tokens; f2'1 = f} = args in (exists this: t_LocalInvariant_PA_T. postcondition_deref () self'0 this
        /\ postcondition_open () { f0'2 = new_ref_LocalInvariant_PA_T this; f1'2 = tokens; f2'2 = f } result)
    /\ inv_Ghost_Fragment_Id_Seq_T result
  
  meta "rewrite_def" predicate postcondition_once_open'0
  
  predicate resolve_open'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_open'0
  
  predicate postcondition_mut_open'0 [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (result_state: ()) (result: t_Fragment_Id_Seq_T) =
    let {f0'1 = self'0; f1'1 = tokens; f2'1 = f} = args in (exists this: t_LocalInvariant_PA_T. postcondition_deref () self'0 this
        /\ postcondition_open () { f0'2 = new_ref_LocalInvariant_PA_T this; f1'2 = tokens; f2'2 = f } result)
    /\ inv_Ghost_Fragment_Id_Seq_T result
  
  meta "rewrite_def" predicate postcondition_mut_open'0
  
  function fn_mut_once_open'0 (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (res: t_Fragment_Id_Seq_T) : ()
  
  axiom fn_mut_once_open_spec'0:
    forall self: (), args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0, res: t_Fragment_Id_Seq_T. postcondition_once_open'0 self args res
      = (exists res_state: (). postcondition_mut_open'0 self args res_state res /\ resolve_open'0 res_state)
  
  predicate hist_inv_open'0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_open'0
  
  function hist_inv_trans_open'0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_open_spec'0: forall self: (), b: (), c: (). hist_inv_open'0 self b
      -> hist_inv_open'0 b c -> hist_inv_open'0 self c
  
  function hist_inv_refl_open'0 (self: ()) : ()
  
  axiom hist_inv_refl_open_spec'0: forall self: (). hist_inv_open'0 self self
  
  function postcondition_mut_hist_inv_open'0 (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (res_state: ()) (res: t_Fragment_Id_Seq_T) : ()
  
  axiom postcondition_mut_hist_inv_open_spec'0:
    forall self: (), args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0, res_state: (), res: t_Fragment_Id_Seq_T. postcondition_mut_open'0 self args res_state res
      -> hist_inv_open'0 self res_state
  
  function fn_hist_inv_open'0 (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_open_spec'0: forall self: (), res_state: (). hist_inv_open'0 self res_state = (self = res_state)
  
  predicate postcondition_open'0 [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (result: t_Fragment_Id_Seq_T) =
    let {f0'1 = self'0; f1'1 = tokens; f2'1 = f} = args in (exists this: t_LocalInvariant_PA_T. postcondition_deref () self'0 this
        /\ postcondition_open () { f0'2 = new_ref_LocalInvariant_PA_T this; f1'2 = tokens; f2'2 = f } result)
    /\ inv_Ghost_Fragment_Id_Seq_T result
  
  meta "rewrite_def" predicate postcondition_open'0
  
  function fn_once_open'0 (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (res: t_Fragment_Id_Seq_T) : ()
  
  axiom fn_once_open_spec'0:
    forall self: (), args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0, res: t_Fragment_Id_Seq_T. postcondition_once_open'0 self args res
      = (postcondition_open'0 self args res /\ resolve_open'0 self)
  
  function fn_mut_open'0 (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (res_state: ()) (res: t_Fragment_Id_Seq_T) : ()
  
  axiom fn_mut_open_spec'0:
    forall self: (), args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0, res_state: (), res: t_Fragment_Id_Seq_T. postcondition_mut_open'0 self args res_state res
      = (postcondition_open'0 self args res /\ self = res_state)
  
  let rec open_ref_Ghost_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) (tokens: t_Tokens)
    (f: closure0) (return (x: t_Fragment_Id_Seq_T)) =
    {[@expl:open 'self' type invariant] inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global self}
    {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires] precondition_open'0 () { f0'1 = new_ref_Rc_LocalInvariant_PA_T_Global self;
                                                    f1'1 = tokens;
                                                    f2'1 = f }}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_Ghost_Fragment_Id_Seq_T result}
      {postcondition_open'0 () { f0'1 = new_ref_Rc_LocalInvariant_PA_T_Global self; f1'1 = tokens; f2'1 = f } result}
      (! return {result}) ]
  
  let rec new_PermCell_Inner_T (value: t_PermCell_Inner_T) (return (x: t_Rc_PermCell_Inner_T_Global)) = any
    [ return (result: t_Rc_PermCell_Inner_T_Global) -> {inv_Rc_PermCell_Inner_T_Global result}
      {view_Rc_PermCell_Inner_T_Global result = value}
      (! return {result}) ]
  
  let rec deref_Ghost_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global)
    (return (x: t_Rc_LocalInvariant_PA_T_Global)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global self}
    any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_ref_Rc_LocalInvariant_PA_T_Global result}
      {result = self}
      (! return {result}) ]
  
  let rec clone_Rc_LocalInvariant_PA_T_Global (self_: t_Rc_LocalInvariant_PA_T_Global)
    (return (x: t_Rc_LocalInvariant_PA_T_Global)) =
    {[@expl:clone 'self_' type invariant] inv_ref_Rc_LocalInvariant_PA_T_Global self_}
    any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_Rc_LocalInvariant_PA_T_Global result}
      {result = self_}
      (! return {result}) ]
  
  let rec new_Rc_LocalInvariant_PA_T_Global (x: t_Rc_LocalInvariant_PA_T_Global)
    (return (x'0: t_Rc_LocalInvariant_PA_T_Global)) =
    {[@expl:new 'x' type invariant] inv_Rc_LocalInvariant_PA_T_Global x}
    any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_Ghost_Rc_LocalInvariant_PA_T_Global result}
      {result = x}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec set_T (self: t_PersistentArray_T) (index: UInt64.t) (value: t_T) (tokens: t_Tokens)
    (return (x: t_PersistentArray_T)) = {[@expl:set 'self' type invariant] inv_ref_PersistentArray_T self}
    {[@expl:set 'value' type invariant] inv_T value}
    {[@expl:set requires #0] UInt64.t'int index < Seq.length (view_PersistentArray_T self)}
    {[@expl:set requires #1] contains tokens (Namespace_PARRAY 0)}
    (! bb0
    [ bb0 = s0 [ s0 = [ &new_seq <- Seq.set (view_PersistentArray_T self) (UInt64.t'int index) value ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = clone_Rc_PermCell_Inner_T_Global {self.permcell}
          (fun (_ret: t_Rc_PermCell_Inner_T_Global) -> [ &_16 <- _ret ] s1)
      | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_13 <- Link index value _16 ] s1 | s1 = bb4 ]
    | bb4 = s0
      [ s0 = new_Inner_T {_13} (fun (_ret: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T) -> [ &_12 <- _ret ] s1)
      | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &permcell'0 <- _12.f0'0 ] s1 | s1 = [ &permcellown <- _12.f1'0 ] s2 | s2 = bb6 ]
    | bb6 = s0
      [ s0 = [ &_21 <- { c0 = self; c1 = permcell'0; c2 = permcellown; c3 = new_seq } ] s1
      | s1 = open_ref_Ghost_Rc_LocalInvariant_PA_T_Global {self.inv} {tokens} {_21}
          (fun (_ret: t_Fragment_Id_Seq_T) -> [ &frag'0 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = new_PermCell_Inner_T {permcell'0} (fun (_ret: t_Rc_PermCell_Inner_T_Global) -> [ &_25 <- _ret ] s1)
      | s1 = bb8 ]
    | bb8 = s0
      [ s0 = deref_Ghost_Rc_LocalInvariant_PA_T_Global {self.inv}
          (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &_31 <- _ret ] s1)
      | s1 = bb9 ]
    | bb9 = s0
      [ s0 = clone_Rc_LocalInvariant_PA_T_Global {_31}
          (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &_29 <- _ret ] s1)
      | s1 = bb10 ]
    | bb10 = s0
      [ s0 = new_Rc_LocalInvariant_PA_T_Global {_29}
          (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &_28 <- _ret ] s1)
      | s1 = bb11 ]
    | bb11 = s0 [ s0 = [ &_0 <- { permcell = _25; frag = frag'0; inv = _28 } ] s1 | s1 = bb14 ]
    | bb14 = return {_0} ]
    [ & _0: t_PersistentArray_T = Any.any_l ()
    | & self: t_PersistentArray_T = self
    | & index: UInt64.t = index
    | & value: t_T = value
    | & tokens: t_Tokens = tokens
    | & new_seq: Seq.seq t_T = Any.any_l ()
    | & permcell'0: t_PermCell_Inner_T = Any.any_l ()
    | & permcellown: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _12: tup2_PermCell_Inner_T_Ghost_PermCellOwn_Inner_T = Any.any_l ()
    | & _13: t_Inner_T = Any.any_l ()
    | & _16: t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & frag'0: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _21: closure0 = Any.any_l ()
    | & _25: t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & _28: t_Rc_LocalInvariant_PA_T_Global = Any.any_l ()
    | & _29: t_Rc_LocalInvariant_PA_T_Global = Any.any_l ()
    | & _31: t_Rc_LocalInvariant_PA_T_Global = Any.any_l () ])
    [ return (result: t_PersistentArray_T) -> {[@expl:set result type invariant] inv_PersistentArray_T result}
      {[@expl:set ensures] view_PersistentArray_T result
      = Seq.set (view_PersistentArray_T self) (UInt64.t'int index) value}
      (! return {result}) ]
end
module M_implementation__impl_PersistentArray_T__get_immut (* implementation::PersistentArray<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use map.Map
  use set.Set
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Rc_LocalInvariant_PA_T_Global
  
  type t_Rc_PermCell_Inner_T_Global
  
  type t_Fragment_Id_Seq_T
  
  type t_PersistentArray_T = {
    permcell: t_Rc_PermCell_Inner_T_Global;
    frag: t_Fragment_Id_Seq_T;
    inv: t_Rc_LocalInvariant_PA_T_Global }
  
  predicate inv_Rc_LocalInvariant_PA_T_Global (_1: t_Rc_LocalInvariant_PA_T_Global)
  
  predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Ghost_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate invariant_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_ref_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_LocalInvariant_PA_T_Global
  
  let rec deref_Ghost_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global)
    (return (x: t_Rc_LocalInvariant_PA_T_Global)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global self}
    any
    [ return (result: t_Rc_LocalInvariant_PA_T_Global) -> {inv_ref_Rc_LocalInvariant_PA_T_Global result}
      {result = self}
      (! return {result}) ]
  
  type t_LocalInvariant_PA_T
  
  function view_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) : t_LocalInvariant_PA_T
  
  let rec deref_Rc_LocalInvariant_PA_T_Global (self_: t_Rc_LocalInvariant_PA_T_Global)
    (return (x: t_LocalInvariant_PA_T)) =
    {[@expl:deref 'self_' type invariant] inv_ref_Rc_LocalInvariant_PA_T_Global self_}
    any
    [ return (result: t_LocalInvariant_PA_T) -> {result = view_Rc_LocalInvariant_PA_T_Global self_}
      (! return {result}) ]
  
  type t_Tokens
  
  let rec deref_Ghost_ref_Tokens (self: t_Tokens) (return (x: t_Tokens)) = any
    [ return (result: t_Tokens) -> {result = self} (! return {result}) ]
  
  type t_FMap_Id_PermCellOwn_Inner_T
  
  type t_Authority_Id_Seq_T
  
  type t_Id
  
  type t_PA_T = { perms: t_FMap_Id_PermCellOwn_Inner_T; auth: t_Authority_Id_Seq_T; depth: Map.map t_Id int }
  
  predicate contains_Namespace [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) = Set.mem e self
  
  meta "rewrite_def" predicate contains_Namespace
  
  function namespaces (self: t_Tokens) : Set.set t_Namespace
  
  predicate contains (self: t_Tokens) (namespace: t_Namespace) = contains_Namespace (namespaces self) namespace
  
  function namespace_PA_T (self: t_LocalInvariant_PA_T) : t_Namespace
  
  type t_PermCellOwn_Inner_T
  
  type t_Option_PermCellOwn_Inner_T = None | Some t_PermCellOwn_Inner_T
  
  function view_FMap_Id_PermCellOwn_Inner_T (self: t_FMap_Id_PermCellOwn_Inner_T) : Map.map t_Id t_Option_PermCellOwn_Inner_T
  
  function get_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_Option_PermCellOwn_Inner_T =
    Map.get (view_FMap_Id_PermCellOwn_Inner_T self) k
  
  meta "rewrite_def" function get_Id
  
  predicate contains_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) = get_Id self k <> None
  
  meta "rewrite_def" predicate contains_Id
  
  predicate inv_Id [@inline:trivial] (_1: t_Id) = true
  
  meta "rewrite_def" predicate inv_Id
  
  type t_Vec_T_Global
  
  type t_T
  
  type t_Inner_T = Direct t_Vec_T_Global | Link UInt64.t t_T t_Rc_PermCell_Inner_T_Global
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate inv_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate inv_Inner_T (_1: t_Inner_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Inner_T [inv_Inner_T x]. inv_Inner_T x
      = match x with
        | Direct f0 -> inv_Vec_T_Global f0
        | Link index value next -> inv_T value /\ inv_Rc_PermCell_Inner_T_Global next
        end
  
  predicate invariant_ref_Inner_T [@inline:trivial] (self: t_Inner_T) = inv_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_Inner_T
  
  predicate inv_ref_Inner_T [@inline:trivial] (_1: t_Inner_T) = invariant_ref_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Inner_T
  
  function val_Inner_T (self: t_PermCellOwn_Inner_T) : t_Inner_T
  
  predicate invariant_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_ref_Inner_T (val_Inner_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_Inner_T
  
  predicate inv_PermCellOwn_Inner_T (_1: t_PermCellOwn_Inner_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellOwn_Inner_T [inv_PermCellOwn_Inner_T x]. inv_PermCellOwn_Inner_T x
      = invariant_PermCellOwn_Inner_T x
  
  predicate index_Mapping_PermCellOwn_Inner_T_bool [@inline:trivial] (self: Map.map t_PermCellOwn_Inner_T bool) (a: t_PermCellOwn_Inner_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_PermCellOwn_Inner_T_bool
  
  function such_that_PermCellOwn_Inner_T (p: Map.map t_PermCellOwn_Inner_T bool) : t_PermCellOwn_Inner_T
  
  axiom such_that_PermCellOwn_Inner_T_spec:
    forall p: Map.map t_PermCellOwn_Inner_T bool. (exists x: t_PermCellOwn_Inner_T. index_Mapping_PermCellOwn_Inner_T_bool p x)
      -> index_Mapping_PermCellOwn_Inner_T_bool p (such_that_PermCellOwn_Inner_T p)
  
  function unwrap_Option_PermCellOwn_Inner_T (self: t_Option_PermCellOwn_Inner_T) : t_PermCellOwn_Inner_T =
    match self with
      | Some x -> x
      | None -> such_that_PermCellOwn_Inner_T (fun (__0: t_PermCellOwn_Inner_T) -> true)
      end
  
  function lookup_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_PermCellOwn_Inner_T =
    unwrap_Option_PermCellOwn_Inner_T (get_Id self k)
  
  meta "rewrite_def" function lookup_Id
  
  function index_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) : t_PermCellOwn_Inner_T
   = lookup_Id self key
  
  meta "rewrite_def" function index_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    forall k: t_Id. contains_Id self k -> inv_Id k /\ inv_PermCellOwn_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self k)
  
  meta "rewrite_def" predicate invariant_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_FMap_Id_PermCellOwn_Inner_T (_1: t_FMap_Id_PermCellOwn_Inner_T)
  
  axiom inv_axiom'2 [@rewrite]:
    forall x: t_FMap_Id_PermCellOwn_Inner_T [inv_FMap_Id_PermCellOwn_Inner_T x]. inv_FMap_Id_PermCellOwn_Inner_T x
      = invariant_FMap_Id_PermCellOwn_Inner_T x
  
  predicate invariant_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T)
  
  predicate inv_Authority_Id_Seq_T (_1: t_Authority_Id_Seq_T)
  
  axiom inv_axiom'3: forall x: t_Authority_Id_Seq_T [inv_Authority_Id_Seq_T x]. inv_Authority_Id_Seq_T x
      -> invariant_Authority_Id_Seq_T x
  
  predicate inv_PA_T (_1: t_PA_T)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_PA_T [inv_PA_T x]. inv_PA_T x
      = (inv_FMap_Id_PermCellOwn_Inner_T x.perms /\ inv_Authority_Id_Seq_T x.auth)
  
  predicate invariant_ref_PA_T [@inline:trivial] (self: t_PA_T) = inv_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_PA_T
  
  predicate inv_ref_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_PA_T
  
  function id_Id (self: t_Authority_Id_Seq_T) : t_Id
  
  type t_FMap_Id_Seq_T
  
  type t_Option_Seq_T = None'0 | Some'0 (Seq.seq t_T)
  
  function view_FMap_Id_Seq_T (self: t_FMap_Id_Seq_T) : Map.map t_Id t_Option_Seq_T
  
  function get_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : t_Option_Seq_T =
    Map.get (view_FMap_Id_Seq_T self) k
  
  meta "rewrite_def" function get_Id'0
  
  predicate contains_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) = get_Id'0 self k <> None'0
  
  meta "rewrite_def" predicate contains_Id'0
  
  function view_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T) : t_FMap_Id_Seq_T
  
  function id_Inner_T (self: t_PermCellOwn_Inner_T) : t_Id
  
  predicate index_Mapping_Seq_T_bool [@inline:trivial] (self: Map.map (Seq.seq t_T) bool) (a: Seq.seq t_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_Seq_T_bool
  
  function such_that_Seq_T (p: Map.map (Seq.seq t_T) bool) : Seq.seq t_T
  
  axiom such_that_Seq_T_spec:
    forall p: Map.map (Seq.seq t_T) bool. (exists x: Seq.seq t_T. index_Mapping_Seq_T_bool p x)
      -> index_Mapping_Seq_T_bool p (such_that_Seq_T p)
  
  function unwrap_Option_Seq_T (self: t_Option_Seq_T) : Seq.seq t_T = match self with
      | Some'0 x -> x
      | None'0 -> such_that_Seq_T (fun (__0: Seq.seq t_T) -> true)
      end
  
  function lookup_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : Seq.seq t_T =
    unwrap_Option_Seq_T (get_Id'0 self k)
  
  meta "rewrite_def" function lookup_Id'0
  
  function index_FMap_Id_Seq_T [@inline:trivial] (self: t_FMap_Id_Seq_T) (key: t_Id) : Seq.seq t_T =
    lookup_Id'0 self key
  
  meta "rewrite_def" function index_FMap_Id_Seq_T
  
  type t_PermCell_Inner_T
  
  function id_Inner_T'0 (self: t_PermCell_Inner_T) : t_Id
  
  function view_Rc_PermCell_Inner_T_Global (self: t_Rc_PermCell_Inner_T_Global) : t_PermCell_Inner_T
  
  function index_Mapping_Id_Int [@inline:trivial] (self: Map.map t_Id int) (a: t_Id) : int = Map.get self a
  
  meta "rewrite_def" function index_Mapping_Id_Int
  
  predicate partial_invariant_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    id_Id self.auth = resource_id
    /\ (forall id: t_Id. contains_Id'0 (view_Authority_Id_Seq_T self.auth) id /\ contains_Id self.perms id
      -> id_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self.perms id) = id
      /\ match val_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self.perms id) with
        | Direct v -> index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id = view_Vec_T_Global v
        | Link index value next -> contains_Id'0 (view_Authority_Id_Seq_T self.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global next))
        /\ index_Mapping_Id_Int self.depth id
          > index_Mapping_Id_Int self.depth (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global next))
        /\ UInt64.t'int index
          < Seq.length (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global next)))
        /\ index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id
        = Seq.set (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global next))) (UInt64.t'int index) value
        end)
  
  meta "rewrite_def" predicate partial_invariant_T
  
  predicate protocol_PA_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    partial_invariant_T self resource_id
    /\ (forall id: t_Id. contains_Id'0 (view_Authority_Id_Seq_T self.auth) id -> contains_Id self.perms id)
  
  meta "rewrite_def" predicate protocol_PA_T
  
  function public_PA_T (self: t_LocalInvariant_PA_T) : t_Id
  
  let rec open_const_PA_T (self: t_LocalInvariant_PA_T) (tokens: t_Tokens) (return (x: t_PA_T)) =
    {[@expl:open_const requires] contains tokens (namespace_PA_T self)}
    any
    [ return (result: t_PA_T) -> {inv_ref_PA_T result} {protocol_PA_T result (public_PA_T self)} (! return {result}) ]
  
  predicate invariant_Ghost_ref_PA_T [@inline:trivial] (self: t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PA_T
  
  predicate inv_Ghost_ref_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PA_T
  
  let rec new_ref_PA_T (x: t_PA_T) (return (x'0: t_PA_T)) = {[@expl:new 'x' type invariant] inv_ref_PA_T x}
    any [ return (result: t_PA_T) -> {inv_Ghost_ref_PA_T result} {result = x} (! return {result}) ]
  
  predicate invariant_ref_Ghost_ref_PA_T [@inline:trivial] (self: t_PA_T) = inv_Ghost_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_ref_PA_T
  
  predicate inv_ref_Ghost_ref_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_ref_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_ref_PA_T
  
  predicate invariant_ref_ref_PA_T [@inline:trivial] (self: t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_ref_PA_T
  
  predicate inv_ref_ref_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_ref_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_ref_PA_T
  
  let rec deref_Ghost_ref_PA_T (self: t_PA_T) (return (x: t_PA_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_ref_PA_T self}
    any [ return (result: t_PA_T) -> {inv_ref_ref_PA_T result} {result = self} (! return {result}) ]
  
  predicate invariant_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T)
  
  predicate inv_Fragment_Id_Seq_T (_1: t_Fragment_Id_Seq_T)
  
  axiom inv_axiom'5: forall x: t_Fragment_Id_Seq_T [inv_Fragment_Id_Seq_T x]. inv_Fragment_Id_Seq_T x
      -> invariant_Fragment_Id_Seq_T x
  
  predicate invariant_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Fragment_Id_Seq_T
  
  predicate inv_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Fragment_Id_Seq_T
  
  predicate invariant_ref_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) =
    inv_Ghost_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Fragment_Id_Seq_T
  
  predicate inv_ref_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_ref_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Fragment_Id_Seq_T
  
  predicate invariant_ref_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Fragment_Id_Seq_T
  
  predicate inv_ref_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) = invariant_ref_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Fragment_Id_Seq_T
  
  let rec deref_Ghost_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) (return (x: t_Fragment_Id_Seq_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_Fragment_Id_Seq_T self}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_ref_Fragment_Id_Seq_T result} {result = self} (! return {result}) ]
  
  predicate invariant_ref_Authority_Id_Seq_T [@inline:trivial] (self: t_Authority_Id_Seq_T) =
    inv_Authority_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Authority_Id_Seq_T
  
  predicate inv_ref_Authority_Id_Seq_T [@inline:trivial] (_1: t_Authority_Id_Seq_T) =
    invariant_ref_Authority_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Authority_Id_Seq_T
  
  function id_Id'0 (self: t_Fragment_Id_Seq_T) : t_Id
  
  type tup2_Id_Seq_T = { f0: t_Id; f1: Seq.seq t_T }
  
  function view_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) : tup2_Id_Seq_T
  
  let rec contains_Id'1 (self: t_Authority_Id_Seq_T) (frag'0: t_Fragment_Id_Seq_T) (return (x: ())) =
    {[@expl:contains 'self' type invariant] inv_ref_Authority_Id_Seq_T self}
    {[@expl:contains 'frag' type invariant] inv_ref_Fragment_Id_Seq_T frag'0}
    {[@expl:contains requires] id_Id self = id_Id'0 frag'0}
    any
    [ return (result: ()) -> {get_Id'0 (view_Authority_Id_Seq_T self) (view_Fragment_Id_Seq_T frag'0).f0
      = Some'0 ((view_Fragment_Id_Seq_T frag'0).f1)}
      (! return {result}) ]
  
  let rec new_unit (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  predicate invariant_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (self: t_Rc_PermCell_Inner_T_Global) =
    inv_Rc_PermCell_Inner_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_PermCell_Inner_T_Global
  
  predicate inv_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (_1: t_Rc_PermCell_Inner_T_Global) =
    invariant_ref_Rc_PermCell_Inner_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_PermCell_Inner_T_Global
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  let rec get_inner_immut_T (inner: t_Rc_PermCell_Inner_T_Global) (i: UInt64.t) (pa: t_PA_T) (return (x: t_T)) =
    {[@expl:get_inner_immut 'inner' type invariant] inv_ref_Rc_PermCell_Inner_T_Global inner}
    {[@expl:get_inner_immut 'pa' type invariant] inv_Ghost_ref_PA_T pa}
    {[@expl:get_inner_immut requires #0] exists p: t_Id. protocol_PA_T pa p}
    {[@expl:get_inner_immut requires #1] contains_Id'0 (view_Authority_Id_Seq_T pa.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global inner))}
    {[@expl:get_inner_immut requires #2] UInt64.t'int i
    < Seq.length (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T pa.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global inner)))}
    any
    [ return (result: t_T) -> {inv_ref_T result}
      {result
      = Seq.get (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T pa.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global inner))) (UInt64.t'int i)}
      (! return {result}) ]
  
  predicate invariant_PersistentArray_T (self: t_PersistentArray_T) =
    (view_Fragment_Id_Seq_T self.frag).f0 = id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global self.permcell)
    /\ id_Id'0 self.frag = public_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv)
    /\ namespace_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv) = Namespace_PARRAY 0
  
  predicate inv_PersistentArray_T (_1: t_PersistentArray_T)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_PersistentArray_T [inv_PersistentArray_T x]. inv_PersistentArray_T x
      = (invariant_PersistentArray_T x
      /\ inv_Rc_PermCell_Inner_T_Global x.permcell
      /\ inv_Ghost_Fragment_Id_Seq_T x.frag /\ inv_Ghost_Rc_LocalInvariant_PA_T_Global x.inv)
  
  predicate invariant_ref_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) = inv_PersistentArray_T self
  
  meta "rewrite_def" predicate invariant_ref_PersistentArray_T
  
  predicate inv_ref_PersistentArray_T [@inline:trivial] (_1: t_PersistentArray_T) = invariant_ref_PersistentArray_T _1
  
  meta "rewrite_def" predicate inv_ref_PersistentArray_T
  
  function view_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) : Seq.seq t_T =
    (view_Fragment_Id_Seq_T self.frag).f1
  
  meta "rewrite_def" function view_PersistentArray_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get_immut_T (self: t_PersistentArray_T) (index: UInt64.t) (tokens: t_Tokens) (return (x: t_T)) =
    {[@expl:get_immut 'self' type invariant] inv_ref_PersistentArray_T self}
    {[@expl:get_immut requires #0] contains tokens (Namespace_PARRAY 0)}
    {[@expl:get_immut requires #1] UInt64.t'int index < Seq.length (view_PersistentArray_T self)}
    (! bb0
    [ bb0 = s0
      [ s0 = deref_Ghost_Rc_LocalInvariant_PA_T_Global {self.inv}
          (fun (_ret: t_Rc_LocalInvariant_PA_T_Global) -> [ &_12 <- _ret ] s1)
      | s1 = bb1 ]
    | bb1 = s0
      [ s0 = deref_Rc_LocalInvariant_PA_T_Global {_12} (fun (_ret: t_LocalInvariant_PA_T) -> [ &_10 <- _ret ] s1)
      | s1 = bb2 ]
    | bb2 = s0 [ s0 = deref_Ghost_ref_Tokens {tokens} (fun (_ret: t_Tokens) -> [ &_15 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = open_const_PA_T {_10} {_15} (fun (_ret: t_PA_T) -> [ &_8 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = new_ref_PA_T {_8} (fun (_ret: t_PA_T) -> [ &pa <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0 [ s0 = deref_Ghost_ref_PA_T {pa} (fun (_ret: t_PA_T) -> [ &_20 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0
      [ s0 = [ &_25 <- self.frag ] s1
      | s1 = deref_Ghost_Fragment_Id_Seq_T {_25} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_23 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0 [ s0 = contains_Id'1 {_20.auth} {_23} (fun (_ret: ()) -> [ &_18 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0 [ s0 = new_unit {_18} (fun (_ret: ()) -> [ &_17 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = [ &_28 <- self.permcell ] s1
      | s1 = get_inner_immut_T {_28} {index} {pa} (fun (_ret: t_T) -> [ &_26 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = s0 [ s0 = [ &_0 <- _26 ] s1 | s1 = return {_0} ] ]
    [ & _0: t_T = Any.any_l ()
    | & self: t_PersistentArray_T = self
    | & index: UInt64.t = index
    | & tokens: t_Tokens = tokens
    | & pa: t_PA_T = Any.any_l ()
    | & _8: t_PA_T = Any.any_l ()
    | & _10: t_LocalInvariant_PA_T = Any.any_l ()
    | & _12: t_Rc_LocalInvariant_PA_T_Global = Any.any_l ()
    | & _15: t_Tokens = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _18: () = Any.any_l ()
    | & _20: t_PA_T = Any.any_l ()
    | & _23: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _25: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _26: t_T = Any.any_l ()
    | & _28: t_Rc_PermCell_Inner_T_Global = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:get_immut result type invariant] inv_ref_T result}
      {[@expl:get_immut ensures] result = Seq.get (view_PersistentArray_T self) (UInt64.t'int index)}
      (! return {result}) ]
end
module M_implementation__impl_PersistentArray_T__get_inner_immut (* implementation::PersistentArray<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use map.Map
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Rc_PermCell_Inner_T_Global
  
  type t_PermCell_Inner_T
  
  predicate inv_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate invariant_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (self: t_Rc_PermCell_Inner_T_Global) =
    inv_Rc_PermCell_Inner_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_PermCell_Inner_T_Global
  
  predicate inv_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (_1: t_Rc_PermCell_Inner_T_Global) =
    invariant_ref_Rc_PermCell_Inner_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_PermCell_Inner_T_Global
  
  function view_Rc_PermCell_Inner_T_Global (self: t_Rc_PermCell_Inner_T_Global) : t_PermCell_Inner_T
  
  let rec deref_Rc_PermCell_Inner_T_Global (self_: t_Rc_PermCell_Inner_T_Global) (return (x: t_PermCell_Inner_T)) =
    {[@expl:deref 'self_' type invariant] inv_ref_Rc_PermCell_Inner_T_Global self_}
    any [ return (result: t_PermCell_Inner_T) -> {result = view_Rc_PermCell_Inner_T_Global self_} (! return {result}) ]
  
  type t_FMap_Id_PermCellOwn_Inner_T
  
  type t_Authority_Id_Seq_T
  
  type t_Id
  
  type t_PA_T = { perms: t_FMap_Id_PermCellOwn_Inner_T; auth: t_Authority_Id_Seq_T; depth: Map.map t_Id int }
  
  type t_PermCellOwn_Inner_T
  
  type t_Option_PermCellOwn_Inner_T = None | Some t_PermCellOwn_Inner_T
  
  function view_FMap_Id_PermCellOwn_Inner_T (self: t_FMap_Id_PermCellOwn_Inner_T) : Map.map t_Id t_Option_PermCellOwn_Inner_T
  
  function get_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_Option_PermCellOwn_Inner_T =
    Map.get (view_FMap_Id_PermCellOwn_Inner_T self) k
  
  meta "rewrite_def" function get_Id
  
  predicate contains_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) = get_Id self k <> None
  
  meta "rewrite_def" predicate contains_Id
  
  predicate inv_Id [@inline:trivial] (_1: t_Id) = true
  
  meta "rewrite_def" predicate inv_Id
  
  type t_Vec_T_Global
  
  type t_T
  
  type t_Inner_T = Direct t_Vec_T_Global | Link UInt64.t t_T t_Rc_PermCell_Inner_T_Global
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate inv_Inner_T (_1: t_Inner_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Inner_T [inv_Inner_T x]. inv_Inner_T x
      = match x with
        | Direct f0 -> inv_Vec_T_Global f0
        | Link index value next -> inv_T value /\ inv_Rc_PermCell_Inner_T_Global next
        end
  
  predicate invariant_ref_Inner_T [@inline:trivial] (self: t_Inner_T) = inv_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_Inner_T
  
  predicate inv_ref_Inner_T [@inline:trivial] (_1: t_Inner_T) = invariant_ref_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Inner_T
  
  function val_Inner_T (self: t_PermCellOwn_Inner_T) : t_Inner_T
  
  predicate invariant_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_ref_Inner_T (val_Inner_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_Inner_T
  
  predicate inv_PermCellOwn_Inner_T (_1: t_PermCellOwn_Inner_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellOwn_Inner_T [inv_PermCellOwn_Inner_T x]. inv_PermCellOwn_Inner_T x
      = invariant_PermCellOwn_Inner_T x
  
  predicate index_Mapping_PermCellOwn_Inner_T_bool [@inline:trivial] (self: Map.map t_PermCellOwn_Inner_T bool) (a: t_PermCellOwn_Inner_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_PermCellOwn_Inner_T_bool
  
  function such_that_PermCellOwn_Inner_T (p: Map.map t_PermCellOwn_Inner_T bool) : t_PermCellOwn_Inner_T
  
  axiom such_that_PermCellOwn_Inner_T_spec:
    forall p: Map.map t_PermCellOwn_Inner_T bool. (exists x: t_PermCellOwn_Inner_T. index_Mapping_PermCellOwn_Inner_T_bool p x)
      -> index_Mapping_PermCellOwn_Inner_T_bool p (such_that_PermCellOwn_Inner_T p)
  
  function unwrap_Option_PermCellOwn_Inner_T (self: t_Option_PermCellOwn_Inner_T) : t_PermCellOwn_Inner_T =
    match self with
      | Some x -> x
      | None -> such_that_PermCellOwn_Inner_T (fun (__0: t_PermCellOwn_Inner_T) -> true)
      end
  
  function lookup_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_PermCellOwn_Inner_T =
    unwrap_Option_PermCellOwn_Inner_T (get_Id self k)
  
  meta "rewrite_def" function lookup_Id
  
  function index_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) : t_PermCellOwn_Inner_T
   = lookup_Id self key
  
  meta "rewrite_def" function index_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    forall k: t_Id. contains_Id self k -> inv_Id k /\ inv_PermCellOwn_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self k)
  
  meta "rewrite_def" predicate invariant_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_FMap_Id_PermCellOwn_Inner_T (_1: t_FMap_Id_PermCellOwn_Inner_T)
  
  axiom inv_axiom'2 [@rewrite]:
    forall x: t_FMap_Id_PermCellOwn_Inner_T [inv_FMap_Id_PermCellOwn_Inner_T x]. inv_FMap_Id_PermCellOwn_Inner_T x
      = invariant_FMap_Id_PermCellOwn_Inner_T x
  
  predicate invariant_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T)
  
  predicate inv_Authority_Id_Seq_T (_1: t_Authority_Id_Seq_T)
  
  axiom inv_axiom'3: forall x: t_Authority_Id_Seq_T [inv_Authority_Id_Seq_T x]. inv_Authority_Id_Seq_T x
      -> invariant_Authority_Id_Seq_T x
  
  predicate inv_PA_T (_1: t_PA_T)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_PA_T [inv_PA_T x]. inv_PA_T x
      = (inv_FMap_Id_PermCellOwn_Inner_T x.perms /\ inv_Authority_Id_Seq_T x.auth)
  
  predicate invariant_ref_PA_T [@inline:trivial] (self: t_PA_T) = inv_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_PA_T
  
  predicate inv_ref_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_PA_T
  
  predicate invariant_Ghost_ref_PA_T [@inline:trivial] (self: t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PA_T
  
  predicate inv_Ghost_ref_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PA_T
  
  predicate invariant_ref_Ghost_ref_PA_T [@inline:trivial] (self: t_PA_T) = inv_Ghost_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_ref_PA_T
  
  predicate inv_ref_Ghost_ref_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_ref_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_ref_PA_T
  
  predicate invariant_ref_ref_PA_T [@inline:trivial] (self: t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_ref_PA_T
  
  predicate inv_ref_ref_PA_T [@inline:trivial] (_1: t_PA_T) = invariant_ref_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_ref_PA_T
  
  let rec deref_Ghost_ref_PA_T (self: t_PA_T) (return (x: t_PA_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_ref_PA_T self}
    any [ return (result: t_PA_T) -> {inv_ref_ref_PA_T result} {result = self} (! return {result}) ]
  
  function id_Inner_T (self: t_PermCell_Inner_T) : t_Id
  
  let rec id_ghost_Inner_T (self: t_PermCell_Inner_T) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = id_Inner_T self} (! return {result}) ]
  
  let rec deref_Ghost_Id (self: t_Id) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = self} (! return {result}) ]
  
  type t_Option_ref_PermCellOwn_Inner_T = None'0 | Some'0 t_PermCellOwn_Inner_T
  
  predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    inv_FMap_Id_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (_1: t_FMap_Id_PermCellOwn_Inner_T) =
    invariant_ref_FMap_Id_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_ref_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_Inner_T
  
  predicate inv_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_ref_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_Inner_T
  
  predicate inv_Option_ref_PermCellOwn_Inner_T (_1: t_Option_ref_PermCellOwn_Inner_T)
  
  axiom inv_axiom'5 [@rewrite]:
    forall x: t_Option_ref_PermCellOwn_Inner_T [inv_Option_ref_PermCellOwn_Inner_T x]. inv_Option_ref_PermCellOwn_Inner_T x
      = match x with
        | None'0 -> true
        | Some'0 f0 -> inv_ref_PermCellOwn_Inner_T f0
        end
  
  function map_Option_PermCellOwn_Inner_T (self: t_Option_PermCellOwn_Inner_T) (f: Map.map t_PermCellOwn_Inner_T t_PermCellOwn_Inner_T) : t_Option_ref_PermCellOwn_Inner_T
   = match self with
      | None -> None'0
      | Some x -> Some'0 (Map.get f x)
      end
  
  let rec get_ghost_Id (self: t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id)
    (return (x: t_Option_ref_PermCellOwn_Inner_T)) =
    {[@expl:get_ghost 'self' type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T self}
    any
    [ return (result: t_Option_ref_PermCellOwn_Inner_T) -> {inv_Option_ref_PermCellOwn_Inner_T result}
      {result = map_Option_PermCellOwn_Inner_T (get_Id self key) (fun (v: t_PermCellOwn_Inner_T) -> v)}
      (! return {result}) ]
  
  let rec unwrap_ref_PermCellOwn_Inner_T (self_: t_Option_ref_PermCellOwn_Inner_T) (return (x: t_PermCellOwn_Inner_T)) =
    {[@expl:unwrap 'self_' type invariant] inv_Option_ref_PermCellOwn_Inner_T self_}
    {[@expl:unwrap requires] self_ <> None'0}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_ref_PermCellOwn_Inner_T result}
      {Some'0 result = self_}
      (! return {result}) ]
  
  predicate invariant_Ghost_ref_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_ref_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PermCellOwn_Inner_T
  
  predicate inv_Ghost_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_Ghost_ref_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PermCellOwn_Inner_T
  
  let rec new_ref_PermCellOwn_Inner_T (x: t_PermCellOwn_Inner_T) (return (x'0: t_PermCellOwn_Inner_T)) =
    {[@expl:new 'x' type invariant] inv_ref_PermCellOwn_Inner_T x}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_Ghost_ref_PermCellOwn_Inner_T result}
      {result = x}
      (! return {result}) ]
  
  function id_Inner_T'0 (self: t_PermCellOwn_Inner_T) : t_Id
  
  function view_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) : t_Inner_T = val_Inner_T self
  
  meta "rewrite_def" function view_PermCellOwn_Inner_T
  
  let rec borrow_Inner_T (self: t_PermCell_Inner_T) (perm: t_PermCellOwn_Inner_T) (return (x: t_Inner_T)) =
    {[@expl:borrow 'perm' type invariant] inv_Ghost_ref_PermCellOwn_Inner_T perm}
    {[@expl:borrow requires] id_Inner_T self = id_Inner_T'0 perm}
    any
    [ return (result: t_Inner_T) -> {inv_ref_Inner_T result}
      {result = view_PermCellOwn_Inner_T perm}
      (! return {result}) ]
  
  let rec elim_Link (input: t_Inner_T) (ret (index: UInt64.t) (value: t_T) (next: t_Rc_PermCell_Inner_T_Global)) = any
    [ good (index: UInt64.t) (value: t_T) (next: t_Rc_PermCell_Inner_T_Global) -> {Link index value next = input}
      (! ret {index} {value} {next})
    | bad ->
    {forall index: UInt64.t, value: t_T, next: t_Rc_PermCell_Inner_T_Global [Link index value next: t_Inner_T]. Link index value next
        <> input}
      (! {false}
      any) ]
  
  let rec elim_Direct (input: t_Inner_T) (ret (f0: t_Vec_T_Global)) = any
    [ good (f0: t_Vec_T_Global) -> {Direct f0 = input} (! ret {f0})
    | bad -> {forall f0: t_Vec_T_Global [Direct f0: t_Inner_T]. Direct f0 <> input} (! {false} any) ]
  
  predicate invariant_ref_Vec_T_Global [@inline:trivial] (self: t_Vec_T_Global) = inv_Vec_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global
  
  predicate inv_ref_Vec_T_Global [@inline:trivial] (_1: t_Vec_T_Global) = invariant_ref_Vec_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  let rec index_Vec_T_Global (self_: t_Vec_T_Global) (ix: UInt64.t) (return (x: t_T)) =
    {[@expl:index 'self_' type invariant] inv_ref_Vec_T_Global self_}
    {[@expl:index requires] in_bounds_usize ix (view_Vec_T_Global self_)}
    any
    [ return (result: t_T) -> {inv_ref_T result}
      {has_value_usize ix (view_Vec_T_Global self_) result}
      (! return {result}) ]
  
  function id_Id (self: t_Authority_Id_Seq_T) : t_Id
  
  type t_FMap_Id_Seq_T
  
  type t_Option_Seq_T = None'1 | Some'1 (Seq.seq t_T)
  
  function view_FMap_Id_Seq_T (self: t_FMap_Id_Seq_T) : Map.map t_Id t_Option_Seq_T
  
  function get_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : t_Option_Seq_T =
    Map.get (view_FMap_Id_Seq_T self) k
  
  meta "rewrite_def" function get_Id'0
  
  predicate contains_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) = get_Id'0 self k <> None'1
  
  meta "rewrite_def" predicate contains_Id'0
  
  function view_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T) : t_FMap_Id_Seq_T
  
  predicate index_Mapping_Seq_T_bool [@inline:trivial] (self: Map.map (Seq.seq t_T) bool) (a: Seq.seq t_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_Seq_T_bool
  
  function such_that_Seq_T (p: Map.map (Seq.seq t_T) bool) : Seq.seq t_T
  
  axiom such_that_Seq_T_spec:
    forall p: Map.map (Seq.seq t_T) bool. (exists x: Seq.seq t_T. index_Mapping_Seq_T_bool p x)
      -> index_Mapping_Seq_T_bool p (such_that_Seq_T p)
  
  function unwrap_Option_Seq_T (self: t_Option_Seq_T) : Seq.seq t_T = match self with
      | Some'1 x -> x
      | None'1 -> such_that_Seq_T (fun (__0: Seq.seq t_T) -> true)
      end
  
  function lookup_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : Seq.seq t_T =
    unwrap_Option_Seq_T (get_Id'0 self k)
  
  meta "rewrite_def" function lookup_Id'0
  
  function index_FMap_Id_Seq_T [@inline:trivial] (self: t_FMap_Id_Seq_T) (key: t_Id) : Seq.seq t_T =
    lookup_Id'0 self key
  
  meta "rewrite_def" function index_FMap_Id_Seq_T
  
  function index_Mapping_Id_Int [@inline:trivial] (self: Map.map t_Id int) (a: t_Id) : int = Map.get self a
  
  meta "rewrite_def" function index_Mapping_Id_Int
  
  predicate partial_invariant_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    id_Id self.auth = resource_id
    /\ (forall id: t_Id. contains_Id'0 (view_Authority_Id_Seq_T self.auth) id /\ contains_Id self.perms id
      -> id_Inner_T'0 (index_FMap_Id_PermCellOwn_Inner_T self.perms id) = id
      /\ match val_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self.perms id) with
        | Direct v -> index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id = view_Vec_T_Global v
        | Link index value next -> contains_Id'0 (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))
        /\ index_Mapping_Id_Int self.depth id
          > index_Mapping_Id_Int self.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))
        /\ UInt64.t'int index
          < Seq.length (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next)))
        /\ index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id
        = Seq.set (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))) (UInt64.t'int index) value
        end)
  
  meta "rewrite_def" predicate partial_invariant_T
  
  predicate protocol_PA_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    partial_invariant_T self resource_id
    /\ (forall id: t_Id. contains_Id'0 (view_Authority_Id_Seq_T self.auth) id -> contains_Id self.perms id)
  
  meta "rewrite_def" predicate protocol_PA_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get_inner_immut_T (inner: t_Rc_PermCell_Inner_T_Global) (i: UInt64.t) (pa: t_PA_T) (return (x: t_T)) =
    {[@expl:get_inner_immut 'inner' type invariant] inv_ref_Rc_PermCell_Inner_T_Global inner}
    {[@expl:get_inner_immut 'pa' type invariant] inv_Ghost_ref_PA_T pa}
    {[@expl:get_inner_immut requires #0] exists p: t_Id. protocol_PA_T pa p}
    {[@expl:get_inner_immut requires #1] contains_Id'0 (view_Authority_Id_Seq_T pa.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global inner))}
    {[@expl:get_inner_immut requires #2] UInt64.t'int i
    < Seq.length (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T pa.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global inner)))}
    (! bb0
    [ bb0 = s0
      [ s0 = deref_Rc_PermCell_Inner_T_Global {inner} (fun (_ret: t_PermCell_Inner_T) -> [ &_11 <- _ret ] s1)
      | s1 = bb1 ]
    | bb1 = s0 [ s0 = deref_Ghost_ref_PA_T {pa} (fun (_ret: t_PA_T) -> [ &_18 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = deref_Rc_PermCell_Inner_T_Global {inner} (fun (_ret: t_PermCell_Inner_T) -> [ &_26 <- _ret ] s1)
      | s1 = bb3 ]
    | bb3 = s0 [ s0 = id_ghost_Inner_T {_26} (fun (_ret: t_Id) -> [ &_24 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = deref_Ghost_Id {_24} (fun (_ret: t_Id) -> [ &_22 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = [ &_21 <- _22 ] s1
      | s1 = get_ghost_Id {_18.perms} {_21} (fun (_ret: t_Option_ref_PermCellOwn_Inner_T) -> [ &_16 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0
      [ s0 = unwrap_ref_PermCellOwn_Inner_T {_16} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_15 <- _ret ] s1)
      | s1 = bb7 ]
    | bb7 = s0
      [ s0 = new_ref_PermCellOwn_Inner_T {_15} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_13 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0 [ s0 = borrow_Inner_T {_11} {_13} (fun (_ret: t_Inner_T) -> [ &_9 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = any
      [ br0 (x0: t_Vec_T_Global) -> {_9 = Direct x0} (! bb15)
      | br1 (x0: UInt64.t) (x1: t_T) (x2: t_Rc_PermCell_Inner_T_Global) -> {_9 = Link x0 x1 x2} (! bb14) ]
    | bb14 = s0
      [ s0 = elim_Link {_9}
          (fun (rindex: UInt64.t) (rvalue: t_T) (rnext: t_Rc_PermCell_Inner_T_Global) -> [ &index <- rindex ] s1)
      | s1 = [ &index'0 <- index ] s2
      | s2 = elim_Link {_9}
          (fun (rindex: UInt64.t) (rvalue: t_T) (rnext: t_Rc_PermCell_Inner_T_Global) -> [ &value <- rvalue ] s3)
      | s3 = [ &value'0 <- value ] s4
      | s4 = [ &_40 <- i = index'0 ] s5
      | s5 = any [ br0 -> {_40 = false} (! bb13) | br1 -> {_40} (! bb17) ] ]
    | bb17 = s0 [ s0 = [ &_8 <- value ] s1 | s1 = bb20 ]
    | bb13 = s0
      [ s0 = elim_Link {_9}
          (fun (rindex: UInt64.t) (rvalue: t_T) (rnext: t_Rc_PermCell_Inner_T_Global) -> [ &next <- rnext ] s1)
      | s1 = get_inner_immut_T {next} {i} {pa} (fun (_ret: t_T) -> [ &_45 <- _ret ] s2)
      | s2 = bb19 ]
    | bb19 = s0 [ s0 = [ &_44 <- _45 ] s1 | s1 = [ &_8 <- _44 ] s2 | s2 = bb20 ]
    | bb15 = s0
      [ s0 = elim_Direct {_9} (fun (r0: t_Vec_T_Global) -> [ &v <- r0 ] s1)
      | s1 = index_Vec_T_Global {v} {i} (fun (_ret: t_T) -> [ &_33 <- _ret ] s2)
      | s2 = bb16 ]
    | bb16 = s0 [ s0 = [ &_32 <- _33 ] s1 | s1 = [ &_8 <- _32 ] s2 | s2 = bb20 ]
    | bb20 = s0 [ s0 = [ &_0 <- _8 ] s1 | s1 = return {_0} ] ]
    [ & _0: t_T = Any.any_l ()
    | & inner: t_Rc_PermCell_Inner_T_Global = inner
    | & i: UInt64.t = i
    | & pa: t_PA_T = pa
    | & _8: t_T = Any.any_l ()
    | & _9: t_Inner_T = Any.any_l ()
    | & _11: t_PermCell_Inner_T = Any.any_l ()
    | & _13: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _15: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _16: t_Option_ref_PermCellOwn_Inner_T = Any.any_l ()
    | & _18: t_PA_T = Any.any_l ()
    | & _21: t_Id = Any.any_l ()
    | & _22: t_Id = Any.any_l ()
    | & _24: t_Id = Any.any_l ()
    | & _26: t_PermCell_Inner_T = Any.any_l ()
    | & v: t_Vec_T_Global = Any.any_l ()
    | & _32: t_T = Any.any_l ()
    | & _33: t_T = Any.any_l ()
    | & index: UInt64.t = Any.any_l ()
    | & index'0: UInt64.t = Any.any_l ()
    | & value: t_T = Any.any_l ()
    | & value'0: t_T = Any.any_l ()
    | & _40: bool = Any.any_l ()
    | & next: t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & _44: t_T = Any.any_l ()
    | & _45: t_T = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:get_inner_immut result type invariant] inv_ref_T result}
      {[@expl:get_inner_immut ensures] result
      = Seq.get (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T pa.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global inner))) (UInt64.t'int i)}
      (! return {result}) ]
end
module M_implementation__impl_PersistentArray_T__get (* implementation::PersistentArray<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use creusot.prelude.MutBorrow
  use map.Map
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.Any
  use set.Set
  
  type t_LocalInvariant_PA_T
  
  type t_Id
  
  function public_PA_T (self: t_LocalInvariant_PA_T) : t_Id
  
  type t_Rc_LocalInvariant_PA_T_Global
  
  function view_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) : t_LocalInvariant_PA_T
  
  type t_Rc_PermCell_Inner_T_Global
  
  type t_Fragment_Id_Seq_T
  
  type t_PersistentArray_T = {
    permcell: t_Rc_PermCell_Inner_T_Global;
    frag: t_Fragment_Id_Seq_T;
    inv: t_Rc_LocalInvariant_PA_T_Global }
  
  type t_FMap_Id_PermCellOwn_Inner_T
  
  type t_Authority_Id_Seq_T
  
  type t_PA_T = { perms: t_FMap_Id_PermCellOwn_Inner_T; auth: t_Authority_Id_Seq_T; depth: Map.map t_Id int }
  
  type t_PermCellOwn_Inner_T
  
  type t_Option_PermCellOwn_Inner_T = None | Some t_PermCellOwn_Inner_T
  
  function view_FMap_Id_PermCellOwn_Inner_T (self: t_FMap_Id_PermCellOwn_Inner_T) : Map.map t_Id t_Option_PermCellOwn_Inner_T
  
  function get_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_Option_PermCellOwn_Inner_T =
    Map.get (view_FMap_Id_PermCellOwn_Inner_T self) k
  
  meta "rewrite_def" function get_Id
  
  predicate contains_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) = get_Id self k <> None
  
  meta "rewrite_def" predicate contains_Id
  
  predicate inv_Id [@inline:trivial] (_1: t_Id) = true
  
  meta "rewrite_def" predicate inv_Id
  
  type t_Vec_T_Global
  
  type t_T
  
  type t_Inner_T = Direct t_Vec_T_Global | Link UInt64.t t_T t_Rc_PermCell_Inner_T_Global
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate inv_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate inv_Inner_T (_1: t_Inner_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Inner_T [inv_Inner_T x]. inv_Inner_T x
      = match x with
        | Direct f0 -> inv_Vec_T_Global f0
        | Link index value next -> inv_T value /\ inv_Rc_PermCell_Inner_T_Global next
        end
  
  predicate invariant_ref_Inner_T [@inline:trivial] (self: t_Inner_T) = inv_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_Inner_T
  
  predicate inv_ref_Inner_T [@inline:trivial] (_1: t_Inner_T) = invariant_ref_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Inner_T
  
  function val_Inner_T (self: t_PermCellOwn_Inner_T) : t_Inner_T
  
  predicate invariant_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_ref_Inner_T (val_Inner_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_Inner_T
  
  predicate inv_PermCellOwn_Inner_T (_1: t_PermCellOwn_Inner_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellOwn_Inner_T [inv_PermCellOwn_Inner_T x]. inv_PermCellOwn_Inner_T x
      = invariant_PermCellOwn_Inner_T x
  
  predicate index_Mapping_PermCellOwn_Inner_T_bool [@inline:trivial] (self: Map.map t_PermCellOwn_Inner_T bool) (a: t_PermCellOwn_Inner_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_PermCellOwn_Inner_T_bool
  
  function such_that_PermCellOwn_Inner_T (p: Map.map t_PermCellOwn_Inner_T bool) : t_PermCellOwn_Inner_T
  
  axiom such_that_PermCellOwn_Inner_T_spec:
    forall p: Map.map t_PermCellOwn_Inner_T bool. (exists x: t_PermCellOwn_Inner_T. index_Mapping_PermCellOwn_Inner_T_bool p x)
      -> index_Mapping_PermCellOwn_Inner_T_bool p (such_that_PermCellOwn_Inner_T p)
  
  function unwrap_Option_PermCellOwn_Inner_T (self: t_Option_PermCellOwn_Inner_T) : t_PermCellOwn_Inner_T =
    match self with
      | Some x -> x
      | None -> such_that_PermCellOwn_Inner_T (fun (__0: t_PermCellOwn_Inner_T) -> true)
      end
  
  function lookup_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_PermCellOwn_Inner_T =
    unwrap_Option_PermCellOwn_Inner_T (get_Id self k)
  
  meta "rewrite_def" function lookup_Id
  
  function index_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) : t_PermCellOwn_Inner_T
   = lookup_Id self key
  
  meta "rewrite_def" function index_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    forall k: t_Id. contains_Id self k -> inv_Id k /\ inv_PermCellOwn_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self k)
  
  meta "rewrite_def" predicate invariant_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_FMap_Id_PermCellOwn_Inner_T (_1: t_FMap_Id_PermCellOwn_Inner_T)
  
  axiom inv_axiom'2 [@rewrite]:
    forall x: t_FMap_Id_PermCellOwn_Inner_T [inv_FMap_Id_PermCellOwn_Inner_T x]. inv_FMap_Id_PermCellOwn_Inner_T x
      = invariant_FMap_Id_PermCellOwn_Inner_T x
  
  predicate invariant_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T)
  
  predicate inv_Authority_Id_Seq_T (_1: t_Authority_Id_Seq_T)
  
  axiom inv_axiom'3: forall x: t_Authority_Id_Seq_T [inv_Authority_Id_Seq_T x]. inv_Authority_Id_Seq_T x
      -> invariant_Authority_Id_Seq_T x
  
  predicate inv_PA_T (_1: t_PA_T)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_PA_T [inv_PA_T x]. inv_PA_T x
      = (inv_FMap_Id_PermCellOwn_Inner_T x.perms /\ inv_Authority_Id_Seq_T x.auth)
  
  predicate invariant_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) =
    inv_PA_T self.current /\ inv_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PA_T
  
  predicate inv_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_PA_T
  
  predicate invariant_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PA_T
  
  predicate inv_Ghost_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PA_T
  
  predicate invariant_ref_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) = inv_Ghost_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_ref_PA_T
  
  predicate inv_ref_Ghost_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_ref_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_ref_PA_T
  
  predicate invariant_ref_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_ref_ref_PA_T
  
  predicate inv_ref_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_ref_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_ref_PA_T
  
  let rec deref_Ghost_ref_PA_T (self: MutBorrow.t t_PA_T) (return (x: MutBorrow.t t_PA_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_ref_PA_T self}
    any [ return (result: MutBorrow.t t_PA_T) -> {inv_ref_ref_PA_T result} {result = self} (! return {result}) ]
  
  type closure0 = { c0: t_PersistentArray_T; c1: t_Id; c2: UInt64.t }
  
  predicate invariant_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T)
  
  predicate inv_Fragment_Id_Seq_T (_1: t_Fragment_Id_Seq_T)
  
  axiom inv_axiom'5: forall x: t_Fragment_Id_Seq_T [inv_Fragment_Id_Seq_T x]. inv_Fragment_Id_Seq_T x
      -> invariant_Fragment_Id_Seq_T x
  
  predicate invariant_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Fragment_Id_Seq_T
  
  predicate inv_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Fragment_Id_Seq_T
  
  predicate invariant_ref_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) =
    inv_Ghost_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Fragment_Id_Seq_T
  
  predicate inv_ref_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_ref_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Fragment_Id_Seq_T
  
  predicate invariant_ref_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Fragment_Id_Seq_T
  
  predicate inv_ref_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) = invariant_ref_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Fragment_Id_Seq_T
  
  let rec deref_Ghost_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) (return (x: t_Fragment_Id_Seq_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_Fragment_Id_Seq_T self}
    any
    [ return (result: t_Fragment_Id_Seq_T) -> {inv_ref_Fragment_Id_Seq_T result} {result = self} (! return {result}) ]
  
  predicate invariant_ref_Authority_Id_Seq_T [@inline:trivial] (self: t_Authority_Id_Seq_T) =
    inv_Authority_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_ref_Authority_Id_Seq_T
  
  predicate inv_ref_Authority_Id_Seq_T [@inline:trivial] (_1: t_Authority_Id_Seq_T) =
    invariant_ref_Authority_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_ref_Authority_Id_Seq_T
  
  function id_Id (self: t_Authority_Id_Seq_T) : t_Id
  
  function id_Id'0 (self: t_Fragment_Id_Seq_T) : t_Id
  
  type t_FMap_Id_Seq_T
  
  type t_Option_Seq_T = None'0 | Some'0 (Seq.seq t_T)
  
  function view_FMap_Id_Seq_T (self: t_FMap_Id_Seq_T) : Map.map t_Id t_Option_Seq_T
  
  function get_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : t_Option_Seq_T =
    Map.get (view_FMap_Id_Seq_T self) k
  
  meta "rewrite_def" function get_Id'0
  
  function view_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T) : t_FMap_Id_Seq_T
  
  type tup2_Id_Seq_T = { f0: t_Id; f1: Seq.seq t_T }
  
  function view_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) : tup2_Id_Seq_T
  
  let rec contains_Id'0 (self: t_Authority_Id_Seq_T) (frag'0: t_Fragment_Id_Seq_T) (return (x: ())) =
    {[@expl:contains 'self' type invariant] inv_ref_Authority_Id_Seq_T self}
    {[@expl:contains 'frag' type invariant] inv_ref_Fragment_Id_Seq_T frag'0}
    {[@expl:contains requires] id_Id self = id_Id'0 frag'0}
    any
    [ return (result: ()) -> {get_Id'0 (view_Authority_Id_Seq_T self) (view_Fragment_Id_Seq_T frag'0).f0
      = Some'0 ((view_Fragment_Id_Seq_T frag'0).f1)}
      (! return {result}) ]
  
  let rec new_unit (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  predicate invariant_ref_Ghost_ref_PA_T'0 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t t_PA_T)) =
    inv_Ghost_ref_PA_T self.current /\ inv_Ghost_ref_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_ref_PA_T'0
  
  predicate inv_ref_Ghost_ref_PA_T'0 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) =
    invariant_ref_Ghost_ref_PA_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_ref_PA_T'0
  
  predicate invariant_ref_ref_PA_T'0 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t t_PA_T)) =
    inv_ref_PA_T self.current /\ inv_ref_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_ref_PA_T'0
  
  predicate inv_ref_ref_PA_T'0 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) = invariant_ref_ref_PA_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_ref_PA_T'0
  
  let rec deref_mut_Ghost_ref_PA_T (self: MutBorrow.t (MutBorrow.t t_PA_T))
    (return (x: MutBorrow.t (MutBorrow.t t_PA_T))) =
    {[@expl:deref_mut 'self' type invariant] inv_ref_Ghost_ref_PA_T'0 self}
    any
    [ return (result: MutBorrow.t (MutBorrow.t t_PA_T)) -> {inv_ref_ref_PA_T'0 result}
      {result = self}
      (! return {result}) ]
  
  predicate resolve_ref_ref_PA_T [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_ref_PA_T
  
  let rec new_ref_PA_T (x: MutBorrow.t t_PA_T) (return (x'0: MutBorrow.t t_PA_T)) =
    {[@expl:new 'x' type invariant] inv_ref_PA_T x}
    any [ return (result: MutBorrow.t t_PA_T) -> {inv_Ghost_ref_PA_T result} {result = x} (! return {result}) ]
  
  predicate resolve_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PA_T
  
  predicate invariant_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (self: t_Rc_PermCell_Inner_T_Global) =
    inv_Rc_PermCell_Inner_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_PermCell_Inner_T_Global
  
  predicate inv_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (_1: t_Rc_PermCell_Inner_T_Global) =
    invariant_ref_Rc_PermCell_Inner_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_PermCell_Inner_T_Global
  
  predicate contains_Id'1 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) = get_Id'0 self k <> None'0
  
  meta "rewrite_def" predicate contains_Id'1
  
  function id_Inner_T (self: t_PermCellOwn_Inner_T) : t_Id
  
  predicate index_Mapping_Seq_T_bool [@inline:trivial] (self: Map.map (Seq.seq t_T) bool) (a: Seq.seq t_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_Seq_T_bool
  
  function such_that_Seq_T (p: Map.map (Seq.seq t_T) bool) : Seq.seq t_T
  
  axiom such_that_Seq_T_spec:
    forall p: Map.map (Seq.seq t_T) bool. (exists x: Seq.seq t_T. index_Mapping_Seq_T_bool p x)
      -> index_Mapping_Seq_T_bool p (such_that_Seq_T p)
  
  function unwrap_Option_Seq_T (self: t_Option_Seq_T) : Seq.seq t_T = match self with
      | Some'0 x -> x
      | None'0 -> such_that_Seq_T (fun (__0: Seq.seq t_T) -> true)
      end
  
  function lookup_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : Seq.seq t_T =
    unwrap_Option_Seq_T (get_Id'0 self k)
  
  meta "rewrite_def" function lookup_Id'0
  
  function index_FMap_Id_Seq_T [@inline:trivial] (self: t_FMap_Id_Seq_T) (key: t_Id) : Seq.seq t_T =
    lookup_Id'0 self key
  
  meta "rewrite_def" function index_FMap_Id_Seq_T
  
  type t_PermCell_Inner_T
  
  function id_Inner_T'0 (self: t_PermCell_Inner_T) : t_Id
  
  function view_Rc_PermCell_Inner_T_Global (self: t_Rc_PermCell_Inner_T_Global) : t_PermCell_Inner_T
  
  function index_Mapping_Id_Int [@inline:trivial] (self: Map.map t_Id int) (a: t_Id) : int = Map.get self a
  
  meta "rewrite_def" function index_Mapping_Id_Int
  
  predicate partial_invariant_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    id_Id self.auth = resource_id
    /\ (forall id: t_Id. contains_Id'1 (view_Authority_Id_Seq_T self.auth) id /\ contains_Id self.perms id
      -> id_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self.perms id) = id
      /\ match val_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self.perms id) with
        | Direct v -> index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id = view_Vec_T_Global v
        | Link index value next -> contains_Id'1 (view_Authority_Id_Seq_T self.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global next))
        /\ index_Mapping_Id_Int self.depth id
          > index_Mapping_Id_Int self.depth (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global next))
        /\ UInt64.t'int index
          < Seq.length (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global next)))
        /\ index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id
        = Seq.set (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global next))) (UInt64.t'int index) value
        end)
  
  meta "rewrite_def" predicate partial_invariant_T
  
  function fin_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) : t_PA_T = self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PA_T
  
  let rec reroot_T (cur: t_Rc_PermCell_Inner_T_Global) (auth_id: t_Id) (pa: MutBorrow.t t_PA_T) (return (x: ())) =
    {[@expl:reroot 'cur' type invariant] inv_ref_Rc_PermCell_Inner_T_Global cur}
    {[@expl:reroot 'pa' type invariant] inv_Ghost_ref_PA_T pa}
    {[@expl:reroot requires #0] partial_invariant_T pa.current auth_id}
    {[@expl:reroot requires #1] contains_Id'1 (view_Authority_Id_Seq_T pa.current.auth) (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global cur))}
    {[@expl:reroot requires #2] forall id: t_Id. contains_Id'1 (view_Authority_Id_Seq_T pa.current.auth) id
        /\ index_Mapping_Id_Int pa.current.depth id
        <= index_Mapping_Id_Int pa.current.depth (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global cur))
      -> contains_Id pa.current.perms id}
    any
    [ return (result: ()) -> {partial_invariant_T (fin_Ghost_ref_PA_T pa) auth_id}
      {(fin_Ghost_ref_PA_T pa).auth = pa.current.auth}
      {forall id: t_Id. index_Mapping_Id_Int pa.current.depth id
          > index_Mapping_Id_Int pa.current.depth (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global cur))
        -> get_Id pa.current.perms id = get_Id (fin_Ghost_ref_PA_T pa).perms id
        /\ index_Mapping_Id_Int pa.current.depth id = index_Mapping_Id_Int (fin_Ghost_ref_PA_T pa).depth id}
      {forall id: t_Id. contains_Id (fin_Ghost_ref_PA_T pa).perms id = contains_Id pa.current.perms id}
      {match val_Inner_T (index_FMap_Id_PermCellOwn_Inner_T (fin_Ghost_ref_PA_T pa).perms (id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global cur))) with
        | Direct _ -> true
        | Link _ _ _ -> false
        end}
      (! return {result}) ]
  
  let rec into_inner_ref_PA_T (self: MutBorrow.t t_PA_T) (return (x: MutBorrow.t t_PA_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_ref_PA_T self}
    any [ return (result: MutBorrow.t t_PA_T) -> {inv_ref_PA_T result} {result = self} (! return {result}) ]
  
  let rec deref_Rc_PermCell_Inner_T_Global (self_: t_Rc_PermCell_Inner_T_Global) (return (x: t_PermCell_Inner_T)) =
    {[@expl:deref 'self_' type invariant] inv_ref_Rc_PermCell_Inner_T_Global self_}
    any [ return (result: t_PermCell_Inner_T) -> {result = view_Rc_PermCell_Inner_T_Global self_} (! return {result}) ]
  
  let rec id_ghost_Inner_T (self: t_PermCell_Inner_T) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = id_Inner_T'0 self} (! return {result}) ]
  
  let rec deref_Ghost_Id (self: t_Id) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = self} (! return {result}) ]
  
  type t_Option_ref_PermCellOwn_Inner_T = None'1 | Some'1 t_PermCellOwn_Inner_T
  
  predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    inv_FMap_Id_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (_1: t_FMap_Id_PermCellOwn_Inner_T) =
    invariant_ref_FMap_Id_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_ref_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_Inner_T
  
  predicate inv_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_ref_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_Inner_T
  
  predicate inv_Option_ref_PermCellOwn_Inner_T (_1: t_Option_ref_PermCellOwn_Inner_T)
  
  axiom inv_axiom'6 [@rewrite]:
    forall x: t_Option_ref_PermCellOwn_Inner_T [inv_Option_ref_PermCellOwn_Inner_T x]. inv_Option_ref_PermCellOwn_Inner_T x
      = match x with
        | None'1 -> true
        | Some'1 f0'0 -> inv_ref_PermCellOwn_Inner_T f0'0
        end
  
  function map_Option_PermCellOwn_Inner_T (self: t_Option_PermCellOwn_Inner_T) (f: Map.map t_PermCellOwn_Inner_T t_PermCellOwn_Inner_T) : t_Option_ref_PermCellOwn_Inner_T
   = match self with
      | None -> None'1
      | Some x -> Some'1 (Map.get f x)
      end
  
  let rec get_ghost_Id (self: t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id)
    (return (x: t_Option_ref_PermCellOwn_Inner_T)) =
    {[@expl:get_ghost 'self' type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T self}
    any
    [ return (result: t_Option_ref_PermCellOwn_Inner_T) -> {inv_Option_ref_PermCellOwn_Inner_T result}
      {result = map_Option_PermCellOwn_Inner_T (get_Id self key) (fun (v: t_PermCellOwn_Inner_T) -> v)}
      (! return {result}) ]
  
  let rec unwrap_ref_PermCellOwn_Inner_T (self_: t_Option_ref_PermCellOwn_Inner_T) (return (x: t_PermCellOwn_Inner_T)) =
    {[@expl:unwrap 'self_' type invariant] inv_Option_ref_PermCellOwn_Inner_T self_}
    {[@expl:unwrap requires] self_ <> None'1}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_ref_PermCellOwn_Inner_T result}
      {Some'1 result = self_}
      (! return {result}) ]
  
  predicate invariant_Ghost_ref_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_ref_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PermCellOwn_Inner_T
  
  predicate inv_Ghost_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_Ghost_ref_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PermCellOwn_Inner_T
  
  let rec new_ref_PermCellOwn_Inner_T (x: t_PermCellOwn_Inner_T) (return (x'0: t_PermCellOwn_Inner_T)) =
    {[@expl:new 'x' type invariant] inv_ref_PermCellOwn_Inner_T x}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_Ghost_ref_PermCellOwn_Inner_T result}
      {result = x}
      (! return {result}) ]
  
  function view_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) : t_Inner_T = val_Inner_T self
  
  meta "rewrite_def" function view_PermCellOwn_Inner_T
  
  let rec borrow_Inner_T (self: t_PermCell_Inner_T) (perm: t_PermCellOwn_Inner_T) (return (x: t_Inner_T)) =
    {[@expl:borrow 'perm' type invariant] inv_Ghost_ref_PermCellOwn_Inner_T perm}
    {[@expl:borrow requires] id_Inner_T'0 self = id_Inner_T perm}
    any
    [ return (result: t_Inner_T) -> {inv_ref_Inner_T result}
      {result = view_PermCellOwn_Inner_T perm}
      (! return {result}) ]
  
  let rec elim_Direct (input: t_Inner_T) (ret (f0'0: t_Vec_T_Global)) = any
    [ good (f0'0: t_Vec_T_Global) -> {Direct f0'0 = input} (! ret {f0'0})
    | bad -> {forall f0'0: t_Vec_T_Global [Direct f0'0: t_Inner_T]. Direct f0'0 <> input} (! {false} any) ]
  
  predicate invariant_ref_Vec_T_Global [@inline:trivial] (self: t_Vec_T_Global) = inv_Vec_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global
  
  predicate inv_ref_Vec_T_Global [@inline:trivial] (_1: t_Vec_T_Global) = invariant_ref_Vec_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: Slice64.slice t_T) = inv_slice_T self
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  let rec deref_Vec_T_Global (self_: t_Vec_T_Global) (return (x: Slice64.slice t_T)) =
    {[@expl:deref 'self_' type invariant] inv_ref_Vec_T_Global self_}
    any
    [ return (result: Slice64.slice t_T) -> {inv_ref_slice_T result}
      {Slice64.view result = view_Vec_T_Global self_}
      (! return {result}) ]
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  let rec get_unchecked_T (self_: Slice64.slice t_T) (ix: UInt64.t) (return (x: t_T)) =
    {[@expl:get_unchecked 'self_' type invariant] inv_ref_slice_T self_}
    {[@expl:get_unchecked requires] in_bounds_usize ix (Slice64.view self_)}
    any
    [ return (result: t_T) -> {inv_ref_T result} {has_value_usize ix (Slice64.view self_) result} (! return {result}) ]
  
  function namespace_PA_T (self: t_LocalInvariant_PA_T) : t_Namespace
  
  predicate invariant_PersistentArray_T (self: t_PersistentArray_T) =
    (view_Fragment_Id_Seq_T self.frag).f0 = id_Inner_T'0 (view_Rc_PermCell_Inner_T_Global self.permcell)
    /\ id_Id'0 self.frag = public_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv)
    /\ namespace_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv) = Namespace_PARRAY 0
  
  predicate inv_Rc_LocalInvariant_PA_T_Global (_1: t_Rc_LocalInvariant_PA_T_Global)
  
  predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_PersistentArray_T (_1: t_PersistentArray_T)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_PersistentArray_T [inv_PersistentArray_T x]. inv_PersistentArray_T x
      = (invariant_PersistentArray_T x
      /\ inv_Rc_PermCell_Inner_T_Global x.permcell
      /\ inv_Ghost_Fragment_Id_Seq_T x.frag /\ inv_Ghost_Rc_LocalInvariant_PA_T_Global x.inv)
  
  predicate invariant_ref_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) = inv_PersistentArray_T self
  
  meta "rewrite_def" predicate invariant_ref_PersistentArray_T
  
  predicate inv_ref_PersistentArray_T [@inline:trivial] (_1: t_PersistentArray_T) = invariant_ref_PersistentArray_T _1
  
  meta "rewrite_def" predicate inv_ref_PersistentArray_T
  
  predicate inv_closure0 [@inline:trivial] (_1: closure0) =
    let {c0 = x0; c1 = x1; c2 = x2} = _1 in inv_ref_PersistentArray_T x0
  
  meta "rewrite_def" predicate inv_closure0
  
  let rec closure0 [@coma:extspec] (self: closure0) (pa: MutBorrow.t t_PA_T) (return (x: t_T)) = bb0
    [ bb0 = s0 [ s0 = deref_Ghost_ref_PA_T {pa} (fun (_ret: MutBorrow.t t_PA_T) -> [ &_6 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_11 <- self.c0.frag ] s1
      | s1 = deref_Ghost_Fragment_Id_Seq_T {_11} (fun (_ret: t_Fragment_Id_Seq_T) -> [ &_9 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = contains_Id'0 {_6.current.auth} {_9} (fun (_ret: ()) -> [ &_4 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = new_unit {_4} (fun (_ret: ()) -> [ &_3 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_14 <- self.c0.permcell ] s1
      | s1 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_21 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s2)
      | s2 = deref_mut_Ghost_ref_PA_T {_21} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_20 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = {inv_ref_PA_T _20.current}
        MutBorrow.borrow_final <MutBorrow.t t_PA_T> {_20.current} {MutBorrow.get_id _20}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_19 <- _ret ] -{inv_ref_PA_T _ret.final}-
            [ &_20 <- { _20 with current = _ret.final } ] s1)
      | s1 = {inv_PA_T _19.current.current}
        MutBorrow.borrow_mut <t_PA_T> {_19.current.current}
          (fun (_ret: MutBorrow.t t_PA_T) ->
            [ &_18 <- _ret ] -{inv_PA_T _ret.final}-
            [ &_19 <- { _19 with current = { _19.current with current = _ret.final } } ] s2)
      | s2 = {[@expl:type invariant] inv_ref_ref_PA_T'0 _20} s3
      | s3 = -{resolve_ref_ref_PA_T _20}- s4
      | s4 = {[@expl:type invariant] inv_ref_ref_PA_T'0 _19} s5
      | s5 = -{resolve_ref_ref_PA_T _19}- s6
      | s6 = {inv_PA_T _18.current}
        MutBorrow.borrow_final <t_PA_T> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret: MutBorrow.t t_PA_T) ->
            [ &_17 <- _ret ] -{inv_PA_T _ret.final}-
            [ &_18 <- { _18 with current = _ret.final } ] s7)
      | s7 = new_ref_PA_T {_17} (fun (_ret: MutBorrow.t t_PA_T) -> [ &_16 <- _ret ] s8)
      | s8 = bb6 ]
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PA_T _18} s1
      | s1 = -{resolve_ref_PA_T _18}- s2
      | s2 = reroot_T {_14} {self.c1} {_16} (fun (_ret: ()) -> [ &_12 <- _ret ] s3)
      | s3 = bb7 ]
    | bb7 = s0 [ s0 = into_inner_ref_PA_T {pa} (fun (_ret: MutBorrow.t t_PA_T) -> [ &_26 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PA_T _26} s1
      | s1 = -{resolve_ref_PA_T _26}- s2
      | s2 = deref_Rc_PermCell_Inner_T_Global {self.c0.permcell} (fun (_ret: t_PermCell_Inner_T) -> [ &_34 <- _ret ] s3)
      | s3 = bb9 ]
    | bb9 = s0 [ s0 = id_ghost_Inner_T {_34} (fun (_ret: t_Id) -> [ &_32 <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0
      [ s0 = [ &_31 <- _32 ] s1 | s1 = deref_Ghost_Id {_31} (fun (_ret: t_Id) -> [ &_29 <- _ret ] s2) | s2 = bb11 ]
    | bb11 = s0
      [ s0 = get_ghost_Id {_26.current.perms} {_29}
          (fun (_ret: t_Option_ref_PermCellOwn_Inner_T) -> [ &_24 <- _ret ] s1)
      | s1 = bb12 ]
    | bb12 = s0
      [ s0 = unwrap_ref_PermCellOwn_Inner_T {_24} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_23 <- _ret ] s1)
      | s1 = bb13 ]
    | bb13 = s0
      [ s0 = new_ref_PermCellOwn_Inner_T {_23} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &perm <- _ret ] s1) | s1 = bb14 ]
    | bb14 = s0
      [ s0 = deref_Rc_PermCell_Inner_T_Global {self.c0.permcell} (fun (_ret: t_PermCell_Inner_T) -> [ &_40 <- _ret ] s1)
      | s1 = bb15 ]
    | bb15 = s0 [ s0 = borrow_Inner_T {_40} {perm} (fun (_ret: t_Inner_T) -> [ &_38 <- _ret ] s1) | s1 = bb16 ]
    | bb16 = any
      [ br0 (x0: t_Vec_T_Global) -> {_38 = Direct x0} (! bb18)
      | br1 (x0: UInt64.t) (x1: t_T) (x2: t_Rc_PermCell_Inner_T_Global) -> {_38 = Link x0 x1 x2} (! bb19) ]
    | bb19 = {false} any
    | bb18 = s0
      [ s0 = elim_Direct {_38} (fun (r0: t_Vec_T_Global) -> [ &arr <- r0 ] s1)
      | s1 = deref_Vec_T_Global {arr} (fun (_ret: Slice64.slice t_T) -> [ &_45 <- _ret ] s2)
      | s2 = bb20 ]
    | bb20 = s0 [ s0 = get_unchecked_T {_45} {self.c2} (fun (_ret: t_T) -> [ &_0 <- _ret ] s1) | s1 = bb21 ]
    | bb21 = return {_0} ]
    [ & _0: t_T = Any.any_l ()
    | & self: closure0 = self
    | & pa: MutBorrow.t t_PA_T = pa
    | & _3: () = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _6: MutBorrow.t t_PA_T = Any.any_l ()
    | & _9: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _11: t_Fragment_Id_Seq_T = Any.any_l ()
    | & _12: () = Any.any_l ()
    | & _14: t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & _16: MutBorrow.t t_PA_T = Any.any_l ()
    | & _17: MutBorrow.t t_PA_T = Any.any_l ()
    | & _18: MutBorrow.t t_PA_T = Any.any_l ()
    | & _19: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _20: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _21: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & perm: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _23: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _24: t_Option_ref_PermCellOwn_Inner_T = Any.any_l ()
    | & _26: MutBorrow.t t_PA_T = Any.any_l ()
    | & _29: t_Id = Any.any_l ()
    | & _31: t_Id = Any.any_l ()
    | & _32: t_Id = Any.any_l ()
    | & _34: t_PermCell_Inner_T = Any.any_l ()
    | & arr: t_Vec_T_Global = Any.any_l ()
    | & _38: t_Inner_T = Any.any_l ()
    | & _40: t_PermCell_Inner_T = Any.any_l ()
    | & _45: Slice64.slice t_T = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  type t_Tokens
  
  predicate invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Ghost_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_ref_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global
  
  type tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0 = {
    f0'0: t_Rc_LocalInvariant_PA_T_Global;
    f1'0: t_Tokens;
    f2'0: closure0 }
  
  predicate postcondition_once_deref [@inline:trivial] (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (result: t_LocalInvariant_PA_T) =
    let self_ = args in result = view_Rc_LocalInvariant_PA_T_Global self_
  
  meta "rewrite_def" predicate postcondition_once_deref
  
  predicate resolve_deref [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_deref
  
  predicate postcondition_mut_deref [@inline:trivial] (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (result_state: ()) (result: t_LocalInvariant_PA_T) =
    let self_ = args in result = view_Rc_LocalInvariant_PA_T_Global self_
  
  meta "rewrite_def" predicate postcondition_mut_deref
  
  function fn_mut_once_deref (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (res: t_LocalInvariant_PA_T) : ()
  
  axiom fn_mut_once_deref_spec:
    forall self: (), args: t_Rc_LocalInvariant_PA_T_Global, res: t_LocalInvariant_PA_T. postcondition_once_deref self args res
      = (exists res_state: (). postcondition_mut_deref self args res_state res /\ resolve_deref res_state)
  
  predicate hist_inv_deref [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_deref
  
  function hist_inv_trans_deref (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_deref_spec: forall self: (), b: (), c: (). hist_inv_deref self b
      -> hist_inv_deref b c -> hist_inv_deref self c
  
  function hist_inv_refl_deref (self: ()) : ()
  
  axiom hist_inv_refl_deref_spec: forall self: (). hist_inv_deref self self
  
  function postcondition_mut_hist_inv_deref (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (res_state: ()) (res: t_LocalInvariant_PA_T) : ()
  
  axiom postcondition_mut_hist_inv_deref_spec:
    forall self: (), args: t_Rc_LocalInvariant_PA_T_Global, res_state: (), res: t_LocalInvariant_PA_T. postcondition_mut_deref self args res_state res
      -> hist_inv_deref self res_state
  
  function fn_hist_inv_deref (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_deref_spec: forall self: (), res_state: (). hist_inv_deref self res_state = (self = res_state)
  
  predicate postcondition_deref [@inline:trivial] (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (result: t_LocalInvariant_PA_T) =
    let self_ = args in result = view_Rc_LocalInvariant_PA_T_Global self_
  
  meta "rewrite_def" predicate postcondition_deref
  
  function fn_once_deref (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (res: t_LocalInvariant_PA_T) : ()
  
  axiom fn_once_deref_spec:
    forall self: (), args: t_Rc_LocalInvariant_PA_T_Global, res: t_LocalInvariant_PA_T. postcondition_once_deref self args res
      = (postcondition_deref self args res /\ resolve_deref self)
  
  function fn_mut_deref (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) (res_state: ()) (res: t_LocalInvariant_PA_T) : ()
  
  axiom fn_mut_deref_spec:
    forall self: (), args: t_Rc_LocalInvariant_PA_T_Global, res_state: (), res: t_LocalInvariant_PA_T. postcondition_mut_deref self args res_state res
      = (postcondition_deref self args res /\ self = res_state)
  
  type tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0 = {
    f0'1: t_LocalInvariant_PA_T;
    f1'1: t_Tokens;
    f2'1: closure0 }
  
  predicate protocol_PA_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    partial_invariant_T self resource_id
    /\ (forall id: t_Id. contains_Id'1 (view_Authority_Id_Seq_T self.auth) id -> contains_Id self.perms id)
  
  meta "rewrite_def" predicate protocol_PA_T
  
  predicate precondition_closure0 [@inline:trivial] (self: closure0) (args: MutBorrow.t t_PA_T) =
    let pa = args in closure0'pre self pa
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: MutBorrow.t t_PA_T) (result: t_T) =
    let pa = args in closure0'post'return self pa result
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  predicate contains_Namespace [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) = Set.mem e self
  
  meta "rewrite_def" predicate contains_Namespace
  
  function namespaces (self: t_Tokens) : Set.set t_Namespace
  
  predicate contains (self: t_Tokens) (namespace: t_Namespace) = contains_Namespace (namespaces self) namespace
  
  predicate precondition_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) =
    let {f0'1 = self'0; f1'1 = tokens; f2'1 = f} = args in (forall t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self'0)
          /\ inv_Ghost_ref_PA_T t
        -> precondition_closure0 f t
        /\ (forall res: t_T. postcondition_once_closure0 f t res
          -> protocol_PA_T (fin_Ghost_ref_PA_T t) (public_PA_T self'0)))
    /\ contains tokens (namespace_PA_T self'0) /\ inv_closure0 f
  
  meta "rewrite_def" predicate precondition_open
  
  function new_ref_LocalInvariant_PA_T (x: t_LocalInvariant_PA_T) : t_LocalInvariant_PA_T
  
  axiom new_ref_LocalInvariant_PA_T_spec: forall x: t_LocalInvariant_PA_T. new_ref_LocalInvariant_PA_T x = x
  
  predicate invariant_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_ref_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate precondition_deref [@inline:trivial] (self: ()) (args: t_Rc_LocalInvariant_PA_T_Global) =
    let self_ = args in inv_ref_Rc_LocalInvariant_PA_T_Global self_
  
  meta "rewrite_def" predicate precondition_deref
  
  predicate invariant_Ghost_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_ref_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Ghost_ref_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_Ghost_ref_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_Rc_LocalInvariant_PA_T_Global
  
  predicate precondition_open'0 [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (forall this: t_LocalInvariant_PA_T. postcondition_deref () self'0 this
        -> precondition_open () { f0'1 = new_ref_LocalInvariant_PA_T this; f1'1 = tokens; f2'1 = f })
    /\ precondition_deref () self'0 /\ inv_closure0 f /\ inv_Ghost_ref_Rc_LocalInvariant_PA_T_Global self'0
  
  meta "rewrite_def" predicate precondition_open'0
  
  let rec deref_Rc_LocalInvariant_PA_T_Global (self_: t_Rc_LocalInvariant_PA_T_Global)
    (return (x: t_LocalInvariant_PA_T)) =
    {[@expl:deref 'self_' type invariant] inv_ref_Rc_LocalInvariant_PA_T_Global self_}
    any
    [ return (result: t_LocalInvariant_PA_T) -> {result = view_Rc_LocalInvariant_PA_T_Global self_}
      (! return {result}) ]
  
  let rec open_Ghost_ref_LocalInvariant_PA_T (self: t_LocalInvariant_PA_T) (tokens: t_Tokens) (f: closure0)
    (return (x: t_T)) = {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires #0] contains tokens (namespace_PA_T self)}
    {[@expl:open requires #1] forall t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self)
        /\ inv_Ghost_ref_PA_T t
      -> precondition_closure0 f t
      /\ (forall res: t_T. postcondition_once_closure0 f t res
        -> protocol_PA_T (fin_Ghost_ref_PA_T t) (public_PA_T self))}
    any
    [ return (result: t_T) -> {inv_ref_T result}
      {exists t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self)
        /\ postcondition_once_closure0 f t result}
      (! return {result}) ]
  
  predicate postcondition_once_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (result: t_T) =
    let {f0'1 = self'0; f1'1 = tokens; f2'1 = f} = args in (exists t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_once_open
  
  predicate resolve_open [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_open
  
  predicate postcondition_mut_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (result_state: ()) (result: t_T) =
    let {f0'1 = self'0; f1'1 = tokens; f2'1 = f} = args in (exists t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_mut_open
  
  function fn_mut_once_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (res: t_T) : ()
  
  axiom fn_mut_once_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0, res: t_T. postcondition_once_open self args res
      = (exists res_state: (). postcondition_mut_open self args res_state res /\ resolve_open res_state)
  
  predicate hist_inv_open [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_open
  
  function hist_inv_trans_open (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_open_spec: forall self: (), b: (), c: (). hist_inv_open self b
      -> hist_inv_open b c -> hist_inv_open self c
  
  function hist_inv_refl_open (self: ()) : ()
  
  axiom hist_inv_refl_open_spec: forall self: (). hist_inv_open self self
  
  function postcondition_mut_hist_inv_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0, res_state: (), res: t_T. postcondition_mut_open self args res_state res
      -> hist_inv_open self res_state
  
  function fn_hist_inv_open (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_open_spec: forall self: (), res_state: (). hist_inv_open self res_state = (self = res_state)
  
  predicate postcondition_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (result: t_T) =
    let {f0'1 = self'0; f1'1 = tokens; f2'1 = f} = args in (exists t: MutBorrow.t t_PA_T. protocol_PA_T t.current (public_PA_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_open
  
  function fn_once_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (res: t_T) : ()
  
  axiom fn_once_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0, res: t_T. postcondition_once_open self args res
      = (postcondition_open self args res /\ resolve_open self)
  
  function fn_mut_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PA_T_Ghost_Tokens_closure0, res_state: (), res: t_T. postcondition_mut_open self args res_state res
      = (postcondition_open self args res /\ self = res_state)
  
  let rec open_Ghost_ref_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) (tokens: t_Tokens)
    (f: closure0) (return (x: t_T)) =
    {[@expl:open 'self' type invariant] inv_Ghost_ref_Rc_LocalInvariant_PA_T_Global self}
    {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires #0] precondition_deref () self}
    {[@expl:open requires #1] forall this: t_LocalInvariant_PA_T. postcondition_deref () self this
      -> precondition_open () { f0'1 = new_ref_LocalInvariant_PA_T this; f1'1 = tokens; f2'1 = f }}
    any
    [ return (result: t_T) -> {inv_ref_T result}
      {exists this: t_LocalInvariant_PA_T. postcondition_deref () self this
        /\ postcondition_open () { f0'1 = new_ref_LocalInvariant_PA_T this; f1'1 = tokens; f2'1 = f } result}
      (! return {result}) ]
  
  function new_ref_Rc_LocalInvariant_PA_T_Global (x: t_Rc_LocalInvariant_PA_T_Global) : t_Rc_LocalInvariant_PA_T_Global
  
  axiom new_ref_Rc_LocalInvariant_PA_T_Global_spec:
    forall x: t_Rc_LocalInvariant_PA_T_Global. new_ref_Rc_LocalInvariant_PA_T_Global x = x
  
  predicate postcondition_once_open'0 [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (result: t_T) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (exists this: t_LocalInvariant_PA_T. postcondition_deref () self'0 this
        /\ postcondition_open () { f0'1 = new_ref_LocalInvariant_PA_T this; f1'1 = tokens; f2'1 = f } result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_once_open'0
  
  predicate resolve_open'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_open'0
  
  predicate postcondition_mut_open'0 [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (result_state: ()) (result: t_T) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (exists this: t_LocalInvariant_PA_T. postcondition_deref () self'0 this
        /\ postcondition_open () { f0'1 = new_ref_LocalInvariant_PA_T this; f1'1 = tokens; f2'1 = f } result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_mut_open'0
  
  function fn_mut_once_open'0 (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (res: t_T) : ()
  
  axiom fn_mut_once_open_spec'0:
    forall self: (), args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0, res: t_T. postcondition_once_open'0 self args res
      = (exists res_state: (). postcondition_mut_open'0 self args res_state res /\ resolve_open'0 res_state)
  
  predicate hist_inv_open'0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_open'0
  
  function hist_inv_trans_open'0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_open_spec'0: forall self: (), b: (), c: (). hist_inv_open'0 self b
      -> hist_inv_open'0 b c -> hist_inv_open'0 self c
  
  function hist_inv_refl_open'0 (self: ()) : ()
  
  axiom hist_inv_refl_open_spec'0: forall self: (). hist_inv_open'0 self self
  
  function postcondition_mut_hist_inv_open'0 (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_open_spec'0:
    forall self: (), args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0, res_state: (), res: t_T. postcondition_mut_open'0 self args res_state res
      -> hist_inv_open'0 self res_state
  
  function fn_hist_inv_open'0 (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_open_spec'0: forall self: (), res_state: (). hist_inv_open'0 self res_state = (self = res_state)
  
  predicate postcondition_open'0 [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (result: t_T) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (exists this: t_LocalInvariant_PA_T. postcondition_deref () self'0 this
        /\ postcondition_open () { f0'1 = new_ref_LocalInvariant_PA_T this; f1'1 = tokens; f2'1 = f } result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_open'0
  
  function fn_once_open'0 (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (res: t_T) : ()
  
  axiom fn_once_open_spec'0:
    forall self: (), args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0, res: t_T. postcondition_once_open'0 self args res
      = (postcondition_open'0 self args res /\ resolve_open'0 self)
  
  function fn_mut_open'0 (self: ()) (args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_open_spec'0:
    forall self: (), args: tup3_Ghost_ref_Rc_LocalInvariant_PA_T_Global_Ghost_Tokens_closure0, res_state: (), res: t_T. postcondition_mut_open'0 self args res_state res
      = (postcondition_open'0 self args res /\ self = res_state)
  
  let rec open_ref_Ghost_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) (tokens: t_Tokens)
    (f: closure0) (return (x: t_T)) =
    {[@expl:open 'self' type invariant] inv_ref_Ghost_Rc_LocalInvariant_PA_T_Global self}
    {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires] precondition_open'0 () { f0'0 = new_ref_Rc_LocalInvariant_PA_T_Global self;
                                                    f1'0 = tokens;
                                                    f2'0 = f }}
    any
    [ return (result: t_T) -> {inv_ref_T result}
      {postcondition_open'0 () { f0'0 = new_ref_Rc_LocalInvariant_PA_T_Global self; f1'0 = tokens; f2'0 = f } result}
      (! return {result}) ]
  
  function view_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) : Seq.seq t_T =
    (view_Fragment_Id_Seq_T self.frag).f1
  
  meta "rewrite_def" function view_PersistentArray_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get_T (self: t_PersistentArray_T) (index: UInt64.t) (tokens: t_Tokens) (return (x: t_T)) =
    {[@expl:get 'self' type invariant] inv_ref_PersistentArray_T self}
    {[@expl:get requires #0] contains tokens (Namespace_PARRAY 0)}
    {[@expl:get requires #1] UInt64.t'int index < Seq.length (view_PersistentArray_T self)}
    (! bb0
    [ bb0 = s0 [ s0 = [ &auth_id <- public_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv) ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_12 <- { c0 = self; c1 = auth_id; c2 = index } ] s1
      | s1 = open_ref_Ghost_Rc_LocalInvariant_PA_T_Global {self.inv} {tokens} {_12}
          (fun (_ret: t_T) -> [ &_9 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- _9 ] s1 | s1 = return {_0} ] ]
    [ & _0: t_T = Any.any_l ()
    | & self: t_PersistentArray_T = self
    | & index: UInt64.t = index
    | & tokens: t_Tokens = tokens
    | & auth_id: t_Id = Any.any_l ()
    | & _9: t_T = Any.any_l ()
    | & _12: closure0 = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:get result type invariant] inv_ref_T result}
      {[@expl:get ensures] result = Seq.get (view_PersistentArray_T self) (UInt64.t'int index)}
      (! return {result}) ]
end
module M_implementation__impl_PersistentArray_T__reroot (* implementation::PersistentArray<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use creusot.prelude.MutBorrow
  use map.Map
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use int.MinMax
  use creusot.prelude.Any
  
  type t_FMap_Id_PermCellOwn_Inner_T
  
  type t_Authority_Id_Seq_T
  
  type t_Id
  
  type t_PA_T = { perms: t_FMap_Id_PermCellOwn_Inner_T; auth: t_Authority_Id_Seq_T; depth: Map.map t_Id int }
  
  type t_PermCellOwn_Inner_T
  
  type t_Option_PermCellOwn_Inner_T = None | Some t_PermCellOwn_Inner_T
  
  function view_FMap_Id_PermCellOwn_Inner_T (self: t_FMap_Id_PermCellOwn_Inner_T) : Map.map t_Id t_Option_PermCellOwn_Inner_T
  
  function get_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_Option_PermCellOwn_Inner_T =
    Map.get (view_FMap_Id_PermCellOwn_Inner_T self) k
  
  meta "rewrite_def" function get_Id
  
  predicate contains_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) = get_Id self k <> None
  
  meta "rewrite_def" predicate contains_Id
  
  predicate inv_Id [@inline:trivial] (_1: t_Id) = true
  
  meta "rewrite_def" predicate inv_Id
  
  type t_Vec_T_Global
  
  type t_T
  
  type t_Rc_PermCell_Inner_T_Global
  
  type t_Inner_T = Direct t_Vec_T_Global | Link UInt64.t t_T t_Rc_PermCell_Inner_T_Global
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_T_Global (self: t_Vec_T_Global) : Seq.seq t_T
  
  axiom view_Vec_T_Global_spec: forall self: t_Vec_T_Global. Seq.length (view_Vec_T_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_T_Global (self: t_Vec_T_Global) = inv_Seq_T (view_Vec_T_Global self)
  
  predicate inv_Vec_T_Global (_1: t_Vec_T_Global)
  
  axiom inv_axiom: forall x: t_Vec_T_Global [inv_Vec_T_Global x]. inv_Vec_T_Global x -> invariant_Vec_T_Global x
  
  predicate inv_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate inv_Inner_T (_1: t_Inner_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Inner_T [inv_Inner_T x]. inv_Inner_T x
      = match x with
        | Direct f0 -> inv_Vec_T_Global f0
        | Link index value next -> inv_T value /\ inv_Rc_PermCell_Inner_T_Global next
        end
  
  predicate invariant_ref_Inner_T [@inline:trivial] (self: t_Inner_T) = inv_Inner_T self
  
  meta "rewrite_def" predicate invariant_ref_Inner_T
  
  predicate inv_ref_Inner_T [@inline:trivial] (_1: t_Inner_T) = invariant_ref_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Inner_T
  
  function val_Inner_T (self: t_PermCellOwn_Inner_T) : t_Inner_T
  
  predicate invariant_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_ref_Inner_T (val_Inner_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_Inner_T
  
  predicate inv_PermCellOwn_Inner_T (_1: t_PermCellOwn_Inner_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellOwn_Inner_T [inv_PermCellOwn_Inner_T x]. inv_PermCellOwn_Inner_T x
      = invariant_PermCellOwn_Inner_T x
  
  predicate index_Mapping_PermCellOwn_Inner_T_bool [@inline:trivial] (self: Map.map t_PermCellOwn_Inner_T bool) (a: t_PermCellOwn_Inner_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_PermCellOwn_Inner_T_bool
  
  function such_that_PermCellOwn_Inner_T (p: Map.map t_PermCellOwn_Inner_T bool) : t_PermCellOwn_Inner_T
  
  axiom such_that_PermCellOwn_Inner_T_spec:
    forall p: Map.map t_PermCellOwn_Inner_T bool. (exists x: t_PermCellOwn_Inner_T. index_Mapping_PermCellOwn_Inner_T_bool p x)
      -> index_Mapping_PermCellOwn_Inner_T_bool p (such_that_PermCellOwn_Inner_T p)
  
  function unwrap_Option_PermCellOwn_Inner_T (self: t_Option_PermCellOwn_Inner_T) : t_PermCellOwn_Inner_T =
    match self with
      | Some x -> x
      | None -> such_that_PermCellOwn_Inner_T (fun (__0: t_PermCellOwn_Inner_T) -> true)
      end
  
  function lookup_Id [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_PermCellOwn_Inner_T =
    unwrap_Option_PermCellOwn_Inner_T (get_Id self k)
  
  meta "rewrite_def" function lookup_Id
  
  function index_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) : t_PermCellOwn_Inner_T
   = lookup_Id self key
  
  meta "rewrite_def" function index_FMap_Id_PermCellOwn_Inner_T
  
  predicate invariant_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: t_FMap_Id_PermCellOwn_Inner_T) =
    forall k: t_Id. contains_Id self k -> inv_Id k /\ inv_PermCellOwn_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self k)
  
  meta "rewrite_def" predicate invariant_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_FMap_Id_PermCellOwn_Inner_T (_1: t_FMap_Id_PermCellOwn_Inner_T)
  
  axiom inv_axiom'2 [@rewrite]:
    forall x: t_FMap_Id_PermCellOwn_Inner_T [inv_FMap_Id_PermCellOwn_Inner_T x]. inv_FMap_Id_PermCellOwn_Inner_T x
      = invariant_FMap_Id_PermCellOwn_Inner_T x
  
  predicate invariant_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T)
  
  predicate inv_Authority_Id_Seq_T (_1: t_Authority_Id_Seq_T)
  
  axiom inv_axiom'3: forall x: t_Authority_Id_Seq_T [inv_Authority_Id_Seq_T x]. inv_Authority_Id_Seq_T x
      -> invariant_Authority_Id_Seq_T x
  
  predicate inv_PA_T (_1: t_PA_T)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_PA_T [inv_PA_T x]. inv_PA_T x
      = (inv_FMap_Id_PermCellOwn_Inner_T x.perms /\ inv_Authority_Id_Seq_T x.auth)
  
  predicate invariant_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) =
    inv_PA_T self.current /\ inv_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PA_T
  
  predicate inv_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_PA_T
  
  predicate invariant_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) = inv_ref_PA_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PA_T
  
  predicate inv_Ghost_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = invariant_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PA_T
  
  predicate invariant_ref_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t (MutBorrow.t t_PA_T)) =
    inv_Ghost_ref_PA_T self.current /\ inv_Ghost_ref_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_ref_PA_T
  
  predicate inv_ref_Ghost_ref_PA_T [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) =
    invariant_ref_Ghost_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_ref_PA_T
  
  predicate invariant_ref_ref_PA_T [@inline:trivial] (self: MutBorrow.t (MutBorrow.t t_PA_T)) =
    inv_ref_PA_T self.current /\ inv_ref_PA_T self.final
  
  meta "rewrite_def" predicate invariant_ref_ref_PA_T
  
  predicate inv_ref_ref_PA_T [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) = invariant_ref_ref_PA_T _1
  
  meta "rewrite_def" predicate inv_ref_ref_PA_T
  
  let rec deref_mut_Ghost_ref_PA_T (self: MutBorrow.t (MutBorrow.t t_PA_T))
    (return (x: MutBorrow.t (MutBorrow.t t_PA_T))) =
    {[@expl:deref_mut 'self' type invariant] inv_ref_Ghost_ref_PA_T self}
    any
    [ return (result: MutBorrow.t (MutBorrow.t t_PA_T)) -> {inv_ref_ref_PA_T result}
      {result = self}
      (! return {result}) ]
  
  type t_PermCell_Inner_T
  
  predicate invariant_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (self: t_Rc_PermCell_Inner_T_Global) =
    inv_Rc_PermCell_Inner_T_Global self
  
  meta "rewrite_def" predicate invariant_ref_Rc_PermCell_Inner_T_Global
  
  predicate inv_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (_1: t_Rc_PermCell_Inner_T_Global) =
    invariant_ref_Rc_PermCell_Inner_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Rc_PermCell_Inner_T_Global
  
  function view_Rc_PermCell_Inner_T_Global (self: t_Rc_PermCell_Inner_T_Global) : t_PermCell_Inner_T
  
  let rec deref_Rc_PermCell_Inner_T_Global (self_: t_Rc_PermCell_Inner_T_Global) (return (x: t_PermCell_Inner_T)) =
    {[@expl:deref 'self_' type invariant] inv_ref_Rc_PermCell_Inner_T_Global self_}
    any [ return (result: t_PermCell_Inner_T) -> {result = view_Rc_PermCell_Inner_T_Global self_} (! return {result}) ]
  
  function id_Inner_T (self: t_PermCell_Inner_T) : t_Id
  
  let rec id_ghost_Inner_T (self: t_PermCell_Inner_T) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = id_Inner_T self} (! return {result}) ]
  
  let rec deref_Ghost_Id (self: t_Id) (return (x: t_Id)) = any
    [ return (result: t_Id) -> {result = self} (! return {result}) ]
  
  predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    inv_FMap_Id_PermCellOwn_Inner_T self.current /\ inv_FMap_Id_PermCellOwn_Inner_T self.final
  
  meta "rewrite_def" predicate invariant_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_ref_FMap_Id_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) =
    invariant_ref_FMap_Id_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_FMap_Id_PermCellOwn_Inner_T
  
  predicate inv_Option_PermCellOwn_Inner_T (_1: t_Option_PermCellOwn_Inner_T)
  
  axiom inv_axiom'5 [@rewrite]:
    forall x: t_Option_PermCellOwn_Inner_T [inv_Option_PermCellOwn_Inner_T x]. inv_Option_PermCellOwn_Inner_T x
      = match x with
        | None -> true
        | Some f0 -> inv_PermCellOwn_Inner_T f0
        end
  
  function len_Id (self: t_FMap_Id_PermCellOwn_Inner_T) : int
  
  axiom len_Id_spec: forall self: t_FMap_Id_PermCellOwn_Inner_T. len_Id self >= 0
  
  function remove_Id (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) : t_FMap_Id_PermCellOwn_Inner_T
  
  axiom remove_Id_spec:
    forall self: t_FMap_Id_PermCellOwn_Inner_T, k: t_Id. view_FMap_Id_PermCellOwn_Inner_T (remove_Id self k)
      = Map.set (view_FMap_Id_PermCellOwn_Inner_T self) k (None)
  
  axiom remove_Id_spec'0: forall self: t_FMap_Id_PermCellOwn_Inner_T, k: t_Id. len_Id (remove_Id self k)
      = (if contains_Id self k then len_Id self - 1 else len_Id self)
  
  let rec remove_ghost_Id (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id)
    (return (x: t_Option_PermCellOwn_Inner_T)) =
    {[@expl:remove_ghost 'self' type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T self}
    any
    [ return (result: t_Option_PermCellOwn_Inner_T) -> {inv_Option_PermCellOwn_Inner_T result}
      {self.final = remove_Id self.current key}
      {result = get_Id self.current key}
      (! return {result}) ]
  
  predicate resolve_ref_ref_PA_T [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t t_PA_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_ref_PA_T
  
  let rec unwrap_PermCellOwn_Inner_T (self_: t_Option_PermCellOwn_Inner_T) (return (x: t_PermCellOwn_Inner_T)) =
    {[@expl:unwrap 'self_' type invariant] inv_Option_PermCellOwn_Inner_T self_}
    {[@expl:unwrap requires] self_ <> None}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_PermCellOwn_Inner_T result}
      {Some result = self_}
      (! return {result}) ]
  
  predicate invariant_Ghost_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_Ghost_PermCellOwn_Inner_T
  
  predicate inv_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: t_PermCellOwn_Inner_T) =
    invariant_Ghost_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_Ghost_PermCellOwn_Inner_T
  
  let rec new_PermCellOwn_Inner_T (x: t_PermCellOwn_Inner_T) (return (x'0: t_PermCellOwn_Inner_T)) =
    {[@expl:new 'x' type invariant] inv_PermCellOwn_Inner_T x}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_Ghost_PermCellOwn_Inner_T result}
      {result = x}
      (! return {result}) ]
  
  predicate invariant_ref_Ghost_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_Inner_T) =
    inv_Ghost_PermCellOwn_Inner_T self.current /\ inv_Ghost_PermCellOwn_Inner_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_PermCellOwn_Inner_T
  
  predicate inv_ref_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_Inner_T) =
    invariant_ref_Ghost_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_PermCellOwn_Inner_T
  
  predicate invariant_ref_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_Inner_T) =
    inv_PermCellOwn_Inner_T self.current /\ inv_PermCellOwn_Inner_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_Inner_T
  
  predicate inv_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_Inner_T) =
    invariant_ref_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_Inner_T
  
  let rec deref_mut_Ghost_PermCellOwn_Inner_T (self: MutBorrow.t t_PermCellOwn_Inner_T)
    (return (x: MutBorrow.t t_PermCellOwn_Inner_T)) =
    {[@expl:deref_mut 'self' type invariant] inv_ref_Ghost_PermCellOwn_Inner_T self}
    any
    [ return (result: MutBorrow.t t_PermCellOwn_Inner_T) -> {inv_ref_PermCellOwn_Inner_T result}
      {result = self}
      (! return {result}) ]
  
  predicate resolve_ref_Ghost_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_Inner_T) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Ghost_PermCellOwn_Inner_T
  
  predicate resolve_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_Inner_T) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PermCellOwn_Inner_T
  
  predicate invariant_Ghost_ref_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_Inner_T) =
    inv_ref_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PermCellOwn_Inner_T
  
  predicate inv_Ghost_ref_PermCellOwn_Inner_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_Inner_T) =
    invariant_Ghost_ref_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PermCellOwn_Inner_T
  
  let rec new_ref_PermCellOwn_Inner_T (x: MutBorrow.t t_PermCellOwn_Inner_T)
    (return (x'0: MutBorrow.t t_PermCellOwn_Inner_T)) = {[@expl:new 'x' type invariant] inv_ref_PermCellOwn_Inner_T x}
    any
    [ return (result: MutBorrow.t t_PermCellOwn_Inner_T) -> {inv_Ghost_ref_PermCellOwn_Inner_T result}
      {result = x}
      (! return {result}) ]
  
  function id_Inner_T'0 (self: t_PermCellOwn_Inner_T) : t_Id
  
  predicate invariant_ref_Inner_T'0 [@inline:trivial] (self: MutBorrow.t t_Inner_T) =
    inv_Inner_T self.current /\ inv_Inner_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Inner_T'0
  
  predicate inv_ref_Inner_T'0 [@inline:trivial] (_1: MutBorrow.t t_Inner_T) = invariant_ref_Inner_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_Inner_T'0
  
  function fin_Ghost_ref_PermCellOwn_Inner_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_Inner_T) : t_PermCellOwn_Inner_T
   = self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PermCellOwn_Inner_T
  
  function view_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) : t_Inner_T = val_Inner_T self
  
  meta "rewrite_def" function view_PermCellOwn_Inner_T
  
  let rec borrow_mut_Inner_T (self: t_PermCell_Inner_T) (perm: MutBorrow.t t_PermCellOwn_Inner_T)
    (return (x: MutBorrow.t t_Inner_T)) =
    {[@expl:borrow_mut 'perm' type invariant] inv_Ghost_ref_PermCellOwn_Inner_T perm}
    {[@expl:borrow_mut requires] id_Inner_T self = id_Inner_T'0 perm.current}
    any
    [ return (result: MutBorrow.t t_Inner_T) -> {inv_ref_Inner_T'0 result}
      {id_Inner_T self = id_Inner_T'0 (fin_Ghost_ref_PermCellOwn_Inner_T perm)}
      {result.current = view_PermCellOwn_Inner_T perm.current}
      {result.final = view_PermCellOwn_Inner_T (fin_Ghost_ref_PermCellOwn_Inner_T perm)}
      (! return {result}) ]
  
  predicate resolve_ref_Inner_T [@inline:trivial] (_1: MutBorrow.t t_Inner_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Inner_T
  
  let rec into_inner_PermCellOwn_Inner_T (self: t_PermCellOwn_Inner_T) (return (x: t_PermCellOwn_Inner_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_PermCellOwn_Inner_T self}
    any
    [ return (result: t_PermCellOwn_Inner_T) -> {inv_PermCellOwn_Inner_T result} {result = self} (! return {result}) ]
  
  function insert_Id (self: t_FMap_Id_PermCellOwn_Inner_T) (k: t_Id) (v: t_PermCellOwn_Inner_T) : t_FMap_Id_PermCellOwn_Inner_T
  
  axiom insert_Id_spec:
    forall self: t_FMap_Id_PermCellOwn_Inner_T, k: t_Id, v: t_PermCellOwn_Inner_T. view_FMap_Id_PermCellOwn_Inner_T (insert_Id self k v)
      = Map.set (view_FMap_Id_PermCellOwn_Inner_T self) k (Some v)
  
  axiom insert_Id_spec'0:
    forall self: t_FMap_Id_PermCellOwn_Inner_T, k: t_Id, v: t_PermCellOwn_Inner_T. len_Id (insert_Id self k v)
      = (if contains_Id self k then len_Id self else len_Id self + 1)
  
  let rec insert_ghost_Id (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id) (value: t_PermCellOwn_Inner_T)
    (return (x: t_Option_PermCellOwn_Inner_T)) =
    {[@expl:insert_ghost 'self' type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T self}
    {[@expl:insert_ghost 'value' type invariant] inv_PermCellOwn_Inner_T value}
    any
    [ return (result: t_Option_PermCellOwn_Inner_T) -> {inv_Option_PermCellOwn_Inner_T result}
      {self.final = insert_Id self.current key value}
      {result = get_Id self.current key}
      (! return {result}) ]
  
  predicate resolve_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PA_T
  
  predicate resolve_Ghost_ref_PA_T [@inline:trivial] (_1: MutBorrow.t t_PA_T) = resolve_ref_PA_T _1
  
  meta "rewrite_def" predicate resolve_Ghost_ref_PA_T
  
  predicate invariant_Ghost_Option_PermCellOwn_Inner_T [@inline:trivial] (self: t_Option_PermCellOwn_Inner_T) =
    inv_Option_PermCellOwn_Inner_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Option_PermCellOwn_Inner_T
  
  predicate inv_Ghost_Option_PermCellOwn_Inner_T [@inline:trivial] (_1: t_Option_PermCellOwn_Inner_T) =
    invariant_Ghost_Option_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Option_PermCellOwn_Inner_T
  
  let rec new_Option_PermCellOwn_Inner_T (x: t_Option_PermCellOwn_Inner_T)
    (return (x'0: t_Option_PermCellOwn_Inner_T)) = {[@expl:new 'x' type invariant] inv_Option_PermCellOwn_Inner_T x}
    any
    [ return (result: t_Option_PermCellOwn_Inner_T) -> {inv_Ghost_Option_PermCellOwn_Inner_T result}
      {result = x}
      (! return {result}) ]
  
  predicate resolve_ref_Inner_T'0 [@inline:trivial] (_1: t_Inner_T) = true
  
  meta "rewrite_def" predicate resolve_ref_Inner_T'0
  
  predicate resolve_PermCellOwn_Inner_T [@inline:trivial] (self: t_PermCellOwn_Inner_T) =
    resolve_ref_Inner_T'0 (val_Inner_T self)
  
  meta "rewrite_def" predicate resolve_PermCellOwn_Inner_T
  
  predicate resolve_PermCellOwn_Inner_T'0 (_1: t_PermCellOwn_Inner_T)
  
  axiom resolve_axiom:
    forall x: t_PermCellOwn_Inner_T [resolve_PermCellOwn_Inner_T'0 x]. resolve_PermCellOwn_Inner_T'0 x
      -> resolve_PermCellOwn_Inner_T x
  
  predicate resolve_Option_PermCellOwn_Inner_T (_1: t_Option_PermCellOwn_Inner_T)
  
  axiom resolve_axiom'0 [@rewrite]:
    forall x: t_Option_PermCellOwn_Inner_T [resolve_Option_PermCellOwn_Inner_T x]. resolve_Option_PermCellOwn_Inner_T x
      = match x with
        | None -> true
        | Some x0 -> resolve_PermCellOwn_Inner_T'0 x0
        end
  
  predicate resolve_Ghost_Option_PermCellOwn_Inner_T [@inline:trivial] (_1: t_Option_PermCellOwn_Inner_T) =
    resolve_Option_PermCellOwn_Inner_T _1
  
  meta "rewrite_def" predicate resolve_Ghost_Option_PermCellOwn_Inner_T
  
  let rec elim_Link (input: t_Inner_T) (ret (index: UInt64.t) (value: t_T) (next: t_Rc_PermCell_Inner_T_Global)) = any
    [ good (index: UInt64.t) (value: t_T) (next: t_Rc_PermCell_Inner_T_Global) -> {Link index value next = input}
      (! ret {index} {value} {next})
    | bad ->
    {forall index: UInt64.t, value: t_T, next: t_Rc_PermCell_Inner_T_Global [Link index value next: t_Inner_T]. Link index value next
        <> input}
      (! {false}
      any) ]
  
  let rec new_ref_PA_T (x: MutBorrow.t t_PA_T) (return (x'0: MutBorrow.t t_PA_T)) =
    {[@expl:new 'x' type invariant] inv_ref_PA_T x}
    any [ return (result: MutBorrow.t t_PA_T) -> {inv_Ghost_ref_PA_T result} {result = x} (! return {result}) ]
  
  let rec clone_Rc_PermCell_Inner_T_Global (self_: t_Rc_PermCell_Inner_T_Global)
    (return (x: t_Rc_PermCell_Inner_T_Global)) =
    {[@expl:clone 'self_' type invariant] inv_ref_Rc_PermCell_Inner_T_Global self_}
    any
    [ return (result: t_Rc_PermCell_Inner_T_Global) -> {inv_Rc_PermCell_Inner_T_Global result}
      {result = self_}
      (! return {result}) ]
  
  predicate invariant_ref_Rc_PermCell_Inner_T_Global'0 [@inline:trivial] (self: MutBorrow.t t_Rc_PermCell_Inner_T_Global) =
    inv_Rc_PermCell_Inner_T_Global self.current /\ inv_Rc_PermCell_Inner_T_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Rc_PermCell_Inner_T_Global'0
  
  predicate inv_ref_Rc_PermCell_Inner_T_Global'0 [@inline:trivial] (_1: MutBorrow.t t_Rc_PermCell_Inner_T_Global) =
    invariant_ref_Rc_PermCell_Inner_T_Global'0 _1
  
  meta "rewrite_def" predicate inv_ref_Rc_PermCell_Inner_T_Global'0
  
  let rec replace_Rc_PermCell_Inner_T_Global (dest: MutBorrow.t t_Rc_PermCell_Inner_T_Global)
    (src: t_Rc_PermCell_Inner_T_Global) (return (x: t_Rc_PermCell_Inner_T_Global)) =
    {[@expl:replace 'dest' type invariant] inv_ref_Rc_PermCell_Inner_T_Global'0 dest}
    {[@expl:replace 'src' type invariant] inv_Rc_PermCell_Inner_T_Global src}
    any
    [ return (result: t_Rc_PermCell_Inner_T_Global) -> {inv_Rc_PermCell_Inner_T_Global result}
      {dest.final = src}
      {result = dest.current}
      (! return {result}) ]
  
  predicate resolve_ref_Rc_PermCell_Inner_T_Global [@inline:trivial] (_1: MutBorrow.t t_Rc_PermCell_Inner_T_Global) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Rc_PermCell_Inner_T_Global
  
  type t_Option_ref_PermCellOwn_Inner_T = None'0 | Some'0 (MutBorrow.t t_PermCellOwn_Inner_T)
  
  predicate inv_Option_ref_PermCellOwn_Inner_T (_1: t_Option_ref_PermCellOwn_Inner_T)
  
  axiom inv_axiom'6 [@rewrite]:
    forall x: t_Option_ref_PermCellOwn_Inner_T [inv_Option_ref_PermCellOwn_Inner_T x]. inv_Option_ref_PermCellOwn_Inner_T x
      = match x with
        | None'0 -> true
        | Some'0 f0 -> inv_ref_PermCellOwn_Inner_T f0
        end
  
  let rec get_mut_ghost_Id (self: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) (key: t_Id)
    (return (x: t_Option_ref_PermCellOwn_Inner_T)) =
    {[@expl:get_mut_ghost 'self' type invariant] inv_ref_FMap_Id_PermCellOwn_Inner_T self}
    any
    [ return (result: t_Option_ref_PermCellOwn_Inner_T) -> {inv_Option_ref_PermCellOwn_Inner_T result}
      {if contains_Id self.current key then
        match result with
          | None'0 -> false
          | Some'0 r -> contains_Id self.final key
          /\ index_FMap_Id_PermCellOwn_Inner_T self.current key = r.current
          /\ index_FMap_Id_PermCellOwn_Inner_T self.final key = r.final
          end
      else
        result = None'0 /\ self.current = self.final
      }
      {forall k: t_Id. k <> key -> get_Id self.current k = get_Id self.final k}
      {len_Id self.current = len_Id self.final}
      (! return {result}) ]
  
  let rec unwrap_ref_PermCellOwn_Inner_T (self_: t_Option_ref_PermCellOwn_Inner_T)
    (return (x: MutBorrow.t t_PermCellOwn_Inner_T)) =
    {[@expl:unwrap 'self_' type invariant] inv_Option_ref_PermCellOwn_Inner_T self_}
    {[@expl:unwrap requires] self_ <> None'0}
    any
    [ return (result: MutBorrow.t t_PermCellOwn_Inner_T) -> {inv_ref_PermCellOwn_Inner_T result}
      {Some'0 result = self_}
      (! return {result}) ]
  
  predicate resolve_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate resolve_ref_usize [@inline:trivial] (_1: MutBorrow.t UInt64.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_usize
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  let rec elim_Direct (input: t_Inner_T) (ret (f0: t_Vec_T_Global)) = any
    [ good (f0: t_Vec_T_Global) -> {Direct f0 = input} (! ret {f0})
    | bad -> {forall f0: t_Vec_T_Global [Direct f0: t_Inner_T]. Direct f0 <> input} (! {false} any) ]
  
  predicate invariant_ref_Vec_T_Global [@inline:trivial] (self: MutBorrow.t t_Vec_T_Global) =
    inv_Vec_T_Global self.current /\ inv_Vec_T_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_T_Global
  
  predicate inv_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = invariant_ref_Vec_T_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_T_Global
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  predicate resolve_elswhere_usize [@inline:trivial] (self: UInt64.t) (old': Seq.seq t_T) (fin: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere_usize
  
  let rec index_mut_Vec_T_Global (self_: MutBorrow.t t_Vec_T_Global) (ix: UInt64.t) (return (x: MutBorrow.t t_T)) =
    {[@expl:index_mut 'self_' type invariant] inv_ref_Vec_T_Global self_}
    {[@expl:index_mut requires] in_bounds_usize ix (view_Vec_T_Global self_.current)}
    any
    [ return (result: MutBorrow.t t_T) -> {inv_ref_T result}
      {has_value_usize ix (view_Vec_T_Global self_.current) result.current}
      {has_value_usize ix (view_Vec_T_Global self_.final) result.final}
      {resolve_elswhere_usize ix (view_Vec_T_Global self_.current) (view_Vec_T_Global self_.final)}
      {Seq.length (view_Vec_T_Global self_.final) = Seq.length (view_Vec_T_Global self_.current)}
      (! return {result}) ]
  
  let rec swap_T (x: MutBorrow.t t_T) (y: MutBorrow.t t_T) (return (x'0: ())) =
    {[@expl:swap 'x' type invariant] inv_ref_T x}
    {[@expl:swap 'y' type invariant] inv_ref_T y}
    any [ return (result: ()) -> {x.final = y.current} {y.final = x.current} (! return {result}) ]
  
  predicate resolve_ref_Vec_T_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_T_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_T_Global
  
  let rec swap_Inner_T (x: MutBorrow.t t_Inner_T) (y: MutBorrow.t t_Inner_T) (return (x'0: ())) =
    {[@expl:swap 'x' type invariant] inv_ref_Inner_T'0 x}
    {[@expl:swap 'y' type invariant] inv_ref_Inner_T'0 y}
    any [ return (result: ()) -> {x.final = y.current} {y.final = x.current} (! return {result}) ]
  
  let rec new_unit (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  function id_Id (self: t_Authority_Id_Seq_T) : t_Id
  
  type t_FMap_Id_Seq_T
  
  type t_Option_Seq_T = None'1 | Some'1 (Seq.seq t_T)
  
  function view_FMap_Id_Seq_T (self: t_FMap_Id_Seq_T) : Map.map t_Id t_Option_Seq_T
  
  function get_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : t_Option_Seq_T =
    Map.get (view_FMap_Id_Seq_T self) k
  
  meta "rewrite_def" function get_Id'0
  
  predicate contains_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) = get_Id'0 self k <> None'1
  
  meta "rewrite_def" predicate contains_Id'0
  
  function view_Authority_Id_Seq_T (self: t_Authority_Id_Seq_T) : t_FMap_Id_Seq_T
  
  predicate index_Mapping_Seq_T_bool [@inline:trivial] (self: Map.map (Seq.seq t_T) bool) (a: Seq.seq t_T) =
    Map.get self a
  
  meta "rewrite_def" predicate index_Mapping_Seq_T_bool
  
  function such_that_Seq_T (p: Map.map (Seq.seq t_T) bool) : Seq.seq t_T
  
  axiom such_that_Seq_T_spec:
    forall p: Map.map (Seq.seq t_T) bool. (exists x: Seq.seq t_T. index_Mapping_Seq_T_bool p x)
      -> index_Mapping_Seq_T_bool p (such_that_Seq_T p)
  
  function unwrap_Option_Seq_T (self: t_Option_Seq_T) : Seq.seq t_T = match self with
      | Some'1 x -> x
      | None'1 -> such_that_Seq_T (fun (__0: Seq.seq t_T) -> true)
      end
  
  function lookup_Id'0 [@inline:trivial] (self: t_FMap_Id_Seq_T) (k: t_Id) : Seq.seq t_T =
    unwrap_Option_Seq_T (get_Id'0 self k)
  
  meta "rewrite_def" function lookup_Id'0
  
  function index_FMap_Id_Seq_T [@inline:trivial] (self: t_FMap_Id_Seq_T) (key: t_Id) : Seq.seq t_T =
    lookup_Id'0 self key
  
  meta "rewrite_def" function index_FMap_Id_Seq_T
  
  function index_Mapping_Id_Int [@inline:trivial] (self: Map.map t_Id int) (a: t_Id) : int = Map.get self a
  
  meta "rewrite_def" function index_Mapping_Id_Int
  
  predicate partial_invariant_T [@inline:trivial] (self: t_PA_T) (resource_id: t_Id) =
    id_Id self.auth = resource_id
    /\ (forall id: t_Id. contains_Id'0 (view_Authority_Id_Seq_T self.auth) id /\ contains_Id self.perms id
      -> id_Inner_T'0 (index_FMap_Id_PermCellOwn_Inner_T self.perms id) = id
      /\ match val_Inner_T (index_FMap_Id_PermCellOwn_Inner_T self.perms id) with
        | Direct v -> index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id = view_Vec_T_Global v
        | Link index value next -> contains_Id'0 (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))
        /\ index_Mapping_Id_Int self.depth id
          > index_Mapping_Id_Int self.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))
        /\ UInt64.t'int index
          < Seq.length (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next)))
        /\ index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) id
        = Seq.set (index_FMap_Id_Seq_T (view_Authority_Id_Seq_T self.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global next))) (UInt64.t'int index) value
        end)
  
  meta "rewrite_def" predicate partial_invariant_T
  
  function fin_Ghost_ref_PA_T [@inline:trivial] (self: MutBorrow.t t_PA_T) : t_PA_T = self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PA_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec reroot_T (cur: t_Rc_PermCell_Inner_T_Global) (auth_id: t_Id) (pa: MutBorrow.t t_PA_T) (return (x: ())) =
    {[@expl:reroot 'cur' type invariant] inv_ref_Rc_PermCell_Inner_T_Global cur}
    {[@expl:reroot 'pa' type invariant] inv_Ghost_ref_PA_T pa}
    {[@expl:reroot requires #0] partial_invariant_T pa.current auth_id}
    {[@expl:reroot requires #1] contains_Id'0 (view_Authority_Id_Seq_T pa.current.auth) (id_Inner_T (view_Rc_PermCell_Inner_T_Global cur))}
    {[@expl:reroot requires #2] forall id: t_Id. contains_Id'0 (view_Authority_Id_Seq_T pa.current.auth) id
        /\ index_Mapping_Id_Int pa.current.depth id
        <= index_Mapping_Id_Int pa.current.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global cur))
      -> contains_Id pa.current.perms id}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_17 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s1)
      | s1 = deref_mut_Ghost_ref_PA_T {_17} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_16 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = deref_Rc_PermCell_Inner_T_Global {cur} (fun (_ret: t_PermCell_Inner_T) -> [ &_24 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = id_ghost_Inner_T {_24} (fun (_ret: t_Id) -> [ &_22 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = [ &_21 <- _22 ] s1 | s1 = deref_Ghost_Id {_21} (fun (_ret: t_Id) -> [ &_19 <- _ret ] s2) | s2 = bb4 ]
    | bb4 = s0
      [ s0 = {inv_FMap_Id_PermCellOwn_Inner_T _16.current.current.perms}
        MutBorrow.borrow_mut <t_FMap_Id_PermCellOwn_Inner_T> {_16.current.current.perms}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) ->
            [ &_15 <- _ret ] -{inv_FMap_Id_PermCellOwn_Inner_T _ret.final}-
            [ &_16 <- { _16 with current = { _16.current with current = { _16.current.current with perms = _ret.final } } } ]
            s1)
      | s1 = remove_ghost_Id {_15} {_19} (fun (_ret: t_Option_PermCellOwn_Inner_T) -> [ &_14 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv_ref_ref_PA_T _16} s1
      | s1 = -{resolve_ref_ref_PA_T _16}- s2
      | s2 = unwrap_PermCellOwn_Inner_T {_14} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_13 <- _ret ] s3)
      | s3 = bb6 ]
    | bb6 = s0
      [ s0 = new_PermCellOwn_Inner_T {_13} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &perm_cur <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0
      [ s0 = deref_Rc_PermCell_Inner_T_Global {cur} (fun (_ret: t_PermCell_Inner_T) -> [ &_29 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0
      [ s0 = {inv_Ghost_PermCellOwn_Inner_T perm_cur}
        MutBorrow.borrow_mut <t_PermCellOwn_Inner_T> {perm_cur}
          (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) ->
            [ &_36 <- _ret ] -{inv_Ghost_PermCellOwn_Inner_T _ret.final}-
            [ &perm_cur <- _ret.final ] s1)
      | s1 = {inv_Ghost_PermCellOwn_Inner_T _36.current}
        MutBorrow.borrow_final <t_PermCellOwn_Inner_T> {_36.current} {MutBorrow.get_id _36}
          (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) ->
            [ &_35 <- _ret ] -{inv_Ghost_PermCellOwn_Inner_T _ret.final}-
            [ &_36 <- { _36 with current = _ret.final } ] s2)
      | s2 = deref_mut_Ghost_PermCellOwn_Inner_T {_35}
          (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) -> [ &_34 <- _ret ] s3)
      | s3 = bb9 ]
    | bb9 = s0
      [ s0 = {inv_PermCellOwn_Inner_T _34.current}
        MutBorrow.borrow_final <t_PermCellOwn_Inner_T> {_34.current} {MutBorrow.get_id _34}
          (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) ->
            [ &_33 <- _ret ] -{inv_PermCellOwn_Inner_T _ret.final}-
            [ &_34 <- { _34 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv_ref_Ghost_PermCellOwn_Inner_T _36} s2
      | s2 = -{resolve_ref_Ghost_PermCellOwn_Inner_T _36}- s3
      | s3 = {[@expl:type invariant] inv_ref_PermCellOwn_Inner_T _34} s4
      | s4 = -{resolve_ref_PermCellOwn_Inner_T _34}- s5
      | s5 = {inv_PermCellOwn_Inner_T _33.current}
        MutBorrow.borrow_final <t_PermCellOwn_Inner_T> {_33.current} {MutBorrow.get_id _33}
          (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) ->
            [ &_32 <- _ret ] -{inv_PermCellOwn_Inner_T _ret.final}-
            [ &_33 <- { _33 with current = _ret.final } ] s6)
      | s6 = new_ref_PermCellOwn_Inner_T {_32} (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) -> [ &_31 <- _ret ] s7)
      | s7 = bb10 ]
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PermCellOwn_Inner_T _33} s1
      | s1 = -{resolve_ref_PermCellOwn_Inner_T _33}- s2
      | s2 = borrow_mut_Inner_T {_29} {_31} (fun (_ret: MutBorrow.t t_Inner_T) -> [ &_27 <- _ret ] s3)
      | s3 = bb11 ]
    | bb11 = s0
      [ s0 = {inv_Inner_T _27.current}
        MutBorrow.borrow_final <t_Inner_T> {_27.current} {MutBorrow.get_id _27}
          (fun (_ret: MutBorrow.t t_Inner_T) ->
            [ &bor_cur <- _ret ] -{inv_Inner_T _ret.final}-
            [ &_27 <- { _27 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv_ref_Inner_T'0 _27} s2
      | s2 = -{resolve_ref_Inner_T _27}- s3
      | s3 = any
        [ br0 (x0: t_Vec_T_Global) -> {bor_cur.current = Direct x0} (! bb12)
        | br1 (x0: UInt64.t) (x1: t_T) (x2: t_Rc_PermCell_Inner_T_Global) -> {bor_cur.current = Link x0 x1 x2}
          (! bb21) ] ]
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Inner_T'0 bor_cur} s1
      | s1 = -{resolve_ref_Inner_T bor_cur}- s2
      | s2 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_42 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s3)
      | s3 = deref_mut_Ghost_ref_PA_T {_42} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_41 <- _ret ] s4)
      | s4 = bb13 ]
    | bb13 = s0
      [ s0 = deref_Rc_PermCell_Inner_T_Global {cur} (fun (_ret: t_PermCell_Inner_T) -> [ &_48 <- _ret ] s1)
      | s1 = bb14 ]
    | bb14 = s0 [ s0 = id_ghost_Inner_T {_48} (fun (_ret: t_Id) -> [ &_46 <- _ret ] s1) | s1 = bb15 ]
    | bb15 = s0 [ s0 = deref_Ghost_Id {_46} (fun (_ret: t_Id) -> [ &_44 <- _ret ] s1) | s1 = bb16 ]
    | bb16 = s0
      [ s0 = into_inner_PermCellOwn_Inner_T {perm_cur} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_50 <- _ret ] s1)
      | s1 = bb17 ]
    | bb17 = s0
      [ s0 = {inv_FMap_Id_PermCellOwn_Inner_T _41.current.current.perms}
        MutBorrow.borrow_mut <t_FMap_Id_PermCellOwn_Inner_T> {_41.current.current.perms}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) ->
            [ &_40 <- _ret ] -{inv_FMap_Id_PermCellOwn_Inner_T _ret.final}-
            [ &_41 <- { _41 with current = { _41.current with current = { _41.current.current with perms = _ret.final } } } ]
            s1)
      | s1 = insert_ghost_Id {_40} {_44} {_50} (fun (_ret: t_Option_PermCellOwn_Inner_T) -> [ &_39 <- _ret ] s2)
      | s2 = bb18 ]
    | bb18 = s0
      [ s0 = {[@expl:type invariant] inv_ref_ref_PA_T _41} s1
      | s1 = -{resolve_ref_ref_PA_T _41}- s2
      | s2 = {[@expl:type invariant] inv_Ghost_ref_PA_T pa} s3
      | s3 = -{resolve_Ghost_ref_PA_T pa}- s4
      | s4 = new_Option_PermCellOwn_Inner_T {_39} (fun (_ret: t_Option_PermCellOwn_Inner_T) -> [ &_38 <- _ret ] s5)
      | s5 = {[@expl:type invariant] inv_Ghost_Option_PermCellOwn_Inner_T _38} s6
      | s6 = -{resolve_Ghost_Option_PermCellOwn_Inner_T _38}- s7
      | s7 = bb53 ]
    | bb21 = s0
      [ s0 = elim_Link {bor_cur.current}
          (fun (rindex: UInt64.t) (rvalue: t_T) (rnext: t_Rc_PermCell_Inner_T_Global) ->
            {inv_Rc_PermCell_Inner_T_Global rnext}
            MutBorrow.borrow_mut <t_Rc_PermCell_Inner_T_Global> {rnext}
              (fun (_ret: MutBorrow.t t_Rc_PermCell_Inner_T_Global) ->
                [ &next <- _ret ] -{inv_Rc_PermCell_Inner_T_Global _ret.final}-
                [ &bor_cur <- { bor_cur with current = Link rindex rvalue _ret.final } ] s1))
      | s1 = elim_Link {bor_cur.current}
          (fun (rindex: UInt64.t) (rvalue: t_T) (rnext: t_Rc_PermCell_Inner_T_Global) ->
            {inv_T rvalue}
            MutBorrow.borrow_mut <t_T> {rvalue}
              (fun (_ret: MutBorrow.t t_T) ->
                [ &value <- _ret ] -{inv_T _ret.final}-
                [ &bor_cur <- { bor_cur with current = Link rindex _ret.final rnext } ] s2))
      | s2 = elim_Link {bor_cur.current}
          (fun (rindex: UInt64.t) (rvalue: t_T) (rnext: t_Rc_PermCell_Inner_T_Global) ->
            MutBorrow.borrow_mut <UInt64.t> {rindex}
              (fun (_ret: MutBorrow.t UInt64.t) ->
                [ &index <- _ret ] [ &bor_cur <- { bor_cur with current = Link _ret.final rvalue rnext } ] s3))
      | s3 = [ &_58 <- next ] s4
      | s4 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_65 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s5)
      | s5 = deref_mut_Ghost_ref_PA_T {_65} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_64 <- _ret ] s6)
      | s6 = bb22 ]
    | bb22 = s0
      [ s0 = {inv_ref_PA_T _64.current}
        MutBorrow.borrow_final <MutBorrow.t t_PA_T> {_64.current} {MutBorrow.get_id _64}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_63 <- _ret ] -{inv_ref_PA_T _ret.final}-
            [ &_64 <- { _64 with current = _ret.final } ] s1)
      | s1 = {inv_PA_T _63.current.current}
        MutBorrow.borrow_mut <t_PA_T> {_63.current.current}
          (fun (_ret: MutBorrow.t t_PA_T) ->
            [ &_62 <- _ret ] -{inv_PA_T _ret.final}-
            [ &_63 <- { _63 with current = { _63.current with current = _ret.final } } ] s2)
      | s2 = {[@expl:type invariant] inv_ref_ref_PA_T _64} s3
      | s3 = -{resolve_ref_ref_PA_T _64}- s4
      | s4 = {[@expl:type invariant] inv_ref_ref_PA_T _63} s5
      | s5 = -{resolve_ref_ref_PA_T _63}- s6
      | s6 = {inv_PA_T _62.current}
        MutBorrow.borrow_final <t_PA_T> {_62.current} {MutBorrow.get_id _62}
          (fun (_ret: MutBorrow.t t_PA_T) ->
            [ &_61 <- _ret ] -{inv_PA_T _ret.final}-
            [ &_62 <- { _62 with current = _ret.final } ] s7)
      | s7 = new_ref_PA_T {_61} (fun (_ret: MutBorrow.t t_PA_T) -> [ &_60 <- _ret ] s8)
      | s8 = bb23 ]
    | bb23 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PA_T _62} s1
      | s1 = -{resolve_ref_PA_T _62}- s2
      | s2 = reroot_T {_58.current} {auth_id} {_60} (fun (_ret: ()) -> [ &_56 <- _ret ] s3)
      | s3 = bb24 ]
    | bb24 = s0
      [ s0 = clone_Rc_PermCell_Inner_T_Global {cur} (fun (_ret: t_Rc_PermCell_Inner_T_Global) -> [ &_68 <- _ret ] s1)
      | s1 = bb25 ]
    | bb25 = s0
      [ s0 = {inv_Rc_PermCell_Inner_T_Global next.current}
        MutBorrow.borrow_final <t_Rc_PermCell_Inner_T_Global> {next.current} {MutBorrow.get_id next}
          (fun (_ret: MutBorrow.t t_Rc_PermCell_Inner_T_Global) ->
            [ &_67 <- _ret ] -{inv_Rc_PermCell_Inner_T_Global _ret.final}-
            [ &next <- { next with current = _ret.final } ] s1)
      | s1 = replace_Rc_PermCell_Inner_T_Global {_67} {_68}
          (fun (_ret: t_Rc_PermCell_Inner_T_Global) -> [ &next'0 <- _ret ] s2)
      | s2 = bb26 ]
    | bb26 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Rc_PermCell_Inner_T_Global'0 next} s1
      | s1 = -{resolve_ref_Rc_PermCell_Inner_T_Global next}- s2
      | s2 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_76 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s3)
      | s3 = deref_mut_Ghost_ref_PA_T {_76} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_75 <- _ret ] s4)
      | s4 = bb27 ]
    | bb27 = s0
      [ s0 = deref_Rc_PermCell_Inner_T_Global {next'0} (fun (_ret: t_PermCell_Inner_T) -> [ &_83 <- _ret ] s1)
      | s1 = bb28 ]
    | bb28 = s0 [ s0 = id_ghost_Inner_T {_83} (fun (_ret: t_Id) -> [ &_81 <- _ret ] s1) | s1 = bb29 ]
    | bb29 = s0 [ s0 = deref_Ghost_Id {_81} (fun (_ret: t_Id) -> [ &_79 <- _ret ] s1) | s1 = bb30 ]
    | bb30 = s0
      [ s0 = [ &_78 <- _79 ] s1
      | s1 = {inv_FMap_Id_PermCellOwn_Inner_T _75.current.current.perms}
        MutBorrow.borrow_mut <t_FMap_Id_PermCellOwn_Inner_T> {_75.current.current.perms}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) ->
            [ &_74 <- _ret ] -{inv_FMap_Id_PermCellOwn_Inner_T _ret.final}-
            [ &_75 <- { _75 with current = { _75.current with current = { _75.current.current with perms = _ret.final } } } ]
            s2)
      | s2 = get_mut_ghost_Id {_74} {_78} (fun (_ret: t_Option_ref_PermCellOwn_Inner_T) -> [ &_73 <- _ret ] s3)
      | s3 = bb31 ]
    | bb31 = s0
      [ s0 = unwrap_ref_PermCellOwn_Inner_T {_73} (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) -> [ &_72 <- _ret ] s1)
      | s1 = bb32 ]
    | bb32 = s0
      [ s0 = {[@expl:type invariant] inv_ref_ref_PA_T _75} s1
      | s1 = -{resolve_ref_ref_PA_T _75}- s2
      | s2 = {inv_PermCellOwn_Inner_T _72.current}
        MutBorrow.borrow_final <t_PermCellOwn_Inner_T> {_72.current} {MutBorrow.get_id _72}
          (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) ->
            [ &_71 <- _ret ] -{inv_PermCellOwn_Inner_T _ret.final}-
            [ &_72 <- { _72 with current = _ret.final } ] s3)
      | s3 = new_ref_PermCellOwn_Inner_T {_71}
          (fun (_ret: MutBorrow.t t_PermCellOwn_Inner_T) -> [ &perm_next <- _ret ] s4)
      | s4 = bb33 ]
    | bb33 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PermCellOwn_Inner_T _72} s1
      | s1 = -{resolve_ref_PermCellOwn_Inner_T _72}- s2
      | s2 = {[@expl:type invariant] inv_Rc_PermCell_Inner_T_Global next'0} s3
      | s3 = -{resolve_Rc_PermCell_Inner_T_Global next'0}- s4
      | s4 = deref_Rc_PermCell_Inner_T_Global {next'0} (fun (_ret: t_PermCell_Inner_T) -> [ &_88 <- _ret ] s5)
      | s5 = bb34 ]
    | bb34 = s0
      [ s0 = borrow_mut_Inner_T {_88} {perm_next} (fun (_ret: MutBorrow.t t_Inner_T) -> [ &_86 <- _ret ] s1)
      | s1 = bb35 ]
    | bb35 = s0
      [ s0 = {inv_Inner_T _86.current}
        MutBorrow.borrow_final <t_Inner_T> {_86.current} {MutBorrow.get_id _86}
          (fun (_ret: MutBorrow.t t_Inner_T) ->
            [ &bor_next <- _ret ] -{inv_Inner_T _ret.final}-
            [ &_86 <- { _86 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv_ref_Inner_T'0 _86} s2
      | s2 = -{resolve_ref_Inner_T _86}- s3
      | s3 = any
        [ br0 (x0: t_Vec_T_Global) -> {bor_next.current = Direct x0} (! bb38)
        | br1 (x0: UInt64.t) (x1: t_T) (x2: t_Rc_PermCell_Inner_T_Global) -> {bor_next.current = Link x0 x1 x2}
          (! bb36) ] ]
    | bb36 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Inner_T'0 bor_next} s1
      | s1 = -{resolve_ref_Inner_T bor_next}- s2
      | s2 = -{resolve_ref_usize index}- s3
      | s3 = {[@expl:type invariant] inv_ref_T value} s4
      | s4 = -{resolve_ref_T value}- s5
      | s5 = {false} any ]
    | bb38 = s0
      [ s0 = elim_Direct {bor_next.current}
          (fun (r0: t_Vec_T_Global) ->
            {inv_Vec_T_Global r0}
            MutBorrow.borrow_mut <t_Vec_T_Global> {r0}
              (fun (_ret: MutBorrow.t t_Vec_T_Global) ->
                [ &arr <- _ret ] -{inv_Vec_T_Global _ret.final}-
                [ &bor_next <- { bor_next with current = Direct _ret.final } ] s1))
      | s1 = {inv_Vec_T_Global arr.current}
        MutBorrow.borrow_final <t_Vec_T_Global> {arr.current} {MutBorrow.get_id arr}
          (fun (_ret: MutBorrow.t t_Vec_T_Global) ->
            [ &_98 <- _ret ] -{inv_Vec_T_Global _ret.final}-
            [ &arr <- { arr with current = _ret.final } ] s2)
      | s2 = -{resolve_ref_usize index}- s3
      | s3 = index_mut_Vec_T_Global {_98} {index.current} (fun (_ret: MutBorrow.t t_T) -> [ &_97 <- _ret ] s4)
      | s4 = bb39 ]
    | bb39 = s0
      [ s0 = {inv_T _97.current}
        MutBorrow.borrow_final <t_T> {_97.current} {MutBorrow.get_id _97}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_96 <- _ret ] -{inv_T _ret.final}-
            [ &_97 <- { _97 with current = _ret.final } ] s1)
      | s1 = {inv_T _96.current}
        MutBorrow.borrow_final <t_T> {_96.current} {MutBorrow.get_id _96}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_95 <- _ret ] -{inv_T _ret.final}-
            [ &_96 <- { _96 with current = _ret.final } ] s2)
      | s2 = {inv_T value.current}
        MutBorrow.borrow_final <t_T> {value.current} {MutBorrow.get_id value}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_100 <- _ret ] -{inv_T _ret.final}-
            [ &value <- { value with current = _ret.final } ] s3)
      | s3 = swap_T {_95} {_100} (fun (_ret: ()) -> [ &_94 <- _ret ] s4)
      | s4 = bb40 ]
    | bb40 = s0
      [ s0 = {[@expl:type invariant] inv_ref_T _97} s1
      | s1 = -{resolve_ref_T _97}- s2
      | s2 = {[@expl:type invariant] inv_ref_T _96} s3
      | s3 = -{resolve_ref_T _96}- s4
      | s4 = {[@expl:type invariant] inv_ref_Vec_T_Global arr} s5
      | s5 = -{resolve_ref_Vec_T_Global arr}- s6
      | s6 = {[@expl:type invariant] inv_ref_T value} s7
      | s7 = -{resolve_ref_T value}- s8
      | s8 = {inv_Inner_T bor_next.current}
        MutBorrow.borrow_final <t_Inner_T> {bor_next.current} {MutBorrow.get_id bor_next}
          (fun (_ret: MutBorrow.t t_Inner_T) ->
            [ &_102 <- _ret ] -{inv_Inner_T _ret.final}-
            [ &bor_next <- { bor_next with current = _ret.final } ] s9)
      | s9 = {inv_Inner_T bor_cur.current}
        MutBorrow.borrow_final <t_Inner_T> {bor_cur.current} {MutBorrow.get_id bor_cur}
          (fun (_ret: MutBorrow.t t_Inner_T) ->
            [ &_103 <- _ret ] -{inv_Inner_T _ret.final}-
            [ &bor_cur <- { bor_cur with current = _ret.final } ] s10)
      | s10 = swap_Inner_T {_102} {_103} (fun (_ret: ()) -> [ &_101 <- _ret ] s11)
      | s11 = bb41 ]
    | bb41 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Inner_T'0 bor_next} s1
      | s1 = -{resolve_ref_Inner_T bor_next}- s2
      | s2 = {[@expl:type invariant] inv_ref_Inner_T'0 bor_cur} s3
      | s3 = -{resolve_ref_Inner_T bor_cur}- s4
      | s4 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_109 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s5)
      | s5 = deref_mut_Ghost_ref_PA_T {_109} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_108 <- _ret ] s6)
      | s6 = bb42 ]
    | bb42 = s0
      [ s0 = deref_Rc_PermCell_Inner_T_Global {cur} (fun (_ret: t_PermCell_Inner_T) -> [ &_115 <- _ret ] s1)
      | s1 = bb43 ]
    | bb43 = s0 [ s0 = id_ghost_Inner_T {_115} (fun (_ret: t_Id) -> [ &_113 <- _ret ] s1) | s1 = bb44 ]
    | bb44 = s0 [ s0 = deref_Ghost_Id {_113} (fun (_ret: t_Id) -> [ &_111 <- _ret ] s1) | s1 = bb45 ]
    | bb45 = s0
      [ s0 = into_inner_PermCellOwn_Inner_T {perm_cur} (fun (_ret: t_PermCellOwn_Inner_T) -> [ &_117 <- _ret ] s1)
      | s1 = bb46 ]
    | bb46 = s0
      [ s0 = {inv_FMap_Id_PermCellOwn_Inner_T _108.current.current.perms}
        MutBorrow.borrow_mut <t_FMap_Id_PermCellOwn_Inner_T> {_108.current.current.perms}
          (fun (_ret: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T) ->
            [ &_107 <- _ret ] -{inv_FMap_Id_PermCellOwn_Inner_T _ret.final}-
            [ &_108 <- { _108 with current = { _108.current with current = { _108.current.current with perms = _ret.final } } } ]
            s1)
      | s1 = insert_ghost_Id {_107} {_111} {_117} (fun (_ret: t_Option_PermCellOwn_Inner_T) -> [ &_106 <- _ret ] s2)
      | s2 = {[@expl:type invariant] inv_Option_PermCellOwn_Inner_T _106} s3
      | s3 = -{resolve_Option_PermCellOwn_Inner_T _106}- s4
      | s4 = bb47 ]
    | bb47 = s0
      [ s0 = {[@expl:type invariant] inv_ref_ref_PA_T _108} s1
      | s1 = -{resolve_ref_ref_PA_T _108}- s2
      | s2 =
        [ &new_d <- MinMax.min (Map.get pa.current.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global cur))) (Map.get pa.current.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global next'0))
        - 1) ] s3
      | s3 = bb48 ]
    | bb48 = s0
      [ s0 = [ &_121 <- Map.set pa.current.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global cur)) new_d ] s1
      | s1 = bb49 ]
    | bb49 = s0
      [ s0 = {inv_Ghost_ref_PA_T pa}
        MutBorrow.borrow_mut <MutBorrow.t t_PA_T> {pa}
          (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) ->
            [ &_124 <- _ret ] -{inv_Ghost_ref_PA_T _ret.final}-
            [ &pa <- _ret.final ] s1)
      | s1 = deref_mut_Ghost_ref_PA_T {_124} (fun (_ret: MutBorrow.t (MutBorrow.t t_PA_T)) -> [ &_123 <- _ret ] s2)
      | s2 = bb50 ]
    | bb50 = s0
      [ s0 =
        [ &_123 <- { _123 with current = { _123.current with current = { _123.current.current with depth = _121 } } } ]
        s1
      | s1 = {[@expl:type invariant] inv_ref_ref_PA_T _123} s2
      | s2 = -{resolve_ref_ref_PA_T _123}- s3
      | s3 = {[@expl:type invariant] inv_Ghost_ref_PA_T pa} s4
      | s4 = -{resolve_Ghost_ref_PA_T pa}- s5
      | s5 = new_unit {_105} (fun (_ret: ()) -> [ &_104 <- _ret ] s6)
      | s6 = bb53 ]
    | bb53 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & cur: t_Rc_PermCell_Inner_T_Global = cur
    | & auth_id: t_Id = auth_id
    | & pa: MutBorrow.t t_PA_T = pa
    | & perm_cur: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _13: t_PermCellOwn_Inner_T = Any.any_l ()
    | & _14: t_Option_PermCellOwn_Inner_T = Any.any_l ()
    | & _15: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _16: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _17: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _19: t_Id = Any.any_l ()
    | & _21: t_Id = Any.any_l ()
    | & _22: t_Id = Any.any_l ()
    | & _24: t_PermCell_Inner_T = Any.any_l ()
    | & bor_cur: MutBorrow.t t_Inner_T = Any.any_l ()
    | & _27: MutBorrow.t t_Inner_T = Any.any_l ()
    | & _29: t_PermCell_Inner_T = Any.any_l ()
    | & _31: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _32: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _33: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _34: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _35: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _36: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _38: t_Option_PermCellOwn_Inner_T = Any.any_l ()
    | & _39: t_Option_PermCellOwn_Inner_T = Any.any_l ()
    | & _40: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _41: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _42: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _44: t_Id = Any.any_l ()
    | & _46: t_Id = Any.any_l ()
    | & _48: t_PermCell_Inner_T = Any.any_l ()
    | & _50: t_PermCellOwn_Inner_T = Any.any_l ()
    | & next: MutBorrow.t t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & value: MutBorrow.t t_T = Any.any_l ()
    | & index: MutBorrow.t UInt64.t = Any.any_l ()
    | & _56: () = Any.any_l ()
    | & _58: MutBorrow.t t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & _60: MutBorrow.t t_PA_T = Any.any_l ()
    | & _61: MutBorrow.t t_PA_T = Any.any_l ()
    | & _62: MutBorrow.t t_PA_T = Any.any_l ()
    | & _63: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _64: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _65: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & next'0: t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & _67: MutBorrow.t t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & _68: t_Rc_PermCell_Inner_T_Global = Any.any_l ()
    | & perm_next: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _71: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _72: MutBorrow.t t_PermCellOwn_Inner_T = Any.any_l ()
    | & _73: t_Option_ref_PermCellOwn_Inner_T = Any.any_l ()
    | & _74: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _75: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _76: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _78: t_Id = Any.any_l ()
    | & _79: t_Id = Any.any_l ()
    | & _81: t_Id = Any.any_l ()
    | & _83: t_PermCell_Inner_T = Any.any_l ()
    | & bor_next: MutBorrow.t t_Inner_T = Any.any_l ()
    | & _86: MutBorrow.t t_Inner_T = Any.any_l ()
    | & _88: t_PermCell_Inner_T = Any.any_l ()
    | & arr: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & _94: () = Any.any_l ()
    | & _95: MutBorrow.t t_T = Any.any_l ()
    | & _96: MutBorrow.t t_T = Any.any_l ()
    | & _97: MutBorrow.t t_T = Any.any_l ()
    | & _98: MutBorrow.t t_Vec_T_Global = Any.any_l ()
    | & _100: MutBorrow.t t_T = Any.any_l ()
    | & _101: () = Any.any_l ()
    | & _102: MutBorrow.t t_Inner_T = Any.any_l ()
    | & _103: MutBorrow.t t_Inner_T = Any.any_l ()
    | & _104: () = Any.any_l ()
    | & _105: () = Any.any_l ()
    | & _106: t_Option_PermCellOwn_Inner_T = Any.any_l ()
    | & _107: MutBorrow.t t_FMap_Id_PermCellOwn_Inner_T = Any.any_l ()
    | & _108: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _109: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _111: t_Id = Any.any_l ()
    | & _113: t_Id = Any.any_l ()
    | & _115: t_PermCell_Inner_T = Any.any_l ()
    | & _117: t_PermCellOwn_Inner_T = Any.any_l ()
    | & new_d: int = Any.any_l ()
    | & _121: Map.map t_Id int = Any.any_l ()
    | & _123: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l ()
    | & _124: MutBorrow.t (MutBorrow.t t_PA_T) = Any.any_l () ])
    [ return (result: ()) -> {[@expl:reroot ensures #0] partial_invariant_T (fin_Ghost_ref_PA_T pa) auth_id}
      {[@expl:reroot ensures #1] (fin_Ghost_ref_PA_T pa).auth = pa.current.auth}
      {[@expl:reroot ensures #2] forall id: t_Id. index_Mapping_Id_Int pa.current.depth id
          > index_Mapping_Id_Int pa.current.depth (id_Inner_T (view_Rc_PermCell_Inner_T_Global cur))
        -> get_Id pa.current.perms id = get_Id (fin_Ghost_ref_PA_T pa).perms id
        /\ index_Mapping_Id_Int pa.current.depth id = index_Mapping_Id_Int (fin_Ghost_ref_PA_T pa).depth id}
      {[@expl:reroot ensures #3] forall id: t_Id. contains_Id (fin_Ghost_ref_PA_T pa).perms id
        = contains_Id pa.current.perms id}
      {[@expl:reroot ensures #4] match val_Inner_T (index_FMap_Id_PermCellOwn_Inner_T (fin_Ghost_ref_PA_T pa).perms (id_Inner_T (view_Rc_PermCell_Inner_T_Global cur))) with
        | Direct _ -> true
        | Link _ _ _ -> false
        end}
      (! return {result}) ]
end
module M_testing
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use creusot.slice.Slice64
  use creusot.int.Int32
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use set.Set
  use creusot.prelude.Any
  
  type t_Vec_i32_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_i32_Global (self: t_Vec_i32_Global) : Seq.seq Int32.t
  
  axiom view_Vec_i32_Global_spec: forall self: t_Vec_i32_Global. Seq.length (view_Vec_i32_Global self)
      <= UInt64.t'int const_MAX
  
  function view_Box_slice_i32_Global [@inline:trivial] (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    Slice64.view self
  
  meta "rewrite_def" function view_Box_slice_i32_Global
  
  let rec into_vec_i32 (self_: Slice64.slice Int32.t) (return (x: t_Vec_i32_Global)) = any
    [ return (result: t_Vec_i32_Global) -> {view_Vec_i32_Global result = view_Box_slice_i32_Global self_}
      (! return {result}) ]
  
  type t_PersistentArray_i32
  
  predicate invariant_PersistentArray_i32 (self: t_PersistentArray_i32)
  
  predicate inv_PersistentArray_i32 (_1: t_PersistentArray_i32)
  
  axiom inv_axiom: forall x: t_PersistentArray_i32 [inv_PersistentArray_i32 x]. inv_PersistentArray_i32 x
      -> invariant_PersistentArray_i32 x
  
  function view_PersistentArray_i32 (self: t_PersistentArray_i32) : Seq.seq Int32.t
  
  let rec new_i32 (v: t_Vec_i32_Global) (return (x: t_PersistentArray_i32)) = any
    [ return (result: t_PersistentArray_i32) -> {inv_PersistentArray_i32 result}
      {view_PersistentArray_i32 result = view_Vec_i32_Global v}
      (! return {result}) ]
  
  type t_Tokens
  
  let rec deref_mut_Ghost_Tokens (self: MutBorrow.t t_Tokens) (return (x: MutBorrow.t t_Tokens)) = any
    [ return (result: MutBorrow.t t_Tokens) -> {result = self} (! return {result}) ]
  
  let rec reborrow (self: MutBorrow.t t_Tokens) (return (x: t_Tokens)) = any
    [ return (result: t_Tokens) -> {result = self.current /\ self.final = self.current} (! return {result}) ]
  
  predicate resolve_ref_Tokens [@inline:trivial] (_1: MutBorrow.t t_Tokens) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Tokens
  
  let rec new_Tokens (x: t_Tokens) (return (x'0: t_Tokens)) = any
    [ return (result: t_Tokens) -> {result = x} (! return {result}) ]
  
  predicate invariant_ref_PersistentArray_i32 [@inline:trivial] (self: t_PersistentArray_i32) =
    inv_PersistentArray_i32 self
  
  meta "rewrite_def" predicate invariant_ref_PersistentArray_i32
  
  predicate inv_ref_PersistentArray_i32 [@inline:trivial] (_1: t_PersistentArray_i32) =
    invariant_ref_PersistentArray_i32 _1
  
  meta "rewrite_def" predicate inv_ref_PersistentArray_i32
  
  predicate contains_Namespace [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) = Set.mem e self
  
  meta "rewrite_def" predicate contains_Namespace
  
  function namespaces (self: t_Tokens) : Set.set t_Namespace
  
  predicate contains (self: t_Tokens) (namespace: t_Namespace) = contains_Namespace (namespaces self) namespace
  
  let rec set_i32 (self: t_PersistentArray_i32) (index: UInt64.t) (value: Int32.t) (tokens: t_Tokens)
    (return (x: t_PersistentArray_i32)) = {[@expl:set 'self' type invariant] inv_ref_PersistentArray_i32 self}
    {[@expl:set requires #0] UInt64.t'int index < Seq.length (view_PersistentArray_i32 self)}
    {[@expl:set requires #1] contains tokens (Namespace_PARRAY 0)}
    any
    [ return (result: t_PersistentArray_i32) -> {inv_PersistentArray_i32 result}
      {view_PersistentArray_i32 result = Seq.set (view_PersistentArray_i32 self) (UInt64.t'int index) value}
      (! return {result}) ]
  
  predicate resolve_PersistentArray_i32 (_1: t_PersistentArray_i32)
  
  predicate resolve_Tokens (_1: t_Tokens)
  
  predicate resolve_Ghost_Tokens [@inline:trivial] (_1: t_Tokens) = resolve_Tokens _1
  
  meta "rewrite_def" predicate resolve_Ghost_Tokens
  
  let rec clone_PersistentArray_i32 (self: t_PersistentArray_i32) (return (x: t_PersistentArray_i32)) =
    {[@expl:clone 'self' type invariant] inv_ref_PersistentArray_i32 self}
    any
    [ return (result: t_PersistentArray_i32) -> {inv_PersistentArray_i32 result}
      {view_PersistentArray_i32 result = view_PersistentArray_i32 self}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec testing (tokens: t_Tokens) (return (x: ())) = {[@expl:testing requires] contains tokens (Namespace_PARRAY 0)}
    (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp: Slice64.array Int32.t) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = (1: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 1 = (2: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 2 = (3: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 3 = (4: Int32.t) /\ Seq.length __arr_temp.Slice64.elts = 4}-
          [ &_7 <- __arr_temp ] s1) ]
      | s1 = bb2 ]
    | bb2 = s0 [ s0 = into_vec_i32 {_7} (fun (_ret: t_Vec_i32_Global) -> [ &_4 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = new_i32 {_4} (fun (_ret: t_PersistentArray_i32) -> [ &a <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <t_Tokens> {tokens}
          (fun (_ret: MutBorrow.t t_Tokens) -> [ &_14 <- _ret ] [ &tokens <- _ret.final ] s1)
      | s1 = deref_mut_Ghost_Tokens {_14} (fun (_ret: MutBorrow.t t_Tokens) -> [ &_13 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0
      [ s0 = MutBorrow.borrow_final <t_Tokens> {_13.current} {MutBorrow.get_id _13}
          (fun (_ret: MutBorrow.t t_Tokens) -> [ &_12 <- _ret ] [ &_13 <- { _13 with current = _ret.final } ] s1)
      | s1 = reborrow {_12} (fun (_ret: t_Tokens) -> [ &_11 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0
      [ s0 = -{resolve_ref_Tokens _13}- s1
      | s1 = new_Tokens {_11} (fun (_ret: t_Tokens) -> [ &_10 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = set_i32 {a} {(1: UInt64.t)} {(42: Int32.t)} {_10} (fun (_ret: t_PersistentArray_i32) -> [ &a2 <- _ret ] s1)
      | s1 = bb8 ]
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv_PersistentArray_i32 a2} s1
      | s1 = -{resolve_PersistentArray_i32 a2}- s2
      | s2 = MutBorrow.borrow_mut <t_Tokens> {tokens}
          (fun (_ret: MutBorrow.t t_Tokens) -> [ &_21 <- _ret ] [ &tokens <- _ret.final ] s3)
      | s3 = deref_mut_Ghost_Tokens {_21} (fun (_ret: MutBorrow.t t_Tokens) -> [ &_20 <- _ret ] s4)
      | s4 = bb9 ]
    | bb9 = s0
      [ s0 = MutBorrow.borrow_final <t_Tokens> {_20.current} {MutBorrow.get_id _20}
          (fun (_ret: MutBorrow.t t_Tokens) -> [ &_19 <- _ret ] [ &_20 <- { _20 with current = _ret.final } ] s1)
      | s1 = reborrow {_19} (fun (_ret: t_Tokens) -> [ &_18 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = s0
      [ s0 = -{resolve_ref_Tokens _20}- s1
      | s1 = new_Tokens {_18} (fun (_ret: t_Tokens) -> [ &_17 <- _ret ] s2)
      | s2 = bb11 ]
    | bb11 = s0
      [ s0 = set_i32 {a} {(0: UInt64.t)} {(50: Int32.t)} {_17} (fun (_ret: t_PersistentArray_i32) -> [ &a3 <- _ret ] s1)
      | s1 = bb12 ]
    | bb12 = s0
      [ s0 = -{resolve_Ghost_Tokens tokens}- s1
      | s1 = {[@expl:type invariant] inv_PersistentArray_i32 a3} s2
      | s2 = -{resolve_PersistentArray_i32 a3}- s3
      | s3 = {[@expl:type invariant] inv_PersistentArray_i32 a} s4
      | s4 = -{resolve_PersistentArray_i32 a}- s5
      | s5 = clone_PersistentArray_i32 {a} (fun (_ret: t_PersistentArray_i32) -> [ &a4 <- _ret ] s6)
      | s6 = bb13 ]
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv_PersistentArray_i32 a4} s1
      | s1 = -{resolve_PersistentArray_i32 a4}- s2
      | s2 = [ &a_model <- Seq.create 4 [|(1: Int32.t);(2: Int32.t);(3: Int32.t);(4: Int32.t)|] ] s3
      | s3 = bb14 ]
    | bb14 = s0
      [ s0 = [ &a2_model <- Seq.create 4 [|(1: Int32.t);(42: Int32.t);(3: Int32.t);(4: Int32.t)|] ] s1 | s1 = bb15 ]
    | bb15 = s0
      [ s0 = [ &a3_model <- Seq.create 4 [|(50: Int32.t);(2: Int32.t);(3: Int32.t);(4: Int32.t)|] ] s1 | s1 = bb16 ]
    | bb16 = s0
      [ s0 = {[@expl:assertion] view_PersistentArray_i32 a = a_model} s1
      | s1 = {[@expl:assertion] view_PersistentArray_i32 a2 = a2_model} s2
      | s2 = {[@expl:assertion] view_PersistentArray_i32 a3 = a3_model} s3
      | s3 = {[@expl:assertion] view_PersistentArray_i32 a4 = a_model} s4
      | s4 = bb20 ]
    | bb20 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & tokens: t_Tokens = tokens
    | & a: t_PersistentArray_i32 = Any.any_l ()
    | & _4: t_Vec_i32_Global = Any.any_l ()
    | & _7: Slice64.array Int32.t = Any.any_l ()
    | & a2: t_PersistentArray_i32 = Any.any_l ()
    | & _10: t_Tokens = Any.any_l ()
    | & _11: t_Tokens = Any.any_l ()
    | & _12: MutBorrow.t t_Tokens = Any.any_l ()
    | & _13: MutBorrow.t t_Tokens = Any.any_l ()
    | & _14: MutBorrow.t t_Tokens = Any.any_l ()
    | & a3: t_PersistentArray_i32 = Any.any_l ()
    | & _17: t_Tokens = Any.any_l ()
    | & _18: t_Tokens = Any.any_l ()
    | & _19: MutBorrow.t t_Tokens = Any.any_l ()
    | & _20: MutBorrow.t t_Tokens = Any.any_l ()
    | & _21: MutBorrow.t t_Tokens = Any.any_l ()
    | & a4: t_PersistentArray_i32 = Any.any_l ()
    | & a_model: Seq.seq Int32.t = Any.any_l ()
    | & a2_model: Seq.seq Int32.t = Any.any_l ()
    | & a3_model: Seq.seq Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_implementation__impl_Clone_for_PersistentArray_T__clone__refines (* <implementation::PersistentArray<T> as std::clone::Clone> *)
  type namespace_other
  
  type t_Namespace = Namespace_PARRAY int | Other namespace_other
  
  use seq.Seq
  
  type t_Rc_PermCell_Inner_T_Global
  
  type t_Fragment_Id_Seq_T
  
  type t_Rc_LocalInvariant_PA_T_Global
  
  type t_PersistentArray_T = {
    permcell: t_Rc_PermCell_Inner_T_Global;
    frag: t_Fragment_Id_Seq_T;
    inv: t_Rc_LocalInvariant_PA_T_Global }
  
  type t_Id
  
  type t_T
  
  type tup2_Id_Seq_T = { f0: t_Id; f1: Seq.seq t_T }
  
  function view_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T) : tup2_Id_Seq_T
  
  type t_PermCell_Inner_T
  
  function id_Inner_T (self: t_PermCell_Inner_T) : t_Id
  
  function view_Rc_PermCell_Inner_T_Global (self: t_Rc_PermCell_Inner_T_Global) : t_PermCell_Inner_T
  
  function id_Id (self: t_Fragment_Id_Seq_T) : t_Id
  
  type t_LocalInvariant_PA_T
  
  function public_PA_T (self: t_LocalInvariant_PA_T) : t_Id
  
  function view_Rc_LocalInvariant_PA_T_Global (self: t_Rc_LocalInvariant_PA_T_Global) : t_LocalInvariant_PA_T
  
  function namespace_PA_T (self: t_LocalInvariant_PA_T) : t_Namespace
  
  predicate invariant_PersistentArray_T (self: t_PersistentArray_T) =
    (view_Fragment_Id_Seq_T self.frag).f0 = id_Inner_T (view_Rc_PermCell_Inner_T_Global self.permcell)
    /\ id_Id self.frag = public_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv)
    /\ namespace_PA_T (view_Rc_LocalInvariant_PA_T_Global self.inv) = Namespace_PARRAY 0
  
  predicate inv_Rc_PermCell_Inner_T_Global (_1: t_Rc_PermCell_Inner_T_Global)
  
  predicate invariant_Fragment_Id_Seq_T (self: t_Fragment_Id_Seq_T)
  
  predicate inv_Fragment_Id_Seq_T (_1: t_Fragment_Id_Seq_T)
  
  axiom inv_axiom: forall x: t_Fragment_Id_Seq_T [inv_Fragment_Id_Seq_T x]. inv_Fragment_Id_Seq_T x
      -> invariant_Fragment_Id_Seq_T x
  
  predicate invariant_Ghost_Fragment_Id_Seq_T [@inline:trivial] (self: t_Fragment_Id_Seq_T) = inv_Fragment_Id_Seq_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Fragment_Id_Seq_T
  
  predicate inv_Ghost_Fragment_Id_Seq_T [@inline:trivial] (_1: t_Fragment_Id_Seq_T) =
    invariant_Ghost_Fragment_Id_Seq_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Fragment_Id_Seq_T
  
  predicate inv_Rc_LocalInvariant_PA_T_Global (_1: t_Rc_LocalInvariant_PA_T_Global)
  
  predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (self: t_Rc_LocalInvariant_PA_T_Global) =
    inv_Rc_LocalInvariant_PA_T_Global self
  
  meta "rewrite_def" predicate invariant_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global [@inline:trivial] (_1: t_Rc_LocalInvariant_PA_T_Global) =
    invariant_Ghost_Rc_LocalInvariant_PA_T_Global _1
  
  meta "rewrite_def" predicate inv_Ghost_Rc_LocalInvariant_PA_T_Global
  
  predicate inv_PersistentArray_T (_1: t_PersistentArray_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PersistentArray_T [inv_PersistentArray_T x]. inv_PersistentArray_T x
      = (invariant_PersistentArray_T x
      /\ inv_Rc_PermCell_Inner_T_Global x.permcell
      /\ inv_Ghost_Fragment_Id_Seq_T x.frag /\ inv_Ghost_Rc_LocalInvariant_PA_T_Global x.inv)
  
  predicate invariant_ref_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) = inv_PersistentArray_T self
  
  meta "rewrite_def" predicate invariant_ref_PersistentArray_T
  
  predicate inv_ref_PersistentArray_T [@inline:trivial] (_1: t_PersistentArray_T) = invariant_ref_PersistentArray_T _1
  
  meta "rewrite_def" predicate inv_ref_PersistentArray_T
  
  function view_PersistentArray_T [@inline:trivial] (self: t_PersistentArray_T) : Seq.seq t_T =
    (view_Fragment_Id_Seq_T self.frag).f1
  
  meta "rewrite_def" function view_PersistentArray_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self_: t_PersistentArray_T. inv_ref_PersistentArray_T self_
      -> inv_ref_PersistentArray_T self_
      /\ (forall result: t_PersistentArray_T. view_PersistentArray_T result = view_PersistentArray_T self_
          /\ inv_PersistentArray_T result -> inv_PersistentArray_T result)
end
