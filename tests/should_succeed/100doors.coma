module M_f
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_bool_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_bool_Global (self: t_Vec_bool_Global) : Seq.seq bool
  
  axiom view_Vec_bool_Global_spec: forall self: t_Vec_bool_Global. Seq.length (view_Vec_bool_Global self)
      <= UInt64.t'int const_MAX
  
  predicate index_Vec_bool_Global [@inline:trivial] (self: t_Vec_bool_Global) (ix: int) =
    Seq.get (view_Vec_bool_Global self) ix
  
  meta "rewrite_def" predicate index_Vec_bool_Global
  
  let rec from_elem_bool (elem: bool) (n: UInt64.t) (return (x: t_Vec_bool_Global)) = any
    [ return (result: t_Vec_bool_Global) -> {Seq.length (view_Vec_bool_Global result) = UInt64.t'int n}
      {forall i: int. 0 <= i /\ i < UInt64.t'int n -> index_Vec_bool_Global result i = elem}
      (! return {result}) ]
  
  type t_Range_usize = { start: UInt64.t; end': UInt64.t }
  
  let rec into_iter_Range_usize (self_: t_Range_usize) (return (x: t_Range_usize)) = any
    [ return (result: t_Range_usize) -> {result = self_} (! return {result}) ]
  
  function deep_model_usize [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model_usize
  
  predicate produces_Range_usize (self: t_Range_usize) (visited: Seq.seq UInt64.t) (o: t_Range_usize) =
    self.end' = o.end'
    /\ deep_model_usize self.start <= deep_model_usize o.start
    /\ (Seq.length visited > 0 -> deep_model_usize o.start <= deep_model_usize o.end')
    /\ Seq.length visited = deep_model_usize o.start - deep_model_usize self.start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_usize (Seq.get visited i) = deep_model_usize self.start + i)
  
  function produces_trans_Range_usize (a: t_Range_usize) (ab: Seq.seq UInt64.t) (b: t_Range_usize) (bc: Seq.seq UInt64.t) (c: t_Range_usize) : ()
  
  axiom produces_trans_Range_usize_spec:
    forall a: t_Range_usize, ab: Seq.seq UInt64.t, b: t_Range_usize, bc: Seq.seq UInt64.t, c: t_Range_usize. produces_Range_usize a ab b
      -> produces_Range_usize b bc c -> produces_Range_usize a (Seq.(++) ab bc) c
  
  function produces_refl_Range_usize (self: t_Range_usize) : ()
  
  axiom produces_refl_Range_usize_spec:
    forall self: t_Range_usize. produces_Range_usize self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv_Range_usize [@inline:trivial] (_1: t_Range_usize) = true
  
  meta "rewrite_def" predicate inv_Range_usize
  
  predicate inv_Seq_usize [@inline:trivial] (_1: Seq.seq UInt64.t) = true
  
  meta "rewrite_def" predicate inv_Seq_usize
  
  type t_Option_usize = None | Some UInt64.t
  
  predicate resolve_ref_Range_usize [@inline:trivial] (_1: MutBorrow.t t_Range_usize) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Range_usize
  
  predicate completed_Range_usize (self: MutBorrow.t t_Range_usize) =
    resolve_ref_Range_usize self /\ deep_model_usize self.current.start >= deep_model_usize self.current.end'
  
  let rec next_Range_usize (self_: MutBorrow.t t_Range_usize) (return (x: t_Option_usize)) = any
    [ return (result: t_Option_usize) -> {match result with
        | None -> completed_Range_usize self_
        | Some v -> produces_Range_usize self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  let rec elim_Some (input: t_Option_usize) (ret (f0: UInt64.t)) = any
    [ good (f0: UInt64.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: UInt64.t [Some f0: t_Option_usize]. Some f0 <> input} (! {false} any) ]
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq bool) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq bool) (out: bool) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  let rec index_Vec_bool_Global'0 (self_: t_Vec_bool_Global) (ix: UInt64.t) (return (x: bool)) =
    {[@expl:index requires] in_bounds_usize ix (view_Vec_bool_Global self_)}
    any [ return (result: bool) -> {has_value_usize ix (view_Vec_bool_Global self_) result} (! return {result}) ]
  
  predicate resolve_elswhere_usize [@inline:trivial] (self: UInt64.t) (old': Seq.seq bool) (fin: Seq.seq bool) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere_usize
  
  let rec index_mut_Vec_bool_Global (self_: MutBorrow.t t_Vec_bool_Global) (ix: UInt64.t)
    (return (x: MutBorrow.t bool)) =
    {[@expl:index_mut requires] in_bounds_usize ix (view_Vec_bool_Global self_.current)}
    any
    [ return (result: MutBorrow.t bool) -> {has_value_usize ix (view_Vec_bool_Global self_.current) result.current}
      {has_value_usize ix (view_Vec_bool_Global self_.final) result.final}
      {resolve_elswhere_usize ix (view_Vec_bool_Global self_.current) (view_Vec_bool_Global self_.final)}
      {Seq.length (view_Vec_bool_Global self_.final) = Seq.length (view_Vec_bool_Global self_.current)}
      (! return {result}) ]
  
  predicate resolve_ref_bool [@inline:trivial] (_1: MutBorrow.t bool) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_bool
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = from_elem_bool {false} {(100: UInt64.t)} (fun (_ret: t_Vec_bool_Global) -> [ &door_open <- _ret ] s1)
      | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_3 <- { start = (1: UInt64.t); end' = (101: UInt64.t) } ] s1
      | s1 = into_iter_Range_usize {_3} (fun (_ret: t_Range_usize) -> [ &iter <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] inv_Seq_usize produced}
        {[@expl:for invariant] inv_Range_usize iter}
        {[@expl:for invariant] produces_Range_usize iter_old produced iter}
        {[@expl:loop invariant] Seq.length (view_Vec_bool_Global door_open) = 100}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range_usize> {iter}
              (fun (_ret: MutBorrow.t t_Range_usize) -> [ &_16 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range_usize> {_16.current} {MutBorrow.get_id _16}
              (fun (_ret: MutBorrow.t t_Range_usize) ->
                [ &_15 <- _ret ] [ &_16 <- { _16 with current = _ret.final } ] s2)
          | s2 = next_Range_usize {_15} (fun (_ret: t_Option_usize) -> [ &_14 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve_ref_Range_usize _16}- s1
          | s1 = any [ br0 -> {_14 = None} (! bb19) | br1 (x0: UInt64.t) -> {_14 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_14} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_19 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _19 ] s1
          | s1 = [ &pass <- __creusot_proc_iter_elem ] s2
          | s2 = [ &door <- pass ] s3
          | s3 = bb13 ]
        | bb13 = bb13
          [ bb13 = {[@expl:loop invariant #0] 1 <= UInt64.t'int door /\ UInt64.t'int door <= 100 + UInt64.t'int pass}
            {[@expl:loop invariant #1] Seq.length (view_Vec_bool_Global door_open) = 100}
            (! s0)
            [ s0 = bb14 ]
            [ bb14 = s0
              [ s0 = [ &_26 <- UInt64.le door (100: UInt64.t) ] s1
              | s1 = any [ br0 -> {_26 = false} (! bb5) | br1 -> {_26} (! bb15) ] ]
            | bb15 = s0
              [ s0 = UInt64.sub {door} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_31 <- _ret ] s1)
              | s1 = index_Vec_bool_Global'0 {door_open} {_31} (fun (_ret: bool) -> [ &_29 <- _ret ] s2)
              | s2 = bb16 ]
            | bb16 = s0
              [ s0 = MutBorrow.borrow_mut <t_Vec_bool_Global> {door_open}
                  (fun (_ret: MutBorrow.t t_Vec_bool_Global) -> [ &_34 <- _ret ] [ &door_open <- _ret.final ] s1)
              | s1 = UInt64.sub {door} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_35 <- _ret ] s2)
              | s2 = index_mut_Vec_bool_Global {_34} {_35} (fun (_ret: MutBorrow.t bool) -> [ &_33 <- _ret ] s3)
              | s3 = bb17 ]
            | bb17 = s0
              [ s0 = [ &_33 <- { _33 with current = not _29 } ] s1
              | s1 = -{resolve_ref_bool _33}- s2
              | s2 = UInt64.add {door} {pass} (fun (_ret: UInt64.t) -> [ &door <- _ret ] s3)
              | s3 = bb13 ] ] ] ] ]
    | bb19 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & door_open: t_Vec_bool_Global = Any.any_l ()
    | & iter: t_Range_usize = Any.any_l ()
    | & _3: t_Range_usize = Any.any_l ()
    | & iter_old: t_Range_usize = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _14: t_Option_usize = Any.any_l ()
    | & _15: MutBorrow.t t_Range_usize = Any.any_l ()
    | & _16: MutBorrow.t t_Range_usize = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _19: Seq.seq UInt64.t = Any.any_l ()
    | & pass: UInt64.t = Any.any_l ()
    | & door: UInt64.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _29: bool = Any.any_l ()
    | & _31: UInt64.t = Any.any_l ()
    | & _33: MutBorrow.t bool = Any.any_l ()
    | & _34: MutBorrow.t t_Vec_bool_Global = Any.any_l ()
    | & _35: UInt64.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
