module M_100doors__f
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq bool
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate index_logic [@inline:trivial] (self: t_Vec) (ix: int) = Seq.get (view self) ix
  
  meta "rewrite_def" predicate index_logic
  
  let rec from_elem (elem: bool) (n: UInt64.t) (return (x: t_Vec)) = any
    [ return (result: t_Vec) -> {Seq.length (view result) = UInt64.t'int n}
      {forall i: int. 0 <= i /\ i < UInt64.t'int n -> index_logic result i = elem}
      (! return {result}) ]
  
  type t_Range = { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter (self_: t_Range) (return (x: t_Range)) = any
    [ return (result: t_Range) -> {result = self_} (! return {result}) ]
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv (_1: t_Range)
  
  axiom inv_axiom [@rewrite]: forall x: t_Range [inv x]. inv x = true
  
  predicate inv'0 (_1: Seq.seq UInt64.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq UInt64.t [inv'0 x]. inv'0 x = true
  
  type t_Option = C_None | C_Some UInt64.t
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Range) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_Range) =
    resolve self /\ deep_model self.current.t_Range__start >= deep_model self.current.t_Range__end
  
  let rec next (self_: MutBorrow.t t_Range) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Range) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Some (input: t_Option) (ret (field_0: UInt64.t)) = any
    [ good (field_0: UInt64.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq bool) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq bool) (out: bool) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return (x: bool)) = {[@expl:index requires] in_bounds ix (view self_)}
    any [ return (result: bool) -> {has_value ix (view self_) result} (! return {result}) ]
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq bool) (fin: Seq.seq bool) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: UInt64.t) (return (x: MutBorrow.t bool)) =
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return (result: MutBorrow.t bool) -> {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return {result}) ]
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t bool) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t bool) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = from_elem {false} {(100: UInt64.t)} (fun (_ret: t_Vec) -> [ &door_open <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_3 <- { t_Range__start = (1: UInt64.t); t_Range__end = (101: UInt64.t) } ] s1
      | s1 = into_iter {_3} (fun (_ret: t_Range) -> [ &iter <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] inv'0 produced}
        {[@expl:for invariant] inv iter}
        {[@expl:for invariant] produces iter_old produced iter}
        {[@expl:loop invariant] Seq.length (view door_open) = 100}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_16 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_16.current} {MutBorrow.get_id _16}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_15 <- _ret ] [ &_16 <- { _16 with current = _ret.final } ] s2)
          | s2 = next {_15} (fun (_ret: t_Option) -> [ &_14 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve'0 _16}- s1
          | s1 = any [ br0 -> {_14 = C_None} (! bb19) | br1 (x0: UInt64.t) -> {_14 = C_Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = v_Some {_14} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_19 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _19 ] s1
          | s1 = [ &pass <- __creusot_proc_iter_elem ] s2
          | s2 = [ &door <- pass ] s3
          | s3 = bb13 ]
        | bb13 = bb13
          [ bb13 = {[@expl:loop invariant #0] 1 <= UInt64.t'int door /\ UInt64.t'int door <= 100 + UInt64.t'int pass}
            {[@expl:loop invariant #1] Seq.length (view door_open) = 100}
            (! s0)
            [ s0 = bb14 ]
            [ bb14 = s0
              [ s0 = [ &_26 <- UInt64.le door (100: UInt64.t) ] s1
              | s1 = any [ br0 -> {_26 = false} (! bb5) | br1 -> {_26} (! bb15) ] ]
            | bb15 = s0
              [ s0 = UInt64.sub {door} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_31 <- _ret ] s1)
              | s1 = index {door_open} {_31} (fun (_ret: bool) -> [ &_29 <- _ret ] s2)
              | s2 = bb16 ]
            | bb16 = s0
              [ s0 = MutBorrow.borrow_mut <t_Vec> {door_open}
                  (fun (_ret: MutBorrow.t t_Vec) -> [ &_34 <- _ret ] [ &door_open <- _ret.final ] s1)
              | s1 = UInt64.sub {door} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_35 <- _ret ] s2)
              | s2 = index_mut {_34} {_35} (fun (_ret: MutBorrow.t bool) -> [ &_33 <- _ret ] s3)
              | s3 = bb17 ]
            | bb17 = s0
              [ s0 = [ &_33 <- { _33 with current = not _29 } ] s1
              | s1 = -{resolve'2 _33}- s2
              | s2 = UInt64.add {door} {pass} (fun (_ret: UInt64.t) -> [ &door <- _ret ] s3)
              | s3 = bb13 ] ] ] ] ]
    | bb19 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & door_open: t_Vec = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _3: t_Range = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _14: t_Option = Any.any_l ()
    | & _15: MutBorrow.t t_Range = Any.any_l ()
    | & _16: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _19: Seq.seq UInt64.t = Any.any_l ()
    | & pass: UInt64.t = Any.any_l ()
    | & door: UInt64.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _29: bool = Any.any_l ()
    | & _31: UInt64.t = Any.any_l ()
    | & _33: MutBorrow.t bool = Any.any_l ()
    | & _34: MutBorrow.t t_Vec = Any.any_l ()
    | & _35: UInt64.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
