module M_03_as_slice_of_cells__splits_up
  use creusot.int.UInt32
  use mach.int.Int
  use map.Map
  use seq.Seq
  use creusot.slice.Slice64
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_PredCell
  
  type t_PredCell'0
  
  predicate index_logic [@inline:trivial] (self: Map.map (Slice64.slice UInt32.t) bool) (a: Slice64.slice UInt32.t) =
    Map.get self a
  
  meta "rewrite_def" predicate index_logic
  
  function view (self: t_PredCell) : Map.map (Slice64.slice UInt32.t) bool
  
  predicate index_logic'0 [@inline:trivial] (self: Map.map UInt32.t bool) (a: UInt32.t) = Map.get self a
  
  meta "rewrite_def" predicate index_logic'0
  
  function index_logic'1 [@inline:trivial] (self: Slice64.slice UInt32.t) (ix: int) : UInt32.t =
    Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'1
  
  function view'0 (self: t_PredCell'0) : Map.map UInt32.t bool
  
  function index_logic'2 [@inline:trivial] (self: Slice64.slice t_PredCell'0) (ix: int) : t_PredCell'0 =
    Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic'2
  
  let rec as_slice_of_cells (self: t_PredCell) (_pred: Seq.seq (Map.map UInt32.t bool))
    (return (x: Slice64.slice t_PredCell'0)) =
    {[@expl:as_slice_of_cells requires] forall s: Slice64.slice UInt32.t. index_logic (view self) s
      = (Seq.length _pred = Seq.length (Slice64.view s)
      /\ (forall i: int. 0 <= i /\ i < Seq.length (Slice64.view s)
        -> index_logic'0 (Seq.get _pred i) (index_logic'1 s i)))}
    any
    [ return' (result: Slice64.slice t_PredCell'0) -> {forall i: int. 0 <= i /\ i < Seq.length _pred
        -> view'0 (index_logic'2 result i) = Seq.get _pred i}
      {Seq.length (Slice64.view result) = Seq.length _pred}
      (! return {result}) ]
  
  let rec get (self: t_PredCell'0) (return (x: UInt32.t)) = any
    [ return' (result: UInt32.t) -> {index_logic'0 (view'0 self) result} (! return {result}) ]
  
  type tuple = { f0: UInt32.t; f1: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec splits_up (cell: t_PredCell) (return (x: tuple)) =
    {[@expl:splits_up requires] forall s: Slice64.slice UInt32.t. index_logic (view cell) s
      = (Seq.length (Slice64.view s) = 2
      /\ Int.mod (UInt32.t'int (index_logic'1 s 0)) 2 = 0 /\ Int.mod (UInt32.t'int (index_logic'1 s 1)) 2 = 1)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &snapshot <- let pred0 = fun (z: UInt32.t) -> Int.mod (UInt32.t'int z) 2
        = 0 in let pred1 = fun (z: UInt32.t) -> Int.mod (UInt32.t'int z) 2 = 1 in Seq.create 2 [|pred0;pred1|] ] s1
      | s1 = bb1 ]
    | bb1 = s0
      [ s0 = as_slice_of_cells {cell} {snapshot} (fun (_ret: Slice64.slice t_PredCell'0) -> [ &slice <- _ret ] s1)
      | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_11 <- (0: UInt64.t) ] s1
      | s1 = [ &_12 <- Slice64.length slice ] s2
      | s2 = [ &_13 <- UInt64.lt _11 _12 ] s3
      | s3 = {[@expl:index in bounds] _13} s4
      | s4 = bb3 ]
    | bb3 = s0
      [ s0 = Slice64.get <t_PredCell'0> {slice} {_11}
          (fun (r: t_PredCell'0) -> get {r} (fun (_ret: UInt32.t) -> [ &_9 <- _ret ] s1))
      | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_16 <- (1: UInt64.t) ] s1
      | s1 = [ &_17 <- Slice64.length slice ] s2
      | s2 = [ &_18 <- UInt64.lt _16 _17 ] s3
      | s3 = {[@expl:index in bounds] _18} s4
      | s4 = bb5 ]
    | bb5 = s0
      [ s0 = Slice64.get <t_PredCell'0> {slice} {_16}
          (fun (r: t_PredCell'0) -> get {r} (fun (_ret: UInt32.t) -> [ &_14 <- _ret ] s1))
      | s1 = bb6 ]
    | bb6 = s0 [ s0 = [ &_0 <- { f0 = _9; f1 = _14 } ] s1 | s1 = return {_0} ] ]
    [ & _0: tuple = Any.any_l ()
    | & cell: t_PredCell = cell
    | & snapshot: Seq.seq (Map.map UInt32.t bool) = Any.any_l ()
    | & slice: Slice64.slice t_PredCell'0 = Any.any_l ()
    | & _9: UInt32.t = Any.any_l ()
    | & _11: UInt64.t = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _14: UInt32.t = Any.any_l ()
    | & _16: UInt64.t = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: bool = Any.any_l () ])
    [ return (result: tuple) -> {[@expl:splits_up ensures] Int.mod (UInt32.t'int result.f0) 2 = 0
      /\ Int.mod (UInt32.t'int result.f1) 2 = 1}
      (! return {result}) ]
end
