module M_01__adds_two [#"01.rs" 40 0 40 36]
  let%span s01 = "01.rs" 43 11 43 17
  let%span s01'0 = "01.rs" 44 18 44 19
  let%span s01'1 = "01.rs" 46 14 46 15
  let%span s01'2 = "01.rs" 18 14 18 28
  let%span s01'3 = "01.rs" 24 15 24 24
  let%span s01'4 = "01.rs" 36 8 36 25
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_UnsafeCell  =
    { t_UnsafeCell__value: UInt32.t }
  
  type t_Cell  =
    { t_Cell__value: t_UnsafeCell }
  
  type t_Cell'0  =
    { t_Cell__inner: t_Cell; t_Cell__inv: () }
  
  predicate inv [#"01.rs" 35 4 35 26] (x: UInt32.t) =
    [%#s01'4] Int.mod (UInt32.t'int x) 2 = 0
  
  let rec get (self:t_Cell'0) (return'  (x:UInt32.t))= any
    [ return''0 (result:UInt32.t)-> {[%#s01'2] inv result} (! return' {result}) ]
  
  
  let rec set (self:t_Cell'0) (v:UInt32.t) (return'  (x:()))= {[@expl:set requires] [%#s01'3] inv v}
    any [ return''0 (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec adds_two[#"01.rs" 40 0 40 36] (c:t_Cell'0) (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = get {c'0} (fun (_ret:UInt32.t) ->  [ &v <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_4 <- UInt32.lt v ([%#s01] (100000: UInt32.t)) ] s1
      | s1 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb2) ]  ]
    
    | bb2 = s0
      [ s0 = UInt32.add {v} {[%#s01'0] (2: UInt32.t)} (fun (_ret:UInt32.t) ->  [ &_8 <- _ret ] s1)
      | s1 = set {c'0} {_8} (fun (_ret:()) ->  [ &_6 <- _ret ] s2)
      | s2 = bb6 ]
    
    | bb4 = s0 [ s0 = set {c'0} {[%#s01'1] (0: UInt32.t)} (fun (_ret:()) ->  [ &_10 <- _ret ] s1) | s1 = bb6 ] 
    | bb6 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & c'0: t_Cell'0 = c
    | & v: UInt32.t = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _8: UInt32.t = Any.any_l ()
    | & _10: () = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
