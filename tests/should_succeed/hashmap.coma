module M_hashmap__qyi13807168849605512546__resolve_coherence (* <List<(K, V)> as creusot_contracts::Resolve> *)
  type t_K
  
  type t_V
  
  type tuple = { _p0: t_K; _p1: t_V }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  type t_Option = C_None | C_Some t_V
  
  predicate resolve (_0: t_V)
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: t_Option) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  type t_DeepModelTy
  
  function deep_model (self: t_K) : t_DeepModelTy
  
  function get (self: t_List) (index: t_DeepModelTy) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index then C_Some v else get tl index
      end
  
  predicate resolve'2 (self: t_List) = forall k: t_DeepModelTy. resolve'1 (get self k)
  
  predicate resolve'3 [@inline:trivial] (_0: t_List) = resolve'2 _0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (self: t_List) = resolve'3 self
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 [@inline:trivial] (_0: t_List) = resolve'4 _0
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 (_0: t_K)
  
  predicate resolve'7 [@inline:trivial] (self: tuple) = resolve'6 self._p0 /\ resolve self._p1
  
  meta "rewrite_def" predicate resolve'7
  
  predicate resolve'8 [@inline:trivial] (_0: tuple) = resolve'7 _0
  
  meta "rewrite_def" predicate resolve'8
  
  predicate structural_resolve (_0: t_List) =
    match _0 with
      | C_Nil -> true
      | C_Cons x0 x1 -> resolve'5 x1 /\ resolve'8 x0
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_List
  
  function resolve_coherence (self'0: t_List) : ()
  
  goal vc_resolve_coherence: structural_resolve self -> ([@expl:resolve_coherence ensures] resolve'2 self)
end
module M_hashmap__qyi9060063638777358169__hash (* <usize as Hash> *)
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  function hash_log (x: int) : int = x
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: UInt64.t) : int = deep_model self
  
  meta "rewrite_def" function deep_model'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hash (self: UInt64.t) (return' (x: UInt64.t)) = (! bb0
    [ bb0 = s0
      [ s0 = UInt64.of_int {UInt64.t'int self'0} (fun (_ret_from: UInt64.t) -> [ &_0 <- _ret_from ] s1)
      | s1 = return''0 {_0} ] ] [ & _0: UInt64.t = Any.any_l () | & self'0: UInt64.t = self ])
    [ return''0 (result: UInt64.t) -> {[@expl:hash ensures] UInt64.t'int result = hash_log (deep_model'0 self)}
      (! return' {result}) ]
end
module M_hashmap__qyi1307405214416629806__resolve_coherence (* <MyHashMap<K, V> as creusot_contracts::Resolve> *)
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use int.EuclideanDivision
  use map.Map
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_MyHashMap = { t_MyHashMap__buckets: t_Vec }
  
  type t_K
  
  type t_V
  
  type tuple = { _p0: t_K; _p1: t_V }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_List
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  type t_DeepModelTy
  
  type t_Option = C_None | C_Some t_V
  
  function deep_model (self: t_K) : t_DeepModelTy
  
  function get (self: t_List) (index: t_DeepModelTy) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index then C_Some v else get tl index
      end
  
  function hash_log (_0: t_DeepModelTy) : int
  
  function bucket_ix (self: t_MyHashMap) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log k) (Seq.length (view self.t_MyHashMap__buckets))
  
  predicate good_bucket (self: t_MyHashMap) (l: t_List) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get l k = C_Some v -> bucket_ix self k = h
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_List = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate no_double_binding (self: t_List) =
    match self with
      | C_Nil -> true
      | C_Cons {_p0 = k} tl -> get tl (deep_model k) = C_None /\ no_double_binding tl
      end
  
  predicate invariant' (self: t_MyHashMap) =
    0 < Seq.length (view self.t_MyHashMap__buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view self.t_MyHashMap__buckets)
      -> good_bucket self (index_logic self.t_MyHashMap__buckets i) i
      /\ no_double_binding (index_logic self.t_MyHashMap__buckets i))
  
  predicate inv (_0: t_K)
  
  predicate inv'0 (_0: t_V)
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  predicate inv'2 (_0: t_List)
  
  predicate inv'3 (_0: t_List)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 a_1 -> inv'1 a_0 /\ inv'3 a_1
        end
  
  predicate invariant''0 (self: t_List) = inv'2 self
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'3 x]. inv'3 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_List) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'3 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'4 (_0: Seq.seq t_List)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq t_List [inv'4 x]. inv'4 x = invariant''1 x
  
  predicate invariant''2 (self: t_Vec) = inv'4 (view self)
  
  predicate inv'5 (_0: t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Vec [inv'5 x]. inv'5 x = invariant''2 x
  
  predicate inv'6 (_0: t_MyHashMap)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_MyHashMap [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_MyHashMap__buckets = buckets} -> inv'5 buckets
        end)
  
  predicate resolve (_0: t_V)
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: t_Option) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (self: t_List) = forall k: t_DeepModelTy. resolve'1 (get self k)
  
  predicate resolve'3 [@inline:trivial] (_0: t_List) = resolve'2 _0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (self: t_Vec) =
    forall i: int. 0 <= i /\ i < Seq.length (view self) -> resolve'3 (index_logic self i)
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 [@inline:trivial] (_0: t_Vec) = resolve'4 _0
  
  meta "rewrite_def" predicate resolve'5
  
  predicate structural_resolve (_0: t_MyHashMap) =
    match _0 with
      | {t_MyHashMap__buckets = x0} -> resolve'5 x0
      end
  
  function bucket (self: t_MyHashMap) (k: t_DeepModelTy) : t_List =
    index_logic self.t_MyHashMap__buckets (bucket_ix self k)
  
  function view'0 (self: t_MyHashMap) : Map.map t_DeepModelTy t_Option = fun (k: t_DeepModelTy) -> get (bucket self k) k
  
  predicate resolve'6 (self: t_MyHashMap) = forall k: t_DeepModelTy. resolve'1 (Map.get (view'0 self) k)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_MyHashMap
  
  function resolve_coherence (self'0: t_MyHashMap) : ()
  
  goal vc_resolve_coherence: inv'6 self -> structural_resolve self -> ([@expl:resolve_coherence ensures] resolve'6 self)
end
module M_hashmap__qyi9690720112976707081__new (* MyHashMap<K, V> *)
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  use int.EuclideanDivision
  use map.Map
  
  type t_K
  
  type t_V
  
  type tuple = { _p0: t_K; _p1: t_V }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  predicate inv (_0: t_K)
  
  predicate inv'0 (_0: t_V)
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  predicate inv'2 (_0: t_List)
  
  predicate invariant' (self: t_List) = inv'2 self
  
  predicate inv'3 (_0: t_List)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'3 x]. inv'3 x = invariant' x
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 a_1 -> inv'1 a_0 /\ inv'3 a_1
        end
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_List) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'3 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'4 (_0: Seq.seq t_List)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq t_List [inv'4 x]. inv'4 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_List
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'4 (view self)
  
  predicate inv'5 (_0: t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Vec [inv'5 x]. inv'5 x = invariant''1 x
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_List = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  let rec from_elem (elem: t_List) (n: UInt64.t) (return' (x: t_Vec)) =
    {[@expl:from_elem 'elem' type invariant] inv'2 elem}
    any
    [ return''0 (result: t_Vec) -> {inv'5 result}
      {Seq.length (view result) = UInt64.t'int n}
      {forall i: int. 0 <= i /\ i < UInt64.t'int n -> index_logic result i = elem}
      (! return' {result}) ]
  
  type t_MyHashMap = { t_MyHashMap__buckets: t_Vec }
  
  type t_DeepModelTy
  
  type t_Option = C_None | C_Some t_V
  
  function deep_model (self: t_K) : t_DeepModelTy
  
  function get (self: t_List) (index: t_DeepModelTy) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index then C_Some v else get tl index
      end
  
  function hash_log (_0: t_DeepModelTy) : int
  
  function bucket_ix (self: t_MyHashMap) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log k) (Seq.length (view self.t_MyHashMap__buckets))
  
  predicate good_bucket (self: t_MyHashMap) (l: t_List) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get l k = C_Some v -> bucket_ix self k = h
  
  predicate no_double_binding (self: t_List) =
    match self with
      | C_Nil -> true
      | C_Cons {_p0 = k} tl -> get tl (deep_model k) = C_None /\ no_double_binding tl
      end
  
  predicate invariant''2 (self: t_MyHashMap) =
    0 < Seq.length (view self.t_MyHashMap__buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view self.t_MyHashMap__buckets)
      -> good_bucket self (index_logic self.t_MyHashMap__buckets i) i
      /\ no_double_binding (index_logic self.t_MyHashMap__buckets i))
  
  predicate inv'6 (_0: t_MyHashMap)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_MyHashMap [inv'6 x]. inv'6 x
      = (invariant''2 x
      /\ match x with
        | {t_MyHashMap__buckets = buckets} -> inv'5 buckets
        end)
  
  function bucket (self: t_MyHashMap) (k: t_DeepModelTy) : t_List =
    index_logic self.t_MyHashMap__buckets (bucket_ix self k)
  
  function view'0 (self: t_MyHashMap) : Map.map t_DeepModelTy t_Option = fun (k: t_DeepModelTy) -> get (bucket self k) k
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new (size: UInt64.t) (return' (x: t_MyHashMap)) = {[@expl:new requires] 0 < UInt64.t'int size}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_6 <- C_Nil ] s1 | s1 = from_elem {_6} {size'0} (fun (_ret: t_Vec) -> [ &_5 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &res <- { t_MyHashMap__buckets = _5 } ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- res ] s1 | s1 = bb3 ]
    | bb3 = return''0 {_0} ]
    [ & _0: t_MyHashMap = Any.any_l ()
    | & size'0: UInt64.t = size
    | & res: t_MyHashMap = Any.any_l ()
    | & _5: t_Vec = Any.any_l ()
    | & _6: t_List = Any.any_l () ])
    [ return''0 (result: t_MyHashMap) -> {[@expl:new result type invariant] inv'6 result}
      {[@expl:new ensures] forall i: t_DeepModelTy. Map.get (view'0 result) i = C_None}
      (! return' {result}) ]
end
module M_hashmap__qyi9690720112976707081__add (* MyHashMap<K, V> *)
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use int.EuclideanDivision
  use creusot.prelude.Any
  use map.Map
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_MyHashMap = { t_MyHashMap__buckets: t_Vec }
  
  type t_K
  
  type t_V
  
  type tuple = { _p0: t_K; _p1: t_V }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  predicate inv (_0: t_K)
  
  predicate inv'0 (_0: t_V)
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  predicate inv'2 (_0: t_List)
  
  predicate inv'3 (_0: t_List)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 a_1 -> inv'1 a_0 /\ inv'3 a_1
        end
  
  predicate invariant' (self: t_List) = inv'2 self
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'3 x]. inv'3 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_List) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'3 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'4 (_0: Seq.seq t_List)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq t_List [inv'4 x]. inv'4 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_List
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'4 (view self)
  
  predicate inv'5 (_0: t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Vec [inv'5 x]. inv'5 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: t_Vec) = inv'5 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'6 (_0: t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Vec [inv'6 x]. inv'6 x = invariant''2 x
  
  let rec len (self_: t_Vec) (return' (x: UInt64.t)) = {[@expl:len 'self_' type invariant] inv'6 self_}
    any [ return''0 (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return' {result}) ]
  
  predicate invariant''3 [@inline:trivial] (self: t_K) = inv self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: t_K)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_K [inv'7 x]. inv'7 x = invariant''3 x
  
  predicate precondition (self: ()) (args: t_K)
  
  axiom precondition_fndef: forall args: t_K [precondition () args]. (let self = args in inv'7 self)
      -> precondition () args
  
  type t_DeepModelTy
  
  function hash_log (_0: t_DeepModelTy) : int
  
  function deep_model (self: t_K) : t_DeepModelTy
  
  function deep_model'0 [@inline:trivial] (self: t_K) : t_DeepModelTy = deep_model self
  
  meta "rewrite_def" function deep_model'0
  
  predicate postcondition_once (self: ()) (args: t_K) (result: UInt64.t)
  
  axiom postcondition_fndef:
    forall args: t_K, res: UInt64.t [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in UInt64.t'int res = hash_log (deep_model'0 self))
  
  let rec hash (self: t_K) (return' (x: UInt64.t)) = {[@expl:hash requires] precondition () self}
    any [ return''0 (result: UInt64.t) -> {postcondition_once () self result} (! return' {result}) ]
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'8 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'8 x]. inv'8 x = invariant''4 x
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate invariant''5 [@inline:trivial] (self: MutBorrow.t t_List) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'9 (_0: MutBorrow.t t_List)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_List [inv'9 x]. inv'9 x = invariant''5 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List) (out: t_List) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq t_List) (fin: Seq.seq t_List) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: UInt64.t) (return' (x: MutBorrow.t t_List)) =
    {[@expl:index_mut 'self_' type invariant] inv'8 self_}
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return''0 (result: MutBorrow.t t_List) -> {inv'9 result}
      {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_List) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_List) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  type t_Option = C_None | C_Some t_V
  
  function get (self: t_List) (index: t_DeepModelTy) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index then C_Some v else get tl index
      end
  
  predicate no_double_binding (self: t_List) =
    match self with
      | C_Nil -> true
      | C_Cons {_p0 = k} tl -> get tl (deep_model k) = C_None /\ no_double_binding tl
      end
  
  function fin [@inline:trivial] (self: MutBorrow.t t_List) : t_List = self.final
  
  meta "rewrite_def" function fin
  
  function bucket_ix (self: t_MyHashMap) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log k) (Seq.length (view self.t_MyHashMap__buckets))
  
  predicate good_bucket (self: t_MyHashMap) (l: t_List) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get l k = C_Some v -> bucket_ix self k = h
  
  let rec v_Cons (input: t_List) (ret (field_0: tuple) (field_1: t_List)) = any
    [ good (field_0: tuple) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: tuple, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1 <> input}
      (! {false}
      any) ]
  
  predicate invariant''6 [@inline:trivial] (self: MutBorrow.t t_K) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'10 (_0: MutBorrow.t t_K)
  
  axiom inv_axiom'8 [@rewrite]: forall x: MutBorrow.t t_K [inv'10 x]. inv'10 x = invariant''6 x
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_K) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_K) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  type tuple'0 = { _p0'0: t_K; _p1'0: t_K }
  
  predicate precondition'0 (self: ()) (args: tuple'0)
  
  axiom precondition_fndef'0:
    forall args: tuple'0 [precondition'0 () args]. (let {_p0'0 = self_; _p1'0 = rhs} = args in inv'7 rhs /\ inv'7 self_)
      -> precondition'0 () args
  
  predicate postcondition_once'0 (self: ()) (args: tuple'0) (result: bool)
  
  axiom postcondition_fndef'0:
    forall args: tuple'0, res: bool [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let {_p0'0 = self_; _p1'0 = rhs} = args in res = (deep_model'0 self_ = deep_model'0 rhs))
  
  let rec eq (self_: t_K) (rhs: t_K) (return' (x: bool)) = {[@expl:eq requires] precondition'0 () { _p0'0 = self_;
                                                                                                    _p1'0 = rhs }}
    any
    [ return''0 (result: bool) -> {postcondition_once'0 () { _p0'0 = self_; _p1'0 = rhs } result} (! return' {result}) ]
  
  predicate invariant''7 [@inline:trivial] (self: MutBorrow.t t_V) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'11 (_0: MutBorrow.t t_V)
  
  axiom inv_axiom'9 [@rewrite]: forall x: MutBorrow.t t_V [inv'11 x]. inv'11 x = invariant''7 x
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_V) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: MutBorrow.t t_V) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  predicate invariant''8 [@inline:trivial] (self: MutBorrow.t t_List) = inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''8
  
  predicate inv'12 (_0: MutBorrow.t t_List)
  
  axiom inv_axiom'10 [@rewrite]: forall x: MutBorrow.t t_List [inv'12 x]. inv'12 x = invariant''8 x
  
  predicate resolve'5 [@inline:trivial] (self: MutBorrow.t t_List) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 [@inline:trivial] (_0: MutBorrow.t t_List) = resolve'5 _0
  
  meta "rewrite_def" predicate resolve'6
  
  predicate resolve'7 (_0: t_V)
  
  predicate resolve'8 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve'7 x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'8
  
  predicate resolve'9 [@inline:trivial] (_0: t_Option) = resolve'8 _0
  
  meta "rewrite_def" predicate resolve'9
  
  predicate resolve'10 (self: t_List) = forall k: t_DeepModelTy. resolve'9 (get self k)
  
  predicate resolve'11 [@inline:trivial] (_0: t_List) = resolve'10 _0
  
  meta "rewrite_def" predicate resolve'11
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_List = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate invariant''9 (self: t_MyHashMap) =
    0 < Seq.length (view self.t_MyHashMap__buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view self.t_MyHashMap__buckets)
      -> good_bucket self (index_logic self.t_MyHashMap__buckets i) i
      /\ no_double_binding (index_logic self.t_MyHashMap__buckets i))
  
  predicate inv'13 (_0: t_MyHashMap)
  
  axiom inv_axiom'11 [@rewrite]: forall x: t_MyHashMap [inv'13 x]. inv'13 x
      = (invariant''9 x
      /\ match x with
        | {t_MyHashMap__buckets = buckets} -> inv'5 buckets
        end)
  
  predicate invariant''10 [@inline:trivial] (self: MutBorrow.t t_MyHashMap) = inv'13 self.current /\ inv'13 self.final
  
  meta "rewrite_def" predicate invariant''10
  
  predicate inv'14 (_0: MutBorrow.t t_MyHashMap)
  
  axiom inv_axiom'12 [@rewrite]: forall x: MutBorrow.t t_MyHashMap [inv'14 x]. inv'14 x = invariant''10 x
  
  predicate resolve'12 [@inline:trivial] (self: MutBorrow.t t_MyHashMap) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'12
  
  predicate resolve'13 [@inline:trivial] (_0: MutBorrow.t t_MyHashMap) = resolve'12 _0
  
  meta "rewrite_def" predicate resolve'13
  
  function bucket (self: t_MyHashMap) (k: t_DeepModelTy) : t_List =
    index_logic self.t_MyHashMap__buckets (bucket_ix self k)
  
  function view'0 (self: t_MyHashMap) : Map.map t_DeepModelTy t_Option = fun (k: t_DeepModelTy) -> get (bucket self k) k
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add (self: MutBorrow.t t_MyHashMap) (key: t_K) (val': t_V) (return' (x: ())) =
    {[@expl:add 'self' type invariant] inv'14 self}
    {[@expl:add 'key' type invariant] inv key}
    {[@expl:add 'val' type invariant] inv'0 val'}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_self <- self'0 ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = len {(self'0.current).t_MyHashMap__buckets} (fun (_ret: UInt64.t) -> [ &length <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = hash {key'0} (fun (_ret: UInt64.t) -> [ &_11 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = UInt64.of_int {UInt64.t'int _11} (fun (_ret_from: UInt64.t) -> [ &_10 <- _ret_from ] s1)
      | s1 = [ &_13 <- length ] s2
      | s2 = [ &_14 <- _13 = (0: UInt64.t) ] s3
      | s3 = {[@expl:remainder by zero] not _14} s4
      | s4 = bb4 ]
    | bb4 = s0
      [ s0 = UInt64.rem {_10} {_13} (fun (_ret: UInt64.t) -> [ &index <- _ret ] s1)
      | s1 = {inv'5 (self'0.current).t_MyHashMap__buckets}
        MutBorrow.borrow_final <t_Vec> {(self'0.current).t_MyHashMap__buckets}
          {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
          (fun (_ret: MutBorrow.t t_Vec) ->
            [ &_18 <- _ret ] -{inv'5 _ret.final}-
            [ &self'0 <- { self'0 with current = { t_MyHashMap__buckets = _ret.final } } ] s2)
      | s2 = index_mut {_18} {index} (fun (_ret: MutBorrow.t t_List) -> [ &_17 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = {inv'2 _17.current}
        MutBorrow.borrow_final <t_List> {_17.current} {MutBorrow.get_id _17}
          (fun (_ret: MutBorrow.t t_List) ->
            [ &_16 <- _ret ] -{inv'2 _ret.final}-
            [ &_17 <- { _17 with current = _ret.final } ] s1)
      | s1 = {inv'2 _16.current}
        MutBorrow.borrow_final <t_List> {_16.current} {MutBorrow.get_id _16}
          (fun (_ret: MutBorrow.t t_List) ->
            [ &l <- _ret ] -{inv'2 _ret.final}-
            [ &_16 <- { _16 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv'9 _16} s3
      | s3 = -{resolve'0 _16}- s4
      | s4 = [ &old_l <- l ] s5
      | s5 = bb7 ]
    | bb7 = bb7'0
      [ bb7'0 = {[@expl:loop invariant #0] inv'9 l}
        {[@expl:loop invariant #1] good_bucket old_self.current l.current (UInt64.t'int index)}
        {[@expl:loop invariant #2] good_bucket old_self.current l.final (UInt64.t'int index)
        -> good_bucket old_self.current old_l.final (UInt64.t'int index)}
        {[@expl:loop invariant #3] get l.final (deep_model key'0) = C_Some val''0
        -> get (fin old_l) (deep_model key'0) = C_Some val''0}
        {[@expl:loop invariant #4] forall i: t_DeepModelTy. get l.final i = get l.current i
          -> get (fin old_l) i = get old_l.current i}
        {[@expl:loop invariant #5] no_double_binding l.current}
        {[@expl:loop invariant #6] (forall i: t_DeepModelTy. get l.current i = get l.final i \/ i = deep_model key'0)
          /\ no_double_binding l.final -> no_double_binding (fin old_l)}
        (! s0)
        [ s0 = bb8 ]
        [ bb8 = any
          [ br0 -> {l.current = C_Nil} (! bb14) | br1 (x0: tuple) (x1: t_List) -> {l.current = C_Cons x0 x1} (! bb10) ]
        | bb10 = s0
          [ s0 = v_Cons {l.current}
              (fun (r0: tuple) (r1: t_List) ->
                {inv r0._p0}
                MutBorrow.borrow_final <t_K> {r0._p0}
                  {MutBorrow.inherit_id (MutBorrow.inherit_id (MutBorrow.get_id l) 1) 1}
                  (fun (_ret: MutBorrow.t t_K) ->
                    [ &k <- _ret ] -{inv _ret.final}-
                    [ &l <- { l with current = C_Cons ({ r0 with _p0 = _ret.final }) r1 } ] s1))
          | s1 = v_Cons {l.current}
              (fun (r0: tuple) (r1: t_List) ->
                {inv'0 r0._p1}
                MutBorrow.borrow_final <t_V> {r0._p1}
                  {MutBorrow.inherit_id (MutBorrow.inherit_id (MutBorrow.get_id l) 1) 2}
                  (fun (_ret: MutBorrow.t t_V) ->
                    [ &v <- _ret ] -{inv'0 _ret.final}-
                    [ &l <- { l with current = C_Cons ({ r0 with _p1 = _ret.final }) r1 } ] s2))
          | s2 = v_Cons {l.current}
              (fun (r0: tuple) (r1: t_List) ->
                {inv'3 r1}
                MutBorrow.borrow_final <t_List> {r1} {MutBorrow.inherit_id (MutBorrow.get_id l) 2}
                  (fun (_ret: MutBorrow.t t_List) ->
                    [ &tl <- _ret ] -{inv'3 _ret.final}-
                    [ &l <- { l with current = C_Cons r0 _ret.final } ] s3))
          | s3 = [ &tl'0 <- tl ] s4
          | s4 = {[@expl:type invariant] inv'10 k} s5
          | s5 = -{resolve'2 k}- s6
          | s6 = eq {k.current} {key'0} (fun (_ret: bool) -> [ &_38 <- _ret ] s7)
          | s7 = bb11 ]
        | bb11 = any [ br0 -> {_38 = false} (! bb13) | br1 -> {_38} (! bb12) ]
        | bb13 = s0
          [ s0 = {[@expl:type invariant] inv'11 v} s1
          | s1 = -{resolve'4 v}- s2
          | s2 = {inv'2 tl'0.current}
            MutBorrow.borrow_final <t_List> {tl'0.current} {MutBorrow.get_id tl'0}
              (fun (_ret: MutBorrow.t t_List) ->
                [ &_44 <- _ret ] -{inv'2 _ret.final}-
                [ &tl'0 <- { tl'0 with current = _ret.final } ] s3)
          | s3 = {inv'2 _44.current}
            MutBorrow.borrow_final <t_List> {_44.current} {MutBorrow.get_id _44}
              (fun (_ret: MutBorrow.t t_List) ->
                [ &_43 <- _ret ] -{inv'2 _ret.final}-
                [ &_44 <- { _44 with current = _ret.final } ] s4)
          | s4 = {[@expl:type invariant] inv'9 l} s5
          | s5 = -{resolve'0 l}- s6
          | s6 = [ &l <- _43 ] s7
          | s7 = {[@expl:type invariant] inv'9 _44} s8
          | s8 = -{resolve'0 _44}- s9
          | s9 = {[@expl:type invariant] inv'12 tl'0} s10
          | s10 = -{resolve'6 tl'0}- s11
          | s11 = bb7'0 ] ] ]
    | bb14 = s0 [ s0 = [ &_47 <- { _p0 = key'0; _p1 = val''0 } ] s1 | s1 = [ &_51 <- C_Nil ] s2 | s2 = bb15 ]
    | bb15 = s0 [ s0 = [ &_46 <- C_Cons _47 _51 ] s1 | s1 = bb17 ]
    | bb17 = s0
      [ s0 = {[@expl:type invariant] inv'2 l.current} s1
      | s1 = -{resolve'11 l.current}- s2
      | s2 = [ &l <- { l with current = _46 } ] s3
      | s3 = {[@expl:type invariant] inv'9 l} s4
      | s4 = -{resolve'0 l}- s5
      | s5 = {[@expl:type invariant] inv'9 _17} s6
      | s6 = -{resolve'0 _17}- s7
      | s7 = {[@expl:type invariant] inv'14 self'0} s8
      | s8 = -{resolve'13 self'0}- s9
      | s9 = bb20 ]
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'12 tl'0} s1
      | s1 = -{resolve'6 tl'0}- s2
      | s2 = [ &v <- { v with current = val''0 } ] s3
      | s3 = {[@expl:type invariant] inv'11 v} s4
      | s4 = -{resolve'4 v}- s5
      | s5 = {[@expl:type invariant] inv'9 _17} s6
      | s6 = -{resolve'0 _17}- s7
      | s7 = {[@expl:type invariant] inv'9 l} s8
      | s8 = -{resolve'0 l}- s9
      | s9 = {[@expl:type invariant] inv'14 self'0} s10
      | s10 = -{resolve'13 self'0}- s11
      | s11 = bb20 ]
    | bb20 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & self'0: MutBorrow.t t_MyHashMap = self
    | & key'0: t_K = key
    | & val''0: t_V = val'
    | & old_self: MutBorrow.t t_MyHashMap = Any.any_l ()
    | & length: UInt64.t = Any.any_l ()
    | & index: UInt64.t = Any.any_l ()
    | & _10: UInt64.t = Any.any_l ()
    | & _11: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & l: MutBorrow.t t_List = Any.any_l ()
    | & _16: MutBorrow.t t_List = Any.any_l ()
    | & _17: MutBorrow.t t_List = Any.any_l ()
    | & _18: MutBorrow.t t_Vec = Any.any_l ()
    | & old_l: MutBorrow.t t_List = Any.any_l ()
    | & k: MutBorrow.t t_K = Any.any_l ()
    | & v: MutBorrow.t t_V = Any.any_l ()
    | & tl: MutBorrow.t t_List = Any.any_l ()
    | & tl'0: MutBorrow.t t_List = Any.any_l ()
    | & _38: bool = Any.any_l ()
    | & _43: MutBorrow.t t_List = Any.any_l ()
    | & _44: MutBorrow.t t_List = Any.any_l ()
    | & _46: t_List = Any.any_l ()
    | & _47: tuple = Any.any_l ()
    | & _51: t_List = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:add ensures] forall i: t_DeepModelTy. Map.get (view'0 self.final) i
        = (if i = deep_model key then C_Some val' else Map.get (view'0 self.current) i)}
      (! return' {result}) ]
end
module M_hashmap__qyi9690720112976707081__get (* MyHashMap<K, V> *)
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use int.EuclideanDivision
  use creusot.prelude.Any
  use map.Map
  
  type t_K
  
  predicate inv (_0: t_K)
  
  predicate invariant' [@inline:trivial] (self: t_K) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: t_K)
  
  axiom inv_axiom [@rewrite]: forall x: t_K [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_K)
  
  axiom precondition_fndef: forall args: t_K [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  type t_DeepModelTy
  
  function hash_log (_0: t_DeepModelTy) : int
  
  function deep_model (self: t_K) : t_DeepModelTy
  
  function deep_model'0 [@inline:trivial] (self: t_K) : t_DeepModelTy = deep_model self
  
  meta "rewrite_def" function deep_model'0
  
  predicate postcondition_once (self: ()) (args: t_K) (result: UInt64.t)
  
  axiom postcondition_fndef:
    forall args: t_K, res: UInt64.t [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in UInt64.t'int res = hash_log (deep_model'0 self))
  
  let rec hash (self: t_K) (return' (x: UInt64.t)) = {[@expl:hash requires] precondition () self}
    any [ return''0 (result: UInt64.t) -> {postcondition_once () self result} (! return' {result}) ]
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_MyHashMap = { t_MyHashMap__buckets: t_Vec }
  
  type t_V
  
  type tuple = { _p0: t_K; _p1: t_V }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  predicate inv'1 (_0: t_V)
  
  predicate inv'2 (_0: tuple)
  
  axiom inv_axiom'0 [@rewrite]: forall x: tuple [inv'2 x]. inv'2 x
      = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'1 x1)
  
  predicate inv'3 (_0: t_List)
  
  predicate inv'4 (_0: t_List)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'3 x]. inv'3 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 a_1 -> inv'2 a_0 /\ inv'4 a_1
        end
  
  predicate invariant''0 (self: t_List) = inv'3 self
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_List [inv'4 x]. inv'4 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_List) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'4 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'5 (_0: Seq.seq t_List)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Seq.seq t_List [inv'5 x]. inv'5 x = invariant''1 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_List
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''2 (self: t_Vec) = inv'5 (view self)
  
  predicate inv'6 (_0: t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Vec [inv'6 x]. inv'6 x = invariant''2 x
  
  predicate invariant''3 [@inline:trivial] (self: t_Vec) = inv'6 self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'7 (_0: t_Vec)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_Vec [inv'7 x]. inv'7 x = invariant''3 x
  
  let rec len (self_: t_Vec) (return' (x: UInt64.t)) = {[@expl:len 'self_' type invariant] inv'7 self_}
    any [ return''0 (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return' {result}) ]
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate invariant''4 [@inline:trivial] (self: t_List) = inv'3 self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'8 (_0: t_List)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_List [inv'8 x]. inv'8 x = invariant''4 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List) (out: t_List) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return' (x: t_List)) = {[@expl:index 'self_' type invariant] inv'7 self_}
    {[@expl:index requires] in_bounds ix (view self_)}
    any [ return''0 (result: t_List) -> {inv'8 result} {has_value ix (view self_) result} (! return' {result}) ]
  
  type t_Option = C_None | C_Some t_V
  
  function get (self: t_List) (index'0: t_DeepModelTy) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index'0 then C_Some v else get tl index'0
      end
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_List = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  function bucket_ix (self: t_MyHashMap) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log k) (Seq.length (view self.t_MyHashMap__buckets))
  
  function bucket (self: t_MyHashMap) (k: t_DeepModelTy) : t_List =
    index_logic self.t_MyHashMap__buckets (bucket_ix self k)
  
  let rec v_Cons (input: t_List) (ret (field_0: tuple) (field_1: t_List)) = any
    [ good (field_0: tuple) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: tuple, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1 <> input}
      (! {false}
      any) ]
  
  type tuple'0 = { _p0'0: t_K; _p1'0: t_K }
  
  predicate precondition'0 (self: ()) (args: tuple'0)
  
  axiom precondition_fndef'0:
    forall args: tuple'0 [precondition'0 () args]. (let {_p0'0 = self_; _p1'0 = rhs} = args in inv'0 rhs /\ inv'0 self_)
      -> precondition'0 () args
  
  predicate postcondition_once'0 (self: ()) (args: tuple'0) (result: bool)
  
  axiom postcondition_fndef'0:
    forall args: tuple'0, res: bool [postcondition_once'0 () args res]. postcondition_once'0 () args res
      -> (let {_p0'0 = self_; _p1'0 = rhs} = args in res = (deep_model'0 self_ = deep_model'0 rhs))
  
  let rec eq (self_: t_K) (rhs: t_K) (return' (x: bool)) = {[@expl:eq requires] precondition'0 () { _p0'0 = self_;
                                                                                                    _p1'0 = rhs }}
    any
    [ return''0 (result: bool) -> {postcondition_once'0 () { _p0'0 = self_; _p1'0 = rhs } result} (! return' {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 t_V
  
  predicate good_bucket (self: t_MyHashMap) (l: t_List) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get l k = C_Some v -> bucket_ix self k = h
  
  predicate no_double_binding (self: t_List) =
    match self with
      | C_Nil -> true
      | C_Cons {_p0 = k} tl -> get tl (deep_model k) = C_None /\ no_double_binding tl
      end
  
  predicate invariant''5 (self: t_MyHashMap) =
    0 < Seq.length (view self.t_MyHashMap__buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view self.t_MyHashMap__buckets)
      -> good_bucket self (index_logic self.t_MyHashMap__buckets i) i
      /\ no_double_binding (index_logic self.t_MyHashMap__buckets i))
  
  predicate inv'9 (_0: t_MyHashMap)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_MyHashMap [inv'9 x]. inv'9 x
      = (invariant''5 x
      /\ match x with
        | {t_MyHashMap__buckets = buckets} -> inv'6 buckets
        end)
  
  predicate invariant''6 [@inline:trivial] (self: t_MyHashMap) = inv'9 self
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'10 (_0: t_MyHashMap)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_MyHashMap [inv'10 x]. inv'10 x = invariant''6 x
  
  predicate invariant''7 [@inline:trivial] (self: t_V) = inv'1 self
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'11 (_0: t_V)
  
  axiom inv_axiom'9 [@rewrite]: forall x: t_V [inv'11 x]. inv'11 x = invariant''7 x
  
  predicate inv'12 (_0: t_Option'0)
  
  axiom inv_axiom'10 [@rewrite]: forall x: t_Option'0 [inv'12 x]. inv'12 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'11 a_0
        end
  
  function view'0 (self: t_MyHashMap) : Map.map t_DeepModelTy t_Option = fun (k: t_DeepModelTy) -> get (bucket self k) k
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get'0 (self: t_MyHashMap) (key: t_K) (return' (x: t_Option'0)) =
    {[@expl:get 'self' type invariant] inv'10 self}
    {[@expl:get 'key' type invariant] inv key}
    (! bb0
    [ bb0 = s0 [ s0 = hash {key'0} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = UInt64.of_int {UInt64.t'int _7} (fun (_ret_from: UInt64.t) -> [ &_6 <- _ret_from ] s1)
      | s1 = len {self'0.t_MyHashMap__buckets} (fun (_ret: UInt64.t) -> [ &_9 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &_11 <- _9 = (0: UInt64.t) ] s1 | s1 = {[@expl:remainder by zero] not _11} s2 | s2 = bb3 ]
    | bb3 = s0
      [ s0 = UInt64.rem {_6} {_9} (fun (_ret: UInt64.t) -> [ &index'0 <- _ret ] s1)
      | s1 = index {self'0.t_MyHashMap__buckets} {index'0} (fun (_ret: t_List) -> [ &_13 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0 [ s0 = [ &l <- _13 ] s1 | s1 = bb5 ]
    | bb5 = bb5'0
      [ bb5'0 = {[@expl:loop invariant #0] inv'8 l}
        {[@expl:loop invariant #1] get (bucket self'0 (deep_model key'0)) (deep_model key'0) = get l (deep_model key'0)}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = any [ br0 -> {l = C_Nil} (! bb12) | br1 (x0: tuple) (x1: t_List) -> {l = C_Cons x0 x1} (! bb8) ]
        | bb8 = s0
          [ s0 = v_Cons {l} (fun (r0: tuple) (r1: t_List) -> [ &k <- r0._p0 ] s1)
          | s1 = v_Cons {l} (fun (r0: tuple) (r1: t_List) -> [ &v <- r0._p1 ] s2)
          | s2 = v_Cons {l} (fun (r0: tuple) (r1: t_List) -> [ &tl <- r1 ] s3)
          | s3 = eq {k} {key'0} (fun (_ret: bool) -> [ &_26 <- _ret ] s4)
          | s4 = bb9 ]
        | bb9 = any [ br0 -> {_26 = false} (! bb11) | br1 -> {_26} (! bb10) ]
        | bb11 = s0 [ s0 = [ &_32 <- tl ] s1 | s1 = [ &l <- _32 ] s2 | s2 = bb5'0 ] ] ]
    | bb12 = s0 [ s0 = [ &_0 <- C_None'0 ] s1 | s1 = bb13 ]
    | bb10 = s0 [ s0 = [ &_0 <- C_Some'0 v ] s1 | s1 = bb13 ]
    | bb13 = return''0 {_0} ]
    [ & _0: t_Option'0 = Any.any_l ()
    | & self'0: t_MyHashMap = self
    | & key'0: t_K = key
    | & index'0: UInt64.t = Any.any_l ()
    | & _6: UInt64.t = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & _9: UInt64.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & _13: t_List = Any.any_l ()
    | & k: t_K = Any.any_l ()
    | & v: t_V = Any.any_l ()
    | & tl: t_List = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _32: t_List = Any.any_l () ])
    [ return''0 (result: t_Option'0) -> {[@expl:get result type invariant] inv'12 result}
      {[@expl:get ensures] match result with
        | C_Some'0 v -> Map.get (view'0 self) (deep_model key) = C_Some v
        | C_None'0 -> Map.get (view'0 self) (deep_model key) = C_None
        end}
      (! return' {result}) ]
end
module M_hashmap__qyi9690720112976707081__resize (* MyHashMap<K, V> *)
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use int.EuclideanDivision
  use map.Map
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_MyHashMap = { t_MyHashMap__buckets: t_Vec }
  
  type t_K
  
  type t_V
  
  type tuple = { _p0: t_K; _p1: t_V }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  predicate inv (_0: t_K)
  
  predicate inv'0 (_0: t_V)
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  predicate inv'2 (_0: t_List)
  
  predicate inv'3 (_0: t_List)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 a_1 -> inv'1 a_0 /\ inv'3 a_1
        end
  
  predicate invariant' (self: t_List) = inv'2 self
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'3 x]. inv'3 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_List) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'3 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'4 (_0: Seq.seq t_List)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq t_List [inv'4 x]. inv'4 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_List
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'4 (view self)
  
  predicate inv'5 (_0: t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Vec [inv'5 x]. inv'5 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: t_Vec) = inv'5 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'6 (_0: t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Vec [inv'6 x]. inv'6 x = invariant''2 x
  
  let rec len (self_: t_Vec) (return' (x: UInt64.t)) = {[@expl:len 'self_' type invariant] inv'6 self_}
    any [ return''0 (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return' {result}) ]
  
  type t_DeepModelTy
  
  type t_Option = C_None | C_Some t_V
  
  function deep_model (self: t_K) : t_DeepModelTy
  
  function get (self: t_List) (index: t_DeepModelTy) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index then C_Some v else get tl index
      end
  
  function hash_log (_0: t_DeepModelTy) : int
  
  function bucket_ix (self: t_MyHashMap) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log k) (Seq.length (view self.t_MyHashMap__buckets))
  
  predicate good_bucket (self: t_MyHashMap) (l: t_List) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get l k = C_Some v -> bucket_ix self k = h
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_List = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate no_double_binding (self: t_List) =
    match self with
      | C_Nil -> true
      | C_Cons {_p0 = k} tl -> get tl (deep_model k) = C_None /\ no_double_binding tl
      end
  
  predicate invariant''3 (self: t_MyHashMap) =
    0 < Seq.length (view self.t_MyHashMap__buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view self.t_MyHashMap__buckets)
      -> good_bucket self (index_logic self.t_MyHashMap__buckets i) i
      /\ no_double_binding (index_logic self.t_MyHashMap__buckets i))
  
  predicate inv'7 (_0: t_MyHashMap)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_MyHashMap [inv'7 x]. inv'7 x
      = (invariant''3 x
      /\ match x with
        | {t_MyHashMap__buckets = buckets} -> inv'5 buckets
        end)
  
  function bucket (self: t_MyHashMap) (k: t_DeepModelTy) : t_List =
    index_logic self.t_MyHashMap__buckets (bucket_ix self k)
  
  function view'0 (self: t_MyHashMap) : Map.map t_DeepModelTy t_Option = fun (k: t_DeepModelTy) -> get (bucket self k) k
  
  let rec new (size: UInt64.t) (return' (x: t_MyHashMap)) = {[@expl:new requires] 0 < UInt64.t'int size}
    any
    [ return''0 (result: t_MyHashMap) -> {inv'7 result}
      {forall i: t_DeepModelTy. Map.get (view'0 result) i = C_None}
      (! return' {result}) ]
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_MyHashMap) = inv'7 self.current /\ inv'7 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'8 (_0: MutBorrow.t t_MyHashMap)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_MyHashMap [inv'8 x]. inv'8 x = invariant''4 x
  
  predicate invariant''5 [@inline:trivial] (self: MutBorrow.t t_Vec) = inv'5 self.current /\ inv'5 self.final
  
  meta "rewrite_def" predicate invariant''5
  
  predicate inv'9 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'9 x]. inv'9 x = invariant''5 x
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List) = UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate invariant''6 [@inline:trivial] (self: MutBorrow.t t_List) = inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'10 (_0: MutBorrow.t t_List)
  
  axiom inv_axiom'8 [@rewrite]: forall x: MutBorrow.t t_List [inv'10 x]. inv'10 x = invariant''6 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List) (out: t_List) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq t_List) (fin: Seq.seq t_List) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere
  
  let rec index_mut (self_: MutBorrow.t t_Vec) (ix: UInt64.t) (return' (x: MutBorrow.t t_List)) =
    {[@expl:index_mut 'self_' type invariant] inv'9 self_}
    {[@expl:index_mut requires] in_bounds ix (view self_.current)}
    any
    [ return''0 (result: MutBorrow.t t_List) -> {inv'10 result}
      {has_value ix (view self_.current) result.current}
      {has_value ix (view self_.final) result.final}
      {resolve_elswhere ix (view self_.current) (view self_.final)}
      {Seq.length (view self_.final) = Seq.length (view self_.current)}
      (! return' {result}) ]
  
  let rec replace (dest: MutBorrow.t t_List) (src: t_List) (return' (x: t_List)) =
    {[@expl:replace 'dest' type invariant] inv'10 dest}
    {[@expl:replace 'src' type invariant] inv'2 src}
    any [ return''0 (result: t_List) -> {inv'2 result} {dest.final = src} {result = dest.current} (! return' {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_List) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_List) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Cons (input: t_List) (ret (field_0: tuple) (field_1: t_List)) = any
    [ good (field_0: tuple) (field_1: t_List) -> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0: tuple, field_1: t_List [C_Cons field_0 field_1: t_List]. C_Cons field_0 field_1 <> input}
      (! {false}
      any) ]
  
  let rec add (self: MutBorrow.t t_MyHashMap) (key: t_K) (val': t_V) (return' (x: ())) =
    {[@expl:add 'self' type invariant] inv'8 self}
    {[@expl:add 'key' type invariant] inv key}
    {[@expl:add 'val' type invariant] inv'0 val'}
    any
    [ return''0 (result: ()) -> {forall i: t_DeepModelTy. Map.get (view'0 self.final) i
        = (if i = deep_model key then C_Some val' else Map.get (view'0 self.current) i)}
      (! return' {result}) ]
  
  predicate resolve'1 (_0: t_V)
  
  predicate resolve'2 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve'1 x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_0: t_Option) = resolve'2 _0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 (self: t_List) = forall k: t_DeepModelTy. resolve'3 (get self k)
  
  predicate resolve'5 [@inline:trivial] (_0: t_List) = resolve'4 _0
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 (self: t_MyHashMap) = forall k: t_DeepModelTy. resolve'3 (Map.get (view'0 self) k)
  
  predicate resolve'7 [@inline:trivial] (_0: t_MyHashMap) = resolve'6 _0
  
  meta "rewrite_def" predicate resolve'7
  
  predicate resolve'8 [@inline:trivial] (self: MutBorrow.t t_MyHashMap) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'8
  
  predicate resolve'9 [@inline:trivial] (_0: MutBorrow.t t_MyHashMap) = resolve'8 _0
  
  meta "rewrite_def" predicate resolve'9
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec resize (self: MutBorrow.t t_MyHashMap) (return' (x: ())) = {[@expl:resize 'self' type invariant] inv'8 self}
    {[@expl:resize requires] Seq.length (view (self.current).t_MyHashMap__buckets) < 1000}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_self <- self'0 ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = len {(self'0.current).t_MyHashMap__buckets} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = UInt64.mul {_8} {(2: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s1)
      | s1 = new {_7} (fun (_ret: t_MyHashMap) -> [ &new'0 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &i <- (0: UInt64.t) ] s1 | s1 = [ &old_4_0 <- self'0 ] s2 | s2 = bb4 ]
    | bb4 = bb4'0
      [ bb4'0 = {[@expl:mut invariant] old_4_0.final = self'0.final}
        {[@expl:loop invariant #0] inv'8 self'0}
        {[@expl:loop invariant #1] inv'7 new'0}
        {[@expl:loop invariant #2] forall k'0: t_DeepModelTy. bucket_ix old_self.current k'0 < UInt64.t'int i
          -> Map.get (view'0 old_self.current) k'0 = Map.get (view'0 new'0) k'0}
        {[@expl:loop invariant #3] forall k'0: t_DeepModelTy. UInt64.t'int i <= bucket_ix old_self.current k'0
            /\ bucket_ix old_self.current k'0 <= Seq.length (view (old_self.current).t_MyHashMap__buckets)
          -> Map.get (view'0 new'0) k'0 = C_None}
        {[@expl:loop invariant #4] forall j: int. UInt64.t'int i <= j
            /\ j < Seq.length (view (old_self.current).t_MyHashMap__buckets)
          -> index_logic (self'0.current).t_MyHashMap__buckets j
          = index_logic (old_self.current).t_MyHashMap__buckets j}
        {[@expl:loop invariant #5] Seq.length (view (old_self.current).t_MyHashMap__buckets)
        = Seq.length (view (self'0.current).t_MyHashMap__buckets)}
        {[@expl:loop invariant #6] UInt64.t'int i <= Seq.length (view (self'0.current).t_MyHashMap__buckets)}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = len {(self'0.current).t_MyHashMap__buckets} (fun (_ret: UInt64.t) -> [ &_23 <- _ret ] s1) | s1 = bb6 ]
        | bb6 = s0
          [ s0 = [ &_21 <- UInt64.lt i _23 ] s1 | s1 = any [ br0 -> {_21 = false} (! bb22) | br1 -> {_21} (! bb7) ] ]
        | bb7 = s0
          [ s0 = {inv'5 (self'0.current).t_MyHashMap__buckets}
            MutBorrow.borrow_mut <t_Vec> {(self'0.current).t_MyHashMap__buckets}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_29 <- _ret ] -{inv'5 _ret.final}-
                [ &self'0 <- { self'0 with current = { t_MyHashMap__buckets = _ret.final } } ] s1)
          | s1 = index_mut {_29} {i} (fun (_ret: MutBorrow.t t_List) -> [ &_28 <- _ret ] s2)
          | s2 = bb8 ]
        | bb8 = s0
          [ s0 = {inv'2 _28.current}
            MutBorrow.borrow_final <t_List> {_28.current} {MutBorrow.get_id _28}
              (fun (_ret: MutBorrow.t t_List) ->
                [ &_27 <- _ret ] -{inv'2 _ret.final}-
                [ &_28 <- { _28 with current = _ret.final } ] s1)
          | s1 = [ &_31 <- C_Nil ] s2
          | s2 = {inv'2 _27.current}
            MutBorrow.borrow_final <t_List> {_27.current} {MutBorrow.get_id _27}
              (fun (_ret: MutBorrow.t t_List) ->
                [ &_26 <- _ret ] -{inv'2 _ret.final}-
                [ &_27 <- { _27 with current = _ret.final } ] s3)
          | s3 = replace {_26} {_31} (fun (_ret: t_List) -> [ &l <- _ret ] s4)
          | s4 = bb9 ]
        | bb9 = s0
          [ s0 = {[@expl:type invariant] inv'10 _28} s1
          | s1 = -{resolve'0 _28}- s2
          | s2 = {[@expl:type invariant] inv'10 _27} s3
          | s3 = -{resolve'0 _27}- s4
          | s4 = bb10 ]
        | bb10 = bb10'0
          [ bb10'0 = {[@expl:loop invariant #0] inv'7 new'0}
            {[@expl:loop invariant #1] inv'2 l}
            {[@expl:loop invariant #2] forall k'0: t_DeepModelTy. bucket_ix old_self.current k'0 < UInt64.t'int i
              -> Map.get (view'0 old_self.current) k'0 = Map.get (view'0 new'0) k'0}
            {[@expl:loop invariant #3] forall k'0: t_DeepModelTy. UInt64.t'int i < bucket_ix old_self.current k'0
                /\ bucket_ix old_self.current k'0 <= Seq.length (view (old_self.current).t_MyHashMap__buckets)
              -> Map.get (view'0 new'0) k'0 = C_None}
            {[@expl:loop invariant #4] forall k'0: t_DeepModelTy. bucket_ix old_self.current k'0 = UInt64.t'int i
              -> Map.get (view'0 old_self.current) k'0
              = match get l k'0 with
                | C_None -> Map.get (view'0 new'0) k'0
                | C_Some v'0 -> C_Some v'0
                end}
            {[@expl:loop invariant #5] no_double_binding l}
            {[@expl:loop invariant #6] good_bucket old_self.current l (UInt64.t'int i)}
            (! s0)
            [ s0 = bb11 ]
            [ bb11 = any [ br0 -> {l = C_Nil} (! bb18) | br1 (x0: tuple) (x1: t_List) -> {l = C_Cons x0 x1} (! bb13) ]
            | bb13 = s0
              [ s0 = v_Cons {l} (fun (r0: tuple) (r1: t_List) -> [ &k <- r0._p0 ] s1)
              | s1 = v_Cons {l} (fun (r0: tuple) (r1: t_List) -> [ &v <- r0._p1 ] s2)
              | s2 = v_Cons {l} (fun (r0: tuple) (r1: t_List) -> [ &tl <- r1 ] s3)
              | s3 = {inv'7 new'0}
                MutBorrow.borrow_mut <t_MyHashMap> {new'0}
                  (fun (_ret: MutBorrow.t t_MyHashMap) ->
                    [ &_46 <- _ret ] -{inv'7 _ret.final}-
                    [ &new'0 <- _ret.final ] s4)
              | s4 = add {_46} {k} {v} (fun (_ret: ()) -> [ &_45 <- _ret ] s5)
              | s5 = bb15 ]
            | bb15 = s0 [ s0 = [ &l <- tl ] s1 | s1 = bb10'0 ] ] ]
        | bb18 = s0
          [ s0 = {[@expl:type invariant] inv'2 l} s1
          | s1 = -{resolve'5 l}- s2
          | s2 = {[@expl:assertion] forall k'0: t_DeepModelTy. bucket_ix old_self.current k'0 = UInt64.t'int i
              -> Map.get (view'0 old_self.current) k'0 = Map.get (view'0 new'0) k'0}
            s3
          | s3 = UInt64.add {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s4)
          | s4 = bb4'0 ] ] ]
    | bb22 = s0
      [ s0 = {[@expl:type invariant] inv'7 self'0.current} s1
      | s1 = -{resolve'7 self'0.current}- s2
      | s2 = [ &self'0 <- { self'0 with current = new'0 } ] s3
      | s3 = {[@expl:type invariant] inv'8 self'0} s4
      | s4 = -{resolve'9 self'0}- s5
      | s5 = bb25 ]
    | bb25 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & self'0: MutBorrow.t t_MyHashMap = self
    | & old_self: MutBorrow.t t_MyHashMap = Any.any_l ()
    | & new'0: t_MyHashMap = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & _23: UInt64.t = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & _26: MutBorrow.t t_List = Any.any_l ()
    | & _27: MutBorrow.t t_List = Any.any_l ()
    | & _28: MutBorrow.t t_List = Any.any_l ()
    | & _29: MutBorrow.t t_Vec = Any.any_l ()
    | & _31: t_List = Any.any_l ()
    | & k: t_K = Any.any_l ()
    | & v: t_V = Any.any_l ()
    | & tl: t_List = Any.any_l ()
    | & _45: () = Any.any_l ()
    | & _46: MutBorrow.t t_MyHashMap = Any.any_l ()
    | & old_4_0: MutBorrow.t t_MyHashMap = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:resize ensures] forall k: t_DeepModelTy. Map.get (view'0 self.final) k
        = Map.get (view'0 self.current) k}
      (! return' {result}) ]
end
module M_hashmap__main
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use mach.int.Int
  use seq.Seq
  use creusot.int.Int64
  use int.EuclideanDivision
  use map.Map
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_MyHashMap = { t_MyHashMap__buckets: t_Vec }
  
  type tuple = { _p0: UInt64.t; _p1: Int64.t }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_List
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  type t_Option = C_None | C_Some Int64.t
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  function get (self: t_List) (index: int) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index then C_Some v else get tl index
      end
  
  function hash_log (x: int) : int = x
  
  function bucket_ix (self: t_MyHashMap) (k: int) : int =
    EuclideanDivision.mod (hash_log k) (Seq.length (view self.t_MyHashMap__buckets))
  
  predicate good_bucket (self: t_MyHashMap) (l: t_List) (h: int) =
    forall k: int, v: Int64.t. get l k = C_Some v -> bucket_ix self k = h
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_List = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate no_double_binding (self: t_List) =
    match self with
      | C_Nil -> true
      | C_Cons {_p0 = k} tl -> get tl (deep_model k) = C_None /\ no_double_binding tl
      end
  
  predicate invariant' (self: t_MyHashMap) =
    0 < Seq.length (view self.t_MyHashMap__buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view self.t_MyHashMap__buckets)
      -> good_bucket self (index_logic self.t_MyHashMap__buckets i) i
      /\ no_double_binding (index_logic self.t_MyHashMap__buckets i))
  
  predicate inv (_0: t_MyHashMap)
  
  axiom inv_axiom [@rewrite]: forall x: t_MyHashMap [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_MyHashMap__buckets = buckets} -> true
        end)
  
  function bucket (self: t_MyHashMap) (k: int) : t_List = index_logic self.t_MyHashMap__buckets (bucket_ix self k)
  
  function view'0 (self: t_MyHashMap) : Map.map int t_Option = fun (k: int) -> get (bucket self k) k
  
  let rec new (size: UInt64.t) (return' (x: t_MyHashMap)) = {[@expl:new requires] 0 < UInt64.t'int size}
    any
    [ return''0 (result: t_MyHashMap) -> {inv result}
      {forall i: int. Map.get (view'0 result) i = C_None}
      (! return' {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 Int64.t
  
  predicate invariant''0 [@inline:trivial] (self: t_MyHashMap) = inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 (_0: t_MyHashMap)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_MyHashMap [inv'0 x]. inv'0 x = invariant''0 x
  
  let rec get'0 (self: t_MyHashMap) (key: UInt64.t) (return' (x: t_Option'0)) =
    {[@expl:get 'self' type invariant] inv'0 self}
    any
    [ return''0 (result: t_Option'0) -> {match result with
        | C_Some'0 v -> Map.get (view'0 self) (deep_model key) = C_Some v
        | C_None'0 -> Map.get (view'0 self) (deep_model key) = C_None
        end}
      (! return' {result}) ]
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_MyHashMap) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: MutBorrow.t t_MyHashMap)
  
  axiom inv_axiom'1 [@rewrite]: forall x: MutBorrow.t t_MyHashMap [inv'1 x]. inv'1 x = invariant''1 x
  
  let rec add (self: MutBorrow.t t_MyHashMap) (key: UInt64.t) (val': Int64.t) (return' (x: ())) =
    {[@expl:add 'self' type invariant] inv'1 self}
    any
    [ return''0 (result: ()) -> {forall i: int. Map.get (view'0 self.final) i
        = (if i = deep_model key then C_Some val' else Map.get (view'0 self.current) i)}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec main (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new {(17: UInt64.t)} (fun (_ret: t_MyHashMap) -> [ &h1 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = new {(42: UInt64.t)} (fun (_ret: t_MyHashMap) -> [ &h2 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = get'0 {h1} {(1: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_x <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = get'0 {h1} {(2: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_y <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = get'0 {h2} {(1: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_z <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0 [ s0 = get'0 {h2} {(2: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_t <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0
      [ s0 = {inv h1}
        MutBorrow.borrow_mut <t_MyHashMap> {h1}
          (fun (_ret: MutBorrow.t t_MyHashMap) -> [ &_12 <- _ret ] -{inv _ret.final}- [ &h1 <- _ret.final ] s1)
      | s1 = add {_12} {(1: UInt64.t)} {(17: Int64.t)} (fun (_ret: ()) -> [ &_11 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0 [ s0 = get'0 {h1} {(1: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_13 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0
      [ s0 = [ &_x <- _13 ] s1
      | s1 = get'0 {h1} {(2: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_15 <- _ret ] s2)
      | s2 = bb9 ]
    | bb9 = s0
      [ s0 = [ &_y <- _15 ] s1
      | s1 = get'0 {h2} {(1: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_17 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = s0
      [ s0 = [ &_z <- _17 ] s1
      | s1 = get'0 {h2} {(2: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_19 <- _ret ] s2)
      | s2 = bb11 ]
    | bb11 = s0
      [ s0 = [ &_t <- _19 ] s1
      | s1 = {inv h2}
        MutBorrow.borrow_mut <t_MyHashMap> {h2}
          (fun (_ret: MutBorrow.t t_MyHashMap) -> [ &_22 <- _ret ] -{inv _ret.final}- [ &h2 <- _ret.final ] s2)
      | s2 = add {_22} {(1: UInt64.t)} {(42: Int64.t)} (fun (_ret: ()) -> [ &_21 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = s0 [ s0 = get'0 {h1} {(1: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_23 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0
      [ s0 = [ &_x <- _23 ] s1
      | s1 = get'0 {h1} {(2: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_25 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = s0
      [ s0 = [ &_y <- _25 ] s1
      | s1 = get'0 {h2} {(1: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_27 <- _ret ] s2)
      | s2 = bb15 ]
    | bb15 = s0
      [ s0 = [ &_z <- _27 ] s1
      | s1 = get'0 {h2} {(2: UInt64.t)} (fun (_ret: t_Option'0) -> [ &_29 <- _ret ] s2)
      | s2 = bb16 ]
    | bb16 = s0 [ s0 = [ &_t <- _29 ] s1 | s1 = bb18 ]
    | bb18 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & h1: t_MyHashMap = Any.any_l ()
    | & h2: t_MyHashMap = Any.any_l ()
    | & _x: t_Option'0 = Any.any_l ()
    | & _y: t_Option'0 = Any.any_l ()
    | & _z: t_Option'0 = Any.any_l ()
    | & _t: t_Option'0 = Any.any_l ()
    | & _11: () = Any.any_l ()
    | & _12: MutBorrow.t t_MyHashMap = Any.any_l ()
    | & _13: t_Option'0 = Any.any_l ()
    | & _15: t_Option'0 = Any.any_l ()
    | & _17: t_Option'0 = Any.any_l ()
    | & _19: t_Option'0 = Any.any_l ()
    | & _21: () = Any.any_l ()
    | & _22: MutBorrow.t t_MyHashMap = Any.any_l ()
    | & _23: t_Option'0 = Any.any_l ()
    | & _25: t_Option'0 = Any.any_l ()
    | & _27: t_Option'0 = Any.any_l ()
    | & _29: t_Option'0 = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_hashmap__qyi891699778403859561__clone__refines (* <List<T> as creusot_contracts::Clone> *)
  type t_T
  
  type t_List = C_Nil | C_Cons t_T t_List
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_List)
  
  predicate invariant' (self: t_List) = inv'0 self
  
  predicate inv'1 (_0: t_List)
  
  axiom inv_axiom [@rewrite]: forall x: t_List [inv'1 x]. inv'1 x = invariant' x
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'0 x]. inv'0 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 a_1 -> inv a_0 /\ inv'1 a_1
        end
  
  predicate invariant''0 [@inline:trivial] (self: t_List) = inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 (_0: t_List)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x = invariant''0 x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self_: t_List. inv'2 self_
      -> inv'2 self_ /\ (forall result: t_List. result = self_ /\ inv'0 result -> inv'0 result)
end
module M_hashmap__qyi13807168849605512546__resolve_coherence__refines (* <List<(K, V)> as creusot_contracts::Resolve> *)
  type t_K
  
  type t_V
  
  type tuple = { _p0: t_K; _p1: t_V }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  type t_Option = C_None | C_Some t_V
  
  predicate resolve (_0: t_V)
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: t_Option) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  type t_DeepModelTy
  
  function deep_model (self: t_K) : t_DeepModelTy
  
  function get (self: t_List) (index: t_DeepModelTy) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index then C_Some v else get tl index
      end
  
  predicate resolve'2 (self: t_List) = forall k: t_DeepModelTy. resolve'1 (get self k)
  
  predicate resolve'3 [@inline:trivial] (_0: t_List) = resolve'2 _0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (self: t_List) = resolve'3 self
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 [@inline:trivial] (_0: t_List) = resolve'4 _0
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 (_0: t_K)
  
  predicate resolve'7 [@inline:trivial] (self: tuple) = resolve'6 self._p0 /\ resolve self._p1
  
  meta "rewrite_def" predicate resolve'7
  
  predicate resolve'8 [@inline:trivial] (_0: tuple) = resolve'7 _0
  
  meta "rewrite_def" predicate resolve'8
  
  predicate structural_resolve (_0: t_List) =
    match _0 with
      | C_Nil -> true
      | C_Cons x0 x1 -> resolve'5 x1 /\ resolve'8 x0
      end
  
  predicate inv (_0: t_K)
  
  predicate inv'0 (_0: t_V)
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  predicate inv'2 (_0: t_List)
  
  predicate invariant' (self: t_List) = inv'2 self
  
  predicate inv'3 (_0: t_List)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'3 x]. inv'3 x = invariant' x
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 a_1 -> inv'1 a_0 /\ inv'3 a_1
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_List. structural_resolve self /\ inv'2 self
      -> structural_resolve self /\ (forall result: (). resolve'2 self -> resolve'2 self)
end
module M_hashmap__qyi1307405214416629806__resolve_coherence__refines (* <MyHashMap<K, V> as creusot_contracts::Resolve> *)
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use int.EuclideanDivision
  use map.Map
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_MyHashMap = { t_MyHashMap__buckets: t_Vec }
  
  type t_K
  
  type t_V
  
  type tuple = { _p0: t_K; _p1: t_V }
  
  type t_List = C_Nil | C_Cons tuple t_List
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_List
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  type t_Option = C_None | C_Some t_V
  
  predicate resolve (_0: t_V)
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_0: t_Option) = resolve'0 _0
  
  meta "rewrite_def" predicate resolve'1
  
  type t_DeepModelTy
  
  function deep_model (self: t_K) : t_DeepModelTy
  
  function get (self: t_List) (index: t_DeepModelTy) : t_Option = match self with
      | C_Nil -> C_None
      | C_Cons {_p0 = k; _p1 = v} tl -> if deep_model k = index then C_Some v else get tl index
      end
  
  predicate resolve'2 (self: t_List) = forall k: t_DeepModelTy. resolve'1 (get self k)
  
  predicate resolve'3 [@inline:trivial] (_0: t_List) = resolve'2 _0
  
  meta "rewrite_def" predicate resolve'3
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_List = Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate resolve'4 [@inline:trivial] (self: t_Vec) =
    forall i: int. 0 <= i /\ i < Seq.length (view self) -> resolve'3 (index_logic self i)
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 [@inline:trivial] (_0: t_Vec) = resolve'4 _0
  
  meta "rewrite_def" predicate resolve'5
  
  predicate structural_resolve (_0: t_MyHashMap) =
    match _0 with
      | {t_MyHashMap__buckets = x0} -> resolve'5 x0
      end
  
  function hash_log (_0: t_DeepModelTy) : int
  
  function bucket_ix (self: t_MyHashMap) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log k) (Seq.length (view self.t_MyHashMap__buckets))
  
  predicate good_bucket (self: t_MyHashMap) (l: t_List) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get l k = C_Some v -> bucket_ix self k = h
  
  predicate no_double_binding (self: t_List) =
    match self with
      | C_Nil -> true
      | C_Cons {_p0 = k} tl -> get tl (deep_model k) = C_None /\ no_double_binding tl
      end
  
  predicate invariant' (self: t_MyHashMap) =
    0 < Seq.length (view self.t_MyHashMap__buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view self.t_MyHashMap__buckets)
      -> good_bucket self (index_logic self.t_MyHashMap__buckets i) i
      /\ no_double_binding (index_logic self.t_MyHashMap__buckets i))
  
  predicate inv (_0: t_K)
  
  predicate inv'0 (_0: t_V)
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  predicate inv'2 (_0: t_List)
  
  predicate inv'3 (_0: t_List)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_List [inv'2 x]. inv'2 x
      = match x with
        | C_Nil -> true
        | C_Cons a_0 a_1 -> inv'1 a_0 /\ inv'3 a_1
        end
  
  predicate invariant''0 (self: t_List) = inv'2 self
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List [inv'3 x]. inv'3 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_List) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'3 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'4 (_0: Seq.seq t_List)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Seq.seq t_List [inv'4 x]. inv'4 x = invariant''1 x
  
  predicate invariant''2 (self: t_Vec) = inv'4 (view self)
  
  predicate inv'5 (_0: t_Vec)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Vec [inv'5 x]. inv'5 x = invariant''2 x
  
  predicate inv'6 (_0: t_MyHashMap)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_MyHashMap [inv'6 x]. inv'6 x
      = (invariant' x
      /\ match x with
        | {t_MyHashMap__buckets = buckets} -> inv'5 buckets
        end)
  
  function bucket (self: t_MyHashMap) (k: t_DeepModelTy) : t_List =
    index_logic self.t_MyHashMap__buckets (bucket_ix self k)
  
  function view'0 (self: t_MyHashMap) : Map.map t_DeepModelTy t_Option = fun (k: t_DeepModelTy) -> get (bucket self k) k
  
  predicate resolve'6 (self: t_MyHashMap) = forall k: t_DeepModelTy. resolve'1 (Map.get (view'0 self) k)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_MyHashMap. structural_resolve self /\ inv'6 self
      -> structural_resolve self /\ inv'6 self /\ (forall result: (). resolve'6 self -> resolve'6 self)
end
module M_hashmap__qyi9060063638777358169__hash__refines (* <usize as Hash> *)
  use creusot.int.UInt64
  
  function hash_log (x: int) : int = x
  
  function deep_model [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: UInt64.t) : int = deep_model self
  
  meta "rewrite_def" function deep_model'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: UInt64.t. forall result: UInt64.t. UInt64.t'int result = hash_log (deep_model'0 self)
        -> UInt64.t'int result = hash_log (deep_model'0 self)
end
