module M_impl_Resolve_for_List_tup2_K_V__resolve_coherence (* <List<(K, V)> as creusot_contracts::resolve::Resolve> *)
  type t_K
  
  type t_V
  
  type tup2_K_V = { f0: t_K; f1: t_V }
  
  type t_List_tup2_K_V = Nil | Cons tup2_K_V t_List_tup2_K_V
  
  predicate resolve_K (_1: t_K)
  
  predicate resolve_V (_1: t_V)
  
  predicate resolve_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = resolve_K _1.f0 /\ resolve_V _1.f1
  
  meta "rewrite_def" predicate resolve_tup2_K_V
  
  type t_Option_V = None | Some t_V
  
  predicate resolve_Option_V (_1: t_Option_V)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Option_V [resolve_Option_V x]. resolve_Option_V x
      = match x with
        | None -> true
        | Some x0 -> resolve_V x0
        end
  
  type t_DeepModelTy
  
  function deep_model_K (self: t_K) : t_DeepModelTy
  
  function get_K (self: t_List_tup2_K_V) (index: t_DeepModelTy) : t_Option_V = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_K k = index then Some v else get_K tl index
      end
  
  predicate resolve_List_tup2_K_V (self: t_List_tup2_K_V) = forall k: t_DeepModelTy. resolve_Option_V (get_K self k)
  
  predicate resolve_List_tup2_K_V'0 (_1: t_List_tup2_K_V)
  
  predicate resolve_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = resolve_List_tup2_K_V'0 _1
  
  meta "rewrite_def" predicate resolve_Box_List_tup2_K_V_Global
  
  axiom resolve_axiom'0 [@rewrite]: forall x: t_List_tup2_K_V [resolve_List_tup2_K_V'0 x]. resolve_List_tup2_K_V'0 x
      = (resolve_List_tup2_K_V x
      /\ match x with
        | Nil -> true
        | Cons x0 x1 -> resolve_tup2_K_V x0 /\ resolve_Box_List_tup2_K_V_Global x1
        end)
  
  predicate structural_resolve_List_tup2_K_V (_1: t_List_tup2_K_V) =
    match _1 with
      | Nil -> true
      | Cons x0 x1 -> resolve_tup2_K_V x0 /\ resolve_Box_List_tup2_K_V_Global x1
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_List_tup2_K_V
  
  function resolve_coherence_List_tup2_K_V (self: t_List_tup2_K_V) : ()
  
  goal vc_resolve_coherence_List_tup2_K_V: structural_resolve_List_tup2_K_V self
    -> ([@expl:resolve_coherence ensures] resolve_List_tup2_K_V self)
end
module M_impl_Hash_for_usize__hash (* <usize as Hash> *)
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  function hash_log_usize (x: int) : int = x
  
  function deep_model_usize [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model_usize
  
  function deep_model_ref_usize [@inline:trivial] (self: UInt64.t) : int = deep_model_usize self
  
  meta "rewrite_def" function deep_model_ref_usize
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hash_usize (self: UInt64.t) (return (x: UInt64.t)) = (! bb0
    [ bb0 = s0
      [ s0 = UInt64.of_int {UInt64.t'int self} (fun (_ret_from: UInt64.t) -> [ &_0 <- _ret_from ] s1)
      | s1 = return {_0} ] ] [ & _0: UInt64.t = Any.any_l () | & self: UInt64.t = self ])
    [ return (result: UInt64.t) -> {[@expl:hash ensures] UInt64.t'int result
      = hash_log_usize (deep_model_ref_usize self)}
      (! return {result}) ]
end
module M_impl_Resolve_for_MyHashMap_K_V__resolve_coherence (* <MyHashMap<K, V> as creusot_contracts::resolve::Resolve> *)
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use int.EuclideanDivision
  use map.Map
  
  type t_Vec_List_tup2_K_V_Global
  
  type t_MyHashMap_K_V = { buckets: t_Vec_List_tup2_K_V_Global }
  
  type t_K
  
  type t_V
  
  type tup2_K_V = { f0: t_K; f1: t_V }
  
  type t_List_tup2_K_V = Nil | Cons tup2_K_V t_List_tup2_K_V
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) : Seq.seq t_List_tup2_K_V
  
  axiom view_Vec_List_tup2_K_V_Global_spec:
    forall self: t_Vec_List_tup2_K_V_Global. Seq.length (view_Vec_List_tup2_K_V_Global self) <= UInt64.t'int const_MAX
  
  type t_DeepModelTy
  
  type t_Option_V = None | Some t_V
  
  function deep_model_K (self: t_K) : t_DeepModelTy
  
  function get_K (self: t_List_tup2_K_V) (index: t_DeepModelTy) : t_Option_V = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_K k = index then Some v else get_K tl index
      end
  
  function hash_log_K (_1: t_DeepModelTy) : int
  
  function bucket_ix_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log_K k) (Seq.length (view_Vec_List_tup2_K_V_Global self.buckets))
  
  predicate good_bucket_K (self: t_MyHashMap_K_V) (l: t_List_tup2_K_V) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get_K l k = Some v -> bucket_ix_K self k = h
  
  function index_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) (ix: int) : t_List_tup2_K_V
   = Seq.get (view_Vec_List_tup2_K_V_Global self) ix
  
  meta "rewrite_def" function index_Vec_List_tup2_K_V_Global
  
  predicate no_double_binding_K (self: t_List_tup2_K_V) =
    match self with
      | Nil -> true
      | Cons {f0 = k} tl -> get_K tl (deep_model_K k) = None /\ no_double_binding_K tl
      end
  
  predicate invariant_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    0 < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
      -> good_bucket_K self (index_Vec_List_tup2_K_V_Global self.buckets i) i
      /\ no_double_binding_K (index_Vec_List_tup2_K_V_Global self.buckets i))
  
  predicate inv_K (_1: t_K)
  
  predicate inv_V (_1: t_V)
  
  predicate inv_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = inv_K _1.f0 /\ inv_V _1.f1
  
  meta "rewrite_def" predicate inv_tup2_K_V
  
  predicate inv_List_tup2_K_V (_1: t_List_tup2_K_V)
  
  predicate invariant_Box_List_tup2_K_V_Global (self: t_List_tup2_K_V) = inv_List_tup2_K_V self
  
  predicate inv_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = invariant_Box_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_Box_List_tup2_K_V_Global
  
  axiom inv_axiom [@rewrite]: forall x: t_List_tup2_K_V [inv_List_tup2_K_V x]. inv_List_tup2_K_V x
      = match x with
        | Nil -> true
        | Cons f0'0 f1'0 -> inv_tup2_K_V f0'0 /\ inv_Box_List_tup2_K_V_Global f1'0
        end
  
  predicate invariant_Seq_List_tup2_K_V [@inline:trivial] (self: Seq.seq t_List_tup2_K_V) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_List_tup2_K_V_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_List_tup2_K_V
  
  predicate inv_Seq_List_tup2_K_V [@inline:trivial] (_1: Seq.seq t_List_tup2_K_V) = invariant_Seq_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_Seq_List_tup2_K_V
  
  predicate invariant_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) =
    inv_Seq_List_tup2_K_V (view_Vec_List_tup2_K_V_Global self)
  
  predicate inv_Vec_List_tup2_K_V_Global (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom inv_axiom'0:
    forall x: t_Vec_List_tup2_K_V_Global [inv_Vec_List_tup2_K_V_Global x]. inv_Vec_List_tup2_K_V_Global x
      -> invariant_Vec_List_tup2_K_V_Global x
  
  predicate inv_MyHashMap_K_V (_1: t_MyHashMap_K_V)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_MyHashMap_K_V [inv_MyHashMap_K_V x]. inv_MyHashMap_K_V x
      = (invariant_MyHashMap_K_V x /\ inv_Vec_List_tup2_K_V_Global x.buckets)
  
  predicate resolve_V (_1: t_V)
  
  predicate resolve_Option_V (_1: t_Option_V)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Option_V [resolve_Option_V x]. resolve_Option_V x
      = match x with
        | None -> true
        | Some x0 -> resolve_V x0
        end
  
  predicate resolve_List_tup2_K_V (self: t_List_tup2_K_V) = forall k: t_DeepModelTy. resolve_Option_V (get_K self k)
  
  predicate resolve_K (_1: t_K)
  
  predicate resolve_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = resolve_K _1.f0 /\ resolve_V _1.f1
  
  meta "rewrite_def" predicate resolve_tup2_K_V
  
  predicate resolve_List_tup2_K_V'0 (_1: t_List_tup2_K_V)
  
  predicate resolve_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = resolve_List_tup2_K_V'0 _1
  
  meta "rewrite_def" predicate resolve_Box_List_tup2_K_V_Global
  
  axiom resolve_axiom'0 [@rewrite]: forall x: t_List_tup2_K_V [resolve_List_tup2_K_V'0 x]. resolve_List_tup2_K_V'0 x
      = (resolve_List_tup2_K_V x
      /\ match x with
        | Nil -> true
        | Cons x0 x1 -> resolve_tup2_K_V x0 /\ resolve_Box_List_tup2_K_V_Global x1
        end)
  
  predicate resolve_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) =
    forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self)
      -> resolve_List_tup2_K_V'0 (index_Vec_List_tup2_K_V_Global self i)
  
  meta "rewrite_def" predicate resolve_Vec_List_tup2_K_V_Global
  
  predicate resolve_Vec_List_tup2_K_V_Global'0 (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom resolve_axiom'1:
    forall x: t_Vec_List_tup2_K_V_Global [resolve_Vec_List_tup2_K_V_Global'0 x]. resolve_Vec_List_tup2_K_V_Global'0 x
      -> resolve_Vec_List_tup2_K_V_Global x
  
  predicate structural_resolve_MyHashMap_K_V (_1: t_MyHashMap_K_V) = resolve_Vec_List_tup2_K_V_Global'0 _1.buckets
  
  function bucket_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : t_List_tup2_K_V =
    index_Vec_List_tup2_K_V_Global self.buckets (bucket_ix_K self k)
  
  function view_MyHashMap_K_V (self: t_MyHashMap_K_V) : Map.map t_DeepModelTy t_Option_V =
    fun (k: t_DeepModelTy) -> get_K (bucket_K self k) k
  
  predicate resolve_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    forall k: t_DeepModelTy. resolve_Option_V (Map.get (view_MyHashMap_K_V self) k)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_MyHashMap_K_V
  
  function resolve_coherence_MyHashMap_K_V (self: t_MyHashMap_K_V) : ()
  
  goal vc_resolve_coherence_MyHashMap_K_V: inv_MyHashMap_K_V self
    -> structural_resolve_MyHashMap_K_V self -> ([@expl:resolve_coherence ensures] resolve_MyHashMap_K_V self)
end
module M_impl_MyHashMap_K_V_0__new (* MyHashMap<K, V> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  use int.EuclideanDivision
  use map.Map
  
  type t_K
  
  type t_V
  
  type tup2_K_V = { f0: t_K; f1: t_V }
  
  type t_List_tup2_K_V = Nil | Cons tup2_K_V t_List_tup2_K_V
  
  type t_Vec_List_tup2_K_V_Global
  
  predicate inv_K (_1: t_K)
  
  predicate inv_V (_1: t_V)
  
  predicate inv_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = inv_K _1.f0 /\ inv_V _1.f1
  
  meta "rewrite_def" predicate inv_tup2_K_V
  
  predicate inv_List_tup2_K_V (_1: t_List_tup2_K_V)
  
  predicate invariant_Box_List_tup2_K_V_Global (self: t_List_tup2_K_V) = inv_List_tup2_K_V self
  
  predicate inv_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = invariant_Box_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_Box_List_tup2_K_V_Global
  
  axiom inv_axiom [@rewrite]: forall x: t_List_tup2_K_V [inv_List_tup2_K_V x]. inv_List_tup2_K_V x
      = match x with
        | Nil -> true
        | Cons f0'0 f1'0 -> inv_tup2_K_V f0'0 /\ inv_Box_List_tup2_K_V_Global f1'0
        end
  
  predicate invariant_Seq_List_tup2_K_V [@inline:trivial] (self: Seq.seq t_List_tup2_K_V) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_List_tup2_K_V_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_List_tup2_K_V
  
  predicate inv_Seq_List_tup2_K_V [@inline:trivial] (_1: Seq.seq t_List_tup2_K_V) = invariant_Seq_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_Seq_List_tup2_K_V
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) : Seq.seq t_List_tup2_K_V
  
  axiom view_Vec_List_tup2_K_V_Global_spec:
    forall self: t_Vec_List_tup2_K_V_Global. Seq.length (view_Vec_List_tup2_K_V_Global self) <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) =
    inv_Seq_List_tup2_K_V (view_Vec_List_tup2_K_V_Global self)
  
  predicate inv_Vec_List_tup2_K_V_Global (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom inv_axiom'0:
    forall x: t_Vec_List_tup2_K_V_Global [inv_Vec_List_tup2_K_V_Global x]. inv_Vec_List_tup2_K_V_Global x
      -> invariant_Vec_List_tup2_K_V_Global x
  
  function index_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) (ix: int) : t_List_tup2_K_V
   = Seq.get (view_Vec_List_tup2_K_V_Global self) ix
  
  meta "rewrite_def" function index_Vec_List_tup2_K_V_Global
  
  let rec from_elem_List_tup2_K_V (elem: t_List_tup2_K_V) (n: UInt64.t) (return (x: t_Vec_List_tup2_K_V_Global)) =
    {[@expl:from_elem 'elem' type invariant] inv_List_tup2_K_V elem}
    any
    [ return (result: t_Vec_List_tup2_K_V_Global) -> {inv_Vec_List_tup2_K_V_Global result}
      {Seq.length (view_Vec_List_tup2_K_V_Global result) = UInt64.t'int n}
      {forall i: int. 0 <= i /\ i < UInt64.t'int n -> index_Vec_List_tup2_K_V_Global result i = elem}
      (! return {result}) ]
  
  type t_MyHashMap_K_V = { buckets: t_Vec_List_tup2_K_V_Global }
  
  type t_DeepModelTy
  
  type t_Option_V = None | Some t_V
  
  function deep_model_K (self: t_K) : t_DeepModelTy
  
  function get_K (self: t_List_tup2_K_V) (index: t_DeepModelTy) : t_Option_V = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_K k = index then Some v else get_K tl index
      end
  
  function hash_log_K (_1: t_DeepModelTy) : int
  
  function bucket_ix_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log_K k) (Seq.length (view_Vec_List_tup2_K_V_Global self.buckets))
  
  predicate good_bucket_K (self: t_MyHashMap_K_V) (l: t_List_tup2_K_V) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get_K l k = Some v -> bucket_ix_K self k = h
  
  predicate no_double_binding_K (self: t_List_tup2_K_V) =
    match self with
      | Nil -> true
      | Cons {f0 = k} tl -> get_K tl (deep_model_K k) = None /\ no_double_binding_K tl
      end
  
  predicate invariant_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    0 < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
      -> good_bucket_K self (index_Vec_List_tup2_K_V_Global self.buckets i) i
      /\ no_double_binding_K (index_Vec_List_tup2_K_V_Global self.buckets i))
  
  predicate inv_MyHashMap_K_V (_1: t_MyHashMap_K_V)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_MyHashMap_K_V [inv_MyHashMap_K_V x]. inv_MyHashMap_K_V x
      = (invariant_MyHashMap_K_V x /\ inv_Vec_List_tup2_K_V_Global x.buckets)
  
  function bucket_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : t_List_tup2_K_V =
    index_Vec_List_tup2_K_V_Global self.buckets (bucket_ix_K self k)
  
  function view_MyHashMap_K_V (self: t_MyHashMap_K_V) : Map.map t_DeepModelTy t_Option_V =
    fun (k: t_DeepModelTy) -> get_K (bucket_K self k) k
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new_K (size: UInt64.t) (return (x: t_MyHashMap_K_V)) = {[@expl:new requires] 0 < UInt64.t'int size}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_6 <- Nil ] s1
      | s1 = from_elem_List_tup2_K_V {_6} {size} (fun (_ret: t_Vec_List_tup2_K_V_Global) -> [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &res <- { buckets = _5 } ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- res ] s1 | s1 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: t_MyHashMap_K_V = Any.any_l ()
    | & size: UInt64.t = size
    | & res: t_MyHashMap_K_V = Any.any_l ()
    | & _5: t_Vec_List_tup2_K_V_Global = Any.any_l ()
    | & _6: t_List_tup2_K_V = Any.any_l () ])
    [ return (result: t_MyHashMap_K_V) -> {[@expl:new result type invariant] inv_MyHashMap_K_V result}
      {[@expl:new ensures] forall i: t_DeepModelTy. Map.get (view_MyHashMap_K_V result) i = None}
      (! return {result}) ]
end
module M_impl_MyHashMap_K_V_0__add (* MyHashMap<K, V> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use int.EuclideanDivision
  use creusot.prelude.Any
  use map.Map
  
  type t_Vec_List_tup2_K_V_Global
  
  type t_MyHashMap_K_V = { buckets: t_Vec_List_tup2_K_V_Global }
  
  type t_K
  
  type t_V
  
  type tup2_K_V = { f0: t_K; f1: t_V }
  
  type t_List_tup2_K_V = Nil | Cons tup2_K_V t_List_tup2_K_V
  
  predicate inv_K (_1: t_K)
  
  predicate inv_V (_1: t_V)
  
  predicate inv_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = inv_K _1.f0 /\ inv_V _1.f1
  
  meta "rewrite_def" predicate inv_tup2_K_V
  
  predicate inv_List_tup2_K_V (_1: t_List_tup2_K_V)
  
  predicate invariant_Box_List_tup2_K_V_Global (self: t_List_tup2_K_V) = inv_List_tup2_K_V self
  
  predicate inv_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = invariant_Box_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_Box_List_tup2_K_V_Global
  
  axiom inv_axiom [@rewrite]: forall x: t_List_tup2_K_V [inv_List_tup2_K_V x]. inv_List_tup2_K_V x
      = match x with
        | Nil -> true
        | Cons f0'0 f1'0 -> inv_tup2_K_V f0'0 /\ inv_Box_List_tup2_K_V_Global f1'0
        end
  
  predicate invariant_Seq_List_tup2_K_V [@inline:trivial] (self: Seq.seq t_List_tup2_K_V) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_List_tup2_K_V_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_List_tup2_K_V
  
  predicate inv_Seq_List_tup2_K_V [@inline:trivial] (_1: Seq.seq t_List_tup2_K_V) = invariant_Seq_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_Seq_List_tup2_K_V
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) : Seq.seq t_List_tup2_K_V
  
  axiom view_Vec_List_tup2_K_V_Global_spec:
    forall self: t_Vec_List_tup2_K_V_Global. Seq.length (view_Vec_List_tup2_K_V_Global self) <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) =
    inv_Seq_List_tup2_K_V (view_Vec_List_tup2_K_V_Global self)
  
  predicate inv_Vec_List_tup2_K_V_Global (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom inv_axiom'0:
    forall x: t_Vec_List_tup2_K_V_Global [inv_Vec_List_tup2_K_V_Global x]. inv_Vec_List_tup2_K_V_Global x
      -> invariant_Vec_List_tup2_K_V_Global x
  
  predicate invariant_ref_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) =
    inv_Vec_List_tup2_K_V_Global self
  
  meta "rewrite_def" predicate invariant_ref_Vec_List_tup2_K_V_Global
  
  predicate inv_ref_Vec_List_tup2_K_V_Global [@inline:trivial] (_1: t_Vec_List_tup2_K_V_Global) =
    invariant_ref_Vec_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_List_tup2_K_V_Global
  
  let rec len_List_tup2_K_V (self_: t_Vec_List_tup2_K_V_Global) (return (x: UInt64.t)) =
    {[@expl:len 'self_' type invariant] inv_ref_Vec_List_tup2_K_V_Global self_}
    any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_List_tup2_K_V_Global self_)}
      (! return {result}) ]
  
  predicate invariant_ref_K [@inline:trivial] (self: t_K) = inv_K self
  
  meta "rewrite_def" predicate invariant_ref_K
  
  predicate inv_ref_K [@inline:trivial] (_1: t_K) = invariant_ref_K _1
  
  meta "rewrite_def" predicate inv_ref_K
  
  predicate precondition_hash (self: ()) (args: t_K)
  
  axiom precondition_fndef: forall args: t_K [precondition_hash () args]. (let self = args in inv_ref_K self)
      -> precondition_hash () args
  
  type t_DeepModelTy
  
  function hash_log_K (_1: t_DeepModelTy) : int
  
  function deep_model_K (self: t_K) : t_DeepModelTy
  
  function deep_model_ref_K [@inline:trivial] (self: t_K) : t_DeepModelTy = deep_model_K self
  
  meta "rewrite_def" function deep_model_ref_K
  
  predicate postcondition_once_hash (self: ()) (args: t_K) (result: UInt64.t)
  
  axiom postcondition_fndef:
    forall args: t_K, res: UInt64.t [postcondition_once_hash () args res]. postcondition_once_hash () args res
      -> (let self = args in UInt64.t'int res = hash_log_K (deep_model_ref_K self))
  
  let rec hash_K (self: t_K) (return (x: UInt64.t)) = {[@expl:hash requires] precondition_hash () self}
    any [ return (result: UInt64.t) -> {postcondition_once_hash () self result} (! return {result}) ]
  
  predicate invariant_ref_Vec_List_tup2_K_V_Global'0 [@inline:trivial] (self: MutBorrow.t t_Vec_List_tup2_K_V_Global) =
    inv_Vec_List_tup2_K_V_Global self.current /\ inv_Vec_List_tup2_K_V_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_List_tup2_K_V_Global'0
  
  predicate inv_ref_Vec_List_tup2_K_V_Global'0 [@inline:trivial] (_1: MutBorrow.t t_Vec_List_tup2_K_V_Global) =
    invariant_ref_Vec_List_tup2_K_V_Global'0 _1
  
  meta "rewrite_def" predicate inv_ref_Vec_List_tup2_K_V_Global'0
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List_tup2_K_V) =
    UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate invariant_ref_List_tup2_K_V [@inline:trivial] (self: MutBorrow.t t_List_tup2_K_V) =
    inv_List_tup2_K_V self.current /\ inv_List_tup2_K_V self.final
  
  meta "rewrite_def" predicate invariant_ref_List_tup2_K_V
  
  predicate inv_ref_List_tup2_K_V [@inline:trivial] (_1: MutBorrow.t t_List_tup2_K_V) = invariant_ref_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_ref_List_tup2_K_V
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List_tup2_K_V) (out: t_List_tup2_K_V) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  predicate resolve_elswhere_usize [@inline:trivial] (self: UInt64.t) (old': Seq.seq t_List_tup2_K_V) (fin: Seq.seq t_List_tup2_K_V) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere_usize
  
  let rec index_mut_Vec_List_tup2_K_V_Global (self_: MutBorrow.t t_Vec_List_tup2_K_V_Global) (ix: UInt64.t)
    (return (x: MutBorrow.t t_List_tup2_K_V)) =
    {[@expl:index_mut 'self_' type invariant] inv_ref_Vec_List_tup2_K_V_Global'0 self_}
    {[@expl:index_mut requires] in_bounds_usize ix (view_Vec_List_tup2_K_V_Global self_.current)}
    any
    [ return (result: MutBorrow.t t_List_tup2_K_V) -> {inv_ref_List_tup2_K_V result}
      {has_value_usize ix (view_Vec_List_tup2_K_V_Global self_.current) result.current}
      {has_value_usize ix (view_Vec_List_tup2_K_V_Global self_.final) result.final}
      {resolve_elswhere_usize ix (view_Vec_List_tup2_K_V_Global self_.current) (view_Vec_List_tup2_K_V_Global self_.final)}
      {Seq.length (view_Vec_List_tup2_K_V_Global self_.final)
      = Seq.length (view_Vec_List_tup2_K_V_Global self_.current)}
      (! return {result}) ]
  
  predicate resolve_ref_List_tup2_K_V [@inline:trivial] (_1: MutBorrow.t t_List_tup2_K_V) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_List_tup2_K_V
  
  type t_Option_V = None | Some t_V
  
  function get_K (self: t_List_tup2_K_V) (index: t_DeepModelTy) : t_Option_V = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_K k = index then Some v else get_K tl index
      end
  
  predicate no_double_binding_K (self: t_List_tup2_K_V) =
    match self with
      | Nil -> true
      | Cons {f0 = k} tl -> get_K tl (deep_model_K k) = None /\ no_double_binding_K tl
      end
  
  function fin_Snapshot_ref_List_tup2_K_V [@inline:trivial] (self: MutBorrow.t t_List_tup2_K_V) : t_List_tup2_K_V =
    self.final
  
  meta "rewrite_def" function fin_Snapshot_ref_List_tup2_K_V
  
  function bucket_ix_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log_K k) (Seq.length (view_Vec_List_tup2_K_V_Global self.buckets))
  
  predicate good_bucket_K (self: t_MyHashMap_K_V) (l: t_List_tup2_K_V) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get_K l k = Some v -> bucket_ix_K self k = h
  
  let rec elim_Cons (input: t_List_tup2_K_V) (ret (f0'0: tup2_K_V) (f1'0: t_List_tup2_K_V)) = any
    [ good (f0'0: tup2_K_V) (f1'0: t_List_tup2_K_V) -> {Cons f0'0 f1'0 = input} (! ret {f0'0} {f1'0})
    | bad -> {forall f0'0: tup2_K_V, f1'0: t_List_tup2_K_V [Cons f0'0 f1'0: t_List_tup2_K_V]. Cons f0'0 f1'0 <> input}
      (! {false}
      any) ]
  
  predicate invariant_ref_K'0 [@inline:trivial] (self: MutBorrow.t t_K) = inv_K self.current /\ inv_K self.final
  
  meta "rewrite_def" predicate invariant_ref_K'0
  
  predicate inv_ref_K'0 [@inline:trivial] (_1: MutBorrow.t t_K) = invariant_ref_K'0 _1
  
  meta "rewrite_def" predicate inv_ref_K'0
  
  predicate resolve_ref_K [@inline:trivial] (_1: MutBorrow.t t_K) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_K
  
  type tup2_ref_K_ref_K = { f0'0: t_K; f1'0: t_K }
  
  predicate precondition_eq (self: ()) (args: tup2_ref_K_ref_K)
  
  axiom precondition_fndef'0:
    forall args: tup2_ref_K_ref_K [precondition_eq () args]. (let {f0'0 = self_; f1'0 = rhs} = args in inv_ref_K rhs
        /\ inv_ref_K self_) -> precondition_eq () args
  
  predicate postcondition_once_eq (self: ()) (args: tup2_ref_K_ref_K) (result: bool)
  
  axiom postcondition_fndef'0:
    forall args: tup2_ref_K_ref_K, res: bool [postcondition_once_eq () args res]. postcondition_once_eq () args res
      -> (let {f0'0 = self_; f1'0 = rhs} = args in res = (deep_model_ref_K self_ = deep_model_ref_K rhs))
  
  let rec eq_K (self_: t_K) (rhs: t_K) (return (x: bool)) = {[@expl:eq requires] precondition_eq () { f0'0 = self_;
                                                                                                      f1'0 = rhs }}
    any [ return (result: bool) -> {postcondition_once_eq () { f0'0 = self_; f1'0 = rhs } result} (! return {result}) ]
  
  predicate invariant_ref_V [@inline:trivial] (self: MutBorrow.t t_V) = inv_V self.current /\ inv_V self.final
  
  meta "rewrite_def" predicate invariant_ref_V
  
  predicate inv_ref_V [@inline:trivial] (_1: MutBorrow.t t_V) = invariant_ref_V _1
  
  meta "rewrite_def" predicate inv_ref_V
  
  predicate resolve_ref_V [@inline:trivial] (_1: MutBorrow.t t_V) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_V
  
  predicate invariant_ref_Box_List_tup2_K_V_Global [@inline:trivial] (self: MutBorrow.t t_List_tup2_K_V) =
    inv_Box_List_tup2_K_V_Global self.current /\ inv_Box_List_tup2_K_V_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Box_List_tup2_K_V_Global
  
  predicate inv_ref_Box_List_tup2_K_V_Global [@inline:trivial] (_1: MutBorrow.t t_List_tup2_K_V) =
    invariant_ref_Box_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_ref_Box_List_tup2_K_V_Global
  
  predicate resolve_ref_Box_List_tup2_K_V_Global [@inline:trivial] (_1: MutBorrow.t t_List_tup2_K_V) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Box_List_tup2_K_V_Global
  
  predicate resolve_V (_1: t_V)
  
  predicate resolve_Option_V (_1: t_Option_V)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Option_V [resolve_Option_V x]. resolve_Option_V x
      = match x with
        | None -> true
        | Some x0 -> resolve_V x0
        end
  
  predicate resolve_List_tup2_K_V (self: t_List_tup2_K_V) = forall k: t_DeepModelTy. resolve_Option_V (get_K self k)
  
  predicate resolve_K (_1: t_K)
  
  predicate resolve_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = resolve_K _1.f0 /\ resolve_V _1.f1
  
  meta "rewrite_def" predicate resolve_tup2_K_V
  
  predicate resolve_List_tup2_K_V'0 (_1: t_List_tup2_K_V)
  
  predicate resolve_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = resolve_List_tup2_K_V'0 _1
  
  meta "rewrite_def" predicate resolve_Box_List_tup2_K_V_Global
  
  axiom resolve_axiom'0 [@rewrite]: forall x: t_List_tup2_K_V [resolve_List_tup2_K_V'0 x]. resolve_List_tup2_K_V'0 x
      = (resolve_List_tup2_K_V x
      /\ match x with
        | Nil -> true
        | Cons x0 x1 -> resolve_tup2_K_V x0 /\ resolve_Box_List_tup2_K_V_Global x1
        end)
  
  function index_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) (ix: int) : t_List_tup2_K_V
   = Seq.get (view_Vec_List_tup2_K_V_Global self) ix
  
  meta "rewrite_def" function index_Vec_List_tup2_K_V_Global
  
  predicate invariant_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    0 < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
      -> good_bucket_K self (index_Vec_List_tup2_K_V_Global self.buckets i) i
      /\ no_double_binding_K (index_Vec_List_tup2_K_V_Global self.buckets i))
  
  predicate inv_MyHashMap_K_V (_1: t_MyHashMap_K_V)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_MyHashMap_K_V [inv_MyHashMap_K_V x]. inv_MyHashMap_K_V x
      = (invariant_MyHashMap_K_V x /\ inv_Vec_List_tup2_K_V_Global x.buckets)
  
  predicate invariant_ref_MyHashMap_K_V [@inline:trivial] (self: MutBorrow.t t_MyHashMap_K_V) =
    inv_MyHashMap_K_V self.current /\ inv_MyHashMap_K_V self.final
  
  meta "rewrite_def" predicate invariant_ref_MyHashMap_K_V
  
  predicate inv_ref_MyHashMap_K_V [@inline:trivial] (_1: MutBorrow.t t_MyHashMap_K_V) = invariant_ref_MyHashMap_K_V _1
  
  meta "rewrite_def" predicate inv_ref_MyHashMap_K_V
  
  predicate resolve_ref_MyHashMap_K_V [@inline:trivial] (_1: MutBorrow.t t_MyHashMap_K_V) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_MyHashMap_K_V
  
  function bucket_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : t_List_tup2_K_V =
    index_Vec_List_tup2_K_V_Global self.buckets (bucket_ix_K self k)
  
  function view_MyHashMap_K_V (self: t_MyHashMap_K_V) : Map.map t_DeepModelTy t_Option_V =
    fun (k: t_DeepModelTy) -> get_K (bucket_K self k) k
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add_K (self: MutBorrow.t t_MyHashMap_K_V) (key: t_K) (val': t_V) (return (x: ())) =
    {[@expl:add 'self' type invariant] inv_ref_MyHashMap_K_V self}
    {[@expl:add 'key' type invariant] inv_K key}
    {[@expl:add 'val' type invariant] inv_V val'}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_self <- self ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = len_List_tup2_K_V {self.current.buckets} (fun (_ret: UInt64.t) -> [ &length <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = hash_K {key} (fun (_ret: UInt64.t) -> [ &_11 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = UInt64.of_int {UInt64.t'int _11} (fun (_ret_from: UInt64.t) -> [ &_10 <- _ret_from ] s1)
      | s1 = [ &_13 <- length ] s2
      | s2 = [ &_14 <- _13 = (0: UInt64.t) ] s3
      | s3 = {[@expl:remainder by zero] not _14} s4
      | s4 = bb4 ]
    | bb4 = s0
      [ s0 = UInt64.rem {_10} {_13} (fun (_ret: UInt64.t) -> [ &index <- _ret ] s1)
      | s1 = {inv_Vec_List_tup2_K_V_Global self.current.buckets}
        MutBorrow.borrow_final <t_Vec_List_tup2_K_V_Global> {self.current.buckets}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret: MutBorrow.t t_Vec_List_tup2_K_V_Global) ->
            [ &_18 <- _ret ] -{inv_Vec_List_tup2_K_V_Global _ret.final}-
            [ &self <- { self with current = { buckets = _ret.final } } ] s2)
      | s2 = index_mut_Vec_List_tup2_K_V_Global {_18} {index}
          (fun (_ret: MutBorrow.t t_List_tup2_K_V) -> [ &_17 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = {inv_List_tup2_K_V _17.current}
        MutBorrow.borrow_final <t_List_tup2_K_V> {_17.current} {MutBorrow.get_id _17}
          (fun (_ret: MutBorrow.t t_List_tup2_K_V) ->
            [ &_16 <- _ret ] -{inv_List_tup2_K_V _ret.final}-
            [ &_17 <- { _17 with current = _ret.final } ] s1)
      | s1 = {inv_List_tup2_K_V _16.current}
        MutBorrow.borrow_final <t_List_tup2_K_V> {_16.current} {MutBorrow.get_id _16}
          (fun (_ret: MutBorrow.t t_List_tup2_K_V) ->
            [ &l <- _ret ] -{inv_List_tup2_K_V _ret.final}-
            [ &_16 <- { _16 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv_ref_List_tup2_K_V _16} s3
      | s3 = -{resolve_ref_List_tup2_K_V _16}- s4
      | s4 = [ &old_l <- l ] s5
      | s5 = bb7 ]
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant #0] inv_ref_List_tup2_K_V l}
        {[@expl:loop invariant #1] good_bucket_K old_self.current l.current (UInt64.t'int index)}
        {[@expl:loop invariant #2] good_bucket_K old_self.current l.final (UInt64.t'int index)
        -> good_bucket_K old_self.current old_l.final (UInt64.t'int index)}
        {[@expl:loop invariant #3] get_K l.final (deep_model_K key) = Some val'
        -> get_K (fin_Snapshot_ref_List_tup2_K_V old_l) (deep_model_K key) = Some val'}
        {[@expl:loop invariant #4] forall i: t_DeepModelTy. get_K l.final i = get_K l.current i
          -> get_K (fin_Snapshot_ref_List_tup2_K_V old_l) i = get_K old_l.current i}
        {[@expl:loop invariant #5] no_double_binding_K l.current}
        {[@expl:loop invariant #6] (forall i: t_DeepModelTy. get_K l.current i = get_K l.final i
              \/ i = deep_model_K key)
          /\ no_double_binding_K l.final -> no_double_binding_K (fin_Snapshot_ref_List_tup2_K_V old_l)}
        (! s0)
        [ s0 = bb8 ]
        [ bb8 = any
          [ br0 -> {l.current = Nil} (! bb14)
          | br1 (x0: tup2_K_V) (x1: t_List_tup2_K_V) -> {l.current = Cons x0 x1} (! bb10) ]
        | bb10 = s0
          [ s0 = elim_Cons {l.current}
              (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) ->
                {inv_K r0.f0}
                MutBorrow.borrow_final <t_K> {r0.f0}
                  {MutBorrow.inherit_id (MutBorrow.inherit_id (MutBorrow.get_id l) 1) 1}
                  (fun (_ret: MutBorrow.t t_K) ->
                    [ &k <- _ret ] -{inv_K _ret.final}-
                    [ &l <- { l with current = Cons ({ r0 with f0 = _ret.final }) r1 } ] s1))
          | s1 = elim_Cons {l.current}
              (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) ->
                {inv_V r0.f1}
                MutBorrow.borrow_final <t_V> {r0.f1}
                  {MutBorrow.inherit_id (MutBorrow.inherit_id (MutBorrow.get_id l) 1) 2}
                  (fun (_ret: MutBorrow.t t_V) ->
                    [ &v <- _ret ] -{inv_V _ret.final}-
                    [ &l <- { l with current = Cons ({ r0 with f1 = _ret.final }) r1 } ] s2))
          | s2 = elim_Cons {l.current}
              (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) ->
                {inv_Box_List_tup2_K_V_Global r1}
                MutBorrow.borrow_final <t_List_tup2_K_V> {r1} {MutBorrow.inherit_id (MutBorrow.get_id l) 2}
                  (fun (_ret: MutBorrow.t t_List_tup2_K_V) ->
                    [ &tl <- _ret ] -{inv_Box_List_tup2_K_V_Global _ret.final}-
                    [ &l <- { l with current = Cons r0 _ret.final } ] s3))
          | s3 = [ &tl'0 <- tl ] s4
          | s4 = {[@expl:type invariant] inv_ref_K'0 k} s5
          | s5 = -{resolve_ref_K k}- s6
          | s6 = eq_K {k.current} {key} (fun (_ret: bool) -> [ &_38 <- _ret ] s7)
          | s7 = bb11 ]
        | bb11 = any [ br0 -> {_38 = false} (! bb13) | br1 -> {_38} (! bb12) ]
        | bb13 = s0
          [ s0 = {[@expl:type invariant] inv_ref_V v} s1
          | s1 = -{resolve_ref_V v}- s2
          | s2 = {inv_List_tup2_K_V tl'0.current}
            MutBorrow.borrow_final <t_List_tup2_K_V> {tl'0.current} {MutBorrow.get_id tl'0}
              (fun (_ret: MutBorrow.t t_List_tup2_K_V) ->
                [ &_44 <- _ret ] -{inv_List_tup2_K_V _ret.final}-
                [ &tl'0 <- { tl'0 with current = _ret.final } ] s3)
          | s3 = {inv_List_tup2_K_V _44.current}
            MutBorrow.borrow_final <t_List_tup2_K_V> {_44.current} {MutBorrow.get_id _44}
              (fun (_ret: MutBorrow.t t_List_tup2_K_V) ->
                [ &_43 <- _ret ] -{inv_List_tup2_K_V _ret.final}-
                [ &_44 <- { _44 with current = _ret.final } ] s4)
          | s4 = {[@expl:type invariant] inv_ref_List_tup2_K_V l} s5
          | s5 = -{resolve_ref_List_tup2_K_V l}- s6
          | s6 = [ &l <- _43 ] s7
          | s7 = {[@expl:type invariant] inv_ref_List_tup2_K_V _44} s8
          | s8 = -{resolve_ref_List_tup2_K_V _44}- s9
          | s9 = {[@expl:type invariant] inv_ref_Box_List_tup2_K_V_Global tl'0} s10
          | s10 = -{resolve_ref_Box_List_tup2_K_V_Global tl'0}- s11
          | s11 = bb7 ] ] ]
    | bb14 = s0 [ s0 = [ &_47 <- { f0 = key; f1 = val' } ] s1 | s1 = [ &_51 <- Nil ] s2 | s2 = bb15 ]
    | bb15 = s0 [ s0 = [ &_46 <- Cons _47 _51 ] s1 | s1 = bb17 ]
    | bb17 = s0
      [ s0 = {[@expl:type invariant] inv_List_tup2_K_V l.current} s1
      | s1 = -{resolve_List_tup2_K_V'0 l.current}- s2
      | s2 = [ &l <- { l with current = _46 } ] s3
      | s3 = {[@expl:type invariant] inv_ref_List_tup2_K_V l} s4
      | s4 = -{resolve_ref_List_tup2_K_V l}- s5
      | s5 = {[@expl:type invariant] inv_ref_List_tup2_K_V _17} s6
      | s6 = -{resolve_ref_List_tup2_K_V _17}- s7
      | s7 = {[@expl:type invariant] inv_ref_MyHashMap_K_V self} s8
      | s8 = -{resolve_ref_MyHashMap_K_V self}- s9
      | s9 = bb20 ]
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Box_List_tup2_K_V_Global tl'0} s1
      | s1 = -{resolve_ref_Box_List_tup2_K_V_Global tl'0}- s2
      | s2 = [ &v <- { v with current = val' } ] s3
      | s3 = {[@expl:type invariant] inv_ref_V v} s4
      | s4 = -{resolve_ref_V v}- s5
      | s5 = {[@expl:type invariant] inv_ref_List_tup2_K_V _17} s6
      | s6 = -{resolve_ref_List_tup2_K_V _17}- s7
      | s7 = {[@expl:type invariant] inv_ref_List_tup2_K_V l} s8
      | s8 = -{resolve_ref_List_tup2_K_V l}- s9
      | s9 = {[@expl:type invariant] inv_ref_MyHashMap_K_V self} s10
      | s10 = -{resolve_ref_MyHashMap_K_V self}- s11
      | s11 = bb20 ]
    | bb20 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_MyHashMap_K_V = self
    | & key: t_K = key
    | & val': t_V = val'
    | & old_self: MutBorrow.t t_MyHashMap_K_V = Any.any_l ()
    | & length: UInt64.t = Any.any_l ()
    | & index: UInt64.t = Any.any_l ()
    | & _10: UInt64.t = Any.any_l ()
    | & _11: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & l: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _16: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _17: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _18: MutBorrow.t t_Vec_List_tup2_K_V_Global = Any.any_l ()
    | & old_l: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & k: MutBorrow.t t_K = Any.any_l ()
    | & v: MutBorrow.t t_V = Any.any_l ()
    | & tl: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & tl'0: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _38: bool = Any.any_l ()
    | & _43: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _44: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _46: t_List_tup2_K_V = Any.any_l ()
    | & _47: tup2_K_V = Any.any_l ()
    | & _51: t_List_tup2_K_V = Any.any_l () ])
    [ return (result: ()) -> {[@expl:add ensures] forall i: t_DeepModelTy. Map.get (view_MyHashMap_K_V self.final) i
        = (if i = deep_model_K key then Some val' else Map.get (view_MyHashMap_K_V self.current) i)}
      (! return {result}) ]
end
module M_impl_MyHashMap_K_V_0__get (* MyHashMap<K, V> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use int.EuclideanDivision
  use creusot.prelude.Any
  use map.Map
  
  type t_K
  
  predicate inv_K (_1: t_K)
  
  predicate invariant_ref_K [@inline:trivial] (self: t_K) = inv_K self
  
  meta "rewrite_def" predicate invariant_ref_K
  
  predicate inv_ref_K [@inline:trivial] (_1: t_K) = invariant_ref_K _1
  
  meta "rewrite_def" predicate inv_ref_K
  
  predicate precondition_hash (self: ()) (args: t_K)
  
  axiom precondition_fndef: forall args: t_K [precondition_hash () args]. (let self = args in inv_ref_K self)
      -> precondition_hash () args
  
  type t_DeepModelTy
  
  function hash_log_K (_1: t_DeepModelTy) : int
  
  function deep_model_K (self: t_K) : t_DeepModelTy
  
  function deep_model_ref_K [@inline:trivial] (self: t_K) : t_DeepModelTy = deep_model_K self
  
  meta "rewrite_def" function deep_model_ref_K
  
  predicate postcondition_once_hash (self: ()) (args: t_K) (result: UInt64.t)
  
  axiom postcondition_fndef:
    forall args: t_K, res: UInt64.t [postcondition_once_hash () args res]. postcondition_once_hash () args res
      -> (let self = args in UInt64.t'int res = hash_log_K (deep_model_ref_K self))
  
  let rec hash_K (self: t_K) (return (x: UInt64.t)) = {[@expl:hash requires] precondition_hash () self}
    any [ return (result: UInt64.t) -> {postcondition_once_hash () self result} (! return {result}) ]
  
  type t_Vec_List_tup2_K_V_Global
  
  type t_MyHashMap_K_V = { buckets: t_Vec_List_tup2_K_V_Global }
  
  type t_V
  
  type tup2_K_V = { f0: t_K; f1: t_V }
  
  type t_List_tup2_K_V = Nil | Cons tup2_K_V t_List_tup2_K_V
  
  predicate inv_V (_1: t_V)
  
  predicate inv_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = inv_K _1.f0 /\ inv_V _1.f1
  
  meta "rewrite_def" predicate inv_tup2_K_V
  
  predicate inv_List_tup2_K_V (_1: t_List_tup2_K_V)
  
  predicate invariant_Box_List_tup2_K_V_Global (self: t_List_tup2_K_V) = inv_List_tup2_K_V self
  
  predicate inv_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = invariant_Box_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_Box_List_tup2_K_V_Global
  
  axiom inv_axiom [@rewrite]: forall x: t_List_tup2_K_V [inv_List_tup2_K_V x]. inv_List_tup2_K_V x
      = match x with
        | Nil -> true
        | Cons f0'0 f1'0 -> inv_tup2_K_V f0'0 /\ inv_Box_List_tup2_K_V_Global f1'0
        end
  
  predicate invariant_Seq_List_tup2_K_V [@inline:trivial] (self: Seq.seq t_List_tup2_K_V) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_List_tup2_K_V_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_List_tup2_K_V
  
  predicate inv_Seq_List_tup2_K_V [@inline:trivial] (_1: Seq.seq t_List_tup2_K_V) = invariant_Seq_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_Seq_List_tup2_K_V
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) : Seq.seq t_List_tup2_K_V
  
  axiom view_Vec_List_tup2_K_V_Global_spec:
    forall self: t_Vec_List_tup2_K_V_Global. Seq.length (view_Vec_List_tup2_K_V_Global self) <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) =
    inv_Seq_List_tup2_K_V (view_Vec_List_tup2_K_V_Global self)
  
  predicate inv_Vec_List_tup2_K_V_Global (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom inv_axiom'0:
    forall x: t_Vec_List_tup2_K_V_Global [inv_Vec_List_tup2_K_V_Global x]. inv_Vec_List_tup2_K_V_Global x
      -> invariant_Vec_List_tup2_K_V_Global x
  
  predicate invariant_ref_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) =
    inv_Vec_List_tup2_K_V_Global self
  
  meta "rewrite_def" predicate invariant_ref_Vec_List_tup2_K_V_Global
  
  predicate inv_ref_Vec_List_tup2_K_V_Global [@inline:trivial] (_1: t_Vec_List_tup2_K_V_Global) =
    invariant_ref_Vec_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_List_tup2_K_V_Global
  
  let rec len_List_tup2_K_V (self_: t_Vec_List_tup2_K_V_Global) (return (x: UInt64.t)) =
    {[@expl:len 'self_' type invariant] inv_ref_Vec_List_tup2_K_V_Global self_}
    any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_List_tup2_K_V_Global self_)}
      (! return {result}) ]
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List_tup2_K_V) =
    UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate invariant_ref_List_tup2_K_V [@inline:trivial] (self: t_List_tup2_K_V) = inv_List_tup2_K_V self
  
  meta "rewrite_def" predicate invariant_ref_List_tup2_K_V
  
  predicate inv_ref_List_tup2_K_V [@inline:trivial] (_1: t_List_tup2_K_V) = invariant_ref_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_ref_List_tup2_K_V
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List_tup2_K_V) (out: t_List_tup2_K_V) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  let rec index_Vec_List_tup2_K_V_Global (self_: t_Vec_List_tup2_K_V_Global) (ix: UInt64.t)
    (return (x: t_List_tup2_K_V)) = {[@expl:index 'self_' type invariant] inv_ref_Vec_List_tup2_K_V_Global self_}
    {[@expl:index requires] in_bounds_usize ix (view_Vec_List_tup2_K_V_Global self_)}
    any
    [ return (result: t_List_tup2_K_V) -> {inv_ref_List_tup2_K_V result}
      {has_value_usize ix (view_Vec_List_tup2_K_V_Global self_) result}
      (! return {result}) ]
  
  type t_Option_V = None | Some t_V
  
  function get_K (self: t_List_tup2_K_V) (index: t_DeepModelTy) : t_Option_V = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_K k = index then Some v else get_K tl index
      end
  
  function index_Vec_List_tup2_K_V_Global'0 [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) (ix: int) : t_List_tup2_K_V
   = Seq.get (view_Vec_List_tup2_K_V_Global self) ix
  
  meta "rewrite_def" function index_Vec_List_tup2_K_V_Global'0
  
  function bucket_ix_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log_K k) (Seq.length (view_Vec_List_tup2_K_V_Global self.buckets))
  
  function bucket_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : t_List_tup2_K_V =
    index_Vec_List_tup2_K_V_Global'0 self.buckets (bucket_ix_K self k)
  
  let rec elim_Cons (input: t_List_tup2_K_V) (ret (f0'0: tup2_K_V) (f1'0: t_List_tup2_K_V)) = any
    [ good (f0'0: tup2_K_V) (f1'0: t_List_tup2_K_V) -> {Cons f0'0 f1'0 = input} (! ret {f0'0} {f1'0})
    | bad -> {forall f0'0: tup2_K_V, f1'0: t_List_tup2_K_V [Cons f0'0 f1'0: t_List_tup2_K_V]. Cons f0'0 f1'0 <> input}
      (! {false}
      any) ]
  
  type tup2_ref_K_ref_K = { f0'0: t_K; f1'0: t_K }
  
  predicate precondition_eq (self: ()) (args: tup2_ref_K_ref_K)
  
  axiom precondition_fndef'0:
    forall args: tup2_ref_K_ref_K [precondition_eq () args]. (let {f0'0 = self_; f1'0 = rhs} = args in inv_ref_K rhs
        /\ inv_ref_K self_) -> precondition_eq () args
  
  predicate postcondition_once_eq (self: ()) (args: tup2_ref_K_ref_K) (result: bool)
  
  axiom postcondition_fndef'0:
    forall args: tup2_ref_K_ref_K, res: bool [postcondition_once_eq () args res]. postcondition_once_eq () args res
      -> (let {f0'0 = self_; f1'0 = rhs} = args in res = (deep_model_ref_K self_ = deep_model_ref_K rhs))
  
  let rec eq_K (self_: t_K) (rhs: t_K) (return (x: bool)) = {[@expl:eq requires] precondition_eq () { f0'0 = self_;
                                                                                                      f1'0 = rhs }}
    any [ return (result: bool) -> {postcondition_once_eq () { f0'0 = self_; f1'0 = rhs } result} (! return {result}) ]
  
  type t_Option_ref_V = None'0 | Some'0 t_V
  
  predicate good_bucket_K (self: t_MyHashMap_K_V) (l: t_List_tup2_K_V) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get_K l k = Some v -> bucket_ix_K self k = h
  
  predicate no_double_binding_K (self: t_List_tup2_K_V) =
    match self with
      | Nil -> true
      | Cons {f0 = k} tl -> get_K tl (deep_model_K k) = None /\ no_double_binding_K tl
      end
  
  predicate invariant_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    0 < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
      -> good_bucket_K self (index_Vec_List_tup2_K_V_Global'0 self.buckets i) i
      /\ no_double_binding_K (index_Vec_List_tup2_K_V_Global'0 self.buckets i))
  
  predicate inv_MyHashMap_K_V (_1: t_MyHashMap_K_V)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_MyHashMap_K_V [inv_MyHashMap_K_V x]. inv_MyHashMap_K_V x
      = (invariant_MyHashMap_K_V x /\ inv_Vec_List_tup2_K_V_Global x.buckets)
  
  predicate invariant_ref_MyHashMap_K_V [@inline:trivial] (self: t_MyHashMap_K_V) = inv_MyHashMap_K_V self
  
  meta "rewrite_def" predicate invariant_ref_MyHashMap_K_V
  
  predicate inv_ref_MyHashMap_K_V [@inline:trivial] (_1: t_MyHashMap_K_V) = invariant_ref_MyHashMap_K_V _1
  
  meta "rewrite_def" predicate inv_ref_MyHashMap_K_V
  
  predicate invariant_ref_V [@inline:trivial] (self: t_V) = inv_V self
  
  meta "rewrite_def" predicate invariant_ref_V
  
  predicate inv_ref_V [@inline:trivial] (_1: t_V) = invariant_ref_V _1
  
  meta "rewrite_def" predicate inv_ref_V
  
  predicate inv_Option_ref_V (_1: t_Option_ref_V)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option_ref_V [inv_Option_ref_V x]. inv_Option_ref_V x
      = match x with
        | None'0 -> true
        | Some'0 f0'1 -> inv_ref_V f0'1
        end
  
  function view_MyHashMap_K_V (self: t_MyHashMap_K_V) : Map.map t_DeepModelTy t_Option_V =
    fun (k: t_DeepModelTy) -> get_K (bucket_K self k) k
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get_K'0 (self: t_MyHashMap_K_V) (key: t_K) (return (x: t_Option_ref_V)) =
    {[@expl:get 'self' type invariant] inv_ref_MyHashMap_K_V self}
    {[@expl:get 'key' type invariant] inv_K key}
    (! bb0
    [ bb0 = s0 [ s0 = hash_K {key} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = UInt64.of_int {UInt64.t'int _7} (fun (_ret_from: UInt64.t) -> [ &_6 <- _ret_from ] s1)
      | s1 = len_List_tup2_K_V {self.buckets} (fun (_ret: UInt64.t) -> [ &_9 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = [ &_11 <- _9 = (0: UInt64.t) ] s1 | s1 = {[@expl:remainder by zero] not _11} s2 | s2 = bb3 ]
    | bb3 = s0
      [ s0 = UInt64.rem {_6} {_9} (fun (_ret: UInt64.t) -> [ &index <- _ret ] s1)
      | s1 = index_Vec_List_tup2_K_V_Global {self.buckets} {index} (fun (_ret: t_List_tup2_K_V) -> [ &_13 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0 [ s0 = [ &l <- _13 ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant #0] inv_ref_List_tup2_K_V l}
        {[@expl:loop invariant #1] get_K (bucket_K self (deep_model_K key)) (deep_model_K key)
        = get_K l (deep_model_K key)}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = any [ br0 -> {l = Nil} (! bb12) | br1 (x0: tup2_K_V) (x1: t_List_tup2_K_V) -> {l = Cons x0 x1} (! bb8) ]
        | bb8 = s0
          [ s0 = elim_Cons {l} (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) -> [ &k <- r0.f0 ] s1)
          | s1 = elim_Cons {l} (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) -> [ &v <- r0.f1 ] s2)
          | s2 = elim_Cons {l} (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) -> [ &tl <- r1 ] s3)
          | s3 = eq_K {k} {key} (fun (_ret: bool) -> [ &_26 <- _ret ] s4)
          | s4 = bb9 ]
        | bb9 = any [ br0 -> {_26 = false} (! bb11) | br1 -> {_26} (! bb10) ]
        | bb11 = s0 [ s0 = [ &_32 <- tl ] s1 | s1 = [ &l <- _32 ] s2 | s2 = bb5 ] ] ]
    | bb12 = s0 [ s0 = [ &_0 <- None'0 ] s1 | s1 = bb13 ]
    | bb10 = s0 [ s0 = [ &_0 <- Some'0 v ] s1 | s1 = bb13 ]
    | bb13 = return {_0} ]
    [ & _0: t_Option_ref_V = Any.any_l ()
    | & self: t_MyHashMap_K_V = self
    | & key: t_K = key
    | & index: UInt64.t = Any.any_l ()
    | & _6: UInt64.t = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & _9: UInt64.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & l: t_List_tup2_K_V = Any.any_l ()
    | & _13: t_List_tup2_K_V = Any.any_l ()
    | & k: t_K = Any.any_l ()
    | & v: t_V = Any.any_l ()
    | & tl: t_List_tup2_K_V = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _32: t_List_tup2_K_V = Any.any_l () ])
    [ return (result: t_Option_ref_V) -> {[@expl:get result type invariant] inv_Option_ref_V result}
      {[@expl:get ensures] match result with
        | Some'0 v -> Map.get (view_MyHashMap_K_V self) (deep_model_K key) = Some v
        | None'0 -> Map.get (view_MyHashMap_K_V self) (deep_model_K key) = None
        end}
      (! return {result}) ]
end
module M_impl_MyHashMap_K_V_0__resize (* MyHashMap<K, V> *)
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use int.EuclideanDivision
  use map.Map
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_List_tup2_K_V_Global
  
  type t_MyHashMap_K_V = { buckets: t_Vec_List_tup2_K_V_Global }
  
  type t_K
  
  type t_V
  
  type tup2_K_V = { f0: t_K; f1: t_V }
  
  type t_List_tup2_K_V = Nil | Cons tup2_K_V t_List_tup2_K_V
  
  predicate inv_K (_1: t_K)
  
  predicate inv_V (_1: t_V)
  
  predicate inv_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = inv_K _1.f0 /\ inv_V _1.f1
  
  meta "rewrite_def" predicate inv_tup2_K_V
  
  predicate inv_List_tup2_K_V (_1: t_List_tup2_K_V)
  
  predicate invariant_Box_List_tup2_K_V_Global (self: t_List_tup2_K_V) = inv_List_tup2_K_V self
  
  predicate inv_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = invariant_Box_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_Box_List_tup2_K_V_Global
  
  axiom inv_axiom [@rewrite]: forall x: t_List_tup2_K_V [inv_List_tup2_K_V x]. inv_List_tup2_K_V x
      = match x with
        | Nil -> true
        | Cons f0'0 f1'0 -> inv_tup2_K_V f0'0 /\ inv_Box_List_tup2_K_V_Global f1'0
        end
  
  predicate invariant_Seq_List_tup2_K_V [@inline:trivial] (self: Seq.seq t_List_tup2_K_V) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_List_tup2_K_V_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_List_tup2_K_V
  
  predicate inv_Seq_List_tup2_K_V [@inline:trivial] (_1: Seq.seq t_List_tup2_K_V) = invariant_Seq_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_Seq_List_tup2_K_V
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) : Seq.seq t_List_tup2_K_V
  
  axiom view_Vec_List_tup2_K_V_Global_spec:
    forall self: t_Vec_List_tup2_K_V_Global. Seq.length (view_Vec_List_tup2_K_V_Global self) <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) =
    inv_Seq_List_tup2_K_V (view_Vec_List_tup2_K_V_Global self)
  
  predicate inv_Vec_List_tup2_K_V_Global (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom inv_axiom'0:
    forall x: t_Vec_List_tup2_K_V_Global [inv_Vec_List_tup2_K_V_Global x]. inv_Vec_List_tup2_K_V_Global x
      -> invariant_Vec_List_tup2_K_V_Global x
  
  predicate invariant_ref_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) =
    inv_Vec_List_tup2_K_V_Global self
  
  meta "rewrite_def" predicate invariant_ref_Vec_List_tup2_K_V_Global
  
  predicate inv_ref_Vec_List_tup2_K_V_Global [@inline:trivial] (_1: t_Vec_List_tup2_K_V_Global) =
    invariant_ref_Vec_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_ref_Vec_List_tup2_K_V_Global
  
  let rec len_List_tup2_K_V (self_: t_Vec_List_tup2_K_V_Global) (return (x: UInt64.t)) =
    {[@expl:len 'self_' type invariant] inv_ref_Vec_List_tup2_K_V_Global self_}
    any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_List_tup2_K_V_Global self_)}
      (! return {result}) ]
  
  type t_DeepModelTy
  
  type t_Option_V = None | Some t_V
  
  function deep_model_K (self: t_K) : t_DeepModelTy
  
  function get_K (self: t_List_tup2_K_V) (index: t_DeepModelTy) : t_Option_V = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_K k = index then Some v else get_K tl index
      end
  
  function hash_log_K (_1: t_DeepModelTy) : int
  
  function bucket_ix_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log_K k) (Seq.length (view_Vec_List_tup2_K_V_Global self.buckets))
  
  predicate good_bucket_K (self: t_MyHashMap_K_V) (l: t_List_tup2_K_V) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get_K l k = Some v -> bucket_ix_K self k = h
  
  function index_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) (ix: int) : t_List_tup2_K_V
   = Seq.get (view_Vec_List_tup2_K_V_Global self) ix
  
  meta "rewrite_def" function index_Vec_List_tup2_K_V_Global
  
  predicate no_double_binding_K (self: t_List_tup2_K_V) =
    match self with
      | Nil -> true
      | Cons {f0 = k} tl -> get_K tl (deep_model_K k) = None /\ no_double_binding_K tl
      end
  
  predicate invariant_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    0 < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
      -> good_bucket_K self (index_Vec_List_tup2_K_V_Global self.buckets i) i
      /\ no_double_binding_K (index_Vec_List_tup2_K_V_Global self.buckets i))
  
  predicate inv_MyHashMap_K_V (_1: t_MyHashMap_K_V)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_MyHashMap_K_V [inv_MyHashMap_K_V x]. inv_MyHashMap_K_V x
      = (invariant_MyHashMap_K_V x /\ inv_Vec_List_tup2_K_V_Global x.buckets)
  
  function bucket_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : t_List_tup2_K_V =
    index_Vec_List_tup2_K_V_Global self.buckets (bucket_ix_K self k)
  
  function view_MyHashMap_K_V (self: t_MyHashMap_K_V) : Map.map t_DeepModelTy t_Option_V =
    fun (k: t_DeepModelTy) -> get_K (bucket_K self k) k
  
  let rec new_K (size: UInt64.t) (return (x: t_MyHashMap_K_V)) = {[@expl:new requires] 0 < UInt64.t'int size}
    any
    [ return (result: t_MyHashMap_K_V) -> {inv_MyHashMap_K_V result}
      {forall i: t_DeepModelTy. Map.get (view_MyHashMap_K_V result) i = None}
      (! return {result}) ]
  
  predicate invariant_ref_MyHashMap_K_V [@inline:trivial] (self: MutBorrow.t t_MyHashMap_K_V) =
    inv_MyHashMap_K_V self.current /\ inv_MyHashMap_K_V self.final
  
  meta "rewrite_def" predicate invariant_ref_MyHashMap_K_V
  
  predicate inv_ref_MyHashMap_K_V [@inline:trivial] (_1: MutBorrow.t t_MyHashMap_K_V) = invariant_ref_MyHashMap_K_V _1
  
  meta "rewrite_def" predicate inv_ref_MyHashMap_K_V
  
  predicate invariant_ref_Vec_List_tup2_K_V_Global'0 [@inline:trivial] (self: MutBorrow.t t_Vec_List_tup2_K_V_Global) =
    inv_Vec_List_tup2_K_V_Global self.current /\ inv_Vec_List_tup2_K_V_Global self.final
  
  meta "rewrite_def" predicate invariant_ref_Vec_List_tup2_K_V_Global'0
  
  predicate inv_ref_Vec_List_tup2_K_V_Global'0 [@inline:trivial] (_1: MutBorrow.t t_Vec_List_tup2_K_V_Global) =
    invariant_ref_Vec_List_tup2_K_V_Global'0 _1
  
  meta "rewrite_def" predicate inv_ref_Vec_List_tup2_K_V_Global'0
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List_tup2_K_V) =
    UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate invariant_ref_List_tup2_K_V [@inline:trivial] (self: MutBorrow.t t_List_tup2_K_V) =
    inv_List_tup2_K_V self.current /\ inv_List_tup2_K_V self.final
  
  meta "rewrite_def" predicate invariant_ref_List_tup2_K_V
  
  predicate inv_ref_List_tup2_K_V [@inline:trivial] (_1: MutBorrow.t t_List_tup2_K_V) = invariant_ref_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_ref_List_tup2_K_V
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_List_tup2_K_V) (out: t_List_tup2_K_V) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  predicate resolve_elswhere_usize [@inline:trivial] (self: UInt64.t) (old': Seq.seq t_List_tup2_K_V) (fin: Seq.seq t_List_tup2_K_V) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere_usize
  
  let rec index_mut_Vec_List_tup2_K_V_Global (self_: MutBorrow.t t_Vec_List_tup2_K_V_Global) (ix: UInt64.t)
    (return (x: MutBorrow.t t_List_tup2_K_V)) =
    {[@expl:index_mut 'self_' type invariant] inv_ref_Vec_List_tup2_K_V_Global'0 self_}
    {[@expl:index_mut requires] in_bounds_usize ix (view_Vec_List_tup2_K_V_Global self_.current)}
    any
    [ return (result: MutBorrow.t t_List_tup2_K_V) -> {inv_ref_List_tup2_K_V result}
      {has_value_usize ix (view_Vec_List_tup2_K_V_Global self_.current) result.current}
      {has_value_usize ix (view_Vec_List_tup2_K_V_Global self_.final) result.final}
      {resolve_elswhere_usize ix (view_Vec_List_tup2_K_V_Global self_.current) (view_Vec_List_tup2_K_V_Global self_.final)}
      {Seq.length (view_Vec_List_tup2_K_V_Global self_.final)
      = Seq.length (view_Vec_List_tup2_K_V_Global self_.current)}
      (! return {result}) ]
  
  let rec replace_List_tup2_K_V (dest: MutBorrow.t t_List_tup2_K_V) (src: t_List_tup2_K_V)
    (return (x: t_List_tup2_K_V)) = {[@expl:replace 'dest' type invariant] inv_ref_List_tup2_K_V dest}
    {[@expl:replace 'src' type invariant] inv_List_tup2_K_V src}
    any
    [ return (result: t_List_tup2_K_V) -> {inv_List_tup2_K_V result}
      {dest.final = src}
      {result = dest.current}
      (! return {result}) ]
  
  predicate resolve_ref_List_tup2_K_V [@inline:trivial] (_1: MutBorrow.t t_List_tup2_K_V) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_List_tup2_K_V
  
  let rec elim_Cons (input: t_List_tup2_K_V) (ret (f0'0: tup2_K_V) (f1'0: t_List_tup2_K_V)) = any
    [ good (f0'0: tup2_K_V) (f1'0: t_List_tup2_K_V) -> {Cons f0'0 f1'0 = input} (! ret {f0'0} {f1'0})
    | bad -> {forall f0'0: tup2_K_V, f1'0: t_List_tup2_K_V [Cons f0'0 f1'0: t_List_tup2_K_V]. Cons f0'0 f1'0 <> input}
      (! {false}
      any) ]
  
  let rec add_K (self: MutBorrow.t t_MyHashMap_K_V) (key: t_K) (val': t_V) (return (x: ())) =
    {[@expl:add 'self' type invariant] inv_ref_MyHashMap_K_V self}
    {[@expl:add 'key' type invariant] inv_K key}
    {[@expl:add 'val' type invariant] inv_V val'}
    any
    [ return (result: ()) -> {forall i: t_DeepModelTy. Map.get (view_MyHashMap_K_V self.final) i
        = (if i = deep_model_K key then Some val' else Map.get (view_MyHashMap_K_V self.current) i)}
      (! return {result}) ]
  
  predicate resolve_V (_1: t_V)
  
  predicate resolve_Option_V (_1: t_Option_V)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Option_V [resolve_Option_V x]. resolve_Option_V x
      = match x with
        | None -> true
        | Some x0 -> resolve_V x0
        end
  
  predicate resolve_List_tup2_K_V (self: t_List_tup2_K_V) = forall k: t_DeepModelTy. resolve_Option_V (get_K self k)
  
  predicate resolve_K (_1: t_K)
  
  predicate resolve_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = resolve_K _1.f0 /\ resolve_V _1.f1
  
  meta "rewrite_def" predicate resolve_tup2_K_V
  
  predicate resolve_List_tup2_K_V'0 (_1: t_List_tup2_K_V)
  
  predicate resolve_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = resolve_List_tup2_K_V'0 _1
  
  meta "rewrite_def" predicate resolve_Box_List_tup2_K_V_Global
  
  axiom resolve_axiom'0 [@rewrite]: forall x: t_List_tup2_K_V [resolve_List_tup2_K_V'0 x]. resolve_List_tup2_K_V'0 x
      = (resolve_List_tup2_K_V x
      /\ match x with
        | Nil -> true
        | Cons x0 x1 -> resolve_tup2_K_V x0 /\ resolve_Box_List_tup2_K_V_Global x1
        end)
  
  predicate resolve_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    forall k: t_DeepModelTy. resolve_Option_V (Map.get (view_MyHashMap_K_V self) k)
  
  predicate resolve_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) =
    forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self)
      -> resolve_List_tup2_K_V'0 (index_Vec_List_tup2_K_V_Global self i)
  
  meta "rewrite_def" predicate resolve_Vec_List_tup2_K_V_Global
  
  predicate resolve_Vec_List_tup2_K_V_Global'0 (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom resolve_axiom'1:
    forall x: t_Vec_List_tup2_K_V_Global [resolve_Vec_List_tup2_K_V_Global'0 x]. resolve_Vec_List_tup2_K_V_Global'0 x
      -> resolve_Vec_List_tup2_K_V_Global x
  
  predicate resolve_MyHashMap_K_V'0 (_1: t_MyHashMap_K_V)
  
  axiom resolve_axiom'2 [@rewrite]: forall x: t_MyHashMap_K_V [resolve_MyHashMap_K_V'0 x]. resolve_MyHashMap_K_V'0 x
      = (resolve_MyHashMap_K_V x /\ resolve_Vec_List_tup2_K_V_Global'0 x.buckets)
  
  predicate resolve_ref_MyHashMap_K_V [@inline:trivial] (_1: MutBorrow.t t_MyHashMap_K_V) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_MyHashMap_K_V
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec resize_K (self: MutBorrow.t t_MyHashMap_K_V) (return (x: ())) =
    {[@expl:resize 'self' type invariant] inv_ref_MyHashMap_K_V self}
    {[@expl:resize requires] Seq.length (view_Vec_List_tup2_K_V_Global self.current.buckets) < 1000}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_self <- self ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = len_List_tup2_K_V {self.current.buckets} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = UInt64.mul {_8} {(2: UInt64.t)} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s1)
      | s1 = new_K {_7} (fun (_ret: t_MyHashMap_K_V) -> [ &new <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &i <- (0: UInt64.t) ] s1 | s1 = [ &old_4_0 <- self ] s2 | s2 = bb4 ]
    | bb4 = bb4
      [ bb4 = {[@expl:mut invariant] old_4_0.final = self.final}
        {[@expl:loop invariant #0] inv_ref_MyHashMap_K_V self}
        {[@expl:loop invariant #1] inv_MyHashMap_K_V new}
        {[@expl:loop invariant #2] forall k'0: t_DeepModelTy. bucket_ix_K old_self.current k'0 < UInt64.t'int i
          -> Map.get (view_MyHashMap_K_V old_self.current) k'0 = Map.get (view_MyHashMap_K_V new) k'0}
        {[@expl:loop invariant #3] forall k'0: t_DeepModelTy. UInt64.t'int i <= bucket_ix_K old_self.current k'0
            /\ bucket_ix_K old_self.current k'0 <= Seq.length (view_Vec_List_tup2_K_V_Global old_self.current.buckets)
          -> Map.get (view_MyHashMap_K_V new) k'0 = None}
        {[@expl:loop invariant #4] forall j: int. UInt64.t'int i <= j
            /\ j < Seq.length (view_Vec_List_tup2_K_V_Global old_self.current.buckets)
          -> index_Vec_List_tup2_K_V_Global self.current.buckets j
          = index_Vec_List_tup2_K_V_Global old_self.current.buckets j}
        {[@expl:loop invariant #5] Seq.length (view_Vec_List_tup2_K_V_Global old_self.current.buckets)
        = Seq.length (view_Vec_List_tup2_K_V_Global self.current.buckets)}
        {[@expl:loop invariant #6] UInt64.t'int i <= Seq.length (view_Vec_List_tup2_K_V_Global self.current.buckets)}
        (! s0)
        [ s0 = bb5 ]
        [ bb5 = s0
          [ s0 = len_List_tup2_K_V {self.current.buckets} (fun (_ret: UInt64.t) -> [ &_23 <- _ret ] s1) | s1 = bb6 ]
        | bb6 = s0
          [ s0 = [ &_21 <- UInt64.lt i _23 ] s1 | s1 = any [ br0 -> {_21 = false} (! bb22) | br1 -> {_21} (! bb7) ] ]
        | bb7 = s0
          [ s0 = {inv_Vec_List_tup2_K_V_Global self.current.buckets}
            MutBorrow.borrow_mut <t_Vec_List_tup2_K_V_Global> {self.current.buckets}
              (fun (_ret: MutBorrow.t t_Vec_List_tup2_K_V_Global) ->
                [ &_29 <- _ret ] -{inv_Vec_List_tup2_K_V_Global _ret.final}-
                [ &self <- { self with current = { buckets = _ret.final } } ] s1)
          | s1 = index_mut_Vec_List_tup2_K_V_Global {_29} {i}
              (fun (_ret: MutBorrow.t t_List_tup2_K_V) -> [ &_28 <- _ret ] s2)
          | s2 = bb8 ]
        | bb8 = s0
          [ s0 = {inv_List_tup2_K_V _28.current}
            MutBorrow.borrow_final <t_List_tup2_K_V> {_28.current} {MutBorrow.get_id _28}
              (fun (_ret: MutBorrow.t t_List_tup2_K_V) ->
                [ &_27 <- _ret ] -{inv_List_tup2_K_V _ret.final}-
                [ &_28 <- { _28 with current = _ret.final } ] s1)
          | s1 = [ &_31 <- Nil ] s2
          | s2 = {inv_List_tup2_K_V _27.current}
            MutBorrow.borrow_final <t_List_tup2_K_V> {_27.current} {MutBorrow.get_id _27}
              (fun (_ret: MutBorrow.t t_List_tup2_K_V) ->
                [ &_26 <- _ret ] -{inv_List_tup2_K_V _ret.final}-
                [ &_27 <- { _27 with current = _ret.final } ] s3)
          | s3 = replace_List_tup2_K_V {_26} {_31} (fun (_ret: t_List_tup2_K_V) -> [ &l <- _ret ] s4)
          | s4 = bb9 ]
        | bb9 = s0
          [ s0 = {[@expl:type invariant] inv_ref_List_tup2_K_V _28} s1
          | s1 = -{resolve_ref_List_tup2_K_V _28}- s2
          | s2 = {[@expl:type invariant] inv_ref_List_tup2_K_V _27} s3
          | s3 = -{resolve_ref_List_tup2_K_V _27}- s4
          | s4 = bb10 ]
        | bb10 = bb10
          [ bb10 = {[@expl:loop invariant #0] inv_MyHashMap_K_V new}
            {[@expl:loop invariant #1] inv_List_tup2_K_V l}
            {[@expl:loop invariant #2] forall k'0: t_DeepModelTy. bucket_ix_K old_self.current k'0 < UInt64.t'int i
              -> Map.get (view_MyHashMap_K_V old_self.current) k'0 = Map.get (view_MyHashMap_K_V new) k'0}
            {[@expl:loop invariant #3] forall k'0: t_DeepModelTy. UInt64.t'int i < bucket_ix_K old_self.current k'0
                /\ bucket_ix_K old_self.current k'0
                <= Seq.length (view_Vec_List_tup2_K_V_Global old_self.current.buckets)
              -> Map.get (view_MyHashMap_K_V new) k'0 = None}
            {[@expl:loop invariant #4] forall k'0: t_DeepModelTy. bucket_ix_K old_self.current k'0 = UInt64.t'int i
              -> Map.get (view_MyHashMap_K_V old_self.current) k'0
              = match get_K l k'0 with
                | None -> Map.get (view_MyHashMap_K_V new) k'0
                | Some v'0 -> Some v'0
                end}
            {[@expl:loop invariant #5] no_double_binding_K l}
            {[@expl:loop invariant #6] good_bucket_K old_self.current l (UInt64.t'int i)}
            (! s0)
            [ s0 = bb11 ]
            [ bb11 = any
              [ br0 -> {l = Nil} (! bb18) | br1 (x0: tup2_K_V) (x1: t_List_tup2_K_V) -> {l = Cons x0 x1} (! bb13) ]
            | bb13 = s0
              [ s0 = elim_Cons {l} (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) -> [ &k <- r0.f0 ] s1)
              | s1 = elim_Cons {l} (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) -> [ &v <- r0.f1 ] s2)
              | s2 = elim_Cons {l} (fun (r0: tup2_K_V) (r1: t_List_tup2_K_V) -> [ &tl <- r1 ] s3)
              | s3 = {inv_MyHashMap_K_V new}
                MutBorrow.borrow_mut <t_MyHashMap_K_V> {new}
                  (fun (_ret: MutBorrow.t t_MyHashMap_K_V) ->
                    [ &_46 <- _ret ] -{inv_MyHashMap_K_V _ret.final}-
                    [ &new <- _ret.final ] s4)
              | s4 = add_K {_46} {k} {v} (fun (_ret: ()) -> [ &_45 <- _ret ] s5)
              | s5 = bb15 ]
            | bb15 = s0 [ s0 = [ &l <- tl ] s1 | s1 = bb10 ] ] ]
        | bb18 = s0
          [ s0 = {[@expl:type invariant] inv_List_tup2_K_V l} s1
          | s1 = -{resolve_List_tup2_K_V'0 l}- s2
          | s2 = {[@expl:assertion] forall k'0: t_DeepModelTy. bucket_ix_K old_self.current k'0 = UInt64.t'int i
              -> Map.get (view_MyHashMap_K_V old_self.current) k'0 = Map.get (view_MyHashMap_K_V new) k'0}
            s3
          | s3 = UInt64.add {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s4)
          | s4 = bb4 ] ] ]
    | bb22 = s0
      [ s0 = {[@expl:type invariant] inv_MyHashMap_K_V self.current} s1
      | s1 = -{resolve_MyHashMap_K_V'0 self.current}- s2
      | s2 = [ &self <- { self with current = new } ] s3
      | s3 = {[@expl:type invariant] inv_ref_MyHashMap_K_V self} s4
      | s4 = -{resolve_ref_MyHashMap_K_V self}- s5
      | s5 = bb25 ]
    | bb25 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_MyHashMap_K_V = self
    | & old_self: MutBorrow.t t_MyHashMap_K_V = Any.any_l ()
    | & new: t_MyHashMap_K_V = Any.any_l ()
    | & _7: UInt64.t = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & _23: UInt64.t = Any.any_l ()
    | & l: t_List_tup2_K_V = Any.any_l ()
    | & _26: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _27: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _28: MutBorrow.t t_List_tup2_K_V = Any.any_l ()
    | & _29: MutBorrow.t t_Vec_List_tup2_K_V_Global = Any.any_l ()
    | & _31: t_List_tup2_K_V = Any.any_l ()
    | & k: t_K = Any.any_l ()
    | & v: t_V = Any.any_l ()
    | & tl: t_List_tup2_K_V = Any.any_l ()
    | & _45: () = Any.any_l ()
    | & _46: MutBorrow.t t_MyHashMap_K_V = Any.any_l ()
    | & old_4_0: MutBorrow.t t_MyHashMap_K_V = Any.any_l () ])
    [ return (result: ()) -> {[@expl:resize ensures] forall k: t_DeepModelTy. Map.get (view_MyHashMap_K_V self.final) k
        = Map.get (view_MyHashMap_K_V self.current) k}
      (! return {result}) ]
end
module M_main
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use creusot.int.Int64
  use int.EuclideanDivision
  use map.Map
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_List_tup2_usize_isize_Global
  
  type t_MyHashMap_usize_isize = { buckets: t_Vec_List_tup2_usize_isize_Global }
  
  type tup2_usize_isize = { f0: UInt64.t; f1: Int64.t }
  
  type t_List_tup2_usize_isize = Nil | Cons tup2_usize_isize t_List_tup2_usize_isize
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_List_tup2_usize_isize_Global (self: t_Vec_List_tup2_usize_isize_Global) : Seq.seq t_List_tup2_usize_isize
  
  axiom view_Vec_List_tup2_usize_isize_Global_spec:
    forall self: t_Vec_List_tup2_usize_isize_Global. Seq.length (view_Vec_List_tup2_usize_isize_Global self)
      <= UInt64.t'int const_MAX
  
  type t_Option_isize = None | Some Int64.t
  
  function deep_model_usize [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model_usize
  
  function get_usize (self: t_List_tup2_usize_isize) (index: int) : t_Option_isize = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_usize k = index then Some v else get_usize tl index
      end
  
  function hash_log_usize (x: int) : int = x
  
  function bucket_ix_usize (self: t_MyHashMap_usize_isize) (k: int) : int =
    EuclideanDivision.mod (hash_log_usize k) (Seq.length (view_Vec_List_tup2_usize_isize_Global self.buckets))
  
  predicate good_bucket_usize (self: t_MyHashMap_usize_isize) (l: t_List_tup2_usize_isize) (h: int) =
    forall k: int, v: Int64.t. get_usize l k = Some v -> bucket_ix_usize self k = h
  
  function index_Vec_List_tup2_usize_isize_Global [@inline:trivial] (self: t_Vec_List_tup2_usize_isize_Global) (ix: int) : t_List_tup2_usize_isize
   = Seq.get (view_Vec_List_tup2_usize_isize_Global self) ix
  
  meta "rewrite_def" function index_Vec_List_tup2_usize_isize_Global
  
  predicate no_double_binding_usize (self: t_List_tup2_usize_isize) =
    match self with
      | Nil -> true
      | Cons {f0 = k} tl -> get_usize tl (deep_model_usize k) = None /\ no_double_binding_usize tl
      end
  
  predicate invariant_MyHashMap_usize_isize (self: t_MyHashMap_usize_isize) =
    0 < Seq.length (view_Vec_List_tup2_usize_isize_Global self.buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_usize_isize_Global self.buckets)
      -> good_bucket_usize self (index_Vec_List_tup2_usize_isize_Global self.buckets i) i
      /\ no_double_binding_usize (index_Vec_List_tup2_usize_isize_Global self.buckets i))
  
  predicate inv_MyHashMap_usize_isize (_1: t_MyHashMap_usize_isize)
  
  axiom inv_axiom [@rewrite]:
    forall x: t_MyHashMap_usize_isize [inv_MyHashMap_usize_isize x]. inv_MyHashMap_usize_isize x
      = invariant_MyHashMap_usize_isize x
  
  function bucket_usize (self: t_MyHashMap_usize_isize) (k: int) : t_List_tup2_usize_isize =
    index_Vec_List_tup2_usize_isize_Global self.buckets (bucket_ix_usize self k)
  
  function view_MyHashMap_usize_isize (self: t_MyHashMap_usize_isize) : Map.map int t_Option_isize =
    fun (k: int) -> get_usize (bucket_usize self k) k
  
  let rec new_usize (size: UInt64.t) (return (x: t_MyHashMap_usize_isize)) = {[@expl:new requires] 0
    < UInt64.t'int size}
    any
    [ return (result: t_MyHashMap_usize_isize) -> {inv_MyHashMap_usize_isize result}
      {forall i: int. Map.get (view_MyHashMap_usize_isize result) i = None}
      (! return {result}) ]
  
  type t_Option_ref_isize = None'0 | Some'0 Int64.t
  
  predicate invariant_ref_MyHashMap_usize_isize [@inline:trivial] (self: t_MyHashMap_usize_isize) =
    inv_MyHashMap_usize_isize self
  
  meta "rewrite_def" predicate invariant_ref_MyHashMap_usize_isize
  
  predicate inv_ref_MyHashMap_usize_isize [@inline:trivial] (_1: t_MyHashMap_usize_isize) =
    invariant_ref_MyHashMap_usize_isize _1
  
  meta "rewrite_def" predicate inv_ref_MyHashMap_usize_isize
  
  let rec get_usize'0 (self: t_MyHashMap_usize_isize) (key: UInt64.t) (return (x: t_Option_ref_isize)) =
    {[@expl:get 'self' type invariant] inv_ref_MyHashMap_usize_isize self}
    any
    [ return (result: t_Option_ref_isize) -> {match result with
        | Some'0 v -> Map.get (view_MyHashMap_usize_isize self) (deep_model_usize key) = Some v
        | None'0 -> Map.get (view_MyHashMap_usize_isize self) (deep_model_usize key) = None
        end}
      (! return {result}) ]
  
  predicate invariant_ref_MyHashMap_usize_isize'0 [@inline:trivial] (self: MutBorrow.t t_MyHashMap_usize_isize) =
    inv_MyHashMap_usize_isize self.current /\ inv_MyHashMap_usize_isize self.final
  
  meta "rewrite_def" predicate invariant_ref_MyHashMap_usize_isize'0
  
  predicate inv_ref_MyHashMap_usize_isize'0 [@inline:trivial] (_1: MutBorrow.t t_MyHashMap_usize_isize) =
    invariant_ref_MyHashMap_usize_isize'0 _1
  
  meta "rewrite_def" predicate inv_ref_MyHashMap_usize_isize'0
  
  let rec add_usize (self: MutBorrow.t t_MyHashMap_usize_isize) (key: UInt64.t) (val': Int64.t) (return (x: ())) =
    {[@expl:add 'self' type invariant] inv_ref_MyHashMap_usize_isize'0 self}
    any
    [ return (result: ()) -> {forall i: int. Map.get (view_MyHashMap_usize_isize self.final) i
        = (if i = deep_model_usize key then Some val' else Map.get (view_MyHashMap_usize_isize self.current) i)}
      (! return {result}) ]
  
  predicate resolve_Option_isize [@inline:trivial] (_1: t_Option_isize) = true
  
  meta "rewrite_def" predicate resolve_Option_isize
  
  predicate resolve_MyHashMap_usize_isize (self: t_MyHashMap_usize_isize) =
    forall k: int. resolve_Option_isize (Map.get (view_MyHashMap_usize_isize self) k)
  
  predicate resolve_List_tup2_usize_isize (self: t_List_tup2_usize_isize) =
    forall k: int. resolve_Option_isize (get_usize self k)
  
  predicate resolve_List_tup2_usize_isize'0 (_1: t_List_tup2_usize_isize)
  
  predicate resolve_Box_List_tup2_usize_isize_Global [@inline:trivial] (_1: t_List_tup2_usize_isize) =
    resolve_List_tup2_usize_isize'0 _1
  
  meta "rewrite_def" predicate resolve_Box_List_tup2_usize_isize_Global
  
  axiom resolve_axiom [@rewrite]:
    forall x: t_List_tup2_usize_isize [resolve_List_tup2_usize_isize'0 x]. resolve_List_tup2_usize_isize'0 x
      = (resolve_List_tup2_usize_isize x
      /\ match x with
        | Nil -> true
        | Cons x0 x1 -> resolve_Box_List_tup2_usize_isize_Global x1
        end)
  
  predicate resolve_Vec_List_tup2_usize_isize_Global [@inline:trivial] (self: t_Vec_List_tup2_usize_isize_Global) =
    forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_usize_isize_Global self)
      -> resolve_List_tup2_usize_isize'0 (index_Vec_List_tup2_usize_isize_Global self i)
  
  meta "rewrite_def" predicate resolve_Vec_List_tup2_usize_isize_Global
  
  predicate resolve_Vec_List_tup2_usize_isize_Global'0 (_1: t_Vec_List_tup2_usize_isize_Global)
  
  axiom resolve_axiom'0:
    forall x: t_Vec_List_tup2_usize_isize_Global [resolve_Vec_List_tup2_usize_isize_Global'0 x]. resolve_Vec_List_tup2_usize_isize_Global'0 x
      -> resolve_Vec_List_tup2_usize_isize_Global x
  
  predicate resolve_MyHashMap_usize_isize'0 (_1: t_MyHashMap_usize_isize)
  
  axiom resolve_axiom'1 [@rewrite]:
    forall x: t_MyHashMap_usize_isize [resolve_MyHashMap_usize_isize'0 x]. resolve_MyHashMap_usize_isize'0 x
      = (resolve_MyHashMap_usize_isize x /\ resolve_Vec_List_tup2_usize_isize_Global'0 x.buckets)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec main (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = new_usize {(17: UInt64.t)} (fun (_ret: t_MyHashMap_usize_isize) -> [ &h1 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = new_usize {(42: UInt64.t)} (fun (_ret: t_MyHashMap_usize_isize) -> [ &h2 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = get_usize'0 {h1} {(1: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_x <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = get_usize'0 {h1} {(2: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_y <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = get_usize'0 {h2} {(1: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_z <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = get_usize'0 {h2} {(2: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_t <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0
      [ s0 = {inv_MyHashMap_usize_isize h1}
        MutBorrow.borrow_mut <t_MyHashMap_usize_isize> {h1}
          (fun (_ret: MutBorrow.t t_MyHashMap_usize_isize) ->
            [ &_12 <- _ret ] -{inv_MyHashMap_usize_isize _ret.final}-
            [ &h1 <- _ret.final ] s1)
      | s1 = add_usize {_12} {(1: UInt64.t)} {(17: Int64.t)} (fun (_ret: ()) -> [ &_11 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = get_usize'0 {h1} {(1: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_13 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0
      [ s0 = [ &_x <- _13 ] s1
      | s1 = get_usize'0 {h1} {(2: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_15 <- _ret ] s2)
      | s2 = bb9 ]
    | bb9 = s0
      [ s0 = [ &_y <- _15 ] s1
      | s1 = get_usize'0 {h2} {(1: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_17 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = s0
      [ s0 = [ &_z <- _17 ] s1
      | s1 = get_usize'0 {h2} {(2: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_19 <- _ret ] s2)
      | s2 = bb11 ]
    | bb11 = s0
      [ s0 = [ &_t <- _19 ] s1
      | s1 = {inv_MyHashMap_usize_isize h2}
        MutBorrow.borrow_mut <t_MyHashMap_usize_isize> {h2}
          (fun (_ret: MutBorrow.t t_MyHashMap_usize_isize) ->
            [ &_22 <- _ret ] -{inv_MyHashMap_usize_isize _ret.final}-
            [ &h2 <- _ret.final ] s2)
      | s2 = add_usize {_22} {(1: UInt64.t)} {(42: Int64.t)} (fun (_ret: ()) -> [ &_21 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = s0
      [ s0 = get_usize'0 {h1} {(1: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_23 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0
      [ s0 = [ &_x <- _23 ] s1
      | s1 = {[@expl:type invariant] inv_MyHashMap_usize_isize h1} s2
      | s2 = -{resolve_MyHashMap_usize_isize'0 h1}- s3
      | s3 = get_usize'0 {h1} {(2: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_25 <- _ret ] s4)
      | s4 = bb14 ]
    | bb14 = s0
      [ s0 = [ &_y <- _25 ] s1
      | s1 = get_usize'0 {h2} {(1: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_27 <- _ret ] s2)
      | s2 = bb15 ]
    | bb15 = s0
      [ s0 = [ &_z <- _27 ] s1
      | s1 = {[@expl:type invariant] inv_MyHashMap_usize_isize h2} s2
      | s2 = -{resolve_MyHashMap_usize_isize'0 h2}- s3
      | s3 = get_usize'0 {h2} {(2: UInt64.t)} (fun (_ret: t_Option_ref_isize) -> [ &_29 <- _ret ] s4)
      | s4 = bb16 ]
    | bb16 = s0 [ s0 = [ &_t <- _29 ] s1 | s1 = bb18 ]
    | bb18 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & h1: t_MyHashMap_usize_isize = Any.any_l ()
    | & h2: t_MyHashMap_usize_isize = Any.any_l ()
    | & _x: t_Option_ref_isize = Any.any_l ()
    | & _y: t_Option_ref_isize = Any.any_l ()
    | & _z: t_Option_ref_isize = Any.any_l ()
    | & _t: t_Option_ref_isize = Any.any_l ()
    | & _11: () = Any.any_l ()
    | & _12: MutBorrow.t t_MyHashMap_usize_isize = Any.any_l ()
    | & _13: t_Option_ref_isize = Any.any_l ()
    | & _15: t_Option_ref_isize = Any.any_l ()
    | & _17: t_Option_ref_isize = Any.any_l ()
    | & _19: t_Option_ref_isize = Any.any_l ()
    | & _21: () = Any.any_l ()
    | & _22: MutBorrow.t t_MyHashMap_usize_isize = Any.any_l ()
    | & _23: t_Option_ref_isize = Any.any_l ()
    | & _25: t_Option_ref_isize = Any.any_l ()
    | & _27: t_Option_ref_isize = Any.any_l ()
    | & _29: t_Option_ref_isize = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_impl_Clone_for_List_T__clone__refines (* <List<T> as std::clone::Clone> *)
  type t_T
  
  type t_List_T = Nil | Cons t_T t_List_T
  
  predicate inv_T (_1: t_T)
  
  predicate inv_List_T (_1: t_List_T)
  
  predicate invariant_Box_List_T_Global (self: t_List_T) = inv_List_T self
  
  predicate inv_Box_List_T_Global [@inline:trivial] (_1: t_List_T) = invariant_Box_List_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_List_T_Global
  
  axiom inv_axiom [@rewrite]: forall x: t_List_T [inv_List_T x]. inv_List_T x
      = match x with
        | Nil -> true
        | Cons f0 f1 -> inv_T f0 /\ inv_Box_List_T_Global f1
        end
  
  predicate invariant_ref_List_T [@inline:trivial] (self: t_List_T) = inv_List_T self
  
  meta "rewrite_def" predicate invariant_ref_List_T
  
  predicate inv_ref_List_T [@inline:trivial] (_1: t_List_T) = invariant_ref_List_T _1
  
  meta "rewrite_def" predicate inv_ref_List_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self_: t_List_T. inv_ref_List_T self_
      -> inv_ref_List_T self_ /\ (forall result: t_List_T. result = self_ /\ inv_List_T result -> inv_List_T result)
end
module M_impl_Resolve_for_List_tup2_K_V__resolve_coherence__refines (* <List<(K, V)> as creusot_contracts::resolve::Resolve> *)
  type t_K
  
  type t_V
  
  type tup2_K_V = { f0: t_K; f1: t_V }
  
  type t_List_tup2_K_V = Nil | Cons tup2_K_V t_List_tup2_K_V
  
  predicate resolve_K (_1: t_K)
  
  predicate resolve_V (_1: t_V)
  
  predicate resolve_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = resolve_K _1.f0 /\ resolve_V _1.f1
  
  meta "rewrite_def" predicate resolve_tup2_K_V
  
  type t_Option_V = None | Some t_V
  
  predicate resolve_Option_V (_1: t_Option_V)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Option_V [resolve_Option_V x]. resolve_Option_V x
      = match x with
        | None -> true
        | Some x0 -> resolve_V x0
        end
  
  type t_DeepModelTy
  
  function deep_model_K (self: t_K) : t_DeepModelTy
  
  function get_K (self: t_List_tup2_K_V) (index: t_DeepModelTy) : t_Option_V = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_K k = index then Some v else get_K tl index
      end
  
  predicate resolve_List_tup2_K_V (self: t_List_tup2_K_V) = forall k: t_DeepModelTy. resolve_Option_V (get_K self k)
  
  predicate resolve_List_tup2_K_V'0 (_1: t_List_tup2_K_V)
  
  predicate resolve_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = resolve_List_tup2_K_V'0 _1
  
  meta "rewrite_def" predicate resolve_Box_List_tup2_K_V_Global
  
  axiom resolve_axiom'0 [@rewrite]: forall x: t_List_tup2_K_V [resolve_List_tup2_K_V'0 x]. resolve_List_tup2_K_V'0 x
      = (resolve_List_tup2_K_V x
      /\ match x with
        | Nil -> true
        | Cons x0 x1 -> resolve_tup2_K_V x0 /\ resolve_Box_List_tup2_K_V_Global x1
        end)
  
  predicate structural_resolve_List_tup2_K_V (_1: t_List_tup2_K_V) =
    match _1 with
      | Nil -> true
      | Cons x0 x1 -> resolve_tup2_K_V x0 /\ resolve_Box_List_tup2_K_V_Global x1
      end
  
  predicate inv_K (_1: t_K)
  
  predicate inv_V (_1: t_V)
  
  predicate inv_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = inv_K _1.f0 /\ inv_V _1.f1
  
  meta "rewrite_def" predicate inv_tup2_K_V
  
  predicate inv_List_tup2_K_V (_1: t_List_tup2_K_V)
  
  predicate invariant_Box_List_tup2_K_V_Global (self: t_List_tup2_K_V) = inv_List_tup2_K_V self
  
  predicate inv_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = invariant_Box_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_Box_List_tup2_K_V_Global
  
  axiom inv_axiom [@rewrite]: forall x: t_List_tup2_K_V [inv_List_tup2_K_V x]. inv_List_tup2_K_V x
      = match x with
        | Nil -> true
        | Cons f0'0 f1'0 -> inv_tup2_K_V f0'0 /\ inv_Box_List_tup2_K_V_Global f1'0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_List_tup2_K_V. structural_resolve_List_tup2_K_V self /\ inv_List_tup2_K_V self
      -> structural_resolve_List_tup2_K_V self
      /\ (forall result: (). resolve_List_tup2_K_V self -> resolve_List_tup2_K_V self)
end
module M_impl_Resolve_for_MyHashMap_K_V__resolve_coherence__refines (* <MyHashMap<K, V> as creusot_contracts::resolve::Resolve> *)
  use mach.int.Int
  use seq.Seq
  use creusot.int.UInt64
  use int.EuclideanDivision
  use map.Map
  
  type t_Vec_List_tup2_K_V_Global
  
  type t_MyHashMap_K_V = { buckets: t_Vec_List_tup2_K_V_Global }
  
  type t_K
  
  type t_V
  
  type tup2_K_V = { f0: t_K; f1: t_V }
  
  type t_List_tup2_K_V = Nil | Cons tup2_K_V t_List_tup2_K_V
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) : Seq.seq t_List_tup2_K_V
  
  axiom view_Vec_List_tup2_K_V_Global_spec:
    forall self: t_Vec_List_tup2_K_V_Global. Seq.length (view_Vec_List_tup2_K_V_Global self) <= UInt64.t'int const_MAX
  
  type t_Option_V = None | Some t_V
  
  predicate resolve_V (_1: t_V)
  
  predicate resolve_Option_V (_1: t_Option_V)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Option_V [resolve_Option_V x]. resolve_Option_V x
      = match x with
        | None -> true
        | Some x0 -> resolve_V x0
        end
  
  type t_DeepModelTy
  
  function deep_model_K (self: t_K) : t_DeepModelTy
  
  function get_K (self: t_List_tup2_K_V) (index: t_DeepModelTy) : t_Option_V = match self with
      | Nil -> None
      | Cons {f0 = k; f1 = v} tl -> if deep_model_K k = index then Some v else get_K tl index
      end
  
  predicate resolve_List_tup2_K_V (self: t_List_tup2_K_V) = forall k: t_DeepModelTy. resolve_Option_V (get_K self k)
  
  predicate resolve_K (_1: t_K)
  
  predicate resolve_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = resolve_K _1.f0 /\ resolve_V _1.f1
  
  meta "rewrite_def" predicate resolve_tup2_K_V
  
  predicate resolve_List_tup2_K_V'0 (_1: t_List_tup2_K_V)
  
  predicate resolve_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = resolve_List_tup2_K_V'0 _1
  
  meta "rewrite_def" predicate resolve_Box_List_tup2_K_V_Global
  
  axiom resolve_axiom'0 [@rewrite]: forall x: t_List_tup2_K_V [resolve_List_tup2_K_V'0 x]. resolve_List_tup2_K_V'0 x
      = (resolve_List_tup2_K_V x
      /\ match x with
        | Nil -> true
        | Cons x0 x1 -> resolve_tup2_K_V x0 /\ resolve_Box_List_tup2_K_V_Global x1
        end)
  
  function index_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) (ix: int) : t_List_tup2_K_V
   = Seq.get (view_Vec_List_tup2_K_V_Global self) ix
  
  meta "rewrite_def" function index_Vec_List_tup2_K_V_Global
  
  predicate resolve_Vec_List_tup2_K_V_Global [@inline:trivial] (self: t_Vec_List_tup2_K_V_Global) =
    forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self)
      -> resolve_List_tup2_K_V'0 (index_Vec_List_tup2_K_V_Global self i)
  
  meta "rewrite_def" predicate resolve_Vec_List_tup2_K_V_Global
  
  predicate resolve_Vec_List_tup2_K_V_Global'0 (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom resolve_axiom'1:
    forall x: t_Vec_List_tup2_K_V_Global [resolve_Vec_List_tup2_K_V_Global'0 x]. resolve_Vec_List_tup2_K_V_Global'0 x
      -> resolve_Vec_List_tup2_K_V_Global x
  
  predicate structural_resolve_MyHashMap_K_V (_1: t_MyHashMap_K_V) = resolve_Vec_List_tup2_K_V_Global'0 _1.buckets
  
  function hash_log_K (_1: t_DeepModelTy) : int
  
  function bucket_ix_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : int =
    EuclideanDivision.mod (hash_log_K k) (Seq.length (view_Vec_List_tup2_K_V_Global self.buckets))
  
  predicate good_bucket_K (self: t_MyHashMap_K_V) (l: t_List_tup2_K_V) (h: int) =
    forall k: t_DeepModelTy, v: t_V. get_K l k = Some v -> bucket_ix_K self k = h
  
  predicate no_double_binding_K (self: t_List_tup2_K_V) =
    match self with
      | Nil -> true
      | Cons {f0 = k} tl -> get_K tl (deep_model_K k) = None /\ no_double_binding_K tl
      end
  
  predicate invariant_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    0 < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
    /\ (forall i: int. 0 <= i /\ i < Seq.length (view_Vec_List_tup2_K_V_Global self.buckets)
      -> good_bucket_K self (index_Vec_List_tup2_K_V_Global self.buckets i) i
      /\ no_double_binding_K (index_Vec_List_tup2_K_V_Global self.buckets i))
  
  predicate inv_K (_1: t_K)
  
  predicate inv_V (_1: t_V)
  
  predicate inv_tup2_K_V [@inline:trivial] (_1: tup2_K_V) = inv_K _1.f0 /\ inv_V _1.f1
  
  meta "rewrite_def" predicate inv_tup2_K_V
  
  predicate inv_List_tup2_K_V (_1: t_List_tup2_K_V)
  
  predicate invariant_Box_List_tup2_K_V_Global (self: t_List_tup2_K_V) = inv_List_tup2_K_V self
  
  predicate inv_Box_List_tup2_K_V_Global [@inline:trivial] (_1: t_List_tup2_K_V) = invariant_Box_List_tup2_K_V_Global _1
  
  meta "rewrite_def" predicate inv_Box_List_tup2_K_V_Global
  
  axiom inv_axiom [@rewrite]: forall x: t_List_tup2_K_V [inv_List_tup2_K_V x]. inv_List_tup2_K_V x
      = match x with
        | Nil -> true
        | Cons f0'0 f1'0 -> inv_tup2_K_V f0'0 /\ inv_Box_List_tup2_K_V_Global f1'0
        end
  
  predicate invariant_Seq_List_tup2_K_V [@inline:trivial] (self: Seq.seq t_List_tup2_K_V) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_List_tup2_K_V_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_List_tup2_K_V
  
  predicate inv_Seq_List_tup2_K_V [@inline:trivial] (_1: Seq.seq t_List_tup2_K_V) = invariant_Seq_List_tup2_K_V _1
  
  meta "rewrite_def" predicate inv_Seq_List_tup2_K_V
  
  predicate invariant_Vec_List_tup2_K_V_Global (self: t_Vec_List_tup2_K_V_Global) =
    inv_Seq_List_tup2_K_V (view_Vec_List_tup2_K_V_Global self)
  
  predicate inv_Vec_List_tup2_K_V_Global (_1: t_Vec_List_tup2_K_V_Global)
  
  axiom inv_axiom'0:
    forall x: t_Vec_List_tup2_K_V_Global [inv_Vec_List_tup2_K_V_Global x]. inv_Vec_List_tup2_K_V_Global x
      -> invariant_Vec_List_tup2_K_V_Global x
  
  predicate inv_MyHashMap_K_V (_1: t_MyHashMap_K_V)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_MyHashMap_K_V [inv_MyHashMap_K_V x]. inv_MyHashMap_K_V x
      = (invariant_MyHashMap_K_V x /\ inv_Vec_List_tup2_K_V_Global x.buckets)
  
  function bucket_K (self: t_MyHashMap_K_V) (k: t_DeepModelTy) : t_List_tup2_K_V =
    index_Vec_List_tup2_K_V_Global self.buckets (bucket_ix_K self k)
  
  function view_MyHashMap_K_V (self: t_MyHashMap_K_V) : Map.map t_DeepModelTy t_Option_V =
    fun (k: t_DeepModelTy) -> get_K (bucket_K self k) k
  
  predicate resolve_MyHashMap_K_V (self: t_MyHashMap_K_V) =
    forall k: t_DeepModelTy. resolve_Option_V (Map.get (view_MyHashMap_K_V self) k)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_MyHashMap_K_V. structural_resolve_MyHashMap_K_V self /\ inv_MyHashMap_K_V self
      -> structural_resolve_MyHashMap_K_V self
      /\ inv_MyHashMap_K_V self /\ (forall result: (). resolve_MyHashMap_K_V self -> resolve_MyHashMap_K_V self)
end
module M_impl_Hash_for_usize__hash__refines (* <usize as Hash> *)
  use creusot.int.UInt64
  
  function hash_log_usize (x: int) : int = x
  
  function deep_model_usize [@inline:trivial] (self: UInt64.t) : int = UInt64.t'int self
  
  meta "rewrite_def" function deep_model_usize
  
  function deep_model_ref_usize [@inline:trivial] (self: UInt64.t) : int = deep_model_usize self
  
  meta "rewrite_def" function deep_model_ref_usize
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: UInt64.t. forall result: UInt64.t. UInt64.t'int result
          = hash_log_usize (deep_model_ref_usize self)
        -> UInt64.t'int result = hash_log_usize (deep_model_ref_usize self)
end
