module M_result__test_result [#"result.rs" 3 0 3 20]
  let%span sresult = "result.rs" 4 38 4 39
  let%span sresult'0 = "result.rs" 5 40 5 42
  let%span sresult'1 = "result.rs" 8 12 8 38
  let%span sresult'2 = "result.rs" 10 12 10 40
  let%span sresult'3 = "result.rs" 13 32 13 33
  let%span sresult'4 = "result.rs" 17 34 17 36
  let%span sresult'5 = "result.rs" 20 37 20 38
  let%span sresult'6 = "result.rs" 21 42 21 44
  let%span sresult'7 = "result.rs" 23 28 23 29
  let%span sresult'8 = "result.rs" 24 27 24 28
  let%span sresult'9 = "result.rs" 25 28 25 29
  let%span sresult'10 = "result.rs" 26 27 26 28
  let%span sresult'11 = "result.rs" 27 33 27 34
  let%span sresult'12 = "result.rs" 28 32 28 33
  let%span sresult'13 = "result.rs" 29 33 29 35
  let%span sresult'14 = "result.rs" 30 32 30 34
  let%span sresult'15 = "result.rs" 33 27 33 28
  let%span sresult'16 = "result.rs" 37 32 37 34
  let%span sresult'17 = "result.rs" 40 25 40 26
  let%span sresult'18 = "result.rs" 40 31 40 32
  let%span sresult'19 = "result.rs" 41 26 41 27
  let%span sresult'20 = "result.rs" 41 32 41 33
  let%span sresult'21 = "result.rs" 43 38 43 39
  let%span sresult'22 = "result.rs" 44 39 44 40
  let%span sresult'23 = "result.rs" 47 30 47 32
  let%span sresult'24 = "result.rs" 47 51 47 53
  let%span sresult'25 = "result.rs" 48 22 48 23
  let%span sresult'26 = "result.rs" 48 38 48 39
  let%span sresult'27 = "result.rs" 49 31 49 33
  let%span sresult'28 = "result.rs" 49 52 49 54
  let%span sresult'29 = "result.rs" 50 23 50 24
  let%span sresult'30 = "result.rs" 50 43 50 45
  let%span sresult'31 = "result.rs" 53 22 53 24
  let%span sresult'32 = "result.rs" 53 39 53 40
  let%span sresult'33 = "result.rs" 54 28 54 29
  let%span sresult'34 = "result.rs" 54 44 54 45
  let%span sresult'35 = "result.rs" 55 23 55 25
  let%span sresult'36 = "result.rs" 55 44 55 46
  let%span sresult'37 = "result.rs" 56 29 56 30
  let%span sresult'38 = "result.rs" 56 45 56 46
  let%span sresult'39 = "result.rs" 59 45 59 46
  let%span sresult'40 = "result.rs" 60 51 60 53
  let%span sresult'41 = "result.rs" 61 45 61 46
  let%span sresult'42 = "result.rs" 62 51 62 53
  let%span sresult'43 = "result.rs" 64 45 64 46
  let%span sresult'44 = "result.rs" 65 51 65 53
  let%span sresult'45 = "result.rs" 66 45 66 46
  let%span sresult'46 = "result.rs" 67 51 67 53
  let%span sresult'47 = "result.rs" 72 48 72 49
  let%span sresult'48 = "result.rs" 73 49 73 50
  let%span sresult'49 = "result.rs" 74 44 74 46
  let%span sresult'50 = "result.rs" 75 53 75 55
  let%span sresult'51 = "result.rs" 75 12 75 55
  let%span sresult'52 = "result.rs" 73 12 73 50
  let%span sresult'53 = "result.rs" 71 12 71 37
  let%span sresult'54 = "result.rs" 67 12 67 53
  let%span sresult'55 = "result.rs" 66 12 66 46
  let%span sresult'56 = "result.rs" 65 12 65 53
  let%span sresult'57 = "result.rs" 64 12 64 46
  let%span sresult'58 = "result.rs" 62 12 62 53
  let%span sresult'59 = "result.rs" 61 12 61 46
  let%span sresult'60 = "result.rs" 60 12 60 53
  let%span sresult'61 = "result.rs" 59 12 59 46
  let%span sresult'62 = "result.rs" 56 12 56 46
  let%span sresult'63 = "result.rs" 55 12 55 46
  let%span sresult'64 = "result.rs" 54 12 54 45
  let%span sresult'65 = "result.rs" 53 12 53 40
  let%span sresult'66 = "result.rs" 50 12 50 45
  let%span sresult'67 = "result.rs" 49 12 49 54
  let%span sresult'68 = "result.rs" 48 12 48 39
  let%span sresult'69 = "result.rs" 47 12 47 53
  let%span sresult'70 = "result.rs" 44 12 44 40
  let%span sresult'71 = "result.rs" 43 12 43 39
  let%span sresult'72 = "result.rs" 41 12 41 33
  let%span sresult'73 = "result.rs" 40 12 40 32
  let%span sresult'74 = "result.rs" 37 12 37 34
  let%span sresult'75 = "result.rs" 33 12 33 28
  let%span sresult'76 = "result.rs" 30 12 30 34
  let%span sresult'77 = "result.rs" 28 12 28 33
  let%span sresult'78 = "result.rs" 26 12 26 28
  let%span sresult'79 = "result.rs" 24 12 24 28
  let%span sresult'80 = "result.rs" 21 12 21 44
  let%span sresult'81 = "result.rs" 20 12 20 38
  let%span sresult'82 = "result.rs" 17 12 17 36
  let%span sresult'83 = "result.rs" 16 12 16 30
  let%span sresult'84 = "result.rs" 14 12 14 30
  let%span sresult'85 = "result.rs" 13 12 13 33
  let%span sresult'86 = "result.rs" 10 12 10 40
  let%span sresult'87 = "result.rs" 8 12 8 38
  let%span sresult'88 = "../../../creusot-contracts/src/std/result.rs" 23 26 23 63
  let%span sresult'89 = "../../../creusot-contracts/src/std/result.rs" 27 26 27 64
  let%span sresult'90 = "../../../creusot-contracts/src/std/result.rs" 31 26 31 74
  let%span sresult'91 = "../../../creusot-contracts/src/std/result.rs" 32 26 32 74
  let%span sresult'92 = "../../../creusot-contracts/src/std/result.rs" 36 26 36 73
  let%span sresult'93 = "../../../creusot-contracts/src/std/result.rs" 37 26 37 75
  let%span sresult'94 = "../../../creusot-contracts/src/std/result.rs" 41 26 41 75
  let%span sresult'95 = "../../../creusot-contracts/src/std/result.rs" 42 26 42 77
  let%span sresult'96 = "../../../creusot-contracts/src/std/result.rs" 53 27 53 53
  let%span sresult'97 = "../../../creusot-contracts/src/std/result.rs" 54 26 54 44
  let%span sresult'98 = "../../../creusot-contracts/src/std/result.rs" 67 27 67 54
  let%span sresult'99 = "../../../creusot-contracts/src/std/result.rs" 68 26 68 45
  let%span sresult'100 = "../../../creusot-contracts/src/std/result.rs" 47 20 48 94
  let%span sresult'101 = "../../../creusot-contracts/src/std/result.rs" 74 26 74 68
  let%span sresult'102 = "../../../creusot-contracts/src/std/result.rs" 75 26 75 77
  let%span sresult'103 = "../../../creusot-contracts/src/std/result.rs" 78 26 78 68
  let%span sresult'104 = "../../../creusot-contracts/src/std/result.rs" 79 26 79 96
  let%span sresult'105 = "../../../creusot-contracts/src/std/result.rs" 85 26 85 72
  let%span sresult'106 = "../../../creusot-contracts/src/std/result.rs" 86 26 86 74
  let%span sresult'107 = "../../../creusot-contracts/src/std/result.rs" 90 26 90 72
  let%span sresult'108 = "../../../creusot-contracts/src/std/result.rs" 91 26 91 73
  let%span sresult'109 = "../../../creusot-contracts/src/std/result.rs" 97 26 97 74
  let%span sresult'110 = "../../../creusot-contracts/src/std/result.rs" 98 26 98 74
  let%span sresult'111 = "../../../creusot-contracts/src/std/result.rs" 112 26 112 93
  let%span sresult'112 = "../../../creusot-contracts/src/std/result.rs" 113 26 113 74
  let%span sresult'113 = "../../../creusot-contracts/src/std/result.rs" 103 26 103 74
  let%span sresult'114 = "../../../creusot-contracts/src/std/result.rs" 104 26 104 74
  let%span sresult'115 = "../../../creusot-contracts/src/std/result.rs" 118 26 118 93
  let%span sresult'116 = "../../../creusot-contracts/src/std/result.rs" 119 26 119 74
  let%span sresult'117 = "../../../creusot-contracts/src/std/result.rs" 127 26 127 61
  let%span sresult'118 = "../../../creusot-contracts/src/std/result.rs" 128 26 128 84
  let%span sresult'119 = "../../../creusot-contracts/src/std/result.rs" 129 26 129 80
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 150 27 150 39
  let%span soption'0 = "../../../creusot-contracts/src/std/option.rs" 151 26 151 46
  let%span soption'1 = "../../../creusot-contracts/src/std/option.rs" 80 26 80 51
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 35 26 35 41
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 169 14 169 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 174 14 174 100
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 179 14 179 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Result = C_Ok Int32.t | C_Err Int32.t
  
  let rec is_ok (self_: t_Result) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#sresult'88] result = (exists t: Int32.t. self_ = C_Ok t)} (! return' {result}) ]
  
  let rec is_err (self_: t_Result) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#sresult'89] result = (exists e: Int32.t. self_ = C_Err e)} (! return' {result}) ]
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec ok (self_: t_Result) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#sresult'90] forall t: Int32.t. self_ = C_Ok t -> result = C_Some t}
      {[%#sresult'91] (exists e: Int32.t. self_ = C_Err e) -> result = C_None}
      (! return' {result}) ]
  
  let rec unwrap (self_: t_Option) (return' (x: Int32.t)) = {[@expl:unwrap requires] [%#soption] self_ <> C_None}
    any [ return''0 (result: Int32.t) -> {[%#soption'0] C_Some result = self_} (! return' {result}) ]
  
  let rec is_none (self_: t_Option) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#soption'1] result = (self_ = C_None)} (! return' {result}) ]
  
  let rec err (self_: t_Result) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#sresult'92] (exists t: Int32.t. self_ = C_Ok t) -> result = C_None}
      {[%#sresult'93] forall e: Int32.t. self_ = C_Err e -> result = C_Some e}
      (! return' {result}) ]
  
  type t_Result'0 = C_Ok'0 Int32.t | C_Err'0 Int32.t
  
  let rec as_ref (self_: t_Result) (return' (x: t_Result'0)) = any
    [ return''0 (result: t_Result'0) -> {[%#sresult'94] forall t: Int32.t. self_ = C_Ok t -> result = C_Ok'0 t}
      {[%#sresult'95] forall e: Int32.t. self_ = C_Err e -> result = C_Err'0 e}
      (! return' {result}) ]
  
  let rec unwrap'0 (self_: t_Result'0) (return' (x: Int32.t)) =
    {[@expl:unwrap requires] [%#sresult'96] exists t: Int32.t. self_ = C_Ok'0 t}
    any [ return''0 (result: Int32.t) -> {[%#sresult'97] C_Ok'0 result = self_} (! return' {result}) ]
  
  let rec unwrap_err (self_: t_Result'0) (return' (x: Int32.t)) =
    {[@expl:unwrap_err requires] [%#sresult'98] exists e: Int32.t. self_ = C_Err'0 e}
    any [ return''0 (result: Int32.t) -> {[%#sresult'99] C_Err'0 result = self_} (! return' {result}) ]
  
  type t_Result'1 = C_Ok'1 (MutBorrow.t Int32.t) | C_Err'1 (MutBorrow.t Int32.t)
  
  let rec as_mut (self_: MutBorrow.t t_Result) (return' (x: t_Result'1)) = any
    [ return''0 (result: t_Result'1) -> {[%#sresult'100] exists t: MutBorrow.t Int32.t. self_.current = C_Ok (t.current)
          /\ self_.final = C_Ok (t.final) /\ result = C_Ok'1 t
        \/ (exists e: MutBorrow.t Int32.t. self_.current = C_Err (e.current)
          /\ self_.final = C_Err (e.final) /\ result = C_Err'1 e)}
      (! return' {result}) ]
  
  let rec unwrap'1 (self_: t_Result'1) (return' (x: MutBorrow.t Int32.t)) =
    {[@expl:unwrap requires] [%#sresult'96] exists t: MutBorrow.t Int32.t. self_ = C_Ok'1 t}
    any [ return''0 (result: MutBorrow.t Int32.t) -> {[%#sresult'97] C_Ok'1 result = self_} (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) = resolve _0
  
  let rec unwrap'2 (self_: t_Result) (return' (x: Int32.t)) =
    {[@expl:unwrap requires] [%#sresult'96] exists t: Int32.t. self_ = C_Ok t}
    any [ return''0 (result: Int32.t) -> {[%#sresult'97] C_Ok result = self_} (! return' {result}) ]
  
  let rec unwrap_err'0 (self_: t_Result'1) (return' (x: MutBorrow.t Int32.t)) =
    {[@expl:unwrap_err requires] [%#sresult'98] exists e: MutBorrow.t Int32.t. self_ = C_Err'1 e}
    any [ return''0 (result: MutBorrow.t Int32.t) -> {[%#sresult'99] C_Err'1 result = self_} (! return' {result}) ]
  
  let rec unwrap_err'1 (self_: t_Result) (return' (x: Int32.t)) =
    {[@expl:unwrap_err requires] [%#sresult'98] exists e: Int32.t. self_ = C_Err e}
    any [ return''0 (result: Int32.t) -> {[%#sresult'99] C_Err result = self_} (! return' {result}) ]
  
  let rec unwrap_or (self_: t_Result) (default: Int32.t) (return' (x: Int32.t)) = any
    [ return''0 (result: Int32.t) -> {[%#sresult'101] forall t: Int32.t. self_ = C_Ok t -> result = t}
      {[%#sresult'102] (exists e: Int32.t. self_ = C_Err e) -> result = default}
      (! return' {result}) ]
  
  predicate postcondition_once (self: ()) (args: ()) (result: Int32.t) = let () = args in result = (0: Int32.t)
  
  predicate resolve'1 (_0: ()) = true
  
  predicate postcondition_mut (self: ()) (args: ()) (result_state: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  function fn_mut_once (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: (), res: Int32.t. [%#sops'8] postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) = true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: ()) (result: Int32.t) = let () = args in result = (0: Int32.t)
  
  function fn_once (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: (), res: Int32.t. [%#sops'0] postcondition_once self args res
      = (postcondition self args res /\ resolve'1 self)
  
  function fn_mut (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec default (return' (x: Int32.t)) = any
    [ return''0 (result: Int32.t) -> {[%#snum] result = (0: Int32.t)} (! return' {result}) ]
  
  let rec unwrap_or_default (self_: t_Result) (return' (x: Int32.t)) = any
    [ return''0 (result: Int32.t) -> {[%#sresult'103] forall t: Int32.t. self_ = C_Ok t -> result = t}
      {[%#sresult'104] (exists e: Int32.t. self_ = C_Err e) -> postcondition () () result}
      (! return' {result}) ]
  
  let rec and (self_: t_Result) (res: t_Result) (return' (x: t_Result)) = any
    [ return''0 (result: t_Result) -> {[%#sresult'105] (exists t: Int32.t. self_ = C_Ok t) -> result = res}
      {[%#sresult'106] forall e: Int32.t. self_ = C_Err e -> result = C_Err e}
      (! return' {result}) ]
  
  let rec or (self_: t_Result) (res: t_Result) (return' (x: t_Result)) = any
    [ return''0 (result: t_Result) -> {[%#sresult'107] forall t: Int32.t. self_ = C_Ok t -> result = C_Ok t}
      {[%#sresult'108] (exists e: Int32.t. self_ = C_Err e) -> result = res}
      (! return' {result}) ]
  
  type t_Result'2 = C_Ok'2 Int32.t | C_Err'2 Int32.t
  
  let rec copied (self_: t_Result'0) (return' (x: t_Result'2)) = any
    [ return''0 (result: t_Result'2) -> {[%#sresult'109] forall t: Int32.t. self_ = C_Ok'0 t -> result = C_Ok'2 t}
      {[%#sresult'110] forall e: Int32.t. self_ = C_Err'0 e -> result = C_Err'2 e}
      (! return' {result}) ]
  
  let rec unwrap'3 (self_: t_Result'2) (return' (x: Int32.t)) =
    {[@expl:unwrap requires] [%#sresult'96] exists t: Int32.t. self_ = C_Ok'2 t}
    any [ return''0 (result: Int32.t) -> {[%#sresult'97] C_Ok'2 result = self_} (! return' {result}) ]
  
  let rec unwrap_err'2 (self_: t_Result'2) (return' (x: Int32.t)) =
    {[@expl:unwrap_err requires] [%#sresult'98] exists e: Int32.t. self_ = C_Err'2 e}
    any [ return''0 (result: Int32.t) -> {[%#sresult'99] C_Err'2 result = self_} (! return' {result}) ]
  
  type t_Result'3 = C_Ok'3 Int32.t | C_Err'3 (MutBorrow.t Int32.t)
  
  let rec copied'0 (self_: t_Result'1) (return' (x: t_Result'3)) = any
    [ return''0 (result: t_Result'3) -> {[%#sresult'111] forall t: MutBorrow.t Int32.t. self_ = C_Ok'1 t
        -> result = C_Ok'3 (t.current) /\ resolve t}
      {[%#sresult'112] forall e: MutBorrow.t Int32.t. self_ = C_Err'1 e -> result = C_Err'3 e}
      (! return' {result}) ]
  
  let rec unwrap'4 (self_: t_Result'3) (return' (x: Int32.t)) =
    {[@expl:unwrap requires] [%#sresult'96] exists t: Int32.t. self_ = C_Ok'3 t}
    any [ return''0 (result: Int32.t) -> {[%#sresult'97] C_Ok'3 result = self_} (! return' {result}) ]
  
  let rec unwrap_err'3 (self_: t_Result'3) (return' (x: MutBorrow.t Int32.t)) =
    {[@expl:unwrap_err requires] [%#sresult'98] exists e: MutBorrow.t Int32.t. self_ = C_Err'3 e}
    any [ return''0 (result: MutBorrow.t Int32.t) -> {[%#sresult'99] C_Err'3 result = self_} (! return' {result}) ]
  
  let rec cloned (self_: t_Result'0) (return' (x: t_Result'2)) = any
    [ return''0 (result: t_Result'2) -> {[%#sresult'113] forall t: Int32.t. self_ = C_Ok'0 t -> result = C_Ok'2 t}
      {[%#sresult'114] forall e: Int32.t. self_ = C_Err'0 e -> result = C_Err'2 e}
      (! return' {result}) ]
  
  let rec cloned'0 (self_: t_Result'1) (return' (x: t_Result'3)) = any
    [ return''0 (result: t_Result'3) -> {[%#sresult'115] forall t: MutBorrow.t Int32.t. self_ = C_Ok'1 t
        -> result = C_Ok'3 (t.current) /\ resolve t}
      {[%#sresult'116] forall e: MutBorrow.t Int32.t. self_ = C_Err'1 e -> result = C_Err'3 e}
      (! return' {result}) ]
  
  type t_Result'4 = C_Ok'4 t_Option | C_Err'4 Int32.t
  
  type t_Option'0 = C_None'0 | C_Some'0 t_Result
  
  let rec transpose (self_: t_Result'4) (return' (x: t_Option'0)) = any
    [ return''0 (result: t_Option'0) -> {[%#sresult'117] self_ = C_Ok'4 (C_None) -> result = C_None'0}
      {[%#sresult'118] forall t: Int32.t. self_ = C_Ok'4 (C_Some t) -> result = C_Some'0 (C_Ok t)}
      {[%#sresult'119] forall e: Int32.t. self_ = C_Err'4 e -> result = C_Some'0 (C_Err e)}
      (! return' {result}) ]
  
  let rec is_none'0 (self_: t_Option'0) (return' (x: bool)) = any
    [ return''0 (result: bool) -> {[%#soption'1] result = (self_ = C_None'0)} (! return' {result}) ]
  
  let rec unwrap'5 (self_: t_Option'0) (return' (x: t_Result)) = {[@expl:unwrap requires] [%#soption] self_ <> C_None'0}
    any [ return''0 (result: t_Result) -> {[%#soption'0] C_Some'0 result = self_} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_result [#"result.rs" 3 0 3 20] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &ok'0 <- C_Ok ([%#sresult] (1: Int32.t)) ] s1
      | s1 = [ &err'0 <- C_Err ([%#sresult'0] (-1: Int32.t)) ] s2
      | s2 = is_ok {ok'0} (fun (_ret: bool) -> [ &_5 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb2) ]
    | bb2 = s0 [ s0 = is_ok {err'0} (fun (_ret: bool) -> [ &_7 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &_4 <- not _7 ] s1 | s1 = bb5 ]
    | bb3 = s0 [ s0 = [ &_4 <- [%#sresult'1] false ] s1 | s1 = bb5 ]
    | bb5 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb8) ]
    | bb8 = s0 [ s0 = is_err {err'0} (fun (_ret: bool) -> [ &_12 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = any [ br0 -> {_12 = false} (! bb11) | br1 -> {_12} (! bb10) ]
    | bb10 = s0 [ s0 = is_err {ok'0} (fun (_ret: bool) -> [ &_14 <- _ret ] s1) | s1 = bb12 ]
    | bb12 = s0 [ s0 = [ &_11 <- not _14 ] s1 | s1 = bb13 ]
    | bb11 = s0 [ s0 = [ &_11 <- [%#sresult'2] false ] s1 | s1 = bb13 ]
    | bb13 = any [ br0 -> {_11 = false} (! bb14) | br1 -> {_11} (! bb16) ]
    | bb16 = s0 [ s0 = ok {ok'0} (fun (_ret: t_Option) -> [ &_20 <- _ret ] s1) | s1 = bb17 ]
    | bb17 = s0 [ s0 = unwrap {_20} (fun (_ret: Int32.t) -> [ &_19 <- _ret ] s1) | s1 = bb18 ]
    | bb18 = s0
      [ s0 = [ &_18 <- _19 = ([%#sresult'3] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_18 = false} (! bb19) | br1 -> {_18} (! bb21) ] ]
    | bb21 = s0 [ s0 = ok {err'0} (fun (_ret: t_Option) -> [ &_26 <- _ret ] s1) | s1 = bb22 ]
    | bb22 = s0 [ s0 = is_none {_26} (fun (_ret: bool) -> [ &_24 <- _ret ] s1) | s1 = bb23 ]
    | bb23 = any [ br0 -> {_24 = false} (! bb24) | br1 -> {_24} (! bb26) ]
    | bb26 = s0 [ s0 = err {ok'0} (fun (_ret: t_Option) -> [ &_32 <- _ret ] s1) | s1 = bb27 ]
    | bb27 = s0 [ s0 = is_none {_32} (fun (_ret: bool) -> [ &_30 <- _ret ] s1) | s1 = bb28 ]
    | bb28 = any [ br0 -> {_30 = false} (! bb29) | br1 -> {_30} (! bb31) ]
    | bb31 = s0 [ s0 = err {err'0} (fun (_ret: t_Option) -> [ &_38 <- _ret ] s1) | s1 = bb32 ]
    | bb32 = s0 [ s0 = unwrap {_38} (fun (_ret: Int32.t) -> [ &_37 <- _ret ] s1) | s1 = bb33 ]
    | bb33 = s0
      [ s0 = [ &_36 <- _37 = ([%#sresult'4] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_36 = false} (! bb34) | br1 -> {_36} (! bb36) ] ]
    | bb36 = s0 [ s0 = as_ref {ok'0} (fun (_ret: t_Result'0) -> [ &_45 <- _ret ] s1) | s1 = bb37 ]
    | bb37 = s0 [ s0 = unwrap'0 {_45} (fun (_ret: Int32.t) -> [ &_44 <- _ret ] s1) | s1 = bb38 ]
    | bb38 = s0
      [ s0 = [ &_42 <- _44 = ([%#sresult'5] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_42 = false} (! bb39) | br1 -> {_42} (! bb41) ] ]
    | bb41 = s0 [ s0 = as_ref {err'0} (fun (_ret: t_Result'0) -> [ &_52 <- _ret ] s1) | s1 = bb42 ]
    | bb42 = s0 [ s0 = unwrap_err {_52} (fun (_ret: Int32.t) -> [ &_51 <- _ret ] s1) | s1 = bb43 ]
    | bb43 = s0
      [ s0 = [ &_49 <- _51 = ([%#sresult'6] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_49 = false} (! bb44) | br1 -> {_49} (! bb46) ] ]
    | bb46 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {ok'0}
          (fun (_ret: MutBorrow.t t_Result) -> [ &_57 <- _ret ] [ &ok'0 <- _ret.final ] s1)
      | s1 = as_mut {_57} (fun (_ret: t_Result'1) -> [ &_56 <- _ret ] s2)
      | s2 = bb47 ]
    | bb47 = s0 [ s0 = unwrap'1 {_56} (fun (_ret: MutBorrow.t Int32.t) -> [ &_55 <- _ret ] s1) | s1 = bb48 ]
    | bb48 = s0
      [ s0 = [ &_55 <- { _55 with current = ([%#sresult'7] (0: Int32.t)) } ] s1
      | s1 = -{resolve'0 _55}- s2
      | s2 = unwrap'2 {ok'0} (fun (_ret: Int32.t) -> [ &_60 <- _ret ] s3)
      | s3 = bb49 ]
    | bb49 = s0
      [ s0 = [ &_59 <- _60 = ([%#sresult'8] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_59 = false} (! bb50) | br1 -> {_59} (! bb52) ] ]
    | bb52 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {ok'0}
          (fun (_ret: MutBorrow.t t_Result) -> [ &_65 <- _ret ] [ &ok'0 <- _ret.final ] s1)
      | s1 = as_mut {_65} (fun (_ret: t_Result'1) -> [ &_64 <- _ret ] s2)
      | s2 = bb53 ]
    | bb53 = s0 [ s0 = unwrap'1 {_64} (fun (_ret: MutBorrow.t Int32.t) -> [ &_63 <- _ret ] s1) | s1 = bb54 ]
    | bb54 = s0
      [ s0 = [ &_63 <- { _63 with current = ([%#sresult'9] (1: Int32.t)) } ] s1
      | s1 = -{resolve'0 _63}- s2
      | s2 = unwrap'2 {ok'0} (fun (_ret: Int32.t) -> [ &_68 <- _ret ] s3)
      | s3 = bb55 ]
    | bb55 = s0
      [ s0 = [ &_67 <- _68 = ([%#sresult'10] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_67 = false} (! bb56) | br1 -> {_67} (! bb58) ] ]
    | bb58 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {err'0}
          (fun (_ret: MutBorrow.t t_Result) -> [ &_73 <- _ret ] [ &err'0 <- _ret.final ] s1)
      | s1 = as_mut {_73} (fun (_ret: t_Result'1) -> [ &_72 <- _ret ] s2)
      | s2 = bb59 ]
    | bb59 = s0 [ s0 = unwrap_err'0 {_72} (fun (_ret: MutBorrow.t Int32.t) -> [ &_71 <- _ret ] s1) | s1 = bb60 ]
    | bb60 = s0
      [ s0 = [ &_71 <- { _71 with current = ([%#sresult'11] (0: Int32.t)) } ] s1
      | s1 = -{resolve'0 _71}- s2
      | s2 = unwrap_err'1 {err'0} (fun (_ret: Int32.t) -> [ &_76 <- _ret ] s3)
      | s3 = bb61 ]
    | bb61 = s0
      [ s0 = [ &_75 <- _76 = ([%#sresult'12] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_75 = false} (! bb62) | br1 -> {_75} (! bb64) ] ]
    | bb64 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {err'0}
          (fun (_ret: MutBorrow.t t_Result) -> [ &_81 <- _ret ] [ &err'0 <- _ret.final ] s1)
      | s1 = as_mut {_81} (fun (_ret: t_Result'1) -> [ &_80 <- _ret ] s2)
      | s2 = bb65 ]
    | bb65 = s0 [ s0 = unwrap_err'0 {_80} (fun (_ret: MutBorrow.t Int32.t) -> [ &_79 <- _ret ] s1) | s1 = bb66 ]
    | bb66 = s0
      [ s0 = [ &_79 <- { _79 with current = ([%#sresult'13] (-1: Int32.t)) } ] s1
      | s1 = -{resolve'0 _79}- s2
      | s2 = unwrap_err'1 {err'0} (fun (_ret: Int32.t) -> [ &_84 <- _ret ] s3)
      | s3 = bb67 ]
    | bb67 = s0
      [ s0 = [ &_83 <- _84 = ([%#sresult'14] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_83 = false} (! bb68) | br1 -> {_83} (! bb70) ] ]
    | bb70 = s0 [ s0 = unwrap'2 {ok'0} (fun (_ret: Int32.t) -> [ &_89 <- _ret ] s1) | s1 = bb71 ]
    | bb71 = s0
      [ s0 = [ &_88 <- _89 = ([%#sresult'15] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_88 = false} (! bb72) | br1 -> {_88} (! bb74) ] ]
    | bb74 = s0 [ s0 = unwrap_err'1 {err'0} (fun (_ret: Int32.t) -> [ &_94 <- _ret ] s1) | s1 = bb75 ]
    | bb75 = s0
      [ s0 = [ &_93 <- _94 = ([%#sresult'16] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_93 = false} (! bb76) | br1 -> {_93} (! bb78) ] ]
    | bb78 = s0
      [ s0 = unwrap_or {ok'0} {[%#sresult'17] (0: Int32.t)} (fun (_ret: Int32.t) -> [ &_99 <- _ret ] s1) | s1 = bb79 ]
    | bb79 = s0
      [ s0 = [ &_98 <- _99 = ([%#sresult'18] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_98 = false} (! bb80) | br1 -> {_98} (! bb82) ] ]
    | bb82 = s0
      [ s0 = unwrap_or {err'0} {[%#sresult'19] (0: Int32.t)} (fun (_ret: Int32.t) -> [ &_104 <- _ret ] s1) | s1 = bb83 ]
    | bb83 = s0
      [ s0 = [ &_103 <- _104 = ([%#sresult'20] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_103 = false} (! bb84) | br1 -> {_103} (! bb86) ] ]
    | bb86 = s0 [ s0 = unwrap_or_default {ok'0} (fun (_ret: Int32.t) -> [ &_109 <- _ret ] s1) | s1 = bb87 ]
    | bb87 = s0
      [ s0 = [ &_108 <- _109 = ([%#sresult'21] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_108 = false} (! bb88) | br1 -> {_108} (! bb90) ] ]
    | bb90 = s0 [ s0 = unwrap_or_default {err'0} (fun (_ret: Int32.t) -> [ &_114 <- _ret ] s1) | s1 = bb91 ]
    | bb91 = s0
      [ s0 = [ &_113 <- _114 = ([%#sresult'22] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_113 = false} (! bb92) | br1 -> {_113} (! bb94) ] ]
    | bb94 = s0
      [ s0 = [ &_122 <- C_Err ([%#sresult'23] (-2: Int32.t)) ] s1
      | s1 = and {ok'0} {_122} (fun (_ret: t_Result) -> [ &_120 <- _ret ] s2)
      | s2 = bb95 ]
    | bb95 = s0 [ s0 = unwrap_err'1 {_120} (fun (_ret: Int32.t) -> [ &_119 <- _ret ] s1) | s1 = bb96 ]
    | bb96 = s0
      [ s0 = [ &_118 <- _119 = ([%#sresult'24] (-2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_118 = false} (! bb97) | br1 -> {_118} (! bb99) ] ]
    | bb99 = s0
      [ s0 = [ &_129 <- C_Ok ([%#sresult'25] (2: Int32.t)) ] s1
      | s1 = and {ok'0} {_129} (fun (_ret: t_Result) -> [ &_127 <- _ret ] s2)
      | s2 = bb100 ]
    | bb100 = s0 [ s0 = unwrap'2 {_127} (fun (_ret: Int32.t) -> [ &_126 <- _ret ] s1) | s1 = bb101 ]
    | bb101 = s0
      [ s0 = [ &_125 <- _126 = ([%#sresult'26] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_125 = false} (! bb102) | br1 -> {_125} (! bb104) ] ]
    | bb104 = s0
      [ s0 = [ &_136 <- C_Err ([%#sresult'27] (-2: Int32.t)) ] s1
      | s1 = and {err'0} {_136} (fun (_ret: t_Result) -> [ &_134 <- _ret ] s2)
      | s2 = bb105 ]
    | bb105 = s0 [ s0 = unwrap_err'1 {_134} (fun (_ret: Int32.t) -> [ &_133 <- _ret ] s1) | s1 = bb106 ]
    | bb106 = s0
      [ s0 = [ &_132 <- _133 = ([%#sresult'28] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_132 = false} (! bb107) | br1 -> {_132} (! bb109) ] ]
    | bb109 = s0
      [ s0 = [ &_143 <- C_Ok ([%#sresult'29] (2: Int32.t)) ] s1
      | s1 = and {err'0} {_143} (fun (_ret: t_Result) -> [ &_141 <- _ret ] s2)
      | s2 = bb110 ]
    | bb110 = s0 [ s0 = unwrap_err'1 {_141} (fun (_ret: Int32.t) -> [ &_140 <- _ret ] s1) | s1 = bb111 ]
    | bb111 = s0
      [ s0 = [ &_139 <- _140 = ([%#sresult'30] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_139 = false} (! bb112) | br1 -> {_139} (! bb114) ] ]
    | bb114 = s0
      [ s0 = [ &_150 <- C_Err ([%#sresult'31] (-2: Int32.t)) ] s1
      | s1 = or {ok'0} {_150} (fun (_ret: t_Result) -> [ &_148 <- _ret ] s2)
      | s2 = bb115 ]
    | bb115 = s0 [ s0 = unwrap'2 {_148} (fun (_ret: Int32.t) -> [ &_147 <- _ret ] s1) | s1 = bb116 ]
    | bb116 = s0
      [ s0 = [ &_146 <- _147 = ([%#sresult'32] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_146 = false} (! bb117) | br1 -> {_146} (! bb119) ] ]
    | bb119 = s0
      [ s0 = [ &_157 <- C_Ok ([%#sresult'33] (2: Int32.t)) ] s1
      | s1 = or {ok'0} {_157} (fun (_ret: t_Result) -> [ &_155 <- _ret ] s2)
      | s2 = bb120 ]
    | bb120 = s0 [ s0 = unwrap'2 {_155} (fun (_ret: Int32.t) -> [ &_154 <- _ret ] s1) | s1 = bb121 ]
    | bb121 = s0
      [ s0 = [ &_153 <- _154 = ([%#sresult'34] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_153 = false} (! bb122) | br1 -> {_153} (! bb124) ] ]
    | bb124 = s0
      [ s0 = [ &_164 <- C_Err ([%#sresult'35] (-2: Int32.t)) ] s1
      | s1 = or {err'0} {_164} (fun (_ret: t_Result) -> [ &_162 <- _ret ] s2)
      | s2 = bb125 ]
    | bb125 = s0 [ s0 = unwrap_err'1 {_162} (fun (_ret: Int32.t) -> [ &_161 <- _ret ] s1) | s1 = bb126 ]
    | bb126 = s0
      [ s0 = [ &_160 <- _161 = ([%#sresult'36] (-2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_160 = false} (! bb127) | br1 -> {_160} (! bb129) ] ]
    | bb129 = s0
      [ s0 = [ &_171 <- C_Ok ([%#sresult'37] (2: Int32.t)) ] s1
      | s1 = or {err'0} {_171} (fun (_ret: t_Result) -> [ &_169 <- _ret ] s2)
      | s2 = bb130 ]
    | bb130 = s0 [ s0 = unwrap'2 {_169} (fun (_ret: Int32.t) -> [ &_168 <- _ret ] s1) | s1 = bb131 ]
    | bb131 = s0
      [ s0 = [ &_167 <- _168 = ([%#sresult'38] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_167 = false} (! bb132) | br1 -> {_167} (! bb134) ] ]
    | bb134 = s0 [ s0 = as_ref {ok'0} (fun (_ret: t_Result'0) -> [ &_177 <- _ret ] s1) | s1 = bb135 ]
    | bb135 = s0 [ s0 = copied {_177} (fun (_ret: t_Result'2) -> [ &_176 <- _ret ] s1) | s1 = bb136 ]
    | bb136 = s0 [ s0 = unwrap'3 {_176} (fun (_ret: Int32.t) -> [ &_175 <- _ret ] s1) | s1 = bb137 ]
    | bb137 = s0
      [ s0 = [ &_174 <- _175 = ([%#sresult'39] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_174 = false} (! bb138) | br1 -> {_174} (! bb140) ] ]
    | bb140 = s0 [ s0 = as_ref {err'0} (fun (_ret: t_Result'0) -> [ &_185 <- _ret ] s1) | s1 = bb141 ]
    | bb141 = s0 [ s0 = copied {_185} (fun (_ret: t_Result'2) -> [ &_184 <- _ret ] s1) | s1 = bb142 ]
    | bb142 = s0 [ s0 = unwrap_err'2 {_184} (fun (_ret: Int32.t) -> [ &_183 <- _ret ] s1) | s1 = bb143 ]
    | bb143 = s0
      [ s0 = [ &_181 <- _183 = ([%#sresult'40] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_181 = false} (! bb144) | br1 -> {_181} (! bb146) ] ]
    | bb146 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {ok'0}
          (fun (_ret: MutBorrow.t t_Result) -> [ &_193 <- _ret ] [ &ok'0 <- _ret.final ] s1)
      | s1 = as_mut {_193} (fun (_ret: t_Result'1) -> [ &_192 <- _ret ] s2)
      | s2 = bb147 ]
    | bb147 = s0 [ s0 = copied'0 {_192} (fun (_ret: t_Result'3) -> [ &_191 <- _ret ] s1) | s1 = bb148 ]
    | bb148 = s0 [ s0 = unwrap'4 {_191} (fun (_ret: Int32.t) -> [ &_190 <- _ret ] s1) | s1 = bb149 ]
    | bb149 = s0
      [ s0 = [ &_189 <- _190 = ([%#sresult'41] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_189 = false} (! bb150) | br1 -> {_189} (! bb152) ] ]
    | bb152 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {err'0}
          (fun (_ret: MutBorrow.t t_Result) -> [ &_201 <- _ret ] [ &err'0 <- _ret.final ] s1)
      | s1 = as_mut {_201} (fun (_ret: t_Result'1) -> [ &_200 <- _ret ] s2)
      | s2 = bb153 ]
    | bb153 = s0 [ s0 = copied'0 {_200} (fun (_ret: t_Result'3) -> [ &_199 <- _ret ] s1) | s1 = bb154 ]
    | bb154 = s0 [ s0 = unwrap_err'3 {_199} (fun (_ret: MutBorrow.t Int32.t) -> [ &_198 <- _ret ] s1) | s1 = bb155 ]
    | bb155 = s0
      [ s0 = -{resolve'0 _198}- s1
      | s1 = [ &_196 <- _198.current = ([%#sresult'42] (-1: Int32.t)) ] s2
      | s2 = any [ br0 -> {_196 = false} (! bb156) | br1 -> {_196} (! bb158) ] ]
    | bb158 = s0 [ s0 = as_ref {ok'0} (fun (_ret: t_Result'0) -> [ &_207 <- _ret ] s1) | s1 = bb159 ]
    | bb159 = s0 [ s0 = cloned {_207} (fun (_ret: t_Result'2) -> [ &_206 <- _ret ] s1) | s1 = bb160 ]
    | bb160 = s0 [ s0 = unwrap'3 {_206} (fun (_ret: Int32.t) -> [ &_205 <- _ret ] s1) | s1 = bb161 ]
    | bb161 = s0
      [ s0 = [ &_204 <- _205 = ([%#sresult'43] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_204 = false} (! bb162) | br1 -> {_204} (! bb164) ] ]
    | bb164 = s0 [ s0 = as_ref {err'0} (fun (_ret: t_Result'0) -> [ &_215 <- _ret ] s1) | s1 = bb165 ]
    | bb165 = s0 [ s0 = cloned {_215} (fun (_ret: t_Result'2) -> [ &_214 <- _ret ] s1) | s1 = bb166 ]
    | bb166 = s0 [ s0 = unwrap_err'2 {_214} (fun (_ret: Int32.t) -> [ &_213 <- _ret ] s1) | s1 = bb167 ]
    | bb167 = s0
      [ s0 = [ &_211 <- _213 = ([%#sresult'44] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_211 = false} (! bb168) | br1 -> {_211} (! bb170) ] ]
    | bb170 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {ok'0}
          (fun (_ret: MutBorrow.t t_Result) -> [ &_223 <- _ret ] [ &ok'0 <- _ret.final ] s1)
      | s1 = as_mut {_223} (fun (_ret: t_Result'1) -> [ &_222 <- _ret ] s2)
      | s2 = bb171 ]
    | bb171 = s0 [ s0 = cloned'0 {_222} (fun (_ret: t_Result'3) -> [ &_221 <- _ret ] s1) | s1 = bb172 ]
    | bb172 = s0 [ s0 = unwrap'4 {_221} (fun (_ret: Int32.t) -> [ &_220 <- _ret ] s1) | s1 = bb173 ]
    | bb173 = s0
      [ s0 = [ &_219 <- _220 = ([%#sresult'45] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_219 = false} (! bb174) | br1 -> {_219} (! bb176) ] ]
    | bb176 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {err'0}
          (fun (_ret: MutBorrow.t t_Result) -> [ &_231 <- _ret ] [ &err'0 <- _ret.final ] s1)
      | s1 = as_mut {_231} (fun (_ret: t_Result'1) -> [ &_230 <- _ret ] s2)
      | s2 = bb177 ]
    | bb177 = s0 [ s0 = cloned'0 {_230} (fun (_ret: t_Result'3) -> [ &_229 <- _ret ] s1) | s1 = bb178 ]
    | bb178 = s0 [ s0 = unwrap_err'3 {_229} (fun (_ret: MutBorrow.t Int32.t) -> [ &_228 <- _ret ] s1) | s1 = bb179 ]
    | bb179 = s0
      [ s0 = -{resolve'0 _228}- s1
      | s1 = [ &_226 <- _228.current = ([%#sresult'46] (-1: Int32.t)) ] s2
      | s2 = any [ br0 -> {_226 = false} (! bb180) | br1 -> {_226} (! bb182) ] ]
    | bb182 = s0
      [ s0 = [ &_234 <- C_None ] s1
      | s1 = [ &res <- C_Ok'4 _234 ] s2
      | s2 = transpose {res} (fun (_ret: t_Option'0) -> [ &_238 <- _ret ] s3)
      | s3 = bb183 ]
    | bb183 = s0 [ s0 = is_none'0 {_238} (fun (_ret: bool) -> [ &_236 <- _ret ] s1) | s1 = bb184 ]
    | bb184 = any [ br0 -> {_236 = false} (! bb185) | br1 -> {_236} (! bb187) ]
    | bb187 = s0
      [ s0 = [ &_242 <- C_Some ([%#sresult'47] (1: Int32.t)) ] s1
      | s1 = [ &res'0 <- C_Ok'4 _242 ] s2
      | s2 = transpose {res'0} (fun (_ret: t_Option'0) -> [ &_247 <- _ret ] s3)
      | s3 = bb188 ]
    | bb188 = s0 [ s0 = unwrap'5 {_247} (fun (_ret: t_Result) -> [ &_246 <- _ret ] s1) | s1 = bb189 ]
    | bb189 = s0 [ s0 = unwrap'2 {_246} (fun (_ret: Int32.t) -> [ &_245 <- _ret ] s1) | s1 = bb190 ]
    | bb190 = s0
      [ s0 = [ &_244 <- _245 = ([%#sresult'48] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_244 = false} (! bb191) | br1 -> {_244} (! bb193) ] ]
    | bb193 = s0
      [ s0 = [ &res'1 <- C_Err'4 ([%#sresult'49] (-1: Int32.t)) ] s1
      | s1 = transpose {res'1} (fun (_ret: t_Option'0) -> [ &_255 <- _ret ] s2)
      | s2 = bb194 ]
    | bb194 = s0 [ s0 = unwrap'5 {_255} (fun (_ret: t_Result) -> [ &_254 <- _ret ] s1) | s1 = bb195 ]
    | bb195 = s0 [ s0 = unwrap_err'1 {_254} (fun (_ret: Int32.t) -> [ &_253 <- _ret ] s1) | s1 = bb196 ]
    | bb196 = s0
      [ s0 = [ &_252 <- _253 = ([%#sresult'50] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_252 = false} (! bb197) | br1 -> {_252} (! bb199) ] ]
    | bb199 = return''0 {_0}
    | bb197 = {[%#sresult'51] false} any
    | bb191 = {[%#sresult'52] false} any
    | bb185 = {[%#sresult'53] false} any
    | bb180 = {[%#sresult'54] false} any
    | bb174 = {[%#sresult'55] false} any
    | bb168 = {[%#sresult'56] false} any
    | bb162 = {[%#sresult'57] false} any
    | bb156 = {[%#sresult'58] false} any
    | bb150 = {[%#sresult'59] false} any
    | bb144 = {[%#sresult'60] false} any
    | bb138 = {[%#sresult'61] false} any
    | bb132 = {[%#sresult'62] false} any
    | bb127 = {[%#sresult'63] false} any
    | bb122 = {[%#sresult'64] false} any
    | bb117 = {[%#sresult'65] false} any
    | bb112 = {[%#sresult'66] false} any
    | bb107 = {[%#sresult'67] false} any
    | bb102 = {[%#sresult'68] false} any
    | bb97 = {[%#sresult'69] false} any
    | bb92 = {[%#sresult'70] false} any
    | bb88 = {[%#sresult'71] false} any
    | bb84 = {[%#sresult'72] false} any
    | bb80 = {[%#sresult'73] false} any
    | bb76 = {[%#sresult'74] false} any
    | bb72 = {[%#sresult'75] false} any
    | bb68 = {[%#sresult'76] false} any
    | bb62 = {[%#sresult'77] false} any
    | bb56 = {[%#sresult'78] false} any
    | bb50 = {[%#sresult'79] false} any
    | bb44 = {[%#sresult'80] false} any
    | bb39 = {[%#sresult'81] false} any
    | bb34 = {[%#sresult'82] false} any
    | bb29 = {[%#sresult'83] false} any
    | bb24 = {[%#sresult'84] false} any
    | bb19 = {[%#sresult'85] false} any
    | bb14 = {[%#sresult'86] false} any
    | bb6 = {[%#sresult'87] false} any ]
    [ & _0: () = Any.any_l ()
    | & ok'0: t_Result = Any.any_l ()
    | & err'0: t_Result = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _19: Int32.t = Any.any_l ()
    | & _20: t_Option = Any.any_l ()
    | & _24: bool = Any.any_l ()
    | & _26: t_Option = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _32: t_Option = Any.any_l ()
    | & _36: bool = Any.any_l ()
    | & _37: Int32.t = Any.any_l ()
    | & _38: t_Option = Any.any_l ()
    | & _42: bool = Any.any_l ()
    | & _44: Int32.t = Any.any_l ()
    | & _45: t_Result'0 = Any.any_l ()
    | & _49: bool = Any.any_l ()
    | & _51: Int32.t = Any.any_l ()
    | & _52: t_Result'0 = Any.any_l ()
    | & _55: MutBorrow.t Int32.t = Any.any_l ()
    | & _56: t_Result'1 = Any.any_l ()
    | & _57: MutBorrow.t t_Result = Any.any_l ()
    | & _59: bool = Any.any_l ()
    | & _60: Int32.t = Any.any_l ()
    | & _63: MutBorrow.t Int32.t = Any.any_l ()
    | & _64: t_Result'1 = Any.any_l ()
    | & _65: MutBorrow.t t_Result = Any.any_l ()
    | & _67: bool = Any.any_l ()
    | & _68: Int32.t = Any.any_l ()
    | & _71: MutBorrow.t Int32.t = Any.any_l ()
    | & _72: t_Result'1 = Any.any_l ()
    | & _73: MutBorrow.t t_Result = Any.any_l ()
    | & _75: bool = Any.any_l ()
    | & _76: Int32.t = Any.any_l ()
    | & _79: MutBorrow.t Int32.t = Any.any_l ()
    | & _80: t_Result'1 = Any.any_l ()
    | & _81: MutBorrow.t t_Result = Any.any_l ()
    | & _83: bool = Any.any_l ()
    | & _84: Int32.t = Any.any_l ()
    | & _88: bool = Any.any_l ()
    | & _89: Int32.t = Any.any_l ()
    | & _93: bool = Any.any_l ()
    | & _94: Int32.t = Any.any_l ()
    | & _98: bool = Any.any_l ()
    | & _99: Int32.t = Any.any_l ()
    | & _103: bool = Any.any_l ()
    | & _104: Int32.t = Any.any_l ()
    | & _108: bool = Any.any_l ()
    | & _109: Int32.t = Any.any_l ()
    | & _113: bool = Any.any_l ()
    | & _114: Int32.t = Any.any_l ()
    | & _118: bool = Any.any_l ()
    | & _119: Int32.t = Any.any_l ()
    | & _120: t_Result = Any.any_l ()
    | & _122: t_Result = Any.any_l ()
    | & _125: bool = Any.any_l ()
    | & _126: Int32.t = Any.any_l ()
    | & _127: t_Result = Any.any_l ()
    | & _129: t_Result = Any.any_l ()
    | & _132: bool = Any.any_l ()
    | & _133: Int32.t = Any.any_l ()
    | & _134: t_Result = Any.any_l ()
    | & _136: t_Result = Any.any_l ()
    | & _139: bool = Any.any_l ()
    | & _140: Int32.t = Any.any_l ()
    | & _141: t_Result = Any.any_l ()
    | & _143: t_Result = Any.any_l ()
    | & _146: bool = Any.any_l ()
    | & _147: Int32.t = Any.any_l ()
    | & _148: t_Result = Any.any_l ()
    | & _150: t_Result = Any.any_l ()
    | & _153: bool = Any.any_l ()
    | & _154: Int32.t = Any.any_l ()
    | & _155: t_Result = Any.any_l ()
    | & _157: t_Result = Any.any_l ()
    | & _160: bool = Any.any_l ()
    | & _161: Int32.t = Any.any_l ()
    | & _162: t_Result = Any.any_l ()
    | & _164: t_Result = Any.any_l ()
    | & _167: bool = Any.any_l ()
    | & _168: Int32.t = Any.any_l ()
    | & _169: t_Result = Any.any_l ()
    | & _171: t_Result = Any.any_l ()
    | & _174: bool = Any.any_l ()
    | & _175: Int32.t = Any.any_l ()
    | & _176: t_Result'2 = Any.any_l ()
    | & _177: t_Result'0 = Any.any_l ()
    | & _181: bool = Any.any_l ()
    | & _183: Int32.t = Any.any_l ()
    | & _184: t_Result'2 = Any.any_l ()
    | & _185: t_Result'0 = Any.any_l ()
    | & _189: bool = Any.any_l ()
    | & _190: Int32.t = Any.any_l ()
    | & _191: t_Result'3 = Any.any_l ()
    | & _192: t_Result'1 = Any.any_l ()
    | & _193: MutBorrow.t t_Result = Any.any_l ()
    | & _196: bool = Any.any_l ()
    | & _198: MutBorrow.t Int32.t = Any.any_l ()
    | & _199: t_Result'3 = Any.any_l ()
    | & _200: t_Result'1 = Any.any_l ()
    | & _201: MutBorrow.t t_Result = Any.any_l ()
    | & _204: bool = Any.any_l ()
    | & _205: Int32.t = Any.any_l ()
    | & _206: t_Result'2 = Any.any_l ()
    | & _207: t_Result'0 = Any.any_l ()
    | & _211: bool = Any.any_l ()
    | & _213: Int32.t = Any.any_l ()
    | & _214: t_Result'2 = Any.any_l ()
    | & _215: t_Result'0 = Any.any_l ()
    | & _219: bool = Any.any_l ()
    | & _220: Int32.t = Any.any_l ()
    | & _221: t_Result'3 = Any.any_l ()
    | & _222: t_Result'1 = Any.any_l ()
    | & _223: MutBorrow.t t_Result = Any.any_l ()
    | & _226: bool = Any.any_l ()
    | & _228: MutBorrow.t Int32.t = Any.any_l ()
    | & _229: t_Result'3 = Any.any_l ()
    | & _230: t_Result'1 = Any.any_l ()
    | & _231: MutBorrow.t t_Result = Any.any_l ()
    | & res: t_Result'4 = Any.any_l ()
    | & _234: t_Option = Any.any_l ()
    | & _236: bool = Any.any_l ()
    | & _238: t_Option'0 = Any.any_l ()
    | & res'0: t_Result'4 = Any.any_l ()
    | & _242: t_Option = Any.any_l ()
    | & _244: bool = Any.any_l ()
    | & _245: Int32.t = Any.any_l ()
    | & _246: t_Result = Any.any_l ()
    | & _247: t_Option'0 = Any.any_l ()
    | & res'1: t_Result'4 = Any.any_l ()
    | & _252: bool = Any.any_l ()
    | & _253: Int32.t = Any.any_l ()
    | & _254: t_Result = Any.any_l ()
    | & _255: t_Option'0 = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
