module M_own__qyi1891129895124532698__resolve_coherence [#"own.rs" 25 4 25 31] (* <OwnResult<T, E> as creusot_contracts::Resolve> *)
  let%span sown = "own.rs" 23 15 23 39
  let%span sown'0 = "own.rs" 24 14 24 31
  let%span sown'1 = "own.rs" 25 32 25 34
  let%span sown'2 = "own.rs" 16 8 19 9
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 (_0: t_E)
  
  predicate structural_resolve (_0: t_OwnResult) =
    match _0 with
      | C_Ok x0 -> resolve x0
      | C_Err x0 -> resolve'0 x0
      end
  
  predicate resolve'1 [#"own.rs" 15 4 15 28] (self: t_OwnResult) =
    [%#sown'2] match self with
      | C_Ok t -> resolve t
      | C_Err e -> resolve'0 e
      end
  
  constant self  : t_OwnResult
  
  function resolve_coherence [#"own.rs" 25 4 25 31] (self'0: t_OwnResult) : ()
  
  goal vc_resolve_coherence: ([%#sown] structural_resolve self)  -> ([%#sown'0] resolve'1 self)
end
module M_own__qyi9370700355788413623__is_ok [#"own.rs" 30 4 30 31] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 30 18 30 22
  let%span sown'0 = "own.rs" 29 14 29 62
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv a_0
    | C_Err a_0 -> inv'0 a_0
    end
  
  predicate invariant' (self: t_OwnResult) =
    [%#sinvariant] inv'1 self
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x = invariant' x
  
  meta "compute_max_steps" 1000000
  
  let rec is_ok[#"own.rs" 30 4 30 31] (self:t_OwnResult) (return'  (x:bool))= {[@expl:is_ok 'self' type invariant] [%#sown] inv'2 self}
    (! bb0
    [ bb0 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb3) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_0 <- false ] s1 | s1 = bb4 ] 
    | bb3 = s0 [ s0 =  [ &_0 <- true ] s1 | s1 = bb4 ] 
    | bb4 = return''0 {_0} ]
    ) [ & _0: bool = Any.any_l () | & self'0: t_OwnResult = self ] 
    [ return''0 (result:bool)-> {[@expl:is_ok ensures] [%#sown'0] result = (exists t: t_T. self = C_Ok t)}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__is_err [#"own.rs" 35 4 35 32] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 35 19 35 23
  let%span sown'0 = "own.rs" 34 14 34 63
  let%span sown'1 = "own.rs" 30 18 30 22
  let%span sown'2 = "own.rs" 29 14 29 62
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv a_0
    | C_Err a_0 -> inv'0 a_0
    end
  
  predicate invariant' (self: t_OwnResult) =
    [%#sinvariant] inv'1 self
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x = invariant' x
  
  let rec is_ok (self:t_OwnResult) (return'  (x:bool))= {[@expl:is_ok 'self' type invariant] [%#sown'1] inv'2 self}
    any [ return''0 (result:bool)-> {[%#sown'2] result = (exists t: t_T. self = C_Ok t)} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec is_err[#"own.rs" 35 4 35 32] (self:t_OwnResult) (return'  (x:bool))= {[@expl:is_err 'self' type invariant] [%#sown] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 = is_ok {self'0} (fun (_ret:bool) ->  [ &_3 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_0 <- not _3 ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0: bool = Any.any_l () | & self'0: t_OwnResult = self | & _3: bool = Any.any_l () ] 
    [ return''0 (result:bool)-> {[@expl:is_err ensures] [%#sown'0] result = (exists e: t_E. self = C_Err e)}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__ok [#"own.rs" 41 4 41 32] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 41 14 41 18
  let%span sown'0 = "own.rs" 41 23 41 32
  let%span sown'1 = "own.rs" 39 14 39 73
  let%span sown'2 = "own.rs" 40 14 40 73
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  type t_Option  =
    | C_None
    | C_Some t_T
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv a_0
    end
  
  predicate inv'2 (_0: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec ok[#"own.rs" 41 4 41 32] (self:t_OwnResult) (return'  (x:t_Option))= {[@expl:ok 'self' type invariant] [%#sown] inv'1 self}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &x'0 <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv x'0} s2
      | s2 = -{resolve x'0}- s3
      | s3 =  [ &_0 <- C_None ] s4
      | s4 = bb11 ]
    
    | bb6 = s0 [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &x <- r0 ] s1) | s1 =  [ &_0 <- C_Some x ] s2 | s2 = bb11 ] 
    | bb11 = return''0 {_0} ]
    )
    [ & _0: t_Option = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ]
    
    [ return''0 (result:t_Option)-> {[@expl:ok result type invariant] [%#sown'0] inv'2 result}
      {[@expl:ok ensures #0] [%#sown'1] forall t: t_T. self = C_Ok t  -> result = C_Some t}
      {[@expl:ok ensures #1] [%#sown'2] (exists e: t_E. self = C_Err e)  -> result = C_None}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__err [#"own.rs" 51 4 51 33] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 51 15 51 19
  let%span sown'0 = "own.rs" 51 24 51 33
  let%span sown'1 = "own.rs" 49 14 49 72
  let%span sown'2 = "own.rs" 50 14 50 74
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  type t_Option  =
    | C_None
    | C_Some t_E
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_T)
  
  predicate resolve (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv a_0
    | C_Err a_0 -> inv'0 a_0
    end
  
  predicate inv'2 (_0: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec err[#"own.rs" 51 4 51 33] (self:t_OwnResult) (return'  (x:t_Option))= {[@expl:err 'self' type invariant] [%#sown] inv'1 self}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &x'0 <- r0 ] s1) | s1 =  [ &_0 <- C_Some x'0 ] s2 | s2 = bb11 ]
    
    | bb6 = s0
      [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &x <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv x} s2
      | s2 = -{resolve x}- s3
      | s3 =  [ &_0 <- C_None ] s4
      | s4 = bb11 ]
    
    | bb11 = return''0 {_0} ]
    )
    [ & _0: t_Option = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ]
    
    [ return''0 (result:t_Option)-> {[@expl:err result type invariant] [%#sown'0] inv'2 result}
      {[@expl:err ensures #0] [%#sown'1] (exists t: t_T. self = C_Ok t)  -> result = C_None}
      {[@expl:err ensures #1] [%#sown'2] forall e: t_E. self = C_Err e  -> result = C_Some e}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__as_ref [#"own.rs" 61 4 61 45] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 61 19 61 23
  let%span sown'0 = "own.rs" 61 28 61 45
  let%span sown'1 = "own.rs" 59 14 59 85
  let%span sown'2 = "own.rs" 60 14 60 87
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T
    | C_Err'0 t_E
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv a_0
    | C_Err a_0 -> inv'0 a_0
    end
  
  predicate invariant' (self: t_OwnResult) =
    [%#sinvariant] inv'1 self
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x = invariant' x
  
  predicate invariant''0 (self: t_T) =
    [%#sinvariant] inv self
  
  predicate inv'3 (_0: t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_T [inv'3 x]. inv'3 x = invariant''0 x
  
  predicate invariant''1 (self: t_E) =
    [%#sinvariant] inv'0 self
  
  predicate inv'4 (_0: t_E)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_E [inv'4 x]. inv'4 x = invariant''1 x
  
  predicate inv'5 (_0: t_OwnResult'0)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_OwnResult'0 [inv'5 x]. inv'5 x
  = match x with
    | C_Ok'0 a_0 -> inv'3 a_0
    | C_Err'0 a_0 -> inv'4 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec as_ref[#"own.rs" 61 4 61 45] (self:t_OwnResult) (return'  (x:t_OwnResult'0))= {[@expl:as_ref 'self' type invariant] [%#sown] inv'2 self}
    (! bb0
    [ bb0 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb4) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb3) ] 
    | bb3 = s0
      [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &x'0 <- r0 ] s1) | s1 =  [ &_0 <- C_Err'0 x'0 ] s2 | s2 = bb5 ]
    
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &x <- r0 ] s1) | s1 =  [ &_0 <- C_Ok'0 x ] s2 | s2 = bb5 ] 
    | bb5 = return''0 {_0} ]
    )
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ]
    
    [ return''0 (result:t_OwnResult'0)-> {[@expl:as_ref result type invariant] [%#sown'0] inv'5 result}
      {[@expl:as_ref ensures #0] [%#sown'1] forall t: t_T. self = C_Ok t  -> result = C_Ok'0 t}
      {[@expl:as_ref ensures #1] [%#sown'2] forall e: t_E. self = C_Err e  -> result = C_Err'0 e}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__as_mut [#"own.rs" 76 4 76 57] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 76 23 76 27
  let%span sown'0 = "own.rs" 76 32 76 57
  let%span sown'1 = "own.rs" 69 8 74 39
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  predicate inv (_0: t_E)
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  type t_OwnResult'0  =
    | C_Ok'0 (MutBorrow.t t_T)
    | C_Err'0 (MutBorrow.t t_E)
  
  predicate invariant' (self: MutBorrow.t t_E) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_E)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_E [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_E) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_E) =
    resolve _0
  
  predicate inv'1 (_0: t_T)
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate invariant''0 (self: MutBorrow.t t_T) =
    [%#sinvariant] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_T [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate resolve'1 (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_T) =
    resolve'1 _0
  
  predicate inv'3 (_0: t_OwnResult)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult [inv'3 x]. inv'3 x
  = match x with
    | C_Ok a_0 -> inv'1 a_0
    | C_Err a_0 -> inv a_0
    end
  
  predicate invariant''1 (self: MutBorrow.t t_OwnResult) =
    [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0: MutBorrow.t t_OwnResult)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_OwnResult [inv'4 x]. inv'4 x = invariant''1 x
  
  predicate resolve'3 (self: MutBorrow.t t_OwnResult) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0: MutBorrow.t t_OwnResult) =
    resolve'3 _0
  
  predicate inv'5 (_0: t_OwnResult'0)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_OwnResult'0 [inv'5 x]. inv'5 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec as_mut[#"own.rs" 76 4 76 57] (self:MutBorrow.t t_OwnResult) (return'  (x:t_OwnResult'0))= {[@expl:as_mut 'self' type invariant] [%#sown] inv'4 self}
    (! bb0
    [ bb0 = any
      [ br0 (x0:t_T)-> {self'0.current = C_Ok x0} (! bb4) | br1 (x0:t_E)-> {self'0.current = C_Err x0} (! bb3) ]
    
    | bb3 = s0
      [ s0 = v_Err {self'0.current}
          (fun (r0:t_E) ->
            {inv r0}
            MutBorrow.borrow_final <t_E> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
              (fun (_ret:MutBorrow.t t_E) ->
                 [ &x'0 <- _ret ] 
                -{inv _ret.final}-
                 [ &self'0 <- { self'0 with current = C_Err _ret.final } ] 
                s1))
      | s1 = {inv x'0.current}
        MutBorrow.borrow_final <t_E> {x'0.current} {MutBorrow.get_id x'0}
          (fun (_ret:MutBorrow.t t_E) ->
             [ &_7 <- _ret ] 
            -{inv _ret.final}-
             [ &x'0 <- { x'0 with current = _ret.final } ] 
            s2)
      | s2 =  [ &_0 <- C_Err'0 _7 ] s3
      | s3 = {[@expl:type invariant] inv'0 x'0} s4
      | s4 = -{resolve'0 x'0}- s5
      | s5 = bb5 ]
    
    | bb4 = s0
      [ s0 = v_Ok {self'0.current}
          (fun (r0:t_T) ->
            {inv'1 r0}
            MutBorrow.borrow_final <t_T> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
              (fun (_ret:MutBorrow.t t_T) ->
                 [ &x <- _ret ] 
                -{inv'1 _ret.final}-
                 [ &self'0 <- { self'0 with current = C_Ok _ret.final } ] 
                s1))
      | s1 = {inv'1 x.current}
        MutBorrow.borrow_final <t_T> {x.current} {MutBorrow.get_id x}
          (fun (_ret:MutBorrow.t t_T) ->
             [ &_5 <- _ret ] 
            -{inv'1 _ret.final}-
             [ &x <- { x with current = _ret.final } ] 
            s2)
      | s2 =  [ &_0 <- C_Ok'0 _5 ] s3
      | s3 = {[@expl:type invariant] inv'2 x} s4
      | s4 = -{resolve'2 x}- s5
      | s5 = bb5 ]
    
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'4 self'0} s1 | s1 = -{resolve'4 self'0}- s2 | s2 = return''0 {_0} ]  ]
    )
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: MutBorrow.t t_OwnResult = self
    | & x: MutBorrow.t t_T = Any.any_l ()
    | & _5: MutBorrow.t t_T = Any.any_l ()
    | & x'0: MutBorrow.t t_E = Any.any_l ()
    | & _7: MutBorrow.t t_E = Any.any_l () ]
    
    [ return''0 (result:t_OwnResult'0)-> {[@expl:as_mut result type invariant] [%#sown'0] inv'5 result}
      {[@expl:as_mut ensures] [%#sown'1] exists t: MutBorrow.t t_T. self.current = C_Ok (t.current)
      /\ self.final = C_Ok (t.final) /\ result = C_Ok'0 t
      \/ (exists e: MutBorrow.t t_E. self.current = C_Err (e.current)
      /\ self.final = C_Err (e.final) /\ result = C_Err'0 e)}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__unwrap [#"own.rs" 85 4 87 29] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 85 18 85 22
  let%span sown'0 = "own.rs" 83 15 83 52
  let%span sown'1 = "own.rs" 85 27 85 28
  let%span sown'2 = "own.rs" 84 14 84 43
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap[#"own.rs" 85 4 87 29] (self:t_OwnResult) (return'  (x:t_T))= {[@expl:unwrap 'self' type invariant] [%#sown] inv'1 self}
    {[@expl:unwrap requires] [%#sown'0] exists t: t_T. self = C_Ok t}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &_e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv _e} s2
      | s2 = -{resolve _e}- s3
      | s3 = {false} any ]
    
    | bb6 = s0 [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &t <- r0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb8 ] 
    | bb8 = return''0 {_0} ]
    ) [ & _0: t_T = Any.any_l () | & self'0: t_OwnResult = self | & t: t_T = Any.any_l () | & _e: t_E = Any.any_l () ] 
    [ return''0 (result:t_T)-> {[@expl:unwrap result type invariant] [%#sown'1] inv'0 result}
      {[@expl:unwrap ensures] [%#sown'2] C_Ok result = self}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__expect [#"own.rs" 97 4 99 29] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 97 18 97 22
  let%span sown'0 = "own.rs" 95 15 95 52
  let%span sown'1 = "own.rs" 97 38 97 39
  let%span sown'2 = "own.rs" 96 14 96 43
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec expect[#"own.rs" 97 4 99 29] (self:t_OwnResult) (msg:string) (return'  (x:t_T))= {[@expl:expect 'self' type invariant] [%#sown] inv'1 self}
    {[@expl:expect requires] [%#sown'0] exists t: t_T. self = C_Ok t}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &_e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv _e} s2
      | s2 = -{resolve _e}- s3
      | s3 = {false} any ]
    
    | bb6 = s0 [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &t <- r0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb8 ] 
    | bb8 = return''0 {_0} ]
    ) [ & _0: t_T = Any.any_l () | & self'0: t_OwnResult = self | & t: t_T = Any.any_l () | & _e: t_E = Any.any_l () ] 
    [ return''0 (result:t_T)-> {[@expl:expect result type invariant] [%#sown'1] inv'0 result}
      {[@expl:expect ensures] [%#sown'2] C_Ok result = self}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__unwrap_err [#"own.rs" 109 4 111 29] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 109 22 109 26
  let%span sown'0 = "own.rs" 107 15 107 53
  let%span sown'1 = "own.rs" 109 31 109 32
  let%span sown'2 = "own.rs" 108 14 108 44
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_T)
  
  predicate resolve (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv a_0
    | C_Err a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_err[#"own.rs" 109 4 111 29] (self:t_OwnResult) (return'  (x:t_E))= {[@expl:unwrap_err 'self' type invariant] [%#sown] inv'1 self}
    {[@expl:unwrap_err requires] [%#sown'0] exists e: t_E. self = C_Err e}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0 [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s1) | s1 =  [ &_0 <- e ] s2 | s2 = bb8 ] 
    | bb8 = return''0 {_0}
    | bb6 = s0
      [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &_t <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv _t} s2
      | s2 = -{resolve _t}- s3
      | s3 = {false} any ]
     ]
    ) [ & _0: t_E = Any.any_l () | & self'0: t_OwnResult = self | & _t: t_T = Any.any_l () | & e: t_E = Any.any_l () ] 
    [ return''0 (result:t_E)-> {[@expl:unwrap_err result type invariant] [%#sown'1] inv'0 result}
      {[@expl:unwrap_err ensures] [%#sown'2] C_Err result = self}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__unwrap_or [#"own.rs" 121 4 121 43] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 121 21 121 25
  let%span sown'0 = "own.rs" 121 27 121 34
  let%span sown'1 = "own.rs" 121 42 121 43
  let%span sown'2 = "own.rs" 119 14 119 67
  let%span sown'3 = "own.rs" 120 14 120 76
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  predicate inv'0 (_0: t_T)
  
  predicate resolve'0 (_0: t_T)
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_or[#"own.rs" 121 4 121 43] (self:t_OwnResult) (default:t_T) (return'  (x:t_T))= {[@expl:unwrap_or 'self' type invariant] [%#sown] inv'1 self}
    {[@expl:unwrap_or 'default' type invariant] [%#sown'0] inv'0 default}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb4) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv e} s2
      | s2 = -{resolve e}- s3
      | s3 =  [ &_0 <- default'0 ] s4
      | s4 = bb11 ]
    
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'0 default'0} s1 | s1 = -{resolve'0 default'0}- s2 | s2 = bb6 ] 
    | bb6 = s0 [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &t <- r0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb11 ] 
    | bb11 = return''0 {_0} ]
    )
    [ & _0: t_T = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & default'0: t_T = default
    | & t: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ]
    
    [ return''0 (result:t_T)-> {[@expl:unwrap_or result type invariant] [%#sown'1] inv'0 result}
      {[@expl:unwrap_or ensures #0] [%#sown'2] forall t: t_T. self = C_Ok t  -> result = t}
      {[@expl:unwrap_or ensures #1] [%#sown'3] (exists e: t_E. self = C_Err e)  -> result = default}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__unwrap_or_default [#"own.rs" 131 4 133 19] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 131 29 131 33
  let%span sown'0 = "own.rs" 131 38 131 39
  let%span sown'1 = "own.rs" 129 14 129 67
  let%span sown'2 = "own.rs" 130 14 130 95
  let%span sown'3 = "own.rs" 1 0 139 4
  let%span sown'4 = "own.rs" 16 8 19 9
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 158 14 158 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 163 14 163 101
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 168 14 168 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv a_0
    | C_Err a_0 -> inv'0 a_0
    end
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 (_0: t_E)
  
  predicate resolve'1 [#"own.rs" 15 4 15 28] (self: t_OwnResult) =
    [%#sown'4] match self with
      | C_Ok t -> resolve t
      | C_Err e -> resolve'0 e
      end
  
  predicate resolve'2 (_0: t_OwnResult) =
    resolve'1 _0
  
  predicate precondition (self: ()) (args: ())
  
  axiom precondition_fndef: [%#sown'3] forall args: () [precondition () args]. (let () = args in true)
   -> precondition () args
  
  predicate postcondition_once (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef: [%#sown'3] forall args: (), res: t_T [postcondition_once () args res]. postcondition_once () args res
   -> (let () = args in inv res)
  
  let rec default (return'  (x:t_T))= {[@expl:default requires] precondition () ()}
    any [ return''0 (result:t_T)-> {postcondition_once () () result} (! return' {result}) ] 
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate resolve'3 (_0: ()) =
    true
  
  predicate postcondition_mut (self: ()) (args: ()) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0: [%#sown'3] forall args: (), res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
   -> (let () = args in inv res)
  
  function fn_mut_once (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: (), res: t_T. [%#sops'8] postcondition_once self args res
  = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) =
    true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
   -> ([%#sops'6] hist_inv b c)  -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: (), args: (), res_state: (), res: t_T. ([%#sops'2] postcondition_mut self args res_state res)
   -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef'1: [%#sown'3] forall args: (), res: t_T [postcondition () args res]. postcondition () args res
   -> (let () = args in inv res)
  
  function fn_once (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: (), res: t_T. [%#sops'0] postcondition_once self args res
  = (postcondition self args res /\ resolve'3 self)
  
  function fn_mut (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: (), res_state: (), res: t_T. [%#sops] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_or_default[#"own.rs" 131 4 133 19] (self:t_OwnResult) (return'  (x:t_T))= {[@expl:unwrap_or_default 'self' type invariant] [%#sown] inv'1 self}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'1 self'0} s1
      | s1 = -{resolve'2 self'0}- s2
      | s2 = default (fun (_ret:t_T) ->  [ &_0 <- _ret ] s3)
      | s3 = bb9 ]
    
    | bb6 = s0 [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &x <- r0 ] s1) | s1 =  [ &_0 <- x ] s2 | s2 = bb9 ] 
    | bb9 = return''0 {_0} ]
    ) [ & _0: t_T = Any.any_l () | & self'0: t_OwnResult = self | & x: t_T = Any.any_l () ] 
    [ return''0 (result:t_T)-> {[@expl:unwrap_or_default result type invariant] [%#sown'0] inv result}
      {[@expl:unwrap_or_default ensures #0] [%#sown'1] forall t: t_T. self = C_Ok t  -> result = t}
      {[@expl:unwrap_or_default ensures #1] [%#sown'2] (exists e: t_E. self = C_Err e)  -> postcondition () () result}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__and [#"own.rs" 143 4 143 64] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 143 18 143 22
  let%span sown'0 = "own.rs" 143 24 143 27
  let%span sown'1 = "own.rs" 143 49 143 64
  let%span sown'2 = "own.rs" 141 14 141 71
  let%span sown'3 = "own.rs" 142 14 142 84
  let%span sown'4 = "own.rs" 16 8 19 9
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  type t_U
  
  type t_OwnResult'0  =
    | C_Ok'0 t_U
    | C_Err'0 t_E
  
  predicate inv (_0: t_U)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult'0)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult'0 [inv'1 x]. inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv a_0
    | C_Err'0 a_0 -> inv'0 a_0
    end
  
  predicate resolve (_0: t_U)
  
  predicate resolve'0 (_0: t_E)
  
  predicate resolve'1 [#"own.rs" 15 4 15 28] (self: t_OwnResult'0) =
    [%#sown'4] match self with
      | C_Ok'0 t -> resolve t
      | C_Err'0 e -> resolve'0 e
      end
  
  predicate resolve'2 (_0: t_OwnResult'0) =
    resolve'1 _0
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv'2 (_0: t_T)
  
  predicate resolve'3 (_0: t_T)
  
  predicate inv'3 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'3 x]. inv'3 x
  = match x with
    | C_Ok a_0 -> inv'2 a_0
    | C_Err a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec and[#"own.rs" 143 4 143 64] (self:t_OwnResult) (res:t_OwnResult'0) (return'  (x:t_OwnResult'0))= {[@expl:and 'self' type invariant] [%#sown] inv'3 self}
    {[@expl:and 'res' type invariant] [%#sown'0] inv'1 res}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'1 res'0} s1
      | s1 = -{resolve'2 res'0}- s2
      | s2 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s3)
      | s3 =  [ &_0 <- C_Err'0 e ] s4
      | s4 = bb12 ]
    
    | bb6 = s0
      [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &x <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv'2 x} s2
      | s2 = -{resolve'3 x}- s3
      | s3 =  [ &_0 <- res'0 ] s4
      | s4 = bb12 ]
    
    | bb12 = return''0 {_0} ]
    )
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & res'0: t_OwnResult'0 = res
    | & x: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ]
    
    [ return''0 (result:t_OwnResult'0)-> {[@expl:and result type invariant] [%#sown'1] inv'1 result}
      {[@expl:and ensures #0] [%#sown'2] (exists t: t_T. self = C_Ok t)  -> result = res}
      {[@expl:and ensures #1] [%#sown'3] forall e: t_E. self = C_Err e  -> result = C_Err'0 e}
      (! return' {result}) ]

end
module M_own__qyi9370700355788413623__or [#"own.rs" 153 4 153 63] (* OwnResult<T, E> *)
  let%span sown = "own.rs" 153 17 153 21
  let%span sown'0 = "own.rs" 153 23 153 26
  let%span sown'1 = "own.rs" 153 48 153 63
  let%span sown'2 = "own.rs" 151 14 151 82
  let%span sown'3 = "own.rs" 152 14 152 72
  let%span sown'4 = "own.rs" 16 8 19 9
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  type t_F
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T
    | C_Err'0 t_F
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_F)
  
  predicate inv'2 (_0: t_OwnResult'0)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult'0 [inv'2 x]. inv'2 x
  = match x with
    | C_Ok'0 a_0 -> inv'0 a_0
    | C_Err'0 a_0 -> inv'1 a_0
    end
  
  predicate resolve'0 (_0: t_T)
  
  predicate resolve'1 (_0: t_F)
  
  predicate resolve'2 [#"own.rs" 15 4 15 28] (self: t_OwnResult'0) =
    [%#sown'4] match self with
      | C_Ok'0 t -> resolve'0 t
      | C_Err'0 e -> resolve'1 e
      end
  
  predicate resolve'3 (_0: t_OwnResult'0) =
    resolve'2 _0
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv'3 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'3 x]. inv'3 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec or[#"own.rs" 153 4 153 63] (self:t_OwnResult) (res:t_OwnResult'0) (return'  (x:t_OwnResult'0))= {[@expl:or 'self' type invariant] [%#sown] inv'3 self}
    {[@expl:or 'res' type invariant] [%#sown'0] inv'2 res}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb4) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv e} s2
      | s2 = -{resolve e}- s3
      | s3 =  [ &_0 <- res'0 ] s4
      | s4 = bb12 ]
    
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'2 res'0} s1 | s1 = -{resolve'3 res'0}- s2 | s2 = bb6 ] 
    | bb6 = s0 [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &v <- r0 ] s1) | s1 =  [ &_0 <- C_Ok'0 v ] s2 | s2 = bb12 ] 
    | bb12 = return''0 {_0} ]
    )
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & res'0: t_OwnResult'0 = res
    | & v: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ]
    
    [ return''0 (result:t_OwnResult'0)-> {[@expl:or result type invariant] [%#sown'1] inv'2 result}
      {[@expl:or ensures #0] [%#sown'2] forall t: t_T. self = C_Ok t  -> result = C_Ok'0 t}
      {[@expl:or ensures #1] [%#sown'3] (exists e: t_E. self = C_Err e)  -> result = res}
      (! return' {result}) ]

end
module M_own__qyi1738359920797260731__copied [#"own.rs" 165 4 167 16] (* OwnResult<&T, E> *)
  let%span sown = "own.rs" 165 18 165 22
  let%span sown'0 = "own.rs" 165 27 165 42
  let%span sown'1 = "own.rs" 163 14 163 84
  let%span sown'2 = "own.rs" 164 14 164 84
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T
    | C_Err'0 t_E
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate inv'1 (_0: t_E)
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv'1 a_0
    end
  
  predicate inv'3 (_0: t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult'0 [inv'3 x]. inv'3 x
  = match x with
    | C_Ok'0 a_0 -> inv a_0
    | C_Err'0 a_0 -> inv'1 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec copied[#"own.rs" 165 4 167 16] (self:t_OwnResult) (return'  (x:t_OwnResult'0))= {[@expl:copied 'self' type invariant] [%#sown] inv'2 self}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0 [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s1) | s1 =  [ &_0 <- C_Err'0 e ] s2 | s2 = bb10 ] 
    | bb6 = s0 [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &t <- r0 ] s1) | s1 =  [ &_0 <- C_Ok'0 t ] s2 | s2 = bb10 ] 
    | bb10 = return''0 {_0} ]
    )
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & t: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ]
    
    [ return''0 (result:t_OwnResult'0)-> {[@expl:copied result type invariant] [%#sown'0] inv'3 result}
      {[@expl:copied ensures #0] [%#sown'1] forall t: t_T. self = C_Ok t  -> result = C_Ok'0 t}
      {[@expl:copied ensures #1] [%#sown'2] forall e: t_E. self = C_Err e  -> result = C_Err'0 e}
      (! return' {result}) ]

end
module M_own__qyi1738359920797260731__cloned [#"own.rs" 181 4 183 17] (* OwnResult<&T, E> *)
  let%span sown = "own.rs" 181 18 181 22
  let%span sown'0 = "own.rs" 181 27 181 42
  let%span sown'1 = "own.rs" 176 14 180 5
  let%span sown'2 = "own.rs" 1 0 165 4
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 158 14 158 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 163 14 163 101
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 168 14 168 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T
    | C_Err'0 t_E
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_T)
  
  axiom precondition_fndef: [%#sown'2] forall args: t_T [precondition () args]. (let self_ = args in inv'0 self_)
   -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: [%#sown'2] forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
   -> (let self_ = args in inv res)
  
  let rec clone' (self_:t_T) (return'  (x:t_T))= {[@expl:clone requires] precondition () self_}
    any [ return''0 (result:t_T)-> {postcondition_once () self_ result} (! return' {result}) ] 
  
  predicate inv'1 (_0: t_E)
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv'1 a_0
    end
  
  predicate inv'3 (_0: t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult'0 [inv'3 x]. inv'3 x
  = match x with
    | C_Ok'0 a_0 -> inv a_0
    | C_Err'0 a_0 -> inv'1 a_0
    end
  
  type tuple  =
    { _p0: t_OwnResult; _p1: t_OwnResult'0 }
  
  predicate resolve (_0: ()) =
    true
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0: [%#sown'2] forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
   -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. [%#sops'8] postcondition_once self args res
  = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) =
    true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
   -> ([%#sops'6] hist_inv b c)  -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: (), args: t_T, res_state: (), res: t_T. ([%#sops'2] postcondition_mut self args res_state res)
   -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: [%#sown'2] forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
   -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. [%#sops'0] postcondition_once self args res
  = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. [%#sops] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  let rec cloned[#"own.rs" 181 4 183 17] (self:t_OwnResult) (return'  (x:t_OwnResult'0))= {[@expl:cloned 'self' type invariant] [%#sown] inv'2 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = any [ br0 (x0:t_T)-> {self'0 = C_Ok x0} (! bb5) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb4) ] 
    | bb4 = s0 [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s1) | s1 =  [ &_0 <- C_Err'0 e ] s2 | s2 = bb11 ] 
    | bb5 = s0
      [ s0 = v_Ok {self'0} (fun (r0:t_T) ->  [ &t <- r0 ] s1)
      | s1 = clone' {t} (fun (_ret:t_T) ->  [ &_5 <- _ret ] s2)
      | s2 = bb6 ]
    
    | bb6 = s0 [ s0 =  [ &_0 <- C_Ok'0 _5 ] s1 | s1 = bb11 ] 
    | bb11 = return''0 {_0} ]
    )
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & t: t_T = Any.any_l ()
    | & _5: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ]
    
    [ return''0 (result:t_OwnResult'0)-> {[@expl:cloned result type invariant] [%#sown'0] inv'3 result}
      {[@expl:cloned ensures] [%#sown'1] match { _p0 = self; _p1 = result } with
        | {_p0 = C_Ok s ; _p1 = C_Ok'0 r} -> postcondition () s r
        | {_p0 = C_Err s ; _p1 = C_Err'0 r} -> s = r
        | _ -> false
        end}
      (! return' {result}) ]

end
module M_own__qyi10690551671874530681__copied [#"own.rs" 196 4 198 16] (* OwnResult<&mut T, E> *)
  let%span sown = "own.rs" 196 18 196 22
  let%span sown'0 = "own.rs" 196 27 196 42
  let%span sown'1 = "own.rs" 194 14 194 103
  let%span sown'2 = "own.rs" 195 14 195 84
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok (MutBorrow.t t_T)
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T
    | C_Err'0 t_E
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:MutBorrow.t t_T))= any
    [ good (field_0:MutBorrow.t t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: MutBorrow.t t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  predicate inv'1 (_0: t_E)
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv'1 a_0
    end
  
  predicate inv'3 (_0: t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult'0 [inv'3 x]. inv'3 x
  = match x with
    | C_Ok'0 a_0 -> inv a_0
    | C_Err'0 a_0 -> inv'1 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec copied[#"own.rs" 196 4 198 16] (self:t_OwnResult) (return'  (x:t_OwnResult'0))= {[@expl:copied 'self' type invariant] [%#sown] inv'2 self}
    (! bb0
    [ bb0 = bb2
    | bb2 = any [ br0 (x0:MutBorrow.t t_T)-> {self'0 = C_Ok x0} (! bb6) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb5) ] 
    | bb5 = s0 [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s1) | s1 =  [ &_0 <- C_Err'0 e ] s2 | s2 = bb10 ] 
    | bb6 = s0
      [ s0 = v_Ok {self'0} (fun (r0:MutBorrow.t t_T) ->  [ &t <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 t} s2
      | s2 = -{resolve'0 t}- s3
      | s3 =  [ &_0 <- C_Ok'0 (t.current) ] s4
      | s4 = bb10 ]
    
    | bb10 = return''0 {_0} ]
    )
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & t: MutBorrow.t t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ]
    
    [ return''0 (result:t_OwnResult'0)-> {[@expl:copied result type invariant] [%#sown'0] inv'3 result}
      {[@expl:copied ensures #0] [%#sown'1] forall t: MutBorrow.t t_T. self = C_Ok t
       -> result = C_Ok'0 (t.current) /\ resolve'0 t}
      {[@expl:copied ensures #1] [%#sown'2] forall e: t_E. self = C_Err e  -> result = C_Err'0 e}
      (! return' {result}) ]

end
module M_own__qyi10690551671874530681__cloned [#"own.rs" 212 4 214 17] (* OwnResult<&mut T, E> *)
  let%span sown = "own.rs" 212 18 212 22
  let%span sown'0 = "own.rs" 212 27 212 42
  let%span sown'1 = "own.rs" 207 14 211 5
  let%span sown'2 = "own.rs" 1 0 165 4
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinvariant'0 = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 158 14 158 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 163 14 163 101
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 168 14 168 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok (MutBorrow.t t_T)
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T
    | C_Err'0 t_E
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:MutBorrow.t t_T))= any
    [ good (field_0:MutBorrow.t t_T)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: MutBorrow.t t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) =
    [%#sinvariant'0] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_T)
  
  axiom precondition_fndef: [%#sown'2] forall args: t_T [precondition () args]. (let self_ = args in inv'0 self_)
   -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: [%#sown'2] forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
   -> (let self_ = args in inv res)
  
  let rec clone' (self_:t_T) (return'  (x:t_T))= {[@expl:clone requires] precondition () self_}
    any [ return''0 (result:t_T)-> {postcondition_once () self_ result} (! return' {result}) ] 
  
  predicate invariant''0 (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'1 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  predicate inv'2 (_0: t_E)
  
  predicate inv'3 (_0: t_OwnResult)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult [inv'3 x]. inv'3 x
  = match x with
    | C_Ok a_0 -> inv'1 a_0
    | C_Err a_0 -> inv'2 a_0
    end
  
  predicate inv'4 (_0: t_OwnResult'0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_OwnResult'0 [inv'4 x]. inv'4 x
  = match x with
    | C_Ok'0 a_0 -> inv a_0
    | C_Err'0 a_0 -> inv'2 a_0
    end
  
  type tuple  =
    { _p0: t_OwnResult; _p1: t_OwnResult'0 }
  
  predicate resolve'1 (_0: ()) =
    true
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0: [%#sown'2] forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
   -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. [%#sops'8] postcondition_once self args res
  = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) =
    true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
   -> ([%#sops'6] hist_inv b c)  -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: (), args: t_T, res_state: (), res: t_T. ([%#sops'2] postcondition_mut self args res_state res)
   -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: [%#sown'2] forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
   -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. [%#sops'0] postcondition_once self args res
  = (postcondition self args res /\ resolve'1 self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. [%#sops] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  let rec cloned[#"own.rs" 212 4 214 17] (self:t_OwnResult) (return'  (x:t_OwnResult'0))= {[@expl:cloned 'self' type invariant] [%#sown] inv'3 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = any [ br0 (x0:MutBorrow.t t_T)-> {self'0 = C_Ok x0} (! bb5) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb4) ] 
    | bb4 = s0 [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s1) | s1 =  [ &_0 <- C_Err'0 e ] s2 | s2 = bb11 ] 
    | bb5 = s0
      [ s0 = v_Ok {self'0} (fun (r0:MutBorrow.t t_T) ->  [ &t <- r0 ] s1)
      | s1 = clone' {t.current} (fun (_ret:t_T) ->  [ &_5 <- _ret ] s2)
      | s2 = bb6 ]
    
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'1 t} s1 | s1 = -{resolve'0 t}- s2 | s2 =  [ &_0 <- C_Ok'0 _5 ] s3 | s3 = bb11 ]
    
    | bb11 = return''0 {_0} ]
    )
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & t: MutBorrow.t t_T = Any.any_l ()
    | & _5: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ]
    
    [ return''0 (result:t_OwnResult'0)-> {[@expl:cloned result type invariant] [%#sown'0] inv'4 result}
      {[@expl:cloned ensures] [%#sown'1] match { _p0 = self; _p1 = result } with
        | {_p0 = C_Ok s ; _p1 = C_Ok'0 r} -> postcondition () s.current r
        | {_p0 = C_Err s ; _p1 = C_Err'0 r} -> s = r
        | _ -> false
        end}
      (! return' {result}) ]

end
module M_own__qyi11106003418932042655__transpose [#"own.rs" 228 4 228 53] (* OwnResult<std::option::Option<T>, E> *)
  let%span sown = "own.rs" 228 21 228 25
  let%span sown'0 = "own.rs" 228 30 228 53
  let%span sown'1 = "own.rs" 225 14 225 60
  let%span sown'2 = "own.rs" 226 14 226 94
  let%span sown'3 = "own.rs" 227 14 227 90
  
  use creusot.prelude.Any
  
  type t_T
  
  type t_Option  =
    | C_None
    | C_Some t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_Option
    | C_Err t_E
  
  let rec v_Err (input:t_OwnResult) (ret  (field_0:t_E))= any
    [ good (field_0:t_E)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T
    | C_Err'0 t_E
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_OwnResult'0
  
  let rec v_Ok (input:t_OwnResult) (ret  (field_0:t_Option))= any
    [ good (field_0:t_Option)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Option [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  
  let rec v_Some (input:t_Option) (ret  (field_0:t_T))= any
    [ good (field_0:t_T)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv a_0
    end
  
  predicate inv'1 (_0: t_E)
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x
  = match x with
    | C_Ok a_0 -> inv'0 a_0
    | C_Err a_0 -> inv'1 a_0
    end
  
  predicate inv'3 (_0: t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult'0 [inv'3 x]. inv'3 x
  = match x with
    | C_Ok'0 a_0 -> inv a_0
    | C_Err'0 a_0 -> inv'1 a_0
    end
  
  predicate inv'4 (_0: t_Option'0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option'0 [inv'4 x]. inv'4 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec transpose[#"own.rs" 228 4 228 53] (self:t_OwnResult) (return'  (x:t_Option'0))= {[@expl:transpose 'self' type invariant] [%#sown] inv'2 self}
    (! bb0
    [ bb0 = bb3
    | bb3 = any [ br0 (x0:t_Option)-> {self'0 = C_Ok x0} (! bb5) | br1 (x0:t_E)-> {self'0 = C_Err x0} (! bb8) ] 
    | bb8 = s0 [ s0 = v_Err {self'0} (fun (r0:t_E) ->  [ &e <- r0 ] s1) | s1 =  [ &_11 <- C_Err'0 e ] s2 | s2 = bb14 ] 
    | bb14 = s0 [ s0 =  [ &_0 <- C_Some'0 _11 ] s1 | s1 = bb18 ] 
    | bb5 = v_Ok {self'0}
        (fun (r0:t_Option) -> any [ br0 -> {r0 = C_None} (! bb9) | br1 (x0:t_T)-> {r0 = C_Some x0} (! bb10) ] )
    | bb10 = s0
      [ s0 = v_Ok {self'0} (fun (r0:t_Option) -> v_Some {r0} (fun (r0'0:t_T) ->  [ &x <- r0'0 ] s1))
      | s1 =  [ &_8 <- C_Ok'0 x ] s2
      | s2 = bb11 ]
    
    | bb11 = s0 [ s0 =  [ &_0 <- C_Some'0 _8 ] s1 | s1 = bb18 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- C_None'0 ] s1 | s1 = bb18 ] 
    | bb18 = return''0 {_0} ]
    )
    [ & _0: t_Option'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & x: t_T = Any.any_l ()
    | & _8: t_OwnResult'0 = Any.any_l ()
    | & e: t_E = Any.any_l ()
    | & _11: t_OwnResult'0 = Any.any_l () ]
    
    [ return''0 (result:t_Option'0)-> {[@expl:transpose result type invariant] [%#sown'0] inv'4 result}
      {[@expl:transpose ensures #0] [%#sown'1] self = C_Ok (C_None)  -> result = C_None'0}
      {[@expl:transpose ensures #1] [%#sown'2] forall t: t_T. self = C_Ok (C_Some t)  -> result = C_Some'0 (C_Ok'0 t)}
      {[@expl:transpose ensures #2] [%#sown'3] forall e: t_E. self = C_Err e  -> result = C_Some'0 (C_Err'0 e)}
      (! return' {result}) ]

end
module M_own__qyi1891129895124532698__resolve_coherence__refines [#"own.rs" 25 4 25 31] (* <OwnResult<T, E> as creusot_contracts::Resolve> *)
  let%span sown = "own.rs" 25 4 25 31
  let%span sown'0 = "own.rs" 16 8 19 9
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  type t_T
  
  type t_E
  
  type t_OwnResult  =
    | C_Ok t_T
    | C_Err t_E
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 (_0: t_E)
  
  predicate structural_resolve (_0: t_OwnResult) =
    match _0 with
      | C_Ok x0 -> resolve x0
      | C_Err x0 -> resolve'0 x0
      end
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
  = match x with
    | C_Ok a_0 -> inv a_0
    | C_Err a_0 -> inv'0 a_0
    end
  
  predicate invariant' (self: t_OwnResult) =
    [%#sinvariant] inv'1 self
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x = invariant' x
  
  predicate resolve'1 [#"own.rs" 15 4 15 28] (self: t_OwnResult) =
    [%#sown'0] match self with
      | C_Ok t -> resolve t
      | C_Err e -> resolve'0 e
      end
  
  goal refines: [%#sown] forall self: t_OwnResult. structural_resolve self /\ inv'2 self
   -> structural_resolve self /\ (forall result: (). resolve'1 self  -> resolve'1 self)
end
