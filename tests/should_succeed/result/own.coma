module M_own__qyi1891129895124532698__resolve_coherence (* <OwnResult<T, E> as creusot_contracts::Resolve> *)
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 (_0: t_E)
  
  predicate structural_resolve (_0: t_OwnResult) =
    match _0 with
      | C_Ok x0 -> resolve x0
      | C_Err x0 -> resolve'0 x0
      end
  
  predicate resolve'1 (self: t_OwnResult) =
    match self with
      | C_Ok t -> resolve t
      | C_Err e -> resolve'0 e
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_OwnResult
  
  function resolve_coherence (self'0: t_OwnResult) : ()
  
  goal vc_resolve_coherence: structural_resolve self -> ([@expl:resolve_coherence ensures] resolve'1 self)
end
module M_own__qyi9370700355788413623__is_ok (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv a_0
        | C_Err a_0 -> inv'0 a_0
        end
  
  predicate invariant' [@inline:trivial] (self: t_OwnResult) = inv'1 self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x = invariant' x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_ok (self: t_OwnResult) (return' (x: bool)) = {[@expl:is_ok 'self' type invariant] inv'2 self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb3) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb1) ]
    | bb1 = s0 [ s0 = [ &_0 <- false ] s1 | s1 = bb4 ]
    | bb3 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = bb4 ]
    | bb4 = return''0 {_0} ] [ & _0: bool = Any.any_l () | & self'0: t_OwnResult = self ])
    [ return''0 (result: bool) -> {[@expl:is_ok ensures] result = (exists t: t_T. self = C_Ok t)} (! return' {result}) ]
end
module M_own__qyi9370700355788413623__is_err (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv a_0
        | C_Err a_0 -> inv'0 a_0
        end
  
  predicate invariant' [@inline:trivial] (self: t_OwnResult) = inv'1 self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x = invariant' x
  
  let rec is_ok (self: t_OwnResult) (return' (x: bool)) = {[@expl:is_ok 'self' type invariant] inv'2 self}
    any [ return''0 (result: bool) -> {result = (exists t: t_T. self = C_Ok t)} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_err (self: t_OwnResult) (return' (x: bool)) = {[@expl:is_err 'self' type invariant] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 = is_ok {self'0} (fun (_ret: bool) -> [ &_3 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- not _3 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: bool = Any.any_l () | & self'0: t_OwnResult = self | & _3: bool = Any.any_l () ])
    [ return''0 (result: bool) -> {[@expl:is_err ensures] result = (exists e: t_E. self = C_Err e)}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__ok (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  type t_Option = C_None | C_Some t_T
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv a_0
        end
  
  predicate inv'2 (_0: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'0 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ok (self: t_OwnResult) (return' (x: t_Option)) = {[@expl:ok 'self' type invariant] inv'1 self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &x'0 <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv x'0} s2
      | s2 = -{resolve x'0}- s3
      | s3 = [ &_0 <- C_None ] s4
      | s4 = bb9 ]
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &x <- r0 ] s1) | s1 = [ &_0 <- C_Some x ] s2 | s2 = bb9 ]
    | bb9 = return''0 {_0} ]
    [ & _0: t_Option = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ])
    [ return''0 (result: t_Option) -> {[@expl:ok result type invariant] inv'2 result}
      {[@expl:ok ensures #0] forall t: t_T. self = C_Ok t -> result = C_Some t}
      {[@expl:ok ensures #1] (exists e: t_E. self = C_Err e) -> result = C_None}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__err (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  type t_Option = C_None | C_Some t_E
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_T)
  
  predicate resolve (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv a_0
        | C_Err a_0 -> inv'0 a_0
        end
  
  predicate inv'2 (_0: t_Option)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option [inv'2 x]. inv'2 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv'0 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec err (self: t_OwnResult) (return' (x: t_Option)) = {[@expl:err 'self' type invariant] inv'1 self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &x'0 <- r0 ] s1) | s1 = [ &_0 <- C_Some x'0 ] s2 | s2 = bb9 ]
    | bb4 = s0
      [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &x <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv x} s2
      | s2 = -{resolve x}- s3
      | s3 = [ &_0 <- C_None ] s4
      | s4 = bb9 ]
    | bb9 = return''0 {_0} ]
    [ & _0: t_Option = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ])
    [ return''0 (result: t_Option) -> {[@expl:err result type invariant] inv'2 result}
      {[@expl:err ensures #0] (exists t: t_T. self = C_Ok t) -> result = C_None}
      {[@expl:err ensures #1] forall e: t_E. self = C_Err e -> result = C_Some e}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__as_ref (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  type t_OwnResult'0 = C_Ok'0 t_T | C_Err'0 t_E
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv a_0
        | C_Err a_0 -> inv'0 a_0
        end
  
  predicate invariant' [@inline:trivial] (self: t_OwnResult) = inv'1 self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'3 (_0: t_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_T [inv'3 x]. inv'3 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: t_E) = inv'0 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'4 (_0: t_E)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_E [inv'4 x]. inv'4 x = invariant''1 x
  
  predicate inv'5 (_0: t_OwnResult'0)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_OwnResult'0 [inv'5 x]. inv'5 x
      = match x with
        | C_Ok'0 a_0 -> inv'3 a_0
        | C_Err'0 a_0 -> inv'4 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec as_ref (self: t_OwnResult) (return' (x: t_OwnResult'0)) = {[@expl:as_ref 'self' type invariant] inv'2 self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &x'0 <- r0 ] s1) | s1 = [ &_0 <- C_Err'0 x'0 ] s2 | s2 = bb5 ]
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &x <- r0 ] s1) | s1 = [ &_0 <- C_Ok'0 x ] s2 | s2 = bb5 ]
    | bb5 = return''0 {_0} ]
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ])
    [ return''0 (result: t_OwnResult'0) -> {[@expl:as_ref result type invariant] inv'5 result}
      {[@expl:as_ref ensures #0] forall t: t_T. self = C_Ok t -> result = C_Ok'0 t}
      {[@expl:as_ref ensures #1] forall e: t_E. self = C_Err e -> result = C_Err'0 e}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__as_mut (* OwnResult<T, E> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_E)
  
  type t_OwnResult'0 = C_Ok'0 (MutBorrow.t t_T) | C_Err'0 (MutBorrow.t t_E)
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_E) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: MutBorrow.t t_E)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_E [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_E) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_E) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv'1 (_0: t_T)
  
  predicate invariant''0 [@inline:trivial] (self: MutBorrow.t t_T) = inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'2 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_T [inv'2 x]. inv'2 x = invariant''0 x
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t t_T) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t t_T) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate inv'3 (_0: t_OwnResult)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult [inv'3 x]. inv'3 x
      = match x with
        | C_Ok a_0 -> inv'1 a_0
        | C_Err a_0 -> inv a_0
        end
  
  predicate invariant''1 [@inline:trivial] (self: MutBorrow.t t_OwnResult) = inv'3 self.current /\ inv'3 self.final
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'4 (_0: MutBorrow.t t_OwnResult)
  
  axiom inv_axiom'2 [@rewrite]: forall x: MutBorrow.t t_OwnResult [inv'4 x]. inv'4 x = invariant''1 x
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_OwnResult) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: MutBorrow.t t_OwnResult) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  predicate inv'5 (_0: t_OwnResult'0)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_OwnResult'0 [inv'5 x]. inv'5 x
      = match x with
        | C_Ok'0 a_0 -> inv'2 a_0
        | C_Err'0 a_0 -> inv'0 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec as_mut (self: MutBorrow.t t_OwnResult) (return' (x: t_OwnResult'0)) =
    {[@expl:as_mut 'self' type invariant] inv'4 self}
    (! bb0
    [ bb0 = any
      [ br0 (x0: t_T) -> {self'0.current = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0.current = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = v_Err {self'0.current}
          (fun (r0: t_E) ->
            {inv r0}
            MutBorrow.borrow_final <t_E> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
              (fun (_ret: MutBorrow.t t_E) ->
                [ &x'0 <- _ret ] -{inv _ret.final}-
                [ &self'0 <- { self'0 with current = C_Err _ret.final } ] s1))
      | s1 = {inv x'0.current}
        MutBorrow.borrow_final <t_E> {x'0.current} {MutBorrow.get_id x'0}
          (fun (_ret: MutBorrow.t t_E) ->
            [ &_7 <- _ret ] -{inv _ret.final}-
            [ &x'0 <- { x'0 with current = _ret.final } ] s2)
      | s2 = [ &_0 <- C_Err'0 _7 ] s3
      | s3 = {[@expl:type invariant] inv'0 x'0} s4
      | s4 = -{resolve'0 x'0}- s5
      | s5 = bb5 ]
    | bb4 = s0
      [ s0 = v_Ok {self'0.current}
          (fun (r0: t_T) ->
            {inv'1 r0}
            MutBorrow.borrow_final <t_T> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
              (fun (_ret: MutBorrow.t t_T) ->
                [ &x <- _ret ] -{inv'1 _ret.final}-
                [ &self'0 <- { self'0 with current = C_Ok _ret.final } ] s1))
      | s1 = {inv'1 x.current}
        MutBorrow.borrow_final <t_T> {x.current} {MutBorrow.get_id x}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_5 <- _ret ] -{inv'1 _ret.final}-
            [ &x <- { x with current = _ret.final } ] s2)
      | s2 = [ &_0 <- C_Ok'0 _5 ] s3
      | s3 = {[@expl:type invariant] inv'2 x} s4
      | s4 = -{resolve'2 x}- s5
      | s5 = bb5 ]
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'4 self'0} s1 | s1 = -{resolve'4 self'0}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: MutBorrow.t t_OwnResult = self
    | & x: MutBorrow.t t_T = Any.any_l ()
    | & _5: MutBorrow.t t_T = Any.any_l ()
    | & x'0: MutBorrow.t t_E = Any.any_l ()
    | & _7: MutBorrow.t t_E = Any.any_l () ])
    [ return''0 (result: t_OwnResult'0) -> {[@expl:as_mut result type invariant] inv'5 result}
      {[@expl:as_mut ensures] exists t: MutBorrow.t t_T. self.current = C_Ok (t.current)
          /\ self.final = C_Ok (t.final) /\ result = C_Ok'0 t
        \/ (exists e: MutBorrow.t t_E. self.current = C_Err (e.current)
          /\ self.final = C_Err (e.final) /\ result = C_Err'0 e)}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__unwrap (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap (self: t_OwnResult) (return' (x: t_T)) = {[@expl:unwrap 'self' type invariant] inv'1 self}
    {[@expl:unwrap requires] exists t: t_T. self = C_Ok t}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &_e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv _e} s2
      | s2 = -{resolve _e}- s3
      | s3 = {false} any ]
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &t <- r0 ] s1) | s1 = [ &_0 <- t ] s2 | s2 = bb6 ]
    | bb6 = return''0 {_0} ]
    [ & _0: t_T = Any.any_l () | & self'0: t_OwnResult = self | & t: t_T = Any.any_l () | & _e: t_E = Any.any_l () ])
    [ return''0 (result: t_T) -> {[@expl:unwrap result type invariant] inv'0 result}
      {[@expl:unwrap ensures] C_Ok result = self}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__expect (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec expect (self: t_OwnResult) (msg: string) (return' (x: t_T)) =
    {[@expl:expect 'self' type invariant] inv'1 self}
    {[@expl:expect requires] exists t: t_T. self = C_Ok t}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &_e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv _e} s2
      | s2 = -{resolve _e}- s3
      | s3 = {false} any ]
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &t <- r0 ] s1) | s1 = [ &_0 <- t ] s2 | s2 = bb6 ]
    | bb6 = return''0 {_0} ]
    [ & _0: t_T = Any.any_l () | & self'0: t_OwnResult = self | & t: t_T = Any.any_l () | & _e: t_E = Any.any_l () ])
    [ return''0 (result: t_T) -> {[@expl:expect result type invariant] inv'0 result}
      {[@expl:expect ensures] C_Ok result = self}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__unwrap_err (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_T)
  
  predicate resolve (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv a_0
        | C_Err a_0 -> inv'0 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap_err (self: t_OwnResult) (return' (x: t_E)) = {[@expl:unwrap_err 'self' type invariant] inv'1 self}
    {[@expl:unwrap_err requires] exists e: t_E. self = C_Err e}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- e ] s2 | s2 = bb6 ]
    | bb6 = return''0 {_0}
    | bb4 = s0
      [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &_t <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv _t} s2
      | s2 = -{resolve _t}- s3
      | s3 = {false} any ] ]
    [ & _0: t_E = Any.any_l () | & self'0: t_OwnResult = self | & _t: t_T = Any.any_l () | & e: t_E = Any.any_l () ])
    [ return''0 (result: t_E) -> {[@expl:unwrap_err result type invariant] inv'0 result}
      {[@expl:unwrap_err ensures] C_Err result = self}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__unwrap_or (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  predicate inv'0 (_0: t_T)
  
  predicate resolve'0 (_0: t_T)
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap_or (self: t_OwnResult) (default: t_T) (return' (x: t_T)) =
    {[@expl:unwrap_or 'self' type invariant] inv'1 self}
    {[@expl:unwrap_or 'default' type invariant] inv'0 default}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb2) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv e} s2
      | s2 = -{resolve e}- s3
      | s3 = [ &_0 <- default'0 ] s4
      | s4 = bb9 ]
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'0 default'0} s1 | s1 = -{resolve'0 default'0}- s2 | s2 = bb4 ]
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &t <- r0 ] s1) | s1 = [ &_0 <- t ] s2 | s2 = bb9 ]
    | bb9 = return''0 {_0} ]
    [ & _0: t_T = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & default'0: t_T = default
    | & t: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return''0 (result: t_T) -> {[@expl:unwrap_or result type invariant] inv'0 result}
      {[@expl:unwrap_or ensures #0] forall t: t_T. self = C_Ok t -> result = t}
      {[@expl:unwrap_or ensures #1] (exists e: t_E. self = C_Err e) -> result = default}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__unwrap_or_default (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv a_0
        | C_Err a_0 -> inv'0 a_0
        end
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 (_0: t_E)
  
  predicate resolve'1 (self: t_OwnResult) =
    match self with
      | C_Ok t -> resolve t
      | C_Err e -> resolve'0 e
      end
  
  predicate resolve'2 [@inline:trivial] (_0: t_OwnResult) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate precondition (self: ()) (args: ())
  
  axiom precondition_fndef: forall args: () [precondition () args]. (let () = args in true) -> precondition () args
  
  predicate postcondition_once (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef: forall args: (), res: t_T [postcondition_once () args res]. postcondition_once () args res
      -> (let () = args in inv res)
  
  let rec default (return' (x: t_T)) = {[@expl:default requires] precondition () ()}
    any [ return''0 (result: t_T) -> {postcondition_once () () result} (! return' {result}) ]
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate resolve'3 [@inline:trivial] (_0: ()) = true
  
  meta "rewrite_def" predicate resolve'3
  
  predicate postcondition_mut (self: ()) (args: ()) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: (), res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let () = args in inv res)
  
  function fn_mut_once (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: (), res: t_T. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef'1: forall args: (), res: t_T [postcondition () args res]. postcondition () args res
      -> (let () = args in inv res)
  
  function fn_once (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: (), res: t_T. postcondition_once self args res
      = (postcondition self args res /\ resolve'3 self)
  
  function fn_mut (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: (), res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap_or_default (self: t_OwnResult) (return' (x: t_T)) =
    {[@expl:unwrap_or_default 'self' type invariant] inv'1 self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 self'0} s1
      | s1 = -{resolve'2 self'0}- s2
      | s2 = default (fun (_ret: t_T) -> [ &_0 <- _ret ] s3)
      | s3 = bb7 ]
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &x <- r0 ] s1) | s1 = [ &_0 <- x ] s2 | s2 = bb7 ]
    | bb7 = return''0 {_0} ] [ & _0: t_T = Any.any_l () | & self'0: t_OwnResult = self | & x: t_T = Any.any_l () ])
    [ return''0 (result: t_T) -> {[@expl:unwrap_or_default result type invariant] inv result}
      {[@expl:unwrap_or_default ensures #0] forall t: t_T. self = C_Ok t -> result = t}
      {[@expl:unwrap_or_default ensures #1] (exists e: t_E. self = C_Err e) -> postcondition () () result}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__and (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  type t_U
  
  type t_OwnResult'0 = C_Ok'0 t_U | C_Err'0 t_E
  
  predicate inv (_0: t_U)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult'0)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult'0 [inv'1 x]. inv'1 x
      = match x with
        | C_Ok'0 a_0 -> inv a_0
        | C_Err'0 a_0 -> inv'0 a_0
        end
  
  predicate resolve (_0: t_U)
  
  predicate resolve'0 (_0: t_E)
  
  predicate resolve'1 (self: t_OwnResult'0) =
    match self with
      | C_Ok'0 t -> resolve t
      | C_Err'0 e -> resolve'0 e
      end
  
  predicate resolve'2 [@inline:trivial] (_0: t_OwnResult'0) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv'2 (_0: t_T)
  
  predicate resolve'3 (_0: t_T)
  
  predicate inv'3 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'3 x]. inv'3 x
      = match x with
        | C_Ok a_0 -> inv'2 a_0
        | C_Err a_0 -> inv'0 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec and (self: t_OwnResult) (res: t_OwnResult'0) (return' (x: t_OwnResult'0)) =
    {[@expl:and 'self' type invariant] inv'3 self}
    {[@expl:and 'res' type invariant] inv'1 res}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 res'0} s1
      | s1 = -{resolve'2 res'0}- s2
      | s2 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s3)
      | s3 = [ &_0 <- C_Err'0 e ] s4
      | s4 = bb10 ]
    | bb4 = s0
      [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &x <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv'2 x} s2
      | s2 = -{resolve'3 x}- s3
      | s3 = [ &_0 <- res'0 ] s4
      | s4 = bb10 ]
    | bb10 = return''0 {_0} ]
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & res'0: t_OwnResult'0 = res
    | & x: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return''0 (result: t_OwnResult'0) -> {[@expl:and result type invariant] inv'1 result}
      {[@expl:and ensures #0] (exists t: t_T. self = C_Ok t) -> result = res}
      {[@expl:and ensures #1] forall e: t_E. self = C_Err e -> result = C_Err'0 e}
      (! return' {result}) ]
end
module M_own__qyi9370700355788413623__or (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_E)
  
  predicate resolve (_0: t_E)
  
  type t_F
  
  type t_OwnResult'0 = C_Ok'0 t_T | C_Err'0 t_F
  
  predicate inv'0 (_0: t_T)
  
  predicate inv'1 (_0: t_F)
  
  predicate inv'2 (_0: t_OwnResult'0)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult'0 [inv'2 x]. inv'2 x
      = match x with
        | C_Ok'0 a_0 -> inv'0 a_0
        | C_Err'0 a_0 -> inv'1 a_0
        end
  
  predicate resolve'0 (_0: t_T)
  
  predicate resolve'1 (_0: t_F)
  
  predicate resolve'2 (self: t_OwnResult'0) =
    match self with
      | C_Ok'0 t -> resolve'0 t
      | C_Err'0 e -> resolve'1 e
      end
  
  predicate resolve'3 [@inline:trivial] (_0: t_OwnResult'0) = resolve'2 _0
  
  meta "rewrite_def" predicate resolve'3
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv'3 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'3 x]. inv'3 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec or (self: t_OwnResult) (res: t_OwnResult'0) (return' (x: t_OwnResult'0)) =
    {[@expl:or 'self' type invariant] inv'3 self}
    {[@expl:or 'res' type invariant] inv'2 res}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb2) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv e} s2
      | s2 = -{resolve e}- s3
      | s3 = [ &_0 <- res'0 ] s4
      | s4 = bb10 ]
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'2 res'0} s1 | s1 = -{resolve'3 res'0}- s2 | s2 = bb4 ]
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &v <- r0 ] s1) | s1 = [ &_0 <- C_Ok'0 v ] s2 | s2 = bb10 ]
    | bb10 = return''0 {_0} ]
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & res'0: t_OwnResult'0 = res
    | & v: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return''0 (result: t_OwnResult'0) -> {[@expl:or result type invariant] inv'2 result}
      {[@expl:or ensures #0] forall t: t_T. self = C_Ok t -> result = C_Ok'0 t}
      {[@expl:or ensures #1] (exists e: t_E. self = C_Err e) -> result = res}
      (! return' {result}) ]
end
module M_own__qyi1738359920797260731__copied (* OwnResult<&T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  type t_OwnResult'0 = C_Ok'0 t_T | C_Err'0 t_E
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate inv'1 (_0: t_E)
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv'1 a_0
        end
  
  predicate inv'3 (_0: t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult'0 [inv'3 x]. inv'3 x
      = match x with
        | C_Ok'0 a_0 -> inv a_0
        | C_Err'0 a_0 -> inv'1 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec copied (self: t_OwnResult) (return' (x: t_OwnResult'0)) = {[@expl:copied 'self' type invariant] inv'2 self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- C_Err'0 e ] s2 | s2 = bb8 ]
    | bb4 = s0 [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &t <- r0 ] s1) | s1 = [ &_0 <- C_Ok'0 t ] s2 | s2 = bb8 ]
    | bb8 = return''0 {_0} ]
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & t: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return''0 (result: t_OwnResult'0) -> {[@expl:copied result type invariant] inv'3 result}
      {[@expl:copied ensures #0] forall t: t_T. self = C_Ok t -> result = C_Ok'0 t}
      {[@expl:copied ensures #1] forall e: t_E. self = C_Err e -> result = C_Err'0 e}
      (! return' {result}) ]
end
module M_own__qyi1738359920797260731__cloned (* OwnResult<&T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  type t_OwnResult'0 = C_Ok'0 t_T | C_Err'0 t_E
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_T)
  
  predicate invariant' [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_T)
  
  axiom precondition_fndef: forall args: t_T [precondition () args]. (let self_ = args in inv'0 self_)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  let rec clone' (self_: t_T) (return' (x: t_T)) = {[@expl:clone requires] precondition () self_}
    any [ return''0 (result: t_T) -> {postcondition_once () self_ result} (! return' {result}) ]
  
  predicate inv'1 (_0: t_E)
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv'1 a_0
        end
  
  predicate inv'3 (_0: t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult'0 [inv'3 x]. inv'3 x
      = match x with
        | C_Ok'0 a_0 -> inv a_0
        | C_Err'0 a_0 -> inv'1 a_0
        end
  
  type tuple = { _p0: t_OwnResult; _p1: t_OwnResult'0 }
  
  predicate resolve [@inline:trivial] (_0: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec cloned (self: t_OwnResult) (return' (x: t_OwnResult'0)) = {[@expl:cloned 'self' type invariant] inv'2 self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- C_Err'0 e ] s2 | s2 = bb10 ]
    | bb4 = s0
      [ s0 = v_Ok {self'0} (fun (r0: t_T) -> [ &t <- r0 ] s1)
      | s1 = clone' {t} (fun (_ret: t_T) -> [ &_5 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0 [ s0 = [ &_0 <- C_Ok'0 _5 ] s1 | s1 = bb10 ]
    | bb10 = return''0 {_0} ]
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & t: t_T = Any.any_l ()
    | & _5: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return''0 (result: t_OwnResult'0) -> {[@expl:cloned result type invariant] inv'3 result}
      {[@expl:cloned ensures] match { _p0 = self; _p1 = result } with
        | {_p0 = C_Ok s; _p1 = C_Ok'0 r} -> postcondition () s r
        | {_p0 = C_Err s; _p1 = C_Err'0 r} -> s = r
        | _ -> false
        end}
      (! return' {result}) ]
end
module M_own__qyi10690551671874530681__copied (* OwnResult<&mut T, E> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok (MutBorrow.t t_T) | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  type t_OwnResult'0 = C_Ok'0 t_T | C_Err'0 t_E
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: MutBorrow.t t_T)) = any
    [ good (field_0: MutBorrow.t t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: MutBorrow.t t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_T)
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_T) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_T) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate inv'1 (_0: t_E)
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv'1 a_0
        end
  
  predicate inv'3 (_0: t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult'0 [inv'3 x]. inv'3 x
      = match x with
        | C_Ok'0 a_0 -> inv a_0
        | C_Err'0 a_0 -> inv'1 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec copied (self: t_OwnResult) (return' (x: t_OwnResult'0)) = {[@expl:copied 'self' type invariant] inv'2 self}
    (! bb0
    [ bb0 = any
      [ br0 (x0: MutBorrow.t t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- C_Err'0 e ] s2 | s2 = bb8 ]
    | bb4 = s0
      [ s0 = v_Ok {self'0} (fun (r0: MutBorrow.t t_T) -> [ &t <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 t} s2
      | s2 = -{resolve'0 t}- s3
      | s3 = [ &_0 <- C_Ok'0 (t.current) ] s4
      | s4 = bb8 ]
    | bb8 = return''0 {_0} ]
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & t: MutBorrow.t t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return''0 (result: t_OwnResult'0) -> {[@expl:copied result type invariant] inv'3 result}
      {[@expl:copied ensures #0] forall t: MutBorrow.t t_T. self = C_Ok t -> result = C_Ok'0 (t.current) /\ resolve'0 t}
      {[@expl:copied ensures #1] forall e: t_E. self = C_Err e -> result = C_Err'0 e}
      (! return' {result}) ]
end
module M_own__qyi10690551671874530681__cloned (* OwnResult<&mut T, E> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok (MutBorrow.t t_T) | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  type t_OwnResult'0 = C_Ok'0 t_T | C_Err'0 t_E
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: MutBorrow.t t_T)) = any
    [ good (field_0: MutBorrow.t t_T) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: MutBorrow.t t_T [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_T)
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_T) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_T) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate invariant''0 [@inline:trivial] (self: t_T) = inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  predicate precondition (self: ()) (args: t_T)
  
  axiom precondition_fndef: forall args: t_T [precondition () args]. (let self_ = args in inv'1 self_)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef: forall args: t_T, res: t_T [postcondition_once () args res]. postcondition_once () args res
      -> (let self_ = args in inv res)
  
  let rec clone' (self_: t_T) (return' (x: t_T)) = {[@expl:clone requires] precondition () self_}
    any [ return''0 (result: t_T) -> {postcondition_once () self_ result} (! return' {result}) ]
  
  predicate inv'2 (_0: t_E)
  
  predicate inv'3 (_0: t_OwnResult)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult [inv'3 x]. inv'3 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv'2 a_0
        end
  
  predicate inv'4 (_0: t_OwnResult'0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_OwnResult'0 [inv'4 x]. inv'4 x
      = match x with
        | C_Ok'0 a_0 -> inv a_0
        | C_Err'0 a_0 -> inv'2 a_0
        end
  
  type tuple = { _p0: t_OwnResult; _p1: t_OwnResult'0 }
  
  predicate resolve'1 [@inline:trivial] (_0: ()) = true
  
  meta "rewrite_def" predicate resolve'1
  
  predicate postcondition_mut (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut () args () res]. postcondition_mut () args () res
      -> (let self_ = args in inv res)
  
  function fn_mut_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1: forall args: t_T, res: t_T [postcondition () args res]. postcondition () args res
      -> (let self_ = args in inv res)
  
  function fn_once (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: t_T, res: t_T. postcondition_once self args res
      = (postcondition self args res /\ resolve'1 self)
  
  function fn_mut (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec: forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec cloned (self: t_OwnResult) (return' (x: t_OwnResult'0)) = {[@expl:cloned 'self' type invariant] inv'3 self}
    (! bb0
    [ bb0 = any
      [ br0 (x0: MutBorrow.t t_T) -> {self'0 = C_Ok x0} (! bb4) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- C_Err'0 e ] s2 | s2 = bb10 ]
    | bb4 = s0
      [ s0 = v_Ok {self'0} (fun (r0: MutBorrow.t t_T) -> [ &t <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 t} s2
      | s2 = -{resolve'0 t}- s3
      | s3 = clone' {t.current} (fun (_ret: t_T) -> [ &_5 <- _ret ] s4)
      | s4 = bb5 ]
    | bb5 = s0 [ s0 = [ &_0 <- C_Ok'0 _5 ] s1 | s1 = bb10 ]
    | bb10 = return''0 {_0} ]
    [ & _0: t_OwnResult'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & t: MutBorrow.t t_T = Any.any_l ()
    | & _5: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return''0 (result: t_OwnResult'0) -> {[@expl:cloned result type invariant] inv'4 result}
      {[@expl:cloned ensures] match { _p0 = self; _p1 = result } with
        | {_p0 = C_Ok s; _p1 = C_Ok'0 r} -> postcondition () s.current r
        | {_p0 = C_Err s; _p1 = C_Err'0 r} -> s = r
        | _ -> false
        end}
      (! return' {result}) ]
end
module M_own__qyi11106003418932042655__transpose (* OwnResult<std::option::Option<T>, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_Option = C_None | C_Some t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_Option | C_Err t_E
  
  let rec v_Err (input: t_OwnResult) (ret (field_0: t_E)) = any
    [ good (field_0: t_E) -> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_E [C_Err field_0: t_OwnResult]. C_Err field_0 <> input} (! {false} any) ]
  
  type t_OwnResult'0 = C_Ok'0 t_T | C_Err'0 t_E
  
  type t_Option'0 = C_None'0 | C_Some'0 t_OwnResult'0
  
  let rec v_Ok (input: t_OwnResult) (ret (field_0: t_Option)) = any
    [ good (field_0: t_Option) -> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Option [C_Ok field_0: t_OwnResult]. C_Ok field_0 <> input} (! {false} any) ]
  
  let rec v_Some (input: t_Option) (ret (field_0: t_T)) = any
    [ good (field_0: t_T) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_T [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_Option)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option [inv'0 x]. inv'0 x
      = match x with
        | C_None -> true
        | C_Some a_0 -> inv a_0
        end
  
  predicate inv'1 (_0: t_E)
  
  predicate inv'2 (_0: t_OwnResult)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult [inv'2 x]. inv'2 x
      = match x with
        | C_Ok a_0 -> inv'0 a_0
        | C_Err a_0 -> inv'1 a_0
        end
  
  predicate inv'3 (_0: t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult'0 [inv'3 x]. inv'3 x
      = match x with
        | C_Ok'0 a_0 -> inv a_0
        | C_Err'0 a_0 -> inv'1 a_0
        end
  
  predicate inv'4 (_0: t_Option'0)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Option'0 [inv'4 x]. inv'4 x
      = match x with
        | C_None'0 -> true
        | C_Some'0 a_0 -> inv'3 a_0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec transpose (self: t_OwnResult) (return' (x: t_Option'0)) = {[@expl:transpose 'self' type invariant] inv'2 self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_Option) -> {self'0 = C_Ok x0} (! bb2) | br1 (x0: t_E) -> {self'0 = C_Err x0} (! bb5) ]
    | bb5 = s0 [ s0 = v_Err {self'0} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_11 <- C_Err'0 e ] s2 | s2 = bb11 ]
    | bb11 = s0 [ s0 = [ &_0 <- C_Some'0 _11 ] s1 | s1 = bb15 ]
    | bb2 = v_Ok {self'0}
        (fun (r0: t_Option) -> any [ br0 -> {r0 = C_None} (! bb6) | br1 (x0: t_T) -> {r0 = C_Some x0} (! bb7) ])
    | bb7 = s0
      [ s0 = v_Ok {self'0} (fun (r0: t_Option) -> v_Some {r0} (fun (r0'0: t_T) -> [ &x <- r0'0 ] s1))
      | s1 = [ &_8 <- C_Ok'0 x ] s2
      | s2 = bb8 ]
    | bb8 = s0 [ s0 = [ &_0 <- C_Some'0 _8 ] s1 | s1 = bb15 ]
    | bb6 = s0 [ s0 = [ &_0 <- C_None'0 ] s1 | s1 = bb15 ]
    | bb15 = return''0 {_0} ]
    [ & _0: t_Option'0 = Any.any_l ()
    | & self'0: t_OwnResult = self
    | & x: t_T = Any.any_l ()
    | & _8: t_OwnResult'0 = Any.any_l ()
    | & e: t_E = Any.any_l ()
    | & _11: t_OwnResult'0 = Any.any_l () ])
    [ return''0 (result: t_Option'0) -> {[@expl:transpose result type invariant] inv'4 result}
      {[@expl:transpose ensures #0] self = C_Ok (C_None) -> result = C_None'0}
      {[@expl:transpose ensures #1] forall t: t_T. self = C_Ok (C_Some t) -> result = C_Some'0 (C_Ok'0 t)}
      {[@expl:transpose ensures #2] forall e: t_E. self = C_Err e -> result = C_Some'0 (C_Err'0 e)}
      (! return' {result}) ]
end
module M_own__qyi1891129895124532698__resolve_coherence__refines (* <OwnResult<T, E> as creusot_contracts::Resolve> *)
  type t_T
  
  type t_E
  
  type t_OwnResult = C_Ok t_T | C_Err t_E
  
  predicate resolve (_0: t_T)
  
  predicate resolve'0 (_0: t_E)
  
  predicate structural_resolve (_0: t_OwnResult) =
    match _0 with
      | C_Ok x0 -> resolve x0
      | C_Err x0 -> resolve'0 x0
      end
  
  predicate inv (_0: t_T)
  
  predicate inv'0 (_0: t_E)
  
  predicate inv'1 (_0: t_OwnResult)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult [inv'1 x]. inv'1 x
      = match x with
        | C_Ok a_0 -> inv a_0
        | C_Err a_0 -> inv'0 a_0
        end
  
  predicate resolve'1 (self: t_OwnResult) =
    match self with
      | C_Ok t -> resolve t
      | C_Err e -> resolve'0 e
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_OwnResult. structural_resolve self /\ inv'1 self
      -> structural_resolve self /\ (forall result: (). resolve'1 self -> resolve'1 self)
end
