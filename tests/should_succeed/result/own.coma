module M_impl_OwnResult_T_E__is_ok (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  predicate inv_T (_1: t_T)
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate invariant_ref_OwnResult_T_E [@inline:trivial] (self: t_OwnResult_T_E) = inv_OwnResult_T_E self
  
  meta "rewrite_def" predicate invariant_ref_OwnResult_T_E
  
  predicate inv_ref_OwnResult_T_E [@inline:trivial] (_1: t_OwnResult_T_E) = invariant_ref_OwnResult_T_E _1
  
  meta "rewrite_def" predicate inv_ref_OwnResult_T_E
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_ok_T (self: t_OwnResult_T_E) (return (x: bool)) =
    {[@expl:is_ok 'self' type invariant] inv_ref_OwnResult_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb3) | br1 (x0: t_E) -> {self = Err x0} (! bb1) ]
    | bb1 = s0 [ s0 = [ &_0 <- false ] s1 | s1 = bb4 ]
    | bb3 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = bb4 ]
    | bb4 = return {_0} ] [ & _0: bool = Any.any_l () | & self: t_OwnResult_T_E = self ])
    [ return (result: bool) -> {[@expl:is_ok ensures] result = (exists t: t_T. self = Ok t)} (! return {result}) ]
end
module M_impl_OwnResult_T_E__is_err (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  predicate inv_T (_1: t_T)
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate invariant_ref_OwnResult_T_E [@inline:trivial] (self: t_OwnResult_T_E) = inv_OwnResult_T_E self
  
  meta "rewrite_def" predicate invariant_ref_OwnResult_T_E
  
  predicate inv_ref_OwnResult_T_E [@inline:trivial] (_1: t_OwnResult_T_E) = invariant_ref_OwnResult_T_E _1
  
  meta "rewrite_def" predicate inv_ref_OwnResult_T_E
  
  let rec is_ok_T (self: t_OwnResult_T_E) (return (x: bool)) =
    {[@expl:is_ok 'self' type invariant] inv_ref_OwnResult_T_E self}
    any [ return (result: bool) -> {result = (exists t: t_T. self = Ok t)} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_err_T (self: t_OwnResult_T_E) (return (x: bool)) =
    {[@expl:is_err 'self' type invariant] inv_ref_OwnResult_T_E self}
    (! bb0
    [ bb0 = s0 [ s0 = is_ok_T {self} (fun (_ret: bool) -> [ &_3 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- not _3 ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () | & self: t_OwnResult_T_E = self | & _3: bool = Any.any_l () ])
    [ return (result: bool) -> {[@expl:is_err ensures] result = (exists e: t_E. self = Err e)} (! return {result}) ]
end
module M_impl_OwnResult_T_E__ok (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  predicate inv_E (_1: t_E)
  
  predicate resolve_E (_1: t_E)
  
  type t_Option_T = None | Some t_T
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate inv_Option_T (_1: t_Option_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_T [inv_Option_T x]. inv_Option_T x
      = match x with
        | None -> true
        | Some f0 -> inv_T f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ok_T (self: t_OwnResult_T_E) (return (x: t_Option_T)) =
    {[@expl:ok 'self' type invariant] inv_OwnResult_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &x'0 <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_E x'0} s2
      | s2 = -{resolve_E x'0}- s3
      | s3 = [ &_0 <- None ] s4
      | s4 = bb9 ]
    | bb4 = s0 [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &x <- r0 ] s1) | s1 = [ &_0 <- Some x ] s2 | s2 = bb9 ]
    | bb9 = return {_0} ]
    [ & _0: t_Option_T = Any.any_l ()
    | & self: t_OwnResult_T_E = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ])
    [ return (result: t_Option_T) -> {[@expl:ok result type invariant] inv_Option_T result}
      {[@expl:ok ensures #0] forall t: t_T. self = Ok t -> result = Some t}
      {[@expl:ok ensures #1] (exists e: t_E. self = Err e) -> result = None}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__err (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  type t_Option_E = None | Some t_E
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate resolve_T (_1: t_T)
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate inv_Option_E (_1: t_Option_E)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Option_E [inv_Option_E x]. inv_Option_E x
      = match x with
        | None -> true
        | Some f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec err_T (self: t_OwnResult_T_E) (return (x: t_Option_E)) =
    {[@expl:err 'self' type invariant] inv_OwnResult_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &x'0 <- r0 ] s1) | s1 = [ &_0 <- Some x'0 ] s2 | s2 = bb9 ]
    | bb4 = s0
      [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &x <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_T x} s2
      | s2 = -{resolve_T x}- s3
      | s3 = [ &_0 <- None ] s4
      | s4 = bb9 ]
    | bb9 = return {_0} ]
    [ & _0: t_Option_E = Any.any_l ()
    | & self: t_OwnResult_T_E = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ])
    [ return (result: t_Option_E) -> {[@expl:err result type invariant] inv_Option_E result}
      {[@expl:err ensures #0] (exists t: t_T. self = Ok t) -> result = None}
      {[@expl:err ensures #1] forall e: t_E. self = Err e -> result = Some e}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__as_ref (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  type t_OwnResult_ref_T_ref_E = Ok'0 t_T | Err'0 t_E
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate invariant_ref_OwnResult_T_E [@inline:trivial] (self: t_OwnResult_T_E) = inv_OwnResult_T_E self
  
  meta "rewrite_def" predicate invariant_ref_OwnResult_T_E
  
  predicate inv_ref_OwnResult_T_E [@inline:trivial] (_1: t_OwnResult_T_E) = invariant_ref_OwnResult_T_E _1
  
  meta "rewrite_def" predicate inv_ref_OwnResult_T_E
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate invariant_ref_E [@inline:trivial] (self: t_E) = inv_E self
  
  meta "rewrite_def" predicate invariant_ref_E
  
  predicate inv_ref_E [@inline:trivial] (_1: t_E) = invariant_ref_E _1
  
  meta "rewrite_def" predicate inv_ref_E
  
  predicate inv_OwnResult_ref_T_ref_E (_1: t_OwnResult_ref_T_ref_E)
  
  axiom inv_axiom'0 [@rewrite]:
    forall x: t_OwnResult_ref_T_ref_E [inv_OwnResult_ref_T_ref_E x]. inv_OwnResult_ref_T_ref_E x
      = match x with
        | Ok'0 f0 -> inv_ref_T f0
        | Err'0 f0 -> inv_ref_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec as_ref_T (self: t_OwnResult_T_E) (return (x: t_OwnResult_ref_T_ref_E)) =
    {[@expl:as_ref 'self' type invariant] inv_ref_OwnResult_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &x'0 <- r0 ] s1) | s1 = [ &_0 <- Err'0 x'0 ] s2 | s2 = bb5 ]
    | bb4 = s0 [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &x <- r0 ] s1) | s1 = [ &_0 <- Ok'0 x ] s2 | s2 = bb5 ]
    | bb5 = return {_0} ]
    [ & _0: t_OwnResult_ref_T_ref_E = Any.any_l ()
    | & self: t_OwnResult_T_E = self
    | & x: t_T = Any.any_l ()
    | & x'0: t_E = Any.any_l () ])
    [ return (result: t_OwnResult_ref_T_ref_E) ->
    {[@expl:as_ref result type invariant] inv_OwnResult_ref_T_ref_E result}
      {[@expl:as_ref ensures #0] forall t: t_T. self = Ok t -> result = Ok'0 t}
      {[@expl:as_ref ensures #1] forall e: t_E. self = Err e -> result = Err'0 e}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__as_mut (* OwnResult<T, E> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  predicate inv_E (_1: t_E)
  
  type t_OwnResult_ref_T_ref_E = Ok'0 (MutBorrow.t t_T) | Err'0 (MutBorrow.t t_E)
  
  predicate invariant_ref_E [@inline:trivial] (self: MutBorrow.t t_E) = inv_E self.current /\ inv_E self.final
  
  meta "rewrite_def" predicate invariant_ref_E
  
  predicate inv_ref_E [@inline:trivial] (_1: MutBorrow.t t_E) = invariant_ref_E _1
  
  meta "rewrite_def" predicate inv_ref_E
  
  predicate resolve_ref_E [@inline:trivial] (_1: MutBorrow.t t_E) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_E
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate invariant_ref_OwnResult_T_E [@inline:trivial] (self: MutBorrow.t t_OwnResult_T_E) =
    inv_OwnResult_T_E self.current /\ inv_OwnResult_T_E self.final
  
  meta "rewrite_def" predicate invariant_ref_OwnResult_T_E
  
  predicate inv_ref_OwnResult_T_E [@inline:trivial] (_1: MutBorrow.t t_OwnResult_T_E) = invariant_ref_OwnResult_T_E _1
  
  meta "rewrite_def" predicate inv_ref_OwnResult_T_E
  
  predicate resolve_ref_OwnResult_T_E [@inline:trivial] (_1: MutBorrow.t t_OwnResult_T_E) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_OwnResult_T_E
  
  predicate inv_OwnResult_ref_T_ref_E (_1: t_OwnResult_ref_T_ref_E)
  
  axiom inv_axiom'0 [@rewrite]:
    forall x: t_OwnResult_ref_T_ref_E [inv_OwnResult_ref_T_ref_E x]. inv_OwnResult_ref_T_ref_E x
      = match x with
        | Ok'0 f0 -> inv_ref_T f0
        | Err'0 f0 -> inv_ref_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec as_mut_T (self: MutBorrow.t t_OwnResult_T_E) (return (x: t_OwnResult_ref_T_ref_E)) =
    {[@expl:as_mut 'self' type invariant] inv_ref_OwnResult_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self.current = Ok x0} (! bb4) | br1 (x0: t_E) -> {self.current = Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = elim_Err {self.current}
          (fun (r0: t_E) ->
            {inv_E r0}
            MutBorrow.borrow_final <t_E> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
              (fun (_ret: MutBorrow.t t_E) ->
                [ &x'0 <- _ret ] -{inv_E _ret.final}-
                [ &self <- { self with current = Err _ret.final } ] s1))
      | s1 = {inv_E x'0.current}
        MutBorrow.borrow_final <t_E> {x'0.current} {MutBorrow.get_id x'0}
          (fun (_ret: MutBorrow.t t_E) ->
            [ &_7 <- _ret ] -{inv_E _ret.final}-
            [ &x'0 <- { x'0 with current = _ret.final } ] s2)
      | s2 = [ &_0 <- Err'0 _7 ] s3
      | s3 = {[@expl:type invariant] inv_ref_E x'0} s4
      | s4 = -{resolve_ref_E x'0}- s5
      | s5 = bb5 ]
    | bb4 = s0
      [ s0 = elim_Ok {self.current}
          (fun (r0: t_T) ->
            {inv_T r0}
            MutBorrow.borrow_final <t_T> {r0} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
              (fun (_ret: MutBorrow.t t_T) ->
                [ &x <- _ret ] -{inv_T _ret.final}-
                [ &self <- { self with current = Ok _ret.final } ] s1))
      | s1 = {inv_T x.current}
        MutBorrow.borrow_final <t_T> {x.current} {MutBorrow.get_id x}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_5 <- _ret ] -{inv_T _ret.final}-
            [ &x <- { x with current = _ret.final } ] s2)
      | s2 = [ &_0 <- Ok'0 _5 ] s3
      | s3 = {[@expl:type invariant] inv_ref_T x} s4
      | s4 = -{resolve_ref_T x}- s5
      | s5 = bb5 ]
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv_ref_OwnResult_T_E self} s1
      | s1 = -{resolve_ref_OwnResult_T_E self}- s2
      | s2 = return {_0} ] ]
    [ & _0: t_OwnResult_ref_T_ref_E = Any.any_l ()
    | & self: MutBorrow.t t_OwnResult_T_E = self
    | & x: MutBorrow.t t_T = Any.any_l ()
    | & _5: MutBorrow.t t_T = Any.any_l ()
    | & x'0: MutBorrow.t t_E = Any.any_l ()
    | & _7: MutBorrow.t t_E = Any.any_l () ])
    [ return (result: t_OwnResult_ref_T_ref_E) ->
    {[@expl:as_mut result type invariant] inv_OwnResult_ref_T_ref_E result}
      {[@expl:as_mut ensures] exists t: MutBorrow.t t_T. self.current = Ok (t.current)
          /\ self.final = Ok (t.final) /\ result = Ok'0 t
        \/ (exists e: MutBorrow.t t_E. self.current = Err (e.current)
          /\ self.final = Err (e.final) /\ result = Err'0 e)}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__unwrap (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  predicate inv_E (_1: t_E)
  
  predicate resolve_E (_1: t_E)
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap_T (self: t_OwnResult_T_E) (return (x: t_T)) =
    {[@expl:unwrap 'self' type invariant] inv_OwnResult_T_E self}
    {[@expl:unwrap requires] exists t: t_T. self = Ok t}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &_e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_E _e} s2
      | s2 = -{resolve_E _e}- s3
      | s3 = {false} any ]
    | bb4 = s0 [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &t <- r0 ] s1) | s1 = [ &_0 <- t ] s2 | s2 = bb6 ]
    | bb6 = return {_0} ]
    [ & _0: t_T = Any.any_l () | & self: t_OwnResult_T_E = self | & t: t_T = Any.any_l () | & _e: t_E = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:unwrap result type invariant] inv_T result}
      {[@expl:unwrap ensures] Ok result = self}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__expect (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  predicate inv_E (_1: t_E)
  
  predicate resolve_E (_1: t_E)
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec expect_T (self: t_OwnResult_T_E) (msg: string) (return (x: t_T)) =
    {[@expl:expect 'self' type invariant] inv_OwnResult_T_E self}
    {[@expl:expect requires] exists t: t_T. self = Ok t}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &_e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_E _e} s2
      | s2 = -{resolve_E _e}- s3
      | s3 = {false} any ]
    | bb4 = s0 [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &t <- r0 ] s1) | s1 = [ &_0 <- t ] s2 | s2 = bb6 ]
    | bb6 = return {_0} ]
    [ & _0: t_T = Any.any_l () | & self: t_OwnResult_T_E = self | & t: t_T = Any.any_l () | & _e: t_E = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:expect result type invariant] inv_T result}
      {[@expl:expect ensures] Ok result = self}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__unwrap_err (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate resolve_T (_1: t_T)
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap_err_T (self: t_OwnResult_T_E) (return (x: t_E)) =
    {[@expl:unwrap_err 'self' type invariant] inv_OwnResult_T_E self}
    {[@expl:unwrap_err requires] exists e: t_E. self = Err e}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- e ] s2 | s2 = bb6 ]
    | bb6 = return {_0}
    | bb4 = s0
      [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &_t <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_T _t} s2
      | s2 = -{resolve_T _t}- s3
      | s3 = {false} any ] ]
    [ & _0: t_E = Any.any_l () | & self: t_OwnResult_T_E = self | & _t: t_T = Any.any_l () | & e: t_E = Any.any_l () ])
    [ return (result: t_E) -> {[@expl:unwrap_err result type invariant] inv_E result}
      {[@expl:unwrap_err ensures] Err result = self}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__unwrap_or (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  predicate inv_E (_1: t_E)
  
  predicate resolve_E (_1: t_E)
  
  predicate inv_T (_1: t_T)
  
  predicate resolve_T (_1: t_T)
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap_or_T (self: t_OwnResult_T_E) (default: t_T) (return (x: t_T)) =
    {[@expl:unwrap_or 'self' type invariant] inv_OwnResult_T_E self}
    {[@expl:unwrap_or 'default' type invariant] inv_T default}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb2) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_E e} s2
      | s2 = -{resolve_E e}- s3
      | s3 = [ &_0 <- default ] s4
      | s4 = bb9 ]
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv_T default} s1 | s1 = -{resolve_T default}- s2 | s2 = bb4 ]
    | bb4 = s0 [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &t <- r0 ] s1) | s1 = [ &_0 <- t ] s2 | s2 = bb9 ]
    | bb9 = return {_0} ]
    [ & _0: t_T = Any.any_l ()
    | & self: t_OwnResult_T_E = self
    | & default: t_T = default
    | & t: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:unwrap_or result type invariant] inv_T result}
      {[@expl:unwrap_or ensures #0] forall t: t_T. self = Ok t -> result = t}
      {[@expl:unwrap_or ensures #1] (exists e: t_E. self = Err e) -> result = default}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__unwrap_or_default (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  predicate inv_T (_1: t_T)
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate resolve_T (_1: t_T)
  
  predicate resolve_E (_1: t_E)
  
  predicate resolve_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom resolve_axiom [@rewrite]: forall x: t_OwnResult_T_E [resolve_OwnResult_T_E x]. resolve_OwnResult_T_E x
      = match x with
        | Ok x0 -> resolve_T x0
        | Err x0 -> resolve_E x0
        end
  
  predicate precondition_default (self: ()) (args: ())
  
  axiom precondition_fndef: forall args: () [precondition_default () args]. (let () = args in true)
      -> precondition_default () args
  
  predicate postcondition_once_default (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef:
    forall args: (), res: t_T [postcondition_once_default () args res]. postcondition_once_default () args res
      -> (let () = args in inv_T res)
  
  let rec default_T (return (x: t_T)) = {[@expl:default requires] precondition_default () ()}
    any [ return (result: t_T) -> {postcondition_once_default () () result} (! return {result}) ]
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate resolve_default [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default
  
  predicate postcondition_mut_default (self: ()) (args: ()) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: (), res: t_T [postcondition_mut_default () args () res]. postcondition_mut_default () args () res
      -> (let () = args in inv_T res)
  
  function fn_mut_once_default (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_mut_once_default_spec: forall self: (), args: (), res: t_T. postcondition_once_default self args res
      = (exists res_state: (). postcondition_mut_default self args res_state res /\ resolve_default res_state)
  
  predicate hist_inv_default [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default
  
  function hist_inv_trans_default (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec: forall self: (), b: (), c: (). hist_inv_default self b
      -> hist_inv_default b c -> hist_inv_default self c
  
  function hist_inv_refl_default (self: ()) : ()
  
  axiom hist_inv_refl_default_spec: forall self: (). hist_inv_default self self
  
  function postcondition_mut_hist_inv_default (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_default_spec:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default self args res_state res
      -> hist_inv_default self res_state
  
  function fn_hist_inv_default (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec: forall self: (), res_state: (). hist_inv_default self res_state = (self = res_state)
  
  predicate postcondition_default (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef'1:
    forall args: (), res: t_T [postcondition_default () args res]. postcondition_default () args res
      -> (let () = args in inv_T res)
  
  function fn_once_default (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_once_default_spec: forall self: (), args: (), res: t_T. postcondition_once_default self args res
      = (postcondition_default self args res /\ resolve_default self)
  
  function fn_mut_default (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_default_spec:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default self args res_state res
      = (postcondition_default self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap_or_default_T (self: t_OwnResult_T_E) (return (x: t_T)) =
    {[@expl:unwrap_or_default 'self' type invariant] inv_OwnResult_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv_OwnResult_T_E self} s1
      | s1 = -{resolve_OwnResult_T_E self}- s2
      | s2 = default_T (fun (_ret: t_T) -> [ &_0 <- _ret ] s3)
      | s3 = bb7 ]
    | bb4 = s0 [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &x <- r0 ] s1) | s1 = [ &_0 <- x ] s2 | s2 = bb7 ]
    | bb7 = return {_0} ] [ & _0: t_T = Any.any_l () | & self: t_OwnResult_T_E = self | & x: t_T = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:unwrap_or_default result type invariant] inv_T result}
      {[@expl:unwrap_or_default ensures #0] forall t: t_T. self = Ok t -> result = t}
      {[@expl:unwrap_or_default ensures #1] (exists e: t_E. self = Err e) -> postcondition_default () () result}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__and (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  type t_U
  
  type t_OwnResult_U_E = Ok'0 t_U | Err'0 t_E
  
  predicate inv_U (_1: t_U)
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_U_E (_1: t_OwnResult_U_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_U_E [inv_OwnResult_U_E x]. inv_OwnResult_U_E x
      = match x with
        | Ok'0 f0 -> inv_U f0
        | Err'0 f0 -> inv_E f0
        end
  
  predicate resolve_U (_1: t_U)
  
  predicate resolve_E (_1: t_E)
  
  predicate resolve_OwnResult_U_E (_1: t_OwnResult_U_E)
  
  axiom resolve_axiom [@rewrite]: forall x: t_OwnResult_U_E [resolve_OwnResult_U_E x]. resolve_OwnResult_U_E x
      = match x with
        | Ok'0 x0 -> resolve_U x0
        | Err'0 x0 -> resolve_E x0
        end
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate resolve_T (_1: t_T)
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec and_T (self: t_OwnResult_T_E) (res: t_OwnResult_U_E) (return (x: t_OwnResult_U_E)) =
    {[@expl:and 'self' type invariant] inv_OwnResult_T_E self}
    {[@expl:and 'res' type invariant] inv_OwnResult_U_E res}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv_OwnResult_U_E res} s1
      | s1 = -{resolve_OwnResult_U_E res}- s2
      | s2 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s3)
      | s3 = [ &_0 <- Err'0 e ] s4
      | s4 = bb10 ]
    | bb4 = s0
      [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &x <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_T x} s2
      | s2 = -{resolve_T x}- s3
      | s3 = [ &_0 <- res ] s4
      | s4 = bb10 ]
    | bb10 = return {_0} ]
    [ & _0: t_OwnResult_U_E = Any.any_l ()
    | & self: t_OwnResult_T_E = self
    | & res: t_OwnResult_U_E = res
    | & x: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return (result: t_OwnResult_U_E) -> {[@expl:and result type invariant] inv_OwnResult_U_E result}
      {[@expl:and ensures #0] (exists t: t_T. self = Ok t) -> result = res}
      {[@expl:and ensures #1] forall e: t_E. self = Err e -> result = Err'0 e}
      (! return {result}) ]
end
module M_impl_OwnResult_T_E__or (* OwnResult<T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_T_E]. Err f0 <> input} (! {false} any) ]
  
  predicate inv_E (_1: t_E)
  
  predicate resolve_E (_1: t_E)
  
  type t_F
  
  type t_OwnResult_T_F = Ok'0 t_T | Err'0 t_F
  
  predicate inv_T (_1: t_T)
  
  predicate inv_F (_1: t_F)
  
  predicate inv_OwnResult_T_F (_1: t_OwnResult_T_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_T_F [inv_OwnResult_T_F x]. inv_OwnResult_T_F x
      = match x with
        | Ok'0 f0 -> inv_T f0
        | Err'0 f0 -> inv_F f0
        end
  
  predicate resolve_T (_1: t_T)
  
  predicate resolve_F (_1: t_F)
  
  predicate resolve_OwnResult_T_F (_1: t_OwnResult_T_F)
  
  axiom resolve_axiom [@rewrite]: forall x: t_OwnResult_T_F [resolve_OwnResult_T_F x]. resolve_OwnResult_T_F x
      = match x with
        | Ok'0 x0 -> resolve_T x0
        | Err'0 x0 -> resolve_F x0
        end
  
  let rec elim_Ok (input: t_OwnResult_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok f0 -> inv_T f0
        | Err f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec or_T (self: t_OwnResult_T_E) (res: t_OwnResult_T_F) (return (x: t_OwnResult_T_F)) =
    {[@expl:or 'self' type invariant] inv_OwnResult_T_E self}
    {[@expl:or 'res' type invariant] inv_OwnResult_T_F res}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb2) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0
      [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_E e} s2
      | s2 = -{resolve_E e}- s3
      | s3 = [ &_0 <- res ] s4
      | s4 = bb10 ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv_OwnResult_T_F res} s1 | s1 = -{resolve_OwnResult_T_F res}- s2 | s2 = bb4 ]
    | bb4 = s0 [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &v <- r0 ] s1) | s1 = [ &_0 <- Ok'0 v ] s2 | s2 = bb10 ]
    | bb10 = return {_0} ]
    [ & _0: t_OwnResult_T_F = Any.any_l ()
    | & self: t_OwnResult_T_E = self
    | & res: t_OwnResult_T_F = res
    | & v: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return (result: t_OwnResult_T_F) -> {[@expl:or result type invariant] inv_OwnResult_T_F result}
      {[@expl:or ensures #0] forall t: t_T. self = Ok t -> result = Ok'0 t}
      {[@expl:or ensures #1] (exists e: t_E. self = Err e) -> result = res}
      (! return {result}) ]
end
module M_impl_OwnResult_ref_T_E__copied (* OwnResult<&T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_ref_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_ref_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_ref_T_E]. Err f0 <> input} (! {false} any) ]
  
  type t_OwnResult_T_E = Ok'0 t_T | Err'0 t_E
  
  let rec elim_Ok (input: t_OwnResult_ref_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_ref_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_ref_T_E (_1: t_OwnResult_ref_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_ref_T_E [inv_OwnResult_ref_T_E x]. inv_OwnResult_ref_T_E x
      = match x with
        | Ok f0 -> inv_ref_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok'0 f0 -> inv_T f0
        | Err'0 f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec copied_T (self: t_OwnResult_ref_T_E) (return (x: t_OwnResult_T_E)) =
    {[@expl:copied 'self' type invariant] inv_OwnResult_ref_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- Err'0 e ] s2 | s2 = bb8 ]
    | bb4 = s0 [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &t <- r0 ] s1) | s1 = [ &_0 <- Ok'0 t ] s2 | s2 = bb8 ]
    | bb8 = return {_0} ]
    [ & _0: t_OwnResult_T_E = Any.any_l ()
    | & self: t_OwnResult_ref_T_E = self
    | & t: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return (result: t_OwnResult_T_E) -> {[@expl:copied result type invariant] inv_OwnResult_T_E result}
      {[@expl:copied ensures #0] forall t: t_T. self = Ok t -> result = Ok'0 t}
      {[@expl:copied ensures #1] forall e: t_E. self = Err e -> result = Err'0 e}
      (! return {result}) ]
end
module M_impl_OwnResult_ref_T_E__cloned (* OwnResult<&T, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_ref_T_E = Ok t_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_ref_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_ref_T_E]. Err f0 <> input} (! {false} any) ]
  
  type t_OwnResult_T_E = Ok'0 t_T | Err'0 t_E
  
  let rec elim_Ok (input: t_OwnResult_ref_T_E) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Ok f0: t_OwnResult_ref_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate precondition_clone (self: ()) (args: t_T)
  
  axiom precondition_fndef: forall args: t_T [precondition_clone () args]. (let self_ = args in inv_ref_T self_)
      -> precondition_clone () args
  
  predicate postcondition_once_clone (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef:
    forall args: t_T, res: t_T [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_T res)
  
  let rec clone_T (self_: t_T) (return (x: t_T)) = {[@expl:clone requires] precondition_clone () self_}
    any [ return (result: t_T) -> {postcondition_once_clone () self_ result} (! return {result}) ]
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_ref_T_E (_1: t_OwnResult_ref_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_ref_T_E [inv_OwnResult_ref_T_E x]. inv_OwnResult_ref_T_E x
      = match x with
        | Ok f0 -> inv_ref_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok'0 f0 -> inv_T f0
        | Err'0 f0 -> inv_E f0
        end
  
  type tup2_OwnResult_ref_T_E_OwnResult_T_E = { f0: t_OwnResult_ref_T_E; f1: t_OwnResult_T_E }
  
  predicate resolve_clone [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_clone
  
  predicate postcondition_mut_clone (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut_clone () args () res]. postcondition_mut_clone () args () res
      -> (let self_ = args in inv_T res)
  
  function fn_mut_once_clone (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_clone_spec: forall self: (), args: t_T, res: t_T. postcondition_once_clone self args res
      = (exists res_state: (). postcondition_mut_clone self args res_state res /\ resolve_clone res_state)
  
  predicate hist_inv_clone [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_clone
  
  function hist_inv_trans_clone (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_clone_spec: forall self: (), b: (), c: (). hist_inv_clone self b
      -> hist_inv_clone b c -> hist_inv_clone self c
  
  function hist_inv_refl_clone (self: ()) : ()
  
  axiom hist_inv_refl_clone_spec: forall self: (). hist_inv_clone self self
  
  function postcondition_mut_hist_inv_clone (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_clone_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut_clone self args res_state res
      -> hist_inv_clone self res_state
  
  function fn_hist_inv_clone (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_clone_spec: forall self: (), res_state: (). hist_inv_clone self res_state = (self = res_state)
  
  predicate postcondition_clone (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1:
    forall args: t_T, res: t_T [postcondition_clone () args res]. postcondition_clone () args res
      -> (let self_ = args in inv_T res)
  
  function fn_once_clone (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_clone_spec: forall self: (), args: t_T, res: t_T. postcondition_once_clone self args res
      = (postcondition_clone self args res /\ resolve_clone self)
  
  function fn_mut_clone (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_clone_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut_clone self args res_state res
      = (postcondition_clone self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec cloned_T (self: t_OwnResult_ref_T_E) (return (x: t_OwnResult_T_E)) =
    {[@expl:cloned 'self' type invariant] inv_OwnResult_ref_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- Err'0 e ] s2 | s2 = bb10 ]
    | bb4 = s0
      [ s0 = elim_Ok {self} (fun (r0: t_T) -> [ &t <- r0 ] s1)
      | s1 = clone_T {t} (fun (_ret: t_T) -> [ &_5 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0 [ s0 = [ &_0 <- Ok'0 _5 ] s1 | s1 = bb10 ]
    | bb10 = return {_0} ]
    [ & _0: t_OwnResult_T_E = Any.any_l ()
    | & self: t_OwnResult_ref_T_E = self
    | & t: t_T = Any.any_l ()
    | & _5: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return (result: t_OwnResult_T_E) -> {[@expl:cloned result type invariant] inv_OwnResult_T_E result}
      {[@expl:cloned ensures] match { f0 = self; f1 = result } with
        | {f0 = Ok s; f1 = Ok'0 r} -> postcondition_clone () s r
        | {f0 = Err s; f1 = Err'0 r} -> s = r
        | _ -> false
        end}
      (! return {result}) ]
end
module M_impl_OwnResult_ref_T_E_0__copied (* OwnResult<&mut T, E> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_ref_T_E = Ok (MutBorrow.t t_T) | Err t_E
  
  let rec elim_Err (input: t_OwnResult_ref_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_ref_T_E]. Err f0 <> input} (! {false} any) ]
  
  type t_OwnResult_T_E = Ok'0 t_T | Err'0 t_E
  
  let rec elim_Ok (input: t_OwnResult_ref_T_E) (ret (f0: MutBorrow.t t_T)) = any
    [ good (f0: MutBorrow.t t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: MutBorrow.t t_T [Ok f0: t_OwnResult_ref_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_ref_T_E (_1: t_OwnResult_ref_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_ref_T_E [inv_OwnResult_ref_T_E x]. inv_OwnResult_ref_T_E x
      = match x with
        | Ok f0 -> inv_ref_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok'0 f0 -> inv_T f0
        | Err'0 f0 -> inv_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec copied_T (self: t_OwnResult_ref_T_E) (return (x: t_OwnResult_T_E)) =
    {[@expl:copied 'self' type invariant] inv_OwnResult_ref_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: MutBorrow.t t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- Err'0 e ] s2 | s2 = bb8 ]
    | bb4 = s0
      [ s0 = elim_Ok {self} (fun (r0: MutBorrow.t t_T) -> [ &t <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_ref_T t} s2
      | s2 = -{resolve_ref_T t}- s3
      | s3 = [ &_0 <- Ok'0 (t.current) ] s4
      | s4 = bb8 ]
    | bb8 = return {_0} ]
    [ & _0: t_OwnResult_T_E = Any.any_l ()
    | & self: t_OwnResult_ref_T_E = self
    | & t: MutBorrow.t t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return (result: t_OwnResult_T_E) -> {[@expl:copied result type invariant] inv_OwnResult_T_E result}
      {[@expl:copied ensures #0] forall t: MutBorrow.t t_T. self = Ok t -> result = Ok'0 (t.current) /\ resolve_ref_T t}
      {[@expl:copied ensures #1] forall e: t_E. self = Err e -> result = Err'0 e}
      (! return {result}) ]
end
module M_impl_OwnResult_ref_T_E_0__cloned (* OwnResult<&mut T, E> *)
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_E
  
  type t_OwnResult_ref_T_E = Ok (MutBorrow.t t_T) | Err t_E
  
  let rec elim_Err (input: t_OwnResult_ref_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_ref_T_E]. Err f0 <> input} (! {false} any) ]
  
  type t_OwnResult_T_E = Ok'0 t_T | Err'0 t_E
  
  let rec elim_Ok (input: t_OwnResult_ref_T_E) (ret (f0: MutBorrow.t t_T)) = any
    [ good (f0: MutBorrow.t t_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: MutBorrow.t t_T [Ok f0: t_OwnResult_ref_T_E]. Ok f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  predicate invariant_ref_T'0 [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T'0
  
  predicate inv_ref_T'0 [@inline:trivial] (_1: t_T) = invariant_ref_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_T'0
  
  predicate precondition_clone (self: ()) (args: t_T)
  
  axiom precondition_fndef: forall args: t_T [precondition_clone () args]. (let self_ = args in inv_ref_T'0 self_)
      -> precondition_clone () args
  
  predicate postcondition_once_clone (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef:
    forall args: t_T, res: t_T [postcondition_once_clone () args res]. postcondition_once_clone () args res
      -> (let self_ = args in inv_T res)
  
  let rec clone_T (self_: t_T) (return (x: t_T)) = {[@expl:clone requires] precondition_clone () self_}
    any [ return (result: t_T) -> {postcondition_once_clone () self_ result} (! return {result}) ]
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_ref_T_E (_1: t_OwnResult_ref_T_E)
  
  axiom inv_axiom [@rewrite]: forall x: t_OwnResult_ref_T_E [inv_OwnResult_ref_T_E x]. inv_OwnResult_ref_T_E x
      = match x with
        | Ok f0 -> inv_ref_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok'0 f0 -> inv_T f0
        | Err'0 f0 -> inv_E f0
        end
  
  type tup2_OwnResult_ref_T_E_OwnResult_T_E = { f0: t_OwnResult_ref_T_E; f1: t_OwnResult_T_E }
  
  predicate resolve_clone [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_clone
  
  predicate postcondition_mut_clone (self: ()) (args: t_T) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: t_T, res: t_T [postcondition_mut_clone () args () res]. postcondition_mut_clone () args () res
      -> (let self_ = args in inv_T res)
  
  function fn_mut_once_clone (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_mut_once_clone_spec: forall self: (), args: t_T, res: t_T. postcondition_once_clone self args res
      = (exists res_state: (). postcondition_mut_clone self args res_state res /\ resolve_clone res_state)
  
  predicate hist_inv_clone [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_clone
  
  function hist_inv_trans_clone (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_clone_spec: forall self: (), b: (), c: (). hist_inv_clone self b
      -> hist_inv_clone b c -> hist_inv_clone self c
  
  function hist_inv_refl_clone (self: ()) : ()
  
  axiom hist_inv_refl_clone_spec: forall self: (). hist_inv_clone self self
  
  function postcondition_mut_hist_inv_clone (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_clone_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut_clone self args res_state res
      -> hist_inv_clone self res_state
  
  function fn_hist_inv_clone (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_clone_spec: forall self: (), res_state: (). hist_inv_clone self res_state = (self = res_state)
  
  predicate postcondition_clone (self: ()) (args: t_T) (result: t_T)
  
  axiom postcondition_fndef'1:
    forall args: t_T, res: t_T [postcondition_clone () args res]. postcondition_clone () args res
      -> (let self_ = args in inv_T res)
  
  function fn_once_clone (self: ()) (args: t_T) (res: t_T) : ()
  
  axiom fn_once_clone_spec: forall self: (), args: t_T, res: t_T. postcondition_once_clone self args res
      = (postcondition_clone self args res /\ resolve_clone self)
  
  function fn_mut_clone (self: ()) (args: t_T) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_clone_spec:
    forall self: (), args: t_T, res_state: (), res: t_T. postcondition_mut_clone self args res_state res
      = (postcondition_clone self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec cloned_T (self: t_OwnResult_ref_T_E) (return (x: t_OwnResult_T_E)) =
    {[@expl:cloned 'self' type invariant] inv_OwnResult_ref_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: MutBorrow.t t_T) -> {self = Ok x0} (! bb4) | br1 (x0: t_E) -> {self = Err x0} (! bb3) ]
    | bb3 = s0 [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_0 <- Err'0 e ] s2 | s2 = bb10 ]
    | bb4 = s0
      [ s0 = elim_Ok {self} (fun (r0: MutBorrow.t t_T) -> [ &t <- r0 ] s1)
      | s1 = {[@expl:type invariant] inv_ref_T t} s2
      | s2 = -{resolve_ref_T t}- s3
      | s3 = clone_T {t.current} (fun (_ret: t_T) -> [ &_5 <- _ret ] s4)
      | s4 = bb5 ]
    | bb5 = s0 [ s0 = [ &_0 <- Ok'0 _5 ] s1 | s1 = bb10 ]
    | bb10 = return {_0} ]
    [ & _0: t_OwnResult_T_E = Any.any_l ()
    | & self: t_OwnResult_ref_T_E = self
    | & t: MutBorrow.t t_T = Any.any_l ()
    | & _5: t_T = Any.any_l ()
    | & e: t_E = Any.any_l () ])
    [ return (result: t_OwnResult_T_E) -> {[@expl:cloned result type invariant] inv_OwnResult_T_E result}
      {[@expl:cloned ensures] match { f0 = self; f1 = result } with
        | {f0 = Ok s; f1 = Ok'0 r} -> postcondition_clone () s.current r
        | {f0 = Err s; f1 = Err'0 r} -> s = r
        | _ -> false
        end}
      (! return {result}) ]
end
module M_impl_OwnResult_Option_T_E__transpose (* OwnResult<std::option::Option<T>, E> *)
  use creusot.prelude.Any
  
  type t_T
  
  type t_Option_T = None | Some t_T
  
  type t_E
  
  type t_OwnResult_Option_T_E = Ok t_Option_T | Err t_E
  
  let rec elim_Err (input: t_OwnResult_Option_T_E) (ret (f0: t_E)) = any
    [ good (f0: t_E) -> {Err f0 = input} (! ret {f0})
    | bad -> {forall f0: t_E [Err f0: t_OwnResult_Option_T_E]. Err f0 <> input} (! {false} any) ]
  
  type t_OwnResult_T_E = Ok'0 t_T | Err'0 t_E
  
  type t_Option_OwnResult_T_E = None'0 | Some'0 t_OwnResult_T_E
  
  let rec elim_Ok (input: t_OwnResult_Option_T_E) (ret (f0: t_Option_T)) = any
    [ good (f0: t_Option_T) -> {Ok f0 = input} (! ret {f0})
    | bad -> {forall f0: t_Option_T [Ok f0: t_OwnResult_Option_T_E]. Ok f0 <> input} (! {false} any) ]
  
  let rec elim_Some (input: t_Option_T) (ret (f0: t_T)) = any
    [ good (f0: t_T) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: t_T [Some f0: t_Option_T]. Some f0 <> input} (! {false} any) ]
  
  predicate inv_T (_1: t_T)
  
  predicate inv_Option_T (_1: t_Option_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_T [inv_Option_T x]. inv_Option_T x
      = match x with
        | None -> true
        | Some f0 -> inv_T f0
        end
  
  predicate inv_E (_1: t_E)
  
  predicate inv_OwnResult_Option_T_E (_1: t_OwnResult_Option_T_E)
  
  axiom inv_axiom'0 [@rewrite]:
    forall x: t_OwnResult_Option_T_E [inv_OwnResult_Option_T_E x]. inv_OwnResult_Option_T_E x
      = match x with
        | Ok f0 -> inv_Option_T f0
        | Err f0 -> inv_E f0
        end
  
  predicate inv_OwnResult_T_E (_1: t_OwnResult_T_E)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_OwnResult_T_E [inv_OwnResult_T_E x]. inv_OwnResult_T_E x
      = match x with
        | Ok'0 f0 -> inv_T f0
        | Err'0 f0 -> inv_E f0
        end
  
  predicate inv_Option_OwnResult_T_E (_1: t_Option_OwnResult_T_E)
  
  axiom inv_axiom'2 [@rewrite]:
    forall x: t_Option_OwnResult_T_E [inv_Option_OwnResult_T_E x]. inv_Option_OwnResult_T_E x
      = match x with
        | None'0 -> true
        | Some'0 f0 -> inv_OwnResult_T_E f0
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec transpose_T (self: t_OwnResult_Option_T_E) (return (x: t_Option_OwnResult_T_E)) =
    {[@expl:transpose 'self' type invariant] inv_OwnResult_Option_T_E self}
    (! bb0
    [ bb0 = any [ br0 (x0: t_Option_T) -> {self = Ok x0} (! bb2) | br1 (x0: t_E) -> {self = Err x0} (! bb5) ]
    | bb5 = s0 [ s0 = elim_Err {self} (fun (r0: t_E) -> [ &e <- r0 ] s1) | s1 = [ &_11 <- Err'0 e ] s2 | s2 = bb11 ]
    | bb11 = s0 [ s0 = [ &_0 <- Some'0 _11 ] s1 | s1 = bb15 ]
    | bb2 = elim_Ok {self}
        (fun (r0: t_Option_T) -> any [ br0 -> {r0 = None} (! bb6) | br1 (x0: t_T) -> {r0 = Some x0} (! bb7) ])
    | bb7 = s0
      [ s0 = elim_Ok {self} (fun (r0: t_Option_T) -> elim_Some {r0} (fun (r0'0: t_T) -> [ &x <- r0'0 ] s1))
      | s1 = [ &_8 <- Ok'0 x ] s2
      | s2 = bb8 ]
    | bb8 = s0 [ s0 = [ &_0 <- Some'0 _8 ] s1 | s1 = bb15 ]
    | bb6 = s0 [ s0 = [ &_0 <- None'0 ] s1 | s1 = bb15 ]
    | bb15 = return {_0} ]
    [ & _0: t_Option_OwnResult_T_E = Any.any_l ()
    | & self: t_OwnResult_Option_T_E = self
    | & x: t_T = Any.any_l ()
    | & _8: t_OwnResult_T_E = Any.any_l ()
    | & e: t_E = Any.any_l ()
    | & _11: t_OwnResult_T_E = Any.any_l () ])
    [ return (result: t_Option_OwnResult_T_E) ->
    {[@expl:transpose result type invariant] inv_Option_OwnResult_T_E result}
      {[@expl:transpose ensures #0] self = Ok (None) -> result = None'0}
      {[@expl:transpose ensures #1] forall t: t_T. self = Ok (Some t) -> result = Some'0 (Ok'0 t)}
      {[@expl:transpose ensures #2] forall e: t_E. self = Err e -> result = Some'0 (Err'0 e)}
      (! return {result}) ]
end
