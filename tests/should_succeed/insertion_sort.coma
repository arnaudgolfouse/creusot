module M_insertion_sort__insertion_sort [#"insertion_sort.rs" 23 0 23 40]
  let%span sinsertion_sort = "insertion_sort.rs" 24 19 24 35
  let%span sinsertion_sort'0 = "insertion_sort.rs" 29 13 29 14
  let%span sinsertion_sort'1 = "insertion_sort.rs" 29 4 29 7
  let%span sinsertion_sort'2 = "insertion_sort.rs" 29 4 29 7
  let%span sinsertion_sort'3 = "insertion_sort.rs" 28 16 28 48
  let%span sinsertion_sort'4 = "insertion_sort.rs" 27 16 27 34
  let%span sinsertion_sort'5 = "insertion_sort.rs" 26 16 26 59
  let%span sinsertion_sort'6 = "insertion_sort.rs" 29 4 29 7
  let%span sinsertion_sort'7 = "insertion_sort.rs" 29 4 29 7
  let%span sinsertion_sort'8 = "insertion_sort.rs" 35 20 35 76
  let%span sinsertion_sort'9 = "insertion_sort.rs" 34 20 34 109
  let%span sinsertion_sort'10 = "insertion_sort.rs" 33 20 33 52
  let%span sinsertion_sort'11 = "insertion_sort.rs" 32 20 32 38
  let%span sinsertion_sort'12 = "insertion_sort.rs" 31 20 31 26
  let%span sinsertion_sort'13 = "insertion_sort.rs" 36 18 36 19
  let%span sinsertion_sort'14 = "insertion_sort.rs" 37 25 37 26
  let%span sinsertion_sort'15 = "insertion_sort.rs" 37 15 37 27
  let%span sinsertion_sort'16 = "insertion_sort.rs" 37 30 37 38
  let%span sinsertion_sort'17 = "insertion_sort.rs" 38 31 38 32
  let%span sinsertion_sort'18 = "insertion_sort.rs" 42 17 42 18
  let%span sinsertion_sort'19 = "insertion_sort.rs" 46 18 46 55
  let%span sinsertion_sort'20 = "insertion_sort.rs" 21 10 21 42
  let%span sinsertion_sort'21 = "insertion_sort.rs" 22 10 22 27
  let%span sinsertion_sort'22 = "insertion_sort.rs" 9 8 9 62
  let%span sinsertion_sort'23 = "insertion_sort.rs" 17 8 17 35
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 271 18 271 40
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 275 19 275 35
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 276 19 276 35
  let%span sslice'2 = "../../creusot-contracts/src/std/slice.rs" 277 18 277 50
  let%span sslice'3 = "../../creusot-contracts/src/std/slice.rs" 30 14 30 41
  let%span sslice'4 = "../../creusot-contracts/src/std/slice.rs" 31 14 31 42
  let%span siter = "../../creusot-contracts/src/std/iter.rs" 212 18 212 32
  let%span siter'0 = "../../creusot-contracts/src/std/iter.rs" 92 26 95 17
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 316 8 316 41
  let%span ssnapshot = "../../creusot-contracts/src/snapshot.rs" 62 8 62 27
  let%span smodel = "../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span srange = "../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span srange'0 = "../../creusot-contracts/src/std/iter/range.rs" 34 14 34 47
  let%span srange'1 = "../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  let%span srange'2 = "../../creusot-contracts/src/std/iter/range.rs" 39 15 39 32
  let%span srange'3 = "../../creusot-contracts/src/std/iter/range.rs" 40 14 40 42
  let%span srange'4 = "../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 63 8 63 32
  let%span sindex'0 = "../../creusot-contracts/src/logic/ops/index.rs" 52 8 52 31
  let%span snum = "../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'13 = "../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'14 = "../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'15 = "../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'16 = "../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'17 = "../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'18 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'19 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'20 = "../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'21 = "../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'22 = "../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'23 = "../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'24 = "../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'25 = "../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  let%span sord'26 = "../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec: forall self: Slice64.slice Int32.t. [%#sslice'3] Seq.length (view self) <= UInt64.t'int const_MAX
  
  axiom view_spec'0: forall self: Slice64.slice Int32.t. [%#sslice'4] view self = Slice64.id self
  
  function view'0 (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#smodel'0] view self
  
  let rec len (self_:Slice64.slice Int32.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#sslice] Seq.length (view'0 self_) = UInt64.t'int result} (! return' {result}) ]
  
  
  type t_Range  =
    { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter (self_:t_Range) (return'  (x:t_Range))= any
    [ return''0 (result:t_Range)-> {[%#siter] result = self_} (! return' {result}) ]
  
  
  predicate permutation_of (self: Seq.seq Int32.t) (other: Seq.seq Int32.t) =
    [%#sseq] Permut.permut self other 0 (Seq.length self)
  
  function view'1 (self: MutBorrow.t (Slice64.slice Int32.t)) : Seq.seq Int32.t =
    [%#smodel] view self.current
  
  function view'2 (self: MutBorrow.t (Slice64.slice Int32.t)) : Seq.seq Int32.t =
    [%#smodel'0] view'1 self
  
  function view'3 (self: MutBorrow.t (Slice64.slice Int32.t)) : Seq.seq Int32.t =
    [%#ssnapshot] view'2 self
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self: Int32.t) (o: Int32.t) : t_Ordering =
    [%#sord'25] if Int32.lt self o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp (x: Int32.t) (y: Int32.t) : ()
  
  axiom eq_cmp_spec: forall x: Int32.t, y: Int32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: Int32.t) (y: Int32.t) : ()
  
  axiom antisym2_spec: forall x: Int32.t, y: Int32.t. ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: Int32.t) (y: Int32.t) : ()
  
  axiom antisym1_spec: forall x: Int32.t, y: Int32.t. ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: Int32.t) (y: Int32.t) (z: Int32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: Int32.t, y: Int32.t, z: Int32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
   -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: Int32.t) : ()
  
  axiom refl_spec: forall x: Int32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: Int32.t) (y: Int32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: Int32.t, y: Int32.t. [%#sord'2] Int32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: Int32.t) (y: Int32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: Int32.t, y: Int32.t. [%#sord'1] Int32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: Int32.t) (y: Int32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: Int32.t, y: Int32.t. [%#sord'0] Int32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: Int32.t) (y: Int32.t) : ()
  
  axiom cmp_le_log_spec: forall x: Int32.t, y: Int32.t. [%#sord] Int32.le x y = (cmp_log x y <> C_Greater)
  
  predicate sorted_range [#"insertion_sort.rs" 7 0 7 67] (s: Seq.seq Int32.t) (l: int) (u: int) =
    [%#sinsertion_sort'22] forall i: int, j: int. l <= i /\ i < j /\ j < u  -> Int32.le (Seq.get s i) (Seq.get s j)
  
  function deep_model (self: UInt64.t) : int =
    [%#snum] UInt64.t'int self
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    [%#srange] self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0  -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec: forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. ([%#srange'1] produces a ab b)
   -> ([%#srange'2] produces b bc c)  -> ([%#srange'3] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#srange'0] produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv (_0: t_Range)
  
  axiom inv_axiom [@rewrite]: forall x: t_Range [inv x]. inv x = true
  
  predicate inv'0 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq UInt64.t [inv'0 x]. inv'0 x = true
  
  type t_Option  =
    | C_None
    | C_Some UInt64.t
  
  predicate resolve (self: MutBorrow.t t_Range) =
    [%#sresolve] self.final = self.current
  
  predicate completed (self: MutBorrow.t t_Range) =
    [%#srange'4] resolve self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  let rec next (self_:MutBorrow.t t_Range) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#siter'0] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_0: MutBorrow.t t_Range) =
    resolve _0
  
  let rec v_Some (input:t_Option) (ret  (field_0:UInt64.t))= any
    [ good (field_0:UInt64.t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  function index_logic [@inline:trivial] (self: Slice64.slice Int32.t) (ix: UInt64.t) : Int32.t =
    [%#sindex] Seq.get (view self) (UInt64.t'int ix)
  
  function index_logic'0 [@inline:trivial] (self: Slice64.slice Int32.t) (ix: int) : Int32.t =
    [%#sindex'0] Seq.get (view self) ix
  
  function cmp_log'0 (self: UInt64.t) (o: UInt64.t) : t_Ordering =
    [%#sord'26] if UInt64.lt self o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'24] (x = y) = (cmp_log'0 x y = C_Equal)
  
  function antisym2'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec'0: forall x: UInt64.t, y: UInt64.t. ([%#sord'22] cmp_log'0 x y = C_Greater)
   -> ([%#sord'23] cmp_log'0 y x = C_Less)
  
  function antisym1'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec'0: forall x: UInt64.t, y: UInt64.t. ([%#sord'20] cmp_log'0 x y = C_Less)
   -> ([%#sord'21] cmp_log'0 y x = C_Greater)
  
  function trans'0 (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec'0: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'17] cmp_log'0 x y = o)
   -> ([%#sord'18] cmp_log'0 y z = o)  -> ([%#sord'19] cmp_log'0 x z = o)
  
  function refl'0 (x: UInt64.t) : ()
  
  axiom refl_spec'0: forall x: UInt64.t. [%#sord'16] cmp_log'0 x x = C_Equal
  
  function cmp_gt_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'15] UInt64.gt x y = (cmp_log'0 x y = C_Greater)
  
  function cmp_ge_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'14] UInt64.ge x y = (cmp_log'0 x y <> C_Less)
  
  function cmp_lt_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'13] UInt64.lt x y = (cmp_log'0 x y = C_Less)
  
  function cmp_le_log'0 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec'0: forall x: UInt64.t, y: UInt64.t. [%#sord'12] UInt64.le x y = (cmp_log'0 x y <> C_Greater)
  
  let rec swap (self_:MutBorrow.t (Slice64.slice Int32.t)) (i:UInt64.t) (j:UInt64.t) (return'  (x:()))= {[@expl:swap requires #0] [%#sslice'0] UInt64.t'int i
    < Seq.length (view'1 self_)}
    {[@expl:swap requires #1] [%#sslice'1] UInt64.t'int j < Seq.length (view'1 self_)}
    any
    [ return''0 (result:())-> {[%#sslice'2] Permut.exchange (view self_.final) (view'1 self_) (UInt64.t'int i) (UInt64.t'int j)}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self: MutBorrow.t (Slice64.slice Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t (Slice64.slice Int32.t)) =
    resolve'1 _0
  
  predicate sorted [#"insertion_sort.rs" 15 0 15 45] (s: Seq.seq Int32.t) =
    [%#sinsertion_sort'23] sorted_range s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec insertion_sort[#"insertion_sort.rs" 23 0 23 40] (array:MutBorrow.t (Slice64.slice Int32.t)) (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &original <- [%#sinsertion_sort] array'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len {array'0.current} (fun (_ret:UInt64.t) ->  [ &n <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_10 <- { t_Range__start = ([%#sinsertion_sort'0] (1: UInt64.t)); t_Range__end = n } ] s1
      | s1 = into_iter {_10} (fun (_ret:t_Range) ->  [ &iter <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#sinsertion_sort'1] iter ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &produced <- [%#sinsertion_sort'2] Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &old_6_0 <- array'0 ] s1 | s1 = bb6 ] 
    | bb6 = bb6'0
      [ bb6'0 = {[@expl:mut invariant] old_6_0.final = array'0.final}
        {[@expl:for invariant] [%#sinsertion_sort'6] inv'0 produced}
        {[@expl:for invariant] [%#sinsertion_sort'6] inv iter}
        {[@expl:for invariant] [%#sinsertion_sort'6] produces iter_old produced iter}
        {[@expl:loop invariant #0] [%#sinsertion_sort'5] sorted_range (view'1 array'0) 0 (Seq.length produced + 1)}
        {[@expl:loop invariant #1] [%#sinsertion_sort'4] Seq.length (view'1 array'0) = UInt64.t'int n}
        {[@expl:loop invariant #2] [%#sinsertion_sort'3] permutation_of (view'3 original) (view'1 array'0)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret:MutBorrow.t t_Range) ->  [ &_26 <- _ret ]  [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_26.current} {MutBorrow.get_id _26}
              (fun (_ret:MutBorrow.t t_Range) ->  [ &_25 <- _ret ]  [ &_26 <- { _26 with current = _ret.final } ] s2)
          | s2 = next {_25} (fun (_ret:t_Option) ->  [ &_24 <- _ret ] s3)
          | s3 = bb8 ]
        
        | bb8 = s0
          [ s0 = -{resolve'0 _26}- s1
          | s1 = any [ br0 -> {_24 = C_None} (! bb11) | br1 (x0:UInt64.t)-> {_24 = C_Some x0} (! bb12) ]  ]
        
        | bb12 = s0
          [ s0 = v_Some {_24} (fun (r0:UInt64.t) ->  [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 =  [ &_29 <- [%#sinsertion_sort'7] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb13 ]
        
        | bb13 = s0
          [ s0 =  [ &produced <- _29 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &j <- i ] s3
          | s3 =  [ &old_14_0 <- array'0 ] s4
          | s4 = bb14 ]
        
        | bb14 = bb14'0
          [ bb14'0 = {[@expl:mut invariant] old_14_0.final = array'0.final}
            {[@expl:loop invariant #0] [%#sinsertion_sort'12] UInt64.le j i}
            {[@expl:loop invariant #1] [%#sinsertion_sort'11] Seq.length (view'1 array'0) = UInt64.t'int n}
            {[@expl:loop invariant #2] [%#sinsertion_sort'10] permutation_of (view'3 original) (view'1 array'0)}
            {[@expl:loop invariant #3] [%#sinsertion_sort'9] forall a: int, b: int. 0 <= a
            /\ a <= b /\ b <= UInt64.t'int i
             -> a <> UInt64.t'int j
             -> b <> UInt64.t'int j  -> Int32.le (index_logic'0 array'0.current a) (index_logic'0 array'0.current b)}
            {[@expl:loop invariant #4] [%#sinsertion_sort'8] forall a: int. UInt64.t'int j + 1 <= a
            /\ a <= UInt64.t'int i  -> Int32.lt (index_logic array'0.current j) (index_logic'0 array'0.current a)}
            (! s0) [ s0 = bb15 ] 
            [ bb15 = s0
              [ s0 =  [ &_39 <- UInt64.gt j ([%#sinsertion_sort'13] (0: UInt64.t)) ] s1
              | s1 = any [ br0 -> {_39 = false} (! bb6'0) | br1 -> {_39} (! bb16) ]  ]
            
            | bb16 = s0
              [ s0 = UInt64.sub {j} {[%#sinsertion_sort'14] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &_44 <- _ret ] s1)
              | s1 = Opaque.fresh_ptr 
                  (fun (_ptr:Opaque.ptr) ->
                    -{Slice64.slice_ptr_len _ptr = Slice64.length array'0.current}-
                     [ &_46 <- _ptr ] 
                    s2)
              | s2 =  [ &_47 <- Slice64.slice_ptr_len _46 ] s3
              | s3 =  [ &_48 <- UInt64.lt _44 _47 ] s4
              | s4 = {[@expl:index in bounds] [%#sinsertion_sort'15] _48} s5
              | s5 = bb17 ]
            
            | bb17 = s0
              [ s0 =  [ &_50 <- j ] s1
              | s1 = Opaque.fresh_ptr 
                  (fun (_ptr:Opaque.ptr) ->
                    -{Slice64.slice_ptr_len _ptr = Slice64.length array'0.current}-
                     [ &_51 <- _ptr ] 
                    s2)
              | s2 =  [ &_52 <- Slice64.slice_ptr_len _51 ] s3
              | s3 =  [ &_53 <- UInt64.lt _50 _52 ] s4
              | s4 = {[@expl:index in bounds] [%#sinsertion_sort'16] _53} s5
              | s5 = bb18 ]
            
            | bb18 = s0
              [ s0 = Slice64.get <Int32.t> {array'0.current} {_50}
                  (fun (r:Int32.t) ->
                    Slice64.get <Int32.t> {array'0.current} {_44} (fun (r'0:Int32.t) ->  [ &_42 <- Int32.gt r'0 r ] s1))
              | s1 = any [ br0 -> {_42 = false} (! bb6'0) | br1 -> {_42} (! bb19) ]  ]
            
            | bb19 = s0
              [ s0 = UInt64.sub {j} {[%#sinsertion_sort'17] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &_56 <- _ret ] s1)
              | s1 = MutBorrow.borrow_mut <Slice64.slice Int32.t> {array'0.current}
                  (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->
                     [ &_55 <- _ret ] 
                     [ &array'0 <- { array'0 with current = _ret.final } ] 
                    s2)
              | s2 = swap {_55} {_56} {j} (fun (_ret:()) ->  [ &_54 <- _ret ] s3)
              | s3 = bb20 ]
            
            | bb20 = s0
              [ s0 = UInt64.sub {j} {[%#sinsertion_sort'18] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &j <- _ret ] s1)
              | s1 = bb14'0 ]
             ]
           ]
         ]
       ]
    
    | bb11 = s0
      [ s0 = -{resolve'2 array'0}- s1
      | s1 = {[@expl:assertion] [%#sinsertion_sort'19] sorted_range (view'1 array'0) 0 (Seq.length (view'1 array'0))} s2
      | s2 = return''0 {_0} ]
     ]
    
    [ & _0: () = Any.any_l ()
    | & array'0: MutBorrow.t (Slice64.slice Int32.t) = array
    | & original: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & n: UInt64.t = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _10: t_Range = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _25: MutBorrow.t t_Range = Any.any_l ()
    | & _26: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _29: Seq.seq UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & j: UInt64.t = Any.any_l ()
    | & _39: bool = Any.any_l ()
    | & _42: bool = Any.any_l ()
    | & _44: UInt64.t = Any.any_l ()
    | & _46: Opaque.ptr = Any.any_l ()
    | & _47: UInt64.t = Any.any_l ()
    | & _48: bool = Any.any_l ()
    | & _50: UInt64.t = Any.any_l ()
    | & _51: Opaque.ptr = Any.any_l ()
    | & _52: UInt64.t = Any.any_l ()
    | & _53: bool = Any.any_l ()
    | & _54: () = Any.any_l ()
    | & _55: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _56: UInt64.t = Any.any_l ()
    | & old_14_0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & old_6_0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l () ]
    )
    [ return''0 (result:())-> {[@expl:insertion_sort ensures #0] [%#sinsertion_sort'20] permutation_of (view'1 array) (view array.final)}
      {[@expl:insertion_sort ensures #1] [%#sinsertion_sort'21] sorted (view array.final)}
      (! return' {result}) ]

end
