module M_immut__f [#"immut.rs" 3 0 3 10]
  let%span simmut = "immut.rs" 4 16 4 18
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t UInt32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) = resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f [#"immut.rs" 3 0 3 10] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- [%#simmut] (10: UInt32.t) ] s1
      | s1 = MutBorrow.borrow_mut <UInt32.t> {a}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &b <- _ret ] [ &a <- _ret.final ] s2)
      | s2 = [ &_c <- b.current ] s3
      | s3 = -{resolve'0 b}- s4
      | s4 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: UInt32.t = Any.any_l ()
    | & b: MutBorrow.t UInt32.t = Any.any_l ()
    | & _c: UInt32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
