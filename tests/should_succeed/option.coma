module M_option__is_some_none
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec is_some (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ <> C_None)} (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_some_none (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = is_some {some} (fun (_ret: bool) -> [ &_4 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = any [ br0 -> {_4 = false} (! bb7) | br1 -> {_4} (! bb2) ]
    | bb2 = s0 [ s0 = is_some {none} (fun (_ret: bool) -> [ &_6 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb7) ]
    | bb5 = s0 [ s0 = is_none {some} (fun (_ret: bool) -> [ &_10 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = any [ br0 -> {_10 = false} (! bb10) | br1 -> {_10} (! bb14) ]
    | bb10 = s0 [ s0 = is_none {none} (fun (_ret: bool) -> [ &_12 <- _ret ] s1) | s1 = bb11 ]
    | bb11 = any [ br0 -> {_12 = false} (! bb14) | br1 -> {_12} (! bb12) ]
    | bb12 = return {_0}
    | bb14 = {false} any
    | bb7 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: bool = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__unwrap
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec unwrap (self_: t_Option) (return (x: Int32.t)) = {[@expl:unwrap requires] self_ <> C_None}
    any [ return (result: Int32.t) -> {C_Some result = self_} (! return {result}) ]
  
  let rec expect (self_: t_Option) (msg: string) (return (x: Int32.t)) = {[@expl:expect requires] self_ <> C_None}
    any [ return (result: Int32.t) -> {C_Some result = self_} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate resolve
  
  let rec unwrap_or (self_: t_Option) (default: Int32.t) (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {self_ = C_None -> result = default}
      {self_ = C_None \/ self_ = C_Some result /\ resolve default}
      (! return {result}) ]
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve'0
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: (), res: Int32.t. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: (), res: Int32.t. postcondition_once self args res
      = (postcondition self args res /\ resolve'0 self)
  
  function fn_mut (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec: forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec default (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = (0: Int32.t)} (! return {result}) ]
  
  let rec unwrap_or_default (self_: t_Option) (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {self_ = C_None -> postcondition () () result}
      {self_ = C_None \/ self_ = C_Some result}
      (! return {result}) ]
  
  let rec closure0 [@coma:extspec] (self: ()) (return (x: Int32.t)) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: ()) = closure0'pre self
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    closure0'post'return self result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec unwrap_or_else (self_: t_Option) (f: ()) (return (x: Int32.t)) = {[@expl:unwrap_or_else requires] self_
      = C_None -> precondition f ()}
    any
    [ return (result: Int32.t) -> {match self_ with
        | C_None -> postcondition_once'0 f () result
        | C_Some t -> result = t
        end}
      (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (return (x: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- (3: Int32.t) ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: ()) = closure1'pre self
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'1 [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    closure1'post'return self result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  let rec unwrap_or_else'0 (self_: t_Option) (f: ()) (return (x: Int32.t)) = {[@expl:unwrap_or_else requires] self_
      = C_None -> precondition'0 f ()}
    any
    [ return (result: Int32.t) -> {match self_ with
        | C_None -> postcondition_once'1 f () result
        | C_Some t -> result = t
        end}
      (! return {result}) ]
  
  let rec unwrap_unchecked (self_: t_Option) (return (x: Int32.t)) = {[@expl:unwrap_unchecked requires] self_ <> C_None}
    any [ return (result: Int32.t) -> {C_Some result = self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unwrap'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = unwrap {some} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = [ &_4 <- _5 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ] ]
    | bb2 = s0
      [ s0 = [ &_13 <- "failed" ] s1
      | s1 = expect {some} {_13} (fun (_ret: Int32.t) -> [ &_10 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_9 <- _10 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_9 = false} (! bb6) | br1 -> {_9} (! bb5) ] ]
    | bb5 = s0 [ s0 = unwrap_or {some} {(2: Int32.t)} (fun (_ret: Int32.t) -> [ &_17 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_16 <- _17 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb8) ] ]
    | bb8 = s0 [ s0 = unwrap_or {none} {(2: Int32.t)} (fun (_ret: Int32.t) -> [ &_22 <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0
      [ s0 = [ &_21 <- _22 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_21 = false} (! bb12) | br1 -> {_21} (! bb11) ] ]
    | bb11 = s0 [ s0 = unwrap_or_default {some} (fun (_ret: Int32.t) -> [ &_27 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0
      [ s0 = [ &_26 <- _27 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_26 = false} (! bb15) | br1 -> {_26} (! bb14) ] ]
    | bb14 = s0 [ s0 = unwrap_or_default {none} (fun (_ret: Int32.t) -> [ &_32 <- _ret ] s1) | s1 = bb16 ]
    | bb16 = s0
      [ s0 = [ &_31 <- _32 = (0: Int32.t) ] s1 | s1 = any [ br0 -> {_31 = false} (! bb18) | br1 -> {_31} (! bb17) ] ]
    | bb17 = s0
      [ s0 = [ &_39 <- () ] s1
      | s1 = unwrap_or_else {some} {_39} (fun (_ret: Int32.t) -> [ &_37 <- _ret ] s2)
      | s2 = bb19 ]
    | bb19 = s0
      [ s0 = [ &_36 <- _37 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_36 = false} (! bb21) | br1 -> {_36} (! bb20) ] ]
    | bb20 = s0
      [ s0 = [ &_45 <- () ] s1
      | s1 = unwrap_or_else'0 {none} {_45} (fun (_ret: Int32.t) -> [ &_43 <- _ret ] s2)
      | s2 = bb22 ]
    | bb22 = s0
      [ s0 = [ &_42 <- _43 = (3: Int32.t) ] s1 | s1 = any [ br0 -> {_42 = false} (! bb24) | br1 -> {_42} (! bb23) ] ]
    | bb23 = s0 [ s0 = unwrap_unchecked {some} (fun (_ret: Int32.t) -> [ &_49 <- _ret ] s1) | s1 = bb25 ]
    | bb25 = s0
      [ s0 = [ &_48 <- _49 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_48 = false} (! bb27) | br1 -> {_48} (! bb26) ] ]
    | bb26 = return {_0}
    | bb27 = {false} any
    | bb24 = {false} any
    | bb21 = {false} any
    | bb18 = {false} any
    | bb15 = {false} any
    | bb12 = {false} any
    | bb9 = {false} any
    | bb6 = {false} any
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & _10: Int32.t = Any.any_l ()
    | & _13: string = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _17: Int32.t = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & _22: Int32.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _27: Int32.t = Any.any_l ()
    | & _31: bool = Any.any_l ()
    | & _32: Int32.t = Any.any_l ()
    | & _36: bool = Any.any_l ()
    | & _37: Int32.t = Any.any_l ()
    | & _39: () = Any.any_l ()
    | & _42: bool = Any.any_l ()
    | & _43: Int32.t = Any.any_l ()
    | & _45: () = Any.any_l ()
    | & _48: bool = Any.any_l ()
    | & _49: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__map
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec closure0 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: ())) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  type t_Option'0 = C_None'0 | C_Some'0 ()
  
  predicate precondition [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure0'pre self _0
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: ()) =
    let _0 = args in closure0'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec map (self_: t_Option) (f: ()) (return (x: t_Option'0)) = {[@expl:map requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition f t
      end}
    any
    [ return (result: t_Option'0) -> {match self_ with
        | C_None -> result = C_None'0
        | C_Some t -> exists r: (). result = C_Some'0 r /\ postcondition_once f t r
        end}
      (! return {result}) ]
  
  function deep_model [@inline:trivial] (self: ()) : () = ()
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option'0) : t_Option'0 = match self with
      | C_Some'0 t -> C_Some'0 (deep_model t)
      | C_None'0 -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option'0) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option'0) (rhs: t_Option'0) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = [ &_0'0 <- (3: Int32.t) ] s1 | s1 = return {_0'0} ] ] [ & _0'0: Int32.t = Any.any_l () ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure1'pre self _0
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let _0 = args in closure1'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec map'0 (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:map requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'0 f t
      end}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> result = C_None
        | C_Some t -> exists r: Int32.t. result = C_Some r /\ postcondition_once'0 f t r
        end}
      (! return {result}) ]
  
  type t_Option'1 = C_None'1 | C_Some'1 int
  
  function deep_model'2 [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model'2
  
  function deep_model'3 [@inline:trivial] (self: t_Option) : t_Option'1 = match self with
      | C_Some t -> C_Some'1 (deep_model'2 t)
      | C_None -> C_None'1
      end
  
  meta "rewrite_def" function deep_model'3
  
  function deep_model'4 [@inline:trivial] (self: t_Option) : t_Option'1 = deep_model'3 self
  
  meta "rewrite_def" function deep_model'4
  
  let rec eq'0 (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'4 self_ = deep_model'4 rhs)} (! return {result}) ]
  
  let rec closure2 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = Int32.add {x} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure2'pre
  
  meta "rewrite_def" predicate closure2'post'return
  
  predicate precondition'1 [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure2'pre self x
  
  meta "rewrite_def" predicate precondition'1
  
  predicate postcondition_once'1 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let x = args in closure2'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  let rec map'1 (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:map requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'1 f t
      end}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> result = C_None
        | C_Some t -> exists r: Int32.t. result = C_Some r /\ postcondition_once'1 f t r
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec map'2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = [ &_8 <- () ] s3
      | s3 = map {none} {_8} (fun (_ret: t_Option'0) -> [ &_6 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None'0 ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'0 = Any.any_l () | & _1: t_Option'0 = Any.any_l () ]
        [ _const_ret (_const: t_Option'0) -> [ &_32 <- _const ] s1 ]
      | s1 = eq {_6} {_32} (fun (_ret: bool) -> [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0
      [ s0 = [ &_17 <- () ] s1 | s1 = map'0 {some} {_17} (fun (_ret: t_Option) -> [ &_15 <- _ret ] s2) | s2 = bb5 ]
    | bb5 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (3: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_31 <- _const ] s1 ]
      | s1 = eq'0 {_15} {_31} (fun (_ret: bool) -> [ &_13 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ]
    | bb7 = s0
      [ s0 = [ &_26 <- () ] s1 | s1 = map'1 {some} {_26} (fun (_ret: t_Option) -> [ &_24 <- _ret ] s2) | s2 = bb9 ]
    | bb9 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (2: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_30 <- _const ] s1 ]
      | s1 = eq'0 {_24} {_30} (fun (_ret: bool) -> [ &_22 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ]
    | bb11 = return {_0}
    | bb12 = {false} any
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option'0 = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: t_Option = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _26: () = Any.any_l ()
    | & _30: t_Option = Any.any_l ()
    | & _31: t_Option = Any.any_l ()
    | & _32: t_Option'0 = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__inspect
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec closure0 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: ())) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure0'pre self _0
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: ()) =
    let _0 = args in closure0'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec inspect (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:inspect requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition f t
      end}
    any
    [ return (result: t_Option) -> {result = self_}
      {match self_ with
        | C_None -> true
        | C_Some t -> postcondition_once f t ()
        end}
      (! return {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: ())) = bb0
    [ bb0 = return {_0'0} ] [ & _0'0: () = Any.any_l () ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure1'pre self _0
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: Int32.t) (result: ()) =
    let _0 = args in closure1'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec inspect'0 (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:inspect requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'0 f t
      end}
    any
    [ return (result: t_Option) -> {result = self_}
      {match self_ with
        | C_None -> true
        | C_Some t -> postcondition_once'0 f t ()
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inspect'1 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = [ &_8 <- () ] s3
      | s3 = inspect {none} {_8} (fun (_ret: t_Option) -> [ &_6 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_22 <- _const ] s1 ]
      | s1 = eq {_6} {_22} (fun (_ret: bool) -> [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0
      [ s0 = [ &_17 <- () ] s1 | s1 = inspect'0 {some} {_17} (fun (_ret: t_Option) -> [ &_15 <- _ret ] s2) | s2 = bb5 ]
    | bb5 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_21 <- _const ] s1 ]
      | s1 = eq {_15} {_21} (fun (_ret: bool) -> [ &_13 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ]
    | bb7 = return {_0}
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: t_Option = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _21: t_Option = Any.any_l ()
    | & _22: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__map_or
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec closure0 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: Int32.t)) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure0'pre self _0
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let _0 = args in closure0'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec map_or (self_: t_Option) (default: Int32.t) (f: ()) (return (x: Int32.t)) =
    {[@expl:map_or requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition f t
      end}
    any
    [ return (result: Int32.t) -> {match self_ with
        | C_None -> result = default
        | C_Some t -> postcondition_once f t result
        end}
      (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = [ &_0'0 <- (3: Int32.t) ] s1 | s1 = return {_0'0} ] ] [ & _0'0: Int32.t = Any.any_l () ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure1'pre self _0
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let _0 = args in closure1'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec map_or'0 (self_: t_Option) (default: Int32.t) (f: ()) (return (x: Int32.t)) =
    {[@expl:map_or requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'0 f t
      end}
    any
    [ return (result: Int32.t) -> {match self_ with
        | C_None -> result = default
        | C_Some t -> postcondition_once'0 f t result
        end}
      (! return {result}) ]
  
  let rec closure2 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = Int32.add {x} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure2'pre
  
  meta "rewrite_def" predicate closure2'post'return
  
  predicate precondition'1 [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure2'pre self x
  
  meta "rewrite_def" predicate precondition'1
  
  predicate postcondition_once'1 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let x = args in closure2'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  let rec map_or'1 (self_: t_Option) (default: Int32.t) (f: ()) (return (x: Int32.t)) =
    {[@expl:map_or requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'1 f t
      end}
    any
    [ return (result: Int32.t) -> {match self_ with
        | C_None -> result = default
        | C_Some t -> postcondition_once'1 f t result
        end}
      (! return {result}) ]
  
  let rec closure3 [@coma:extspec] (self: ()) (return (x: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- (2: Int32.t) ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () ]
  
  meta "rewrite_def" predicate closure3'pre
  
  meta "rewrite_def" predicate closure3'post'return
  
  let rec closure4 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: Int32.t)) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure4'pre
  
  meta "rewrite_def" predicate closure4'post'return
  
  predicate precondition'2 [@inline:trivial] (self: ()) (args: ()) = closure3'pre self
  
  meta "rewrite_def" predicate precondition'2
  
  predicate precondition'3 [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure4'pre self _0
  
  meta "rewrite_def" predicate precondition'3
  
  predicate postcondition_once'2 [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    closure3'post'return self result
  
  meta "rewrite_def" predicate postcondition_once'2
  
  predicate postcondition_once'3 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let _0 = args in closure4'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once'3
  
  let rec map_or_else (self_: t_Option) (default: ()) (f: ()) (return (x: Int32.t)) =
    {[@expl:map_or_else requires] match self_ with
      | C_None -> precondition'2 default ()
      | C_Some t -> precondition'3 f t
      end}
    any
    [ return (result: Int32.t) -> {match self_ with
        | C_None -> postcondition_once'2 default () result
        | C_Some t -> postcondition_once'3 f t result
        end}
      (! return {result}) ]
  
  let rec closure5 [@coma:extspec] (self: ()) (return (x: Int32.t)) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure5'pre
  
  meta "rewrite_def" predicate closure5'post'return
  
  let rec closure6 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = Int32.add {x} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure6'pre
  
  meta "rewrite_def" predicate closure6'post'return
  
  predicate precondition'4 [@inline:trivial] (self: ()) (args: ()) = closure5'pre self
  
  meta "rewrite_def" predicate precondition'4
  
  predicate precondition'5 [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure6'pre self x
  
  meta "rewrite_def" predicate precondition'5
  
  predicate postcondition_once'4 [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    closure5'post'return self result
  
  meta "rewrite_def" predicate postcondition_once'4
  
  predicate postcondition_once'5 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let x = args in closure6'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once'5
  
  let rec map_or_else'0 (self_: t_Option) (default: ()) (f: ()) (return (x: Int32.t)) =
    {[@expl:map_or_else requires] match self_ with
      | C_None -> precondition'4 default ()
      | C_Some t -> precondition'5 f t
      end}
    any
    [ return (result: Int32.t) -> {match self_ with
        | C_None -> postcondition_once'4 default () result
        | C_Some t -> postcondition_once'5 f t result
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec map_or'2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = [ &_7 <- () ] s3
      | s3 = map_or {none} {(2: Int32.t)} {_7} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = [ &_4 <- _5 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ] ]
    | bb2 = s0
      [ s0 = [ &_13 <- () ] s1
      | s1 = map_or'0 {some} {(-1: Int32.t)} {_13} (fun (_ret: Int32.t) -> [ &_11 <- _ret ] s2)
      | s2 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_10 <- _11 = (3: Int32.t) ] s1 | s1 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_19 <- () ] s1
      | s1 = map_or'1 {some} {(-1: Int32.t)} {_19} (fun (_ret: Int32.t) -> [ &_17 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_16 <- _17 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb8) ] ]
    | bb8 = s0
      [ s0 = [ &_25 <- () ] s1
      | s1 = [ &_26 <- () ] s2
      | s2 = map_or_else {none} {_25} {_26} (fun (_ret: Int32.t) -> [ &_23 <- _ret ] s3)
      | s3 = bb10 ]
    | bb10 = s0
      [ s0 = [ &_22 <- _23 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ] ]
    | bb11 = s0
      [ s0 = [ &_32 <- () ] s1
      | s1 = [ &_33 <- () ] s2
      | s2 = map_or_else'0 {some} {_32} {_33} (fun (_ret: Int32.t) -> [ &_30 <- _ret ] s3)
      | s3 = bb13 ]
    | bb13 = s0
      [ s0 = [ &_29 <- _30 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_29 = false} (! bb15) | br1 -> {_29} (! bb14) ] ]
    | bb14 = return {_0}
    | bb15 = {false} any
    | bb12 = {false} any
    | bb9 = {false} any
    | bb6 = {false} any
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: Int32.t = Any.any_l ()
    | & _13: () = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _17: Int32.t = Any.any_l ()
    | & _19: () = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _23: Int32.t = Any.any_l ()
    | & _25: () = Any.any_l ()
    | & _26: () = Any.any_l ()
    | & _29: bool = Any.any_l ()
    | & _30: Int32.t = Any.any_l ()
    | & _32: () = Any.any_l ()
    | & _33: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__ok_or
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  type t_Result = C_Ok Int32.t | C_Err bool
  
  predicate resolve [@inline:trivial] (_1: bool) = true
  
  meta "rewrite_def" predicate resolve
  
  let rec ok_or (self_: t_Option) (err: bool) (return (x: t_Result)) = any
    [ return (result: t_Result) -> {match self_ with
        | C_None -> result = C_Err err
        | C_Some t -> result = C_Ok t /\ resolve err
        end}
      (! return {result}) ]
  
  let rec closure0 [@coma:extspec] (self: ()) (return (x: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = return {_0} ] ] [ & _0: bool = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: ()) = closure0'pre self
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: ()) (result: bool) = closure0'post'return self result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec ok_or_else (self_: t_Option) (err: ()) (return (x: t_Result)) = {[@expl:ok_or_else requires] self_ = C_None
    -> precondition err ()}
    any
    [ return (result: t_Result) -> {match self_ with
        | C_None -> exists r: bool. result = C_Err r /\ postcondition_once err () r
        | C_Some t -> result = C_Ok t
        end}
      (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (return (x: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- false ] s1 | s1 = return {_0} ] ] [ & _0: bool = Any.any_l () ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: ()) = closure1'pre self
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: ()) (result: bool) =
    closure1'post'return self result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec ok_or_else'0 (self_: t_Option) (err: ()) (return (x: t_Result)) = {[@expl:ok_or_else requires] self_ = C_None
    -> precondition'0 err ()}
    any
    [ return (result: t_Result) -> {match self_ with
        | C_None -> exists r: bool. result = C_Err r /\ postcondition_once'0 err () r
        | C_Some t -> result = C_Ok t
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ok_or'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = ok_or {none} {true} (fun (_ret: t_Result) -> [ &err <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] err = C_Err true} s1
      | s1 = ok_or {some} {false} (fun (_ret: t_Result) -> [ &ok <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = {[@expl:assertion] ok = C_Ok (1: Int32.t)} s1
      | s1 = [ &_13 <- () ] s2
      | s2 = ok_or_else {none} {_13} (fun (_ret: t_Result) -> [ &err'0 <- _ret ] s3)
      | s3 = bb3 ]
    | bb3 = s0
      [ s0 = {[@expl:assertion] err'0 = C_Err true} s1
      | s1 = [ &_18 <- () ] s2
      | s2 = ok_or_else'0 {some} {_18} (fun (_ret: t_Result) -> [ &ok'0 <- _ret ] s3)
      | s3 = bb4 ]
    | bb4 = s0 [ s0 = {[@expl:assertion] ok'0 = C_Ok (1: Int32.t)} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & err: t_Result = Any.any_l ()
    | & ok: t_Result = Any.any_l ()
    | & err'0: t_Result = Any.any_l ()
    | & _13: () = Any.any_l ()
    | & ok'0: t_Result = Any.any_l ()
    | & _18: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__as_mut
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  type t_Option'0 = C_None'0 | C_Some'0 (MutBorrow.t Int32.t)
  
  let rec as_mut (self_: MutBorrow.t t_Option) (return (x: t_Option'0)) = any
    [ return (result: t_Option'0) -> {self_.current = C_None -> result = C_None'0 /\ self_.final = C_None}
      {self_.current = C_None
      \/ (exists r: MutBorrow.t Int32.t. result = C_Some'0 r
        /\ self_.current = C_Some (r.current) /\ self_.final = C_Some (r.final))}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: t_Option'0) =
    match self with
      | C_Some'0 x -> resolve'0 x
      | C_None'0 -> true
      end
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: t_Option'0) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  let rec is_none (self_: t_Option'0) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None'0)} (! return {result}) ]
  
  let rec unwrap (self_: t_Option'0) (return (x: MutBorrow.t Int32.t)) = {[@expl:unwrap requires] self_ <> C_None'0}
    any [ return (result: MutBorrow.t Int32.t) -> {C_Some'0 result = self_} (! return {result}) ]
  
  let rec unwrap'0 (self_: t_Option) (return (x: Int32.t)) = {[@expl:unwrap requires] self_ <> C_None}
    any [ return (result: Int32.t) -> {C_Some result = self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec as_mut'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_7 <- _ret ] [ &none <- _ret.final ] s3)
      | s3 = as_mut {_7} (fun (_ret: t_Option'0) -> [ &_6 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = -{resolve'2 _6}- s1 | s1 = is_none {_6} (fun (_ret: bool) -> [ &_4 <- _ret ] s2) | s2 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_11 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = as_mut {_11} (fun (_ret: t_Option'0) -> [ &_10 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0 [ s0 = unwrap {_10} (fun (_ret: MutBorrow.t Int32.t) -> [ &_9 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0
      [ s0 = [ &_9 <- { _9 with current = (2: Int32.t) } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = unwrap'0 {some} (fun (_ret: Int32.t) -> [ &_14 <- _ret ] s3)
      | s3 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_13 <- _14 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_13 = false} (! bb9) | br1 -> {_13} (! bb8) ] ]
    | bb8 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_19 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = as_mut {_19} (fun (_ret: t_Option'0) -> [ &_18 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = s0 [ s0 = unwrap {_18} (fun (_ret: MutBorrow.t Int32.t) -> [ &_17 <- _ret ] s1) | s1 = bb11 ]
    | bb11 = s0
      [ s0 = [ &_17 <- { _17 with current = (1: Int32.t) } ] s1
      | s1 = -{resolve'0 _17}- s2
      | s2 = unwrap'0 {some} (fun (_ret: Int32.t) -> [ &_22 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = s0
      [ s0 = [ &_21 <- _22 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_21 = false} (! bb14) | br1 -> {_21} (! bb13) ] ]
    | bb13 = return {_0}
    | bb14 = {false} any
    | bb9 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option'0 = Any.any_l ()
    | & _7: MutBorrow.t t_Option = Any.any_l ()
    | & _9: MutBorrow.t Int32.t = Any.any_l ()
    | & _10: t_Option'0 = Any.any_l ()
    | & _11: MutBorrow.t t_Option = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _14: Int32.t = Any.any_l ()
    | & _17: MutBorrow.t Int32.t = Any.any_l ()
    | & _18: t_Option'0 = Any.any_l ()
    | & _19: MutBorrow.t t_Option = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & _22: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__as_ref
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  type t_Option'0 = C_None'0 | C_Some'0 Int32.t
  
  let rec as_ref (self_: t_Option) (return (x: t_Option'0)) = any
    [ return (result: t_Option'0) -> {self_ = C_None -> result = C_None'0}
      {self_ = C_None \/ (exists r: Int32.t. result = C_Some'0 r /\ self_ = C_Some r)}
      (! return {result}) ]
  
  let rec is_none (self_: t_Option'0) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None'0)} (! return {result}) ]
  
  let rec unwrap (self_: t_Option'0) (return (x: Int32.t)) = {[@expl:unwrap requires] self_ <> C_None'0}
    any [ return (result: Int32.t) -> {C_Some'0 result = self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec as_ref'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = as_ref {none} (fun (_ret: t_Option'0) -> [ &_6 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = is_none {_6} (fun (_ret: bool) -> [ &_4 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0 [ s0 = as_ref {some} (fun (_ret: t_Option'0) -> [ &_13 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0 [ s0 = unwrap {_13} (fun (_ret: Int32.t) -> [ &_12 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0
      [ s0 = [ &_10 <- _12 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb7) ] ]
    | bb7 = return {_0}
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option'0 = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: Int32.t = Any.any_l ()
    | & _13: t_Option'0 = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__replace
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec replace (self_: MutBorrow.t t_Option) (value: Int32.t) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {result = self_.current /\ self_.final = C_Some value} (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  let rec unwrap (self_: t_Option) (return (x: Int32.t)) = {[@expl:unwrap requires] self_ <> C_None}
    any [ return (result: Int32.t) -> {C_Some result = self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec replace'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_7 <- _ret ] [ &none <- _ret.final ] s3)
      | s3 = replace {_7} {(2: Int32.t)} (fun (_ret: t_Option) -> [ &_6 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = is_none {_6} (fun (_ret: bool) -> [ &_4 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0 [ s0 = unwrap {none} (fun (_ret: Int32.t) -> [ &_11 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = [ &_10 <- _11 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_10 = false} (! bb7) | br1 -> {_10} (! bb6) ] ]
    | bb6 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_18 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = replace {_18} {(2: Int32.t)} (fun (_ret: t_Option) -> [ &_17 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0 [ s0 = unwrap {_17} (fun (_ret: Int32.t) -> [ &_16 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = [ &_15 <- _16 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_15 = false} (! bb11) | br1 -> {_15} (! bb10) ] ]
    | bb10 = s0 [ s0 = unwrap {some} (fun (_ret: Int32.t) -> [ &_22 <- _ret ] s1) | s1 = bb12 ]
    | bb12 = s0
      [ s0 = [ &_21 <- _22 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_21 = false} (! bb14) | br1 -> {_21} (! bb13) ] ]
    | bb13 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_29 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = replace {_29} {(1: Int32.t)} (fun (_ret: t_Option) -> [ &_28 <- _ret ] s2)
      | s2 = bb15 ]
    | bb15 = s0 [ s0 = unwrap {_28} (fun (_ret: Int32.t) -> [ &_27 <- _ret ] s1) | s1 = bb16 ]
    | bb16 = s0
      [ s0 = [ &_26 <- _27 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_26 = false} (! bb18) | br1 -> {_26} (! bb17) ] ]
    | bb17 = s0 [ s0 = unwrap {some} (fun (_ret: Int32.t) -> [ &_33 <- _ret ] s1) | s1 = bb19 ]
    | bb19 = s0
      [ s0 = [ &_32 <- _33 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_32 = false} (! bb21) | br1 -> {_32} (! bb20) ] ]
    | bb20 = return {_0}
    | bb21 = {false} any
    | bb18 = {false} any
    | bb14 = {false} any
    | bb11 = {false} any
    | bb7 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option = Any.any_l ()
    | & _7: MutBorrow.t t_Option = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _11: Int32.t = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _16: Int32.t = Any.any_l ()
    | & _17: t_Option = Any.any_l ()
    | & _18: MutBorrow.t t_Option = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & _22: Int32.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _27: Int32.t = Any.any_l ()
    | & _28: t_Option = Any.any_l ()
    | & _29: MutBorrow.t t_Option = Any.any_l ()
    | & _32: bool = Any.any_l ()
    | & _33: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__and_or_xor
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate resolve [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  let rec and (self_: t_Option) (optb: t_Option) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {self_ = C_None -> result = C_None /\ resolve'0 optb}
      {self_ = C_None \/ result = optb /\ resolve'0 self_}
      (! return {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec or (self_: t_Option) (optb: t_Option) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {self_ = C_None -> result = optb}
      {self_ = C_None \/ result = self_ /\ resolve'0 optb}
      (! return {result}) ]
  
  type tuple = { f0: t_Option; f1: t_Option }
  
  let rec xor (self_: t_Option) (optb: t_Option) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match { f0 = self_; f1 = optb } with
        | {f0 = C_None; f1 = C_None} -> result = C_None
        | {f0 = C_Some t1; f1 = C_Some t2} -> result = C_None /\ resolve t1 /\ resolve t2
        | {f0 = C_Some t; f1 = C_None} -> result = C_Some t
        | {f0 = C_None; f1 = C_Some t} -> result = C_Some t
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec and_or_xor (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = and {none} {none} (fun (_ret: t_Option) -> [ &_6 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_122 <- _const ] s1 ]
      | s1 = eq {_6} {_122} (fun (_ret: bool) -> [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0
      [ s0 = [ &_17 <- C_Some (2: Int32.t) ] s1
      | s1 = and {none} {_17} (fun (_ret: t_Option) -> [ &_15 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_121 <- _const ] s1 ]
      | s1 = eq {_15} {_121} (fun (_ret: bool) -> [ &_13 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ]
    | bb7 = s0 [ s0 = and {some} {none} (fun (_ret: t_Option) -> [ &_24 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_120 <- _const ] s1 ]
      | s1 = eq {_24} {_120} (fun (_ret: bool) -> [ &_22 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ]
    | bb11 = s0
      [ s0 = [ &_35 <- C_Some (2: Int32.t) ] s1
      | s1 = and {some} {_35} (fun (_ret: t_Option) -> [ &_33 <- _ret ] s2)
      | s2 = bb13 ]
    | bb13 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (2: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_119 <- _const ] s1 ]
      | s1 = eq {_33} {_119} (fun (_ret: bool) -> [ &_31 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = any [ br0 -> {_31 = false} (! bb16) | br1 -> {_31} (! bb15) ]
    | bb15 = s0 [ s0 = or {none} {none} (fun (_ret: t_Option) -> [ &_42 <- _ret ] s1) | s1 = bb17 ]
    | bb17 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_118 <- _const ] s1 ]
      | s1 = eq {_42} {_118} (fun (_ret: bool) -> [ &_40 <- _ret ] s2)
      | s2 = bb18 ]
    | bb18 = any [ br0 -> {_40 = false} (! bb20) | br1 -> {_40} (! bb19) ]
    | bb19 = s0
      [ s0 = [ &_53 <- C_Some (2: Int32.t) ] s1
      | s1 = or {none} {_53} (fun (_ret: t_Option) -> [ &_51 <- _ret ] s2)
      | s2 = bb21 ]
    | bb21 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (2: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_117 <- _const ] s1 ]
      | s1 = eq {_51} {_117} (fun (_ret: bool) -> [ &_49 <- _ret ] s2)
      | s2 = bb22 ]
    | bb22 = any [ br0 -> {_49 = false} (! bb24) | br1 -> {_49} (! bb23) ]
    | bb23 = s0 [ s0 = or {some} {none} (fun (_ret: t_Option) -> [ &_60 <- _ret ] s1) | s1 = bb25 ]
    | bb25 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_116 <- _const ] s1 ]
      | s1 = eq {_60} {_116} (fun (_ret: bool) -> [ &_58 <- _ret ] s2)
      | s2 = bb26 ]
    | bb26 = any [ br0 -> {_58 = false} (! bb28) | br1 -> {_58} (! bb27) ]
    | bb27 = s0
      [ s0 = [ &_71 <- C_Some (2: Int32.t) ] s1
      | s1 = or {some} {_71} (fun (_ret: t_Option) -> [ &_69 <- _ret ] s2)
      | s2 = bb29 ]
    | bb29 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_115 <- _const ] s1 ]
      | s1 = eq {_69} {_115} (fun (_ret: bool) -> [ &_67 <- _ret ] s2)
      | s2 = bb30 ]
    | bb30 = any [ br0 -> {_67 = false} (! bb32) | br1 -> {_67} (! bb31) ]
    | bb31 = s0 [ s0 = xor {none} {none} (fun (_ret: t_Option) -> [ &_78 <- _ret ] s1) | s1 = bb33 ]
    | bb33 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_114 <- _const ] s1 ]
      | s1 = eq {_78} {_114} (fun (_ret: bool) -> [ &_76 <- _ret ] s2)
      | s2 = bb34 ]
    | bb34 = any [ br0 -> {_76 = false} (! bb36) | br1 -> {_76} (! bb35) ]
    | bb35 = s0
      [ s0 = [ &_89 <- C_Some (2: Int32.t) ] s1
      | s1 = xor {none} {_89} (fun (_ret: t_Option) -> [ &_87 <- _ret ] s2)
      | s2 = bb37 ]
    | bb37 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (2: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_113 <- _const ] s1 ]
      | s1 = eq {_87} {_113} (fun (_ret: bool) -> [ &_85 <- _ret ] s2)
      | s2 = bb38 ]
    | bb38 = any [ br0 -> {_85 = false} (! bb40) | br1 -> {_85} (! bb39) ]
    | bb39 = s0 [ s0 = xor {some} {none} (fun (_ret: t_Option) -> [ &_96 <- _ret ] s1) | s1 = bb41 ]
    | bb41 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_112 <- _const ] s1 ]
      | s1 = eq {_96} {_112} (fun (_ret: bool) -> [ &_94 <- _ret ] s2)
      | s2 = bb42 ]
    | bb42 = any [ br0 -> {_94 = false} (! bb44) | br1 -> {_94} (! bb43) ]
    | bb43 = s0
      [ s0 = [ &_107 <- C_Some (2: Int32.t) ] s1
      | s1 = xor {some} {_107} (fun (_ret: t_Option) -> [ &_105 <- _ret ] s2)
      | s2 = bb45 ]
    | bb45 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_111 <- _const ] s1 ]
      | s1 = eq {_105} {_111} (fun (_ret: bool) -> [ &_103 <- _ret ] s2)
      | s2 = bb46 ]
    | bb46 = any [ br0 -> {_103 = false} (! bb48) | br1 -> {_103} (! bb47) ]
    | bb47 = return {_0}
    | bb48 = {false} any
    | bb44 = {false} any
    | bb40 = {false} any
    | bb36 = {false} any
    | bb32 = {false} any
    | bb28 = {false} any
    | bb24 = {false} any
    | bb20 = {false} any
    | bb16 = {false} any
    | bb12 = {false} any
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: t_Option = Any.any_l ()
    | & _17: t_Option = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _31: bool = Any.any_l ()
    | & _33: t_Option = Any.any_l ()
    | & _35: t_Option = Any.any_l ()
    | & _40: bool = Any.any_l ()
    | & _42: t_Option = Any.any_l ()
    | & _49: bool = Any.any_l ()
    | & _51: t_Option = Any.any_l ()
    | & _53: t_Option = Any.any_l ()
    | & _58: bool = Any.any_l ()
    | & _60: t_Option = Any.any_l ()
    | & _67: bool = Any.any_l ()
    | & _69: t_Option = Any.any_l ()
    | & _71: t_Option = Any.any_l ()
    | & _76: bool = Any.any_l ()
    | & _78: t_Option = Any.any_l ()
    | & _85: bool = Any.any_l ()
    | & _87: t_Option = Any.any_l ()
    | & _89: t_Option = Any.any_l ()
    | & _94: bool = Any.any_l ()
    | & _96: t_Option = Any.any_l ()
    | & _103: bool = Any.any_l ()
    | & _105: t_Option = Any.any_l ()
    | & _107: t_Option = Any.any_l ()
    | & _111: t_Option = Any.any_l ()
    | & _112: t_Option = Any.any_l ()
    | & _113: t_Option = Any.any_l ()
    | & _114: t_Option = Any.any_l ()
    | & _115: t_Option = Any.any_l ()
    | & _116: t_Option = Any.any_l ()
    | & _117: t_Option = Any.any_l ()
    | & _118: t_Option = Any.any_l ()
    | & _119: t_Option = Any.any_l ()
    | & _120: t_Option = Any.any_l ()
    | & _121: t_Option = Any.any_l ()
    | & _122: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__and_then
  use creusot.int.Int32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec closure0 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: t_Option)) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure0'pre self _0
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: t_Option) =
    let _0 = args in closure0'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec and_then (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:and_then requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition f t
      end}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> result = C_None
        | C_Some t -> postcondition_once f t result
        end}
      (! return {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec closure1 (self: ()) (x: Int32.t) (return (x'0: t_Option)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_4 <- x = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ] ]
    | bb1 = s0
      [ s0 = Int32.add {x} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &_6 <- _ret ] s1)
      | s1 = [ &res <- C_Some _6 ] s2
      | s2 = bb3 ]
    | bb2 = s0 [ s0 = [ &res <- C_None ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &_0 <- res ] s1 | s1 = return {_0} ] ]
    [ & _0: t_Option = Any.any_l ()
    | & x: Int32.t = x
    | & res: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: Int32.t = Any.any_l () ])
    [ return (result: t_Option) -> {[@expl:closure ensures] Int32.to_int x = 1
        /\ (exists y: Int32.t. result = C_Some y /\ Int32.to_int y = Int32.to_int x + 1)
      \/ Int32.to_int x <> 1 /\ result = C_None}
      (! return {result}) ]
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in true
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: Int32.t) (result: t_Option) =
    let x = args in Int32.to_int x = 1 /\ (exists y: Int32.t. result = C_Some y /\ Int32.to_int y = Int32.to_int x + 1)
    \/ Int32.to_int x <> 1 /\ result = C_None
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec and_then'0 (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:and_then requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'0 f t
      end}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> result = C_None
        | C_Some t -> postcondition_once'0 f t result
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec and_then'1 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some1 <- C_Some (1: Int32.t) ] s2
      | s2 = [ &some2 <- C_Some (3: Int32.t) ] s3
      | s3 = [ &_9 <- () ] s4
      | s4 = and_then {none} {_9} (fun (_ret: t_Option) -> [ &_7 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_34 <- _const ] s1 ]
      | s1 = eq {_7} {_34} (fun (_ret: bool) -> [ &_5 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_5 = false} (! bb4) | br1 -> {_5} (! bb3) ]
    | bb3 = s0
      [ s0 = [ &clos <- () ] s1
      | s1 = and_then'0 {some1} {clos} (fun (_ret: t_Option) -> [ &_17 <- _ret ] s2)
      | s2 = bb5 ]
    | bb5 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (2: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_33 <- _const ] s1 ]
      | s1 = eq {_17} {_33} (fun (_ret: bool) -> [ &_15 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = any [ br0 -> {_15 = false} (! bb8) | br1 -> {_15} (! bb7) ]
    | bb7 = s0 [ s0 = and_then'0 {some2} {clos} (fun (_ret: t_Option) -> [ &_26 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_32 <- _const ] s1 ]
      | s1 = eq {_26} {_32} (fun (_ret: bool) -> [ &_24 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = any [ br0 -> {_24 = false} (! bb12) | br1 -> {_24} (! bb11) ]
    | bb11 = return {_0}
    | bb12 = {false} any
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some1: t_Option = Any.any_l ()
    | & some2: t_Option = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _7: t_Option = Any.any_l ()
    | & _9: () = Any.any_l ()
    | & clos: () = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: t_Option = Any.any_l ()
    | & _24: bool = Any.any_l ()
    | & _26: t_Option = Any.any_l ()
    | & _32: t_Option = Any.any_l ()
    | & _33: t_Option = Any.any_l ()
    | & _34: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__filter
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec closure0 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: bool)) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure0'pre self _0
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: bool) =
    let _0 = args in closure0'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate resolve
  
  let rec filter (self_: t_Option) (predicate': ()) (return (x: t_Option)) = {[@expl:filter requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition predicate' t
      end}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> result = C_None
        | C_Some t -> match result with
          | C_None -> postcondition_once predicate' t false /\ resolve t
          | C_Some r -> postcondition_once predicate' t true /\ r = t
          end
        end}
      (! return {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x = (1: Int32.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure1'pre self x
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: Int32.t) (result: bool) =
    let x = args in closure1'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec filter'0 (self_: t_Option) (predicate': ()) (return (x: t_Option)) = {[@expl:filter requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'0 predicate' t
      end}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> result = C_None
        | C_Some t -> match result with
          | C_None -> postcondition_once'0 predicate' t false /\ resolve t
          | C_Some r -> postcondition_once'0 predicate' t true /\ r = t
          end
        end}
      (! return {result}) ]
  
  let rec closure2 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x = (2: Int32.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure2'pre
  
  meta "rewrite_def" predicate closure2'post'return
  
  predicate precondition'1 [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure2'pre self x
  
  meta "rewrite_def" predicate precondition'1
  
  predicate postcondition_once'1 [@inline:trivial] (self: ()) (args: Int32.t) (result: bool) =
    let x = args in closure2'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  let rec filter'1 (self_: t_Option) (predicate': ()) (return (x: t_Option)) = {[@expl:filter requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'1 predicate' t
      end}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> result = C_None
        | C_Some t -> match result with
          | C_None -> postcondition_once'1 predicate' t false /\ resolve t
          | C_Some r -> postcondition_once'1 predicate' t true /\ r = t
          end
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec filter'2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = [ &_8 <- () ] s3
      | s3 = filter {none} {_8} (fun (_ret: t_Option) -> [ &_6 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_32 <- _const ] s1 ]
      | s1 = eq {_6} {_32} (fun (_ret: bool) -> [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0
      [ s0 = [ &_17 <- () ] s1 | s1 = filter'0 {some} {_17} (fun (_ret: t_Option) -> [ &_15 <- _ret ] s2) | s2 = bb5 ]
    | bb5 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_31 <- _const ] s1 ]
      | s1 = eq {_15} {_31} (fun (_ret: bool) -> [ &_13 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ]
    | bb7 = s0
      [ s0 = [ &_26 <- () ] s1 | s1 = filter'1 {some} {_26} (fun (_ret: t_Option) -> [ &_24 <- _ret ] s2) | s2 = bb9 ]
    | bb9 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_30 <- _const ] s1 ]
      | s1 = eq {_24} {_30} (fun (_ret: bool) -> [ &_22 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ]
    | bb11 = return {_0}
    | bb12 = {false} any
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: t_Option = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _26: () = Any.any_l ()
    | & _30: t_Option = Any.any_l ()
    | & _31: t_Option = Any.any_l ()
    | & _32: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__is_some_and
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec closure0 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x = (1: Int32.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure0'pre self x
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: bool) =
    let x = args in closure0'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec is_some_and (self_: t_Option) (f: ()) (return (x: bool)) = {[@expl:is_some_and requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition f t
      end}
    any
    [ return (result: bool) -> {match self_ with
        | C_None -> result = false
        | C_Some t -> postcondition_once f t result
        end}
      (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (x: Int32.t) (return (x'0: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x = (1: Int32.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () | & x: Int32.t = x ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: Int32.t) = let x = args in closure1'pre self x
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: Int32.t) (result: bool) =
    let x = args in closure1'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec is_some_and'0 (self_: t_Option) (f: ()) (return (x: bool)) = {[@expl:is_some_and requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'0 f t
      end}
    any
    [ return (result: bool) -> {match self_ with
        | C_None -> result = false
        | C_Some t -> postcondition_once'0 f t result
        end}
      (! return {result}) ]
  
  let rec closure2 [@coma:extspec] (self: ()) (_0: Int32.t) (return (x: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0'0 <- true ] s1 | s1 = return {_0'0} ] ] [ & _0'0: bool = Any.any_l () ]
  
  meta "rewrite_def" predicate closure2'pre
  
  meta "rewrite_def" predicate closure2'post'return
  
  predicate precondition'1 [@inline:trivial] (self: ()) (args: Int32.t) = let _0 = args in closure2'pre self _0
  
  meta "rewrite_def" predicate precondition'1
  
  predicate postcondition_once'1 [@inline:trivial] (self: ()) (args: Int32.t) (result: bool) =
    let _0 = args in closure2'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  let rec is_some_and'1 (self_: t_Option) (f: ()) (return (x: bool)) = {[@expl:is_some_and requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'1 f t
      end}
    any
    [ return (result: bool) -> {match self_ with
        | C_None -> result = false
        | C_Some t -> postcondition_once'1 f t result
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_some_and'2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some1 <- C_Some (1: Int32.t) ] s2
      | s2 = [ &some2 <- C_Some (2: Int32.t) ] s3
      | s3 = [ &_7 <- () ] s4
      | s4 = is_some_and {some1} {_7} (fun (_ret: bool) -> [ &_5 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb2) ]
    | bb2 = s0
      [ s0 = [ &_12 <- () ] s1 | s1 = is_some_and'0 {some2} {_12} (fun (_ret: bool) -> [ &_10 <- _ret ] s2) | s2 = bb4 ]
    | bb4 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]
    | bb5 = {false} any
    | bb6 = s0
      [ s0 = [ &_17 <- () ] s1 | s1 = is_some_and'1 {none} {_17} (fun (_ret: bool) -> [ &_15 <- _ret ] s2) | s2 = bb7 ]
    | bb7 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ]
    | bb8 = {false} any
    | bb9 = return {_0}
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some1: t_Option = Any.any_l ()
    | & some2: t_Option = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: () = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__or_else
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec closure0 [@coma:extspec] (self: ()) (return (x: t_Option)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- C_Some (2: Int32.t) ] s1 | s1 = return {_0} ] ] [ & _0: t_Option = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: ()) = closure0'pre self
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: ()) (result: t_Option) =
    closure0'post'return self result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec or_else (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:or_else requires] self_ = C_None
    -> precondition f ()}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> postcondition_once f () result
        | C_Some t -> result = C_Some t
        end}
      (! return {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (return (x: t_Option)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- C_None ] s1 | s1 = return {_0} ] ] [ & _0: t_Option = Any.any_l () ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: ()) = closure1'pre self
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: ()) (result: t_Option) =
    closure1'post'return self result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec or_else'0 (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:or_else requires] self_ = C_None
    -> precondition'0 f ()}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> postcondition_once'0 f () result
        | C_Some t -> result = C_Some t
        end}
      (! return {result}) ]
  
  let rec closure2 [@coma:extspec] (self: ()) (return (x: t_Option)) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure2'pre
  
  meta "rewrite_def" predicate closure2'post'return
  
  predicate precondition'1 [@inline:trivial] (self: ()) (args: ()) = closure2'pre self
  
  meta "rewrite_def" predicate precondition'1
  
  predicate postcondition_once'1 [@inline:trivial] (self: ()) (args: ()) (result: t_Option) =
    closure2'post'return self result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  let rec or_else'1 (self_: t_Option) (f: ()) (return (x: t_Option)) = {[@expl:or_else requires] self_ = C_None
    -> precondition'1 f ()}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> postcondition_once'1 f () result
        | C_Some t -> result = C_Some t
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec or_else'2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = [ &_8 <- () ] s3
      | s3 = or_else {none} {_8} (fun (_ret: t_Option) -> [ &_6 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (2: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_32 <- _const ] s1 ]
      | s1 = eq {_6} {_32} (fun (_ret: bool) -> [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0
      [ s0 = [ &_17 <- () ] s1 | s1 = or_else'0 {none} {_17} (fun (_ret: t_Option) -> [ &_15 <- _ret ] s2) | s2 = bb5 ]
    | bb5 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_31 <- _const ] s1 ]
      | s1 = eq {_15} {_31} (fun (_ret: bool) -> [ &_13 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ]
    | bb7 = s0
      [ s0 = [ &_26 <- () ] s1 | s1 = or_else'1 {some} {_26} (fun (_ret: t_Option) -> [ &_24 <- _ret ] s2) | s2 = bb9 ]
    | bb9 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_30 <- _const ] s1 ]
      | s1 = eq {_24} {_30} (fun (_ret: bool) -> [ &_22 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ]
    | bb11 = return {_0}
    | bb12 = {false} any
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: t_Option = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _26: () = Any.any_l ()
    | & _30: t_Option = Any.any_l ()
    | & _31: t_Option = Any.any_l ()
    | & _32: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__insert
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate resolve [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate resolve
  
  let rec insert (self_: MutBorrow.t t_Option) (value: Int32.t) (return (x: MutBorrow.t Int32.t)) = any
    [ return (result: MutBorrow.t Int32.t) -> {match self_.current with
        | C_Some t -> resolve t
        | C_None -> true
        end}
      {result.current = value /\ self_.final = C_Some (result.final)}
      (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve'0 _1
  
  meta "rewrite_def" predicate resolve'1
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec insert'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_4 <- _ret ] [ &none <- _ret.final ] s3)
      | s3 = insert {_4} {(2: Int32.t)} (fun (_ret: MutBorrow.t Int32.t) -> [ &i1 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_6 <- i1.current = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_6 = false} (! bb3) | br1 -> {_6} (! bb2) ] ]
    | bb2 = s0
      [ s0 = [ &i1 <- { i1 with current = (3: Int32.t) } ] s1
      | s1 = -{resolve'1 i1}- s2
      | s2 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (3: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_28 <- _const ] s3 ]
      | s3 = eq {none} {_28} (fun (_ret: bool) -> [ &_10 <- _ret ] s4)
      | s4 = bb4 ]
    | bb4 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]
    | bb5 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_16 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = insert {_16} {(4: Int32.t)} (fun (_ret: MutBorrow.t Int32.t) -> [ &i2 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_18 <- i2.current = (4: Int32.t) ] s1
      | s1 = any [ br0 -> {_18 = false} (! bb9) | br1 -> {_18} (! bb8) ] ]
    | bb8 = s0
      [ s0 = [ &i2 <- { i2 with current = (5: Int32.t) } ] s1
      | s1 = -{resolve'1 i2}- s2
      | s2 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (5: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_27 <- _const ] s3 ]
      | s3 = eq {some} {_27} (fun (_ret: bool) -> [ &_22 <- _ret ] s4)
      | s4 = bb10 ]
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ]
    | bb11 = return {_0}
    | bb12 = {false} any
    | bb9 = s0 [ s0 = -{resolve'1 i2}- s1 | s1 = {false} any ]
    | bb6 = {false} any
    | bb3 = s0 [ s0 = -{resolve'1 i1}- s1 | s1 = {false} any ] ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & i1: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: MutBorrow.t t_Option = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & i2: MutBorrow.t Int32.t = Any.any_l ()
    | & _16: MutBorrow.t t_Option = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _27: t_Option = Any.any_l ()
    | & _28: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__get_or_insert
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate resolve [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate resolve
  
  let rec get_or_insert (self_: MutBorrow.t t_Option) (value: Int32.t) (return (x: MutBorrow.t Int32.t)) = any
    [ return (result: MutBorrow.t Int32.t) -> {match self_.current with
        | C_None -> result.current = value /\ self_.final = C_Some (result.final)
        | C_Some _ -> self_.current = C_Some (result.current) /\ self_.final = C_Some (result.final) /\ resolve value
        end}
      (! return {result}) ]
  
  predicate resolve'0 [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve'0 _1
  
  meta "rewrite_def" predicate resolve'1
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec closure0 [@coma:extspec] (self: ()) (return (x: Int32.t)) = bb0
    [ bb0 = s0 [ s0 = [ &_0 <- (2: Int32.t) ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: ()) = closure0'pre self
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    closure0'post'return self result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec get_or_insert_with (self_: MutBorrow.t t_Option) (f: ()) (return (x: MutBorrow.t Int32.t)) =
    {[@expl:get_or_insert_with requires] self_.current = C_None -> precondition f ()}
    any
    [ return (result: MutBorrow.t Int32.t) -> {match self_.current with
        | C_None -> postcondition_once f () result.current /\ self_.final = C_Some (result.final)
        | C_Some _ -> self_.current = C_Some (result.current) /\ self_.final = C_Some (result.final)
        end}
      (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (return (x: Int32.t)) = bb0 [ bb0 = {false} any ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: ()) = closure1'pre self
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    closure1'post'return self result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec get_or_insert_with'0 (self_: MutBorrow.t t_Option) (f: ()) (return (x: MutBorrow.t Int32.t)) =
    {[@expl:get_or_insert_with requires] self_.current = C_None -> precondition'0 f ()}
    any
    [ return (result: MutBorrow.t Int32.t) -> {match self_.current with
        | C_None -> postcondition_once'0 f () result.current /\ self_.final = C_Some (result.final)
        | C_Some _ -> self_.current = C_Some (result.current) /\ self_.final = C_Some (result.final)
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get_or_insert'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_4 <- _ret ] [ &none <- _ret.final ] s3)
      | s3 = get_or_insert {_4} {(2: Int32.t)} (fun (_ret: MutBorrow.t Int32.t) -> [ &i1 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_6 <- i1.current = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_6 = false} (! bb3) | br1 -> {_6} (! bb2) ] ]
    | bb2 = s0
      [ s0 = [ &i1 <- { i1 with current = (3: Int32.t) } ] s1
      | s1 = -{resolve'1 i1}- s2
      | s2 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (3: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_58 <- _const ] s3 ]
      | s3 = eq {none} {_58} (fun (_ret: bool) -> [ &_10 <- _ret ] s4)
      | s4 = bb4 ]
    | bb4 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]
    | bb5 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_16 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = get_or_insert {_16} {(4: Int32.t)} (fun (_ret: MutBorrow.t Int32.t) -> [ &i2 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = [ &_18 <- i2.current = (1: Int32.t) ] s1
      | s1 = any [ br0 -> {_18 = false} (! bb9) | br1 -> {_18} (! bb8) ] ]
    | bb8 = s0
      [ s0 = [ &i2 <- { i2 with current = (5: Int32.t) } ] s1
      | s1 = -{resolve'1 i2}- s2
      | s2 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (5: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_57 <- _const ] s3 ]
      | s3 = eq {some} {_57} (fun (_ret: bool) -> [ &_22 <- _ret ] s4)
      | s4 = bb10 ]
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ]
    | bb11 = s0
      [ s0 = [ &_27 <- C_None ] s1
      | s1 = [ &none <- _27 ] s2
      | s2 = [ &_28 <- C_Some (1: Int32.t) ] s3
      | s3 = [ &some <- _28 ] s4
      | s4 = [ &_31 <- () ] s5
      | s5 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_30 <- _ret ] [ &none <- _ret.final ] s6)
      | s6 = get_or_insert_with {_30} {_31} (fun (_ret: MutBorrow.t Int32.t) -> [ &i1'0 <- _ret ] s7)
      | s7 = bb13 ]
    | bb13 = s0
      [ s0 = [ &_33 <- i1'0.current = (2: Int32.t) ] s1
      | s1 = any [ br0 -> {_33 = false} (! bb15) | br1 -> {_33} (! bb14) ] ]
    | bb14 = s0
      [ s0 = [ &i1'0 <- { i1'0 with current = (3: Int32.t) } ] s1
      | s1 = -{resolve'1 i1'0}- s2
      | s2 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (3: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_56 <- _const ] s3 ]
      | s3 = eq {none} {_56} (fun (_ret: bool) -> [ &_37 <- _ret ] s4)
      | s4 = bb16 ]
    | bb16 = any [ br0 -> {_37 = false} (! bb18) | br1 -> {_37} (! bb17) ]
    | bb17 = s0
      [ s0 = [ &_44 <- () ] s1
      | s1 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_43 <- _ret ] [ &some <- _ret.final ] s2)
      | s2 = get_or_insert_with'0 {_43} {_44} (fun (_ret: MutBorrow.t Int32.t) -> [ &i2'0 <- _ret ] s3)
      | s3 = bb19 ]
    | bb19 = s0
      [ s0 = [ &_46 <- i2'0.current = (1: Int32.t) ] s1
      | s1 = any [ br0 -> {_46 = false} (! bb21) | br1 -> {_46} (! bb20) ] ]
    | bb20 = s0
      [ s0 = [ &i2'0 <- { i2'0 with current = (5: Int32.t) } ] s1
      | s1 = -{resolve'1 i2'0}- s2
      | s2 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (5: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_55 <- _const ] s3 ]
      | s3 = eq {some} {_55} (fun (_ret: bool) -> [ &_50 <- _ret ] s4)
      | s4 = bb22 ]
    | bb22 = any [ br0 -> {_50 = false} (! bb24) | br1 -> {_50} (! bb23) ]
    | bb23 = return {_0}
    | bb24 = {false} any
    | bb21 = s0 [ s0 = -{resolve'1 i2'0}- s1 | s1 = {false} any ]
    | bb18 = {false} any
    | bb15 = s0 [ s0 = -{resolve'1 i1'0}- s1 | s1 = {false} any ]
    | bb12 = {false} any
    | bb9 = s0 [ s0 = -{resolve'1 i2}- s1 | s1 = {false} any ]
    | bb6 = {false} any
    | bb3 = s0 [ s0 = -{resolve'1 i1}- s1 | s1 = {false} any ] ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & i1: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: MutBorrow.t t_Option = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & i2: MutBorrow.t Int32.t = Any.any_l ()
    | & _16: MutBorrow.t t_Option = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _27: t_Option = Any.any_l ()
    | & _28: t_Option = Any.any_l ()
    | & i1'0: MutBorrow.t Int32.t = Any.any_l ()
    | & _30: MutBorrow.t t_Option = Any.any_l ()
    | & _31: () = Any.any_l ()
    | & _33: bool = Any.any_l ()
    | & _37: bool = Any.any_l ()
    | & i2'0: MutBorrow.t Int32.t = Any.any_l ()
    | & _43: MutBorrow.t t_Option = Any.any_l ()
    | & _44: () = Any.any_l ()
    | & _46: bool = Any.any_l ()
    | & _50: bool = Any.any_l ()
    | & _55: t_Option = Any.any_l ()
    | & _56: t_Option = Any.any_l ()
    | & _57: t_Option = Any.any_l ()
    | & _58: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__take
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  let rec take (self_: MutBorrow.t t_Option) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {result = self_.current /\ self_.final = C_None} (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  let rec unwrap (self_: t_Option) (return (x: Int32.t)) = {[@expl:unwrap requires] self_ <> C_None}
    any [ return (result: Int32.t) -> {C_Some result = self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_7 <- _ret ] [ &none <- _ret.final ] s3)
      | s3 = take {_7} (fun (_ret: t_Option) -> [ &_6 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = is_none {_6} (fun (_ret: bool) -> [ &_4 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0 [ s0 = is_none {none} (fun (_ret: bool) -> [ &_10 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = any [ br0 -> {_10 = false} (! bb7) | br1 -> {_10} (! bb6) ]
    | bb6 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_17 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = take {_17} (fun (_ret: t_Option) -> [ &_16 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0 [ s0 = unwrap {_16} (fun (_ret: Int32.t) -> [ &_15 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = [ &_14 <- _15 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_14 = false} (! bb11) | br1 -> {_14} (! bb10) ] ]
    | bb10 = s0 [ s0 = is_none {some} (fun (_ret: bool) -> [ &_20 <- _ret ] s1) | s1 = bb12 ]
    | bb12 = any [ br0 -> {_20 = false} (! bb14) | br1 -> {_20} (! bb13) ]
    | bb13 = return {_0}
    | bb14 = {false} any
    | bb11 = {false} any
    | bb7 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option = Any.any_l ()
    | & _7: MutBorrow.t t_Option = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: Int32.t = Any.any_l ()
    | & _16: t_Option = Any.any_l ()
    | & _17: MutBorrow.t t_Option = Any.any_l ()
    | & _20: bool = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__take_if
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  let rec closure0 [@coma:extspec] (self: ()) (_0: MutBorrow.t Int32.t) (return (x: bool)) = bb0
    [ bb0 = s0 [ s0 = -{resolve'0 _0}- s1 | s1 = {false} any ] ] [ & _0: MutBorrow.t Int32.t = _0 ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate inv (_1: MutBorrow.t Int32.t)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t Int32.t [inv x]. inv x = true
  
  predicate precondition [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) =
    let _0 = args in closure0'pre self _0
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) (result: bool) =
    let _0 = args in closure0'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec take_if (self_: MutBorrow.t t_Option) (predicate': ()) (return (x: t_Option)) =
    {[@expl:take_if requires] match self_.current with
      | C_None -> true
      | C_Some t -> forall b: MutBorrow.t Int32.t. inv b /\ b.current = t -> precondition predicate' b
      end}
    any
    [ return (result: t_Option) -> {match self_.current with
        | C_None -> result = C_None /\ self_.final = C_None
        | C_Some cur -> exists b: MutBorrow.t Int32.t, res: bool. inv b
          /\ cur = b.current
          /\ postcondition_once predicate' b res
          /\ (if res then
            self_.final = C_None /\ result = C_Some (b.final)
          else
            self_.final = C_Some (b.final) /\ result = C_None
          )
        end}
      (! return {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option) : t_Option'0 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec closure1 [@coma:extspec] (self: ()) (x: MutBorrow.t Int32.t) (return (x'0: bool)) = bb0
    [ bb0 = s0 [ s0 = -{resolve'0 x}- s1 | s1 = [ &_0 <- x.current = (2: Int32.t) ] s2 | s2 = return {_0} ] ]
    [ & _0: bool = Any.any_l () | & x: MutBorrow.t Int32.t = x ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) =
    let x = args in closure1'pre self x
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) (result: bool) =
    let x = args in closure1'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec take_if'0 (self_: MutBorrow.t t_Option) (predicate': ()) (return (x: t_Option)) =
    {[@expl:take_if requires] match self_.current with
      | C_None -> true
      | C_Some t -> forall b: MutBorrow.t Int32.t. inv b /\ b.current = t -> precondition'0 predicate' b
      end}
    any
    [ return (result: t_Option) -> {match self_.current with
        | C_None -> result = C_None /\ self_.final = C_None
        | C_Some cur -> exists b: MutBorrow.t Int32.t, res: bool. inv b
          /\ cur = b.current
          /\ postcondition_once'0 predicate' b res
          /\ (if res then
            self_.final = C_None /\ result = C_Some (b.final)
          else
            self_.final = C_Some (b.final) /\ result = C_None
          )
        end}
      (! return {result}) ]
  
  let rec closure2 [@coma:extspec] (self: ()) (x: MutBorrow.t Int32.t) (return (x'0: bool)) = bb0
    [ bb0 = s0
      [ s0 = [ &res <- x.current = (1: Int32.t) ] s1
      | s1 = [ &x <- { x with current = (3: Int32.t) } ] s2
      | s2 = -{resolve'0 x}- s3
      | s3 = [ &_0 <- res ] s4
      | s4 = return {_0} ] ] [ & _0: bool = Any.any_l () | & x: MutBorrow.t Int32.t = x | & res: bool = Any.any_l () ]
  
  meta "rewrite_def" predicate closure2'pre
  
  meta "rewrite_def" predicate closure2'post'return
  
  predicate precondition'1 [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) =
    let x = args in closure2'pre self x
  
  meta "rewrite_def" predicate precondition'1
  
  predicate postcondition_once'1 [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) (result: bool) =
    let x = args in closure2'post'return self x result
  
  meta "rewrite_def" predicate postcondition_once'1
  
  let rec take_if'1 (self_: MutBorrow.t t_Option) (predicate': ()) (return (x: t_Option)) =
    {[@expl:take_if requires] match self_.current with
      | C_None -> true
      | C_Some t -> forall b: MutBorrow.t Int32.t. inv b /\ b.current = t -> precondition'1 predicate' b
      end}
    any
    [ return (result: t_Option) -> {match self_.current with
        | C_None -> result = C_None /\ self_.final = C_None
        | C_Some cur -> exists b: MutBorrow.t Int32.t, res: bool. inv b
          /\ cur = b.current
          /\ postcondition_once'1 predicate' b res
          /\ (if res then
            self_.final = C_None /\ result = C_Some (b.final)
          else
            self_.final = C_Some (b.final) /\ result = C_None
          )
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec take_if'2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = [ &_8 <- () ] s3
      | s3 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_7 <- _ret ] [ &none <- _ret.final ] s4)
      | s4 = take_if {_7} {_8} (fun (_ret: t_Option) -> [ &_6 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_46 <- _const ] s1 ]
      | s1 = eq {_6} {_46} (fun (_ret: bool) -> [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]
    | bb3 = s0
      [ s0 = [ &_17 <- () ] s1
      | s1 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_16 <- _ret ] [ &some <- _ret.final ] s2)
      | s2 = take_if'0 {_16} {_17} (fun (_ret: t_Option) -> [ &_15 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_45 <- _const ] s1 ]
      | s1 = eq {_15} {_45} (fun (_ret: bool) -> [ &_13 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ]
    | bb7 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_44 <- _const ] s1 ]
      | s1 = eq {some} {_44} (fun (_ret: bool) -> [ &_22 <- _ret ] s2)
      | s2 = bb9 ]
    | bb9 = any [ br0 -> {_22 = false} (! bb11) | br1 -> {_22} (! bb10) ]
    | bb10 = s0
      [ s0 = [ &_32 <- () ] s1
      | s1 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_31 <- _ret ] [ &some <- _ret.final ] s2)
      | s2 = take_if'1 {_31} {_32} (fun (_ret: t_Option) -> [ &_30 <- _ret ] s3)
      | s3 = bb12 ]
    | bb12 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (3: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_43 <- _const ] s1 ]
      | s1 = eq {_30} {_43} (fun (_ret: bool) -> [ &_28 <- _ret ] s2)
      | s2 = bb13 ]
    | bb13 = any [ br0 -> {_28 = false} (! bb15) | br1 -> {_28} (! bb14) ]
    | bb14 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_42 <- _const ] s1 ]
      | s1 = eq {some} {_42} (fun (_ret: bool) -> [ &_37 <- _ret ] s2)
      | s2 = bb16 ]
    | bb16 = any [ br0 -> {_37 = false} (! bb18) | br1 -> {_37} (! bb17) ]
    | bb17 = return {_0}
    | bb18 = {false} any
    | bb15 = {false} any
    | bb11 = {false} any
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option = Any.any_l ()
    | & _7: MutBorrow.t t_Option = Any.any_l ()
    | & _8: () = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: t_Option = Any.any_l ()
    | & _16: MutBorrow.t t_Option = Any.any_l ()
    | & _17: () = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _28: bool = Any.any_l ()
    | & _30: t_Option = Any.any_l ()
    | & _31: MutBorrow.t t_Option = Any.any_l ()
    | & _32: () = Any.any_l ()
    | & _37: bool = Any.any_l ()
    | & _42: t_Option = Any.any_l ()
    | & _43: t_Option = Any.any_l ()
    | & _44: t_Option = Any.any_l ()
    | & _45: t_Option = Any.any_l ()
    | & _46: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__copied_cloned
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  type t_Option'0 = C_None'0 | C_Some'0 Int32.t
  
  let rec as_ref (self_: t_Option) (return (x: t_Option'0)) = any
    [ return (result: t_Option'0) -> {self_ = C_None -> result = C_None'0}
      {self_ = C_None \/ (exists r: Int32.t. result = C_Some'0 r /\ self_ = C_Some r)}
      (! return {result}) ]
  
  let rec copied (self_: t_Option'0) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match self_ with
        | C_None'0 -> result = C_None
        | C_Some'0 s -> result = C_Some s
        end}
      (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  let rec unwrap (self_: t_Option) (return (x: Int32.t)) = {[@expl:unwrap requires] self_ <> C_None}
    any [ return (result: Int32.t) -> {C_Some result = self_} (! return {result}) ]
  
  type t_Option'1 = C_None'1 | C_Some'1 (MutBorrow.t Int32.t)
  
  let rec as_mut (self_: MutBorrow.t t_Option) (return (x: t_Option'1)) = any
    [ return (result: t_Option'1) -> {self_.current = C_None -> result = C_None'1 /\ self_.final = C_None}
      {self_.current = C_None
      \/ (exists r: MutBorrow.t Int32.t. result = C_Some'1 r
        /\ self_.current = C_Some (r.current) /\ self_.final = C_Some (r.final))}
      (! return {result}) ]
  
  let rec copied'0 (self_: t_Option'1) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match self_ with
        | C_None'1 -> result = C_None
        | C_Some'1 s -> result = C_Some (s.current) /\ s.final = s.current
        end}
      (! return {result}) ]
  
  type tuple = { f0: t_Option'0; f1: t_Option }
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: Int32.t) (result_state: ()) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once self args res
      = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec clone' (self_: Int32.t) (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = self_} (! return {result}) ]
  
  let rec cloned (self_: t_Option'0) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match { f0 = self_; f1 = result } with
        | {f0 = C_None'0; f1 = C_None} -> true
        | {f0 = C_Some'0 s; f1 = C_Some r} -> postcondition () s r
        | _ -> false
        end}
      (! return {result}) ]
  
  type tuple'0 = { f0'0: t_Option'1; f1'0: t_Option }
  
  let rec cloned'0 (self_: t_Option'1) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match { f0'0 = self_; f1'0 = result } with
        | {f0'0 = C_None'1; f1'0 = C_None} -> true
        | {f0'0 = C_Some'1 s; f1'0 = C_Some r} -> postcondition () s.current r /\ s.final = s.current
        | _ -> false
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec copied_cloned (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &some <- C_Some (1: Int32.t) ] s2
      | s2 = as_ref {none} (fun (_ret: t_Option'0) -> [ &_7 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = copied {_7} (fun (_ret: t_Option) -> [ &_6 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = is_none {_6} (fun (_ret: bool) -> [ &_4 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = any [ br0 -> {_4 = false} (! bb5) | br1 -> {_4} (! bb4) ]
    | bb4 = s0 [ s0 = as_ref {some} (fun (_ret: t_Option'0) -> [ &_14 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0 [ s0 = copied {_14} (fun (_ret: t_Option) -> [ &_13 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0 [ s0 = unwrap {_13} (fun (_ret: Int32.t) -> [ &_12 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0
      [ s0 = [ &_11 <- _12 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_11 = false} (! bb10) | br1 -> {_11} (! bb9) ] ]
    | bb9 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_22 <- _ret ] [ &none <- _ret.final ] s1)
      | s1 = as_mut {_22} (fun (_ret: t_Option'1) -> [ &_21 <- _ret ] s2)
      | s2 = bb11 ]
    | bb11 = s0 [ s0 = copied'0 {_21} (fun (_ret: t_Option) -> [ &_20 <- _ret ] s1) | s1 = bb12 ]
    | bb12 = s0 [ s0 = is_none {_20} (fun (_ret: bool) -> [ &_18 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = any [ br0 -> {_18 = false} (! bb15) | br1 -> {_18} (! bb14) ]
    | bb14 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_29 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = as_mut {_29} (fun (_ret: t_Option'1) -> [ &_28 <- _ret ] s2)
      | s2 = bb16 ]
    | bb16 = s0 [ s0 = copied'0 {_28} (fun (_ret: t_Option) -> [ &_27 <- _ret ] s1) | s1 = bb17 ]
    | bb17 = s0 [ s0 = unwrap {_27} (fun (_ret: Int32.t) -> [ &_26 <- _ret ] s1) | s1 = bb18 ]
    | bb18 = s0
      [ s0 = [ &_25 <- _26 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_25 = false} (! bb20) | br1 -> {_25} (! bb19) ] ]
    | bb19 = s0 [ s0 = as_ref {none} (fun (_ret: t_Option'0) -> [ &_35 <- _ret ] s1) | s1 = bb21 ]
    | bb21 = s0 [ s0 = cloned {_35} (fun (_ret: t_Option) -> [ &_34 <- _ret ] s1) | s1 = bb22 ]
    | bb22 = s0 [ s0 = is_none {_34} (fun (_ret: bool) -> [ &_32 <- _ret ] s1) | s1 = bb23 ]
    | bb23 = any [ br0 -> {_32 = false} (! bb25) | br1 -> {_32} (! bb24) ]
    | bb24 = s0 [ s0 = as_ref {some} (fun (_ret: t_Option'0) -> [ &_42 <- _ret ] s1) | s1 = bb26 ]
    | bb26 = s0 [ s0 = cloned {_42} (fun (_ret: t_Option) -> [ &_41 <- _ret ] s1) | s1 = bb27 ]
    | bb27 = s0 [ s0 = unwrap {_41} (fun (_ret: Int32.t) -> [ &_40 <- _ret ] s1) | s1 = bb28 ]
    | bb28 = s0
      [ s0 = [ &_39 <- _40 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_39 = false} (! bb30) | br1 -> {_39} (! bb29) ] ]
    | bb29 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {none}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_50 <- _ret ] [ &none <- _ret.final ] s1)
      | s1 = as_mut {_50} (fun (_ret: t_Option'1) -> [ &_49 <- _ret ] s2)
      | s2 = bb31 ]
    | bb31 = s0 [ s0 = cloned'0 {_49} (fun (_ret: t_Option) -> [ &_48 <- _ret ] s1) | s1 = bb32 ]
    | bb32 = s0 [ s0 = is_none {_48} (fun (_ret: bool) -> [ &_46 <- _ret ] s1) | s1 = bb33 ]
    | bb33 = any [ br0 -> {_46 = false} (! bb35) | br1 -> {_46} (! bb34) ]
    | bb34 = s0
      [ s0 = MutBorrow.borrow_mut <t_Option> {some}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_57 <- _ret ] [ &some <- _ret.final ] s1)
      | s1 = as_mut {_57} (fun (_ret: t_Option'1) -> [ &_56 <- _ret ] s2)
      | s2 = bb36 ]
    | bb36 = s0 [ s0 = cloned'0 {_56} (fun (_ret: t_Option) -> [ &_55 <- _ret ] s1) | s1 = bb37 ]
    | bb37 = s0 [ s0 = unwrap {_55} (fun (_ret: Int32.t) -> [ &_54 <- _ret ] s1) | s1 = bb38 ]
    | bb38 = s0
      [ s0 = [ &_53 <- _54 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_53 = false} (! bb40) | br1 -> {_53} (! bb39) ] ]
    | bb39 = return {_0}
    | bb40 = {false} any
    | bb35 = {false} any
    | bb30 = {false} any
    | bb25 = {false} any
    | bb20 = {false} any
    | bb15 = {false} any
    | bb10 = {false} any
    | bb5 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some: t_Option = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Option = Any.any_l ()
    | & _7: t_Option'0 = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _12: Int32.t = Any.any_l ()
    | & _13: t_Option = Any.any_l ()
    | & _14: t_Option'0 = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _20: t_Option = Any.any_l ()
    | & _21: t_Option'1 = Any.any_l ()
    | & _22: MutBorrow.t t_Option = Any.any_l ()
    | & _25: bool = Any.any_l ()
    | & _26: Int32.t = Any.any_l ()
    | & _27: t_Option = Any.any_l ()
    | & _28: t_Option'1 = Any.any_l ()
    | & _29: MutBorrow.t t_Option = Any.any_l ()
    | & _32: bool = Any.any_l ()
    | & _34: t_Option = Any.any_l ()
    | & _35: t_Option'0 = Any.any_l ()
    | & _39: bool = Any.any_l ()
    | & _40: Int32.t = Any.any_l ()
    | & _41: t_Option = Any.any_l ()
    | & _42: t_Option'0 = Any.any_l ()
    | & _46: bool = Any.any_l ()
    | & _48: t_Option = Any.any_l ()
    | & _49: t_Option'1 = Any.any_l ()
    | & _50: MutBorrow.t t_Option = Any.any_l ()
    | & _53: bool = Any.any_l ()
    | & _54: Int32.t = Any.any_l ()
    | & _55: t_Option = Any.any_l ()
    | & _56: t_Option'1 = Any.any_l ()
    | & _57: MutBorrow.t t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__zip_unzip
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  type t_Option'0 = C_None'0 | C_Some'0 bool
  
  type tuple = { f0: Int32.t; f1: bool }
  
  type t_Option'1 = C_None'1 | C_Some'1 tuple
  
  type tuple'0 = { f0'0: t_Option; f1'0: t_Option'0 }
  
  predicate resolve [@inline:trivial] (_1: bool) = true
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (self: t_Option'0) =
    match self with
      | C_Some'0 x -> resolve x
      | C_None'0 -> true
      end
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve'1 x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'2
  
  let rec zip (self_: t_Option) (other: t_Option'0) (return (x: t_Option'1)) = any
    [ return (result: t_Option'1) -> {match { f0'0 = self_; f1'0 = other } with
        | {f0'0 = C_None} -> result = C_None'1 /\ resolve'0 other
        | {f1'0 = C_None'0} -> result = C_None'1 /\ resolve'2 self_
        | {f0'0 = C_Some t; f1'0 = C_Some'0 u} -> result = C_Some'1 { f0 = t; f1 = u }
        end}
      (! return {result}) ]
  
  type tuple'1 = { f0'1: int; f1'1: bool }
  
  type t_Option'2 = C_None'2 | C_Some'2 tuple'1
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  predicate deep_model'0 [@inline:trivial] (self: bool) = self
  
  meta "rewrite_def" predicate deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: tuple) : tuple'1 = { f0'1 = deep_model self.f0;
                                                                      f1'1 = deep_model'0 self.f1 }
  
  meta "rewrite_def" function deep_model'1
  
  function deep_model'2 [@inline:trivial] (self: t_Option'1) : t_Option'2 = match self with
      | C_Some'1 t -> C_Some'2 (deep_model'1 t)
      | C_None'1 -> C_None'2
      end
  
  meta "rewrite_def" function deep_model'2
  
  function deep_model'3 [@inline:trivial] (self: t_Option'1) : t_Option'2 = deep_model'2 self
  
  meta "rewrite_def" function deep_model'3
  
  let rec eq (self_: t_Option'1) (rhs: t_Option'1) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'3 self_ = deep_model'3 rhs)} (! return {result}) ]
  
  let rec unzip (self_: t_Option'1) (return (x: tuple'0)) = any
    [ return (result: tuple'0) -> {match self_ with
        | C_None'1 -> result = { f0'0 = C_None; f1'0 = C_None'0 }
        | C_Some'1 {f0 = t; f1 = u} -> result = { f0'0 = C_Some t; f1'0 = C_Some'0 u }
        end}
      (! return {result}) ]
  
  type t_Option'3 = C_None'3 | C_Some'3 int
  
  function deep_model'4 [@inline:trivial] (self: t_Option) : t_Option'3 = match self with
      | C_Some t -> C_Some'3 (deep_model t)
      | C_None -> C_None'3
      end
  
  meta "rewrite_def" function deep_model'4
  
  function deep_model'5 [@inline:trivial] (self: t_Option) : t_Option'3 = deep_model'4 self
  
  meta "rewrite_def" function deep_model'5
  
  let rec eq'0 (self_: t_Option) (rhs: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'5 self_ = deep_model'5 rhs)} (! return {result}) ]
  
  function deep_model'6 [@inline:trivial] (self: t_Option'0) : t_Option'0 = match self with
      | C_Some'0 t -> C_Some'0 (deep_model'0 t)
      | C_None'0 -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'6
  
  function deep_model'7 [@inline:trivial] (self: t_Option'0) : t_Option'0 = deep_model'6 self
  
  meta "rewrite_def" function deep_model'7
  
  let rec eq'1 (self_: t_Option'0) (rhs: t_Option'0) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'7 self_ = deep_model'7 rhs)} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec zip_unzip (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none_int <- C_None ] s1
      | s1 = [ &none_bool <- C_None'0 ] s2
      | s2 = [ &some_int <- C_Some (1: Int32.t) ] s3
      | s3 = [ &some_bool <- C_Some'0 true ] s4
      | s4 = zip {none_int} {none_bool} (fun (_ret: t_Option'1) -> [ &_8 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None'1 ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'1 = Any.any_l () | & _1: t_Option'1 = Any.any_l () ]
        [ _const_ret (_const: t_Option'1) -> [ &_80 <- _const ] s1 ]
      | s1 = eq {_8} {_80} (fun (_ret: bool) -> [ &_6 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = any [ br0 -> {_6 = false} (! bb4) | br1 -> {_6} (! bb3) ]
    | bb3 = s0 [ s0 = zip {none_int} {some_bool} (fun (_ret: t_Option'1) -> [ &_17 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None'1 ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'1 = Any.any_l () | & _1: t_Option'1 = Any.any_l () ]
        [ _const_ret (_const: t_Option'1) -> [ &_79 <- _const ] s1 ]
      | s1 = eq {_17} {_79} (fun (_ret: bool) -> [ &_15 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = any [ br0 -> {_15 = false} (! bb8) | br1 -> {_15} (! bb7) ]
    | bb7 = s0 [ s0 = zip {some_int} {none_bool} (fun (_ret: t_Option'1) -> [ &_26 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None'1 ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'1 = Any.any_l () | & _1: t_Option'1 = Any.any_l () ]
        [ _const_ret (_const: t_Option'1) -> [ &_78 <- _const ] s1 ]
      | s1 = eq {_26} {_78} (fun (_ret: bool) -> [ &_24 <- _ret ] s2)
      | s2 = bb10 ]
    | bb10 = any [ br0 -> {_24 = false} (! bb12) | br1 -> {_24} (! bb11) ]
    | bb11 = s0 [ s0 = zip {some_int} {some_bool} (fun (_ret: t_Option'1) -> [ &_35 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_2 <- { f0 = (1: Int32.t); f1 = true } ] s1'0
          | s1'0 = [ &_1 <- C_Some'1 _2 ] s2'0
          | s2'0 = [ &_0'0 <- _1 ] s3
          | s3 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'1 = Any.any_l () | & _1: t_Option'1 = Any.any_l () | & _2: tuple = Any.any_l () ]
        [ _const_ret (_const: t_Option'1) -> [ &_77 <- _const ] s1 ]
      | s1 = eq {_35} {_77} (fun (_ret: bool) -> [ &_33 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = any [ br0 -> {_33 = false} (! bb16) | br1 -> {_33} (! bb15) ]
    | bb15 = s0
      [ s0 = [ &none_zipped <- C_None'1 ] s1
      | s1 = [ &_44 <- { f0 = (1: Int32.t); f1 = true } ] s2
      | s2 = [ &some_zipped <- C_Some'1 _44 ] s3
      | s3 = unzip {none_zipped} (fun (_ret: tuple'0) -> [ &none_unzip <- _ret ] s4)
      | s4 = bb17 ]
    | bb17 = s0 [ s0 = unzip {some_zipped} (fun (_ret: tuple'0) -> [ &some_unzip <- _ret ] s1) | s1 = bb18 ]
    | bb18 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_76 <- _const ] s1 ]
      | s1 = eq'0 {none_unzip.f0'0} {_76} (fun (_ret: bool) -> [ &_50 <- _ret ] s2)
      | s2 = bb19 ]
    | bb19 = any [ br0 -> {_50 = false} (! bb21) | br1 -> {_50} (! bb20) ]
    | bb20 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None'0 ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'0 = Any.any_l () | & _1: t_Option'0 = Any.any_l () ]
        [ _const_ret (_const: t_Option'0) -> [ &_75 <- _const ] s1 ]
      | s1 = eq'1 {none_unzip.f1'0} {_75} (fun (_ret: bool) -> [ &_56 <- _ret ] s2)
      | s2 = bb22 ]
    | bb22 = any [ br0 -> {_56 = false} (! bb24) | br1 -> {_56} (! bb23) ]
    | bb23 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ]
        [ _const_ret (_const: t_Option) -> [ &_74 <- _const ] s1 ]
      | s1 = eq'0 {some_unzip.f0'0} {_74} (fun (_ret: bool) -> [ &_62 <- _ret ] s2)
      | s2 = bb25 ]
    | bb25 = any [ br0 -> {_62 = false} (! bb27) | br1 -> {_62} (! bb26) ]
    | bb26 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some'0 true ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'0 = Any.any_l () | & _1: t_Option'0 = Any.any_l () ]
        [ _const_ret (_const: t_Option'0) -> [ &_73 <- _const ] s1 ]
      | s1 = eq'1 {some_unzip.f1'0} {_73} (fun (_ret: bool) -> [ &_68 <- _ret ] s2)
      | s2 = bb28 ]
    | bb28 = any [ br0 -> {_68 = false} (! bb30) | br1 -> {_68} (! bb29) ]
    | bb29 = return {_0}
    | bb30 = {false} any
    | bb27 = {false} any
    | bb24 = {false} any
    | bb21 = {false} any
    | bb16 = {false} any
    | bb12 = {false} any
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none_int: t_Option = Any.any_l ()
    | & none_bool: t_Option'0 = Any.any_l ()
    | & some_int: t_Option = Any.any_l ()
    | & some_bool: t_Option'0 = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _8: t_Option'1 = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: t_Option'1 = Any.any_l ()
    | & _24: bool = Any.any_l ()
    | & _26: t_Option'1 = Any.any_l ()
    | & _33: bool = Any.any_l ()
    | & _35: t_Option'1 = Any.any_l ()
    | & none_zipped: t_Option'1 = Any.any_l ()
    | & some_zipped: t_Option'1 = Any.any_l ()
    | & _44: tuple = Any.any_l ()
    | & none_unzip: tuple'0 = Any.any_l ()
    | & some_unzip: tuple'0 = Any.any_l ()
    | & _50: bool = Any.any_l ()
    | & _56: bool = Any.any_l ()
    | & _62: bool = Any.any_l ()
    | & _68: bool = Any.any_l ()
    | & _73: t_Option'0 = Any.any_l ()
    | & _74: t_Option = Any.any_l ()
    | & _75: t_Option'0 = Any.any_l ()
    | & _76: t_Option = Any.any_l ()
    | & _77: t_Option'1 = Any.any_l ()
    | & _78: t_Option'1 = Any.any_l ()
    | & _79: t_Option'1 = Any.any_l ()
    | & _80: t_Option'1 = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__transpose
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Result = C_Ok Int32.t | C_Err bool
  
  type t_Option = C_None | C_Some t_Result
  
  type t_Option'0 = C_None'0 | C_Some'0 Int32.t
  
  type t_Result'0 = C_Ok'0 t_Option'0 | C_Err'0 bool
  
  let rec transpose (self_: t_Option) (return (x: t_Result'0)) = any
    [ return (result: t_Result'0) -> {match self_ with
        | C_None -> result = C_Ok'0 (C_None'0)
        | C_Some (C_Ok ok) -> result = C_Ok'0 (C_Some'0 ok)
        | C_Some (C_Err err) -> result = C_Err'0 err
        end}
      (! return {result}) ]
  
  let rec unwrap (self_: t_Result'0) (return (x: t_Option'0)) = {[@expl:unwrap requires] exists t: t_Option'0. self_
      = C_Ok'0 t}
    any [ return (result: t_Option'0) -> {C_Ok'0 result = self_} (! return {result}) ]
  
  type t_Option'1 = C_None'1 | C_Some'1 int
  
  function deep_model [@inline:trivial] (self: Int32.t) : int = Int32.to_int self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Option'0) : t_Option'1 = match self with
      | C_Some'0 t -> C_Some'1 (deep_model t)
      | C_None'0 -> C_None'1
      end
  
  meta "rewrite_def" function deep_model'0
  
  function deep_model'1 [@inline:trivial] (self: t_Option'0) : t_Option'1 = deep_model'0 self
  
  meta "rewrite_def" function deep_model'1
  
  let rec eq (self_: t_Option'0) (rhs: t_Option'0) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'1 self_ = deep_model'1 rhs)} (! return {result}) ]
  
  let rec unwrap_err (self_: t_Result'0) (return (x: bool)) = {[@expl:unwrap_err requires] exists e: bool. self_
      = C_Err'0 e}
    any [ return (result: bool) -> {C_Err'0 result = self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec transpose'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &none <- C_None ] s1
      | s1 = [ &_3 <- C_Ok (1: Int32.t) ] s2
      | s2 = [ &some_ok <- C_Some _3 ] s3
      | s3 = [ &_5 <- C_Err true ] s4
      | s4 = [ &some_err <- C_Some _5 ] s5
      | s5 = transpose {none} (fun (_ret: t_Result'0) -> [ &_10 <- _ret ] s6)
      | s6 = bb1 ]
    | bb1 = s0 [ s0 = unwrap {_10} (fun (_ret: t_Option'0) -> [ &_9 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0 [ s0'0 = [ &_1 <- C_None'0 ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'0 = Any.any_l () | & _1: t_Option'0 = Any.any_l () ]
        [ _const_ret (_const: t_Option'0) -> [ &_31 <- _const ] s1 ]
      | s1 = eq {_9} {_31} (fun (_ret: bool) -> [ &_7 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb4) ]
    | bb4 = s0 [ s0 = transpose {some_ok} (fun (_ret: t_Result'0) -> [ &_19 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0 [ s0 = unwrap {_19} (fun (_ret: t_Option'0) -> [ &_18 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0
      [ s0 = bb0'0
        [ bb0'0 = s0'0
          [ s0'0 = [ &_1 <- C_Some'0 (1: Int32.t) ] s1'0 | s1'0 = [ &_0'0 <- _1 ] s2'0 | s2'0 = _const_ret {_0'0} ] ]
        [ & _0'0: t_Option'0 = Any.any_l () | & _1: t_Option'0 = Any.any_l () ]
        [ _const_ret (_const: t_Option'0) -> [ &_30 <- _const ] s1 ]
      | s1 = eq {_18} {_30} (fun (_ret: bool) -> [ &_16 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = any [ br0 -> {_16 = false} (! bb10) | br1 -> {_16} (! bb9) ]
    | bb9 = s0 [ s0 = transpose {some_err} (fun (_ret: t_Result'0) -> [ &_27 <- _ret ] s1) | s1 = bb11 ]
    | bb11 = s0 [ s0 = unwrap_err {_27} (fun (_ret: bool) -> [ &_26 <- _ret ] s1) | s1 = bb12 ]
    | bb12 = s0 [ s0 = [ &_25 <- _26 ] s1 | s1 = any [ br0 -> {_25 = false} (! bb14) | br1 -> {_25} (! bb13) ] ]
    | bb13 = return {_0}
    | bb14 = {false} any
    | bb10 = {false} any
    | bb5 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & none: t_Option = Any.any_l ()
    | & some_ok: t_Option = Any.any_l ()
    | & _3: t_Result = Any.any_l ()
    | & some_err: t_Option = Any.any_l ()
    | & _5: t_Result = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _9: t_Option'0 = Any.any_l ()
    | & _10: t_Result'0 = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _18: t_Option'0 = Any.any_l ()
    | & _19: t_Result'0 = Any.any_l ()
    | & _25: bool = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _27: t_Result'0 = Any.any_l ()
    | & _30: t_Option'0 = Any.any_l ()
    | & _31: t_Option'0 = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__flatten
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  type t_Option'0 = C_None'0 | C_Some'0 t_Option
  
  let rec flatten (self_: t_Option'0) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {self_ = C_None'0 -> result = C_None}
      {self_ = C_None'0 \/ self_ = C_Some'0 result}
      (! return {result}) ]
  
  let rec is_none (self_: t_Option) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None)} (! return {result}) ]
  
  let rec unwrap (self_: t_Option) (return (x: Int32.t)) = {[@expl:unwrap requires] self_ <> C_None}
    any [ return (result: Int32.t) -> {C_Some result = self_} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec flatten'0 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &opt <- C_None'0 ] s1 | s1 = flatten {opt} (fun (_ret: t_Option) -> [ &_5 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = s0 [ s0 = is_none {_5} (fun (_ret: bool) -> [ &_3 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = any [ br0 -> {_3 = false} (! bb4) | br1 -> {_3} (! bb3) ]
    | bb3 = s0
      [ s0 = [ &_9 <- C_None ] s1
      | s1 = [ &opt'0 <- C_Some'0 _9 ] s2
      | s2 = flatten {opt'0} (fun (_ret: t_Option) -> [ &_13 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = is_none {_13} (fun (_ret: bool) -> [ &_11 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = any [ br0 -> {_11 = false} (! bb8) | br1 -> {_11} (! bb7) ]
    | bb7 = s0
      [ s0 = [ &_17 <- C_Some (1: Int32.t) ] s1
      | s1 = [ &opt'1 <- C_Some'0 _17 ] s2
      | s2 = flatten {opt'1} (fun (_ret: t_Option) -> [ &_21 <- _ret ] s3)
      | s3 = bb9 ]
    | bb9 = s0 [ s0 = unwrap {_21} (fun (_ret: Int32.t) -> [ &_20 <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0
      [ s0 = [ &_19 <- _20 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_19 = false} (! bb12) | br1 -> {_19} (! bb11) ] ]
    | bb11 = return {_0}
    | bb12 = {false} any
    | bb8 = {false} any
    | bb4 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & opt: t_Option'0 = Any.any_l ()
    | & _3: bool = Any.any_l ()
    | & _5: t_Option = Any.any_l ()
    | & opt'0: t_Option'0 = Any.any_l ()
    | & _9: t_Option = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: t_Option = Any.any_l ()
    | & opt'1: t_Option'0 = Any.any_l ()
    | & _17: t_Option = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _20: Int32.t = Any.any_l ()
    | & _21: t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_option__resolve
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some (MutBorrow.t Int32.t)
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  let rec closure1 [@coma:extspec] (self: ()) (_0: MutBorrow.t Int32.t) (return (x: bool)) = bb0
    [ bb0 = s0 [ s0 = -{resolve'0 _0}- s1 | s1 = [ &_0'0 <- true ] s2 | s2 = return {_0'0} ] ]
    [ & _0'0: bool = Any.any_l () | & _0: MutBorrow.t Int32.t = _0 ]
  
  meta "rewrite_def" predicate closure1'pre
  
  meta "rewrite_def" predicate closure1'post'return
  
  predicate precondition [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) =
    let _0 = args in closure1'pre self _0
  
  meta "rewrite_def" predicate precondition
  
  predicate postcondition_once [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) (result: bool) =
    let _0 = args in closure1'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once
  
  let rec is_some_and (self_: t_Option) (f: ()) (return (x: bool)) = {[@expl:is_some_and requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition f t
      end}
    any
    [ return (result: bool) -> {match self_ with
        | C_None -> result = false
        | C_Some t -> postcondition_once f t result
        end}
      (! return {result}) ]
  
  type t_Option'0 = C_None'0 | C_Some'0 Int32.t
  
  predicate resolve'1 [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (self: t_Option'0) =
    match self with
      | C_Some'0 x -> resolve'1 x
      | C_None'0 -> true
      end
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (self: t_Option) =
    match self with
      | C_Some x -> resolve'0 x
      | C_None -> true
      end
  
  meta "rewrite_def" predicate resolve'3
  
  let rec and (self_: t_Option) (optb: t_Option'0) (return (x: t_Option'0)) = any
    [ return (result: t_Option'0) -> {self_ = C_None -> result = C_None'0 /\ resolve'2 optb}
      {self_ = C_None \/ result = optb /\ resolve'3 self_}
      (! return {result}) ]
  
  let rec or (self_: t_Option) (optb: t_Option) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {self_ = C_None -> result = optb}
      {self_ = C_None \/ result = self_ /\ resolve'3 optb}
      (! return {result}) ]
  
  predicate resolve'4 [@inline:trivial] (_1: t_Option) = resolve'3 _1
  
  meta "rewrite_def" predicate resolve'4
  
  let rec closure0 [@coma:extspec] (self: ()) (_0: MutBorrow.t Int32.t) (return (x: bool)) = bb0
    [ bb0 = s0 [ s0 = [ &_0'0 <- false ] s1 | s1 = return {_0'0} ] ] [ & _0'0: bool = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  predicate precondition'0 [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) =
    let _0 = args in closure0'pre self _0
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: ()) (args: MutBorrow.t Int32.t) (result: bool) =
    let _0 = args in closure0'post'return self _0 result
  
  meta "rewrite_def" predicate postcondition_once'0
  
  let rec filter (self_: t_Option) (predicate': ()) (return (x: t_Option)) = {[@expl:filter requires] match self_ with
      | C_None -> true
      | C_Some t -> precondition'0 predicate' t
      end}
    any
    [ return (result: t_Option) -> {match self_ with
        | C_None -> result = C_None
        | C_Some t -> match result with
          | C_None -> postcondition_once'0 predicate' t false /\ resolve'0 t
          | C_Some r -> postcondition_once'0 predicate' t true /\ r = t
          end
        end}
      (! return {result}) ]
  
  type tuple = { f0: t_Option; f1: t_Option }
  
  let rec xor (self_: t_Option) (optb: t_Option) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {match { f0 = self_; f1 = optb } with
        | {f0 = C_None; f1 = C_None} -> result = C_None
        | {f0 = C_Some t1; f1 = C_Some t2} -> result = C_None /\ resolve'0 t1 /\ resolve'0 t2
        | {f0 = C_Some t; f1 = C_None} -> result = C_Some t
        | {f0 = C_None; f1 = C_Some t} -> result = C_Some t
        end}
      (! return {result}) ]
  
  let rec insert (self_: MutBorrow.t t_Option) (value: MutBorrow.t Int32.t)
    (return (x: MutBorrow.t (MutBorrow.t Int32.t))) = any
    [ return (result: MutBorrow.t (MutBorrow.t Int32.t)) -> {match self_.current with
        | C_Some t -> resolve'0 t
        | C_None -> true
        end}
      {result.current = value /\ self_.final = C_Some (result.final)}
      (! return {result}) ]
  
  predicate resolve'5 [@inline:trivial] (self: MutBorrow.t (MutBorrow.t Int32.t)) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'5
  
  predicate resolve'6 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t Int32.t)) = resolve'5 _1
  
  meta "rewrite_def" predicate resolve'6
  
  let rec get_or_insert (self_: MutBorrow.t t_Option) (value: MutBorrow.t Int32.t)
    (return (x: MutBorrow.t (MutBorrow.t Int32.t))) = any
    [ return (result: MutBorrow.t (MutBorrow.t Int32.t)) -> {match self_.current with
        | C_None -> result.current = value /\ self_.final = C_Some (result.final)
        | C_Some _ -> self_.current = C_Some (result.current) /\ self_.final = C_Some (result.final) /\ resolve'0 value
        end}
      (! return {result}) ]
  
  type tuple'0 = { f0'0: MutBorrow.t Int32.t; f1'0: Int32.t }
  
  type t_Option'1 = C_None'1 | C_Some'1 tuple'0
  
  type tuple'1 = { f0'1: t_Option; f1'1: t_Option'0 }
  
  let rec zip (self_: t_Option) (other: t_Option'0) (return (x: t_Option'1)) = any
    [ return (result: t_Option'1) -> {match { f0'1 = self_; f1'1 = other } with
        | {f0'1 = C_None} -> result = C_None'1 /\ resolve'2 other
        | {f1'1 = C_None'0} -> result = C_None'1 /\ resolve'3 self_
        | {f0'1 = C_Some t; f1'1 = C_Some'0 u} -> result = C_Some'1 { f0'0 = t; f1'0 = u }
        end}
      (! return {result}) ]
  
  predicate resolve'7 [@inline:trivial] (self: tuple'0) = resolve'0 self.f0'0 /\ resolve'1 self.f1'0
  
  meta "rewrite_def" predicate resolve'7
  
  predicate resolve'8 [@inline:trivial] (_1: tuple'0) = resolve'7 _1
  
  meta "rewrite_def" predicate resolve'8
  
  predicate resolve'9 [@inline:trivial] (self: t_Option'1) =
    match self with
      | C_Some'1 x -> resolve'8 x
      | C_None'1 -> true
      end
  
  meta "rewrite_def" predicate resolve'9
  
  predicate resolve'10 [@inline:trivial] (_1: t_Option'1) = resolve'9 _1
  
  meta "rewrite_def" predicate resolve'10
  
  let rec copied (self_: t_Option) (return (x: t_Option'0)) = any
    [ return (result: t_Option'0) -> {match self_ with
        | C_None -> result = C_None'0
        | C_Some s -> result = C_Some'0 (s.current) /\ s.final = s.current
        end}
      (! return {result}) ]
  
  predicate postcondition_once'1 [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition_once'1
  
  predicate resolve'11 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve'11
  
  predicate postcondition_mut [@inline:trivial] (self: ()) (args: Int32.t) (result_state: ()) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once'1 self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'11 res_state)
  
  predicate hist_inv [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). hist_inv self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: ()) (args: Int32.t) (result: Int32.t) =
    let self_ = args in result = self_
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: Int32.t, res: Int32.t. postcondition_once'1 self args res
      = (postcondition self args res /\ resolve'11 self)
  
  function fn_mut (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: Int32.t, res_state: (), res: Int32.t. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec clone' (self_: Int32.t) (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = self_} (! return {result}) ]
  
  let rec cloned (self_: t_Option) (return (x: t_Option'0)) = any
    [ return (result: t_Option'0) -> {match { f0'1 = self_; f1'1 = result } with
        | {f0'1 = C_None; f1'1 = C_None'0} -> true
        | {f0'1 = C_Some s; f1'1 = C_Some'0 r} -> postcondition () s.current r /\ s.final = s.current
        | _ -> false
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec resolve'12 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (1: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_3 <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = [ &opt <- C_Some _3 ] s3
      | s3 = [ &_7 <- () ] s4
      | s4 = is_some_and {opt} {_7} (fun (_ret: bool) -> [ &_5 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb2) ]
    | bb2 = s0
      [ s0 = [ &_10 <- x = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb4) ] ]
    | bb4 = s0
      [ s0 = [ &x'0 <- (1: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x'0}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_15 <- _ret ] [ &x'0 <- _ret.final ] s2)
      | s2 = [ &opt'0 <- C_Some _15 ] s3
      | s3 = [ &_18 <- C_Some'0 (2: Int32.t) ] s4
      | s4 = and {opt'0} {_18} (fun (_ret: t_Option'0) -> [ &_16 <- _ret ] s5)
      | s5 = bb6 ]
    | bb6 = s0
      [ s0 = [ &_20 <- x'0 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_20 = false} (! bb8) | br1 -> {_20} (! bb7) ] ]
    | bb7 = s0
      [ s0 = [ &x'1 <- (1: Int32.t) ] s1
      | s1 = [ &y <- (2: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <Int32.t> {x'1}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_26 <- _ret ] [ &x'1 <- _ret.final ] s3)
      | s3 = [ &opt'1 <- C_Some _26 ] s4
      | s4 = MutBorrow.borrow_mut <Int32.t> {y}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_29 <- _ret ] [ &y <- _ret.final ] s5)
      | s5 = [ &_28 <- C_Some _29 ] s6
      | s6 = or {_28} {opt'1} (fun (_ret: t_Option) -> [ &_27 <- _ret ] s7)
      | s7 = bb9 ]
    | bb9 = s0
      [ s0 = -{resolve'4 _27}- s1
      | s1 = [ &_32 <- x'1 = (1: Int32.t) ] s2
      | s2 = any [ br0 -> {_32 = false} (! bb14) | br1 -> {_32} (! bb10) ] ]
    | bb10 = s0
      [ s0 = [ &_34 <- y = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_34 = false} (! bb14) | br1 -> {_34} (! bb11) ] ]
    | bb11 = s0
      [ s0 = [ &x'2 <- (1: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x'2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_39 <- _ret ] [ &x'2 <- _ret.final ] s2)
      | s2 = [ &opt'2 <- C_Some _39 ] s3
      | s3 = [ &_42 <- () ] s4
      | s4 = filter {opt'2} {_42} (fun (_ret: t_Option) -> [ &_40 <- _ret ] s5)
      | s5 = bb15 ]
    | bb15 = s0
      [ s0 = -{resolve'4 _40}- s1
      | s1 = [ &_44 <- x'2 = (1: Int32.t) ] s2
      | s2 = any [ br0 -> {_44 = false} (! bb17) | br1 -> {_44} (! bb16) ] ]
    | bb16 = s0
      [ s0 = [ &x'3 <- (1: Int32.t) ] s1
      | s1 = [ &y'0 <- (2: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <Int32.t> {x'3}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_50 <- _ret ] [ &x'3 <- _ret.final ] s3)
      | s3 = [ &optx <- C_Some _50 ] s4
      | s4 = MutBorrow.borrow_mut <Int32.t> {y'0}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_52 <- _ret ] [ &y'0 <- _ret.final ] s5)
      | s5 = [ &opty <- C_Some _52 ] s6
      | s6 = xor {optx} {opty} (fun (_ret: t_Option) -> [ &_53 <- _ret ] s7)
      | s7 = bb18 ]
    | bb18 = s0
      [ s0 = -{resolve'4 _53}- s1
      | s1 = [ &_57 <- x'3 = (1: Int32.t) ] s2
      | s2 = any [ br0 -> {_57 = false} (! bb23) | br1 -> {_57} (! bb19) ] ]
    | bb19 = s0
      [ s0 = [ &_59 <- y'0 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_59 = false} (! bb23) | br1 -> {_59} (! bb20) ] ]
    | bb20 = s0
      [ s0 = [ &x'4 <- (1: Int32.t) ] s1
      | s1 = [ &y'1 <- (2: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <Int32.t> {x'4}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_65 <- _ret ] [ &x'4 <- _ret.final ] s3)
      | s3 = [ &opt'3 <- C_Some _65 ] s4
      | s4 = MutBorrow.borrow_mut <Int32.t> {y'1}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_69 <- _ret ] [ &y'1 <- _ret.final ] s5)
      | s5 = MutBorrow.borrow_mut <t_Option> {opt'3}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_67 <- _ret ] [ &opt'3 <- _ret.final ] s6)
      | s6 = MutBorrow.borrow_final <Int32.t> {_69.current} {MutBorrow.get_id _69}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_68 <- _ret ] [ &_69 <- { _69 with current = _ret.final } ] s7)
      | s7 = insert {_67} {_68} (fun (_ret: MutBorrow.t (MutBorrow.t Int32.t)) -> [ &bor <- _ret ] s8)
      | s8 = bb24 ]
    | bb24 = s0
      [ s0 = -{resolve'0 _69}- s1
      | s1 = [ &bor <- { bor with current = { bor.current with current = (3: Int32.t) } } ] s2
      | s2 = -{resolve'6 bor}- s3
      | s3 = -{resolve'4 opt'3}- s4
      | s4 = [ &_71 <- x'4 = (1: Int32.t) ] s5
      | s5 = any [ br0 -> {_71 = false} (! bb29) | br1 -> {_71} (! bb25) ] ]
    | bb25 = s0
      [ s0 = [ &_73 <- y'1 = (3: Int32.t) ] s1 | s1 = any [ br0 -> {_73 = false} (! bb29) | br1 -> {_73} (! bb26) ] ]
    | bb26 = s0
      [ s0 = [ &x'5 <- (1: Int32.t) ] s1
      | s1 = [ &y'2 <- (2: Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <Int32.t> {x'5}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_79 <- _ret ] [ &x'5 <- _ret.final ] s3)
      | s3 = [ &opt'4 <- C_Some _79 ] s4
      | s4 = MutBorrow.borrow_mut <Int32.t> {y'2}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_83 <- _ret ] [ &y'2 <- _ret.final ] s5)
      | s5 = MutBorrow.borrow_mut <t_Option> {opt'4}
          (fun (_ret: MutBorrow.t t_Option) -> [ &_81 <- _ret ] [ &opt'4 <- _ret.final ] s6)
      | s6 = MutBorrow.borrow_final <Int32.t> {_83.current} {MutBorrow.get_id _83}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_82 <- _ret ] [ &_83 <- { _83 with current = _ret.final } ] s7)
      | s7 = get_or_insert {_81} {_82} (fun (_ret: MutBorrow.t (MutBorrow.t Int32.t)) -> [ &bor'0 <- _ret ] s8)
      | s8 = bb30 ]
    | bb30 = s0
      [ s0 = -{resolve'0 _83}- s1
      | s1 = [ &bor'0 <- { bor'0 with current = { bor'0.current with current = (3: Int32.t) } } ] s2
      | s2 = -{resolve'6 bor'0}- s3
      | s3 = -{resolve'4 opt'4}- s4
      | s4 = [ &_85 <- x'5 = (3: Int32.t) ] s5
      | s5 = any [ br0 -> {_85 = false} (! bb35) | br1 -> {_85} (! bb31) ] ]
    | bb31 = s0
      [ s0 = [ &_87 <- y'2 = (2: Int32.t) ] s1 | s1 = any [ br0 -> {_87 = false} (! bb35) | br1 -> {_87} (! bb32) ] ]
    | bb32 = s0
      [ s0 = [ &x'6 <- (1: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x'6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_92 <- _ret ] [ &x'6 <- _ret.final ] s2)
      | s2 = [ &opt'5 <- C_Some _92 ] s3
      | s3 = [ &_95 <- C_None'0 ] s4
      | s4 = zip {opt'5} {_95} (fun (_ret: t_Option'1) -> [ &_93 <- _ret ] s5)
      | s5 = bb36 ]
    | bb36 = s0
      [ s0 = -{resolve'10 _93}- s1
      | s1 = [ &_97 <- x'6 = (1: Int32.t) ] s2
      | s2 = any [ br0 -> {_97 = false} (! bb38) | br1 -> {_97} (! bb37) ] ]
    | bb37 = s0
      [ s0 = [ &x'7 <- (1: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x'7}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_102 <- _ret ] [ &x'7 <- _ret.final ] s2)
      | s2 = [ &opt'6 <- C_Some _102 ] s3
      | s3 = copied {opt'6} (fun (_ret: t_Option'0) -> [ &_103 <- _ret ] s4)
      | s4 = bb39 ]
    | bb39 = s0
      [ s0 = [ &_106 <- x'7 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_106 = false} (! bb41) | br1 -> {_106} (! bb40) ] ]
    | bb40 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {x'7}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_110 <- _ret ] [ &x'7 <- _ret.final ] s1)
      | s1 = [ &opt'7 <- C_Some _110 ] s2
      | s2 = cloned {opt'7} (fun (_ret: t_Option'0) -> [ &_111 <- _ret ] s3)
      | s3 = bb42 ]
    | bb42 = s0
      [ s0 = [ &_114 <- x'7 = (1: Int32.t) ] s1 | s1 = any [ br0 -> {_114 = false} (! bb44) | br1 -> {_114} (! bb43) ] ]
    | bb43 = return {_0}
    | bb44 = {false} any
    | bb41 = {false} any
    | bb38 = {false} any
    | bb35 = {false} any
    | bb29 = {false} any
    | bb23 = {false} any
    | bb17 = {false} any
    | bb14 = {false} any
    | bb8 = {false} any
    | bb5 = {false} any
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & opt: t_Option = Any.any_l ()
    | & _3: MutBorrow.t Int32.t = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & x'0: Int32.t = Any.any_l ()
    | & opt'0: t_Option = Any.any_l ()
    | & _15: MutBorrow.t Int32.t = Any.any_l ()
    | & _16: t_Option'0 = Any.any_l ()
    | & _18: t_Option'0 = Any.any_l ()
    | & _20: bool = Any.any_l ()
    | & x'1: Int32.t = Any.any_l ()
    | & y: Int32.t = Any.any_l ()
    | & opt'1: t_Option = Any.any_l ()
    | & _26: MutBorrow.t Int32.t = Any.any_l ()
    | & _27: t_Option = Any.any_l ()
    | & _28: t_Option = Any.any_l ()
    | & _29: MutBorrow.t Int32.t = Any.any_l ()
    | & _32: bool = Any.any_l ()
    | & _34: bool = Any.any_l ()
    | & x'2: Int32.t = Any.any_l ()
    | & opt'2: t_Option = Any.any_l ()
    | & _39: MutBorrow.t Int32.t = Any.any_l ()
    | & _40: t_Option = Any.any_l ()
    | & _42: () = Any.any_l ()
    | & _44: bool = Any.any_l ()
    | & x'3: Int32.t = Any.any_l ()
    | & y'0: Int32.t = Any.any_l ()
    | & optx: t_Option = Any.any_l ()
    | & _50: MutBorrow.t Int32.t = Any.any_l ()
    | & opty: t_Option = Any.any_l ()
    | & _52: MutBorrow.t Int32.t = Any.any_l ()
    | & _53: t_Option = Any.any_l ()
    | & _57: bool = Any.any_l ()
    | & _59: bool = Any.any_l ()
    | & x'4: Int32.t = Any.any_l ()
    | & y'1: Int32.t = Any.any_l ()
    | & opt'3: t_Option = Any.any_l ()
    | & _65: MutBorrow.t Int32.t = Any.any_l ()
    | & bor: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l ()
    | & _67: MutBorrow.t t_Option = Any.any_l ()
    | & _68: MutBorrow.t Int32.t = Any.any_l ()
    | & _69: MutBorrow.t Int32.t = Any.any_l ()
    | & _71: bool = Any.any_l ()
    | & _73: bool = Any.any_l ()
    | & x'5: Int32.t = Any.any_l ()
    | & y'2: Int32.t = Any.any_l ()
    | & opt'4: t_Option = Any.any_l ()
    | & _79: MutBorrow.t Int32.t = Any.any_l ()
    | & bor'0: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l ()
    | & _81: MutBorrow.t t_Option = Any.any_l ()
    | & _82: MutBorrow.t Int32.t = Any.any_l ()
    | & _83: MutBorrow.t Int32.t = Any.any_l ()
    | & _85: bool = Any.any_l ()
    | & _87: bool = Any.any_l ()
    | & x'6: Int32.t = Any.any_l ()
    | & opt'5: t_Option = Any.any_l ()
    | & _92: MutBorrow.t Int32.t = Any.any_l ()
    | & _93: t_Option'1 = Any.any_l ()
    | & _95: t_Option'0 = Any.any_l ()
    | & _97: bool = Any.any_l ()
    | & x'7: Int32.t = Any.any_l ()
    | & opt'6: t_Option = Any.any_l ()
    | & _102: MutBorrow.t Int32.t = Any.any_l ()
    | & _103: t_Option'0 = Any.any_l ()
    | & _106: bool = Any.any_l ()
    | & opt'7: t_Option = Any.any_l ()
    | & _110: MutBorrow.t Int32.t = Any.any_l ()
    | & _111: t_Option'0 = Any.any_l ()
    | & _114: bool = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
