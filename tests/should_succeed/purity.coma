module M_purity__qyi14899607085053415061__f (* <i32 as Foo> *)
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_purity__calls_f
  use creusot.prelude.Any
  
  let rec f (return' (x: ())) = any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec calls_f (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = f (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_purity__result
  use creusot.prelude.Any
  
  constant g: int = 1
  
  constant calls_g: int = g
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec result (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = {[@expl:assertion] calls_g = 1} s1 | s1 = return''0 {_0} ] ] [ & _0: () = Any.any_l () ])
    [ return''0 (result'0: ()) -> (! return' {result'0}) ]
end
module M_purity__clone_id
  use creusot.prelude.Any
  
  type t_Id
  
  let rec clone' (self: t_Id) (return' (x: t_Id)) = any
    [ return''0 (result: t_Id) -> {result = self} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec clone_id (i: t_Id) (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = clone' {i'0} (fun (_ret: t_Id) -> [ &_2 <- _ret ] s1) | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & i'0: t_Id = i | & _2: t_Id = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
