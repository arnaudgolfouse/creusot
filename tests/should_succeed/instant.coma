module M_instant__test_instant
  use creusot.int.Int64
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Nanoseconds = { t_Nanoseconds__0: UInt32.t }
  
  type t_Timespec = { t_Timespec__tv_sec: Int64.t; t_Timespec__tv_nsec: t_Nanoseconds }
  
  type t_Instant = { t_Instant__t: t_Timespec }
  
  type t_Instant'0 = { t_Instant__0: t_Instant }
  
  function view (self: t_Instant'0) : int
  
  axiom view_spec: forall self: t_Instant'0. view self >= 0
  
  let rec now (return (x: t_Instant'0)) = any [ return (result: t_Instant'0) -> {view result >= 0} (! return {result}) ]
  
  type t_Duration = { t_Duration__secs: UInt64.t; t_Duration__nanos: t_Nanoseconds }
  
  function secs_to_nanos (secs: int) : int = secs * 1000000000
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view'0 (self: t_Duration) : int
  
  axiom view_spec'0: forall self: t_Duration. view'0 self >= 0
      /\ view'0 self <= secs_to_nanos (UInt64.t'int const_MAX) + 999999999
  
  let rec from_secs (secs: UInt64.t) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {view'0 result = secs_to_nanos (UInt64.t'int secs)} (! return {result}) ]
  
  let rec elapsed (self_: t_Instant'0) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {view'0 result >= 0} (! return {result}) ]
  
  function deep_model [@inline:trivial] (self: t_Duration) : int = view'0 self
  
  meta "rewrite_def" function deep_model
  
  function deep_model'0 [@inline:trivial] (self: t_Duration) : int = deep_model self
  
  meta "rewrite_def" function deep_model'0
  
  let rec ge (self_: t_Duration) (other: t_Duration) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'0 self_ >= deep_model'0 other)} (! return {result}) ]
  
  type t_Option = C_None | C_Some t_Instant'0
  
  type t_Option'0 = C_None'0 | C_Some'0 int
  
  function deep_model'1 [@inline:trivial] (self: t_Instant'0) : int = view self
  
  meta "rewrite_def" function deep_model'1
  
  function deep_model'2 [@inline:trivial] (self: t_Option) : t_Option'0 = match self with
      | C_Some t -> C_Some'0 (deep_model'1 t)
      | C_None -> C_None'0
      end
  
  meta "rewrite_def" function deep_model'2
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  type tuple = { f0: t_Option'0; f1: t_Option'0 }
  
  function cmp_log (self: int) (o: int) : t_Ordering = if self < o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: int) (y: int) : ()
  
  axiom eq_cmp_spec: forall x: int, y: int. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: int) (y: int) : ()
  
  axiom antisym2_spec: forall x: int, y: int. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: int) (y: int) : ()
  
  axiom antisym1_spec: forall x: int, y: int. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: int) (y: int) (z: int) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: int, y: int, z: int, o: t_Ordering. cmp_log x y = o -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: int) : ()
  
  axiom refl_spec: forall x: int. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: int) (y: int) : ()
  
  axiom cmp_gt_log_spec: forall x: int, y: int. (x > y) = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: int) (y: int) : ()
  
  axiom cmp_ge_log_spec: forall x: int, y: int. (x >= y) = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: int) (y: int) : ()
  
  axiom cmp_lt_log_spec: forall x: int, y: int. (x < y) = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: int) (y: int) : ()
  
  axiom cmp_le_log_spec: forall x: int, y: int. (x <= y) = (cmp_log x y <> C_Greater)
  
  function cmp_log'0 (self: t_Option'0) (o: t_Option'0) : t_Ordering = match { f0 = self; f1 = o } with
      | {f0 = C_None'0; f1 = C_None'0} -> C_Equal
      | {f0 = C_None'0; f1 = C_Some'0 _} -> C_Less
      | {f0 = C_Some'0 _; f1 = C_None'0} -> C_Greater
      | {f0 = C_Some'0 x; f1 = C_Some'0 y} -> cmp_log x y
      end
  
  function eq_cmp'0 (x: t_Option'0) (y: t_Option'0) : ()
  
  axiom eq_cmp_spec'0: forall x: t_Option'0, y: t_Option'0. (x = y) = (cmp_log'0 x y = C_Equal)
  
  function antisym2'0 (x: t_Option'0) (y: t_Option'0) : ()
  
  axiom antisym2_spec'0: forall x: t_Option'0, y: t_Option'0. cmp_log'0 x y = C_Greater -> cmp_log'0 y x = C_Less
  
  function antisym1'0 (x: t_Option'0) (y: t_Option'0) : ()
  
  axiom antisym1_spec'0: forall x: t_Option'0, y: t_Option'0. cmp_log'0 x y = C_Less -> cmp_log'0 y x = C_Greater
  
  function trans'0 (x: t_Option'0) (y: t_Option'0) (z: t_Option'0) (o: t_Ordering) : ()
  
  axiom trans_spec'0: forall x: t_Option'0, y: t_Option'0, z: t_Option'0, o: t_Ordering. cmp_log'0 x y = o
      -> cmp_log'0 y z = o -> cmp_log'0 x z = o
  
  function refl'0 (x: t_Option'0) : ()
  
  axiom refl_spec'0: forall x: t_Option'0. cmp_log'0 x x = C_Equal
  
  predicate gt_log (self: t_Option'0) (o: t_Option'0) = cmp_log'0 self o = C_Greater
  
  function cmp_gt_log'0 (x: t_Option'0) (y: t_Option'0) : ()
  
  axiom cmp_gt_log_spec'0: forall x: t_Option'0, y: t_Option'0. gt_log x y = (cmp_log'0 x y = C_Greater)
  
  predicate ge_log (self: t_Option'0) (o: t_Option'0) = cmp_log'0 self o <> C_Less
  
  function cmp_ge_log'0 (x: t_Option'0) (y: t_Option'0) : ()
  
  axiom cmp_ge_log_spec'0: forall x: t_Option'0, y: t_Option'0. ge_log x y = (cmp_log'0 x y <> C_Less)
  
  predicate lt_log (self: t_Option'0) (o: t_Option'0) = cmp_log'0 self o = C_Less
  
  function cmp_lt_log'0 (x: t_Option'0) (y: t_Option'0) : ()
  
  axiom cmp_lt_log_spec'0: forall x: t_Option'0, y: t_Option'0. lt_log x y = (cmp_log'0 x y = C_Less)
  
  predicate le_log (self: t_Option'0) (o: t_Option'0) = cmp_log'0 self o <> C_Greater
  
  function cmp_le_log'0 (x: t_Option'0) (y: t_Option'0) : ()
  
  axiom cmp_le_log_spec'0: forall x: t_Option'0, y: t_Option'0. le_log x y = (cmp_log'0 x y <> C_Greater)
  
  let rec checked_add (self_: t_Instant'0) (duration: t_Duration) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {view'0 duration = 0 -> deep_model'2 result = C_Some'0 (view self_)}
      {view'0 duration > 0 /\ result <> C_None -> lt_log (C_Some'0 (view self_)) (deep_model'2 result)}
      (! return {result}) ]
  
  let rec unwrap (self_: t_Option) (return (x: t_Instant'0)) = {[@expl:unwrap requires] self_ <> C_None}
    any [ return (result: t_Instant'0) -> {C_Some result = self_} (! return {result}) ]
  
  function deep_model'3 [@inline:trivial] (self: t_Instant'0) : int = deep_model'1 self
  
  meta "rewrite_def" function deep_model'3
  
  let rec eq (self_: t_Instant'0) (rhs: t_Instant'0) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'3 self_ = deep_model'3 rhs)} (! return {result}) ]
  
  let rec add (self_: t_Instant'0) (rhs: t_Duration) (return (x: t_Instant'0)) = any
    [ return (result: t_Instant'0) -> {view'0 rhs = 0 -> view self_ = view result}
      {view'0 rhs > 0 -> view self_ < view result}
      (! return {result}) ]
  
  let rec checked_sub (self_: t_Instant'0) (duration: t_Duration) (return (x: t_Option)) = any
    [ return (result: t_Option) -> {view'0 duration = 0 -> deep_model'2 result = C_Some'0 (view self_)}
      {view'0 duration > 0 /\ result <> C_None -> gt_log (C_Some'0 (view self_)) (deep_model'2 result)}
      (! return {result}) ]
  
  let rec sub (self_: t_Instant'0) (rhs: t_Duration) (return (x: t_Instant'0)) = any
    [ return (result: t_Instant'0) -> {view'0 rhs = 0 -> view self_ = view result}
      {view'0 rhs > 0 -> view self_ > view result}
      (! return {result}) ]
  
  let rec sub'0 (self_: t_Instant'0) (other: t_Instant'0) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {view self_ > view other -> view'0 result > 0}
      {view self_ <= view other -> view'0 result = 0}
      (! return {result}) ]
  
  let rec eq'0 (self_: t_Duration) (rhs: t_Duration) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'0 self_ = deep_model'0 rhs)} (! return {result}) ]
  
  let rec gt (self_: t_Duration) (other: t_Duration) (return (x: bool)) = any
    [ return (result: bool) -> {result = (deep_model'0 self_ > deep_model'0 other)} (! return {result}) ]
  
  let rec duration_since (self_: t_Instant'0) (earlier: t_Instant'0) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {view self_ > view earlier -> view'0 result > 0}
      {view self_ <= view earlier -> view'0 result = 0}
      (! return {result}) ]
  
  type t_Option'1 = C_None'1 | C_Some'1 t_Duration
  
  let rec checked_duration_since (self_: t_Instant'0) (earlier: t_Instant'0) (return (x: t_Option'1)) = any
    [ return (result: t_Option'1) -> {view self_ >= view earlier -> result <> C_None'1}
      {view self_ < view earlier -> result = C_None'1}
      (! return {result}) ]
  
  let rec is_some (self_: t_Option'1) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ <> C_None'1)} (! return {result}) ]
  
  let rec is_none (self_: t_Option'1) (return (x: bool)) = any
    [ return (result: bool) -> {result = (self_ = C_None'1)} (! return {result}) ]
  
  let rec saturating_duration_since (self_: t_Instant'0) (earlier: t_Instant'0) (return (x: t_Duration)) = any
    [ return (result: t_Duration) -> {view self_ > view earlier -> view'0 result > 0}
      {view self_ <= view earlier -> view'0 result = 0}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_instant (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = now (fun (_ret: t_Instant'0) -> [ &instant <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = from_secs {(0: UInt64.t)} (fun (_ret: t_Duration) -> [ &zero_dur <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = elapsed {instant} (fun (_ret: t_Duration) -> [ &_6 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = ge {_6} {zero_dur} (fun (_ret: bool) -> [ &_4 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb5) ]
    | bb5 = s0 [ s0 = checked_add {instant} {zero_dur} (fun (_ret: t_Option) -> [ &_14 <- _ret ] s1) | s1 = bb7 ]
    | bb7 = s0 [ s0 = unwrap {_14} (fun (_ret: t_Instant'0) -> [ &_13 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0 [ s0 = eq {_13} {instant} (fun (_ret: bool) -> [ &_11 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = any [ br0 -> {_11 = false} (! bb11) | br1 -> {_11} (! bb10) ]
    | bb10 = s0 [ s0 = add {instant} {zero_dur} (fun (_ret: t_Instant'0) -> [ &_22 <- _ret ] s1) | s1 = bb12 ]
    | bb12 = s0 [ s0 = eq {_22} {instant} (fun (_ret: bool) -> [ &_20 <- _ret ] s1) | s1 = bb13 ]
    | bb13 = any [ br0 -> {_20 = false} (! bb15) | br1 -> {_20} (! bb14) ]
    | bb14 = s0 [ s0 = from_secs {(3: UInt64.t)} (fun (_ret: t_Duration) -> [ &three_seconds <- _ret ] s1) | s1 = bb16 ]
    | bb16 = s0
      [ s0 = add {instant} {three_seconds} (fun (_ret: t_Instant'0) -> [ &greater_instant <- _ret ] s1) | s1 = bb17 ]
    | bb17 = s0
      [ s0 = {[@expl:assertion] view instant < view greater_instant} s1
      | s1 = add {greater_instant} {three_seconds} (fun (_ret: t_Instant'0) -> [ &even_greater_instant <- _ret ] s2)
      | s2 = bb18 ]
    | bb18 = s0
      [ s0 = {[@expl:assertion] view instant < view even_greater_instant} s1
      | s1 = checked_sub {instant} {zero_dur} (fun (_ret: t_Option) -> [ &_42 <- _ret ] s2)
      | s2 = bb19 ]
    | bb19 = s0 [ s0 = unwrap {_42} (fun (_ret: t_Instant'0) -> [ &_41 <- _ret ] s1) | s1 = bb20 ]
    | bb20 = s0 [ s0 = eq {_41} {instant} (fun (_ret: bool) -> [ &_39 <- _ret ] s1) | s1 = bb21 ]
    | bb21 = any [ br0 -> {_39 = false} (! bb23) | br1 -> {_39} (! bb22) ]
    | bb22 = s0 [ s0 = sub {instant} {zero_dur} (fun (_ret: t_Instant'0) -> [ &_50 <- _ret ] s1) | s1 = bb24 ]
    | bb24 = s0 [ s0 = eq {_50} {instant} (fun (_ret: bool) -> [ &_48 <- _ret ] s1) | s1 = bb25 ]
    | bb25 = any [ br0 -> {_48 = false} (! bb27) | br1 -> {_48} (! bb26) ]
    | bb26 = s0
      [ s0 = sub {instant} {three_seconds} (fun (_ret: t_Instant'0) -> [ &lesser_instant <- _ret ] s1) | s1 = bb28 ]
    | bb28 = s0
      [ s0 = {[@expl:assertion] view instant > view lesser_instant} s1
      | s1 = sub'0 {instant} {instant} (fun (_ret: t_Duration) -> [ &_63 <- _ret ] s2)
      | s2 = bb29 ]
    | bb29 = s0 [ s0 = eq'0 {_63} {zero_dur} (fun (_ret: bool) -> [ &_61 <- _ret ] s1) | s1 = bb30 ]
    | bb30 = any [ br0 -> {_61 = false} (! bb32) | br1 -> {_61} (! bb31) ]
    | bb31 = s0 [ s0 = sub'0 {instant} {greater_instant} (fun (_ret: t_Duration) -> [ &_71 <- _ret ] s1) | s1 = bb33 ]
    | bb33 = s0 [ s0 = eq'0 {_71} {zero_dur} (fun (_ret: bool) -> [ &_69 <- _ret ] s1) | s1 = bb34 ]
    | bb34 = any [ br0 -> {_69 = false} (! bb36) | br1 -> {_69} (! bb35) ]
    | bb35 = s0 [ s0 = sub'0 {greater_instant} {instant} (fun (_ret: t_Duration) -> [ &_79 <- _ret ] s1) | s1 = bb37 ]
    | bb37 = s0 [ s0 = gt {_79} {zero_dur} (fun (_ret: bool) -> [ &_77 <- _ret ] s1) | s1 = bb38 ]
    | bb38 = any [ br0 -> {_77 = false} (! bb40) | br1 -> {_77} (! bb39) ]
    | bb39 = s0
      [ s0 = duration_since {greater_instant} {instant} (fun (_ret: t_Duration) -> [ &_87 <- _ret ] s1) | s1 = bb41 ]
    | bb41 = s0 [ s0 = gt {_87} {zero_dur} (fun (_ret: bool) -> [ &_85 <- _ret ] s1) | s1 = bb42 ]
    | bb42 = any [ br0 -> {_85 = false} (! bb44) | br1 -> {_85} (! bb43) ]
    | bb43 = s0
      [ s0 = duration_since {instant} {greater_instant} (fun (_ret: t_Duration) -> [ &_95 <- _ret ] s1) | s1 = bb45 ]
    | bb45 = s0 [ s0 = eq'0 {_95} {zero_dur} (fun (_ret: bool) -> [ &_93 <- _ret ] s1) | s1 = bb46 ]
    | bb46 = any [ br0 -> {_93 = false} (! bb48) | br1 -> {_93} (! bb47) ]
    | bb47 = s0
      [ s0 = checked_duration_since {greater_instant} {instant} (fun (_ret: t_Option'1) -> [ &_103 <- _ret ] s1)
      | s1 = bb49 ]
    | bb49 = s0 [ s0 = is_some {_103} (fun (_ret: bool) -> [ &_101 <- _ret ] s1) | s1 = bb50 ]
    | bb50 = any [ br0 -> {_101 = false} (! bb52) | br1 -> {_101} (! bb51) ]
    | bb51 = s0
      [ s0 = checked_duration_since {instant} {greater_instant} (fun (_ret: t_Option'1) -> [ &_110 <- _ret ] s1)
      | s1 = bb53 ]
    | bb53 = s0 [ s0 = is_none {_110} (fun (_ret: bool) -> [ &_108 <- _ret ] s1) | s1 = bb54 ]
    | bb54 = any [ br0 -> {_108 = false} (! bb56) | br1 -> {_108} (! bb55) ]
    | bb55 = s0
      [ s0 = saturating_duration_since {greater_instant} {instant} (fun (_ret: t_Duration) -> [ &_117 <- _ret ] s1)
      | s1 = bb57 ]
    | bb57 = s0 [ s0 = gt {_117} {zero_dur} (fun (_ret: bool) -> [ &_115 <- _ret ] s1) | s1 = bb58 ]
    | bb58 = any [ br0 -> {_115 = false} (! bb60) | br1 -> {_115} (! bb59) ]
    | bb59 = s0
      [ s0 = saturating_duration_since {instant} {greater_instant} (fun (_ret: t_Duration) -> [ &_125 <- _ret ] s1)
      | s1 = bb61 ]
    | bb61 = s0 [ s0 = eq'0 {_125} {zero_dur} (fun (_ret: bool) -> [ &_123 <- _ret ] s1) | s1 = bb62 ]
    | bb62 = any [ br0 -> {_123 = false} (! bb64) | br1 -> {_123} (! bb63) ]
    | bb63 = return {_0}
    | bb64 = {false} any
    | bb60 = {false} any
    | bb56 = {false} any
    | bb52 = {false} any
    | bb48 = {false} any
    | bb44 = {false} any
    | bb40 = {false} any
    | bb36 = {false} any
    | bb32 = {false} any
    | bb27 = {false} any
    | bb23 = {false} any
    | bb15 = {false} any
    | bb11 = {false} any
    | bb6 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & instant: t_Instant'0 = Any.any_l ()
    | & zero_dur: t_Duration = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: t_Duration = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: t_Instant'0 = Any.any_l ()
    | & _14: t_Option = Any.any_l ()
    | & _20: bool = Any.any_l ()
    | & _22: t_Instant'0 = Any.any_l ()
    | & three_seconds: t_Duration = Any.any_l ()
    | & greater_instant: t_Instant'0 = Any.any_l ()
    | & even_greater_instant: t_Instant'0 = Any.any_l ()
    | & _39: bool = Any.any_l ()
    | & _41: t_Instant'0 = Any.any_l ()
    | & _42: t_Option = Any.any_l ()
    | & _48: bool = Any.any_l ()
    | & _50: t_Instant'0 = Any.any_l ()
    | & lesser_instant: t_Instant'0 = Any.any_l ()
    | & _61: bool = Any.any_l ()
    | & _63: t_Duration = Any.any_l ()
    | & _69: bool = Any.any_l ()
    | & _71: t_Duration = Any.any_l ()
    | & _77: bool = Any.any_l ()
    | & _79: t_Duration = Any.any_l ()
    | & _85: bool = Any.any_l ()
    | & _87: t_Duration = Any.any_l ()
    | & _93: bool = Any.any_l ()
    | & _95: t_Duration = Any.any_l ()
    | & _101: bool = Any.any_l ()
    | & _103: t_Option'1 = Any.any_l ()
    | & _108: bool = Any.any_l ()
    | & _110: t_Option'1 = Any.any_l ()
    | & _115: bool = Any.any_l ()
    | & _117: t_Duration = Any.any_l ()
    | & _123: bool = Any.any_l ()
    | & _125: t_Duration = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
