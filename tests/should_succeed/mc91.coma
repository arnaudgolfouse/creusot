module M_mc91__mc91
  use creusot.int.UInt32
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec mc91 (x: UInt32.t) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_3 <- UInt32.gt x'0 (100: UInt32.t) ] s1
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb1) ] ]
    | bb1 = s0 [ s0 = UInt32.sub {x'0} {(10: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb5 ]
    | bb2 = s0
      [ s0 = UInt32.add {x'0} {(11: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_7 <- _ret ] s1)
      | s1 = mc91 {_7} (fun (_ret: UInt32.t) -> [ &_6 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = mc91 {_6} (fun (_ret: UInt32.t) -> [ &_0 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = return''0 {_0} ]
    [ & _0: UInt32.t = Any.any_l ()
    | & x'0: UInt32.t = x
    | & _3: bool = Any.any_l ()
    | & _6: UInt32.t = Any.any_l ()
    | & _7: UInt32.t = Any.any_l () ])
    [ return''0 (result: UInt32.t) -> {[@expl:mc91 ensures] UInt32.le x (100: UInt32.t)
      -> UInt32.t'int result = 91 /\ UInt32.gt x (100: UInt32.t) -> UInt32.t'int result = UInt32.t'int x - 10}
      (! return' {result}) ]
end
