module M_prophecy__f [#"prophecy.rs" 3 0 3 10]
  let%span sprophecy = "prophecy.rs" 4 16 4 17
  let%span sprophecy'0 = "prophecy.rs" 9 9 9 10
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f[#"prophecy.rs" 3 0 3 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sprophecy] (0: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &y <- _ret ]  [ &x <- _ret.final ] s2)
      | s2 =  [ &y <- { y with current = ([%#sprophecy'0] (5: Int32.t)) } ] s3
      | s3 = -{resolve'0 y}- s4
      | s4 = return''0 {_0} ]
     ]
    ) [ & _0: () = Any.any_l () | & x: Int32.t = Any.any_l () | & y: MutBorrow.t Int32.t = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
