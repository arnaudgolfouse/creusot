module M_sum_first_n
  use creusot.int.UInt32
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_RangeInclusive_u32
  
  predicate inv_RangeInclusive_u32 (_1: t_RangeInclusive_u32)
  
  function start_log_RangeInclusive_u32 (self: t_RangeInclusive_u32) : UInt32.t
  
  function end_log_RangeInclusive_u32 (self: t_RangeInclusive_u32) : UInt32.t
  
  function deep_model_u32 [@inline:trivial] (self: UInt32.t) : int = UInt32.t'int self
  
  meta "rewrite_def" function deep_model_u32
  
  predicate is_empty_log_RangeInclusive_u32 (self: t_RangeInclusive_u32)
  
  axiom is_empty_log_RangeInclusive_u32_spec:
    forall self: t_RangeInclusive_u32. not is_empty_log_RangeInclusive_u32 self
      -> deep_model_u32 (start_log_RangeInclusive_u32 self) <= deep_model_u32 (end_log_RangeInclusive_u32 self)
  
  let rec new_u32 (start: UInt32.t) (end': UInt32.t) (return (x: t_RangeInclusive_u32)) = any
    [ return (result: t_RangeInclusive_u32) -> {inv_RangeInclusive_u32 result}
      {start_log_RangeInclusive_u32 result = start}
      {end_log_RangeInclusive_u32 result = end'}
      {deep_model_u32 start <= deep_model_u32 end' -> not is_empty_log_RangeInclusive_u32 result}
      (! return {result}) ]
  
  let rec into_iter_RangeInclusive_u32 (self_: t_RangeInclusive_u32) (return (x: t_RangeInclusive_u32)) =
    {[@expl:into_iter 'self_' type invariant] inv_RangeInclusive_u32 self_}
    any
    [ return (result: t_RangeInclusive_u32) -> {inv_RangeInclusive_u32 result} {result = self_} (! return {result}) ]
  
  function range_inclusive_len_u32 (r: t_RangeInclusive_u32) : int = if is_empty_log_RangeInclusive_u32 r then
      0
    else
      deep_model_u32 (end_log_RangeInclusive_u32 r) - deep_model_u32 (start_log_RangeInclusive_u32 r) + 1
  
  
  axiom range_inclusive_len_u32_spec: forall r: t_RangeInclusive_u32. is_empty_log_RangeInclusive_u32 r
      = (range_inclusive_len_u32 r = 0)
  
  predicate produces_RangeInclusive_u32 (self: t_RangeInclusive_u32) (visited: Seq.seq UInt32.t) (o: t_RangeInclusive_u32) =
    Seq.length visited = range_inclusive_len_u32 self - range_inclusive_len_u32 o
    /\ (is_empty_log_RangeInclusive_u32 self -> is_empty_log_RangeInclusive_u32 o)
    /\ (is_empty_log_RangeInclusive_u32 o \/ end_log_RangeInclusive_u32 self = end_log_RangeInclusive_u32 o)
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model_u32 (Seq.get visited i) = deep_model_u32 (start_log_RangeInclusive_u32 self) + i)
  
  function produces_trans_RangeInclusive_u32 (a: t_RangeInclusive_u32) (ab: Seq.seq UInt32.t) (b: t_RangeInclusive_u32) (bc: Seq.seq UInt32.t) (c: t_RangeInclusive_u32) : ()
   = ()
  
  axiom produces_trans_RangeInclusive_u32_spec:
    forall a: t_RangeInclusive_u32, ab: Seq.seq UInt32.t, b: t_RangeInclusive_u32, bc: Seq.seq UInt32.t, c: t_RangeInclusive_u32. produces_RangeInclusive_u32 a ab b
      -> produces_RangeInclusive_u32 b bc c -> produces_RangeInclusive_u32 a (Seq.(++) ab bc) c
  
  function produces_refl_RangeInclusive_u32 (self: t_RangeInclusive_u32) : () = ()
  
  axiom produces_refl_RangeInclusive_u32_spec:
    forall self: t_RangeInclusive_u32. produces_RangeInclusive_u32 self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate inv_Seq_u32 [@inline:trivial] (_1: Seq.seq UInt32.t) = true
  
  meta "rewrite_def" predicate inv_Seq_u32
  
  type t_Option_u32 = None | Some UInt32.t
  
  predicate invariant_ref_RangeInclusive_u32 [@inline:trivial] (self: MutBorrow.t t_RangeInclusive_u32) =
    inv_RangeInclusive_u32 self.current /\ inv_RangeInclusive_u32 self.final
  
  meta "rewrite_def" predicate invariant_ref_RangeInclusive_u32
  
  predicate inv_ref_RangeInclusive_u32 [@inline:trivial] (_1: MutBorrow.t t_RangeInclusive_u32) =
    invariant_ref_RangeInclusive_u32 _1
  
  meta "rewrite_def" predicate inv_ref_RangeInclusive_u32
  
  predicate completed_RangeInclusive_u32 (self: MutBorrow.t t_RangeInclusive_u32) =
    is_empty_log_RangeInclusive_u32 self.current /\ is_empty_log_RangeInclusive_u32 self.final
  
  let rec next_RangeInclusive_u32 (self_: MutBorrow.t t_RangeInclusive_u32) (return (x: t_Option_u32)) =
    {[@expl:next 'self_' type invariant] inv_ref_RangeInclusive_u32 self_}
    any
    [ return (result: t_Option_u32) -> {match result with
        | None -> completed_RangeInclusive_u32 self_
        | Some v -> produces_RangeInclusive_u32 self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  predicate resolve_ref_RangeInclusive_u32 [@inline:trivial] (_1: MutBorrow.t t_RangeInclusive_u32) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_RangeInclusive_u32
  
  let rec elim_Some (input: t_Option_u32) (ret (f0: UInt32.t)) = any
    [ good (f0: UInt32.t) -> {Some f0 = input} (! ret {f0})
    | bad -> {forall f0: UInt32.t [Some f0: t_Option_u32]. Some f0 <> input} (! {false} any) ]
  
  predicate resolve_RangeInclusive_u32 (_1: t_RangeInclusive_u32)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_first_n (n: UInt32.t) (return (x: UInt32.t)) = {[@expl:sum_first_n requires] UInt32.t'int n < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &sum <- (0: UInt32.t) ] s1
      | s1 = new_u32 {(1: UInt32.t)} {n} (fun (_ret: t_RangeInclusive_u32) -> [ &_7 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = into_iter_RangeInclusive_u32 {_7} (fun (_ret: t_RangeInclusive_u32) -> [ &iter <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt32.t ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] inv_Seq_u32 produced}
        {[@expl:for invariant] inv_RangeInclusive_u32 iter}
        {[@expl:for invariant] produces_RangeInclusive_u32 iter_old produced iter}
        {[@expl:loop invariant] UInt32.t'int sum * 2 = Seq.length produced * (Seq.length produced + 1)}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = {inv_RangeInclusive_u32 iter}
            MutBorrow.borrow_mut <t_RangeInclusive_u32> {iter}
              (fun (_ret: MutBorrow.t t_RangeInclusive_u32) ->
                [ &_21 <- _ret ] -{inv_RangeInclusive_u32 _ret.final}-
                [ &iter <- _ret.final ] s1)
          | s1 = {inv_RangeInclusive_u32 _21.current}
            MutBorrow.borrow_final <t_RangeInclusive_u32> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret: MutBorrow.t t_RangeInclusive_u32) ->
                [ &_20 <- _ret ] -{inv_RangeInclusive_u32 _ret.final}-
                [ &_21 <- { _21 with current = _ret.final } ] s2)
          | s2 = next_RangeInclusive_u32 {_20} (fun (_ret: t_Option_u32) -> [ &_19 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = {[@expl:type invariant] inv_ref_RangeInclusive_u32 _21} s1
          | s1 = -{resolve_ref_RangeInclusive_u32 _21}- s2
          | s2 = any [ br0 -> {_19 = None} (! bb10) | br1 (x0: UInt32.t) -> {_19 = Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = elim_Some {_19} (fun (r0: UInt32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_24 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _24 ] s1
          | s1 = [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {sum} {i} (fun (_ret: UInt32.t) -> [ &sum <- _ret ] s3)
          | s3 = bb5 ] ] ]
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv_RangeInclusive_u32 iter} s1
      | s1 = -{resolve_RangeInclusive_u32 iter}- s2
      | s2 = [ &_0 <- sum ] s3
      | s3 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & n: UInt32.t = n
    | & sum: UInt32.t = Any.any_l ()
    | & iter: t_RangeInclusive_u32 = Any.any_l ()
    | & _7: t_RangeInclusive_u32 = Any.any_l ()
    | & iter_old: t_RangeInclusive_u32 = Any.any_l ()
    | & produced: Seq.seq UInt32.t = Any.any_l ()
    | & _19: t_Option_u32 = Any.any_l ()
    | & _20: MutBorrow.t t_RangeInclusive_u32 = Any.any_l ()
    | & _21: MutBorrow.t t_RangeInclusive_u32 = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt32.t = Any.any_l ()
    | & _24: Seq.seq UInt32.t = Any.any_l ()
    | & i: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> {[@expl:sum_first_n ensures] UInt32.t'int result
      = Int.div (UInt32.t'int n * (UInt32.t'int n + 1)) 2}
      (! return {result}) ]
end
