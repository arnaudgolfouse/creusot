module M_sum__sum_first_n
  use creusot.int.UInt32
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_RangeInclusive = {
    t_RangeInclusive__start: UInt32.t;
    t_RangeInclusive__end: UInt32.t;
    t_RangeInclusive__exhausted: bool }
  
  function start_log (self: t_RangeInclusive) : UInt32.t
  
  function end_log (self: t_RangeInclusive) : UInt32.t
  
  function deep_model [@inline:trivial] (self: UInt32.t) : int = UInt32.t'int self
  
  meta "rewrite_def" function deep_model
  
  predicate is_empty_log (self: t_RangeInclusive)
  
  axiom is_empty_log_spec: forall self: t_RangeInclusive. not is_empty_log self
      -> deep_model (start_log self) <= deep_model (end_log self)
  
  let rec new (start: UInt32.t) (end': UInt32.t) (return (x: t_RangeInclusive)) = any
    [ return' (result: t_RangeInclusive) -> {start_log result = start}
      {end_log result = end'}
      {deep_model start <= deep_model end' -> not is_empty_log result}
      (! return {result}) ]
  
  let rec into_iter (self_: t_RangeInclusive) (return (x: t_RangeInclusive)) = any
    [ return' (result: t_RangeInclusive) -> {result = self_} (! return {result}) ]
  
  function range_inclusive_len (r: t_RangeInclusive) : int = if is_empty_log r then
      0
    else
      deep_model (end_log r) - deep_model (start_log r) + 1
  
  
  axiom range_inclusive_len_spec: forall r: t_RangeInclusive. is_empty_log r = (range_inclusive_len r = 0)
  
  predicate produces (self: t_RangeInclusive) (visited: Seq.seq UInt32.t) (o: t_RangeInclusive) =
    Seq.length visited = range_inclusive_len self - range_inclusive_len o
    /\ (is_empty_log self -> is_empty_log o)
    /\ (is_empty_log o \/ end_log self = end_log o)
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model (Seq.get visited i) = deep_model (start_log self) + i)
  
  function produces_trans (a: t_RangeInclusive) (ab: Seq.seq UInt32.t) (b: t_RangeInclusive) (bc: Seq.seq UInt32.t) (c: t_RangeInclusive) : ()
   = ()
  
  axiom produces_trans_spec:
    forall a: t_RangeInclusive, ab: Seq.seq UInt32.t, b: t_RangeInclusive, bc: Seq.seq UInt32.t, c: t_RangeInclusive. produces a ab b
      -> produces b bc c -> produces a (Seq.(++) ab bc) c
  
  function produces_refl (self: t_RangeInclusive) : () = ()
  
  axiom produces_refl_spec: forall self: t_RangeInclusive. produces self (Seq.empty: Seq.seq UInt32.t) self
  
  predicate inv (_0: t_RangeInclusive)
  
  axiom inv_axiom [@rewrite]: forall x: t_RangeInclusive [inv x]. inv x = true
  
  predicate inv'0 (_0: Seq.seq UInt32.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq UInt32.t [inv'0 x]. inv'0 x = true
  
  type t_Option = C_None | C_Some UInt32.t
  
  predicate completed (self: MutBorrow.t t_RangeInclusive) = is_empty_log self.current /\ is_empty_log self.final
  
  let rec next (self_: MutBorrow.t t_RangeInclusive) (return (x: t_Option)) = any
    [ return' (result: t_Option) -> {match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_RangeInclusive) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_RangeInclusive) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Some (input: t_Option) (ret (field_0: UInt32.t)) = any
    [ good (field_0: UInt32.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt32.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sum_first_n (n: UInt32.t) (return (x: UInt32.t)) = {[@expl:sum_first_n requires] UInt32.t'int n < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &sum <- (0: UInt32.t) ] s1
      | s1 = new {(1: UInt32.t)} {n} (fun (_ret: t_RangeInclusive) -> [ &_7 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = into_iter {_7} (fun (_ret: t_RangeInclusive) -> [ &iter <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &iter_old <- iter ] s1 | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &produced <- Seq.empty: Seq.seq UInt32.t ] s1 | s1 = bb5 ]
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] inv'0 produced}
        {[@expl:for invariant] inv iter}
        {[@expl:for invariant] produces iter_old produced iter}
        {[@expl:loop invariant] UInt32.t'int sum * 2 = Seq.length produced * (Seq.length produced + 1)}
        (! s0)
        [ s0 = bb6 ]
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_RangeInclusive> {iter}
              (fun (_ret: MutBorrow.t t_RangeInclusive) -> [ &_21 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_RangeInclusive> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret: MutBorrow.t t_RangeInclusive) ->
                [ &_20 <- _ret ] [ &_21 <- { _21 with current = _ret.final } ] s2)
          | s2 = next {_20} (fun (_ret: t_Option) -> [ &_19 <- _ret ] s3)
          | s3 = bb7 ]
        | bb7 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any [ br0 -> {_19 = C_None} (! bb10) | br1 (x0: UInt32.t) -> {_19 = C_Some x0} (! bb11) ] ]
        | bb11 = s0
          [ s0 = v_Some {_19} (fun (r0: UInt32.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_24 <- Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        | bb12 = s0
          [ s0 = [ &produced <- _24 ] s1
          | s1 = [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {sum} {i} (fun (_ret: UInt32.t) -> [ &sum <- _ret ] s3)
          | s3 = bb5 ] ] ]
    | bb10 = s0 [ s0 = [ &_0 <- sum ] s1 | s1 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & n: UInt32.t = n
    | & sum: UInt32.t = Any.any_l ()
    | & iter: t_RangeInclusive = Any.any_l ()
    | & _7: t_RangeInclusive = Any.any_l ()
    | & iter_old: t_RangeInclusive = Any.any_l ()
    | & produced: Seq.seq UInt32.t = Any.any_l ()
    | & _19: t_Option = Any.any_l ()
    | & _20: MutBorrow.t t_RangeInclusive = Any.any_l ()
    | & _21: MutBorrow.t t_RangeInclusive = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt32.t = Any.any_l ()
    | & _24: Seq.seq UInt32.t = Any.any_l ()
    | & i: UInt32.t = Any.any_l () ])
    [ return (result: UInt32.t) -> {[@expl:sum_first_n ensures] UInt32.t'int result
      = Int.div (UInt32.t'int n * (UInt32.t'int n + 1)) 2}
      (! return {result}) ]
end
