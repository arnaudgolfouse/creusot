module M_ord_trait__x [#"ord_trait.rs" 5 0 7 29]
  let%span sord_trait = "ord_trait.rs" 5 29 5 30
  let%span sord_trait'0 = "ord_trait.rs" 4 10 4 24
  let%span scmp = "../../creusot-contracts/src/std/cmp.rs" 43 16 43 17
  let%span scmp'0 = "../../creusot-contracts/src/std/cmp.rs" 44 29 44 34
  let%span scmp'1 = "../../creusot-contracts/src/std/cmp.rs" 43 26 43 77
  let%span smodel = "../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0 : t_T)
  
  predicate invariant' (self : t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0 : t_T)
  
  axiom inv_axiom [@rewrite] : forall x : t_T [inv'0 x] . inv'0 x = invariant' x
  
  predicate invariant''0 (self : t_T) =
    [%#sinvariant] inv'0 self
  
  predicate inv'1 (_0 : t_T)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_T [inv'1 x] . inv'1 x = invariant''0 x
  
  type t_DeepModelTy
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self : t_DeepModelTy) (other : t_DeepModelTy) : t_Ordering
  
  function eq_cmp (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom eq_cmp_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom antisym2_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom antisym1_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x : t_DeepModelTy) (y : t_DeepModelTy) (z : t_DeepModelTy) (o : t_Ordering) : ()
  
  axiom trans_spec : forall x : t_DeepModelTy, y : t_DeepModelTy, z : t_DeepModelTy, o : t_Ordering . ([%#sord'4] cmp_log x y
  = o)  -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x : t_DeepModelTy) : ()
  
  axiom refl_spec : forall x : t_DeepModelTy . [%#sord'3] cmp_log x x = C_Equal
  
  predicate gt_log (self : t_DeepModelTy) (o : t_DeepModelTy)
  
  function cmp_gt_log (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom cmp_gt_log_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord'2] gt_log x y
  = (cmp_log x y = C_Greater)
  
  predicate ge_log (self : t_DeepModelTy) (o : t_DeepModelTy)
  
  function cmp_ge_log (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom cmp_ge_log_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord'1] ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self : t_DeepModelTy) (o : t_DeepModelTy)
  
  function cmp_lt_log (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom cmp_lt_log_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord'0] lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self : t_DeepModelTy) (o : t_DeepModelTy)
  
  function cmp_le_log (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom cmp_le_log_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord] le_log x y = (cmp_log x y <> C_Greater)
  
  function deep_model (self : t_T) : t_DeepModelTy
  
  function deep_model'0 (self : t_T) : t_DeepModelTy =
    [%#smodel] deep_model self
  
  function deep_model'1 (self : t_T) : t_DeepModelTy =
    [%#smodel] deep_model'0 self
  
  let rec le (self_:t_T) (other:t_T) (return'  (x:bool))= {[@expl:le 'self_' type invariant] [%#scmp] inv'1 self_}
    {[@expl:le 'other' type invariant] [%#scmp'0] inv'1 other}
    any
    [ return''0 (result:bool)-> {[%#scmp'1] result = le_log (deep_model'1 self_) (deep_model'1 other)}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec x[#"ord_trait.rs" 5 0 7 29] (x'0:t_T) (return'  (x'1:bool))= {[@expl:x 'x' type invariant] [%#sord_trait] inv'0 x'0}
    (! bb0
    [ bb0 = s0 [ s0 = le {x'1} {x'1} (fun (_ret:bool) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ]  | bb1 = return''0 {_0} ]
    ) [ & _0 : bool = Any.any_l () | & x'1 : t_T = x'0 ] 
    [ return''0 (result:bool)-> {[@expl:x ensures] [%#sord_trait'0] result = true} (! return' {result}) ]

end
module M_ord_trait__gt_or_le [#"ord_trait.rs" 13 0 15 29]
  let%span sord_trait = "ord_trait.rs" 13 36 13 37
  let%span sord_trait'0 = "ord_trait.rs" 13 43 13 44
  let%span sord_trait'1 = "ord_trait.rs" 12 10 12 60
  let%span scmp = "../../creusot-contracts/src/std/cmp.rs" 59 16 59 17
  let%span scmp'0 = "../../creusot-contracts/src/std/cmp.rs" 60 29 60 34
  let%span scmp'1 = "../../creusot-contracts/src/std/cmp.rs" 59 26 59 77
  let%span smodel = "../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0 : t_T)
  
  predicate invariant' (self : t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0 : t_T)
  
  axiom inv_axiom [@rewrite] : forall x : t_T [inv'0 x] . inv'0 x = invariant' x
  
  predicate invariant''0 (self : t_T) =
    [%#sinvariant] inv'0 self
  
  predicate inv'1 (_0 : t_T)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_T [inv'1 x] . inv'1 x = invariant''0 x
  
  type t_DeepModelTy
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self : t_DeepModelTy) (other : t_DeepModelTy) : t_Ordering
  
  function eq_cmp (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom eq_cmp_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom antisym2_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom antisym1_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x : t_DeepModelTy) (y : t_DeepModelTy) (z : t_DeepModelTy) (o : t_Ordering) : ()
  
  axiom trans_spec : forall x : t_DeepModelTy, y : t_DeepModelTy, z : t_DeepModelTy, o : t_Ordering . ([%#sord'4] cmp_log x y
  = o)  -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x : t_DeepModelTy) : ()
  
  axiom refl_spec : forall x : t_DeepModelTy . [%#sord'3] cmp_log x x = C_Equal
  
  predicate gt_log (self : t_DeepModelTy) (o : t_DeepModelTy)
  
  function cmp_gt_log (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom cmp_gt_log_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord'2] gt_log x y
  = (cmp_log x y = C_Greater)
  
  predicate ge_log (self : t_DeepModelTy) (o : t_DeepModelTy)
  
  function cmp_ge_log (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom cmp_ge_log_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord'1] ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self : t_DeepModelTy) (o : t_DeepModelTy)
  
  function cmp_lt_log (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom cmp_lt_log_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord'0] lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self : t_DeepModelTy) (o : t_DeepModelTy)
  
  function cmp_le_log (x : t_DeepModelTy) (y : t_DeepModelTy) : ()
  
  axiom cmp_le_log_spec : forall x : t_DeepModelTy, y : t_DeepModelTy . [%#sord] le_log x y = (cmp_log x y <> C_Greater)
  
  function deep_model (self : t_T) : t_DeepModelTy
  
  function deep_model'0 (self : t_T) : t_DeepModelTy =
    [%#smodel] deep_model self
  
  function deep_model'1 (self : t_T) : t_DeepModelTy =
    [%#smodel] deep_model'0 self
  
  let rec ge (self_:t_T) (other:t_T) (return'  (x:bool))= {[@expl:ge 'self_' type invariant] [%#scmp] inv'1 self_}
    {[@expl:ge 'other' type invariant] [%#scmp'0] inv'1 other}
    any
    [ return''0 (result:bool)-> {[%#scmp'1] result = ge_log (deep_model'1 self_) (deep_model'1 other)}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec gt_or_le[#"ord_trait.rs" 13 0 15 29] (x:t_T) (y:t_T) (return'  (x'0:bool))= {[@expl:gt_or_le 'x' type invariant] [%#sord_trait] inv'0 x}
    {[@expl:gt_or_le 'y' type invariant] [%#sord_trait'0] inv'0 y}
    (! bb0
    [ bb0 = s0 [ s0 = ge {x'0} {y'0} (fun (_ret:bool) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ]  | bb1 = return''0 {_0} ]
    ) [ & _0 : bool = Any.any_l () | & x'0 : t_T = x | & y'0 : t_T = y ] 
    [ return''0 (result:bool)-> {[@expl:gt_or_le ensures] [%#sord_trait'1] result
      = le_log (deep_model y) (deep_model x)}
      (! return' {result}) ]

end
module M_ord_trait__gt_or_le_int [#"ord_trait.rs" 21 0 21 47]
  let%span sord_trait = "ord_trait.rs" 20 10 20 30
  
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec gt_or_le_int[#"ord_trait.rs" 21 0 21 47] (x:UInt64.t) (y:UInt64.t) (return'  (x'0:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- UInt64.le x'0 y'0 ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0 : bool = Any.any_l () | & x'0 : UInt64.t = x | & y'0 : UInt64.t = y ] 
    [ return''0 (result:bool)-> {[@expl:gt_or_le_int ensures] [%#sord_trait] result
      = (UInt64.t'int x <= UInt64.t'int y)}
      (! return' {result}) ]

end
