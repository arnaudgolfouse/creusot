module M_fn_pure__foo [#"fn_pure.rs" 4 0 4 12]
  let%span sfn_pure = "fn_pure.rs" 8 22 8 23
  let%span sfn_pure'0 = "fn_pure.rs" 10 22 10 23
  let%span sfn_pure'1 = "fn_pure.rs" 12 22 12 23
  let%span sfn_pure'2 = "fn_pure.rs" 12 4 12 24
  let%span sfn_pure'3 = "fn_pure.rs" 10 4 10 24
  let%span sfn_pure'4 = "fn_pure.rs" 8 4 8 24
  let%span sfn_pure'5 = "fn_pure.rs" 6 17 6 18
  let%span sfn_pure'6 = "../../creusot-contracts/src/fn_pure.rs" 74 14 74 26
  let%span sfn_pure'7 = "fn_pure.rs" 15 11 15 34
  let%span sfn_pure'8 = "fn_pure.rs" 16 10 16 42
  let%span sfn_pure'9 = "fn_pure.rs" 22 11 22 34
  let%span sfn_pure'10 = "fn_pure.rs" 23 10 23 61
  let%span sfn_pure'11 = "fn_pure.rs" 29 11 29 34
  let%span sfn_pure'12 = "fn_pure.rs" 30 10 30 47
  let%span sfn_pure'13 = "fn_pure.rs" 6 4 6 12
  let%span sops = "../../creusot-contracts/src/std/ops.rs" 158 14 158 114
  let%span sops'0 = "../../creusot-contracts/src/std/ops.rs" 163 14 163 101
  let%span sops'1 = "../../creusot-contracts/src/std/ops.rs" 168 14 168 61
  let%span sops'2 = "../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'3 = "../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'4 = "../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'5 = "../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'6 = "../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'7 = "../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'8 = "../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec closure0[#"fn_pure.rs" 6 4 6 12] [@coma:extspec] (self:()) (x:Int32.t) (return'  (x'0:Int32.t))= bb0
    [ bb0 = s0
      [ s0 = Int32.add {x'0} {[%#sfn_pure'5] (1: Int32.t)} (fun (_ret:Int32.t) ->  [ &_0 <- _ret ] s1)
      | s1 = return''0 {_0} ]
     ]
     [ & _0: Int32.t = Any.any_l () | & x'0: Int32.t = x ]  [ return''0 (result:Int32.t)-> return' {result} ] 
  
  type t_FnPureWrapper  =
    { t_FnPureWrapper__0: () }
  
  function view (self: t_FnPureWrapper) : ()
  
  let rec qy95z_new (f:()) (return'  (x:t_FnPureWrapper))= any
    [ return''0 (result:t_FnPureWrapper)-> {[%#sfn_pure'6] view result = f} (! return' {result}) ]
  
  
  predicate precondition (self: ()) (args: Int32.t) =
    [%#sfn_pure'13] let x = args in closure0'pre self x
  
  predicate precondition'0 (self: t_FnPureWrapper) (args: Int32.t) =
    precondition self.t_FnPureWrapper__0 args
  
  predicate resolve (_0: ()) =
    true
  
  predicate postcondition_once (self: ()) (args: Int32.t) (result: Int32.t) =
    [%#sfn_pure'13] let x = args in closure0'post'return' self x result /\ resolve self
  
  predicate postcondition_mut (self: ()) (args: Int32.t) (result_state: ()) (result: Int32.t) =
    [%#sfn_pure'13] let x = args in closure0'post'return' self x result /\ self = result_state
  
  function fn_mut_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
  = (exists res_state: (). postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) =
    self = result_state
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
   -> ([%#sops'6] hist_inv b c)  -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: (), args: Int32.t, res_state: (), res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
   -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: Int32.t) (result: Int32.t) =
    [%#sfn_pure'13] let x = args in closure0'post'return' self x result
  
  function fn_once (self: ()) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once self args res
  = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: ()) (args: Int32.t) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec: forall self: (), args: Int32.t, res_state: (), res: Int32.t. [%#sops] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  predicate postcondition_once'0 (self: t_FnPureWrapper) (args: Int32.t) (result: Int32.t) =
    postcondition self.t_FnPureWrapper__0 args result
  
  predicate resolve'0 (_0: t_FnPureWrapper) =
    true
  
  predicate postcondition_mut'0 (self: t_FnPureWrapper) (args: Int32.t) (result_state: t_FnPureWrapper) (result: Int32.t)
  
   =
    postcondition self.t_FnPureWrapper__0 args result /\ self = result_state
  
  function fn_mut_once'0 (self: t_FnPureWrapper) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec'0: forall self: t_FnPureWrapper, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once'0 self args res
  = (exists res_state: t_FnPureWrapper. postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv'0 (self: t_FnPureWrapper) (result_state: t_FnPureWrapper)
  
  function hist_inv_trans'0 (self: t_FnPureWrapper) (b: t_FnPureWrapper) (c: t_FnPureWrapper) : ()
  
  axiom hist_inv_trans_spec'0: forall self: t_FnPureWrapper, b: t_FnPureWrapper, c: t_FnPureWrapper. ([%#sops'5] hist_inv'0 self b)
   -> ([%#sops'6] hist_inv'0 b c)  -> ([%#sops'7] hist_inv'0 self c)
  
  function hist_inv_refl'0 (self: t_FnPureWrapper) : ()
  
  axiom hist_inv_refl_spec'0: forall self: t_FnPureWrapper. [%#sops'4] hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: t_FnPureWrapper) (args: Int32.t) (res_state: t_FnPureWrapper) (res: Int32.t) : ()
  
  
  axiom postcondition_mut_hist_inv_spec'0: forall self: t_FnPureWrapper, args: Int32.t, res_state: t_FnPureWrapper, res: Int32.t. ([%#sops'2] postcondition_mut'0 self args res_state res)
   -> ([%#sops'3] hist_inv'0 self res_state)
  
  function fn_hist_inv'0 (self: t_FnPureWrapper) (res_state: t_FnPureWrapper) : ()
  
  axiom fn_hist_inv_spec'0: forall self: t_FnPureWrapper, res_state: t_FnPureWrapper. [%#sops'1] hist_inv'0 self res_state
  = (self = res_state)
  
  predicate postcondition'0 (self: t_FnPureWrapper) (args: Int32.t) (result: Int32.t) =
    postcondition self.t_FnPureWrapper__0 args result
  
  function fn_once'0 (self: t_FnPureWrapper) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec'0: forall self: t_FnPureWrapper, args: Int32.t, res: Int32.t. [%#sops'0] postcondition_once'0 self args res
  = (postcondition'0 self args res /\ resolve'0 self)
  
  function fn_mut'0 (self: t_FnPureWrapper) (args: Int32.t) (res_state: t_FnPureWrapper) (res: Int32.t) : ()
  
  axiom fn_mut_spec'0: forall self: t_FnPureWrapper, args: Int32.t, res_state: t_FnPureWrapper, res: Int32.t. [%#sops] postcondition_mut'0 self args res_state res
  = (postcondition'0 self args res /\ self = res_state)
  
  let rec takes_pure_fn (f:t_FnPureWrapper) (return'  (x:Int32.t))= {[@expl:takes_pure_fn requires] [%#sfn_pure'7] precondition'0 f (1: Int32.t)}
    any [ return''0 (result:Int32.t)-> {[%#sfn_pure'8] postcondition'0 f (1: Int32.t) result} (! return' {result}) ] 
  
  let rec takes_pure_fnmut (f:t_FnPureWrapper) (return'  (x:Int32.t))= {[@expl:takes_pure_fnmut requires] [%#sfn_pure'9] precondition'0 f (1: Int32.t)}
    any
    [ return''0 (result:Int32.t)-> {[%#sfn_pure'10] exists f2: t_FnPureWrapper. postcondition_mut'0 f (1: Int32.t) f2 result}
      (! return' {result}) ]
  
  
  let rec takes_pure_fnonce (f:t_FnPureWrapper) (return'  (x:Int32.t))= {[@expl:takes_pure_fnonce requires] [%#sfn_pure'11] precondition'0 f (1: Int32.t)}
    any
    [ return''0 (result:Int32.t)-> {[%#sfn_pure'12] postcondition_once'0 f (1: Int32.t) result} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec foo[#"fn_pure.rs" 4 0 4 12] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- () ] s1 | s1 = qy95z_new {_2} (fun (_ret:t_FnPureWrapper) ->  [ &f <- _ret ] s2) | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = takes_pure_fn {f} (fun (_ret:Int32.t) ->  [ &result <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_6 <- result = ([%#sfn_pure] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb4) | br1 -> {_6} (! bb3) ]  ]
    
    | bb3 = s0 [ s0 = takes_pure_fnmut {f} (fun (_ret:Int32.t) ->  [ &result'0 <- _ret ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 =  [ &_12 <- result'0 = ([%#sfn_pure'0] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_12 = false} (! bb7) | br1 -> {_12} (! bb6) ]  ]
    
    | bb6 = s0 [ s0 = takes_pure_fnonce {f} (fun (_ret:Int32.t) ->  [ &result'1 <- _ret ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 =  [ &_18 <- result'1 = ([%#sfn_pure'1] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_18 = false} (! bb10) | br1 -> {_18} (! bb9) ]  ]
    
    | bb9 = return''0 {_0}
    | bb10 = {[%#sfn_pure'2] false} any
    | bb7 = {[%#sfn_pure'3] false} any
    | bb4 = {[%#sfn_pure'4] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & f: t_FnPureWrapper = Any.any_l ()
    | & _2: () = Any.any_l ()
    | & result: Int32.t = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & result'0: Int32.t = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & result'1: Int32.t = Any.any_l ()
    | & _18: bool = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_fn_pure__takes_pure_fn [#"fn_pure.rs" 18 0 18 61]
  let%span sfn_pure = "fn_pure.rs" 19 6 19 7
  let%span sfn_pure'0 = "fn_pure.rs" 18 49 18 50
  let%span sfn_pure'1 = "fn_pure.rs" 15 11 15 34
  let%span sfn_pure'2 = "fn_pure.rs" 16 10 16 42
  let%span sops = "../../creusot-contracts/src/std/ops.rs" 188 16 188 17
  let%span sops'0 = "../../creusot-contracts/src/std/ops.rs" 188 27 188 52
  let%span sops'1 = "../../creusot-contracts/src/std/ops.rs" 189 26 189 60
  let%span sops'2 = "../../creusot-contracts/src/std/ops.rs" 158 14 158 114
  let%span sops'3 = "../../creusot-contracts/src/std/ops.rs" 163 14 163 101
  let%span sops'4 = "../../creusot-contracts/src/std/ops.rs" 168 14 168 61
  let%span sops'5 = "../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'6 = "../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'7 = "../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'8 = "../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'9 = "../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'10 = "../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'11 = "../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: t_F) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_F)
  
  axiom inv_axiom [@rewrite]: forall x: t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'11] postcondition_once self args res
  = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'8] hist_inv self b)
   -> ([%#sops'9] hist_inv b c)  -> ([%#sops'10] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'7] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'5] postcondition_mut self args res_state res)
   -> ([%#sops'6] hist_inv self res_state)
  
  function fn_hist_inv (self: t_F) (res_state: t_F) : ()
  
  axiom fn_hist_inv_spec: forall self: t_F, res_state: t_F. [%#sops'4] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_F) (args: Int32.t) (result: Int32.t)
  
  function fn_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'3] postcondition_once self args res
  = (postcondition self args res /\ resolve self)
  
  function fn_mut (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom fn_mut_spec: forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. [%#sops'2] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  let rec call (self_:t_F) (arg:Int32.t) (return'  (x:Int32.t))= {[@expl:call 'self_' type invariant] [%#sops] inv'0 self_}
    {[@expl:call requires] [%#sops'0] precondition self_ arg}
    any [ return''0 (result:Int32.t)-> {[%#sops'1] postcondition self_ arg result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec takes_pure_fn[#"fn_pure.rs" 18 0 18 61] (f:t_F) (return'  (x:Int32.t))= {[@expl:takes_pure_fn 'f' type invariant] [%#sfn_pure'0] inv f}
    {[@expl:takes_pure_fn requires] [%#sfn_pure'1] precondition f (1: Int32.t)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0
      [ s0 =  [ &_5 <- [%#sfn_pure] (1: Int32.t) ] s1
      | s1 = call {f'0} {_5} (fun (_ret:Int32.t) ->  [ &_0 <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb4 ] 
    | bb4 = return''0 {_0} ]
    ) [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & _5: Int32.t = Any.any_l () ] 
    [ return''0 (result:Int32.t)-> {[@expl:takes_pure_fn ensures] [%#sfn_pure'2] postcondition f (1: Int32.t) result}
      (! return' {result}) ]

end
module M_fn_pure__takes_pure_fnmut [#"fn_pure.rs" 25 0 25 71]
  let%span sfn_pure = "fn_pure.rs" 26 6 26 7
  let%span sfn_pure'0 = "fn_pure.rs" 25 59 25 60
  let%span sfn_pure'1 = "fn_pure.rs" 22 11 22 34
  let%span sfn_pure'2 = "fn_pure.rs" 23 10 23 61
  let%span sops = "../../creusot-contracts/src/std/ops.rs" 182 16 182 17
  let%span sops'0 = "../../creusot-contracts/src/std/ops.rs" 182 27 182 52
  let%span sops'1 = "../../creusot-contracts/src/std/ops.rs" 183 26 183 71
  let%span sops'2 = "../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'3 = "../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'4 = "../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'5 = "../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'6 = "../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'7 = "../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'8 = "../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate invariant' (self: MutBorrow.t t_F) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_F)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_F [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  predicate resolve (_0: t_F)
  
  predicate postcondition_mut (self: t_F) (args: Int32.t) (result_state: t_F) (result: Int32.t)
  
  function fn_mut_once (self: t_F) (args: Int32.t) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: t_F, args: Int32.t, res: Int32.t. [%#sops'8] postcondition_once self args res
  = (exists res_state: t_F. postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate hist_inv (self: t_F) (result_state: t_F)
  
  function hist_inv_trans (self: t_F) (b: t_F) (c: t_F) : ()
  
  axiom hist_inv_trans_spec: forall self: t_F, b: t_F, c: t_F. ([%#sops'5] hist_inv self b)
   -> ([%#sops'6] hist_inv b c)  -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: t_F) : ()
  
  axiom hist_inv_refl_spec: forall self: t_F. [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_F) (args: Int32.t) (res_state: t_F) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: t_F, args: Int32.t, res_state: t_F, res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
   -> ([%#sops'3] hist_inv self res_state)
  
  let rec call_mut (self_:MutBorrow.t t_F) (arg:Int32.t) (return'  (x:Int32.t))= {[@expl:call_mut 'self_' type invariant] [%#sops] inv'0 self_}
    {[@expl:call_mut requires] [%#sops'0] precondition self_.current arg}
    any
    [ return''0 (result:Int32.t)-> {[%#sops'1] postcondition_mut self_.current arg self_.final result}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec takes_pure_fnmut[#"fn_pure.rs" 25 0 25 71] (f:t_F) (return'  (x:Int32.t))= {[@expl:takes_pure_fnmut 'f' type invariant] [%#sfn_pure'0] inv f}
    {[@expl:takes_pure_fnmut requires] [%#sfn_pure'1] precondition f (1: Int32.t)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0
      [ s0 = {inv f'0}
        MutBorrow.borrow_mut <t_F> {f'0}
          (fun (_ret:MutBorrow.t t_F) ->  [ &_4 <- _ret ] -{inv _ret.final}-  [ &f'0 <- _ret.final ] s1)
      | s1 =  [ &_5 <- [%#sfn_pure] (1: Int32.t) ] s2
      | s2 = call_mut {_4} {_5} (fun (_ret:Int32.t) ->  [ &_0 <- _ret ] s3)
      | s3 = bb3 ]
    
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb4 ] 
    | bb4 = return''0 {_0} ]
    )
    [ & _0: Int32.t = Any.any_l ()
    | & f'0: t_F = f
    | & _4: MutBorrow.t t_F = Any.any_l ()
    | & _5: Int32.t = Any.any_l () ]
    
    [ return''0 (result:Int32.t)-> {[@expl:takes_pure_fnmut ensures] [%#sfn_pure'2] exists f2: t_F. postcondition_mut f (1: Int32.t) f2 result}
      (! return' {result}) ]

end
module M_fn_pure__takes_pure_fnonce [#"fn_pure.rs" 32 0 32 69]
  let%span sfn_pure = "fn_pure.rs" 33 6 33 7
  let%span sfn_pure'0 = "fn_pure.rs" 32 57 32 58
  let%span sfn_pure'1 = "fn_pure.rs" 29 11 29 34
  let%span sfn_pure'2 = "fn_pure.rs" 30 10 30 47
  let%span sops = "../../creusot-contracts/src/std/ops.rs" 176 16 176 17
  let%span sops'0 = "../../creusot-contracts/src/std/ops.rs" 176 27 176 49
  let%span sops'1 = "../../creusot-contracts/src/std/ops.rs" 177 26 177 62
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0: t_F)
  
  predicate precondition (self: t_F) (args: Int32.t)
  
  predicate postcondition_once (self: t_F) (args: Int32.t) (result: Int32.t)
  
  let rec call_once (self_:t_F) (arg:Int32.t) (return'  (x:Int32.t))= {[@expl:call_once 'self_' type invariant] [%#sops] inv self_}
    {[@expl:call_once requires] [%#sops'0] precondition self_ arg}
    any [ return''0 (result:Int32.t)-> {[%#sops'1] postcondition_once self_ arg result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec takes_pure_fnonce[#"fn_pure.rs" 32 0 32 69] (f:t_F) (return'  (x:Int32.t))= {[@expl:takes_pure_fnonce 'f' type invariant] [%#sfn_pure'0] inv f}
    {[@expl:takes_pure_fnonce requires] [%#sfn_pure'1] precondition f (1: Int32.t)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0
      [ s0 =  [ &_5 <- [%#sfn_pure] (1: Int32.t) ] s1
      | s1 = call_once {f'0} {_5} (fun (_ret:Int32.t) ->  [ &_0 <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = bb4
    | bb4 = return''0 {_0} ]
    ) [ & _0: Int32.t = Any.any_l () | & f'0: t_F = f | & _5: Int32.t = Any.any_l () ] 
    [ return''0 (result:Int32.t)-> {[@expl:takes_pure_fnonce ensures] [%#sfn_pure'2] postcondition_once f (1: Int32.t) result}
      (! return' {result}) ]

end
