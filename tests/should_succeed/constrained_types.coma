module M_constrained_types__uses_concrete_instance [#"constrained_types.rs" 14 0 14 67]
  let%span sconstrained_types = "constrained_types.rs" 9 18 9 68
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 326 20 326 67
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'12 = "../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'13 = "../../creusot-contracts/src/logic/ord.rs" 320 20 320 68
  let%span sord'14 = "../../creusot-contracts/src/logic/ord.rs" 308 12 308 40
  let%span sord'15 = "../../creusot-contracts/src/logic/ord.rs" 332 20 332 68
  let%span sord'16 = "../../creusot-contracts/src/logic/ord.rs" 338 20 338 67
  let%span sord'17 = "../../creusot-contracts/src/logic/ord.rs" 184 8 190 9
  let%span sord'18 = "../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'19 = "../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'20 = "../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'21 = "../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'22 = "../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'23 = "../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'24 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'25 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'26 = "../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'27 = "../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'28 = "../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'29 = "../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'30 = "../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span smodel = "../../creusot-contracts/src/model.rs" 35 8 35 28
  let%span stuples = "../../creusot-contracts/src/std/tuples.rs" 21 28 21 57
  let%span snum = "../../creusot-contracts/src/std/num.rs" 24 28 24 33
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type tuple  =
    { _p0: UInt32.t; _p1: UInt32.t }
  
  type tuple'0  =
    { _p0'0: int; _p1'0: int }
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self: int) (o: int) : t_Ordering =
    [%#sord'17] if self < o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp (x: int) (y: int) : ()
  
  axiom eq_cmp_spec: forall x: int, y: int. [%#sord'30] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: int) (y: int) : ()
  
  axiom antisym2_spec: forall x: int, y: int. ([%#sord'28] cmp_log x y = C_Greater)
   -> ([%#sord'29] cmp_log y x = C_Less)
  
  function antisym1 (x: int) (y: int) : ()
  
  axiom antisym1_spec: forall x: int, y: int. ([%#sord'26] cmp_log x y = C_Less)
   -> ([%#sord'27] cmp_log y x = C_Greater)
  
  function trans (x: int) (y: int) (z: int) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: int, y: int, z: int, o: t_Ordering. ([%#sord'23] cmp_log x y = o)
   -> ([%#sord'24] cmp_log y z = o)  -> ([%#sord'25] cmp_log x z = o)
  
  function refl (x: int) : ()
  
  axiom refl_spec: forall x: int. [%#sord'22] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: int) (y: int) : ()
  
  axiom cmp_gt_log_spec: forall x: int, y: int. [%#sord'21] (x > y) = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: int) (y: int) : ()
  
  axiom cmp_ge_log_spec: forall x: int, y: int. [%#sord'20] (x >= y) = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: int) (y: int) : ()
  
  axiom cmp_lt_log_spec: forall x: int, y: int. [%#sord'19] (x < y) = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: int) (y: int) : ()
  
  axiom cmp_le_log_spec: forall x: int, y: int. [%#sord'18] (x <= y) = (cmp_log x y <> C_Greater)
  
  function cmp_log'0 (self: tuple'0) (o: tuple'0) : t_Ordering =
    [%#sord'14] let r = cmp_log self._p0'0 o._p0'0 in if r = C_Equal then cmp_log self._p1'0 o._p1'0 else r
  
  function eq_cmp'0 (x: tuple'0) (y: tuple'0) : ()
  
  axiom eq_cmp_spec'0: forall x: tuple'0, y: tuple'0. [%#sord'12] (x = y) = (cmp_log'0 x y = C_Equal)
  
  function antisym2'0 (x: tuple'0) (y: tuple'0) : ()
  
  axiom antisym2_spec'0: forall x: tuple'0, y: tuple'0. ([%#sord'10] cmp_log'0 x y = C_Greater)
   -> ([%#sord'11] cmp_log'0 y x = C_Less)
  
  function antisym1'0 (x: tuple'0) (y: tuple'0) : ()
  
  axiom antisym1_spec'0: forall x: tuple'0, y: tuple'0. ([%#sord'8] cmp_log'0 x y = C_Less)
   -> ([%#sord'9] cmp_log'0 y x = C_Greater)
  
  function trans'0 (x: tuple'0) (y: tuple'0) (z: tuple'0) (o: t_Ordering) : ()
  
  axiom trans_spec'0: forall x: tuple'0, y: tuple'0, z: tuple'0, o: t_Ordering. ([%#sord'5] cmp_log'0 x y = o)
   -> ([%#sord'6] cmp_log'0 y z = o)  -> ([%#sord'7] cmp_log'0 x z = o)
  
  function refl'0 (x: tuple'0) : ()
  
  axiom refl_spec'0: forall x: tuple'0. [%#sord'4] cmp_log'0 x x = C_Equal
  
  predicate gt_log (self: tuple'0) (o: tuple'0) =
    [%#sord'16] self._p0'0 = o._p0'0 /\ self._p1'0 > o._p1'0 \/ self._p0'0 > o._p0'0
  
  function cmp_gt_log'0 (x: tuple'0) (y: tuple'0) : ()
  
  axiom cmp_gt_log_spec'0: forall x: tuple'0, y: tuple'0. [%#sord'3] gt_log x y = (cmp_log'0 x y = C_Greater)
  
  predicate ge_log (self: tuple'0) (o: tuple'0) =
    [%#sord'15] self._p0'0 = o._p0'0 /\ self._p1'0 >= o._p1'0 \/ self._p0'0 > o._p0'0
  
  function cmp_ge_log'0 (x: tuple'0) (y: tuple'0) : ()
  
  axiom cmp_ge_log_spec'0: forall x: tuple'0, y: tuple'0. [%#sord'2] ge_log x y = (cmp_log'0 x y <> C_Less)
  
  predicate lt_log (self: tuple'0) (o: tuple'0) =
    [%#sord] self._p0'0 = o._p0'0 /\ self._p1'0 < o._p1'0 \/ self._p0'0 < o._p0'0
  
  function cmp_lt_log'0 (x: tuple'0) (y: tuple'0) : ()
  
  axiom cmp_lt_log_spec'0: forall x: tuple'0, y: tuple'0. [%#sord'1] lt_log x y = (cmp_log'0 x y = C_Less)
  
  predicate le_log (self: tuple'0) (o: tuple'0) =
    [%#sord'13] self._p0'0 = o._p0'0 /\ self._p1'0 <= o._p1'0 \/ self._p0'0 < o._p0'0
  
  function cmp_le_log'0 (x: tuple'0) (y: tuple'0) : ()
  
  axiom cmp_le_log_spec'0: forall x: tuple'0, y: tuple'0. [%#sord'0] le_log x y = (cmp_log'0 x y <> C_Greater)
  
  function deep_model (self: UInt32.t) : int =
    [%#snum] UInt32.t'int self
  
  function deep_model'0 (self: tuple) : tuple'0 =
    [%#stuples] { _p0'0 = deep_model self._p0; _p1'0 = deep_model self._p1 }
  
  function deep_model'1 (self: tuple) : tuple'0 =
    [%#smodel] deep_model'0 self
  
  let rec lt (self_:tuple) (o:tuple) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#sconstrained_types] result = lt_log (deep_model'1 self_) (deep_model'1 o)}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec uses_concrete_instance[#"constrained_types.rs" 14 0 14 67] (x:tuple) (y:tuple) (return'  (x'0:bool))= (! bb0
    [ bb0 = s0 [ s0 = lt {x'0} {y'0} (fun (_ret:bool) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ]  | bb1 = return''0 {_0} ]
     [ & _0: bool = Any.any_l () | & x'0: tuple = x | & y'0: tuple = y ] )
    [ return''0 (result:bool)-> (! return' {result}) ]

end
