module M_selection_sort_generic__selection_sort [#"selection_sort_generic.rs" 29 0 31 29]
  let%span sselection_sort_generic = "selection_sort_generic.rs" 33 16 33 31
  let%span sselection_sort_generic'0 = "selection_sort_generic.rs" 38 13 38 14
  let%span sselection_sort_generic'1 = "selection_sort_generic.rs" 38 4 38 7
  let%span sselection_sort_generic'2 = "selection_sort_generic.rs" 37 16 37 57
  let%span sselection_sort_generic'3 = "selection_sort_generic.rs" 36 16 36 63
  let%span sselection_sort_generic'4 = "selection_sort_generic.rs" 35 16 35 41
  let%span sselection_sort_generic'5 = "selection_sort_generic.rs" 38 4 38 7
  let%span sselection_sort_generic'6 = "selection_sort_generic.rs" 43 22 43 23
  let%span sselection_sort_generic'7 = "selection_sort_generic.rs" 43 8 43 11
  let%span sselection_sort_generic'8 = "selection_sort_generic.rs" 42 20 42 64
  let%span sselection_sort_generic'9 = "selection_sort_generic.rs" 41 20 41 114
  let%span sselection_sort_generic'10 = "selection_sort_generic.rs" 43 8 43 11
  let%span sselection_sort_generic'11 = "selection_sort_generic.rs" 49 24 49 47
  let%span sselection_sort_generic'12 = "selection_sort_generic.rs" 29 42 29 43
  let%span sselection_sort_generic'13 = "selection_sort_generic.rs" 27 10 27 35
  let%span sselection_sort_generic'14 = "selection_sort_generic.rs" 28 10 28 34
  let%span sselection_sort_generic'15 = "selection_sort_generic.rs" 24 16 24 94
  let%span sselection_sort_generic'16 = "selection_sort_generic.rs" 11 8 11 62
  let%span sselection_sort_generic'17 = "selection_sort_generic.rs" 18 8 18 35
  let%span sselection_sort_generic'18 = "selection_sort_generic.rs" 1 0 1398 4
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 110 16 110 17
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 111 26 111 48
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 189 16 189 17
  let%span svec'2 = "../../creusot-contracts/src/std/vec.rs" 190 16 190 48
  let%span svec'3 = "../../creusot-contracts/src/std/vec.rs" 191 16 191 56
  let%span svec'4 = "../../creusot-contracts/src/std/vec.rs" 202 16 202 17
  let%span svec'5 = "../../creusot-contracts/src/std/vec.rs" 203 26 203 42
  let%span svec'6 = "../../creusot-contracts/src/std/vec.rs" 204 26 204 48
  let%span svec'7 = "../../creusot-contracts/src/std/vec.rs" 34 14 34 47
  let%span svec'8 = "../../creusot-contracts/src/std/vec.rs" 35 14 36 51
  let%span svec'9 = "../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span svec'10 = "../../creusot-contracts/src/std/vec.rs" 48 8 48 31
  let%span svec'11 = "../../creusot-contracts/src/std/vec.rs" 93 20 93 41
  let%span siter = "../../creusot-contracts/src/std/iter.rs" 215 18 215 32
  let%span siter'0 = "../../creusot-contracts/src/std/iter.rs" 93 26 96 17
  let%span smodel = "../../creusot-contracts/src/model.rs" 51 8 51 28
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span smodel'1 = "../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span smodel'2 = "../../creusot-contracts/src/model.rs" 35 8 35 28
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 330 4 330 18
  let%span sseq'0 = "../../creusot-contracts/src/logic/seq.rs" 711 20 711 91
  let%span ssnapshot = "../../creusot-contracts/src/snapshot.rs" 57 4 57 26
  let%span srange = "../../creusot-contracts/src/std/iter/range.rs" 23 12 27 70
  let%span srange'0 = "../../creusot-contracts/src/std/iter/range.rs" 32 4 32 49
  let%span srange'1 = "../../creusot-contracts/src/std/iter/range.rs" 36 4 36 34
  let%span srange'2 = "../../creusot-contracts/src/std/iter/range.rs" 37 4 37 34
  let%span srange'3 = "../../creusot-contracts/src/std/iter/range.rs" 38 4 38 44
  let%span srange'4 = "../../creusot-contracts/src/std/iter/range.rs" 15 8 17 9
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 267 8 267 9
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 268 19 268 35
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 269 19 269 35
  let%span sslice'2 = "../../creusot-contracts/src/std/slice.rs" 270 18 270 50
  let%span sslice'3 = "../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  let%span sslice'4 = "../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span sslice'5 = "../../creusot-contracts/src/std/slice.rs" 21 20 21 30
  let%span snum = "../../creusot-contracts/src/std/num.rs" 23 28 23 33
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 44 20 44 34
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 28 14 28 64
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 38 14 38 61
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 48 14 48 61
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 58 14 58 64
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 63 14 63 45
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 68 15 68 32
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 69 15 69 32
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 70 14 70 31
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 77 15 77 45
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 78 14 78 47
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 85 15 85 48
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 86 14 86 44
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 91 14 91 59
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 99 20 99 44
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 30 8 30 18
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use seq.Permut
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = [%#sboxed] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    [%#sseq'0] forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. [%#svec'9] Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = [%#svec'11] inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate invariant''2 [@inline:trivial] (self: t_Vec) = [%#sinvariant'0] inv'2 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: t_Vec)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_Vec [inv'3 x]. inv'3 x = invariant''2 x
  
  function view'0 [@inline:trivial] (self: t_Vec) : Seq.seq t_T = [%#smodel'1] view self
  
  meta "rewrite_def" function view'0
  
  let rec len (self_: t_Vec) (return' (x: UInt64.t)) = {[@expl:len 'self_' type invariant] [%#svec] inv'3 self_}
    any
    [ return''0 (result: UInt64.t) -> {[%#svec'0] UInt64.t'int result = Seq.length (view'0 self_)}
      (! return' {result}) ]
  
  type t_Range = { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter (self_: t_Range) (return' (x: t_Range)) = any
    [ return''0 (result: t_Range) -> {[%#siter] result = self_} (! return' {result}) ]
  
  type t_DeepModelTy
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: t_DeepModelTy) (other: t_DeepModelTy) : t_Ordering
  
  function eq_cmp (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom eq_cmp_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym2_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom antisym1_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: t_DeepModelTy) (y: t_DeepModelTy) (z: t_DeepModelTy) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: t_DeepModelTy, y: t_DeepModelTy, z: t_DeepModelTy, o: t_Ordering. ([%#sord'4] cmp_log x y
        = o) -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: t_DeepModelTy) : ()
  
  axiom refl_spec: forall x: t_DeepModelTy. [%#sord'3] cmp_log x x = C_Equal
  
  predicate gt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_gt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_gt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'2] gt_log x y = (cmp_log x y = C_Greater)
  
  predicate ge_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_ge_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_ge_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'1] ge_log x y = (cmp_log x y <> C_Less)
  
  predicate lt_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_lt_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_lt_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord'0] lt_log x y = (cmp_log x y = C_Less)
  
  predicate le_log (self: t_DeepModelTy) (o: t_DeepModelTy)
  
  function cmp_le_log (x: t_DeepModelTy) (y: t_DeepModelTy) : ()
  
  axiom cmp_le_log_spec: forall x: t_DeepModelTy, y: t_DeepModelTy. [%#sord] le_log x y = (cmp_log x y <> C_Greater)
  
  predicate partition [#"selection_sort_generic.rs" 23 0 23 52] (v: Seq.seq t_DeepModelTy) (i: int) =
    [%#sselection_sort_generic'15] forall k1: int, k2: int. 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v
      -> le_log (Seq.get v k1) (Seq.get v k2)
  
  function deep_model (self: t_T) : t_DeepModelTy
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : t_T = [%#svec'10] Seq.get (view self) ix
  
  meta "rewrite_def" function index_logic
  
  function deep_model'0 (self: t_Vec) : Seq.seq t_DeepModelTy
  
  axiom deep_model_spec: forall self: t_Vec. [%#svec'7] Seq.length (view self) = Seq.length (deep_model'0 self)
  
  axiom deep_model_spec'0: forall self: t_Vec. [%#svec'8] forall i: int. 0 <= i /\ i < Seq.length (view self)
        -> Seq.get (deep_model'0 self) i = deep_model (index_logic self i)
  
  function deep_model'1 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_DeepModelTy =
    [%#smodel] deep_model'0 self.current
  
  meta "rewrite_def" function deep_model'1
  
  predicate sorted_range [#"selection_sort_generic.rs" 9 0 9 67] (s: Seq.seq t_DeepModelTy) (l: int) (u: int) =
    [%#sselection_sort_generic'16] forall i: int, j: int. l <= i /\ i < j /\ j < u -> le_log (Seq.get s i) (Seq.get s j)
  
  predicate permutation_of (self: Seq.seq t_T) (other: Seq.seq t_T) =
    [%#sseq] Permut.permut self other 0 (Seq.length self)
  
  function view'1 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_T = [%#smodel'0] view self.current
  
  meta "rewrite_def" function view'1
  
  function view'2 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_T = [%#smodel'1] view'1 self
  
  meta "rewrite_def" function view'2
  
  function view'3 [@inline:trivial] (self: MutBorrow.t t_Vec) : Seq.seq t_T = [%#ssnapshot] view'2 self
  
  meta "rewrite_def" function view'3
  
  function deep_model'2 [@inline:trivial] (self: UInt64.t) : int = [%#snum] UInt64.t'int self
  
  meta "rewrite_def" function deep_model'2
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    [%#srange] self.t_Range__end = o.t_Range__end
    /\ deep_model'2 self.t_Range__start <= deep_model'2 o.t_Range__start
    /\ (Seq.length visited > 0 -> deep_model'2 o.t_Range__start <= deep_model'2 o.t_Range__end)
    /\ Seq.length visited = deep_model'2 o.t_Range__start - deep_model'2 self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
      -> deep_model'2 (Seq.get visited i) = deep_model'2 self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec:
    forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. ([%#srange'1] produces a ab b)
      -> ([%#srange'2] produces b bc c) -> ([%#srange'3] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#srange'0] produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv'4 (_0: t_Range)
  
  axiom inv_axiom'3 [@rewrite]: forall x: t_Range [inv'4 x]. inv'4 x = true
  
  predicate inv'5 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'4 [@rewrite]: forall x: Seq.seq UInt64.t [inv'5 x]. inv'5 x = true
  
  type t_Option = C_None | C_Some UInt64.t
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Range) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate completed (self: MutBorrow.t t_Range) =
    [%#srange'4] resolve self /\ deep_model'2 (self.current).t_Range__start >= deep_model'2 (self.current).t_Range__end
  
  let rec next (self_: MutBorrow.t t_Range) (return' (x: t_Option)) = any
    [ return''0 (result: t_Option) -> {[%#siter'0] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Range) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  let rec v_Some (input: t_Option) (ret (field_0: UInt64.t)) = any
    [ good (field_0: UInt64.t) -> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) =
    [%#sslice'3] UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds
  
  predicate invariant''3 [@inline:trivial] (self: t_T) = [%#sinvariant'0] inv self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'6 (_0: t_T)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_T [inv'6 x]. inv'6 x = invariant''3 x
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq t_T) (out: t_T) =
    [%#sslice'4] Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value
  
  let rec index (self_: t_Vec) (ix: UInt64.t) (return' (x: t_T)) =
    {[@expl:index 'self_' type invariant] [%#svec'1] inv'3 self_}
    {[@expl:index requires] [%#svec'2] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result: t_T) -> {inv'6 result} {[%#svec'3] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  type tuple = { _p0: t_T; _p1: t_T }
  
  predicate precondition (self: ()) (args: tuple)
  
  axiom precondition_fndef:
    [%#sselection_sort_generic'18] forall args: tuple [precondition () args]. (let {_p0 = self_; _p1 = other} = args in inv'6 other
        /\ inv'6 self_) -> precondition () args
  
  function deep_model'3 [@inline:trivial] (self: t_T) : t_DeepModelTy = [%#smodel'2] deep_model self
  
  meta "rewrite_def" function deep_model'3
  
  predicate postcondition_once (self: ()) (args: tuple) (result: bool)
  
  axiom postcondition_fndef:
    [%#sselection_sort_generic'18] forall args: tuple, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let {_p0 = self_; _p1 = other} = args in res = lt_log (deep_model'3 self_) (deep_model'3 other))
  
  let rec lt (self_: t_T) (other: t_T) (return' (x: bool)) = {[@expl:lt requires] precondition () { _p0 = self_;
                                                                                                    _p1 = other }}
    any [ return''0 (result: bool) -> {postcondition_once () { _p0 = self_; _p1 = other } result} (! return' {result}) ]
  
  predicate invariant''4 [@inline:trivial] (self: MutBorrow.t t_Vec) =
    [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'7 (_0: MutBorrow.t t_Vec)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_Vec [inv'7 x]. inv'7 x = invariant''4 x
  
  predicate invariant''5 (self: Slice64.slice t_T) = [%#sslice'5] inv'1 (Slice64.view self)
  
  predicate inv'8 (_0: Slice64.slice t_T)
  
  axiom inv_axiom'7 [@rewrite]: forall x: Slice64.slice t_T [inv'8 x]. inv'8 x = invariant''5 x
  
  predicate invariant''6 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    [%#sinvariant] inv'8 self.current /\ inv'8 self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'9 (_0: MutBorrow.t (Slice64.slice t_T))
  
  axiom inv_axiom'8 [@rewrite]: forall x: MutBorrow.t (Slice64.slice t_T) [inv'9 x]. inv'9 x = invariant''6 x
  
  function view'4 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) : Seq.seq t_T =
    [%#smodel'0] Slice64.view self.current
  
  meta "rewrite_def" function view'4
  
  let rec deref_mut (self_: MutBorrow.t t_Vec) (return' (x: MutBorrow.t (Slice64.slice t_T))) =
    {[@expl:deref_mut 'self_' type invariant] [%#svec'4] inv'7 self_}
    any
    [ return''0 (result: MutBorrow.t (Slice64.slice t_T)) -> {inv'9 result}
      {[%#svec'5] view'4 result = view'1 self_}
      {[%#svec'6] Slice64.view result.final = view self_.final}
      (! return' {result}) ]
  
  let rec swap (self_: MutBorrow.t (Slice64.slice t_T)) (i: UInt64.t) (j: UInt64.t) (return' (x: ())) =
    {[@expl:swap 'self_' type invariant] [%#sslice] inv'9 self_}
    {[@expl:swap requires #0] [%#sslice'0] UInt64.t'int i < Seq.length (view'4 self_)}
    {[@expl:swap requires #1] [%#sslice'1] UInt64.t'int j < Seq.length (view'4 self_)}
    any
    [ return''0 (result: ()) ->
    {[%#sslice'2] Permut.exchange (Slice64.view self_.final) (view'4 self_) (UInt64.t'int i) (UInt64.t'int j)}
      (! return' {result}) ]
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t (Slice64.slice t_T)) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (self: MutBorrow.t t_Vec) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'3
  
  predicate resolve'4 [@inline:trivial] (_0: MutBorrow.t t_Vec) = resolve'3 _0
  
  meta "rewrite_def" predicate resolve'4
  
  predicate sorted [#"selection_sort_generic.rs" 16 0 16 45] (s: Seq.seq t_DeepModelTy) =
    [%#sselection_sort_generic'17] sorted_range s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec selection_sort [#"selection_sort_generic.rs" 29 0 31 29] (v: MutBorrow.t t_Vec) (return' (x: ())) =
    {[@expl:selection_sort 'v' type invariant] [%#sselection_sort_generic'12] inv'7 v}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- [%#sselection_sort_generic] v'0 ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = len {v'0.current} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &_7 <- { t_Range__start = ([%#sselection_sort_generic'0] (0: UInt64.t)); t_Range__end = _8 } ] s1
      | s1 = into_iter {_7} (fun (_ret: t_Range) -> [ &iter <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = [ &iter_old <- [%#sselection_sort_generic'1] iter ] s1 | s1 = bb4 ]
    | bb4 = s0 [ s0 = [ &produced <- [%#sselection_sort_generic'1] Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb5 ]
    | bb5 = s0 [ s0 = [ &old_6_0 <- v'0 ] s1 | s1 = bb6 ]
    | bb6 = bb6'0
      [ bb6'0 = {[@expl:mut invariant] old_6_0.final = v'0.final}
        {[@expl:for invariant] [%#sselection_sort_generic'1] inv'5 produced}
        {[@expl:for invariant] [%#sselection_sort_generic'1] inv'4 iter}
        {[@expl:for invariant] [%#sselection_sort_generic'1] produces iter_old produced iter}
        {[@expl:loop invariant #0] [%#sselection_sort_generic'4] permutation_of (view'1 v'0) (view'3 old_v)}
        {[@expl:loop invariant #1] [%#sselection_sort_generic'3] sorted_range (deep_model'1 v'0) 0 (Seq.length produced)}
        {[@expl:loop invariant #2] [%#sselection_sort_generic'2] partition (deep_model'1 v'0) (Seq.length produced)}
        (! s0)
        [ s0 = bb7 ]
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_24 <- _ret ] [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_24.current} {MutBorrow.get_id _24}
              (fun (_ret: MutBorrow.t t_Range) -> [ &_23 <- _ret ] [ &_24 <- { _24 with current = _ret.final } ] s2)
          | s2 = next {_23} (fun (_ret: t_Option) -> [ &_22 <- _ret ] s3)
          | s3 = bb8 ]
        | bb8 = s0
          [ s0 = -{resolve'0 _24}- s1
          | s1 = any [ br0 -> {_22 = C_None} (! bb11) | br1 (x0: UInt64.t) -> {_22 = C_Some x0} (! bb12) ] ]
        | bb12 = s0
          [ s0 = v_Some {_22} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 = [ &_27 <- [%#sselection_sort_generic'5] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb13 ]
        | bb13 = s0
          [ s0 = [ &produced <- _27 ] s1
          | s1 = [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = [ &min <- i ] s3
          | s3 = UInt64.add {i} {[%#sselection_sort_generic'6] (1: UInt64.t)}
              (fun (_ret: UInt64.t) -> [ &_34 <- _ret ] s4)
          | s4 = len {v'0.current} (fun (_ret: UInt64.t) -> [ &_36 <- _ret ] s5)
          | s5 = bb14 ]
        | bb14 = s0
          [ s0 = [ &_33 <- { t_Range__start = _34; t_Range__end = _36 } ] s1
          | s1 = into_iter {_33} (fun (_ret: t_Range) -> [ &iter'0 <- _ret ] s2)
          | s2 = bb15 ]
        | bb15 = s0 [ s0 = [ &iter_old'0 <- [%#sselection_sort_generic'7] iter'0 ] s1 | s1 = bb16 ]
        | bb16 = s0 [ s0 = [ &produced'0 <- [%#sselection_sort_generic'7] Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb18 ]
        | bb18 = bb18'0
          [ bb18'0 = {[@expl:for invariant] [%#sselection_sort_generic'7] inv'5 produced'0}
            {[@expl:for invariant] [%#sselection_sort_generic'7] inv'4 iter'0}
            {[@expl:for invariant] [%#sselection_sort_generic'7] produces iter_old'0 produced'0 iter'0}
            {[@expl:loop invariant #0] [%#sselection_sort_generic'9] forall k: int. UInt64.t'int i <= k
                /\ k < Seq.length produced'0 + UInt64.t'int i + 1
              -> le_log (Seq.get (deep_model'1 v'0) (UInt64.t'int min)) (Seq.get (deep_model'1 v'0) k)}
            {[@expl:loop invariant #1] [%#sselection_sort_generic'8] UInt64.t'int i <= UInt64.t'int min
            /\ UInt64.t'int min < Seq.length produced'0 + UInt64.t'int i + 1}
            (! s0)
            [ s0 = bb19 ]
            [ bb19 = s0
              [ s0 = MutBorrow.borrow_mut <t_Range> {iter'0}
                  (fun (_ret: MutBorrow.t t_Range) -> [ &_50 <- _ret ] [ &iter'0 <- _ret.final ] s1)
              | s1 = MutBorrow.borrow_final <t_Range> {_50.current} {MutBorrow.get_id _50}
                  (fun (_ret: MutBorrow.t t_Range) -> [ &_49 <- _ret ] [ &_50 <- { _50 with current = _ret.final } ] s2)
              | s2 = next {_49} (fun (_ret: t_Option) -> [ &_48 <- _ret ] s3)
              | s3 = bb20 ]
            | bb20 = s0
              [ s0 = -{resolve'0 _50}- s1
              | s1 = any [ br0 -> {_48 = C_None} (! bb23) | br1 (x0: UInt64.t) -> {_48 = C_Some x0} (! bb24) ] ]
            | bb24 = s0
              [ s0 = v_Some {_48} (fun (r0: UInt64.t) -> [ &__creusot_proc_iter_elem'0 <- r0 ] s1)
              | s1 =
                [ &_53 <- [%#sselection_sort_generic'10] Seq.(++) produced'0 (Seq.singleton __creusot_proc_iter_elem'0) ]
                s2
              | s2 = bb25 ]
            | bb25 = s0
              [ s0 = [ &produced'0 <- _53 ] s1
              | s1 = [ &j <- __creusot_proc_iter_elem'0 ] s2
              | s2 = index {v'0.current} {j} (fun (_ret: t_T) -> [ &_58 <- _ret ] s3)
              | s3 = bb26 ]
            | bb26 = s0 [ s0 = index {v'0.current} {min} (fun (_ret: t_T) -> [ &_62 <- _ret ] s1) | s1 = bb27 ]
            | bb27 = s0 [ s0 = lt {_58} {_62} (fun (_ret: bool) -> [ &_56 <- _ret ] s1) | s1 = bb28 ]
            | bb28 = any [ br0 -> {_56 = false} (! bb18'0) | br1 -> {_56} (! bb29) ]
            | bb29 = s0 [ s0 = [ &min <- j ] s1 | s1 = bb18'0 ] ] ]
        | bb23 = s0
          [ s0 = {inv'2 v'0.current}
            MutBorrow.borrow_mut <t_Vec> {v'0.current}
              (fun (_ret: MutBorrow.t t_Vec) ->
                [ &_70 <- _ret ] -{inv'2 _ret.final}-
                [ &v'0 <- { v'0 with current = _ret.final } ] s1)
          | s1 = deref_mut {_70} (fun (_ret: MutBorrow.t (Slice64.slice t_T)) -> [ &_69 <- _ret ] s2)
          | s2 = bb32 ]
        | bb32 = s0
          [ s0 = {inv'8 _69.current}
            MutBorrow.borrow_final <Slice64.slice t_T> {_69.current} {MutBorrow.get_id _69}
              (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
                [ &_68 <- _ret ] -{inv'8 _ret.final}-
                [ &_69 <- { _69 with current = _ret.final } ] s1)
          | s1 = swap {_68} {i} {min} (fun (_ret: ()) -> [ &_67 <- _ret ] s2)
          | s2 = bb33 ]
        | bb33 = s0
          [ s0 = {[@expl:type invariant] inv'9 _69} s1
          | s1 = -{resolve'2 _69}- s2
          | s2 =
            {[@expl:assertion] [%#sselection_sort_generic'11] let i'0 = Seq.length produced in forall k1: int, k2: int. 0
                  <= k1
                /\ k1 < i'0 /\ i'0 <= k2 /\ k2 < Seq.length (deep_model'1 v'0)
              -> le_log (Seq.get (deep_model'1 v'0) k1) (Seq.get (deep_model'1 v'0) k2)}
            s3
          | s3 = bb6'0 ] ] ]
    | bb11 = s0 [ s0 = {[@expl:type invariant] inv'7 v'0} s1 | s1 = -{resolve'4 v'0}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v'0: MutBorrow.t t_Vec = v
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _7: t_Range = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _22: t_Option = Any.any_l ()
    | & _23: MutBorrow.t t_Range = Any.any_l ()
    | & _24: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _27: Seq.seq UInt64.t = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & min: UInt64.t = Any.any_l ()
    | & iter'0: t_Range = Any.any_l ()
    | & _33: t_Range = Any.any_l ()
    | & _34: UInt64.t = Any.any_l ()
    | & _36: UInt64.t = Any.any_l ()
    | & iter_old'0: t_Range = Any.any_l ()
    | & produced'0: Seq.seq UInt64.t = Any.any_l ()
    | & _48: t_Option = Any.any_l ()
    | & _49: MutBorrow.t t_Range = Any.any_l ()
    | & _50: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem'0: UInt64.t = Any.any_l ()
    | & _53: Seq.seq UInt64.t = Any.any_l ()
    | & j: UInt64.t = Any.any_l ()
    | & _56: bool = Any.any_l ()
    | & _58: t_T = Any.any_l ()
    | & _62: t_T = Any.any_l ()
    | & _67: () = Any.any_l ()
    | & _68: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _69: MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _70: MutBorrow.t t_Vec = Any.any_l ()
    | & old_6_0: MutBorrow.t t_Vec = Any.any_l () ])
    [ return''0 (result: ()) ->
    {[@expl:selection_sort ensures #0] [%#sselection_sort_generic'13] sorted (deep_model'0 v.final)}
      {[@expl:selection_sort ensures #1] [%#sselection_sort_generic'14] permutation_of (view v.final) (view'1 v)}
      (! return' {result}) ]
end
