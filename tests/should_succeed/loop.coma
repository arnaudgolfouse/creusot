module M_loop__f
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- (10: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {a}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &b <- _ret ] [ &a <- _ret.final ] s2)
      | s2 = [ &b <- { b with current = (5: Int32.t) } ] s3
      | s3 = -{resolve'0 b}- s4
      | s4 = bb2 ]
    | bb2 = bb2 [ bb2 = (! any [ br0 -> {false} (! bb2) | br1 -> {true} (! bb3) ]) ]
    | bb3 = return {_0} ]
    [ & _0: () = Any.any_l () | & a: Int32.t = Any.any_l () | & b: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
