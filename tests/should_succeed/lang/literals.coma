module M_literals__float_operation
  use creusot.float.Float32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec float_operation (return (x: Float32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (0.0: Float32.t) ] s1
      | s1 = Float32.add {x} {(0x1.020c40000000p0: Float32.t)} (fun (_ret: Float32.t) -> [ &_3 <- _ret ] s2)
      | s2 = [ &_2 <- Float32.eq _3 (2.0: Float32.t) ] s3
      | s3 = any [ br0 -> {_2 = false} (! bb2) | br1 -> {_2} (! bb1) ] ]
    | bb1 = s0
      [ s0 = Float32.sub {(3.0: Float32.t)} {(1.0: Float32.t)} (fun (_ret: Float32.t) -> [ &_0 <- _ret ] s1)
      | s1 = bb3 ]
    | bb2 = s0 [ s0 = [ &_0 <- (0.0: Float32.t) ] s1 | s1 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: Float32.t = Any.any_l ()
    | & x: Float32.t = Any.any_l ()
    | & _2: bool = Any.any_l ()
    | & _3: Float32.t = Any.any_l () ]) [ return (result: Float32.t) -> (! return {result}) ]
end
