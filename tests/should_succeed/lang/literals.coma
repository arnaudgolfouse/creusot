module M_literals__float_operation [#"literals.rs" 3 0 3 31]
  let%span sliterals = "literals.rs" 4 17 4 20
  let%span sliterals'0 = "literals.rs" 6 11 6 17
  let%span sliterals'1 = "literals.rs" 6 21 6 24
  let%span sliterals'2 = "literals.rs" 6 33 6 36
  let%span sliterals'3 = "literals.rs" 6 27 6 30
  let%span sliterals'4 = "literals.rs" 6 46 6 49
  
  use creusot.float.Float32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec float_operation[#"literals.rs" 3 0 3 31] (return'  (x:Float32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sliterals] (0.0: Float32.t) ] s1
      | s1 = Float32.add {x} {[%#sliterals'0] (0x1.020c40000000p0: Float32.t)}
          (fun (_ret:Float32.t) ->  [ &_3 <- _ret ] s2)
      | s2 =  [ &_2 <- Float32.eq _3 ([%#sliterals'1] (2.0: Float32.t)) ] s3
      | s3 = any [ br0 -> {_2 = false} (! bb2) | br1 -> {_2} (! bb1) ]  ]
    
    | bb1 = s0
      [ s0 = Float32.sub {[%#sliterals'3] (3.0: Float32.t)} {[%#sliterals'2] (1.0: Float32.t)}
          (fun (_ret:Float32.t) ->  [ &_0 <- _ret ] s1)
      | s1 = bb3 ]
    
    | bb2 = s0 [ s0 =  [ &_0 <- [%#sliterals'4] (0.0: Float32.t) ] s1 | s1 = bb3 ] 
    | bb3 = return''0 {_0} ]
    
    [ & _0: Float32.t = Any.any_l ()
    | & x: Float32.t = Any.any_l ()
    | & _2: bool = Any.any_l ()
    | & _3: Float32.t = Any.any_l () ]
    ) [ return''0 (result:Float32.t)-> (! return' {result}) ] 
end
