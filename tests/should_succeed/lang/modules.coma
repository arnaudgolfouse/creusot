module M_modules__nested__qyi3235025002392720358__resolve_coherence [#"modules.rs" 7 13 7 20] (* <nested::Nested as creusot_contracts::Resolve> *)
  let%span smodules = "modules.rs" 7 13 7 20
  
  type t_Nested  =
    | C_Test
  
  predicate structural_resolve (_0: t_Nested) =
    match _0 with
      | C_Test -> true
      end
  
  predicate resolve [#"modules.rs" 7 13 7 20] (self: t_Nested) =
    [%#smodules] match self with
      | C_Test -> true
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self  : t_Nested
  
  function resolve_coherence [#"modules.rs" 7 13 7 20] (self'0: t_Nested) : ()
  
  goal vc_resolve_coherence: ([%#smodules] structural_resolve self)
   -> ([@expl:resolve_coherence ensures] [%#smodules] resolve self)
end
module M_modules__nested__inner_func [#"modules.rs" 13 4 13 31]
  let%span smodules = "modules.rs" 15 8 15 12
  let%span smodules'0 = "modules.rs" 12 14 12 28
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inner_func[#"modules.rs" 13 4 13 31] (return'  (x:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#smodules] true ] s1 | s1 = return''0 {_0} ]  ]
     [ & _0: bool = Any.any_l () ] )
    [ return''0 (result:bool)-> {[@expl:inner_func ensures] [%#smodules'0] result = true} (! return' {result}) ]

end
module M_modules__nested__further__another [#"modules.rs" 19 8 19 32]
  let%span smodules = "modules.rs" 20 12 20 17
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec another[#"modules.rs" 19 8 19 32] (return'  (x:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#smodules] false ] s1 | s1 = return''0 {_0} ]  ]
     [ & _0: bool = Any.any_l () ] ) [ return''0 (result:bool)-> (! return' {result}) ] 
end
module M_modules__f [#"modules.rs" 25 0 25 10]
  let%span smodules = "modules.rs" 12 14 12 28
  
  use creusot.prelude.Any
  
  let rec inner_func (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#smodules] result = true} (! return' {result}) ]
  
  
  let rec another (return'  (x:bool))= any [ return''0 (result:bool)-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f[#"modules.rs" 25 0 25 10] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = inner_func (fun (_ret:bool) ->  [ &_1 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = another (fun (_ret:bool) ->  [ &_2 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = return''0 {_0} ]
     [ & _0: () = Any.any_l () | & _1: bool = Any.any_l () | & _2: bool = Any.any_l () ] )
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_modules__nested__qyi3235025002392720358__resolve_coherence__refines [#"modules.rs" 7 13 7 20] (* <nested::Nested as creusot_contracts::Resolve> *)
  let%span smodules = "modules.rs" 7 13 7 20
  
  type t_Nested  =
    | C_Test
  
  predicate structural_resolve (_0: t_Nested) =
    match _0 with
      | C_Test -> true
      end
  
  predicate inv (_0: t_Nested)
  
  axiom inv_axiom [@rewrite]: forall x: t_Nested [inv x]. inv x = true
  
  predicate resolve [#"modules.rs" 7 13 7 20] (self: t_Nested) =
    [%#smodules] match self with
      | C_Test -> true
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#smodules] forall self: t_Nested. structural_resolve self /\ inv self
   -> structural_resolve self /\ (forall result: (). resolve self  -> resolve self)
end
