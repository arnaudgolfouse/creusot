module M_modules__nested__qyi3235025002392720358__resolve_coherence (* <nested::Nested as creusot_contracts::Resolve> *)
  type t_Nested = C_Test
  
  predicate structural_resolve (_0: t_Nested) =
    match _0 with
      | C_Test -> true
      end
  
  predicate resolve (self: t_Nested) =
    match self with
      | C_Test -> true
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant self : t_Nested
  
  function resolve_coherence (self'0: t_Nested) : ()
  
  goal vc_resolve_coherence: structural_resolve self -> ([@expl:resolve_coherence ensures] resolve self)
end
module M_modules__nested__inner_func
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inner_func (return' (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = return''0 {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return''0 (result: bool) -> {[@expl:inner_func ensures] result = true} (! return' {result}) ]
end
module M_modules__nested__further__another
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec another (return' (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- false ] s1 | s1 = return''0 {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return''0 (result: bool) -> (! return' {result}) ]
end
module M_modules__f
  use creusot.prelude.Any
  
  let rec inner_func (return' (x: bool)) = any [ return''0 (result: bool) -> {result = true} (! return' {result}) ]
  
  let rec another (return' (x: bool)) = any [ return''0 (result: bool) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = inner_func (fun (_ret: bool) -> [ &_1 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = another (fun (_ret: bool) -> [ &_2 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: () = Any.any_l () | & _1: bool = Any.any_l () | & _2: bool = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_modules__nested__qyi3235025002392720358__resolve_coherence__refines (* <nested::Nested as creusot_contracts::Resolve> *)
  type t_Nested = C_Test
  
  predicate structural_resolve (_0: t_Nested) =
    match _0 with
      | C_Test -> true
      end
  
  predicate inv (_0: t_Nested)
  
  axiom inv_axiom [@rewrite]: forall x: t_Nested [inv x]. inv x = true
  
  predicate resolve (self: t_Nested) =
    match self with
      | C_Test -> true
      end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Nested. structural_resolve self /\ inv self
      -> structural_resolve self /\ (forall result: (). resolve self -> resolve self)
end
