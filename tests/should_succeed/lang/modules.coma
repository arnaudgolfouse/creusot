module M_nested__inner_func
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec inner_func (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = return {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return (result: bool) -> {[@expl:inner_func ensures] result = true} (! return {result}) ]
end
module M_nested__further__another
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec another (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- false ] s1 | s1 = return {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return (result: bool) -> (! return {result}) ]
end
module M_f
  use creusot.prelude.Any
  
  let rec inner_func (return (x: bool)) = any [ return (result: bool) -> {result = true} (! return {result}) ]
  
  let rec another (return (x: bool)) = any [ return (result: bool) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = inner_func (fun (_ret: bool) -> [ &_1 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = another (fun (_ret: bool) -> [ &_2 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return {_0} ] [ & _0: () = Any.any_l () | & _1: bool = Any.any_l () | & _2: bool = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
