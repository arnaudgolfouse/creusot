module M_promoted_constants__promoted_none [#"promoted_constants.rs" 3 0 3 22]
  let%span spromoted_constants = "promoted_constants.rs" 4 19 4 20
  let%span spromoted_constants'0 = "promoted_constants.rs" 6 17 6 19
  let%span spromoted_constants'1 = "promoted_constants.rs" 6 28 6 30
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Option  =
    | C_None
    | C_Some Int32.t
  
  let rec promoted1__promoted_none (return'  (x:t_Option))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some ([%#spromoted_constants'0] (42: Int32.t)) ] s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return''0 {_0} ]
     ]
     [ & _0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ] 
    [ return''0 (result:t_Option)-> return' {result} ]
  
  
  let rec promoted0__promoted_none (return'  (x:t_Option))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some ([%#spromoted_constants'1] (43: Int32.t)) ] s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return''0 {_0} ]
     ]
     [ & _0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ] 
    [ return''0 (result:t_Option)-> return' {result} ]
  
  
  type tuple  =
    { _p0: t_Option; _p1: t_Option }
  
  meta "compute_max_steps" 1000000
  
  let rec promoted_none[#"promoted_constants.rs" 3 0 3 22] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_ix <- C_Some ([%#spromoted_constants] (0: Int32.t)) ] s1
      | s1 = promoted1__promoted_none (fun (pr1:t_Option) ->  [ &_11 <- pr1 ] s2)
      | s2 = promoted0__promoted_none (fun (pr0:t_Option) ->  [ &_10 <- pr0 ] s3)
      | s3 =  [ &_2 <- { _p0 = _11; _p1 = _10 } ] s4
      | s4 = any [ br0 -> {_2._p0 = C_None} (! bb2) | br1 (x0:Int32.t)-> {_2._p0 = C_Some x0} (! bb1) ]  ]
    
    | bb2 = any [ br0 -> {_2._p1 = C_None} (! bb4) | br1 (x0:Int32.t)-> {_2._p1 = C_Some x0} (! bb1) ] 
    | bb1 = return''0 {_0}
    | bb4 = {false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & _ix: t_Option = Any.any_l ()
    | & _2: tuple = Any.any_l ()
    | & _10: t_Option = Any.any_l ()
    | & _11: t_Option = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_promoted_constants__promoted_int [#"promoted_constants.rs" 12 0 12 21]
  let%span spromoted_constants = "promoted_constants.rs" 15 14 15 16
  let%span spromoted_constants'0 = "promoted_constants.rs" 13 19 13 20
  let%span spromoted_constants'1 = "promoted_constants.rs" 13 15 13 16
  let%span spromoted_constants'2 = "promoted_constants.rs" 13 23 13 25
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec promoted0__promoted_int (return'  (x:Int32.t))= bb0
    [ bb0 = s0
      [ s0 = Int32.add {[%#spromoted_constants'1] (1: Int32.t)} {[%#spromoted_constants'0] (5: Int32.t)}
          (fun (_ret:Int32.t) ->  [ &_2 <- _ret ] s1)
      | s1 = Int32.add {_2} {[%#spromoted_constants'2] (10: Int32.t)} (fun (_ret:Int32.t) ->  [ &_1 <- _ret ] s2)
      | s2 =  [ &_0 <- _1 ] s3
      | s3 = return''0 {_0} ]
     ]
     [ & _0: Int32.t = Any.any_l () | & _1: Int32.t = Any.any_l () | & _2: Int32.t = Any.any_l () ] 
    [ return''0 (result:Int32.t)-> return' {result} ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec promoted_int[#"promoted_constants.rs" 12 0 12 21] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted0__promoted_int (fun (pr0:Int32.t) ->  [ &_9 <- pr0 ] s1)
      | s1 =  [ &ix <- _9 ] s2
      | s2 =  [ &_4 <- ix <> ([%#spromoted_constants] (16: Int32.t)) ] s3
      | s3 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
    
    | bb1 = {false} any
    | bb2 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & ix: Int32.t = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _9: Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_promoted_constants__string [#"promoted_constants.rs" 20 0 20 25]
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_String  =
    { t_String__vec: t_Vec }
  
  meta "compute_max_steps" 1000000
  
  let rec string'[#"promoted_constants.rs" 20 0 20 25] (_s:t_String) (return'  (x:()))= (! bb0
    [ bb0 = bb1 | bb1 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () ]  [ return''0 (result:())-> (! return' {result}) ] 
end
module M_promoted_constants__str [#"promoted_constants.rs" 22 0 22 12]
  let%span spromoted_constants = "promoted_constants.rs" 23 13 23 115
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec str[#"promoted_constants.rs" 22 0 22 12] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_s <- [%#spromoted_constants] "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" ]
        
        s1
      | s1 = return''0 {_0} ]
     ]
    ) [ & _0: () = Any.any_l () | & _s: string = Any.any_l () ]  [ return''0 (result:())-> (! return' {result}) ] 
end
