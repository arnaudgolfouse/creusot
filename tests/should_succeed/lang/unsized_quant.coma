module M_l
  use creusot.slice.Slice64
  use creusot.int.Int32
  use seq.Seq
  use map.Map
  use mach.int.Int
  
  function index_Mapping_slice_i32_Int [@inline:trivial] (self: Map.map (Slice64.slice Int32.t) int) (a: Slice64.slice Int32.t) : int
   = Map.get self a
  
  meta "rewrite_def" function index_Mapping_slice_i32_Int
  
  predicate f =
    let len = fun (x: Slice64.slice Int32.t) -> Seq.length (Slice64.view x) in forall x: Slice64.slice Int32.t, y: Slice64.slice Int32.t. index_Mapping_slice_i32_Int len x
        + index_Mapping_slice_i32_Int len y
      >= 0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  function l : ()
  
  goal vc_l: [@expl:l ensures] f
end
