module M_branch_borrow_2__f [#"branch_borrow_2.rs" 3 0 3 10]
  let%span sbranch_borrow_2 = "branch_borrow_2.rs" 4 16 4 18
  let%span sbranch_borrow_2'0 = "branch_borrow_2.rs" 5 16 5 18
  let%span sbranch_borrow_2'1 = "branch_borrow_2.rs" 6 16 6 18
  let%span sbranch_borrow_2'2 = "branch_borrow_2.rs" 13 10 13 11
  let%span sbranch_borrow_2'3 = "branch_borrow_2.rs" 23 17 23 18
  let%span sbranch_borrow_2'4 = "branch_borrow_2.rs" 19 17 19 18
  let%span sbranch_borrow_2'5 = "branch_borrow_2.rs" 15 17 15 18
  let%span sbranch_borrow_2'6 = "branch_borrow_2.rs" 28 9 28 10
  let%span sbranch_borrow_2'7 = "branch_borrow_2.rs" 30 17 30 18
  let%span sbranch_borrow_2'8 = "branch_borrow_2.rs" 30 4 30 19
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve (self : MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t Int32.t) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec f[#"branch_borrow_2.rs" 3 0 3 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#sbranch_borrow_2] (10 : Int32.t) ] s1
      | s1 =  [ &b <- [%#sbranch_borrow_2'0] (10 : Int32.t) ] s2
      | s2 =  [ &c <- [%#sbranch_borrow_2'1] (10 : Int32.t) ] s3
      | s3 = MutBorrow.borrow_mut <Int32.t> {a}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &x <- _ret ]  [ &a <- _ret.final ] s4)
      | s4 = MutBorrow.borrow_mut <Int32.t> {b}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &y <- _ret ]  [ &b <- _ret.final ] s5)
      | s5 = MutBorrow.borrow_mut <Int32.t> {c}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &z <- _ret ]  [ &c <- _ret.final ] s6)
      | s6 = any
        [ br0 -> {([%#sbranch_borrow_2'2] (3 : Int32.t)) = (1 : Int32.t)} (! bb2)
        | br1 -> {([%#sbranch_borrow_2'2] (3 : Int32.t)) = (2 : Int32.t)} (! bb3)
        | default -> (! bb1) ]
       ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 y}- s1
      | s1 = -{resolve'0 x}- s2
      | s2 =  [ &z <- { z with current = ([%#sbranch_borrow_2'3] (8 : Int32.t)) } ] s3
      | s3 = MutBorrow.borrow_final <Int32.t> {z.current} {MutBorrow.get_id z}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_12 <- _ret ]  [ &z <- { z with current = _ret.final } ] s4)
      | s4 =  [ &w <- _12 ] s5
      | s5 = bb6 ]
    
    | bb3 = s0 [ s0 = -{resolve'0 z}- s1 | s1 = -{resolve'0 x}- s2 | s2 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &y <- { y with current = ([%#sbranch_borrow_2'4] (7 : Int32.t)) } ] s1
      | s1 = MutBorrow.borrow_final <Int32.t> {y.current} {MutBorrow.get_id y}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_11 <- _ret ]  [ &y <- { y with current = _ret.final } ] s2)
      | s2 =  [ &w <- _11 ] s3
      | s3 = bb6 ]
    
    | bb2 = s0 [ s0 = -{resolve'0 z}- s1 | s1 = -{resolve'0 y}- s2 | s2 = bb5 ] 
    | bb5 = s0
      [ s0 =  [ &x <- { x with current = ([%#sbranch_borrow_2'5] (6 : Int32.t)) } ] s1
      | s1 =  [ &w <- x ] s2
      | s2 = bb6 ]
    
    | bb6 = s0
      [ s0 =  [ &w <- { w with current = ([%#sbranch_borrow_2'6] (5 : Int32.t)) } ] s1
      | s1 = -{resolve'0 w}- s2
      | s2 = -{resolve'0 z}- s3
      | s3 = -{resolve'0 y}- s4
      | s4 =  [ &_14 <- c = ([%#sbranch_borrow_2'7] (5 : Int32.t)) ] s5
      | s5 = any [ br0 -> {_14 = false} (! bb8) | br1 -> {_14} (! bb7) ]  ]
    
    | bb7 = return''0 {_0}
    | bb8 = {[%#sbranch_borrow_2'8] false} any ]
    )
    [ & _0 : () = Any.any_l ()
    | & a : Int32.t = Any.any_l ()
    | & b : Int32.t = Any.any_l ()
    | & c : Int32.t = Any.any_l ()
    | & x : MutBorrow.t Int32.t = Any.any_l ()
    | & y : MutBorrow.t Int32.t = Any.any_l ()
    | & z : MutBorrow.t Int32.t = Any.any_l ()
    | & w : MutBorrow.t Int32.t = Any.any_l ()
    | & _11 : MutBorrow.t Int32.t = Any.any_l ()
    | & _12 : MutBorrow.t Int32.t = Any.any_l ()
    | & _14 : bool = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_branch_borrow_2__g [#"branch_borrow_2.rs" 35 0 35 10]
  let%span sbranch_borrow_2 = "branch_borrow_2.rs" 36 23 36 25
  let%span sbranch_borrow_2'0 = "branch_borrow_2.rs" 36 34 36 35
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MyInt  =
    { t_MyInt__0: UInt64.t }
  
  type tuple  =
    { _p0: t_MyInt; _p1: t_MyInt }
  
  predicate resolve (self : MutBorrow.t t_MyInt) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t t_MyInt) =
    resolve _0
  
  predicate resolve'1 (self : MutBorrow.t tuple) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0 : MutBorrow.t tuple) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec g[#"branch_borrow_2.rs" 35 0 35 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- { t_MyInt__0 = ([%#sbranch_borrow_2] (10 : UInt64.t)) } ] s1
      | s1 =  [ &_3 <- { t_MyInt__0 = ([%#sbranch_borrow_2'0] (5 : UInt64.t)) } ] s2
      | s2 =  [ &a <- { _p0 = _2; _p1 = _3 } ] s3
      | s3 = MutBorrow.borrow_mut <tuple> {a} (fun (_ret:MutBorrow.t tuple) ->  [ &b <- _ret ]  [ &a <- _ret.final ] s4)
      | s4 = MutBorrow.borrow_final <t_MyInt> {(b.current)._p1} {MutBorrow.inherit_id (MutBorrow.get_id b) 2}
          (fun (_ret:MutBorrow.t t_MyInt) ->
             [ &c <- _ret ] 
             [ &b <- { b with current = { b.current with _p1 = _ret.final } } ] 
            s5)
      | s5 = MutBorrow.borrow_final <t_MyInt> {(b.current)._p0} {MutBorrow.inherit_id (MutBorrow.get_id b) 1}
          (fun (_ret:MutBorrow.t t_MyInt) ->
             [ &d <- _ret ] 
             [ &b <- { b with current = { b.current with _p0 = _ret.final } } ] 
            s6)
      | s6 = -{resolve'0 c}- s7
      | s7 = -{resolve'0 d}- s8
      | s8 = -{resolve'2 b}- s9
      | s9 = return''0 {_0} ]
     ]
    )
    [ & _0 : () = Any.any_l ()
    | & a : tuple = Any.any_l ()
    | & _2 : t_MyInt = Any.any_l ()
    | & _3 : t_MyInt = Any.any_l ()
    | & b : MutBorrow.t tuple = Any.any_l ()
    | & c : MutBorrow.t t_MyInt = Any.any_l ()
    | & d : MutBorrow.t t_MyInt = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_branch_borrow_2__h [#"branch_borrow_2.rs" 45 0 45 10]
  let%span sbranch_borrow_2 = "branch_borrow_2.rs" 46 16 46 18
  let%span sbranch_borrow_2'0 = "branch_borrow_2.rs" 47 16 47 18
  let%span sbranch_borrow_2'1 = "branch_borrow_2.rs" 52 7 52 11
  let%span sbranch_borrow_2'2 = "branch_borrow_2.rs" 53 13 53 14
  let%span sbranch_borrow_2'3 = "branch_borrow_2.rs" 56 13 56 14
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve (self : MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t Int32.t) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec h[#"branch_borrow_2.rs" 45 0 45 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#sbranch_borrow_2] (10 : Int32.t) ] s1
      | s1 =  [ &b <- [%#sbranch_borrow_2'0] (10 : Int32.t) ] s2
      | s2 = MutBorrow.borrow_mut <Int32.t> {a}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &x <- _ret ]  [ &a <- _ret.final ] s3)
      | s3 = MutBorrow.borrow_mut <Int32.t> {b}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &y <- _ret ]  [ &b <- _ret.final ] s4)
      | s4 = any [ br0 -> {false} (! bb2) | br1 -> {true} (! bb1) ]  ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 y}- s1
      | s1 =  [ &x <- { x with current = ([%#sbranch_borrow_2'2] (5 : Int32.t)) } ] s2
      | s2 =  [ &w <- x ] s3
      | s3 = bb3 ]
    
    | bb2 = s0
      [ s0 = -{resolve'0 x}- s1
      | s1 =  [ &y <- { y with current = ([%#sbranch_borrow_2'3] (6 : Int32.t)) } ] s2
      | s2 = MutBorrow.borrow_final <Int32.t> {y.current} {MutBorrow.get_id y}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_9 <- _ret ]  [ &y <- { y with current = _ret.final } ] s3)
      | s3 =  [ &w <- _9 ] s4
      | s4 = bb3 ]
    
    | bb3 = s0 [ s0 = -{resolve'0 w}- s1 | s1 = -{resolve'0 y}- s2 | s2 = return''0 {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & a : Int32.t = Any.any_l ()
    | & b : Int32.t = Any.any_l ()
    | & x : MutBorrow.t Int32.t = Any.any_l ()
    | & y : MutBorrow.t Int32.t = Any.any_l ()
    | & w : MutBorrow.t Int32.t = Any.any_l ()
    | & _9 : MutBorrow.t Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
