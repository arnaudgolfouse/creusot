module M_size_of__f [#"size_of.rs" 4 0 4 10]
  let%span ssize_of = "size_of.rs" 5 18 5 46
  let%span ssize_of'0 = "size_of.rs" 6 18 6 46
  let%span ssize_of'1 = "size_of.rs" 7 18 7 44
  let%span ssize_of'2 = "size_of.rs" 8 18 8 45
  let%span ssize_of'3 = "size_of.rs" 9 18 9 44
  let%span ssize_of'4 = "size_of.rs" 10 18 10 51
  let%span ssize_of'5 = "size_of.rs" 11 18 11 49
  let%span smem = "../../../creusot-contracts/src/std/mem.rs" 66 10 66 21
  
  use mach.int.Int
  use creusot.prelude.Any
  
  constant size_of_bool: int = 1
  
  axiom size_of_bool_spec: [%#smem] 0 <= size_of_bool
  
  constant size_of_char: int = 4
  
  axiom size_of_char_spec: [%#smem] 0 <= size_of_char
  
  constant size_of_u8: int = 1
  
  axiom size_of_u8_spec: [%#smem] 0 <= size_of_u8
  
  constant size_of_u64: int = 8
  
  axiom size_of_u64_spec: [%#smem] 0 <= size_of_u64
  
  constant size_of_unit: int = 0
  
  axiom size_of_unit_spec: [%#smem] 0 <= size_of_unit
  
  constant size_of_array_u32_5: int = 20
  
  axiom size_of_array_u32_5_spec: [%#smem] 0 <= size_of_array_u32_5
  
  constant size_of_array_unit_5: int = 0
  
  axiom size_of_array_unit_5_spec: [%#smem] 0 <= size_of_array_unit_5
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f[#"size_of.rs" 4 0 4 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#ssize_of] size_of_bool = 1} s1
      | s1 = {[@expl:assertion] [%#ssize_of'0] size_of_char = 4} s2
      | s2 = {[@expl:assertion] [%#ssize_of'1] size_of_u8 = 1} s3
      | s3 = {[@expl:assertion] [%#ssize_of'2] size_of_u64 = 8} s4
      | s4 = {[@expl:assertion] [%#ssize_of'3] size_of_unit = 0} s5
      | s5 = {[@expl:assertion] [%#ssize_of'4] size_of_array_u32_5 = 20} s6
      | s6 = {[@expl:assertion] [%#ssize_of'5] size_of_array_unit_5 = 0} s7
      | s7 = return''0 {_0} ]
     ]
    ) [ & _0: () = Any.any_l () ]  [ return''0 (result:())-> (! return' {result}) ] 
end
module M_size_of__g [#"size_of.rs" 14 0 14 13]
  let%span ssize_of = "size_of.rs" 16 18 16 49
  let%span ssize_of'0 = "size_of.rs" 17 18 17 67
  let%span ssize_of'1 = "size_of.rs" 18 18 18 73
  let%span ssize_of'2 = "size_of.rs" 19 18 19 71
  let%span ssize_of'3 = "size_of.rs" 20 18 20 75
  let%span ssize_of'4 = "size_of.rs" 21 18 21 79
  let%span ssize_of'5 = "size_of.rs" 22 18 22 71
  let%span ssize_of'6 = "size_of.rs" 23 18 23 48
  let%span smem = "../../../creusot-contracts/src/std/mem.rs" 36 22 36 53
  let%span smem'0 = "../../../creusot-contracts/src/std/mem.rs" 66 10 66 21
  
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  constant size_of_T  : int
  
  axiom size_of_T_spec: [%#smem'0] 0 <= size_of_T
  
  constant size_of_array_T_2: int = size_of_T * 2
  
  axiom size_of_array_T_2_spec: [%#smem'0] 0 <= size_of_array_T_2
  
  let rec size_of (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#smem] UInt64.t'int result = size_of_array_T_2} (! return' {result}) ]
  
  
  constant size_of_ref_T: int = 8
  
  axiom size_of_ref_T_spec: [%#smem'0] 0 <= size_of_ref_T
  
  constant size_of_usize: int = 8
  
  axiom size_of_usize_spec: [%#smem'0] 0 <= size_of_usize
  
  constant size_of_ptr_T: int = 8
  
  axiom size_of_ptr_T_spec: [%#smem'0] 0 <= size_of_ptr_T
  
  constant size_of_Box_T_Global: int = 8
  
  axiom size_of_Box_T_Global_spec: [%#smem'0] 0 <= size_of_Box_T_Global
  
  constant size_of_Option_ref_T: int = 8
  
  axiom size_of_Option_ref_T_spec: [%#smem'0] 0 <= size_of_Option_ref_T
  
  constant size_of_Option_Box_T_Global: int = 8
  
  axiom size_of_Option_Box_T_Global_spec: [%#smem'0] 0 <= size_of_Option_Box_T_Global
  
  constant size_of_array_T_5: int = size_of_T * 5
  
  axiom size_of_array_T_5_spec: [%#smem'0] 0 <= size_of_array_T_5
  
  constant size_of_array_T_0: int = size_of_T * 0
  
  axiom size_of_array_T_0_spec: [%#smem'0] 0 <= size_of_array_T_0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g[#"size_of.rs" 14 0 14 13] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = size_of (fun (_ret:UInt64.t) ->  [ &t2 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#ssize_of] UInt64.t'int t2 = 2 * size_of_T} s1
      | s1 = {[@expl:assertion] [%#ssize_of'0] size_of_ref_T = size_of_usize} s2
      | s2 = {[@expl:assertion] [%#ssize_of'1] size_of_ptr_T = size_of_usize} s3
      | s3 = {[@expl:assertion] [%#ssize_of'2] size_of_Box_T_Global = size_of_usize} s4
      | s4 = {[@expl:assertion] [%#ssize_of'3] size_of_Option_ref_T = size_of_usize} s5
      | s5 = {[@expl:assertion] [%#ssize_of'4] size_of_Option_Box_T_Global = size_of_usize} s6
      | s6 = {[@expl:assertion] [%#ssize_of'5] size_of_array_T_5 = 5 * size_of_T} s7
      | s7 = {[@expl:assertion] [%#ssize_of'6] size_of_array_T_0 = 0} s8
      | s8 = return''0 {_0} ]
     ]
    ) [ & _0: () = Any.any_l () | & t2: UInt64.t = Any.any_l () ]  [ return''0 (result:())-> (! return' {result}) ] 
end
