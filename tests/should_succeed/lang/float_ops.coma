module M_float_ops__eq [#"float_ops.rs" 8 0 8 19]
  let%span sfloat_ops = "float_ops.rs" 9 11 9 14
  let%span sfloat_ops'0 = "float_ops.rs" 9 4 9 7
  let%span sfloat_ops'1 = "float_ops.rs" 7 10 7 25
  
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec eq[#"float_ops.rs" 8 0 8 19] (return'  (x:bool))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- Float64.eq ([%#sfloat_ops'0] (1.0: Float64.t)) ([%#sfloat_ops] (2.0: Float64.t)) ] s1
      | s1 = return''0 {_0} ]
     ]
     [ & _0: bool = Any.any_l () ] )
    [ return''0 (result:bool)-> {[@expl:eq ensures] [%#sfloat_ops'1] result = false} (! return' {result}) ]

end
module M_float_ops__lt [#"float_ops.rs" 13 0 13 19]
  let%span sfloat_ops = "float_ops.rs" 14 10 14 13
  let%span sfloat_ops'0 = "float_ops.rs" 14 4 14 7
  let%span sfloat_ops'1 = "float_ops.rs" 12 10 12 24
  
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec lt[#"float_ops.rs" 13 0 13 19] (return'  (x:bool))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- Float64.lt ([%#sfloat_ops'0] (1.0: Float64.t)) ([%#sfloat_ops] (2.0: Float64.t)) ] s1
      | s1 = return''0 {_0} ]
     ]
     [ & _0: bool = Any.any_l () ] )
    [ return''0 (result:bool)-> {[@expl:lt ensures] [%#sfloat_ops'1] result = true} (! return' {result}) ]

end
module M_float_ops__le [#"float_ops.rs" 18 0 18 19]
  let%span sfloat_ops = "float_ops.rs" 19 11 19 14
  let%span sfloat_ops'0 = "float_ops.rs" 19 4 19 7
  let%span sfloat_ops'1 = "float_ops.rs" 17 10 17 24
  
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec le[#"float_ops.rs" 18 0 18 19] (return'  (x:bool))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- Float64.le ([%#sfloat_ops'0] (1.0: Float64.t)) ([%#sfloat_ops] (2.0: Float64.t)) ] s1
      | s1 = return''0 {_0} ]
     ]
     [ & _0: bool = Any.any_l () ] )
    [ return''0 (result:bool)-> {[@expl:le ensures] [%#sfloat_ops'1] result = true} (! return' {result}) ]

end
module M_float_ops__gt [#"float_ops.rs" 23 0 23 19]
  let%span sfloat_ops = "float_ops.rs" 24 10 24 13
  let%span sfloat_ops'0 = "float_ops.rs" 24 4 24 7
  let%span sfloat_ops'1 = "float_ops.rs" 22 10 22 24
  
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec gt[#"float_ops.rs" 23 0 23 19] (return'  (x:bool))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- Float64.gt ([%#sfloat_ops'0] (2.0: Float64.t)) ([%#sfloat_ops] (1.0: Float64.t)) ] s1
      | s1 = return''0 {_0} ]
     ]
     [ & _0: bool = Any.any_l () ] )
    [ return''0 (result:bool)-> {[@expl:gt ensures] [%#sfloat_ops'1] result = true} (! return' {result}) ]

end
module M_float_ops__ge [#"float_ops.rs" 28 0 28 19]
  let%span sfloat_ops = "float_ops.rs" 29 11 29 14
  let%span sfloat_ops'0 = "float_ops.rs" 29 4 29 7
  let%span sfloat_ops'1 = "float_ops.rs" 27 10 27 24
  
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ge[#"float_ops.rs" 28 0 28 19] (return'  (x:bool))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- Float64.ge ([%#sfloat_ops'0] (2.0: Float64.t)) ([%#sfloat_ops] (1.0: Float64.t)) ] s1
      | s1 = return''0 {_0} ]
     ]
     [ & _0: bool = Any.any_l () ] )
    [ return''0 (result:bool)-> {[@expl:ge ensures] [%#sfloat_ops'1] result = true} (! return' {result}) ]

end
module M_float_ops__neg [#"float_ops.rs" 33 0 33 20]
  let%span sfloat_ops = "float_ops.rs" 34 12 34 15
  let%span sfloat_ops'0 = "float_ops.rs" 34 4 34 8
  let%span sfloat_ops'1 = "float_ops.rs" 32 10 32 24
  
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec neg[#"float_ops.rs" 33 0 33 20] (return'  (x:bool))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- Float64.le ([%#sfloat_ops'0] (-2.0: Float64.t)) ([%#sfloat_ops] (1.0: Float64.t)) ] s1
      | s1 = return''0 {_0} ]
     ]
     [ & _0: bool = Any.any_l () ] )
    [ return''0 (result:bool)-> {[@expl:neg ensures] [%#sfloat_ops'1] result = true} (! return' {result}) ]

end
