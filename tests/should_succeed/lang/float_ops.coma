module M_eq
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec eq (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- Float64.eq (1.0: Float64.t) (2.0: Float64.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () ]) [ return (result: bool) -> {[@expl:eq ensures] result = false} (! return {result}) ]
end
module M_lt
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec lt (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- Float64.lt (1.0: Float64.t) (2.0: Float64.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () ]) [ return (result: bool) -> {[@expl:lt ensures] result = true} (! return {result}) ]
end
module M_le
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec le (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- Float64.le (1.0: Float64.t) (2.0: Float64.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () ]) [ return (result: bool) -> {[@expl:le ensures] result = true} (! return {result}) ]
end
module M_gt
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec gt (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- Float64.gt (2.0: Float64.t) (1.0: Float64.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () ]) [ return (result: bool) -> {[@expl:gt ensures] result = true} (! return {result}) ]
end
module M_ge
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ge (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- Float64.ge (2.0: Float64.t) (1.0: Float64.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () ]) [ return (result: bool) -> {[@expl:ge ensures] result = true} (! return {result}) ]
end
module M_neg
  use creusot.float.Float64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec neg (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- Float64.le (-2.0: Float64.t) (1.0: Float64.t) ] s1 | s1 = return {_0} ] ]
    [ & _0: bool = Any.any_l () ]) [ return (result: bool) -> {[@expl:neg ensures] result = true} (! return {result}) ]
end
