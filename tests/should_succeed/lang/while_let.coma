module M_while_let__f
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Option = C_None | C_Some Int32.t
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Option) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_Option) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- C_Some (10: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <t_Option> {a}
          (fun (_ret: MutBorrow.t t_Option) -> [ &b <- _ret ] [ &a <- _ret.final ] s2)
      | s2 = [ &old_1_0 <- b ] s3
      | s3 = bb1 ]
    | bb1 = bb1
      [ bb1 = {[@expl:mut invariant] old_1_0.final = b.final}
        {[@expl:loop invariant] true}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = any [ br0 -> {b.current = C_None} (! bb5) | br1 (x0: Int32.t) -> {b.current = C_Some x0} (! bb4) ]
        | bb4 = s0 [ s0 = [ &_7 <- C_None ] s1 | s1 = [ &b <- { b with current = _7 } ] s2 | s2 = bb1 ] ] ]
    | bb5 = s0 [ s0 = -{resolve'0 b}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: t_Option = Any.any_l ()
    | & b: MutBorrow.t t_Option = Any.any_l ()
    | & _7: t_Option = Any.any_l ()
    | & old_1_0: MutBorrow.t t_Option = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
