module M_assoc_type__uses3
  use creusot.prelude.Any
  
  type t_A
  
  type t_Assoc = { t_Assoc__item: t_A }
  
  type t_Nested = { t_Nested__item: t_Assoc }
  
  predicate inv (_0: t_A)
  
  predicate inv'0 (_0: t_Assoc)
  
  axiom inv_axiom [@rewrite]: forall x: t_Assoc [inv'0 x]. inv'0 x
      = match x with
        | {t_Assoc__item = item} -> inv item
        end
  
  predicate inv'1 (_0: t_Nested)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Nested [inv'1 x]. inv'1 x
      = match x with
        | {t_Nested__item = item} -> inv'0 item
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec uses3 (_0: t_Nested) (return (x: ())) = {[@expl:uses3 '_0' type invariant] inv'1 _0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'1 _0} s1 | s1 = bb1 ] | bb1 = return {_0'0} ]
    [ & _0'0: () = Any.any_l () | & _0: t_Nested = _0 ]) [ return (result: ()) -> (! return {result}) ]
end
