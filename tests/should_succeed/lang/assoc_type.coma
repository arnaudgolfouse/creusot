module M_assoc_type__uses3
  use creusot.prelude.Any
  
  type t_A
  
  predicate inv (_1: t_A)
  
  type t_Assoc = { t_Assoc__item: t_A }
  
  predicate inv'0 (_1: t_Assoc)
  
  axiom inv_axiom [@rewrite]: forall x: t_Assoc [inv'0 x]. inv'0 x = inv x.t_Assoc__item
  
  type t_Nested = { t_Nested__item: t_Assoc }
  
  predicate inv'1 (_1: t_Nested)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Nested [inv'1 x]. inv'1 x = inv'0 x.t_Nested__item
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec uses3 (_1: t_Nested) (return (x: ())) = {[@expl:uses3 '_1' type invariant] inv'1 _1}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'1 _1} s1 | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & _1: t_Nested = _1 ]) [ return (result: ()) -> (! return {result}) ]
end
