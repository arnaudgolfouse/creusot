module M_local_invariant_cellinv__qyi5959203038510030748__read [#"local_invariant_cellinv.rs" 37 4 37 73] (* CellInv<T> *)
  type namespace_other
  
  type t_Namespace  =
    | Namespace_PCELL_0'31 int
    | Other namespace_other
  
  let%span slocal_invariant_cellinv = "local_invariant_cellinv.rs" 37 24 37 28
  let%span slocal_invariant_cellinv'0 = "local_invariant_cellinv.rs" 36 15 36 43
  let%span slocal_invariant_cellinv'1 = "local_invariant_cellinv.rs" 37 68 37 73
  let%span slocal_invariant_cellinv'2 = "local_invariant_cellinv.rs" 40 30 40 41
  let%span slocal_invariant_cellinv'3 = "local_invariant_cellinv.rs" 40 36 40 40
  let%span slocal_invariant_cellinv'4 = "local_invariant_cellinv.rs" 31 8 31 25
  let%span slocal_invariant_cellinv'5 = "local_invariant_cellinv.rs" 21 8 21 92
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 122 14 122 32
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 184 22 184 26
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 184 4 184 32
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 182 14 182 29
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 165 15 165 16
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 165 4 165 28
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 163 14 163 26
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 90 8 90 22
  let%span sghost'7 = "../../creusot-contracts/src/ghost.rs" 100 8 100 18
  let%span slocal_invariant = "../../creusot-contracts/src/local_invariant.rs" 189 59 189 60
  let%span slocal_invariant'0 = "../../creusot-contracts/src/local_invariant.rs" 182 15 182 53
  let%span slocal_invariant'1 = "../../creusot-contracts/src/local_invariant.rs" 183 15 186 114
  let%span slocal_invariant'2 = "../../creusot-contracts/src/local_invariant.rs" 189 4 191 51
  let%span slocal_invariant'3 = "../../creusot-contracts/src/local_invariant.rs" 187 14 187 117
  let%span slocal_invariant'4 = "../../creusot-contracts/src/local_invariant.rs" 136 8 136 45
  let%span slocal_invariant'5 = "../../creusot-contracts/src/local_invariant.rs" 145 8 145 25
  let%span spcell = "../../creusot-contracts/src/pcell.rs" 166 33 166 37
  let%span spcell'0 = "../../creusot-contracts/src/pcell.rs" 166 39 166 43
  let%span spcell'1 = "../../creusot-contracts/src/pcell.rs" 164 15 164 37
  let%span spcell'2 = "../../creusot-contracts/src/pcell.rs" 166 4 166 77
  let%span spcell'3 = "../../creusot-contracts/src/pcell.rs" 165 14 165 30
  let%span spcell'4 = "../../creusot-contracts/src/pcell.rs" 36 8 36 19
  let%span spcell'5 = "../../creusot-contracts/src/pcell.rs" 61 20 61 46
  let%span sset = "../../creusot-contracts/src/logic/set.rs" 31 8 31 26
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use set.Set
  
  type t_T
  
  type t_UnsafeCell  =
    { t_UnsafeCell__value: t_T }
  
  type t_PCell  =
    { t_PCell__0: t_UnsafeCell }
  
  type t_LocalInvariant
  
  type t_CellInv  =
    { t_CellInv__data: t_PCell; t_CellInv__permission:  t_LocalInvariant }
  
  let rec borrow (self: t_LocalInvariant) (return'  (x: t_LocalInvariant))= any
    [ return''0 (result: t_LocalInvariant)-> {[%#sghost] result = self} (! return' {result}) ]
  
  
  type t_PCellOwn  =
    { t_PCellOwn__0: () }
  
  type t_PCellLocalInv  =
    { t_PCellLocalInv__0: t_PCellOwn }
  
  predicate invariant' (self: t_T)
  
  predicate inv (_0: t_T)
  
  axiom inv_axiom: forall x: t_T [inv x]. inv x  -> invariant' x
  
  predicate invariant''0 (self: t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  function val' (self: t_PCellOwn) : t_T
  
  predicate invariant''1 (self: t_PCellOwn) =
    [%#spcell'5] inv'0 (val' self)
  
  predicate inv'1 (_0: t_PCellOwn)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PCellOwn [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate inv'2 (_0: t_PCellLocalInv)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PCellLocalInv [inv'2 x]. inv'2 x
  = match x with
    | {t_PCellLocalInv__0 = a_0} -> inv'1 a_0
    end
  
  predicate invariant''2 (self: MutBorrow.t t_PCellLocalInv) =
    [%#sinvariant'0] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_0: MutBorrow.t t_PCellLocalInv)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_PCellLocalInv [inv'3 x]. inv'3 x = invariant''2 x
  
  predicate invariant''3 (self:  (MutBorrow.t t_PCellLocalInv)) =
    [%#sghost'7] inv'3 self
  
  predicate inv'4 (_0:  (MutBorrow.t t_PCellLocalInv))
  
  axiom inv_axiom'4 [@rewrite]: forall x:  (MutBorrow.t t_PCellLocalInv) [inv'4 x]. inv'4 x = invariant''3 x
  
  let rec into_inner (self: (MutBorrow.t t_PCellLocalInv)) (return'  (x:MutBorrow.t t_PCellLocalInv))= {[@expl:into_inner 'self' type invariant] [%#sghost'0] inv'4 self}
    any
    [ return''0 (result:MutBorrow.t t_PCellLocalInv)-> {[%#sghost'1] inv'3 result}
      {[%#sghost'2] result = self}
      (! return' {result}) ]
  
  
  predicate invariant''4 (self: t_PCellOwn) =
    [%#sinvariant] inv'1 self
  
  predicate inv'5 (_0: t_PCellOwn)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_PCellOwn [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate invariant''5 (self:  t_PCellOwn) =
    [%#sghost'7] inv'5 self
  
  predicate inv'6 (_0:  t_PCellOwn)
  
  axiom inv_axiom'6 [@rewrite]: forall x:  t_PCellOwn [inv'6 x]. inv'6 x = invariant''5 x
  
  let rec new (x:t_PCellOwn) (return'  (x'0: t_PCellOwn))= {[@expl:new 'x' type invariant] [%#sghost'3] inv'5 x}
    any [ return''0 (result: t_PCellOwn)-> {[%#sghost'4] inv'6 result} {[%#sghost'5] result = x} (! return' {result}) ] 
  
  type closure0  =
    { _0: t_CellInv }
  
  predicate inv'7 (_0'0: t_UnsafeCell)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_UnsafeCell [inv'7 x]. inv'7 x
  = match x with
    | {t_UnsafeCell__value = value} -> inv value
    end
  
  predicate inv'8 (_0'0: t_PCell)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_PCell [inv'8 x]. inv'8 x
  = match x with
    | {t_PCell__0 = a_0} -> inv'7 a_0
    end
  
  predicate invariant''6 (self: t_PCell) =
    [%#sinvariant] inv'8 self
  
  predicate inv'9 (_0'0: t_PCell)
  
  axiom inv_axiom'9 [@rewrite]: forall x: t_PCell [inv'9 x]. inv'9 x = invariant''6 x
  
  type t_Id
  
  function id (self: t_PCell) : t_Id
  
  function id'0 (self: t_PCellOwn) : t_Id
  
  function view (self: t_PCellOwn) : t_T =
    [%#spcell'4] val' self
  
  function view'0 (self: t_PCellOwn) : t_T =
    [%#smodel] view self
  
  function view'1 (self:  t_PCellOwn) : t_T =
    [%#sghost'6] view'0 self
  
  let rec borrow'0 (self:t_PCell) (perm: t_PCellOwn) (return'  (x:t_T))= {[@expl:borrow 'self' type invariant] [%#spcell] inv'9 self}
    {[@expl:borrow 'perm' type invariant] [%#spcell'0] inv'6 perm}
    {[@expl:borrow requires] [%#spcell'1] id self = id'0 perm}
    any
    [ return''0 (result:t_T)-> {[%#spcell'2] inv'0 result} {[%#spcell'3] result = view'1 perm} (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t t_PCellLocalInv) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0'0: MutBorrow.t t_PCellLocalInv) =
    resolve _0'0
  
  function namespace (self: t_LocalInvariant) : t_Namespace
  
  function public (self: t_LocalInvariant) : t_Id
  
  predicate invariant''7 [#"local_invariant_cellinv.rs" 20 4 20 30] (self: t_CellInv) =
    [%#slocal_invariant_cellinv'5] namespace self.t_CellInv__permission = Namespace_PCELL_0'31 0
    /\ public self.t_CellInv__permission = id self.t_CellInv__data
  
  predicate inv'10 (_0'0: t_CellInv)
  
  axiom inv_axiom'10 [@rewrite]: forall x: t_CellInv [inv'10 x]. inv'10 x
  = (invariant''7 x
  /\ match x with
    | {t_CellInv__data = data ; t_CellInv__permission = permission} -> inv'8 data
    end)
  
  predicate invariant''8 (self: t_CellInv) =
    [%#sinvariant] inv'10 self
  
  predicate inv'11 (_0'0: t_CellInv)
  
  axiom inv_axiom'11 [@rewrite]: forall x: t_CellInv [inv'11 x]. inv'11 x = invariant''8 x
  
  predicate inv'12 (_0'0: closure0)
  
  axiom inv_axiom'12 [@rewrite]: forall x: closure0 [inv'12 x]. inv'12 x = (let {_0 = x0} = x in inv'11 x0)
  
  let rec closure0[#"local_invariant_cellinv.rs" 40 30 40 41] [@coma:extspec] (self:closure0) (perm: (MutBorrow.t t_PCellLocalInv)) (return'  (x:t_T))= bb0
    [ bb0 = s0 [ s0 = into_inner {perm'0} (fun (_ret:MutBorrow.t t_PCellLocalInv) ->  [ &_7 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_6 <- (_7.current).t_PCellLocalInv__0 ] s1
      | s1 = new {_6} (fun (_ret: t_PCellOwn) ->  [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 = borrow'0 {(_1._0).t_CellInv__data} {_4} (fun (_ret:t_T) ->  [ &_0'0 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'3 _7} s1 | s1 = -{resolve'0 _7}- s2 | s2 = return''0 {_0'0} ]  ]
    
    [ & _0'0: t_T = Any.any_l ()
    | & _1: closure0 = self
    | & perm'0:  (MutBorrow.t t_PCellLocalInv) = perm
    | & _4:  t_PCellOwn = Any.any_l ()
    | & _6: t_PCellOwn = Any.any_l ()
    | & _7: MutBorrow.t t_PCellLocalInv = Any.any_l () ]
     [ return''0 (result:t_T)-> return' {result} ] 
  
  type t_Namespaces
  
  predicate contains [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) =
    [%#sset] Set.mem e self
  
  function namespaces (self: t_Namespaces) : Set.set t_Namespace
  
  function view'2 (self: t_Namespaces) : Set.set t_Namespace =
    [%#slocal_invariant'5] namespaces self
  
  function view'3 (self:  t_Namespaces) : Set.set t_Namespace =
    [%#sghost'6] view'2 self
  
  predicate invariant_with_data [#"local_invariant_cellinv.rs" 30 4 30 48] (self: t_PCellLocalInv) (id'1: t_Id) =
    [%#slocal_invariant_cellinv'4] id'0 self.t_PCellLocalInv__0 = id'1
  
  predicate precondition (self: closure0) (args:  (MutBorrow.t t_PCellLocalInv)) =
    [%#slocal_invariant_cellinv'2] let perm = args in closure0'pre self perm
  
  predicate postcondition_once (self: closure0) (args:  (MutBorrow.t t_PCellLocalInv)) (result: t_T) =
    [%#slocal_invariant_cellinv'2] let perm = args in closure0'post'return' self perm result
  
  let rec open (self: t_LocalInvariant) (namespaces'0: t_Namespaces) (f:closure0) (return'  (x:t_T))= {[@expl:open 'f' type invariant] [%#slocal_invariant] inv'12 f}
    {[@expl:open requires #0] [%#slocal_invariant'0] contains (view'3 namespaces'0) (namespace self)}
    {[@expl:open requires #1] [%#slocal_invariant'1] forall t:  (MutBorrow.t t_PCellLocalInv). invariant_with_data t.current (public self)
    /\ inv'4 t
     -> precondition f t /\ (forall res: t_T. postcondition_once f t res  -> invariant_with_data t.final (public self))}
    any
    [ return''0 (result:t_T)-> {[%#slocal_invariant'2] inv'0 result}
      {[%#slocal_invariant'3] exists t:  (MutBorrow.t t_PCellLocalInv). invariant_with_data t.current (public self)
      /\ postcondition_once f t result}
      (! return' {result}) ]
  
  
  predicate contains'0 (self: t_Namespaces) (namespace'0: t_Namespace) =
    [%#slocal_invariant'4] contains (namespaces self) namespace'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec read[#"local_invariant_cellinv.rs" 37 4 37 73] (self:t_CellInv) (namespaces'0: t_Namespaces) (return'  (x:t_T))= {[@expl:read 'self' type invariant] [%#slocal_invariant_cellinv] inv'11 self}
    {[@expl:read requires] [%#slocal_invariant_cellinv'0] contains'0 namespaces'0 (Namespace_PCELL_0'31 0)}
    (! bb0
    [ bb0 = s0
      [ s0 = borrow {self'0.t_CellInv__permission} (fun (_ret: t_LocalInvariant) ->  [ &_5 <- _ret ] s1) | s1 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_8 <- { _0 = self'0 } ] s1
      | s1 = open {_5} {namespaces'1} {_8} (fun (_ret:t_T) ->  [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &_0'0 <- _4 ] s1 | s1 = return''0 {_0'0} ]  ]
    )
    [ & _0'0: t_T = Any.any_l ()
    | & self'0: t_CellInv = self
    | & namespaces'1:  t_Namespaces = namespaces'0
    | & _4: t_T = Any.any_l ()
    | & _5:  t_LocalInvariant = Any.any_l ()
    | & _8: closure0 = Any.any_l () ]
    
    [ return''0 (result:t_T)-> {[@expl:read result type invariant] [%#slocal_invariant_cellinv'1] inv'0 result}
      (! return' {result}) ]

end
module M_local_invariant_cellinv__qyi5959203038510030748__write [#"local_invariant_cellinv.rs" 44 4 44 60] (* CellInv<T> *)
  type namespace_other
  
  type t_Namespace  =
    | Namespace_PCELL_0'31 int
    | Other namespace_other
  
  let%span slocal_invariant_cellinv = "local_invariant_cellinv.rs" 44 18 44 22
  let%span slocal_invariant_cellinv'0 = "local_invariant_cellinv.rs" 44 24 44 25
  let%span slocal_invariant_cellinv'1 = "local_invariant_cellinv.rs" 43 15 43 43
  let%span slocal_invariant_cellinv'2 = "local_invariant_cellinv.rs" 45 50 45 61
  let%span slocal_invariant_cellinv'3 = "local_invariant_cellinv.rs" 45 56 45 60
  let%span slocal_invariant_cellinv'4 = "local_invariant_cellinv.rs" 31 8 31 25
  let%span slocal_invariant_cellinv'5 = "local_invariant_cellinv.rs" 21 8 21 92
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 122 14 122 32
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 184 22 184 26
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 184 4 184 32
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 182 14 182 29
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 165 15 165 16
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 165 4 165 28
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 163 14 163 26
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 90 8 90 22
  let%span sghost'7 = "../../creusot-contracts/src/ghost.rs" 100 8 100 18
  let%span slocal_invariant = "../../creusot-contracts/src/local_invariant.rs" 189 59 189 60
  let%span slocal_invariant'0 = "../../creusot-contracts/src/local_invariant.rs" 182 15 182 53
  let%span slocal_invariant'1 = "../../creusot-contracts/src/local_invariant.rs" 183 15 186 114
  let%span slocal_invariant'2 = "../../creusot-contracts/src/local_invariant.rs" 187 14 187 117
  let%span slocal_invariant'3 = "../../creusot-contracts/src/local_invariant.rs" 136 8 136 45
  let%span slocal_invariant'4 = "../../creusot-contracts/src/local_invariant.rs" 145 8 145 25
  let%span spcell = "../../creusot-contracts/src/pcell.rs" 188 37 188 41
  let%span spcell'0 = "../../creusot-contracts/src/pcell.rs" 188 43 188 47
  let%span spcell'1 = "../../creusot-contracts/src/pcell.rs" 184 15 184 37
  let%span spcell'2 = "../../creusot-contracts/src/pcell.rs" 188 4 188 89
  let%span spcell'3 = "../../creusot-contracts/src/pcell.rs" 185 14 185 53
  let%span spcell'4 = "../../creusot-contracts/src/pcell.rs" 186 14 186 47
  let%span spcell'5 = "../../creusot-contracts/src/pcell.rs" 187 14 187 47
  let%span spcell'6 = "../../creusot-contracts/src/pcell.rs" 36 8 36 19
  let%span spcell'7 = "../../creusot-contracts/src/pcell.rs" 61 20 61 46
  let%span sset = "../../creusot-contracts/src/logic/set.rs" 31 8 31 26
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 91 8 91 18
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use set.Set
  
  type t_T
  
  type t_UnsafeCell  =
    { t_UnsafeCell__value: t_T }
  
  type t_PCell  =
    { t_PCell__0: t_UnsafeCell }
  
  type t_LocalInvariant
  
  type t_CellInv  =
    { t_CellInv__data: t_PCell; t_CellInv__permission:  t_LocalInvariant }
  
  let rec borrow (self: t_LocalInvariant) (return'  (x: t_LocalInvariant))= any
    [ return''0 (result: t_LocalInvariant)-> {[%#sghost] result = self} (! return' {result}) ]
  
  
  type t_PCellOwn  =
    { t_PCellOwn__0: () }
  
  type t_PCellLocalInv  =
    { t_PCellLocalInv__0: t_PCellOwn }
  
  predicate invariant' (self: t_T)
  
  predicate inv (_0: t_T)
  
  axiom inv_axiom: forall x: t_T [inv x]. inv x  -> invariant' x
  
  predicate invariant''0 (self: t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  function val' (self: t_PCellOwn) : t_T
  
  predicate invariant''1 (self: t_PCellOwn) =
    [%#spcell'7] inv'0 (val' self)
  
  predicate inv'1 (_0: t_PCellOwn)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PCellOwn [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate inv'2 (_0: t_PCellLocalInv)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PCellLocalInv [inv'2 x]. inv'2 x
  = match x with
    | {t_PCellLocalInv__0 = a_0} -> inv'1 a_0
    end
  
  predicate invariant''2 (self: MutBorrow.t t_PCellLocalInv) =
    [%#sinvariant'0] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_0: MutBorrow.t t_PCellLocalInv)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_PCellLocalInv [inv'3 x]. inv'3 x = invariant''2 x
  
  predicate invariant''3 (self:  (MutBorrow.t t_PCellLocalInv)) =
    [%#sghost'7] inv'3 self
  
  predicate inv'4 (_0:  (MutBorrow.t t_PCellLocalInv))
  
  axiom inv_axiom'4 [@rewrite]: forall x:  (MutBorrow.t t_PCellLocalInv) [inv'4 x]. inv'4 x = invariant''3 x
  
  let rec into_inner (self: (MutBorrow.t t_PCellLocalInv)) (return'  (x:MutBorrow.t t_PCellLocalInv))= {[@expl:into_inner 'self' type invariant] [%#sghost'0] inv'4 self}
    any
    [ return''0 (result:MutBorrow.t t_PCellLocalInv)-> {[%#sghost'1] inv'3 result}
      {[%#sghost'2] result = self}
      (! return' {result}) ]
  
  
  predicate invariant''4 (self: MutBorrow.t t_PCellOwn) =
    [%#sinvariant'0] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'5 (_0: MutBorrow.t t_PCellOwn)
  
  axiom inv_axiom'5 [@rewrite]: forall x: MutBorrow.t t_PCellOwn [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate invariant''5 (self:  (MutBorrow.t t_PCellOwn)) =
    [%#sghost'7] inv'5 self
  
  predicate inv'6 (_0:  (MutBorrow.t t_PCellOwn))
  
  axiom inv_axiom'6 [@rewrite]: forall x:  (MutBorrow.t t_PCellOwn) [inv'6 x]. inv'6 x = invariant''5 x
  
  let rec new (x:MutBorrow.t t_PCellOwn) (return'  (x'0: (MutBorrow.t t_PCellOwn)))= {[@expl:new 'x' type invariant] [%#sghost'3] inv'5 x}
    any
    [ return''0 (result: (MutBorrow.t t_PCellOwn))-> {[%#sghost'4] inv'6 result}
      {[%#sghost'5] result = x}
      (! return' {result}) ]
  
  
  type closure0  =
    { _0: t_CellInv; _1: t_T }
  
  predicate inv'7 (_0'0: t_UnsafeCell)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_UnsafeCell [inv'7 x]. inv'7 x
  = match x with
    | {t_UnsafeCell__value = value} -> inv value
    end
  
  predicate inv'8 (_0'0: t_PCell)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_PCell [inv'8 x]. inv'8 x
  = match x with
    | {t_PCell__0 = a_0} -> inv'7 a_0
    end
  
  predicate invariant''6 (self: t_PCell) =
    [%#sinvariant] inv'8 self
  
  predicate inv'9 (_0'0: t_PCell)
  
  axiom inv_axiom'9 [@rewrite]: forall x: t_PCell [inv'9 x]. inv'9 x = invariant''6 x
  
  type t_Id
  
  function id (self: t_PCell) : t_Id
  
  function id'0 (self: t_PCellOwn) : t_Id
  
  predicate invariant''7 (self: MutBorrow.t t_T) =
    [%#sinvariant'0] inv self.current /\ inv self.final
  
  predicate inv'10 (_0'0: MutBorrow.t t_T)
  
  axiom inv_axiom'10 [@rewrite]: forall x: MutBorrow.t t_T [inv'10 x]. inv'10 x = invariant''7 x
  
  function view (self: t_PCellOwn) : t_T =
    [%#spcell'6] val' self
  
  let rec borrow_mut (self:t_PCell) (perm: (MutBorrow.t t_PCellOwn)) (return'  (x:MutBorrow.t t_T))= {[@expl:borrow_mut 'self' type invariant] [%#spcell] inv'9 self}
    {[@expl:borrow_mut 'perm' type invariant] [%#spcell'0] inv'6 perm}
    {[@expl:borrow_mut requires] [%#spcell'1] id self = id'0 perm.current}
    any
    [ return''0 (result:MutBorrow.t t_T)-> {[%#spcell'2] inv'10 result}
      {[%#spcell'3] id self = id'0 perm.final}
      {[%#spcell'4] result.current = view perm.current}
      {[%#spcell'5] result.final = view perm.final}
      (! return' {result}) ]
  
  
  predicate resolve (_0'0: t_T)
  
  predicate resolve'0 (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'1 (_0'0: MutBorrow.t t_T) =
    resolve'0 _0'0
  
  predicate resolve'2 (self: MutBorrow.t t_PCellLocalInv) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'3 (_0'0: MutBorrow.t t_PCellLocalInv) =
    resolve'2 _0'0
  
  predicate resolve'4 (self: MutBorrow.t t_PCellOwn) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'5 (_0'0: MutBorrow.t t_PCellOwn) =
    resolve'4 _0'0
  
  function namespace (self: t_LocalInvariant) : t_Namespace
  
  function public (self: t_LocalInvariant) : t_Id
  
  predicate invariant''8 [#"local_invariant_cellinv.rs" 20 4 20 30] (self: t_CellInv) =
    [%#slocal_invariant_cellinv'5] namespace self.t_CellInv__permission = Namespace_PCELL_0'31 0
    /\ public self.t_CellInv__permission = id self.t_CellInv__data
  
  predicate inv'11 (_0'0: t_CellInv)
  
  axiom inv_axiom'11 [@rewrite]: forall x: t_CellInv [inv'11 x]. inv'11 x
  = (invariant''8 x
  /\ match x with
    | {t_CellInv__data = data ; t_CellInv__permission = permission} -> inv'8 data
    end)
  
  predicate invariant''9 (self: t_CellInv) =
    [%#sinvariant] inv'11 self
  
  predicate inv'12 (_0'0: t_CellInv)
  
  axiom inv_axiom'12 [@rewrite]: forall x: t_CellInv [inv'12 x]. inv'12 x = invariant''9 x
  
  predicate inv'13 (_0'0: closure0)
  
  axiom inv_axiom'13 [@rewrite]: forall x: closure0 [inv'13 x]. inv'13 x
  = (let {_0 = x0 ; _1 = x1} = x in inv'12 x0 /\ inv x1)
  
  let rec closure0[#"local_invariant_cellinv.rs" 45 50 45 61] [@coma:extspec] (self:closure0) (perm: (MutBorrow.t t_PCellLocalInv)) (return'  (x:()))= bb0
    [ bb0 = s0 [ s0 = into_inner {perm'0} (fun (_ret:MutBorrow.t t_PCellLocalInv) ->  [ &_10 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {inv'1 (_10.current).t_PCellLocalInv__0}
        MutBorrow.borrow_final
          <t_PCellOwn>
          {(_10.current).t_PCellLocalInv__0}
          {MutBorrow.inherit_id (MutBorrow.get_id _10) 1}
          (fun (_ret:MutBorrow.t t_PCellOwn) ->
             [ &_9 <- _ret ] 
            -{inv'1 _ret.final}-
             [ &_10 <- { _10 with current = { t_PCellLocalInv__0 = _ret.final } } ] 
            s1)
      | s1 = {inv'1 _9.current}
        MutBorrow.borrow_final <t_PCellOwn> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret:MutBorrow.t t_PCellOwn) ->
             [ &_8 <- _ret ] 
            -{inv'1 _ret.final}-
             [ &_9 <- { _9 with current = _ret.final } ] 
            s2)
      | s2 = {inv'1 _8.current}
        MutBorrow.borrow_final <t_PCellOwn> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret:MutBorrow.t t_PCellOwn) ->
             [ &_7 <- _ret ] 
            -{inv'1 _ret.final}-
             [ &_8 <- { _8 with current = _ret.final } ] 
            s3)
      | s3 = new {_7} (fun (_ret: (MutBorrow.t t_PCellOwn)) ->  [ &_6 <- _ret ] s4)
      | s4 = bb2 ]
    
    | bb2 = s0
      [ s0 = borrow_mut {(_1'0._0).t_CellInv__data} {_6} (fun (_ret:MutBorrow.t t_T) ->  [ &_4 <- _ret ] s1)
      | s1 = bb4 ]
    
    | bb4 = s0
      [ s0 = {[@expl:type invariant] match _4 with
          | {current = x} -> inv x
          | _ -> true
          end}
        s1
      | s1 = -{match _4 with
          | {current = x} -> resolve x
          | _ -> true
          end}-
        s2
      | s2 =  [ &_4 <- { _4 with current = _1'0._1 } ] s3
      | s3 = {[@expl:type invariant] inv'10 _4} s4
      | s4 = -{resolve'1 _4}- s5
      | s5 = {[@expl:type invariant] inv'3 _10} s6
      | s6 = -{resolve'3 _10}- s7
      | s7 = {[@expl:type invariant] inv'5 _9} s8
      | s8 = -{resolve'5 _9}- s9
      | s9 = {[@expl:type invariant] inv'5 _8} s10
      | s10 = -{resolve'5 _8}- s11
      | s11 = bb7 ]
    
    | bb7 = return''0 {_0'0} ]
    
    [ & _0'0: () = Any.any_l ()
    | & _1'0: closure0 = self
    | & perm'0:  (MutBorrow.t t_PCellLocalInv) = perm
    | & _4: MutBorrow.t t_T = Any.any_l ()
    | & _6:  (MutBorrow.t t_PCellOwn) = Any.any_l ()
    | & _7: MutBorrow.t t_PCellOwn = Any.any_l ()
    | & _8: MutBorrow.t t_PCellOwn = Any.any_l ()
    | & _9: MutBorrow.t t_PCellOwn = Any.any_l ()
    | & _10: MutBorrow.t t_PCellLocalInv = Any.any_l () ]
     [ return''0 (result:())-> return' {result} ] 
  
  type t_Namespaces
  
  predicate contains [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) =
    [%#sset] Set.mem e self
  
  function namespaces (self: t_Namespaces) : Set.set t_Namespace
  
  function view'0 (self: t_Namespaces) : Set.set t_Namespace =
    [%#slocal_invariant'4] namespaces self
  
  function view'1 (self:  t_Namespaces) : Set.set t_Namespace =
    [%#sghost'6] view'0 self
  
  predicate invariant_with_data [#"local_invariant_cellinv.rs" 30 4 30 48] (self: t_PCellLocalInv) (id'1: t_Id) =
    [%#slocal_invariant_cellinv'4] id'0 self.t_PCellLocalInv__0 = id'1
  
  predicate precondition (self: closure0) (args:  (MutBorrow.t t_PCellLocalInv)) =
    [%#slocal_invariant_cellinv'2] let perm = args in closure0'pre self perm
  
  predicate postcondition_once (self: closure0) (args:  (MutBorrow.t t_PCellLocalInv)) (result: ()) =
    [%#slocal_invariant_cellinv'2] let perm = args in closure0'post'return' self perm result
  
  let rec open (self: t_LocalInvariant) (namespaces'0: t_Namespaces) (f:closure0) (return'  (x:()))= {[@expl:open 'f' type invariant] [%#slocal_invariant] inv'13 f}
    {[@expl:open requires #0] [%#slocal_invariant'0] contains (view'1 namespaces'0) (namespace self)}
    {[@expl:open requires #1] [%#slocal_invariant'1] forall t:  (MutBorrow.t t_PCellLocalInv). invariant_with_data t.current (public self)
    /\ inv'4 t
     -> precondition f t /\ (forall res: (). postcondition_once f t res  -> invariant_with_data t.final (public self))}
    any
    [ return''0 (result:())-> {[%#slocal_invariant'2] exists t:  (MutBorrow.t t_PCellLocalInv). invariant_with_data t.current (public self)
      /\ postcondition_once f t result}
      (! return' {result}) ]
  
  
  predicate contains'0 (self: t_Namespaces) (namespace'0: t_Namespace) =
    [%#slocal_invariant'3] contains (namespaces self) namespace'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec write[#"local_invariant_cellinv.rs" 44 4 44 60] (self:t_CellInv) (x:t_T) (namespaces'0: t_Namespaces) (return'  (x'0:()))= {[@expl:write 'self' type invariant] [%#slocal_invariant_cellinv] inv'12 self}
    {[@expl:write 'x' type invariant] [%#slocal_invariant_cellinv'0] inv x}
    {[@expl:write requires] [%#slocal_invariant_cellinv'1] contains'0 namespaces'0 (Namespace_PCELL_0'31 0)}
    (! bb0
    [ bb0 = s0
      [ s0 = borrow {self'0.t_CellInv__permission} (fun (_ret: t_LocalInvariant) ->  [ &_5 <- _ret ] s1) | s1 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_8 <- { _0 = self'0; _1 = x'0 } ] s1
      | s1 = open {_5} {namespaces'1} {_8} (fun (_ret:()) ->  [ &_0'0 <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = return''0 {_0'0} ]
    )
    [ & _0'0: () = Any.any_l ()
    | & self'0: t_CellInv = self
    | & x'0: t_T = x
    | & namespaces'1:  t_Namespaces = namespaces'0
    | & _5:  t_LocalInvariant = Any.any_l ()
    | & _8: closure0 = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
