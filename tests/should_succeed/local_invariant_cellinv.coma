module M_impl_CellInv_T__read (* CellInv<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PERMCELL int | Other namespace_other
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use set.Set
  
  type t_PermCellOwn_T
  
  type t_PermCellLocalInv_T = { f0: t_PermCellOwn_T }
  
  type t_T
  
  predicate invariant_T (self: t_T)
  
  predicate inv_T (_1: t_T)
  
  axiom inv_axiom: forall x: t_T [inv_T x]. inv_T x -> invariant_T x
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  function val_T (self: t_PermCellOwn_T) : t_T
  
  predicate invariant_PermCellOwn_T [@inline:trivial] (self: t_PermCellOwn_T) = inv_ref_T (val_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_T
  
  predicate inv_PermCellOwn_T (_1: t_PermCellOwn_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PermCellOwn_T [inv_PermCellOwn_T x]. inv_PermCellOwn_T x
      = invariant_PermCellOwn_T x
  
  predicate inv_PermCellLocalInv_T (_1: t_PermCellLocalInv_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellLocalInv_T [inv_PermCellLocalInv_T x]. inv_PermCellLocalInv_T x
      = inv_PermCellOwn_T x.f0
  
  predicate invariant_ref_PermCellLocalInv_T [@inline:trivial] (self: MutBorrow.t t_PermCellLocalInv_T) =
    inv_PermCellLocalInv_T self.current /\ inv_PermCellLocalInv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PermCellLocalInv_T
  
  predicate inv_ref_PermCellLocalInv_T [@inline:trivial] (_1: MutBorrow.t t_PermCellLocalInv_T) =
    invariant_ref_PermCellLocalInv_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellLocalInv_T
  
  predicate invariant_Ghost_ref_PermCellLocalInv_T [@inline:trivial] (self: MutBorrow.t t_PermCellLocalInv_T) =
    inv_ref_PermCellLocalInv_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PermCellLocalInv_T
  
  predicate inv_Ghost_ref_PermCellLocalInv_T [@inline:trivial] (_1: MutBorrow.t t_PermCellLocalInv_T) =
    invariant_Ghost_ref_PermCellLocalInv_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PermCellLocalInv_T
  
  let rec into_inner_ref_PermCellLocalInv_T (self: MutBorrow.t t_PermCellLocalInv_T)
    (return (x: MutBorrow.t t_PermCellLocalInv_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_ref_PermCellLocalInv_T self}
    any
    [ return (result: MutBorrow.t t_PermCellLocalInv_T) -> {inv_ref_PermCellLocalInv_T result}
      {result = self}
      (! return {result}) ]
  
  predicate resolve_ref_PermCellLocalInv_T [@inline:trivial] (_1: MutBorrow.t t_PermCellLocalInv_T) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PermCellLocalInv_T
  
  predicate invariant_ref_PermCellOwn_T [@inline:trivial] (self: t_PermCellOwn_T) = inv_PermCellOwn_T self
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_T
  
  predicate inv_ref_PermCellOwn_T [@inline:trivial] (_1: t_PermCellOwn_T) = invariant_ref_PermCellOwn_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_T
  
  predicate invariant_Ghost_ref_PermCellOwn_T [@inline:trivial] (self: t_PermCellOwn_T) = inv_ref_PermCellOwn_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PermCellOwn_T
  
  predicate inv_Ghost_ref_PermCellOwn_T [@inline:trivial] (_1: t_PermCellOwn_T) = invariant_Ghost_ref_PermCellOwn_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PermCellOwn_T
  
  let rec new_ref_PermCellOwn_T (x: t_PermCellOwn_T) (return (x'0: t_PermCellOwn_T)) =
    {[@expl:new 'x' type invariant] inv_ref_PermCellOwn_T x}
    any [ return (result: t_PermCellOwn_T) -> {inv_Ghost_ref_PermCellOwn_T result} {result = x} (! return {result}) ]
  
  type t_PermCell_T
  
  type t_LocalInvariant_PermCellLocalInv_T
  
  type t_CellInv_T = { data: t_PermCell_T; permission: t_LocalInvariant_PermCellLocalInv_T }
  
  type closure0 = { c0: t_CellInv_T }
  
  type t_Id
  
  function id_T (self: t_PermCell_T) : t_Id
  
  function id_T'0 (self: t_PermCellOwn_T) : t_Id
  
  function view_PermCellOwn_T [@inline:trivial] (self: t_PermCellOwn_T) : t_T = val_T self
  
  meta "rewrite_def" function view_PermCellOwn_T
  
  let rec borrow_T (self: t_PermCell_T) (perm: t_PermCellOwn_T) (return (x: t_T)) =
    {[@expl:borrow 'perm' type invariant] inv_Ghost_ref_PermCellOwn_T perm}
    {[@expl:borrow requires] id_T self = id_T'0 perm}
    any [ return (result: t_T) -> {inv_ref_T result} {result = view_PermCellOwn_T perm} (! return {result}) ]
  
  function namespace_PermCellLocalInv_T (self: t_LocalInvariant_PermCellLocalInv_T) : t_Namespace
  
  function public_PermCellLocalInv_T (self: t_LocalInvariant_PermCellLocalInv_T) : t_Id
  
  predicate invariant_CellInv_T (self: t_CellInv_T) =
    namespace_PermCellLocalInv_T self.permission = Namespace_PERMCELL 0
    /\ public_PermCellLocalInv_T self.permission = id_T self.data
  
  predicate inv_CellInv_T (_1: t_CellInv_T)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_CellInv_T [inv_CellInv_T x]. inv_CellInv_T x = invariant_CellInv_T x
  
  predicate invariant_ref_CellInv_T [@inline:trivial] (self: t_CellInv_T) = inv_CellInv_T self
  
  meta "rewrite_def" predicate invariant_ref_CellInv_T
  
  predicate inv_ref_CellInv_T [@inline:trivial] (_1: t_CellInv_T) = invariant_ref_CellInv_T _1
  
  meta "rewrite_def" predicate inv_ref_CellInv_T
  
  predicate inv_closure0 [@inline:trivial] (_1: closure0) = let {c0 = x0} = _1 in inv_ref_CellInv_T x0
  
  meta "rewrite_def" predicate inv_closure0
  
  let rec closure0 [@coma:extspec] (self: closure0) (perm: MutBorrow.t t_PermCellLocalInv_T) (return (x: t_T)) = bb0
    [ bb0 = s0
      [ s0 = into_inner_ref_PermCellLocalInv_T {perm}
          (fun (_ret: MutBorrow.t t_PermCellLocalInv_T) -> [ &_7 <- _ret ] s1)
      | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PermCellLocalInv_T _7} s1
      | s1 = -{resolve_ref_PermCellLocalInv_T _7}- s2
      | s2 = [ &_6 <- _7.current.f0 ] s3
      | s3 = new_ref_PermCellOwn_T {_6} (fun (_ret: t_PermCellOwn_T) -> [ &_4 <- _ret ] s4)
      | s4 = bb2 ]
    | bb2 = s0 [ s0 = borrow_T {self.c0.data} {_4} (fun (_ret: t_T) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return {_0} ]
    [ & _0: t_T = Any.any_l ()
    | & self: closure0 = self
    | & perm: MutBorrow.t t_PermCellLocalInv_T = perm
    | & _4: t_PermCellOwn_T = Any.any_l ()
    | & _6: t_PermCellOwn_T = Any.any_l ()
    | & _7: MutBorrow.t t_PermCellLocalInv_T = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  type t_Tokens
  
  type tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0 = {
    f0'0: t_LocalInvariant_PermCellLocalInv_T;
    f1'0: t_Tokens;
    f2'0: closure0 }
  
  predicate protocol_PermCellLocalInv_T (self: t_PermCellLocalInv_T) (id: t_Id) = id_T'0 self.f0 = id
  
  predicate precondition_closure0 [@inline:trivial] (self: closure0) (args: MutBorrow.t t_PermCellLocalInv_T) =
    let perm = args in closure0'pre self perm
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: MutBorrow.t t_PermCellLocalInv_T) (result: t_T) =
    let perm = args in closure0'post'return self perm result
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  function fin_Ghost_ref_PermCellLocalInv_T [@inline:trivial] (self: MutBorrow.t t_PermCellLocalInv_T) : t_PermCellLocalInv_T
   = self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PermCellLocalInv_T
  
  predicate contains_Namespace [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) = Set.mem e self
  
  meta "rewrite_def" predicate contains_Namespace
  
  function namespaces (self: t_Tokens) : Set.set t_Namespace
  
  predicate contains (self: t_Tokens) (namespace: t_Namespace) = contains_Namespace (namespaces self) namespace
  
  predicate precondition_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (forall t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self'0)
          /\ inv_Ghost_ref_PermCellLocalInv_T t
        -> precondition_closure0 f t
        /\ (forall res: t_T. postcondition_once_closure0 f t res
          -> protocol_PermCellLocalInv_T (fin_Ghost_ref_PermCellLocalInv_T t) (public_PermCellLocalInv_T self'0)))
    /\ contains tokens (namespace_PermCellLocalInv_T self'0) /\ inv_closure0 f
  
  meta "rewrite_def" predicate precondition_open
  
  let rec open_Ghost_ref_LocalInvariant_PermCellLocalInv_T (self: t_LocalInvariant_PermCellLocalInv_T)
    (tokens: t_Tokens) (f: closure0) (return (x: t_T)) = {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires #0] contains tokens (namespace_PermCellLocalInv_T self)}
    {[@expl:open requires #1] forall t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self)
        /\ inv_Ghost_ref_PermCellLocalInv_T t
      -> precondition_closure0 f t
      /\ (forall res: t_T. postcondition_once_closure0 f t res
        -> protocol_PermCellLocalInv_T (fin_Ghost_ref_PermCellLocalInv_T t) (public_PermCellLocalInv_T self))}
    any
    [ return (result: t_T) -> {inv_ref_T result}
      {exists t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self)
        /\ postcondition_once_closure0 f t result}
      (! return {result}) ]
  
  function new_ref_LocalInvariant_PermCellLocalInv_T (x: t_LocalInvariant_PermCellLocalInv_T) : t_LocalInvariant_PermCellLocalInv_T
  
  axiom new_ref_LocalInvariant_PermCellLocalInv_T_spec:
    forall x: t_LocalInvariant_PermCellLocalInv_T. new_ref_LocalInvariant_PermCellLocalInv_T x = x
  
  predicate postcondition_once_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (result: t_T) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (exists t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_once_open
  
  predicate resolve_open [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_open
  
  predicate postcondition_mut_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (result_state: ()) (result: t_T) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (exists t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_mut_open
  
  function fn_mut_once_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (res: t_T) : ()
  
  axiom fn_mut_once_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0, res: t_T. postcondition_once_open self args res
      = (exists res_state: (). postcondition_mut_open self args res_state res /\ resolve_open res_state)
  
  predicate hist_inv_open [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_open
  
  function hist_inv_trans_open (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_open_spec: forall self: (), b: (), c: (). hist_inv_open self b
      -> hist_inv_open b c -> hist_inv_open self c
  
  function hist_inv_refl_open (self: ()) : ()
  
  axiom hist_inv_refl_open_spec: forall self: (). hist_inv_open self self
  
  function postcondition_mut_hist_inv_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0, res_state: (), res: t_T. postcondition_mut_open self args res_state res
      -> hist_inv_open self res_state
  
  function fn_hist_inv_open (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_open_spec: forall self: (), res_state: (). hist_inv_open self res_state = (self = res_state)
  
  predicate postcondition_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (result: t_T) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (exists t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self'0)
        /\ postcondition_once_closure0 f t result)
    /\ inv_ref_T result
  
  meta "rewrite_def" predicate postcondition_open
  
  function fn_once_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (res: t_T) : ()
  
  axiom fn_once_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0, res: t_T. postcondition_once_open self args res
      = (postcondition_open self args res /\ resolve_open self)
  
  function fn_mut_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0, res_state: (), res: t_T. postcondition_mut_open self args res_state res
      = (postcondition_open self args res /\ self = res_state)
  
  let rec open_ref_Ghost_LocalInvariant_PermCellLocalInv_T (self: t_LocalInvariant_PermCellLocalInv_T)
    (tokens: t_Tokens) (f: closure0) (return (x: t_T)) = {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires] precondition_open () { f0'0 = new_ref_LocalInvariant_PermCellLocalInv_T self;
                                                  f1'0 = tokens;
                                                  f2'0 = f }}
    any
    [ return (result: t_T) -> {inv_ref_T result}
      {postcondition_open () { f0'0 = new_ref_LocalInvariant_PermCellLocalInv_T self; f1'0 = tokens; f2'0 = f } result}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec read_T (self: t_CellInv_T) (tokens: t_Tokens) (return (x: t_T)) =
    {[@expl:read 'self' type invariant] inv_ref_CellInv_T self}
    {[@expl:read requires] contains tokens (Namespace_PERMCELL 0)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_7 <- { c0 = self } ] s1
      | s1 = open_ref_Ghost_LocalInvariant_PermCellLocalInv_T {self.permission} {tokens} {_7}
          (fun (_ret: t_T) -> [ &_4 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- _4 ] s1 | s1 = return {_0} ] ]
    [ & _0: t_T = Any.any_l ()
    | & self: t_CellInv_T = self
    | & tokens: t_Tokens = tokens
    | & _4: t_T = Any.any_l ()
    | & _7: closure0 = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:read result type invariant] inv_ref_T result} (! return {result}) ]
end
module M_impl_CellInv_T__write (* CellInv<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PERMCELL int | Other namespace_other
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use set.Set
  
  type t_PermCellOwn_T
  
  type t_PermCellLocalInv_T = { f0: t_PermCellOwn_T }
  
  type t_T
  
  predicate invariant_T (self: t_T)
  
  predicate inv_T (_1: t_T)
  
  axiom inv_axiom: forall x: t_T [inv_T x]. inv_T x -> invariant_T x
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  function val_T (self: t_PermCellOwn_T) : t_T
  
  predicate invariant_PermCellOwn_T [@inline:trivial] (self: t_PermCellOwn_T) = inv_ref_T (val_T self)
  
  meta "rewrite_def" predicate invariant_PermCellOwn_T
  
  predicate inv_PermCellOwn_T (_1: t_PermCellOwn_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PermCellOwn_T [inv_PermCellOwn_T x]. inv_PermCellOwn_T x
      = invariant_PermCellOwn_T x
  
  predicate inv_PermCellLocalInv_T (_1: t_PermCellLocalInv_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellLocalInv_T [inv_PermCellLocalInv_T x]. inv_PermCellLocalInv_T x
      = inv_PermCellOwn_T x.f0
  
  predicate invariant_ref_PermCellLocalInv_T [@inline:trivial] (self: MutBorrow.t t_PermCellLocalInv_T) =
    inv_PermCellLocalInv_T self.current /\ inv_PermCellLocalInv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PermCellLocalInv_T
  
  predicate inv_ref_PermCellLocalInv_T [@inline:trivial] (_1: MutBorrow.t t_PermCellLocalInv_T) =
    invariant_ref_PermCellLocalInv_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellLocalInv_T
  
  predicate invariant_Ghost_ref_PermCellLocalInv_T [@inline:trivial] (self: MutBorrow.t t_PermCellLocalInv_T) =
    inv_ref_PermCellLocalInv_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PermCellLocalInv_T
  
  predicate inv_Ghost_ref_PermCellLocalInv_T [@inline:trivial] (_1: MutBorrow.t t_PermCellLocalInv_T) =
    invariant_Ghost_ref_PermCellLocalInv_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PermCellLocalInv_T
  
  let rec into_inner_ref_PermCellLocalInv_T (self: MutBorrow.t t_PermCellLocalInv_T)
    (return (x: MutBorrow.t t_PermCellLocalInv_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_ref_PermCellLocalInv_T self}
    any
    [ return (result: MutBorrow.t t_PermCellLocalInv_T) -> {inv_ref_PermCellLocalInv_T result}
      {result = self}
      (! return {result}) ]
  
  predicate resolve_ref_PermCellLocalInv_T [@inline:trivial] (_1: MutBorrow.t t_PermCellLocalInv_T) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PermCellLocalInv_T
  
  predicate invariant_ref_PermCellOwn_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_T) =
    inv_PermCellOwn_T self.current /\ inv_PermCellOwn_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PermCellOwn_T
  
  predicate inv_ref_PermCellOwn_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_T) = invariant_ref_PermCellOwn_T _1
  
  meta "rewrite_def" predicate inv_ref_PermCellOwn_T
  
  predicate resolve_ref_PermCellOwn_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PermCellOwn_T
  
  predicate invariant_Ghost_ref_PermCellOwn_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_T) =
    inv_ref_PermCellOwn_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PermCellOwn_T
  
  predicate inv_Ghost_ref_PermCellOwn_T [@inline:trivial] (_1: MutBorrow.t t_PermCellOwn_T) =
    invariant_Ghost_ref_PermCellOwn_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PermCellOwn_T
  
  let rec new_ref_PermCellOwn_T (x: MutBorrow.t t_PermCellOwn_T) (return (x'0: MutBorrow.t t_PermCellOwn_T)) =
    {[@expl:new 'x' type invariant] inv_ref_PermCellOwn_T x}
    any
    [ return (result: MutBorrow.t t_PermCellOwn_T) -> {inv_Ghost_ref_PermCellOwn_T result}
      {result = x}
      (! return {result}) ]
  
  type t_PermCell_T
  
  type t_LocalInvariant_PermCellLocalInv_T
  
  type t_CellInv_T = { data: t_PermCell_T; permission: t_LocalInvariant_PermCellLocalInv_T }
  
  type closure0 = { c0: t_CellInv_T; c1: t_T }
  
  type t_Id
  
  function id_T (self: t_PermCell_T) : t_Id
  
  function id_T'0 (self: t_PermCellOwn_T) : t_Id
  
  predicate invariant_ref_T'0 [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T'0
  
  predicate inv_ref_T'0 [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_T'0
  
  function fin_Ghost_ref_PermCellOwn_T [@inline:trivial] (self: MutBorrow.t t_PermCellOwn_T) : t_PermCellOwn_T =
    self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PermCellOwn_T
  
  function view_PermCellOwn_T [@inline:trivial] (self: t_PermCellOwn_T) : t_T = val_T self
  
  meta "rewrite_def" function view_PermCellOwn_T
  
  let rec borrow_mut_T (self: t_PermCell_T) (perm: MutBorrow.t t_PermCellOwn_T) (return (x: MutBorrow.t t_T)) =
    {[@expl:borrow_mut 'perm' type invariant] inv_Ghost_ref_PermCellOwn_T perm}
    {[@expl:borrow_mut requires] id_T self = id_T'0 perm.current}
    any
    [ return (result: MutBorrow.t t_T) -> {inv_ref_T'0 result}
      {id_T self = id_T'0 (fin_Ghost_ref_PermCellOwn_T perm)}
      {result.current = view_PermCellOwn_T perm.current}
      {result.final = view_PermCellOwn_T (fin_Ghost_ref_PermCellOwn_T perm)}
      (! return {result}) ]
  
  predicate resolve_T (_1: t_T)
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  function namespace_PermCellLocalInv_T (self: t_LocalInvariant_PermCellLocalInv_T) : t_Namespace
  
  function public_PermCellLocalInv_T (self: t_LocalInvariant_PermCellLocalInv_T) : t_Id
  
  predicate invariant_CellInv_T (self: t_CellInv_T) =
    namespace_PermCellLocalInv_T self.permission = Namespace_PERMCELL 0
    /\ public_PermCellLocalInv_T self.permission = id_T self.data
  
  predicate inv_CellInv_T (_1: t_CellInv_T)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_CellInv_T [inv_CellInv_T x]. inv_CellInv_T x = invariant_CellInv_T x
  
  predicate invariant_ref_CellInv_T [@inline:trivial] (self: t_CellInv_T) = inv_CellInv_T self
  
  meta "rewrite_def" predicate invariant_ref_CellInv_T
  
  predicate inv_ref_CellInv_T [@inline:trivial] (_1: t_CellInv_T) = invariant_ref_CellInv_T _1
  
  meta "rewrite_def" predicate inv_ref_CellInv_T
  
  predicate inv_closure0 [@inline:trivial] (_1: closure0) =
    let {c0 = x0; c1 = x1} = _1 in inv_ref_CellInv_T x0 /\ inv_T x1
  
  meta "rewrite_def" predicate inv_closure0
  
  let rec closure0 [@coma:extspec] (self: closure0) (perm: MutBorrow.t t_PermCellLocalInv_T) (return (x: ())) = bb0
    [ bb0 = s0
      [ s0 = into_inner_ref_PermCellLocalInv_T {perm}
          (fun (_ret: MutBorrow.t t_PermCellLocalInv_T) -> [ &_10 <- _ret ] s1)
      | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {inv_PermCellOwn_T _10.current.f0}
        MutBorrow.borrow_final <t_PermCellOwn_T> {_10.current.f0} {MutBorrow.inherit_id (MutBorrow.get_id _10) 1}
          (fun (_ret: MutBorrow.t t_PermCellOwn_T) ->
            [ &_9 <- _ret ] -{inv_PermCellOwn_T _ret.final}-
            [ &_10 <- { _10 with current = { f0 = _ret.final } } ] s1)
      | s1 = {inv_PermCellOwn_T _9.current}
        MutBorrow.borrow_final <t_PermCellOwn_T> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret: MutBorrow.t t_PermCellOwn_T) ->
            [ &_8 <- _ret ] -{inv_PermCellOwn_T _ret.final}-
            [ &_9 <- { _9 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv_ref_PermCellLocalInv_T _10} s3
      | s3 = -{resolve_ref_PermCellLocalInv_T _10}- s4
      | s4 = {[@expl:type invariant] inv_ref_PermCellOwn_T _9} s5
      | s5 = -{resolve_ref_PermCellOwn_T _9}- s6
      | s6 = {inv_PermCellOwn_T _8.current}
        MutBorrow.borrow_final <t_PermCellOwn_T> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret: MutBorrow.t t_PermCellOwn_T) ->
            [ &_7 <- _ret ] -{inv_PermCellOwn_T _ret.final}-
            [ &_8 <- { _8 with current = _ret.final } ] s7)
      | s7 = new_ref_PermCellOwn_T {_7} (fun (_ret: MutBorrow.t t_PermCellOwn_T) -> [ &_6 <- _ret ] s8)
      | s8 = bb2 ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PermCellOwn_T _8} s1
      | s1 = -{resolve_ref_PermCellOwn_T _8}- s2
      | s2 = borrow_mut_T {self.c0.data} {_6} (fun (_ret: MutBorrow.t t_T) -> [ &_4 <- _ret ] s3)
      | s3 = bb4 ]
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv_T _4.current} s1
      | s1 = -{resolve_T _4.current}- s2
      | s2 = [ &_4 <- { _4 with current = self.c1 } ] s3
      | s3 = {[@expl:type invariant] inv_ref_T'0 _4} s4
      | s4 = -{resolve_ref_T _4}- s5
      | s5 = bb7 ]
    | bb7 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: closure0 = self
    | & perm: MutBorrow.t t_PermCellLocalInv_T = perm
    | & _4: MutBorrow.t t_T = Any.any_l ()
    | & _6: MutBorrow.t t_PermCellOwn_T = Any.any_l ()
    | & _7: MutBorrow.t t_PermCellOwn_T = Any.any_l ()
    | & _8: MutBorrow.t t_PermCellOwn_T = Any.any_l ()
    | & _9: MutBorrow.t t_PermCellOwn_T = Any.any_l ()
    | & _10: MutBorrow.t t_PermCellLocalInv_T = Any.any_l () ]
  
  meta "rewrite_def" predicate closure0'pre
  
  meta "rewrite_def" predicate closure0'post'return
  
  type t_Tokens
  
  type tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0 = {
    f0'0: t_LocalInvariant_PermCellLocalInv_T;
    f1'0: t_Tokens;
    f2'0: closure0 }
  
  predicate protocol_PermCellLocalInv_T (self: t_PermCellLocalInv_T) (id: t_Id) = id_T'0 self.f0 = id
  
  predicate precondition_closure0 [@inline:trivial] (self: closure0) (args: MutBorrow.t t_PermCellLocalInv_T) =
    let perm = args in closure0'pre self perm
  
  meta "rewrite_def" predicate precondition_closure0
  
  predicate postcondition_once_closure0 [@inline:trivial] (self: closure0) (args: MutBorrow.t t_PermCellLocalInv_T) (result: ()) =
    let perm = args in closure0'post'return self perm result
  
  meta "rewrite_def" predicate postcondition_once_closure0
  
  function fin_Ghost_ref_PermCellLocalInv_T [@inline:trivial] (self: MutBorrow.t t_PermCellLocalInv_T) : t_PermCellLocalInv_T
   = self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PermCellLocalInv_T
  
  predicate contains_Namespace [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) = Set.mem e self
  
  meta "rewrite_def" predicate contains_Namespace
  
  function namespaces (self: t_Tokens) : Set.set t_Namespace
  
  predicate contains (self: t_Tokens) (namespace: t_Namespace) = contains_Namespace (namespaces self) namespace
  
  predicate precondition_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in (forall t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self'0)
          /\ inv_Ghost_ref_PermCellLocalInv_T t
        -> precondition_closure0 f t
        /\ (forall res: (). postcondition_once_closure0 f t res
          -> protocol_PermCellLocalInv_T (fin_Ghost_ref_PermCellLocalInv_T t) (public_PermCellLocalInv_T self'0)))
    /\ contains tokens (namespace_PermCellLocalInv_T self'0) /\ inv_closure0 f
  
  meta "rewrite_def" predicate precondition_open
  
  let rec open_Ghost_ref_LocalInvariant_PermCellLocalInv_T (self: t_LocalInvariant_PermCellLocalInv_T)
    (tokens: t_Tokens) (f: closure0) (return (x: ())) = {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires #0] contains tokens (namespace_PermCellLocalInv_T self)}
    {[@expl:open requires #1] forall t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self)
        /\ inv_Ghost_ref_PermCellLocalInv_T t
      -> precondition_closure0 f t
      /\ (forall res: (). postcondition_once_closure0 f t res
        -> protocol_PermCellLocalInv_T (fin_Ghost_ref_PermCellLocalInv_T t) (public_PermCellLocalInv_T self))}
    any
    [ return (result: ()) ->
    {exists t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self)
        /\ postcondition_once_closure0 f t result}
      (! return {result}) ]
  
  function new_ref_LocalInvariant_PermCellLocalInv_T (x: t_LocalInvariant_PermCellLocalInv_T) : t_LocalInvariant_PermCellLocalInv_T
  
  axiom new_ref_LocalInvariant_PermCellLocalInv_T_spec:
    forall x: t_LocalInvariant_PermCellLocalInv_T. new_ref_LocalInvariant_PermCellLocalInv_T x = x
  
  predicate postcondition_once_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (result: ()) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in exists t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self'0)
      /\ postcondition_once_closure0 f t result
  
  meta "rewrite_def" predicate postcondition_once_open
  
  predicate resolve_open [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_open
  
  predicate postcondition_mut_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (result_state: ()) (result: ()) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in exists t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self'0)
      /\ postcondition_once_closure0 f t result
  
  meta "rewrite_def" predicate postcondition_mut_open
  
  function fn_mut_once_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (res: ()) : ()
  
  axiom fn_mut_once_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0, res: (). postcondition_once_open self args res
      = (exists res_state: (). postcondition_mut_open self args res_state res /\ resolve_open res_state)
  
  predicate hist_inv_open [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_open
  
  function hist_inv_trans_open (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_open_spec: forall self: (), b: (), c: (). hist_inv_open self b
      -> hist_inv_open b c -> hist_inv_open self c
  
  function hist_inv_refl_open (self: ()) : ()
  
  axiom hist_inv_refl_open_spec: forall self: (). hist_inv_open self self
  
  function postcondition_mut_hist_inv_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (res_state: ()) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0, res_state: (), res: (). postcondition_mut_open self args res_state res
      -> hist_inv_open self res_state
  
  function fn_hist_inv_open (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_open_spec: forall self: (), res_state: (). hist_inv_open self res_state = (self = res_state)
  
  predicate postcondition_open [@inline:trivial] (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (result: ()) =
    let {f0'0 = self'0; f1'0 = tokens; f2'0 = f} = args in exists t: MutBorrow.t t_PermCellLocalInv_T. protocol_PermCellLocalInv_T t.current (public_PermCellLocalInv_T self'0)
      /\ postcondition_once_closure0 f t result
  
  meta "rewrite_def" predicate postcondition_open
  
  function fn_once_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (res: ()) : ()
  
  axiom fn_once_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0, res: (). postcondition_once_open self args res
      = (postcondition_open self args res /\ resolve_open self)
  
  function fn_mut_open (self: ()) (args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0) (res_state: ()) (res: ()) : ()
  
  axiom fn_mut_open_spec:
    forall self: (), args: tup3_Ghost_ref_LocalInvariant_PermCellLocalInv_T_Ghost_Tokens_closure0, res_state: (), res: (). postcondition_mut_open self args res_state res
      = (postcondition_open self args res /\ self = res_state)
  
  let rec open_ref_Ghost_LocalInvariant_PermCellLocalInv_T (self: t_LocalInvariant_PermCellLocalInv_T)
    (tokens: t_Tokens) (f: closure0) (return (x: ())) = {[@expl:open 'f' type invariant] inv_closure0 f}
    {[@expl:open requires] precondition_open () { f0'0 = new_ref_LocalInvariant_PermCellLocalInv_T self;
                                                  f1'0 = tokens;
                                                  f2'0 = f }}
    any
    [ return (result: ()) -> {postcondition_open () { f0'0 = new_ref_LocalInvariant_PermCellLocalInv_T self;
                                                      f1'0 = tokens;
                                                      f2'0 = f } result}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec write_T (self: t_CellInv_T) (x: t_T) (tokens: t_Tokens) (return (x'0: ())) =
    {[@expl:write 'self' type invariant] inv_ref_CellInv_T self}
    {[@expl:write 'x' type invariant] inv_T x}
    {[@expl:write requires] contains tokens (Namespace_PERMCELL 0)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_7 <- { c0 = self; c1 = x } ] s1
      | s1 = open_ref_Ghost_LocalInvariant_PermCellLocalInv_T {self.permission} {tokens} {_7}
          (fun (_ret: ()) -> [ &_0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: t_CellInv_T = self
    | & x: t_T = x
    | & tokens: t_Tokens = tokens
    | & _7: closure0 = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
