module M_local_invariant_cellinv__qyi5959203038510030748__read [#"local_invariant_cellinv.rs" 37 4 37 65] (* CellInv<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PERMCELL int | Other namespace_other
  
  let%span slocal_invariant_cellinv = "local_invariant_cellinv.rs" 37 24 37 28
  let%span slocal_invariant_cellinv'0 = "local_invariant_cellinv.rs" 36 4 36 44
  let%span slocal_invariant_cellinv'1 = "local_invariant_cellinv.rs" 37 60 37 65
  let%span slocal_invariant_cellinv'2 = "local_invariant_cellinv.rs" 39 26 39 37
  let%span slocal_invariant_cellinv'3 = "local_invariant_cellinv.rs" 39 32 39 36
  let%span slocal_invariant_cellinv'4 = "local_invariant_cellinv.rs" 31 8 31 25
  let%span slocal_invariant_cellinv'5 = "local_invariant_cellinv.rs" 21 8 21 95
  let%span slocal_invariant = "../../creusot-contracts/src/ghost/local_invariant.rs" 278 51 278 52
  let%span slocal_invariant'0 = "../../creusot-contracts/src/ghost/local_invariant.rs" 275 15 275 113
  let%span slocal_invariant'1 = "../../creusot-contracts/src/ghost/local_invariant.rs" 278 4 280 51
  let%span slocal_invariant'2 = "../../creusot-contracts/src/ghost/local_invariant.rs" 276 14 276 121
  let%span slocal_invariant'3 = "../../creusot-contracts/src/ghost/local_invariant.rs" 181 4 181 12
  let%span slocal_invariant'4 = "../../creusot-contracts/src/ghost/local_invariant.rs" 237 4 239 51
  let%span slocal_invariant'5 = "../../creusot-contracts/src/ghost/local_invariant.rs" 237 51 237 52
  let%span slocal_invariant'6 = "../../creusot-contracts/src/ghost/local_invariant.rs" 230 4 230 50
  let%span slocal_invariant'7 = "../../creusot-contracts/src/ghost/local_invariant.rs" 231 15 234 89
  let%span slocal_invariant'8 = "../../creusot-contracts/src/ghost/local_invariant.rs" 235 14 235 102
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 205 22 205 26
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 205 4 207 17
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 203 14 203 29
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 183 15 183 16
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 183 4 185 17
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 193 14 193 26
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 99 8 99 22
  let%span sghost'7 = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'8 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span spermcell = "../../creusot-contracts/src/cell/permcell.rs" 173 39 173 43
  let%span spermcell'0 = "../../creusot-contracts/src/cell/permcell.rs" 171 15 171 37
  let%span spermcell'1 = "../../creusot-contracts/src/cell/permcell.rs" 173 4 173 80
  let%span spermcell'2 = "../../creusot-contracts/src/cell/permcell.rs" 172 14 172 30
  let%span spermcell'3 = "../../creusot-contracts/src/cell/permcell.rs" 34 4 34 12
  let%span spermcell'4 = "../../creusot-contracts/src/cell/permcell.rs" 62 20 62 46
  let%span sset = "../../creusot-contracts/src/logic/set.rs" 31 8 31 26
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span sops = "../../creusot-contracts/src/std/ops.rs" 169 14 169 114
  let%span sops'0 = "../../creusot-contracts/src/std/ops.rs" 174 14 174 100
  let%span sops'1 = "../../creusot-contracts/src/std/ops.rs" 179 14 179 61
  let%span sops'2 = "../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'3 = "../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'4 = "../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'5 = "../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'6 = "../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'7 = "../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'8 = "../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 95 8 95 18
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  let%span smodel = "../../creusot-contracts/src/model.rs" 45 8 45 22
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use set.Set
  
  type t_PermCellOwn
  
  type t_PermCellLocalInv = { t_PermCellLocalInv__0: t_PermCellOwn }
  
  type t_T
  
  predicate invariant' (self: t_T)
  
  predicate inv (_0: t_T)
  
  axiom inv_axiom: forall x: t_T [inv x]. inv x -> invariant' x
  
  predicate invariant''0 (self: t_T) = [%#sinvariant] inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  function val' (self: t_PermCellOwn) : t_T
  
  predicate invariant''1 (self: t_PermCellOwn) = [%#spermcell'4] inv'0 (val' self)
  
  predicate inv'1 (_0: t_PermCellOwn)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellOwn [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate inv'2 (_0: t_PermCellLocalInv)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PermCellLocalInv [inv'2 x]. inv'2 x
      = match x with
        | {t_PermCellLocalInv__0 = a_0} -> inv'1 a_0
        end
  
  predicate invariant''2 (self: MutBorrow.t t_PermCellLocalInv) =
    [%#sinvariant'0] inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: MutBorrow.t t_PermCellLocalInv)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_PermCellLocalInv [inv'3 x]. inv'3 x = invariant''2 x
  
  predicate invariant''3 (self: MutBorrow.t t_PermCellLocalInv) = [%#sghost'8] inv'3 self
  
  predicate inv'4 (_0: MutBorrow.t t_PermCellLocalInv)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_PermCellLocalInv [inv'4 x]. inv'4 x = invariant''3 x
  
  let rec into_inner (self: MutBorrow.t t_PermCellLocalInv) (return' (x: MutBorrow.t t_PermCellLocalInv)) =
    {[@expl:into_inner 'self' type invariant] [%#sghost] inv'4 self}
    any
    [ return''0 (result: MutBorrow.t t_PermCellLocalInv) -> {[%#sghost'0] inv'3 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t t_PermCellLocalInv) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t t_PermCellLocalInv) = resolve _0
  
  predicate invariant''4 (self: t_PermCellOwn) = [%#sinvariant] inv'1 self
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 (_0: t_PermCellOwn)
  
  axiom inv_axiom'5 [@rewrite]: forall x: t_PermCellOwn [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate invariant''5 (self: t_PermCellOwn) = [%#sghost'8] inv'5 self
  
  predicate inv'6 (_0: t_PermCellOwn)
  
  axiom inv_axiom'6 [@rewrite]: forall x: t_PermCellOwn [inv'6 x]. inv'6 x = invariant''5 x
  
  let rec new (x: t_PermCellOwn) (return' (x'0: t_PermCellOwn)) = {[@expl:new 'x' type invariant] [%#sghost'2] inv'5 x}
    any
    [ return''0 (result: t_PermCellOwn) -> {[%#sghost'3] inv'6 result} {[%#sghost'4] result = x} (! return' {result}) ]
  
  type t_PermCell
  
  type t_LocalInvariant
  
  type t_CellInv = { t_CellInv__data: t_PermCell; t_CellInv__permission: t_LocalInvariant }
  
  type closure0 = { _0: t_CellInv }
  
  type t_Id
  
  function id (self: t_PermCell) : t_Id
  
  function id'0 (self: t_PermCellOwn) : t_Id
  
  function view (self: t_PermCellOwn) : t_T = [%#spermcell'3] val' self
  
  function view'0 (self: t_PermCellOwn) : t_T = [%#smodel] view self
  
  function view'1 (self: t_PermCellOwn) : t_T = [%#sghost'6] view'0 self
  
  let rec borrow (self: t_PermCell) (perm: t_PermCellOwn) (return' (x: t_T)) =
    {[@expl:borrow 'perm' type invariant] [%#spermcell] inv'6 perm}
    {[@expl:borrow requires] [%#spermcell'0] id self = id'0 perm}
    any
    [ return''0 (result: t_T) -> {[%#spermcell'1] inv'0 result}
      {[%#spermcell'2] result = view'1 perm}
      (! return' {result}) ]
  
  function namespace (self: t_LocalInvariant) : t_Namespace
  
  function public (self: t_LocalInvariant) : t_Id
  
  predicate invariant''6 [#"local_invariant_cellinv.rs" 20 4 20 30] (self: t_CellInv) =
    [%#slocal_invariant_cellinv'5] namespace self.t_CellInv__permission = Namespace_PERMCELL 0
    /\ public self.t_CellInv__permission = id self.t_CellInv__data
  
  predicate inv'7 (_0'0: t_CellInv)
  
  axiom inv_axiom'7 [@rewrite]: forall x: t_CellInv [inv'7 x]. inv'7 x
      = (invariant''6 x
      /\ match x with
        | {t_CellInv__data = data; t_CellInv__permission = permission} -> true
        end)
  
  predicate invariant''7 (self: t_CellInv) = [%#sinvariant] inv'7 self
  
  meta "rewrite_def" predicate invariant''7
  
  predicate inv'8 (_0'0: t_CellInv)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_CellInv [inv'8 x]. inv'8 x = invariant''7 x
  
  predicate inv'9 (_0'0: closure0)
  
  axiom inv_axiom'9 [@rewrite]: forall x: closure0 [inv'9 x]. inv'9 x = (let {_0 = x0} = x in inv'8 x0)
  
  let rec closure0 [#"local_invariant_cellinv.rs" 39 26 39 37] [@coma:extspec] (self: closure0)
    (perm: MutBorrow.t t_PermCellLocalInv) (return' (x: t_T)) = bb0
    [ bb0 = s0
      [ s0 = into_inner {perm'0} (fun (_ret: MutBorrow.t t_PermCellLocalInv) -> [ &_7 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &_6 <- (_7.current).t_PermCellLocalInv__0 ] s1
      | s1 = {[@expl:type invariant] inv'3 _7} s2
      | s2 = -{resolve'0 _7}- s3
      | s3 = new {_6} (fun (_ret: t_PermCellOwn) -> [ &_4 <- _ret ] s4)
      | s4 = bb2 ]
    | bb2 = s0 [ s0 = borrow {(_1._0).t_CellInv__data} {_4} (fun (_ret: t_T) -> [ &_0'0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return' {_0'0} ]
    [ & _0'0: t_T = Any.any_l ()
    | & _1: closure0 = self
    | & perm'0: MutBorrow.t t_PermCellLocalInv = perm
    | & _4: t_PermCellOwn = Any.any_l ()
    | & _6: t_PermCellOwn = Any.any_l ()
    | & _7: MutBorrow.t t_PermCellLocalInv = Any.any_l () ]
  
  type t_Tokens
  
  type tuple = { _p0: t_LocalInvariant; _p1: t_Tokens; _p2: closure0 }
  
  predicate protocol [#"local_invariant_cellinv.rs" 30 4 30 37] (self: t_PermCellLocalInv) (id'1: t_Id) =
    [%#slocal_invariant_cellinv'4] id'0 self.t_PermCellLocalInv__0 = id'1
  
  predicate precondition (self: closure0) (args: MutBorrow.t t_PermCellLocalInv) =
    [%#slocal_invariant_cellinv'2] let perm = args in closure0'pre self perm
  
  predicate postcondition_once (self: closure0) (args: MutBorrow.t t_PermCellLocalInv) (result: t_T) =
    [%#slocal_invariant_cellinv'2] let perm = args in closure0'post'return' self perm result
  
  function fin (self: MutBorrow.t t_PermCellLocalInv) : t_PermCellLocalInv = [%#sghost'7] self.final
  
  predicate contains [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) = [%#sset] Set.mem e self
  
  function namespaces (self: t_Tokens) : Set.set t_Namespace
  
  predicate contains'0 (self: t_Tokens) (namespace'0: t_Namespace) =
    [%#slocal_invariant'3] contains (namespaces self) namespace'0
  
  predicate precondition'0 (self: ()) (args: tuple) =
    [%#slocal_invariant'4] let {_p0 = self'0; _p1 = tokens; _p2 = f} = args in (forall t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self'0)
          /\ inv'4 t
        -> precondition f t /\ (forall res: t_T. postcondition_once f t res -> protocol (fin t) (public self'0)))
    /\ contains'0 tokens (namespace self'0) /\ inv'9 f
  
  let rec open (self: t_LocalInvariant) (tokens: t_Tokens) (f: closure0) (return' (x: t_T)) =
    {[@expl:open 'f' type invariant] [%#slocal_invariant'5] inv'9 f}
    {[@expl:open requires #0] [%#slocal_invariant'6] contains'0 tokens (namespace self)}
    {[@expl:open requires #1] [%#slocal_invariant'7] forall t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self)
        /\ inv'4 t
      -> precondition f t /\ (forall res: t_T. postcondition_once f t res -> protocol (fin t) (public self))}
    any
    [ return''0 (result: t_T) -> {[%#slocal_invariant'4] inv'0 result}
      {[%#slocal_invariant'8] exists t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self)
        /\ postcondition_once f t result}
      (! return' {result}) ]
  
  function new_logic (x: t_LocalInvariant) : t_LocalInvariant
  
  axiom new_logic_spec: forall x: t_LocalInvariant. [%#sghost'5] new_logic x = x
  
  predicate postcondition_once'0 (self: ()) (args: tuple) (result: t_T) =
    [%#slocal_invariant'4] let {_p0 = self'0; _p1 = tokens; _p2 = f} = args in (exists t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self'0)
        /\ postcondition_once f t result)
    /\ inv'0 result
  
  predicate resolve'1 (_0'0: ()) = true
  
  predicate postcondition_mut (self: ()) (args: tuple) (result_state: ()) (result: t_T) =
    [%#slocal_invariant'4] let {_p0 = self'0; _p1 = tokens; _p2 = f} = args in (exists t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self'0)
        /\ postcondition_once f t result)
    /\ inv'0 result
  
  function fn_mut_once (self: ()) (args: tuple) (res: t_T) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: tuple, res: t_T. [%#sops'8] postcondition_once'0 self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) = true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: tuple) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: tuple, res_state: (), res: t_T. ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: tuple) (result: t_T) =
    [%#slocal_invariant'4] let {_p0 = self'0; _p1 = tokens; _p2 = f} = args in (exists t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self'0)
        /\ postcondition_once f t result)
    /\ inv'0 result
  
  function fn_once (self: ()) (args: tuple) (res: t_T) : ()
  
  axiom fn_once_spec: forall self: (), args: tuple, res: t_T. [%#sops'0] postcondition_once'0 self args res
      = (postcondition self args res /\ resolve'1 self)
  
  function fn_mut (self: ()) (args: tuple) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: tuple, res_state: (), res: t_T. [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec open'0 (self: t_LocalInvariant) (tokens: t_Tokens) (f: closure0) (return' (x: t_T)) =
    {[@expl:open 'f' type invariant] [%#slocal_invariant] inv'9 f}
    {[@expl:open requires] [%#slocal_invariant'0] precondition'0 () { _p0 = new_logic self; _p1 = tokens; _p2 = f }}
    any
    [ return''0 (result: t_T) -> {[%#slocal_invariant'1] inv'0 result}
      {[%#slocal_invariant'2] postcondition () { _p0 = new_logic self; _p1 = tokens; _p2 = f } result}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec read [#"local_invariant_cellinv.rs" 37 4 37 65] (self: t_CellInv) (tokens: t_Tokens) (return' (x: t_T)) =
    {[@expl:read 'self' type invariant] [%#slocal_invariant_cellinv] inv'8 self}
    {[@expl:read requires] [%#slocal_invariant_cellinv'0] contains'0 tokens (Namespace_PERMCELL 0)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_7 <- { _0 = self'0 } ] s1
      | s1 = open'0 {self'0.t_CellInv__permission} {tokens'0} {_7} (fun (_ret: t_T) -> [ &_4 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0'0 <- _4 ] s1 | s1 = return''0 {_0'0} ] ]
    [ & _0'0: t_T = Any.any_l ()
    | & self'0: t_CellInv = self
    | & tokens'0: t_Tokens = tokens
    | & _4: t_T = Any.any_l ()
    | & _7: closure0 = Any.any_l () ])
    [ return''0 (result: t_T) -> {[@expl:read result type invariant] [%#slocal_invariant_cellinv'1] inv'0 result}
      (! return' {result}) ]
end
module M_local_invariant_cellinv__qyi5959203038510030748__write [#"local_invariant_cellinv.rs" 43 4 43 52] (* CellInv<T> *)
  type namespace_other
  
  type t_Namespace = Namespace_PERMCELL int | Other namespace_other
  
  let%span slocal_invariant_cellinv = "local_invariant_cellinv.rs" 43 18 43 22
  let%span slocal_invariant_cellinv'0 = "local_invariant_cellinv.rs" 43 24 43 25
  let%span slocal_invariant_cellinv'1 = "local_invariant_cellinv.rs" 42 4 42 44
  let%span slocal_invariant_cellinv'2 = "local_invariant_cellinv.rs" 44 37 44 48
  let%span slocal_invariant_cellinv'3 = "local_invariant_cellinv.rs" 44 43 44 47
  let%span slocal_invariant_cellinv'4 = "local_invariant_cellinv.rs" 31 8 31 25
  let%span slocal_invariant_cellinv'5 = "local_invariant_cellinv.rs" 21 8 21 95
  let%span slocal_invariant = "../../creusot-contracts/src/ghost/local_invariant.rs" 278 51 278 52
  let%span slocal_invariant'0 = "../../creusot-contracts/src/ghost/local_invariant.rs" 275 15 275 113
  let%span slocal_invariant'1 = "../../creusot-contracts/src/ghost/local_invariant.rs" 276 14 276 121
  let%span slocal_invariant'2 = "../../creusot-contracts/src/ghost/local_invariant.rs" 181 4 181 12
  let%span slocal_invariant'3 = "../../creusot-contracts/src/ghost/local_invariant.rs" 237 4 239 51
  let%span slocal_invariant'4 = "../../creusot-contracts/src/ghost/local_invariant.rs" 237 51 237 52
  let%span slocal_invariant'5 = "../../creusot-contracts/src/ghost/local_invariant.rs" 230 4 230 50
  let%span slocal_invariant'6 = "../../creusot-contracts/src/ghost/local_invariant.rs" 231 15 234 89
  let%span slocal_invariant'7 = "../../creusot-contracts/src/ghost/local_invariant.rs" 235 14 235 102
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 205 22 205 26
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 205 4 207 17
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 203 14 203 29
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 183 15 183 16
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 183 4 185 17
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 181 14 181 26
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 193 14 193 26
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 109 20 109 27
  let%span sghost'7 = "../../creusot-contracts/src/ghost.rs" 99 8 99 22
  let%span sghost'8 = "../../creusot-contracts/src/ghost.rs" 119 8 119 18
  let%span spermcell = "../../creusot-contracts/src/cell/permcell.rs" 195 43 195 47
  let%span spermcell'0 = "../../creusot-contracts/src/cell/permcell.rs" 191 15 191 37
  let%span spermcell'1 = "../../creusot-contracts/src/cell/permcell.rs" 195 4 195 92
  let%span spermcell'2 = "../../creusot-contracts/src/cell/permcell.rs" 192 14 192 39
  let%span spermcell'3 = "../../creusot-contracts/src/cell/permcell.rs" 193 14 193 30
  let%span spermcell'4 = "../../creusot-contracts/src/cell/permcell.rs" 194 14 194 33
  let%span spermcell'5 = "../../creusot-contracts/src/cell/permcell.rs" 34 4 34 12
  let%span spermcell'6 = "../../creusot-contracts/src/cell/permcell.rs" 62 20 62 46
  let%span sset = "../../creusot-contracts/src/logic/set.rs" 31 8 31 26
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 52 20 52 34
  let%span sops = "../../creusot-contracts/src/std/ops.rs" 169 14 169 114
  let%span sops'0 = "../../creusot-contracts/src/std/ops.rs" 174 14 174 100
  let%span sops'1 = "../../creusot-contracts/src/std/ops.rs" 179 14 179 61
  let%span sops'2 = "../../creusot-contracts/src/std/ops.rs" 133 4 133 61
  let%span sops'3 = "../../creusot-contracts/src/std/ops.rs" 134 4 134 40
  let%span sops'4 = "../../creusot-contracts/src/std/ops.rs" 139 4 139 35
  let%span sops'5 = "../../creusot-contracts/src/std/ops.rs" 144 4 144 33
  let%span sops'6 = "../../creusot-contracts/src/std/ops.rs" 145 4 145 30
  let%span sops'7 = "../../creusot-contracts/src/std/ops.rs" 146 4 146 32
  let%span sops'8 = "../../creusot-contracts/src/std/ops.rs" 151 14 152 104
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 95 8 95 18
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 106 20 106 44
  let%span smodel = "../../creusot-contracts/src/model.rs" 63 8 63 22
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use set.Set
  
  type t_PermCellOwn
  
  type t_PermCellLocalInv = { t_PermCellLocalInv__0: t_PermCellOwn }
  
  type t_T
  
  predicate invariant' (self: t_T)
  
  predicate inv (_0: t_T)
  
  axiom inv_axiom: forall x: t_T [inv x]. inv x -> invariant' x
  
  predicate invariant''0 (self: t_T) = [%#sinvariant] inv self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant''0 x
  
  function val' (self: t_PermCellOwn) : t_T
  
  predicate invariant''1 (self: t_PermCellOwn) = [%#spermcell'6] inv'0 (val' self)
  
  predicate inv'1 (_0: t_PermCellOwn)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_PermCellOwn [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate inv'2 (_0: t_PermCellLocalInv)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_PermCellLocalInv [inv'2 x]. inv'2 x
      = match x with
        | {t_PermCellLocalInv__0 = a_0} -> inv'1 a_0
        end
  
  predicate invariant''2 (self: MutBorrow.t t_PermCellLocalInv) =
    [%#sinvariant'0] inv'2 self.current /\ inv'2 self.final
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'3 (_0: MutBorrow.t t_PermCellLocalInv)
  
  axiom inv_axiom'3 [@rewrite]: forall x: MutBorrow.t t_PermCellLocalInv [inv'3 x]. inv'3 x = invariant''2 x
  
  predicate invariant''3 (self: MutBorrow.t t_PermCellLocalInv) = [%#sghost'8] inv'3 self
  
  predicate inv'4 (_0: MutBorrow.t t_PermCellLocalInv)
  
  axiom inv_axiom'4 [@rewrite]: forall x: MutBorrow.t t_PermCellLocalInv [inv'4 x]. inv'4 x = invariant''3 x
  
  let rec into_inner (self: MutBorrow.t t_PermCellLocalInv) (return' (x: MutBorrow.t t_PermCellLocalInv)) =
    {[@expl:into_inner 'self' type invariant] [%#sghost] inv'4 self}
    any
    [ return''0 (result: MutBorrow.t t_PermCellLocalInv) -> {[%#sghost'0] inv'3 result}
      {[%#sghost'1] result = self}
      (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t t_PermCellLocalInv) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t t_PermCellLocalInv) = resolve _0
  
  predicate invariant''4 (self: MutBorrow.t t_PermCellOwn) = [%#sinvariant'0] inv'1 self.current /\ inv'1 self.final
  
  meta "rewrite_def" predicate invariant''4
  
  predicate inv'5 (_0: MutBorrow.t t_PermCellOwn)
  
  axiom inv_axiom'5 [@rewrite]: forall x: MutBorrow.t t_PermCellOwn [inv'5 x]. inv'5 x = invariant''4 x
  
  predicate resolve'1 (self: MutBorrow.t t_PermCellOwn) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: MutBorrow.t t_PermCellOwn) = resolve'1 _0
  
  predicate invariant''5 (self: MutBorrow.t t_PermCellOwn) = [%#sghost'8] inv'5 self
  
  predicate inv'6 (_0: MutBorrow.t t_PermCellOwn)
  
  axiom inv_axiom'6 [@rewrite]: forall x: MutBorrow.t t_PermCellOwn [inv'6 x]. inv'6 x = invariant''5 x
  
  let rec new (x: MutBorrow.t t_PermCellOwn) (return' (x'0: MutBorrow.t t_PermCellOwn)) =
    {[@expl:new 'x' type invariant] [%#sghost'2] inv'5 x}
    any
    [ return''0 (result: MutBorrow.t t_PermCellOwn) -> {[%#sghost'3] inv'6 result}
      {[%#sghost'4] result = x}
      (! return' {result}) ]
  
  type t_PermCell
  
  type t_LocalInvariant
  
  type t_CellInv = { t_CellInv__data: t_PermCell; t_CellInv__permission: t_LocalInvariant }
  
  type closure0 = { _0: t_CellInv; _1: t_T }
  
  type t_Id
  
  function id (self: t_PermCell) : t_Id
  
  function id'0 (self: t_PermCellOwn) : t_Id
  
  predicate invariant''6 (self: MutBorrow.t t_T) = [%#sinvariant'0] inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant''6
  
  predicate inv'7 (_0'0: MutBorrow.t t_T)
  
  axiom inv_axiom'7 [@rewrite]: forall x: MutBorrow.t t_T [inv'7 x]. inv'7 x = invariant''6 x
  
  function fin (self: MutBorrow.t t_PermCellOwn) : t_PermCellOwn = [%#sghost'6] self.final
  
  function view (self: t_PermCellOwn) : t_T = [%#spermcell'5] val' self
  
  function view'0 (self: MutBorrow.t t_PermCellOwn) : t_T = [%#smodel] view self.current
  
  function view'1 (self: MutBorrow.t t_PermCellOwn) : t_T = [%#sghost'7] view'0 self
  
  let rec borrow_mut (self: t_PermCell) (perm: MutBorrow.t t_PermCellOwn) (return' (x: MutBorrow.t t_T)) =
    {[@expl:borrow_mut 'perm' type invariant] [%#spermcell] inv'6 perm}
    {[@expl:borrow_mut requires] [%#spermcell'0] id self = id'0 perm.current}
    any
    [ return''0 (result: MutBorrow.t t_T) -> {[%#spermcell'1] inv'7 result}
      {[%#spermcell'2] id self = id'0 (fin perm)}
      {[%#spermcell'3] result.current = view'1 perm}
      {[%#spermcell'4] result.final = view (fin perm)}
      (! return' {result}) ]
  
  predicate resolve'3 (_0'0: t_T)
  
  predicate resolve'4 (self: MutBorrow.t t_T) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'4
  
  predicate resolve'5 (_0'0: MutBorrow.t t_T) = resolve'4 _0'0
  
  function namespace (self: t_LocalInvariant) : t_Namespace
  
  function public (self: t_LocalInvariant) : t_Id
  
  predicate invariant''7 [#"local_invariant_cellinv.rs" 20 4 20 30] (self: t_CellInv) =
    [%#slocal_invariant_cellinv'5] namespace self.t_CellInv__permission = Namespace_PERMCELL 0
    /\ public self.t_CellInv__permission = id self.t_CellInv__data
  
  predicate inv'8 (_0'0: t_CellInv)
  
  axiom inv_axiom'8 [@rewrite]: forall x: t_CellInv [inv'8 x]. inv'8 x
      = (invariant''7 x
      /\ match x with
        | {t_CellInv__data = data; t_CellInv__permission = permission} -> true
        end)
  
  predicate invariant''8 (self: t_CellInv) = [%#sinvariant] inv'8 self
  
  meta "rewrite_def" predicate invariant''8
  
  predicate inv'9 (_0'0: t_CellInv)
  
  axiom inv_axiom'9 [@rewrite]: forall x: t_CellInv [inv'9 x]. inv'9 x = invariant''8 x
  
  predicate inv'10 (_0'0: closure0)
  
  axiom inv_axiom'10 [@rewrite]: forall x: closure0 [inv'10 x]. inv'10 x
      = (let {_0 = x0; _1 = x1} = x in inv'9 x0 /\ inv x1)
  
  let rec closure0 [#"local_invariant_cellinv.rs" 44 37 44 48] [@coma:extspec] (self: closure0)
    (perm: MutBorrow.t t_PermCellLocalInv) (return' (x: ())) = bb0
    [ bb0 = s0
      [ s0 = into_inner {perm'0} (fun (_ret: MutBorrow.t t_PermCellLocalInv) -> [ &_10 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {inv'1 (_10.current).t_PermCellLocalInv__0}
        MutBorrow.borrow_final <t_PermCellOwn> {(_10.current).t_PermCellLocalInv__0}
          {MutBorrow.inherit_id (MutBorrow.get_id _10) 1}
          (fun (_ret: MutBorrow.t t_PermCellOwn) ->
            [ &_9 <- _ret ] -{inv'1 _ret.final}-
            [ &_10 <- { _10 with current = { t_PermCellLocalInv__0 = _ret.final } } ] s1)
      | s1 = {inv'1 _9.current}
        MutBorrow.borrow_final <t_PermCellOwn> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret: MutBorrow.t t_PermCellOwn) ->
            [ &_8 <- _ret ] -{inv'1 _ret.final}-
            [ &_9 <- { _9 with current = _ret.final } ] s2)
      | s2 = {[@expl:type invariant] inv'3 _10} s3
      | s3 = -{resolve'0 _10}- s4
      | s4 = {[@expl:type invariant] inv'5 _9} s5
      | s5 = -{resolve'2 _9}- s6
      | s6 = {inv'1 _8.current}
        MutBorrow.borrow_final <t_PermCellOwn> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret: MutBorrow.t t_PermCellOwn) ->
            [ &_7 <- _ret ] -{inv'1 _ret.final}-
            [ &_8 <- { _8 with current = _ret.final } ] s7)
      | s7 = new {_7} (fun (_ret: MutBorrow.t t_PermCellOwn) -> [ &_6 <- _ret ] s8)
      | s8 = bb2 ]
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'5 _8} s1
      | s1 = -{resolve'2 _8}- s2
      | s2 = borrow_mut {(_1'0._0).t_CellInv__data} {_6} (fun (_ret: MutBorrow.t t_T) -> [ &_4 <- _ret ] s3)
      | s3 = bb4 ]
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv _4.current} s1
      | s1 = -{resolve'3 _4.current}- s2
      | s2 = [ &_4 <- { _4 with current = _1'0._1 } ] s3
      | s3 = {[@expl:type invariant] inv'7 _4} s4
      | s4 = -{resolve'5 _4}- s5
      | s5 = bb7 ]
    | bb7 = return' {_0'0} ]
    [ & _0'0: () = Any.any_l ()
    | & _1'0: closure0 = self
    | & perm'0: MutBorrow.t t_PermCellLocalInv = perm
    | & _4: MutBorrow.t t_T = Any.any_l ()
    | & _6: MutBorrow.t t_PermCellOwn = Any.any_l ()
    | & _7: MutBorrow.t t_PermCellOwn = Any.any_l ()
    | & _8: MutBorrow.t t_PermCellOwn = Any.any_l ()
    | & _9: MutBorrow.t t_PermCellOwn = Any.any_l ()
    | & _10: MutBorrow.t t_PermCellLocalInv = Any.any_l () ]
  
  type t_Tokens
  
  type tuple = { _p0: t_LocalInvariant; _p1: t_Tokens; _p2: closure0 }
  
  predicate protocol [#"local_invariant_cellinv.rs" 30 4 30 37] (self: t_PermCellLocalInv) (id'1: t_Id) =
    [%#slocal_invariant_cellinv'4] id'0 self.t_PermCellLocalInv__0 = id'1
  
  predicate precondition (self: closure0) (args: MutBorrow.t t_PermCellLocalInv) =
    [%#slocal_invariant_cellinv'2] let perm = args in closure0'pre self perm
  
  predicate postcondition_once (self: closure0) (args: MutBorrow.t t_PermCellLocalInv) (result: ()) =
    [%#slocal_invariant_cellinv'2] let perm = args in closure0'post'return' self perm result
  
  function fin'0 (self: MutBorrow.t t_PermCellLocalInv) : t_PermCellLocalInv = [%#sghost'6] self.final
  
  predicate contains [@inline:trivial] (self: Set.set t_Namespace) (e: t_Namespace) = [%#sset] Set.mem e self
  
  function namespaces (self: t_Tokens) : Set.set t_Namespace
  
  predicate contains'0 (self: t_Tokens) (namespace'0: t_Namespace) =
    [%#slocal_invariant'2] contains (namespaces self) namespace'0
  
  predicate precondition'0 (self: ()) (args: tuple) =
    [%#slocal_invariant'3] let {_p0 = self'0; _p1 = tokens; _p2 = f} = args in (forall t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self'0)
          /\ inv'4 t
        -> precondition f t /\ (forall res: (). postcondition_once f t res -> protocol (fin'0 t) (public self'0)))
    /\ contains'0 tokens (namespace self'0) /\ inv'10 f
  
  let rec open (self: t_LocalInvariant) (tokens: t_Tokens) (f: closure0) (return' (x: ())) =
    {[@expl:open 'f' type invariant] [%#slocal_invariant'4] inv'10 f}
    {[@expl:open requires #0] [%#slocal_invariant'5] contains'0 tokens (namespace self)}
    {[@expl:open requires #1] [%#slocal_invariant'6] forall t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self)
        /\ inv'4 t
      -> precondition f t /\ (forall res: (). postcondition_once f t res -> protocol (fin'0 t) (public self))}
    any
    [ return''0 (result: ()) ->
    {[%#slocal_invariant'7] exists t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self)
        /\ postcondition_once f t result}
      (! return' {result}) ]
  
  function new_logic (x: t_LocalInvariant) : t_LocalInvariant
  
  axiom new_logic_spec: forall x: t_LocalInvariant. [%#sghost'5] new_logic x = x
  
  predicate postcondition_once'0 (self: ()) (args: tuple) (result: ()) =
    [%#slocal_invariant'3] let {_p0 = self'0; _p1 = tokens; _p2 = f} = args in exists t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self'0)
      /\ postcondition_once f t result
  
  predicate resolve'6 (_0'0: ()) = true
  
  predicate postcondition_mut (self: ()) (args: tuple) (result_state: ()) (result: ()) =
    [%#slocal_invariant'3] let {_p0 = self'0; _p1 = tokens; _p2 = f} = args in exists t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self'0)
      /\ postcondition_once f t result
  
  function fn_mut_once (self: ()) (args: tuple) (res: ()) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: tuple, res: (). [%#sops'8] postcondition_once'0 self args res
      = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'6 res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) = true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
      -> ([%#sops'6] hist_inv b c) -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: tuple) (res_state: ()) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: (), args: tuple, res_state: (), res: (). ([%#sops'2] postcondition_mut self args res_state res)
      -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: tuple) (result: ()) =
    [%#slocal_invariant'3] let {_p0 = self'0; _p1 = tokens; _p2 = f} = args in exists t: MutBorrow.t t_PermCellLocalInv. protocol t.current (public self'0)
      /\ postcondition_once f t result
  
  function fn_once (self: ()) (args: tuple) (res: ()) : ()
  
  axiom fn_once_spec: forall self: (), args: tuple, res: (). [%#sops'0] postcondition_once'0 self args res
      = (postcondition self args res /\ resolve'6 self)
  
  function fn_mut (self: ()) (args: tuple) (res_state: ()) (res: ()) : ()
  
  axiom fn_mut_spec:
    forall self: (), args: tuple, res_state: (), res: (). [%#sops] postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec open'0 (self: t_LocalInvariant) (tokens: t_Tokens) (f: closure0) (return' (x: ())) =
    {[@expl:open 'f' type invariant] [%#slocal_invariant] inv'10 f}
    {[@expl:open requires] [%#slocal_invariant'0] precondition'0 () { _p0 = new_logic self; _p1 = tokens; _p2 = f }}
    any
    [ return''0 (result: ()) -> {[%#slocal_invariant'1] postcondition () { _p0 = new_logic self;
                                                                           _p1 = tokens;
                                                                           _p2 = f } result}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec write [#"local_invariant_cellinv.rs" 43 4 43 52] (self: t_CellInv) (x: t_T) (tokens: t_Tokens)
    (return' (x'0: ())) = {[@expl:write 'self' type invariant] [%#slocal_invariant_cellinv] inv'9 self}
    {[@expl:write 'x' type invariant] [%#slocal_invariant_cellinv'0] inv x}
    {[@expl:write requires] [%#slocal_invariant_cellinv'1] contains'0 tokens (Namespace_PERMCELL 0)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_7 <- { _0 = self'0; _1 = x'0 } ] s1
      | s1 = open'0 {self'0.t_CellInv__permission} {tokens'0} {_7} (fun (_ret: ()) -> [ &_0'0 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = return''0 {_0'0} ]
    [ & _0'0: () = Any.any_l ()
    | & self'0: t_CellInv = self
    | & x'0: t_T = x
    | & tokens'0: t_Tokens = tokens
    | & _7: closure0 = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
