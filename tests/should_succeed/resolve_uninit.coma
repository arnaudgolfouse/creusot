module M_resolve_uninit__maybe_uninit [#"resolve_uninit.rs" 5 0 5 51]
  let%span sresolve_uninit = "resolve_uninit.rs" 5 41 5 42
  let%span sresolve_uninit'0 = "resolve_uninit.rs" 5 50 5 51
  let%span sresolve_uninit'1 = "resolve_uninit.rs" 1 0 139 4
  
  use creusot.prelude.Any
  
  type t_T
  
  predicate precondition (self: ()) (args: ())
  
  axiom precondition_fndef: [%#sresolve_uninit'1] forall args: () [precondition () args]. (let () = args in true)
   -> precondition () args
  
  predicate inv (_0: t_T)
  
  predicate postcondition_once (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef: [%#sresolve_uninit'1] forall args: (), res: t_T [postcondition_once () args res]. postcondition_once () args res
   -> (let () = args in inv res)
  
  let rec default (return'  (x:t_T))= {[@expl:default requires] precondition () ()}
    any [ return''0 (result:t_T)-> {postcondition_once () () result} (! return' {result}) ] 
  
  predicate resolve (_0: t_T)
  
  meta "compute_max_steps" 1000000
  
  let rec maybe_uninit[#"resolve_uninit.rs" 5 0 5 51] (b:bool) (y:t_T) (return'  (x:t_T))= {[@expl:maybe_uninit 'y' type invariant] [%#sresolve_uninit] inv y}
    (! bb0
    [ bb0 = any [ br0 -> {b'0 = false} (! bb8) | br1 -> {b'0} (! bb1) ] 
    | bb1 = s0 [ s0 = default (fun (_ret:t_T) ->  [ &_6 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &x <- _6 ] s1 | s1 = {[@expl:type invariant] inv x} s2 | s2 = -{resolve x}- s3 | s3 = bb8 ] 
    | bb8 = s0 [ s0 =  [ &x <- y'0 ] s1 | s1 = bb10 ] 
    | bb10 = s0 [ s0 =  [ &_0 <- x ] s1 | s1 = bb12 ] 
    | bb12 = return''0 {_0} ]
    )
    [ & _0: t_T = Any.any_l () | & b'0: bool = b | & y'0: t_T = y | & x: t_T = Any.any_l () | & _6: t_T = Any.any_l () ]
    
    [ return''0 (result:t_T)-> {[@expl:maybe_uninit result type invariant] [%#sresolve_uninit'0] inv result}
      (! return' {result}) ]

end
module M_resolve_uninit__init_join [#"resolve_uninit.rs" 15 0 15 37]
  let%span sresolve_uninit = "resolve_uninit.rs" 27 9 27 10
  let%span sresolve_uninit'0 = "resolve_uninit.rs" 28 17 28 18
  let%span sresolve_uninit'1 = "resolve_uninit.rs" 28 4 28 19
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec init_join[#"resolve_uninit.rs" 15 0 15 37] (b:bool) (x:Int32.t) (return'  (x'0:()))= (! bb0
    [ bb0 = any [ br0 -> {b'0 = false} (! bb2) | br1 -> {b'0} (! bb1) ] 
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {x'0}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_8 <- _ret ]  [ &x'0 <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_7 <- _ret ]  [ &_8 <- { _8 with current = _ret.final } ] s2)
      | s2 =  [ &z <- _7 ] s3
      | s3 = -{resolve'0 _8}- s4
      | s4 = MutBorrow.borrow_final <Int32.t> {z.current} {MutBorrow.get_id z}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_10 <- _ret ]  [ &z <- { z with current = _ret.final } ] s5)
      | s5 = MutBorrow.borrow_final <Int32.t> {_10.current} {MutBorrow.get_id _10}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_9 <- _ret ]  [ &_10 <- { _10 with current = _ret.final } ] s6)
      | s6 =  [ &y <- _9 ] s7
      | s7 = -{resolve'0 _10}- s8
      | s8 = bb7 ]
    
    | bb7 = s0 [ s0 = -{resolve'0 z}- s1 | s1 = bb3 ] 
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {x'0}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_12 <- _ret ]  [ &x'0 <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_12.current} {MutBorrow.get_id _12}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_11 <- _ret ]  [ &_12 <- { _12 with current = _ret.final } ] s2)
      | s2 =  [ &y <- _11 ] s3
      | s3 = -{resolve'0 _12}- s4
      | s4 = bb3 ]
    
    | bb3 = s0
      [ s0 =  [ &y <- { y with current = ([%#sresolve_uninit] (5: Int32.t)) } ] s1
      | s1 = -{resolve'0 y}- s2
      | s2 =  [ &_14 <- x'0 = ([%#sresolve_uninit'0] (5: Int32.t)) ] s3
      | s3 = any [ br0 -> {_14 = false} (! bb5) | br1 -> {_14} (! bb4) ]  ]
    
    | bb4 = return''0 {_0}
    | bb5 = {[%#sresolve_uninit'1] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & b'0: bool = b
    | & x'0: Int32.t = x
    | & y: MutBorrow.t Int32.t = Any.any_l ()
    | & z: MutBorrow.t Int32.t = Any.any_l ()
    | & _7: MutBorrow.t Int32.t = Any.any_l ()
    | & _8: MutBorrow.t Int32.t = Any.any_l ()
    | & _9: MutBorrow.t Int32.t = Any.any_l ()
    | & _10: MutBorrow.t Int32.t = Any.any_l ()
    | & _11: MutBorrow.t Int32.t = Any.any_l ()
    | & _12: MutBorrow.t Int32.t = Any.any_l ()
    | & _14: bool = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
