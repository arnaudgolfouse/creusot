module M_impl_FakeFnOnce_for_AddsTwo__call (* <AddsTwo<'a> as FakeFnOnce> *)
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MutexInner_u32
  
  type t_Mutex_u32_Even = { f0: t_MutexInner_u32; f1: () }
  
  type t_AddsTwo = { mutex: t_Mutex_u32_Even }
  
  type t_GuardInner_u32
  
  type t_MutexGuard_u32_Even = { f0'0: t_GuardInner_u32; f1'0: () }
  
  let rec lock_u32 (self: t_Mutex_u32_Even) (return (x: t_MutexGuard_u32_Even)) = any
    [ return (result: t_MutexGuard_u32_Even) -> {self.f1 = result.f1'0} (! return {result}) ]
  
  predicate inv_Even (self: ()) (x: UInt32.t) = Int.mod (UInt32.t'int x) 2 = 0
  
  let rec deref_u32 (self: t_MutexGuard_u32_Even) (return (x: UInt32.t)) = any
    [ return (result: UInt32.t) -> {inv_Even self.f1'0 result} (! return {result}) ]
  
  let rec set_u32 (self: MutBorrow.t t_MutexGuard_u32_Even) (v: UInt32.t) (return (x: ())) =
    {[@expl:set requires] inv_Even self.current.f1'0 v}
    any [ return (result: ()) -> (! return {result}) ]
  
  predicate resolve_GuardInner_u32 (_1: t_GuardInner_u32)
  
  predicate resolve_MutexGuard_u32_Even (_1: t_MutexGuard_u32_Even)
  
  axiom resolve_axiom [@rewrite]:
    forall x: t_MutexGuard_u32_Even [resolve_MutexGuard_u32_Even x]. resolve_MutexGuard_u32_Even x
      = resolve_GuardInner_u32 x.f0'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_AddsTwo (self: t_AddsTwo) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = lock_u32 {self.mutex} (fun (_ret: t_MutexGuard_u32_Even) -> [ &v <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = deref_u32 {v} (fun (_ret: UInt32.t) -> [ &_5 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &val' <- _5 ] s1
      | s1 = [ &_7 <- UInt32.lt val' (100000: UInt32.t) ] s2
      | s2 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb3) ] ]
    | bb3 = s0
      [ s0 = UInt32.add {val'} {(2: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s1)
      | s1 = MutBorrow.borrow_mut <t_MutexGuard_u32_Even> {v}
          (fun (_ret: MutBorrow.t t_MutexGuard_u32_Even) -> [ &_10 <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = set_u32 {_10} {_11} (fun (_ret: ()) -> [ &_9 <- _ret ] s3)
      | s3 = bb4 ]
    | bb4 = s0 [ s0 = -{resolve_MutexGuard_u32_Even v}- s1 | s1 = bb8 ]
    | bb5 = s0
      [ s0 = MutBorrow.borrow_mut <t_MutexGuard_u32_Even> {v}
          (fun (_ret: MutBorrow.t t_MutexGuard_u32_Even) -> [ &_14 <- _ret ] [ &v <- _ret.final ] s1)
      | s1 = set_u32 {_14} {(0: UInt32.t)} (fun (_ret: ()) -> [ &_13 <- _ret ] s2)
      | s2 = bb6 ]
    | bb6 = s0 [ s0 = -{resolve_MutexGuard_u32_Even v}- s1 | s1 = bb8 ]
    | bb8 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: t_AddsTwo = self
    | & v: t_MutexGuard_u32_Even = Any.any_l ()
    | & val': UInt32.t = Any.any_l ()
    | & _5: UInt32.t = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _9: () = Any.any_l ()
    | & _10: MutBorrow.t t_MutexGuard_u32_Even = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _13: () = Any.any_l ()
    | & _14: MutBorrow.t t_MutexGuard_u32_Even = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_concurrent
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MutexInner_u32
  
  type t_Mutex_u32_Even = { f0: t_MutexInner_u32; f1: () }
  
  predicate inv_Even (self: ()) (x: UInt32.t) = Int.mod (UInt32.t'int x) 2 = 0
  
  let rec new_u32 (val': UInt32.t) (i: ()) (return (x: t_Mutex_u32_Even)) = {[@expl:new requires] inv_Even i val'}
    any [ return (result: t_Mutex_u32_Even) -> (! return {result}) ]
  
  let rec leak_Mutex_u32_Even (b: t_Mutex_u32_Even) (return (x: MutBorrow.t t_Mutex_u32_Even)) = any
    [ return (result: MutBorrow.t t_Mutex_u32_Even) -> {result.current = b} (! return {result}) ]
  
  predicate resolve_ref_Mutex_u32_Even [@inline:trivial] (_1: MutBorrow.t t_Mutex_u32_Even) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Mutex_u32_Even
  
  type t_AddsTwo = { mutex: t_Mutex_u32_Even }
  
  type t_JoinHandleInner_unit
  
  type t_SpawnPostCond_AddsTwo = { f: t_AddsTwo }
  
  type t_JoinHandle_unit_SpawnPostCond_AddsTwo = { f0'0: t_JoinHandleInner_unit; f1'0: t_SpawnPostCond_AddsTwo }
  
  predicate precondition_AddsTwo (self: t_AddsTwo) = true
  
  let rec spawn_unit (f'0: t_AddsTwo) (return (x: t_JoinHandle_unit_SpawnPostCond_AddsTwo)) =
    {[@expl:spawn requires] precondition_AddsTwo f'0}
    any [ return (result: t_JoinHandle_unit_SpawnPostCond_AddsTwo) -> (! return {result}) ]
  
  type t_Result_unit_unit = Ok () | Err ()
  
  predicate postcondition_AddsTwo (self: t_AddsTwo) (_2: ()) = true
  
  predicate inv_SpawnPostCond_AddsTwo (self: t_SpawnPostCond_AddsTwo) (v: ()) = postcondition_AddsTwo self.f v
  
  let rec join_unit (self: t_JoinHandle_unit_SpawnPostCond_AddsTwo) (return (x: t_Result_unit_unit)) = any
    [ return (result: t_Result_unit_unit) -> {match result with
        | Ok v -> inv_SpawnPostCond_AddsTwo self.f1'0 v
        | _ -> true
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec concurrent (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- () ] s1
      | s1 = new_u32 {(0: UInt32.t)} {_5} (fun (_ret: t_Mutex_u32_Even) -> [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = leak_Mutex_u32_Even {_4} (fun (_ret: MutBorrow.t t_Mutex_u32_Even) -> [ &_2 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = -{resolve_ref_Mutex_u32_Even _2}- s1
      | s1 = [ &m <- _2.current ] s2
      | s2 = [ &_8 <- m ] s3
      | s3 = [ &t1 <- { mutex = _8 } ] s4
      | s4 = spawn_unit {t1} (fun (_ret: t_JoinHandle_unit_SpawnPostCond_AddsTwo) -> [ &j1 <- _ret ] s5)
      | s5 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_13 <- m ] s1
      | s1 = [ &t2 <- { mutex = _13 } ] s2
      | s2 = spawn_unit {t2} (fun (_ret: t_JoinHandle_unit_SpawnPostCond_AddsTwo) -> [ &j2 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = join_unit {j1} (fun (_ret: t_Result_unit_unit) -> [ &_16 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0 [ s0 = join_unit {j2} (fun (_ret: t_Result_unit_unit) -> [ &_18 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & m: t_Mutex_u32_Even = Any.any_l ()
    | & _2: MutBorrow.t t_Mutex_u32_Even = Any.any_l ()
    | & _4: t_Mutex_u32_Even = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & t1: t_AddsTwo = Any.any_l ()
    | & _8: t_Mutex_u32_Even = Any.any_l ()
    | & j1: t_JoinHandle_unit_SpawnPostCond_AddsTwo = Any.any_l ()
    | & t2: t_AddsTwo = Any.any_l ()
    | & _13: t_Mutex_u32_Even = Any.any_l ()
    | & j2: t_JoinHandle_unit_SpawnPostCond_AddsTwo = Any.any_l ()
    | & _16: t_Result_unit_unit = Any.any_l ()
    | & _18: t_Result_unit_unit = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_impl_FakeFnOnce_for_AddsTwo__call__refines (* <AddsTwo<'a> as FakeFnOnce> *)
  type t_MutexInner_u32
  
  type t_Mutex_u32_Even = { f0: t_MutexInner_u32; f1: () }
  
  type t_AddsTwo = { mutex: t_Mutex_u32_Even }
  
  predicate precondition_AddsTwo (self: t_AddsTwo) = true
  
  predicate postcondition_AddsTwo (self: t_AddsTwo) (_2: ()) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_AddsTwo. precondition_AddsTwo self
      -> (forall result: (). postcondition_AddsTwo self result)
end
