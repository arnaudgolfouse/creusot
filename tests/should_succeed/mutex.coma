module M_mutex__qyi5425553346843331945__call (* <AddsTwo<'a> as FakeFnOnce> *)
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MutexInner
  
  type t_Mutex = { t_Mutex__0: t_MutexInner; t_Mutex__1: () }
  
  type t_AddsTwo = { t_AddsTwo__mutex: t_Mutex }
  
  type t_GuardInner
  
  type t_MutexGuard = { t_MutexGuard__0: t_GuardInner; t_MutexGuard__1: () }
  
  let rec lock (self: t_Mutex) (return (x: t_MutexGuard)) = any
    [ return' (result: t_MutexGuard) -> {self.t_Mutex__1 = result.t_MutexGuard__1} (! return {result}) ]
  
  predicate inv (self: ()) (x: UInt32.t) = Int.mod (UInt32.t'int x) 2 = 0
  
  let rec deref (self: t_MutexGuard) (return (x: UInt32.t)) = any
    [ return' (result: UInt32.t) -> {inv self.t_MutexGuard__1 result} (! return {result}) ]
  
  let rec set (self: MutBorrow.t t_MutexGuard) (v: UInt32.t) (return (x: ())) =
    {[@expl:set requires] inv (self.current).t_MutexGuard__1 v}
    any [ return' (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call (self: t_AddsTwo) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = lock {self.t_AddsTwo__mutex} (fun (_ret: t_MutexGuard) -> [ &v <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = deref {v} (fun (_ret: UInt32.t) -> [ &_5 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &val' <- _5 ] s1
      | s1 = [ &_7 <- UInt32.lt val' (100000: UInt32.t) ] s2
      | s2 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb3) ] ]
    | bb3 = s0
      [ s0 = UInt32.add {val'} {(2: UInt32.t)} (fun (_ret: UInt32.t) -> [ &_11 <- _ret ] s1)
      | s1 = MutBorrow.borrow_mut <t_MutexGuard> {v}
          (fun (_ret: MutBorrow.t t_MutexGuard) -> [ &_10 <- _ret ] [ &v <- _ret.final ] s2)
      | s2 = set {_10} {_11} (fun (_ret: ()) -> [ &_9 <- _ret ] s3)
      | s3 = bb8 ]
    | bb5 = s0
      [ s0 = MutBorrow.borrow_mut <t_MutexGuard> {v}
          (fun (_ret: MutBorrow.t t_MutexGuard) -> [ &_14 <- _ret ] [ &v <- _ret.final ] s1)
      | s1 = set {_14} {(0: UInt32.t)} (fun (_ret: ()) -> [ &_13 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: t_AddsTwo = self
    | & v: t_MutexGuard = Any.any_l ()
    | & val': UInt32.t = Any.any_l ()
    | & _5: UInt32.t = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _9: () = Any.any_l ()
    | & _10: MutBorrow.t t_MutexGuard = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _13: () = Any.any_l ()
    | & _14: MutBorrow.t t_MutexGuard = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_mutex__concurrent
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MutexInner
  
  type t_Mutex = { t_Mutex__0: t_MutexInner; t_Mutex__1: () }
  
  predicate inv (self: ()) (x: UInt32.t) = Int.mod (UInt32.t'int x) 2 = 0
  
  let rec new (val': UInt32.t) (i: ()) (return (x: t_Mutex)) = {[@expl:new requires] inv i val'}
    any [ return' (result: t_Mutex) -> (! return {result}) ]
  
  let rec leak (b: t_Mutex) (return (x: MutBorrow.t t_Mutex)) = any
    [ return' (result: MutBorrow.t t_Mutex) -> {result.current = b} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_Mutex) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t t_Mutex) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  type t_AddsTwo = { t_AddsTwo__mutex: t_Mutex }
  
  type t_JoinHandleInner
  
  type t_SpawnPostCond = { t_SpawnPostCond__f: t_AddsTwo }
  
  type t_JoinHandle = { t_JoinHandle__0: t_JoinHandleInner; t_JoinHandle__1: t_SpawnPostCond }
  
  predicate precondition (self: t_AddsTwo) = true
  
  let rec spawn (f: t_AddsTwo) (return (x: t_JoinHandle)) = {[@expl:spawn requires] precondition f}
    any [ return' (result: t_JoinHandle) -> (! return {result}) ]
  
  type t_Result = C_Ok () | C_Err ()
  
  predicate postcondition (self: t_AddsTwo) (_1: ()) = true
  
  predicate inv'0 (self: t_SpawnPostCond) (v: ()) = postcondition self.t_SpawnPostCond__f v
  
  let rec join (self: t_JoinHandle) (return (x: t_Result)) = any
    [ return' (result: t_Result) -> {match result with
        | C_Ok v -> inv'0 self.t_JoinHandle__1 v
        | _ -> true
        end}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec concurrent (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- () ] s1 | s1 = new {(0: UInt32.t)} {_5} (fun (_ret: t_Mutex) -> [ &_4 <- _ret ] s2) | s2 = bb2 ]
    | bb2 = s0 [ s0 = leak {_4} (fun (_ret: MutBorrow.t t_Mutex) -> [ &_2 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = -{resolve'0 _2}- s1
      | s1 = [ &m <- _2.current ] s2
      | s2 = [ &_8 <- m ] s3
      | s3 = [ &t1 <- { t_AddsTwo__mutex = _8 } ] s4
      | s4 = spawn {t1} (fun (_ret: t_JoinHandle) -> [ &j1 <- _ret ] s5)
      | s5 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_13 <- m ] s1
      | s1 = [ &t2 <- { t_AddsTwo__mutex = _13 } ] s2
      | s2 = spawn {t2} (fun (_ret: t_JoinHandle) -> [ &j2 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0 [ s0 = join {j1} (fun (_ret: t_Result) -> [ &_16 <- _ret ] s1) | s1 = bb6 ]
    | bb6 = s0 [ s0 = join {j2} (fun (_ret: t_Result) -> [ &_18 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & m: t_Mutex = Any.any_l ()
    | & _2: MutBorrow.t t_Mutex = Any.any_l ()
    | & _4: t_Mutex = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & t1: t_AddsTwo = Any.any_l ()
    | & _8: t_Mutex = Any.any_l ()
    | & j1: t_JoinHandle = Any.any_l ()
    | & t2: t_AddsTwo = Any.any_l ()
    | & _13: t_Mutex = Any.any_l ()
    | & j2: t_JoinHandle = Any.any_l ()
    | & _16: t_Result = Any.any_l ()
    | & _18: t_Result = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_mutex__qyi5425553346843331945__call__refines (* <AddsTwo<'a> as FakeFnOnce> *)
  type t_MutexInner
  
  type t_Mutex = { t_Mutex__0: t_MutexInner; t_Mutex__1: () }
  
  type t_AddsTwo = { t_AddsTwo__mutex: t_Mutex }
  
  predicate precondition (self: t_AddsTwo) = true
  
  predicate postcondition (self: t_AddsTwo) (_1: ()) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_AddsTwo. precondition self -> (forall result: (). postcondition self result)
end
