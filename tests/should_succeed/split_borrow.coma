module M_split_borrow__z [#"split_borrow.rs" 5 0 5 14]
  let%span ssplit_borrow = "split_borrow.rs" 6 4 6 8
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec z [#"split_borrow.rs" 5 0 5 14] (return' (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- [%#ssplit_borrow] true ] s1 | s1 = return''0 {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return''0 (result: bool) -> (! return' {result}) ]
end
module M_split_borrow__f [#"split_borrow.rs" 9 0 9 10]
  let%span ssplit_borrow = "split_borrow.rs" 10 23 10 24
  let%span ssplit_borrow'0 = "split_borrow.rs" 10 33 10 34
  let%span ssplit_borrow'1 = "split_borrow.rs" 14 23 14 24
  let%span ssplit_borrow'2 = "split_borrow.rs" 16 23 16 25
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 48 20 48 34
  
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MyInt = { t_MyInt__0: UInt64.t }
  
  type tuple = { _p0: t_MyInt; _p1: t_MyInt }
  
  let rec z (return' (x: bool)) = any [ return''0 (result: bool) -> (! return' {result}) ]
  
  predicate resolve (self: MutBorrow.t tuple) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t tuple) = resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f [#"split_borrow.rs" 9 0 9 10] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- { t_MyInt__0 = ([%#ssplit_borrow] (1: UInt64.t)) } ] s1
      | s1 = [ &_3 <- { t_MyInt__0 = ([%#ssplit_borrow'0] (2: UInt64.t)) } ] s2
      | s2 = [ &x <- { _p0 = _2; _p1 = _3 } ] s3
      | s3 = MutBorrow.borrow_mut <tuple> {x} (fun (_ret: MutBorrow.t tuple) -> [ &y <- _ret ] [ &x <- _ret.final ] s4)
      | s4 = z (fun (_ret: bool) -> [ &_6 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = any [ br0 -> {_6 = false} (! bb3) | br1 -> {_6} (! bb2) ]
    | bb2 = s0
      [ s0 = [ &_7 <- { t_MyInt__0 = ([%#ssplit_borrow'1] (4: UInt64.t)) } ] s1
      | s1 = [ &y <- { y with current = { y.current with _p1 = _7 } } ] s2
      | s2 = bb4 ]
    | bb3 = s0
      [ s0 = [ &_8 <- { t_MyInt__0 = ([%#ssplit_borrow'2] (10: UInt64.t)) } ] s1
      | s1 = [ &y <- { y with current = { y.current with _p0 = _8 } } ] s2
      | s2 = bb4 ]
    | bb4 = s0 [ s0 = -{resolve'0 y}- s1 | s1 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: tuple = Any.any_l ()
    | & _2: t_MyInt = Any.any_l ()
    | & _3: t_MyInt = Any.any_l ()
    | & y: MutBorrow.t tuple = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _7: t_MyInt = Any.any_l ()
    | & _8: t_MyInt = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_split_borrow__g [#"split_borrow.rs" 23 0 23 10]
  let%span ssplit_borrow = "split_borrow.rs" 24 23 24 24
  let%span ssplit_borrow'0 = "split_borrow.rs" 24 33 24 34
  let%span ssplit_borrow'1 = "split_borrow.rs" 29 19 29 20
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 48 20 48 34
  
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MyInt = { t_MyInt__0: UInt64.t }
  
  type tuple = { _p0: t_MyInt; _p1: t_MyInt }
  
  predicate resolve (self: MutBorrow.t t_MyInt) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 (_0: MutBorrow.t t_MyInt) = resolve _0
  
  predicate resolve'1 (self: MutBorrow.t tuple) = [%#sresolve] self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 (_0: MutBorrow.t tuple) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g [#"split_borrow.rs" 23 0 23 10] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- { t_MyInt__0 = ([%#ssplit_borrow] (1: UInt64.t)) } ] s1
      | s1 = [ &_3 <- { t_MyInt__0 = ([%#ssplit_borrow'0] (2: UInt64.t)) } ] s2
      | s2 = [ &a <- { _p0 = _2; _p1 = _3 } ] s3
      | s3 = MutBorrow.borrow_mut <tuple> {a} (fun (_ret: MutBorrow.t tuple) -> [ &x <- _ret ] [ &a <- _ret.final ] s4)
      | s4 = MutBorrow.borrow_final <t_MyInt> {(x.current)._p1} {MutBorrow.inherit_id (MutBorrow.get_id x) 2}
          (fun (_ret: MutBorrow.t t_MyInt) ->
            [ &_z <- _ret ] [ &x <- { x with current = { x.current with _p1 = _ret.final } } ] s5)
      | s5 = -{resolve'0 _z}- s6
      | s6 = [ &_6 <- { t_MyInt__0 = ([%#ssplit_borrow'1] (3: UInt64.t)) } ] s7
      | s7 = [ &x <- { x with current = { x.current with _p0 = _6 } } ] s8
      | s8 = -{resolve'2 x}- s9
      | s9 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: tuple = Any.any_l ()
    | & _2: t_MyInt = Any.any_l ()
    | & _3: t_MyInt = Any.any_l ()
    | & x: MutBorrow.t tuple = Any.any_l ()
    | & _z: MutBorrow.t t_MyInt = Any.any_l ()
    | & _6: t_MyInt = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
