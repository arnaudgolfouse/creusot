module M_split_borrow__z
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec z (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = return {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return (result: bool) -> (! return {result}) ]
end
module M_split_borrow__f
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MyInt = { t_MyInt__0: UInt64.t }
  
  type tuple = { f0: t_MyInt; f1: t_MyInt }
  
  let rec z (return (x: bool)) = any [ return (result: bool) -> (! return {result}) ]
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t tuple) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- { t_MyInt__0 = (1: UInt64.t) } ] s1
      | s1 = [ &_3 <- { t_MyInt__0 = (2: UInt64.t) } ] s2
      | s2 = [ &x <- { f0 = _2; f1 = _3 } ] s3
      | s3 = MutBorrow.borrow_mut <tuple> {x} (fun (_ret: MutBorrow.t tuple) -> [ &y <- _ret ] [ &x <- _ret.final ] s4)
      | s4 = z (fun (_ret: bool) -> [ &_6 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = any [ br0 -> {_6 = false} (! bb3) | br1 -> {_6} (! bb2) ]
    | bb2 = s0
      [ s0 = [ &_7 <- { t_MyInt__0 = (4: UInt64.t) } ] s1
      | s1 = [ &y <- { y with current = { y.current with f1 = _7 } } ] s2
      | s2 = bb4 ]
    | bb3 = s0
      [ s0 = [ &_8 <- { t_MyInt__0 = (10: UInt64.t) } ] s1
      | s1 = [ &y <- { y with current = { y.current with f0 = _8 } } ] s2
      | s2 = bb4 ]
    | bb4 = s0 [ s0 = -{resolve y}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: tuple = Any.any_l ()
    | & _2: t_MyInt = Any.any_l ()
    | & _3: t_MyInt = Any.any_l ()
    | & y: MutBorrow.t tuple = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _7: t_MyInt = Any.any_l ()
    | & _8: t_MyInt = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_split_borrow__g
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MyInt = { t_MyInt__0: UInt64.t }
  
  type tuple = { f0: t_MyInt; f1: t_MyInt }
  
  predicate resolve [@inline:trivial] (_1: MutBorrow.t t_MyInt) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t tuple) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_2 <- { t_MyInt__0 = (1: UInt64.t) } ] s1
      | s1 = [ &_3 <- { t_MyInt__0 = (2: UInt64.t) } ] s2
      | s2 = [ &a <- { f0 = _2; f1 = _3 } ] s3
      | s3 = MutBorrow.borrow_mut <tuple> {a} (fun (_ret: MutBorrow.t tuple) -> [ &x <- _ret ] [ &a <- _ret.final ] s4)
      | s4 = MutBorrow.borrow_final <t_MyInt> {x.current.f1} {MutBorrow.inherit_id (MutBorrow.get_id x) 2}
          (fun (_ret: MutBorrow.t t_MyInt) ->
            [ &_z <- _ret ] [ &x <- { x with current = { x.current with f1 = _ret.final } } ] s5)
      | s5 = -{resolve _z}- s6
      | s6 = [ &_6 <- { t_MyInt__0 = (3: UInt64.t) } ] s7
      | s7 = [ &x <- { x with current = { x.current with f0 = _6 } } ] s8
      | s8 = -{resolve'0 x}- s9
      | s9 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: tuple = Any.any_l ()
    | & _2: t_MyInt = Any.any_l ()
    | & _3: t_MyInt = Any.any_l ()
    | & x: MutBorrow.t tuple = Any.any_l ()
    | & _z: MutBorrow.t t_MyInt = Any.any_l ()
    | & _6: t_MyInt = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
