module M_10_mutual_rec_types__use_tree [#"10_mutual_rec_types.rs" 15 0 15 25]
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Node  =
    { t_Node__left: t_Tree; t_Node__val: UInt32.t; t_Node__right: t_Tree }
  with t_Option  =
    | C_None
    | C_Some t_Node
  with t_Tree  =
    { t_Tree__0: t_Option }
  
  meta "compute_max_steps" 1000000
  
  let rec use_tree[#"10_mutual_rec_types.rs" 15 0 15 25] (_0:t_Tree) (return'  (x:()))= (! bb0
    [ bb0 = return''0 {_0'0} ]
    ) [ & _0'0: () = Any.any_l () ]  [ return''0 (result:())-> (! return' {result}) ] 
end
module M_10_mutual_rec_types__qyi18211245992252154719__height [#"10_mutual_rec_types.rs" 18 4 18 31] (* Tree *)
  let%span s10_mutual_rec_types = "10_mutual_rec_types.rs" 21 69 21 70
  let%span s10_mutual_rec_types'0 = "10_mutual_rec_types.rs" 20 26 20 27
  let%span scmp = "../../../creusot-contracts/src/std/cmp.rs" 75 26 75 66
  let%span scmp'0 = "../../../creusot-contracts/src/std/cmp.rs" 76 26 76 63
  let%span scmp'1 = "../../../creusot-contracts/src/std/cmp.rs" 77 26 77 55
  let%span scmp'2 = "../../../creusot-contracts/src/std/cmp.rs" 78 26 78 77
  let%span scmp'3 = "../../../creusot-contracts/src/std/cmp.rs" 79 26 79 79
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  
  use creusot.int.UInt32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Tree  =
    { t_Tree__0: t_Option }
  with t_Node  =
    { t_Node__left: t_Tree; t_Node__val: UInt32.t; t_Node__right: t_Tree }
  with t_Option  =
    | C_None
    | C_Some t_Node
  
  let rec v_Some (input:t_Option) (ret  (field_0:t_Node))= any
    [ good (field_0:t_Node)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: t_Node [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  function deep_model (self: UInt64.t) : int =
    [%#snum] UInt64.t'int self
  
  let rec max (self_:UInt64.t) (o:UInt64.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#scmp] deep_model result >= deep_model self_}
      {[%#scmp'0] deep_model result >= deep_model o}
      {[%#scmp'1] result = self_ \/ result = o}
      {[%#scmp'2] deep_model self_ <= deep_model o  -> result = o}
      {[%#scmp'3] deep_model o < deep_model self_  -> result = self_}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec height[#"10_mutual_rec_types.rs" 18 4 18 31] (self:t_Tree) (return'  (x:UInt64.t))= (! bb0
    [ bb0 = any
      [ br0 -> {self'0.t_Tree__0 = C_None} (! bb2) | br1 (x0:t_Node)-> {self'0.t_Tree__0 = C_Some x0} (! bb3) ]
    
    | bb3 = s0
      [ s0 = v_Some {self'0.t_Tree__0} (fun (r0:t_Node) ->  [ &n <- r0 ] s1)
      | s1 = height {n.t_Node__left} (fun (_ret:UInt64.t) ->  [ &_5 <- _ret ] s2)
      | s2 = bb5 ]
    
    | bb5 = s0 [ s0 = height {n.t_Node__right} (fun (_ret:UInt64.t) ->  [ &_7 <- _ret ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = max {_5} {_7} (fun (_ret:UInt64.t) ->  [ &_4 <- _ret ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = UInt64.add {_4} {[%#s10_mutual_rec_types] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &_0 <- _ret ] s1)
      | s1 = bb8 ]
    
    | bb2 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- [%#s10_mutual_rec_types'0] (0: UInt64.t) ] s1 | s1 = bb8 ] 
    | bb8 = return''0 {_0} ]
    )
    [ & _0: UInt64.t = Any.any_l ()
    | & self'0: t_Tree = self
    | & n: t_Node = Any.any_l ()
    | & _4: UInt64.t = Any.any_l ()
    | & _5: UInt64.t = Any.any_l ()
    | & _7: UInt64.t = Any.any_l () ]
     [ return''0 (result:UInt64.t)-> (! return' {result}) ] 
end
