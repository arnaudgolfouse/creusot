module M_06_logic_function_contracts__sum [#"06_logic_function_contracts.rs" 10 0 10 32]
  let%span s06_logic_function_contracts = "06_logic_function_contracts.rs" 9 0 9 21
  let%span s06_logic_function_contracts'0 = "06_logic_function_contracts.rs" 12 8 15 9
  let%span swell_founded = "../../../creusot-contracts/src/logic/well_founded.rs" 45 8 45 33
  
  use seq.Seq
  use mach.int.Int
  
  predicate well_founded_relation (self: int) (other: int) = [%#swell_founded] self >= 0 /\ self > other
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant seq : Seq.seq int
  
  function sum [#"06_logic_function_contracts.rs" 10 0 10 32] (seq'0: Seq.seq int) : int
  
  goal vc_sum: if Seq.length seq = 0 then
      true
    else
      well_founded_relation ([%#s06_logic_function_contracts] Seq.length seq) ([%#s06_logic_function_contracts] Seq.length (Seq.([..]) seq 0 (Seq.length seq
      - 1)))

end
module M_06_logic_function_contracts__all_zero [#"06_logic_function_contracts.rs" 22 0 22 38]
  let%span s06_logic_function_contracts = "06_logic_function_contracts.rs" 21 0 21 21
  let%span s06_logic_function_contracts'0 = "06_logic_function_contracts.rs" 24 8 27 9
  let%span swell_founded = "../../../creusot-contracts/src/logic/well_founded.rs" 45 8 45 33
  
  use seq.Seq
  use mach.int.Int
  
  predicate well_founded_relation (self: int) (other: int) = [%#swell_founded] self >= 0 /\ self > other
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant seq : Seq.seq int
  
  predicate all_zero [#"06_logic_function_contracts.rs" 22 0 22 38] (seq'0: Seq.seq int)
  
  goal vc_all_zero: if Seq.length seq = 0 then
      true
    else
      if Seq.get seq (Seq.length seq - 1) = 0 then
        well_founded_relation ([%#s06_logic_function_contracts] Seq.length seq) ([%#s06_logic_function_contracts] Seq.length (Seq.([..]) seq 0 (Seq.length seq
        - 1)))
      else
        true
    

end
module M_06_logic_function_contracts__stupid [#"06_logic_function_contracts.rs" 34 0 34 38]
  let%span s06_logic_function_contracts = "06_logic_function_contracts.rs" 33 10 33 11
  let%span s06_logic_function_contracts'0 = "06_logic_function_contracts.rs" 36 8 42 9
  let%span swell_founded = "../../../creusot-contracts/src/logic/well_founded.rs" 45 8 45 33
  
  use mach.int.Int
  
  type t_T
  
  predicate well_founded_relation (self: int) (other: int) = [%#swell_founded] self >= 0 /\ self > other
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant x : t_T
  
  constant i : int
  
  predicate stupid [#"06_logic_function_contracts.rs" 34 0 34 38] (x'0: t_T) (i'0: int)
  
  goal vc_stupid: if i <= 0 then
      true
    else
      if x = x then
        well_founded_relation ([%#s06_logic_function_contracts] i) ([%#s06_logic_function_contracts] 0)
      else
        true
    

end
