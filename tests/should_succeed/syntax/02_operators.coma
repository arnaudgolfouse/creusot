module M_02_operators__division
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec division (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) = {[@expl:division requires] UInt64.t'int y
    > 0}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- y'0 ] s1
      | s1 = [ &_6 <- _5 = (0: UInt64.t) ] s2
      | s2 = {[@expl:division by zero] not _6} s3
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = UInt64.div {x'0} {_5} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l ()
    | & x'0: UInt64.t = x
    | & y'0: UInt64.t = y
    | & _5: UInt64.t = Any.any_l ()
    | & _6: bool = Any.any_l () ]) [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__modulus
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec modulus (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) = {[@expl:modulus requires] UInt64.t'int y > 0}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- y'0 ] s1
      | s1 = [ &_6 <- _5 = (0: UInt64.t) ] s2
      | s2 = {[@expl:remainder by zero] not _6} s3
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = UInt64.rem {x'0} {_5} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l ()
    | & x'0: UInt64.t = x
    | & y'0: UInt64.t = y
    | & _5: UInt64.t = Any.any_l ()
    | & _6: bool = Any.any_l () ]) [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__multiply
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec multiply (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) = {[@expl:multiply requires] UInt64.t'int x
      * UInt64.t'int y
    <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.mul {x'0} {y'0} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l () | & x'0: UInt64.t = x | & y'0: UInt64.t = y ])
    [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__add
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) = {[@expl:add requires] UInt64.t'int x
      + UInt64.t'int y
    <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.add {x'0} {y'0} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l () | & x'0: UInt64.t = x | & y'0: UInt64.t = y ])
    [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__sub
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sub (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) = {[@expl:sub requires] UInt64.t'int x
      - UInt64.t'int y
    >= 0}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.sub {x'0} {y'0} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l () | & x'0: UInt64.t = x | & y'0: UInt64.t = y ])
    [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__expression
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec expression (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (return' (x'0: bool)) =
    {[@expl:expression requires #0] UInt64.t'int y > 0}
    {[@expl:expression requires #1] Int.div (UInt64.t'int x) (UInt64.t'int y) * UInt64.t'int z
    <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_10 <- y'0 ] s1
      | s1 = [ &_11 <- _10 = (0: UInt64.t) ] s2
      | s2 = {[@expl:division by zero] not _11} s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = UInt64.div {x'0} {_10} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1)
      | s1 = UInt64.mul {_8} {z'0} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s2)
      | s2 = [ &_16 <- y'0 ] s3
      | s3 = [ &_17 <- _16 = (0: UInt64.t) ] s4
      | s4 = {[@expl:division by zero] not _17} s5
      | s5 = bb2 ]
    | bb2 = s0
      [ s0 = UInt64.div {x'0} {_16} (fun (_ret: UInt64.t) -> [ &_14 <- _ret ] s1)
      | s1 = UInt64.mul {_14} {z'0} (fun (_ret: UInt64.t) -> [ &_13 <- _ret ] s2)
      | s2 = [ &_0 <- _7 = _13 ] s3
      | s3 = return''0 {_0} ] ]
    [ & _0: bool = Any.any_l ()
    | & x'0: UInt64.t = x
    | & y'0: UInt64.t = y
    | & z'0: UInt64.t = z
    | & _7: UInt64.t = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: UInt64.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: UInt64.t = Any.any_l ()
    | & _16: UInt64.t = Any.any_l ()
    | & _17: bool = Any.any_l () ])
    [ return''0 (result: bool) -> {[@expl:expression ensures] result} (! return' {result}) ]
end
module M_02_operators__primitive_comparison
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  type t_X = { t_X__a: UInt64.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering = if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. UInt64.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec primitive_comparison (x: t_X) (return' (x'0: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:primitive_comparison ensures] UInt64.le x.t_X__a x.t_X__a}
      (! return' {result}) ]
end
module M_02_operators__bool_eq
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec bool_eq (a: bool) (b: bool) (return' (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- a'0 = b'0 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: bool = Any.any_l () | & a'0: bool = a | & b'0: bool = b ])
    [ return''0 (result: bool) -> {[@expl:bool_eq ensures] result = (a = b)} (! return' {result}) ]
end
