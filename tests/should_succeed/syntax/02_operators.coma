module M_02_operators__division [#"02_operators.rs" 8 0 8 40]
  let%span s02_operators = "02_operators.rs" 9 4 9 9
  let%span s02_operators'0 = "02_operators.rs" 7 11 7 17
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec division [#"02_operators.rs" 8 0 8 40] (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) =
    {[@expl:division requires] [%#s02_operators'0] UInt64.t'int y > 0}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- y'0 ] s1
      | s1 = [ &_6 <- _5 = ([%#s02_operators] (0: UInt64.t)) ] s2
      | s2 = {[@expl:division by zero] [%#s02_operators] not _6} s3
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = UInt64.div {x'0} {_5} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l ()
    | & x'0: UInt64.t = x
    | & y'0: UInt64.t = y
    | & _5: UInt64.t = Any.any_l ()
    | & _6: bool = Any.any_l () ]) [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__modulus [#"02_operators.rs" 23 0 23 39]
  let%span s02_operators = "02_operators.rs" 24 4 24 9
  let%span s02_operators'0 = "02_operators.rs" 22 11 22 17
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec modulus [#"02_operators.rs" 23 0 23 39] (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) =
    {[@expl:modulus requires] [%#s02_operators'0] UInt64.t'int y > 0}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- y'0 ] s1
      | s1 = [ &_6 <- _5 = ([%#s02_operators] (0: UInt64.t)) ] s2
      | s2 = {[@expl:remainder by zero] [%#s02_operators] not _6} s3
      | s3 = bb1 ]
    | bb1 = s0 [ s0 = UInt64.rem {x'0} {_5} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l ()
    | & x'0: UInt64.t = x
    | & y'0: UInt64.t = y
    | & _5: UInt64.t = Any.any_l ()
    | & _6: bool = Any.any_l () ]) [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__multiply [#"02_operators.rs" 38 0 38 40]
  let%span s02_operators = "02_operators.rs" 37 11 37 33
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec multiply [#"02_operators.rs" 38 0 38 40] (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) =
    {[@expl:multiply requires] [%#s02_operators] UInt64.t'int x * UInt64.t'int y <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.mul {x'0} {y'0} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l () | & x'0: UInt64.t = x | & y'0: UInt64.t = y ])
    [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__add [#"02_operators.rs" 48 0 48 35]
  let%span s02_operators = "02_operators.rs" 47 11 47 33
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add [#"02_operators.rs" 48 0 48 35] (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) =
    {[@expl:add requires] [%#s02_operators] UInt64.t'int x + UInt64.t'int y <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.add {x'0} {y'0} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l () | & x'0: UInt64.t = x | & y'0: UInt64.t = y ])
    [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__sub [#"02_operators.rs" 63 0 63 35]
  let%span s02_operators = "02_operators.rs" 62 11 62 23
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec sub [#"02_operators.rs" 63 0 63 35] (x: UInt64.t) (y: UInt64.t) (return' (x'0: UInt64.t)) =
    {[@expl:sub requires] [%#s02_operators] UInt64.t'int x - UInt64.t'int y >= 0}
    (! bb0
    [ bb0 = s0 [ s0 = UInt64.sub {x'0} {y'0} (fun (_ret: UInt64.t) -> [ &_0 <- _ret ] s1) | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l () | & x'0: UInt64.t = x | & y'0: UInt64.t = y ])
    [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
module M_02_operators__expression [#"02_operators.rs" 77 0 77 51]
  let%span s02_operators = "02_operators.rs" 78 4 78 9
  let%span s02_operators'0 = "02_operators.rs" 78 17 78 24
  let%span s02_operators'1 = "02_operators.rs" 74 11 74 17
  let%span s02_operators'2 = "02_operators.rs" 75 11 75 38
  let%span s02_operators'3 = "02_operators.rs" 76 10 76 16
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec expression [#"02_operators.rs" 77 0 77 51] (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (return' (x'0: bool)) =
    {[@expl:expression requires #0] [%#s02_operators'1] UInt64.t'int y > 0}
    {[@expl:expression requires #1] [%#s02_operators'2] Int.div (UInt64.t'int x) (UInt64.t'int y) * UInt64.t'int z
    <= UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_10 <- y'0 ] s1
      | s1 = [ &_11 <- _10 = ([%#s02_operators] (0: UInt64.t)) ] s2
      | s2 = {[@expl:division by zero] [%#s02_operators] not _11} s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = UInt64.div {x'0} {_10} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1)
      | s1 = UInt64.mul {_8} {z'0} (fun (_ret: UInt64.t) -> [ &_7 <- _ret ] s2)
      | s2 = [ &_16 <- y'0 ] s3
      | s3 = [ &_17 <- _16 = ([%#s02_operators'0] (0: UInt64.t)) ] s4
      | s4 = {[@expl:division by zero] [%#s02_operators'0] not _17} s5
      | s5 = bb2 ]
    | bb2 = s0
      [ s0 = UInt64.div {x'0} {_16} (fun (_ret: UInt64.t) -> [ &_14 <- _ret ] s1)
      | s1 = UInt64.mul {_14} {z'0} (fun (_ret: UInt64.t) -> [ &_13 <- _ret ] s2)
      | s2 = [ &_0 <- _7 = _13 ] s3
      | s3 = return''0 {_0} ] ]
    [ & _0: bool = Any.any_l ()
    | & x'0: UInt64.t = x
    | & y'0: UInt64.t = y
    | & z'0: UInt64.t = z
    | & _7: UInt64.t = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: UInt64.t = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: UInt64.t = Any.any_l ()
    | & _16: UInt64.t = Any.any_l ()
    | & _17: bool = Any.any_l () ])
    [ return''0 (result: bool) -> {[@expl:expression ensures] [%#s02_operators'3] result} (! return' {result}) ]
end
module M_02_operators__primitive_comparison [#"02_operators.rs" 92 0 92 29]
  let%span s02_operators = "02_operators.rs" 91 10 91 20
  let%span sord = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../../creusot-contracts/src/logic/ord.rs" 260 16 266 17
  
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  type t_X = { t_X__a: UInt64.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering = [%#sord'12] if UInt64.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'9] cmp_log x y = C_Greater)
      -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'7] cmp_log x y = C_Less)
      -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
      -> ([%#sord'5] cmp_log y z = o) -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec primitive_comparison [#"02_operators.rs" 92 0 92 29] (x: t_X) (return' (x'0: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:primitive_comparison ensures] [%#s02_operators] UInt64.le x.t_X__a x.t_X__a}
      (! return' {result}) ]
end
module M_02_operators__bool_eq [#"02_operators.rs" 95 0 95 36]
  let%span s02_operators = "02_operators.rs" 94 10 94 28
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec bool_eq [#"02_operators.rs" 95 0 95 36] (a: bool) (b: bool) (return' (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- a'0 = b'0 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: bool = Any.any_l () | & a'0: bool = a | & b'0: bool = b ])
    [ return''0 (result: bool) -> {[@expl:bool_eq ensures] [%#s02_operators] result = (a = b)} (! return' {result}) ]
end
