module M_clone
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec clone' (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_function
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec function' (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_import
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec import' (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_export
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec export' (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_result
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec result (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result'0: ()) -> (! return {result'0}) ]
end
module M_a
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec _a_ (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_a_qy_b_c
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec __a_qy__b____c__ (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_F
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f_F (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_v_F
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec v_F (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_974
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type _931_ = C__937_
  
  type _214_ = { _216_: _931_ }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec __974_ (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &v_A <- (0: Int32.t) ] s1
      | s1 = [ &_3 <- C__937_ ] s2
      | s2 = [ &_937_ <- { _216_ = _3 } ] s3
      | s3 = [ &_0'0 <- (2: Int32.t) ] s4
      | s4 = [ &_1 <- (3: Int32.t) ] s5
      | s5 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v_A: Int32.t = Any.any_l ()
    | & _937_: _214_ = Any.any_l ()
    | & _3: _931_ = Any.any_l ()
    | & _0'0: Int32.t = Any.any_l ()
    | & _1: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
