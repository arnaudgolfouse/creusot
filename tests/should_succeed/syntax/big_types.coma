module M_is_a1
  use creusot.prelude.Any
  
  type t_BigSum = A1 | A2 | A3 | A4 | A5 | A6 | A7 | A8 | A9 | A10 | A11 | A12 | A13 | A14 | A15 | A16 | A17 | A18 | A19
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_a1 (x: t_BigSum) (return (x'0: bool)) = (! bb0
    [ bb0 = any
      [ br0 -> {x = A1} (! bb3)
      | br1 -> {x = A2} (! bb1)
      | br2 -> {x = A3} (! bb1)
      | br3 -> {x = A4} (! bb1)
      | br4 -> {x = A5} (! bb1)
      | br5 -> {x = A6} (! bb1)
      | br6 -> {x = A7} (! bb1)
      | br7 -> {x = A8} (! bb1)
      | br8 -> {x = A9} (! bb1)
      | br9 -> {x = A10} (! bb1)
      | br10 -> {x = A11} (! bb1)
      | br11 -> {x = A12} (! bb1)
      | br12 -> {x = A13} (! bb1)
      | br13 -> {x = A14} (! bb1)
      | br14 -> {x = A15} (! bb1)
      | br15 -> {x = A16} (! bb1)
      | br16 -> {x = A17} (! bb1)
      | br17 -> {x = A18} (! bb1)
      | br18 -> {x = A19} (! bb1) ]
    | bb1 = s0 [ s0 = [ &_0 <- false ] s1 | s1 = bb4 ]
    | bb3 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = bb4 ]
    | bb4 = return {_0} ] [ & _0: bool = Any.any_l () | & x: t_BigSum = x ])
    [ return (result: bool) -> (! return {result}) ]
end
module M_get_a1
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_BigRecord = {
    a1: UInt32.t;
    a2: UInt32.t;
    a3: UInt32.t;
    a4: UInt32.t;
    a5: UInt32.t;
    a6: UInt32.t;
    a7: UInt32.t;
    a8: UInt32.t;
    a9: UInt32.t;
    a10: UInt32.t;
    a11: UInt32.t;
    a12: UInt32.t;
    a13: UInt32.t;
    a14: UInt32.t;
    a15: UInt32.t;
    a16: UInt32.t;
    a17: UInt32.t;
    a18: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get_a1 (x: t_BigRecord) (return (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x.a1 ] s1 | s1 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l () | & x: t_BigRecord = x ]) [ return (result: UInt32.t) -> (! return {result}) ]
end
