module M_big_types__is_a1 [#"big_types.rs" 26 0 26 31]
  let%span sbig_types = "big_types.rs" 29 13 29 18
  let%span sbig_types'0 = "big_types.rs" 28 22 28 26
  
  use creusot.prelude.Any
  
  type t_BigSum =
    | C_A1
    | C_A2
    | C_A3
    | C_A4
    | C_A5
    | C_A6
    | C_A7
    | C_A8
    | C_A9
    | C_A10
    | C_A11
    | C_A12
    | C_A13
    | C_A14
    | C_A15
    | C_A16
    | C_A17
    | C_A18
    | C_A19
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec is_a1 [#"big_types.rs" 26 0 26 31] (x: t_BigSum) (return' (x'0: bool)) = (! bb0
    [ bb0 = any
      [ br0 -> {x'0 = C_A1} (! bb3)
      | br1 -> {x'0 = C_A2} (! bb1)
      | br2 -> {x'0 = C_A3} (! bb1)
      | br3 -> {x'0 = C_A4} (! bb1)
      | br4 -> {x'0 = C_A5} (! bb1)
      | br5 -> {x'0 = C_A6} (! bb1)
      | br6 -> {x'0 = C_A7} (! bb1)
      | br7 -> {x'0 = C_A8} (! bb1)
      | br8 -> {x'0 = C_A9} (! bb1)
      | br9 -> {x'0 = C_A10} (! bb1)
      | br10 -> {x'0 = C_A11} (! bb1)
      | br11 -> {x'0 = C_A12} (! bb1)
      | br12 -> {x'0 = C_A13} (! bb1)
      | br13 -> {x'0 = C_A14} (! bb1)
      | br14 -> {x'0 = C_A15} (! bb1)
      | br15 -> {x'0 = C_A16} (! bb1)
      | br16 -> {x'0 = C_A17} (! bb1)
      | br17 -> {x'0 = C_A18} (! bb1)
      | br18 -> {x'0 = C_A19} (! bb1) ]
    | bb1 = s0 [ s0 = [ &_0 <- [%#sbig_types] false ] s1 | s1 = bb4 ]
    | bb3 = s0 [ s0 = [ &_0 <- [%#sbig_types'0] true ] s1 | s1 = bb4 ]
    | bb4 = return''0 {_0} ] [ & _0: bool = Any.any_l () | & x'0: t_BigSum = x ])
    [ return''0 (result: bool) -> (! return' {result}) ]
end
module M_big_types__get_a1 [#"big_types.rs" 55 0 55 34]
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_BigRecord = {
    t_BigRecord__a1: UInt32.t;
    t_BigRecord__a2: UInt32.t;
    t_BigRecord__a3: UInt32.t;
    t_BigRecord__a4: UInt32.t;
    t_BigRecord__a5: UInt32.t;
    t_BigRecord__a6: UInt32.t;
    t_BigRecord__a7: UInt32.t;
    t_BigRecord__a8: UInt32.t;
    t_BigRecord__a9: UInt32.t;
    t_BigRecord__a10: UInt32.t;
    t_BigRecord__a11: UInt32.t;
    t_BigRecord__a12: UInt32.t;
    t_BigRecord__a13: UInt32.t;
    t_BigRecord__a14: UInt32.t;
    t_BigRecord__a15: UInt32.t;
    t_BigRecord__a16: UInt32.t;
    t_BigRecord__a17: UInt32.t;
    t_BigRecord__a18: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec get_a1 [#"big_types.rs" 55 0 55 34] (x: t_BigRecord) (return' (x'0: UInt32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x'0.t_BigRecord__a1 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: UInt32.t = Any.any_l () | & x'0: t_BigRecord = x ]) [ return''0 (result: UInt32.t) -> (! return' {result}) ]
end
