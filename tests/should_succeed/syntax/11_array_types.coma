module M_11_array_types__omg
  use creusot.int.UInt64
  use creusot.int.Int64
  use creusot.slice.Slice64
  use seq.Seq
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_UsesArray = { t_UsesArray__0: Slice64.array Int64.t }
  
  function index_logic [@inline:trivial] (self: Slice64.array Int64.t) (ix: int) : Int64.t =
    Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_logic
  
  predicate inv (_0: Seq.seq Int64.t)
  
  axiom inv_axiom [@rewrite]: forall x: Seq.seq Int64.t [inv x]. inv x = true
  
  predicate invariant' (self: Slice64.array Int64.t) =
    inv (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (5: UInt64.t)
  
  predicate inv'0 (_0: Slice64.array Int64.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Slice64.array Int64.t [inv'0 x]. inv'0 x = invariant' x
  
  predicate inv'1 (_0: t_UsesArray)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_UsesArray [inv'1 x]. inv'1 x
      = match x with
        | {t_UsesArray__0 = a_0} -> inv'0 a_0
        end
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec omg (x: t_UsesArray) (return' (x'0: ())) = {[@expl:omg 'x' type invariant] inv'1 x}
    {[@expl:omg requires] Seq.length (Slice64.view x.t_UsesArray__0) > 0
    /\ Seq.length (Slice64.view x.t_UsesArray__0) < UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_3 <- (0: UInt64.t) ] s1
      | s1 = [ &_4 <- UInt64.lt _3 (5: UInt64.t) ] s2
      | s2 = {[@expl:index in bounds] _4} s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = Slice64.set <Int64.t> {x'0.t_UsesArray__0} {_3} {(5: Int64.t)}
          (fun (r: Slice64.array Int64.t) -> [ &x'0 <- { t_UsesArray__0 = r } ] s1)
      | s1 = {[@expl:assertion] Int64.to_int (index_logic x'0.t_UsesArray__0 0) = 5} s2
      | s2 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l () | & x'0: t_UsesArray = x | & _3: UInt64.t = Any.any_l () | & _4: bool = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_11_array_types__call_omg
  use creusot.int.Int64
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_UsesArray = { t_UsesArray__0: Slice64.array Int64.t }
  
  predicate inv (_0: Seq.seq Int64.t)
  
  axiom inv_axiom [@rewrite]: forall x: Seq.seq Int64.t [inv x]. inv x = true
  
  predicate invariant' (self: Slice64.array Int64.t) =
    inv (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (5: UInt64.t)
  
  predicate inv'0 (_0: Slice64.array Int64.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Slice64.array Int64.t [inv'0 x]. inv'0 x = invariant' x
  
  predicate inv'1 (_0: t_UsesArray)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_UsesArray [inv'1 x]. inv'1 x
      = match x with
        | {t_UsesArray__0 = a_0} -> inv'0 a_0
        end
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  let rec omg (x: t_UsesArray) (return' (x'0: ())) = {[@expl:omg 'x' type invariant] inv'1 x}
    {[@expl:omg requires] Seq.length (Slice64.view x.t_UsesArray__0) > 0
    /\ Seq.length (Slice64.view x.t_UsesArray__0) < UInt64.t'int const_MAX}
    any [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_omg (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = Slice64.create <Int64.t> {(5: UInt64.t)} {fun (_: int) -> (3: Int64.t)}
          (fun (_res: Slice64.array Int64.t) -> [ &arr <- _res ] s1)
      | s1 = [ &_2 <- { t_UsesArray__0 = arr } ] s2
      | s2 = omg {_2} (fun (_ret: ()) -> [ &_0 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & arr: Slice64.array Int64.t = Any.any_l () | & _2: t_UsesArray = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
