module M_omg
  use creusot.int.UInt64
  use creusot.int.Int64
  use creusot.slice.Slice64
  use seq.Seq
  use creusot.prelude.Any
  use mach.int.Int
  
  type t_UsesArray = { f0: Slice64.array Int64.t }
  
  function index_array_i64_5 [@inline:trivial] (self: Slice64.array Int64.t) (ix: int) : Int64.t =
    Seq.get (Slice64.view self) ix
  
  meta "rewrite_def" function index_array_i64_5
  
  predicate inv_Seq_i64 [@inline:trivial] (_1: Seq.seq Int64.t) = true
  
  meta "rewrite_def" predicate inv_Seq_i64
  
  predicate invariant_array_i64_5 (self: Slice64.array Int64.t) =
    inv_Seq_i64 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (5: UInt64.t)
  
  predicate inv_array_i64_5 [@inline:trivial] (_1: Slice64.array Int64.t) = invariant_array_i64_5 _1
  
  meta "rewrite_def" predicate inv_array_i64_5
  
  predicate inv_UsesArray (_1: t_UsesArray)
  
  axiom inv_axiom [@rewrite]: forall x: t_UsesArray [inv_UsesArray x]. inv_UsesArray x = inv_array_i64_5 x.f0
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec omg (x: t_UsesArray) (return (x'0: ())) = {[@expl:omg 'x' type invariant] inv_UsesArray x}
    {[@expl:omg requires] Seq.length (Slice64.view x.f0) > 0 /\ Seq.length (Slice64.view x.f0) < UInt64.t'int const_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &_3 <- (0: UInt64.t) ] s1
      | s1 = [ &_4 <- UInt64.lt _3 (5: UInt64.t) ] s2
      | s2 = {[@expl:index in bounds] _4} s3
      | s3 = bb1 ]
    | bb1 = s0
      [ s0 = Slice64.set <Int64.t> {x.f0} {_3} {(5: Int64.t)}
          (fun (r: Slice64.array Int64.t) -> [ &x <- { f0 = r } ] s1)
      | s1 = {[@expl:assertion] Int64.to_int (index_array_i64_5 x.f0 0) = 5} s2
      | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & x: t_UsesArray = x | & _3: UInt64.t = Any.any_l () | & _4: bool = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_call_omg
  use creusot.int.Int64
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_UsesArray = { f0: Slice64.array Int64.t }
  
  predicate inv_Seq_i64 [@inline:trivial] (_1: Seq.seq Int64.t) = true
  
  meta "rewrite_def" predicate inv_Seq_i64
  
  predicate invariant_array_i64_5 (self: Slice64.array Int64.t) =
    inv_Seq_i64 (Slice64.view self) /\ Seq.length (Slice64.view self) = UInt64.t'int (5: UInt64.t)
  
  predicate inv_array_i64_5 [@inline:trivial] (_1: Slice64.array Int64.t) = invariant_array_i64_5 _1
  
  meta "rewrite_def" predicate inv_array_i64_5
  
  predicate inv_UsesArray (_1: t_UsesArray)
  
  axiom inv_axiom [@rewrite]: forall x: t_UsesArray [inv_UsesArray x]. inv_UsesArray x = inv_array_i64_5 x.f0
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  let rec omg (x: t_UsesArray) (return (x'0: ())) = {[@expl:omg 'x' type invariant] inv_UsesArray x}
    {[@expl:omg requires] Seq.length (Slice64.view x.f0) > 0 /\ Seq.length (Slice64.view x.f0) < UInt64.t'int const_MAX}
    any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec call_omg (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = Slice64.create <Int64.t> {(5: UInt64.t)} {fun (_: int) -> (3: Int64.t)}
          (fun (_res: Slice64.array Int64.t) -> [ &arr <- _res ] s1)
      | s1 = [ &_2 <- { f0 = arr } ] s2
      | s2 = omg {_2} (fun (_ret: ()) -> [ &_0 <- _ret ] s3)
      | s3 = bb1 ]
    | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & arr: Slice64.array Int64.t = Any.any_l () | & _2: t_UsesArray = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
