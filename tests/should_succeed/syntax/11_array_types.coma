module M_11_array_types__omg [#"11_array_types.rs" 8 0 8 28]
  let%span s11_array_types = "11_array_types.rs" 9 8 9 9
  let%span s11_array_types'0 = "11_array_types.rs" 9 4 9 10
  let%span s11_array_types'1 = "11_array_types.rs" 9 13 9 14
  let%span s11_array_types'2 = "11_array_types.rs" 11 20 11 32
  let%span s11_array_types'3 = "11_array_types.rs" 7 11 7 53
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 74 8 74 31
  
  use creusot.int.UInt64
  use creusot.int.Int64
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_UsesArray  =
    { t_UsesArray__0: Slice64.array Int64.t }
  
  function index_logic [@inline:trivial] (self: Slice64.array Int64.t) (ix: int) : Int64.t =
    [%#sindex] Seq.get (Slice64.id self) ix
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  meta "compute_max_steps" 1000000
  
  let rec omg[#"11_array_types.rs" 8 0 8 28] (x:t_UsesArray) (return'  (x'0:()))= {[@expl:omg requires] [%#s11_array_types'3] Seq.length (Slice64.id x.t_UsesArray__0)
    > 0
    /\ Seq.length (Slice64.id x.t_UsesArray__0) < UInt64.t'int v_MAX}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- [%#s11_array_types] (0: UInt64.t) ] s1
      | s1 =  [ &_4 <- UInt64.lt _3 ([%#s11_array_types'0] (5: UInt64.t)) ] s2
      | s2 = {[@expl:index in bounds] [%#s11_array_types'0] _4} s3
      | s3 = bb1 ]
    
    | bb1 = s0
      [ s0 = Slice64.set <Int64.t> {x'0.t_UsesArray__0} {_3} {[%#s11_array_types'1] (5: Int64.t)}
          (fun (r:Slice64.array Int64.t) ->  [ &x'0 <- { t_UsesArray__0 = r } ] s1)
      | s1 = {[@expl:assertion] [%#s11_array_types'2] Int64.to_int (index_logic x'0.t_UsesArray__0 0) = 5} s2
      | s2 = return''0 {_0} ]
     ]
    ) [ & _0: () = Any.any_l () | & x'0: t_UsesArray = x | & _3: UInt64.t = Any.any_l () | & _4: bool = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_11_array_types__call_omg [#"11_array_types.rs" 14 0 14 17]
  let%span s11_array_types = "11_array_types.rs" 15 14 15 24
  let%span s11_array_types'0 = "11_array_types.rs" 15 15 15 20
  let%span s11_array_types'1 = "11_array_types.rs" 7 11 7 53
  
  use creusot.int.Int64
  use creusot.int.UInt64
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_UsesArray  =
    { t_UsesArray__0: Slice64.array Int64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  let rec omg (x:t_UsesArray) (return'  (x'0:()))= {[@expl:omg requires] [%#s11_array_types'1] Seq.length (Slice64.id x.t_UsesArray__0)
    > 0
    /\ Seq.length (Slice64.id x.t_UsesArray__0) < UInt64.t'int v_MAX}
    any [ return''0 (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec call_omg[#"11_array_types.rs" 14 0 14 17] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = Slice64.create
          <Int64.t>
          {[%#s11_array_types] (5: UInt64.t)}
          {fun (_: int) -> [%#s11_array_types'0] (3: Int64.t)}
          (fun (_res:Slice64.array Int64.t) ->  [ &arr <- _res ] s1)
      | s1 =  [ &_2 <- { t_UsesArray__0 = arr } ] s2
      | s2 = omg {_2} (fun (_ret:()) ->  [ &_0 <- _ret ] s3)
      | s3 = bb1 ]
    
    | bb1 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () | & arr: Slice64.array Int64.t = Any.any_l () | & _2: t_UsesArray = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
