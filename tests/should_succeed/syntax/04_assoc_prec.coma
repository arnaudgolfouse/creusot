module M_04_assoc_prec__respect_prec
  use creusot.prelude.Any
  use creusot.int.UInt32
  use mach.int.Int
  
  type tuple = { _p0: UInt32.t; _p1: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec respect_prec (x: tuple) (return' (x'0: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:respect_prec ensures #0] 5 = 3 -> 2 + 1 = 3}
      {[@expl:respect_prec ensures #1] Int.div (5 * 3) 2 <> 4 * (40 + 1)}
      {[@expl:respect_prec ensures #2] x._p0 = x._p1}
      (! return' {result}) ]
end
module M_04_assoc_prec__respect_assoc
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec respect_assoc (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:respect_assoc ensures] 0 + 1 = 0} (! return' {result}) ]
end
