module M_test_1
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  predicate invariant' (self: ()) (b: bool) (c: UInt64.t) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_1 (a: ()) (b: bool) (c: UInt64.t) (return (x: ())) = {[@expl:test_1 requires] invariant' a b c}
    (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:test_1 ensures] invariant' a b c} (! return {result}) ]
end
module M_test_2
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  predicate resolve_ref_A [@inline:trivial] (_1: MutBorrow.t ()) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_A
  
  predicate invariant' (self: ()) (b: bool) (c: UInt64.t) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_2 (a: MutBorrow.t ()) (b: bool) (c: UInt64.t) (return (x: ())) =
    {[@expl:test_2 requires] invariant' a.current b c}
    (! bb0
    [ bb0 = s0 [ s0 = -{resolve_ref_A a}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & a: MutBorrow.t () = a ])
    [ return (result: ()) -> {[@expl:test_2 ensures] invariant' a.final b c} (! return {result}) ]
end
module M_test_3
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  predicate resolve_ref_bool [@inline:trivial] (_1: MutBorrow.t bool) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_bool
  
  predicate resolve_ref_A [@inline:trivial] (_1: MutBorrow.t ()) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_A
  
  predicate invariant' (self: ()) (b: bool) (c: UInt64.t) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_3 (a: MutBorrow.t ()) (b: MutBorrow.t bool) (c: UInt64.t) (return (x: ())) =
    {[@expl:test_3 requires] invariant' a.current b.current c}
    (! bb0
    [ bb0 = s0 [ s0 = -{resolve_ref_bool b}- s1 | s1 = -{resolve_ref_A a}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & a: MutBorrow.t () = a | & b: MutBorrow.t bool = b ])
    [ return (result: ()) -> {[@expl:test_3 ensures] invariant' a.final b.final c} (! return {result}) ]
end
module M_test_5
  use creusot.prelude.Any
  use creusot.int.UInt64
  use mach.int.Int
  
  predicate inv2 (self: ()) (b: int) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_5 (a: ()) (b: UInt64.t) (return (x: ())) = {[@expl:test_5 requires] inv2 a (UInt64.t'int b + 0)}
    (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:test_5 ensures] inv2 a (UInt64.t'int b + 0)} (! return {result}) ]
end
module M_test_6
  use creusot.prelude.Any
  
  predicate other_inv (a: ()) (b: bool) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_6 (a: ()) (b: bool) (return (x: ())) = {[@expl:test_6 requires] other_inv a b}
    (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:test_6 ensures] other_inv a b} (! return {result}) ]
end
