module M_09_maintains__test_1
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  predicate invariant' (self: ()) (b: bool) (c: UInt64.t) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_1 (a: ()) (b: bool) (c: UInt64.t) (return' (x: ())) = {[@expl:test_1 requires] invariant' a b c}
    (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:test_1 ensures] invariant' a b c} (! return' {result}) ]
end
module M_09_maintains__test_2
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t ()) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t ()) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate invariant' (self: ()) (b: bool) (c: UInt64.t) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_2 (a: MutBorrow.t ()) (b: bool) (c: UInt64.t) (return' (x: ())) =
    {[@expl:test_2 requires] invariant' a.current b c}
    (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 a'0}- s1 | s1 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l () | & a'0: MutBorrow.t () = a ])
    [ return''0 (result: ()) -> {[@expl:test_2 ensures] invariant' a.final b c} (! return' {result}) ]
end
module M_09_maintains__test_3
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use creusot.int.UInt64
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t bool) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_0: MutBorrow.t bool) = resolve _0
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t ()) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_0: MutBorrow.t ()) = resolve'1 _0
  
  meta "rewrite_def" predicate resolve'2
  
  predicate invariant' (self: ()) (b: bool) (c: UInt64.t) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_3 (a: MutBorrow.t ()) (b: MutBorrow.t bool) (c: UInt64.t) (return' (x: ())) =
    {[@expl:test_3 requires] invariant' a.current b.current c}
    (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 b'0}- s1 | s1 = -{resolve'2 a'0}- s2 | s2 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l () | & a'0: MutBorrow.t () = a | & b'0: MutBorrow.t bool = b ])
    [ return''0 (result: ()) -> {[@expl:test_3 ensures] invariant' a.final b.final c} (! return' {result}) ]
end
module M_09_maintains__test_5
  use creusot.prelude.Any
  use creusot.int.UInt64
  use mach.int.Int
  
  predicate inv2 (self: ()) (b: int) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_5 (a: ()) (b: UInt64.t) (return' (x: ())) = {[@expl:test_5 requires] inv2 a (UInt64.t'int b + 0)}
    (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:test_5 ensures] inv2 a (UInt64.t'int b + 0)} (! return' {result}) ]
end
module M_09_maintains__test_6
  use creusot.prelude.Any
  
  predicate other_inv (a: ()) (b: bool) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_6 (a: ()) (b: bool) (return' (x: ())) = {[@expl:test_6 requires] other_inv a b}
    (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:test_6 ensures] other_inv a b} (! return' {result}) ]
end
