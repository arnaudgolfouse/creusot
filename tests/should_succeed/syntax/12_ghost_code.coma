module M_12_ghost_code__ghost_arg [#"12_ghost_code.rs" 4 0 4 34]
  let%span s12_ghost_code = "12_ghost_code.rs" 5 28 5 44
  
  use creusot.prelude.Any
  use creusot.int.UInt32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_arg [#"12_ghost_code.rs" 4 0 4 34] (g: UInt32.t) (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_x <- [%#s12_ghost_code] g'0 ] s1 | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & g'0: UInt32.t = g | & _x: UInt32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_12_ghost_code__ghost_vec [#"12_ghost_code.rs" 8 0 8 18]
  let%span s12_ghost_code = "12_ghost_code.rs" 10 35 10 50
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 102 26 102 44
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'0] Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec new (return' (x: t_Vec)) = any
    [ return''0 (result: t_Vec) -> {[%#svec] Seq.length (view result) = 0} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_vec [#"12_ghost_code.rs" 8 0 8 18] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: t_Vec) -> [ &x <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_s <- [%#s12_ghost_code] x ] s1 | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: () = Any.any_l () | & x: t_Vec = Any.any_l () | & _s: t_Vec = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_12_ghost_code__ghost_copy [#"12_ghost_code.rs" 16 0 16 19]
  let%span s12_ghost_code = "12_ghost_code.rs" 17 12 17 13
  let%span s12_ghost_code'0 = "12_ghost_code.rs" 18 17 18 59
  let%span s12_ghost_code'1 = "12_ghost_code.rs" 19 9 19 38
  
  use creusot.int.Int32
  use seq.Seq
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_copy [#"12_ghost_code.rs" 16 0 16 19] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- [%#s12_ghost_code] (0: Int32.t) ] s1
      | s1 = [ &_s <- [%#s12_ghost_code'0] Seq.snoc (Seq.empty: Seq.seq Int32.t) (0: Int32.t) ] s2
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_4 <- [%#s12_ghost_code'1] Seq.snoc _s a ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_s <- _4 ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: Int32.t = Any.any_l ()
    | & _s: Seq.seq Int32.t = Any.any_l ()
    | & _4: Seq.seq Int32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_12_ghost_code__ghost_is_copy [#"12_ghost_code.rs" 22 0 22 22]
  let%span s12_ghost_code = "12_ghost_code.rs" 23 16 23 17
  let%span s12_ghost_code'0 = "12_ghost_code.rs" 25 12 25 27
  let%span s12_ghost_code'1 = "12_ghost_code.rs" 28 18 28 26
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 46 20 46 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t Int32.t) = [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) = resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_is_copy [#"12_ghost_code.rs" 22 0 22 22] (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- [%#s12_ghost_code] (0: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &r <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = -{resolve'0 r}- s3
      | s3 = [ &g <- [%#s12_ghost_code'0] r ] s4
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = [ &g1 <- g ] s1
      | s1 = [ &g2 <- g ] s2
      | s2 = {[@expl:assertion] [%#s12_ghost_code'1] g1 = g2} s3
      | s3 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & r: MutBorrow.t Int32.t = Any.any_l ()
    | & g: MutBorrow.t Int32.t = Any.any_l ()
    | & g1: MutBorrow.t Int32.t = Any.any_l ()
    | & g2: MutBorrow.t Int32.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_12_ghost_code__ghost_check [#"12_ghost_code.rs" 34 0 34 20]
  let%span s12_ghost_code = "12_ghost_code.rs" 38 4 38 31
  let%span s12_ghost_code'0 = "12_ghost_code.rs" 40 11 40 12
  let%span s12_ghost_code'1 = "12_ghost_code.rs" 42 23 42 24
  let%span s12_ghost_code'2 = "12_ghost_code.rs" 42 12 42 24
  let%span s12_ghost_code'3 = "12_ghost_code.rs" 32 22 32 24
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 102 26 102 44
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 115 26 115 56
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 111 26 111 48
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 22 14 22 41
  let%span smodel = "../../../creusot-contracts/src/model.rs" 59 8 59 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 43 8 43 22
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'2] Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec new (return' (x: t_Vec)) = any
    [ return''0 (result: t_Vec) -> {[%#svec] Seq.length (view result) = 0} (! return' {result}) ]
  
  function logi_drop [#"12_ghost_code.rs" 32 0 32 21] (_0: t_Vec) : () = [%#s12_ghost_code'3] ()
  
  function view'0 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t = [%#smodel] view self.current
  
  let rec push (self_: MutBorrow.t t_Vec) (v: Int32.t) (return' (x: ())) = any
    [ return''0 (result: ()) -> {[%#svec'0] view self_.final = Seq.snoc (view'0 self_) v} (! return' {result}) ]
  
  function view'1 (self: t_Vec) : Seq.seq Int32.t = [%#smodel'0] view self
  
  let rec len (self_: t_Vec) (return' (x: UInt64.t)) = any
    [ return''0 (result: UInt64.t) -> {[%#svec'1] UInt64.t'int result = Seq.length (view'1 self_)}
      (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_check [#"12_ghost_code.rs" 34 0 34 20] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: t_Vec) -> [ &x <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_2 <- [%#s12_ghost_code] let _ = logi_drop x in () ] s1 | s1 = bb2 ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {x} (fun (_ret: MutBorrow.t t_Vec) -> [ &_5 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = push {_5} {[%#s12_ghost_code'0] (0: Int32.t)} (fun (_ret: ()) -> [ &_4 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = len {x} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_7 <- _8 = ([%#s12_ghost_code'1] (1: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb8) ] ]
    | bb8 = return''0 {_0}
    | bb5 = {[%#s12_ghost_code'2] false} any ]
    [ & _0: () = Any.any_l ()
    | & x: t_Vec = Any.any_l ()
    | & _2: () = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t t_Vec = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_12_ghost_code__takes_struct [#"12_ghost_code.rs" 51 0 51 36]
  let%span s12_ghost_code = "12_ghost_code.rs" 52 10 52 27
  let%span s12_ghost_code'0 = "12_ghost_code.rs" 50 11 50 20
  let%span smodel = "../../../creusot-contracts/src/model.rs" 43 8 43 22
  let%span ssnapshot = "../../../creusot-contracts/src/snapshot.rs" 59 4 59 18
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_MyStruct = { t_MyStruct__f: UInt32.t; t_MyStruct__g: UInt32.t }
  
  function view (self: UInt32.t) : int = [%#smodel] UInt32.t'int self
  
  function view'0 (self: UInt32.t) : int = [%#ssnapshot] view self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_struct [#"12_ghost_code.rs" 51 0 51 36] (x: t_MyStruct) (return' (x'0: ())) =
    {[@expl:takes_struct requires] [%#s12_ghost_code'0] view'0 x.t_MyStruct__g = 0}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_3 <- [%#s12_ghost_code] x'0.t_MyStruct__f ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &x'0 <- { x'0 with t_MyStruct__g = _3 } ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l () | & x'0: t_MyStruct = x | & _3: UInt32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
