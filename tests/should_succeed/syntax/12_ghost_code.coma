module M_12_ghost_code__ghost_arg
  use creusot.prelude.Any
  use creusot.int.UInt32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_arg (g: UInt32.t) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_x <- g ] s1 | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & g: UInt32.t = g | & _x: UInt32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_12_ghost_code__ghost_vec
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec new (return (x: t_Vec)) = any
    [ return' (result: t_Vec) -> {Seq.length (view result) = 0} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_vec (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: t_Vec) -> [ &x <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_s <- x ] s1 | s1 = bb3 ]
    | bb3 = return {_0} ] [ & _0: () = Any.any_l () | & x: t_Vec = Any.any_l () | & _s: t_Vec = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_12_ghost_code__ghost_copy
  use creusot.int.Int32
  use seq.Seq
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_copy (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &a <- (0: Int32.t) ] s1
      | s1 = [ &_s <- Seq.snoc (Seq.empty: Seq.seq Int32.t) (0: Int32.t) ] s2
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_4 <- Seq.snoc _s a ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_s <- _4 ] s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & a: Int32.t = Any.any_l ()
    | & _s: Seq.seq Int32.t = Any.any_l ()
    | & _4: Seq.seq Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_12_ghost_code__ghost_is_copy
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_is_copy (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (0: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &r <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = -{resolve'0 r}- s3
      | s3 = [ &g <- r ] s4
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = [ &g1 <- g ] s1 | s1 = [ &g2 <- g ] s2 | s2 = {[@expl:assertion] g1 = g2} s3 | s3 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & r: MutBorrow.t Int32.t = Any.any_l ()
    | & g: MutBorrow.t Int32.t = Any.any_l ()
    | & g1: MutBorrow.t Int32.t = Any.any_l ()
    | & g2: MutBorrow.t Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_12_ghost_code__ghost_check
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  let rec new (return (x: t_Vec)) = any
    [ return' (result: t_Vec) -> {Seq.length (view result) = 0} (! return {result}) ]
  
  function logi_drop (_1: t_Vec) : () = ()
  
  let rec push (self_: MutBorrow.t t_Vec) (v: Int32.t) (return (x: ())) = any
    [ return' (result: ()) -> {view self_.final = Seq.snoc (view self_.current) v} (! return {result}) ]
  
  let rec len (self_: t_Vec) (return (x: UInt64.t)) = any
    [ return' (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view self_)} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_check (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret: t_Vec) -> [ &x <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_2 <- let _ = logi_drop x in () ] s1 | s1 = bb2 ]
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {x} (fun (_ret: MutBorrow.t t_Vec) -> [ &_5 <- _ret ] [ &x <- _ret.final ] s1)
      | s1 = push {_5} {(0: Int32.t)} (fun (_ret: ()) -> [ &_4 <- _ret ] s2)
      | s2 = bb3 ]
    | bb3 = s0 [ s0 = len {x} (fun (_ret: UInt64.t) -> [ &_8 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_7 <- _8 = (1: UInt64.t) ] s1 | s1 = any [ br0 -> {_7 = false} (! bb6) | br1 -> {_7} (! bb7) ] ]
    | bb7 = return {_0}
    | bb6 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & x: t_Vec = Any.any_l ()
    | & _2: () = Any.any_l ()
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t t_Vec = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_12_ghost_code__takes_struct
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_MyStruct = { t_MyStruct__f: UInt32.t; t_MyStruct__g: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_struct (x: t_MyStruct) (return (x'0: ())) = {[@expl:takes_struct requires] UInt32.t'int x.t_MyStruct__g
    = 0}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_3 <- x.t_MyStruct__f ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &x <- { x with t_MyStruct__g = _3 } ] s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & x: t_MyStruct = x | & _3: UInt32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
