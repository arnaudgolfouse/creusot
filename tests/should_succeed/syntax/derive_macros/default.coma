module M_impl_Default_for_Unit__default (* <Unit as std::default::Default> *)
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec default_Unit (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- () ] s1 | s1 = return {_0} ] ] [ & _0: () = Any.any_l () ])
    [ return (result: ()) -> {[@expl:default ensures] true} (! return {result}) ]
end
module M_impl_Default_for_Tuple__default (* <Tuple as std::default::Default> *)
  use creusot.int.Int32
  use creusot.int.Int64
  use creusot.prelude.Any
  
  let rec default_i32 (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = (0: Int32.t)} (! return {result}) ]
  
  let rec default_i64 (return (x: Int64.t)) = any
    [ return (result: Int64.t) -> {result = (0: Int64.t)} (! return {result}) ]
  
  type t_Tuple = { f0: Int32.t; f1: Int64.t }
  
  predicate postcondition_once_default [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_once_default
  
  predicate resolve_default [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default
  
  predicate postcondition_mut_default [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_mut_default
  
  function fn_mut_once_default (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_default_spec: forall self: (), args: (), res: Int32.t. postcondition_once_default self args res
      = (exists res_state: (). postcondition_mut_default self args res_state res /\ resolve_default res_state)
  
  predicate hist_inv_default [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default
  
  function hist_inv_trans_default (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec: forall self: (), b: (), c: (). hist_inv_default self b
      -> hist_inv_default b c -> hist_inv_default self c
  
  function hist_inv_refl_default (self: ()) : ()
  
  axiom hist_inv_refl_default_spec: forall self: (). hist_inv_default self self
  
  function postcondition_mut_hist_inv_default (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_default_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut_default self args res_state res
      -> hist_inv_default self res_state
  
  function fn_hist_inv_default (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec: forall self: (), res_state: (). hist_inv_default self res_state = (self = res_state)
  
  predicate postcondition_default [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_default
  
  function fn_once_default (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_once_default_spec: forall self: (), args: (), res: Int32.t. postcondition_once_default self args res
      = (postcondition_default self args res /\ resolve_default self)
  
  function fn_mut_default (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_default_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut_default self args res_state res
      = (postcondition_default self args res /\ self = res_state)
  
  predicate postcondition_once_default'0 [@inline:trivial] (self: ()) (args: ()) (result: Int64.t) =
    let () = args in result = (0: Int64.t)
  
  meta "rewrite_def" predicate postcondition_once_default'0
  
  predicate resolve_default'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default'0
  
  predicate postcondition_mut_default'0 [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: Int64.t) =
    let () = args in result = (0: Int64.t)
  
  meta "rewrite_def" predicate postcondition_mut_default'0
  
  function fn_mut_once_default'0 (self: ()) (args: ()) (res: Int64.t) : ()
  
  axiom fn_mut_once_default_spec'0: forall self: (), args: (), res: Int64.t. postcondition_once_default'0 self args res
      = (exists res_state: (). postcondition_mut_default'0 self args res_state res /\ resolve_default'0 res_state)
  
  predicate hist_inv_default'0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default'0
  
  function hist_inv_trans_default'0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec'0: forall self: (), b: (), c: (). hist_inv_default'0 self b
      -> hist_inv_default'0 b c -> hist_inv_default'0 self c
  
  function hist_inv_refl_default'0 (self: ()) : ()
  
  axiom hist_inv_refl_default_spec'0: forall self: (). hist_inv_default'0 self self
  
  function postcondition_mut_hist_inv_default'0 (self: ()) (args: ()) (res_state: ()) (res: Int64.t) : ()
  
  axiom postcondition_mut_hist_inv_default_spec'0:
    forall self: (), args: (), res_state: (), res: Int64.t. postcondition_mut_default'0 self args res_state res
      -> hist_inv_default'0 self res_state
  
  function fn_hist_inv_default'0 (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec'0: forall self: (), res_state: (). hist_inv_default'0 self res_state
      = (self = res_state)
  
  predicate postcondition_default'0 [@inline:trivial] (self: ()) (args: ()) (result: Int64.t) =
    let () = args in result = (0: Int64.t)
  
  meta "rewrite_def" predicate postcondition_default'0
  
  function fn_once_default'0 (self: ()) (args: ()) (res: Int64.t) : ()
  
  axiom fn_once_default_spec'0: forall self: (), args: (), res: Int64.t. postcondition_once_default'0 self args res
      = (postcondition_default'0 self args res /\ resolve_default'0 self)
  
  function fn_mut_default'0 (self: ()) (args: ()) (res_state: ()) (res: Int64.t) : ()
  
  axiom fn_mut_default_spec'0:
    forall self: (), args: (), res_state: (), res: Int64.t. postcondition_mut_default'0 self args res_state res
      = (postcondition_default'0 self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec default_Tuple (return (x: t_Tuple)) = (! bb0
    [ bb0 = s0 [ s0 = default_i32 (fun (_ret: Int32.t) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = default_i64 (fun (_ret: Int64.t) -> [ &_3 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- { f0 = _2; f1 = _3 } ] s1 | s1 = return {_0} ] ]
    [ & _0: t_Tuple = Any.any_l () | & _2: Int32.t = Any.any_l () | & _3: Int64.t = Any.any_l () ])
    [ return (result: t_Tuple) -> {[@expl:default ensures] true
      /\ postcondition_default () () result.f0 /\ postcondition_default'0 () () result.f1}
      (! return {result}) ]
end
module M_impl_Default_for_Named_T__default (* <Named<T> as std::default::Default> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec default_i32 (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = (0: Int32.t)} (! return {result}) ]
  
  type t_T
  
  predicate precondition_default (self: ()) (args: ())
  
  axiom precondition_fndef: forall args: () [precondition_default () args]. (let () = args in true)
      -> precondition_default () args
  
  predicate inv_T (_1: t_T)
  
  predicate postcondition_once_default (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef:
    forall args: (), res: t_T [postcondition_once_default () args res]. postcondition_once_default () args res
      -> (let () = args in inv_T res)
  
  let rec default_T (return (x: t_T)) = {[@expl:default requires] precondition_default () ()}
    any [ return (result: t_T) -> {postcondition_once_default () () result} (! return {result}) ]
  
  type t_Named_T = { x: Int32.t; y: t_T }
  
  predicate inv_Named_T (_1: t_Named_T)
  
  axiom inv_axiom [@rewrite]: forall x'0: t_Named_T [inv_Named_T x'0]. inv_Named_T x'0 = inv_T x'0.y
  
  predicate postcondition_once_default'0 [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_once_default'0
  
  predicate resolve_default [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default
  
  predicate postcondition_mut_default [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_mut_default
  
  function fn_mut_once_default (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_default_spec: forall self: (), args: (), res: Int32.t. postcondition_once_default'0 self args res
      = (exists res_state: (). postcondition_mut_default self args res_state res /\ resolve_default res_state)
  
  predicate hist_inv_default [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default
  
  function hist_inv_trans_default (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec: forall self: (), b: (), c: (). hist_inv_default self b
      -> hist_inv_default b c -> hist_inv_default self c
  
  function hist_inv_refl_default (self: ()) : ()
  
  axiom hist_inv_refl_default_spec: forall self: (). hist_inv_default self self
  
  function postcondition_mut_hist_inv_default (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_default_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut_default self args res_state res
      -> hist_inv_default self res_state
  
  function fn_hist_inv_default (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec: forall self: (), res_state: (). hist_inv_default self res_state = (self = res_state)
  
  predicate postcondition_default [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_default
  
  function fn_once_default (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_once_default_spec: forall self: (), args: (), res: Int32.t. postcondition_once_default'0 self args res
      = (postcondition_default self args res /\ resolve_default self)
  
  function fn_mut_default (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_default_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut_default self args res_state res
      = (postcondition_default self args res /\ self = res_state)
  
  predicate resolve_default'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default'0
  
  predicate postcondition_mut_default'0 (self: ()) (args: ()) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: (), res: t_T [postcondition_mut_default'0 () args () res]. postcondition_mut_default'0 () args () res
      -> (let () = args in inv_T res)
  
  function fn_mut_once_default'0 (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_mut_once_default_spec'0: forall self: (), args: (), res: t_T. postcondition_once_default self args res
      = (exists res_state: (). postcondition_mut_default'0 self args res_state res /\ resolve_default'0 res_state)
  
  predicate hist_inv_default'0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default'0
  
  function hist_inv_trans_default'0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec'0: forall self: (), b: (), c: (). hist_inv_default'0 self b
      -> hist_inv_default'0 b c -> hist_inv_default'0 self c
  
  function hist_inv_refl_default'0 (self: ()) : ()
  
  axiom hist_inv_refl_default_spec'0: forall self: (). hist_inv_default'0 self self
  
  function postcondition_mut_hist_inv_default'0 (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_default_spec'0:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default'0 self args res_state res
      -> hist_inv_default'0 self res_state
  
  function fn_hist_inv_default'0 (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec'0: forall self: (), res_state: (). hist_inv_default'0 self res_state
      = (self = res_state)
  
  predicate postcondition_default'0 (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef'1:
    forall args: (), res: t_T [postcondition_default'0 () args res]. postcondition_default'0 () args res
      -> (let () = args in inv_T res)
  
  function fn_once_default'0 (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_once_default_spec'0: forall self: (), args: (), res: t_T. postcondition_once_default self args res
      = (postcondition_default'0 self args res /\ resolve_default'0 self)
  
  function fn_mut_default'0 (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_default_spec'0:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default'0 self args res_state res
      = (postcondition_default'0 self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec default_Named_T (return (x'0: t_Named_T)) = (! bb0
    [ bb0 = s0 [ s0 = default_i32 (fun (_ret: Int32.t) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = default_T (fun (_ret: t_T) -> [ &_3 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- { x = _2; y = _3 } ] s1 | s1 = bb3 ]
    | bb3 = return {_0} ] [ & _0: t_Named_T = Any.any_l () | & _2: Int32.t = Any.any_l () | & _3: t_T = Any.any_l () ])
    [ return (result: t_Named_T) -> {[@expl:default result type invariant] inv_Named_T result}
      {[@expl:default ensures] true /\ postcondition_default () () result.x /\ postcondition_default'0 () () result.y}
      (! return {result}) ]
end
module M_impl_Default_for_EUnit__default (* <EUnit as std::default::Default> *)
  use creusot.prelude.Any
  
  type t_EUnit = X | Y
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec default_EUnit (return (x: t_EUnit)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- Y ] s1 | s1 = return {_0} ] ] [ & _0: t_EUnit = Any.any_l () ])
    [ return (result: t_EUnit) -> {[@expl:default ensures] match result with
        | Y -> true
        | _ -> false
        end}
      (! return {result}) ]
end
module M_impl_Default_for_ETuple__default (* <ETuple as std::default::Default> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec default_i32 (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = (0: Int32.t)} (! return {result}) ]
  
  type t_Vec_i32_Global
  
  type t_ETuple = A Int32.t Int32.t | B t_Vec_i32_Global
  
  predicate postcondition_once_default [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_once_default
  
  predicate resolve_default [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default
  
  predicate postcondition_mut_default [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_mut_default
  
  function fn_mut_once_default (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_default_spec: forall self: (), args: (), res: Int32.t. postcondition_once_default self args res
      = (exists res_state: (). postcondition_mut_default self args res_state res /\ resolve_default res_state)
  
  predicate hist_inv_default [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default
  
  function hist_inv_trans_default (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec: forall self: (), b: (), c: (). hist_inv_default self b
      -> hist_inv_default b c -> hist_inv_default self c
  
  function hist_inv_refl_default (self: ()) : ()
  
  axiom hist_inv_refl_default_spec: forall self: (). hist_inv_default self self
  
  function postcondition_mut_hist_inv_default (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_default_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut_default self args res_state res
      -> hist_inv_default self res_state
  
  function fn_hist_inv_default (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec: forall self: (), res_state: (). hist_inv_default self res_state = (self = res_state)
  
  predicate postcondition_default [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_default
  
  function fn_once_default (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_once_default_spec: forall self: (), args: (), res: Int32.t. postcondition_once_default self args res
      = (postcondition_default self args res /\ resolve_default self)
  
  function fn_mut_default (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_default_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut_default self args res_state res
      = (postcondition_default self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec default_ETuple (return (x: t_ETuple)) = (! bb0
    [ bb0 = s0 [ s0 = default_i32 (fun (_ret: Int32.t) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = default_i32 (fun (_ret: Int32.t) -> [ &_3 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- A _2 _3 ] s1 | s1 = return {_0} ] ]
    [ & _0: t_ETuple = Any.any_l () | & _2: Int32.t = Any.any_l () | & _3: Int32.t = Any.any_l () ])
    [ return (result: t_ETuple) -> {[@expl:default ensures] match result with
        | A x0 x1 -> true /\ postcondition_default () () x0 /\ postcondition_default () () x1
        | _ -> false
        end}
      (! return {result}) ]
end
module M_impl_Default_for_ENamed_T_U__default (* <ENamed<T, U> as std::default::Default> *)
  use creusot.prelude.Any
  
  type t_T
  
  predicate precondition_default (self: ()) (args: ())
  
  axiom precondition_fndef: forall args: () [precondition_default () args]. (let () = args in true)
      -> precondition_default () args
  
  predicate inv_T (_1: t_T)
  
  predicate postcondition_once_default (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef:
    forall args: (), res: t_T [postcondition_once_default () args res]. postcondition_once_default () args res
      -> (let () = args in inv_T res)
  
  let rec default_T (return (x: t_T)) = {[@expl:default requires] precondition_default () ()}
    any [ return (result: t_T) -> {postcondition_once_default () () result} (! return {result}) ]
  
  type t_U
  
  predicate precondition_default'0 (self: ()) (args: ())
  
  axiom precondition_fndef'0: forall args: () [precondition_default'0 () args]. (let () = args in true)
      -> precondition_default'0 () args
  
  predicate inv_U (_1: t_U)
  
  predicate postcondition_once_default'0 (self: ()) (args: ()) (result: t_U)
  
  axiom postcondition_fndef'0:
    forall args: (), res: t_U [postcondition_once_default'0 () args res]. postcondition_once_default'0 () args res
      -> (let () = args in inv_U res)
  
  let rec default_U (return (x: t_U)) = {[@expl:default requires] precondition_default'0 () ()}
    any [ return (result: t_U) -> {postcondition_once_default'0 () () result} (! return {result}) ]
  
  type t_ENamed_T_U = A t_T t_U | B
  
  predicate inv_ENamed_T_U (_1: t_ENamed_T_U)
  
  axiom inv_axiom [@rewrite]: forall x: t_ENamed_T_U [inv_ENamed_T_U x]. inv_ENamed_T_U x
      = match x with
        | A x'0 y -> inv_T x'0 /\ inv_U y
        | B -> true
        end
  
  predicate resolve_default [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default
  
  predicate postcondition_mut_default (self: ()) (args: ()) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'1:
    forall args: (), res: t_T [postcondition_mut_default () args () res]. postcondition_mut_default () args () res
      -> (let () = args in inv_T res)
  
  function fn_mut_once_default (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_mut_once_default_spec: forall self: (), args: (), res: t_T. postcondition_once_default self args res
      = (exists res_state: (). postcondition_mut_default self args res_state res /\ resolve_default res_state)
  
  predicate hist_inv_default [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default
  
  function hist_inv_trans_default (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec: forall self: (), b: (), c: (). hist_inv_default self b
      -> hist_inv_default b c -> hist_inv_default self c
  
  function hist_inv_refl_default (self: ()) : ()
  
  axiom hist_inv_refl_default_spec: forall self: (). hist_inv_default self self
  
  function postcondition_mut_hist_inv_default (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_default_spec:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default self args res_state res
      -> hist_inv_default self res_state
  
  function fn_hist_inv_default (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec: forall self: (), res_state: (). hist_inv_default self res_state = (self = res_state)
  
  predicate postcondition_default (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef'2:
    forall args: (), res: t_T [postcondition_default () args res]. postcondition_default () args res
      -> (let () = args in inv_T res)
  
  function fn_once_default (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_once_default_spec: forall self: (), args: (), res: t_T. postcondition_once_default self args res
      = (postcondition_default self args res /\ resolve_default self)
  
  function fn_mut_default (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_default_spec:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default self args res_state res
      = (postcondition_default self args res /\ self = res_state)
  
  predicate resolve_default'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default'0
  
  predicate postcondition_mut_default'0 (self: ()) (args: ()) (result_state: ()) (result: t_U)
  
  axiom postcondition_fndef'3:
    forall args: (), res: t_U [postcondition_mut_default'0 () args () res]. postcondition_mut_default'0 () args () res
      -> (let () = args in inv_U res)
  
  function fn_mut_once_default'0 (self: ()) (args: ()) (res: t_U) : ()
  
  axiom fn_mut_once_default_spec'0: forall self: (), args: (), res: t_U. postcondition_once_default'0 self args res
      = (exists res_state: (). postcondition_mut_default'0 self args res_state res /\ resolve_default'0 res_state)
  
  predicate hist_inv_default'0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default'0
  
  function hist_inv_trans_default'0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec'0: forall self: (), b: (), c: (). hist_inv_default'0 self b
      -> hist_inv_default'0 b c -> hist_inv_default'0 self c
  
  function hist_inv_refl_default'0 (self: ()) : ()
  
  axiom hist_inv_refl_default_spec'0: forall self: (). hist_inv_default'0 self self
  
  function postcondition_mut_hist_inv_default'0 (self: ()) (args: ()) (res_state: ()) (res: t_U) : ()
  
  axiom postcondition_mut_hist_inv_default_spec'0:
    forall self: (), args: (), res_state: (), res: t_U. postcondition_mut_default'0 self args res_state res
      -> hist_inv_default'0 self res_state
  
  function fn_hist_inv_default'0 (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec'0: forall self: (), res_state: (). hist_inv_default'0 self res_state
      = (self = res_state)
  
  predicate postcondition_default'0 (self: ()) (args: ()) (result: t_U)
  
  axiom postcondition_fndef'4:
    forall args: (), res: t_U [postcondition_default'0 () args res]. postcondition_default'0 () args res
      -> (let () = args in inv_U res)
  
  function fn_once_default'0 (self: ()) (args: ()) (res: t_U) : ()
  
  axiom fn_once_default_spec'0: forall self: (), args: (), res: t_U. postcondition_once_default'0 self args res
      = (postcondition_default'0 self args res /\ resolve_default'0 self)
  
  function fn_mut_default'0 (self: ()) (args: ()) (res_state: ()) (res: t_U) : ()
  
  axiom fn_mut_default_spec'0:
    forall self: (), args: (), res_state: (), res: t_U. postcondition_mut_default'0 self args res_state res
      = (postcondition_default'0 self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec default_ENamed_T_U (return (x: t_ENamed_T_U)) = (! bb0
    [ bb0 = s0 [ s0 = default_T (fun (_ret: t_T) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = default_U (fun (_ret: t_U) -> [ &_3 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &_0 <- A _2 _3 ] s1 | s1 = bb4 ]
    | bb4 = return {_0} ] [ & _0: t_ENamed_T_U = Any.any_l () | & _2: t_T = Any.any_l () | & _3: t_U = Any.any_l () ])
    [ return (result: t_ENamed_T_U) -> {[@expl:default result type invariant] inv_ENamed_T_U result}
      {[@expl:default ensures] match result with
        | A x y -> true /\ postcondition_default () () x /\ postcondition_default'0 () () y
        | _ -> false
        end}
      (! return {result}) ]
end
module M_impl_Default_for_Named_T__default__refines (* <Named<T> as std::default::Default> *)
  use creusot.int.Int32
  
  predicate postcondition_once_default [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_once_default
  
  predicate resolve_default [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default
  
  predicate postcondition_mut_default [@inline:trivial] (self: ()) (args: ()) (result_state: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_mut_default
  
  function fn_mut_once_default (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_default_spec: forall self: (), args: (), res: Int32.t. postcondition_once_default self args res
      = (exists res_state: (). postcondition_mut_default self args res_state res /\ resolve_default res_state)
  
  predicate hist_inv_default [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default
  
  function hist_inv_trans_default (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec: forall self: (), b: (), c: (). hist_inv_default self b
      -> hist_inv_default b c -> hist_inv_default self c
  
  function hist_inv_refl_default (self: ()) : ()
  
  axiom hist_inv_refl_default_spec: forall self: (). hist_inv_default self self
  
  function postcondition_mut_hist_inv_default (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_default_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut_default self args res_state res
      -> hist_inv_default self res_state
  
  function fn_hist_inv_default (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec: forall self: (), res_state: (). hist_inv_default self res_state = (self = res_state)
  
  predicate postcondition_default [@inline:trivial] (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  meta "rewrite_def" predicate postcondition_default
  
  function fn_once_default (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_once_default_spec: forall self: (), args: (), res: Int32.t. postcondition_once_default self args res
      = (postcondition_default self args res /\ resolve_default self)
  
  function fn_mut_default (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_default_spec:
    forall self: (), args: (), res_state: (), res: Int32.t. postcondition_mut_default self args res_state res
      = (postcondition_default self args res /\ self = res_state)
  
  let rec default_i32 (return (x: Int32.t)) = any
    [ return (result: Int32.t) -> {result = (0: Int32.t)} (! return {result}) ]
  
  type t_T
  
  type t_Named_T = { x: Int32.t; y: t_T }
  
  predicate inv_T (_1: t_T)
  
  predicate postcondition_once_default'0 (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef:
    forall args: (), res: t_T [postcondition_once_default'0 () args res]. postcondition_once_default'0 () args res
      -> (let () = args in inv_T res)
  
  predicate resolve_default'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default'0
  
  predicate postcondition_mut_default'0 (self: ()) (args: ()) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: (), res: t_T [postcondition_mut_default'0 () args () res]. postcondition_mut_default'0 () args () res
      -> (let () = args in inv_T res)
  
  function fn_mut_once_default'0 (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_mut_once_default_spec'0: forall self: (), args: (), res: t_T. postcondition_once_default'0 self args res
      = (exists res_state: (). postcondition_mut_default'0 self args res_state res /\ resolve_default'0 res_state)
  
  predicate hist_inv_default'0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default'0
  
  function hist_inv_trans_default'0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec'0: forall self: (), b: (), c: (). hist_inv_default'0 self b
      -> hist_inv_default'0 b c -> hist_inv_default'0 self c
  
  function hist_inv_refl_default'0 (self: ()) : ()
  
  axiom hist_inv_refl_default_spec'0: forall self: (). hist_inv_default'0 self self
  
  function postcondition_mut_hist_inv_default'0 (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_default_spec'0:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default'0 self args res_state res
      -> hist_inv_default'0 self res_state
  
  function fn_hist_inv_default'0 (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec'0: forall self: (), res_state: (). hist_inv_default'0 self res_state
      = (self = res_state)
  
  predicate postcondition_default'0 (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef'1:
    forall args: (), res: t_T [postcondition_default'0 () args res]. postcondition_default'0 () args res
      -> (let () = args in inv_T res)
  
  function fn_once_default'0 (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_once_default_spec'0: forall self: (), args: (), res: t_T. postcondition_once_default'0 self args res
      = (postcondition_default'0 self args res /\ resolve_default'0 self)
  
  function fn_mut_default'0 (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_default_spec'0:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default'0 self args res_state res
      = (postcondition_default'0 self args res /\ self = res_state)
  
  predicate precondition_default (self: ()) (args: ())
  
  axiom precondition_fndef: forall args: () [precondition_default () args]. (let () = args in true)
      -> precondition_default () args
  
  let rec default_T (return (x'0: t_T)) = {[@expl:default requires] precondition_default () ()}
    any [ return (result: t_T) -> {postcondition_once_default'0 () () result} (! return {result}) ]
  
  predicate inv_Named_T (_1: t_Named_T)
  
  axiom inv_axiom [@rewrite]: forall x'0: t_Named_T [inv_Named_T x'0]. inv_Named_T x'0 = inv_T x'0.y
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall result: t_Named_T. true
        /\ postcondition_default () () result.x /\ postcondition_default'0 () () result.y /\ inv_Named_T result
      -> inv_Named_T result
end
module M_impl_Default_for_ENamed_T_U__default__refines (* <ENamed<T, U> as std::default::Default> *)
  type t_T
  
  type t_U
  
  type t_ENamed_T_U = A t_T t_U | B
  
  predicate inv_T (_1: t_T)
  
  predicate postcondition_once_default (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef:
    forall args: (), res: t_T [postcondition_once_default () args res]. postcondition_once_default () args res
      -> (let () = args in inv_T res)
  
  predicate resolve_default [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default
  
  predicate postcondition_mut_default (self: ()) (args: ()) (result_state: ()) (result: t_T)
  
  axiom postcondition_fndef'0:
    forall args: (), res: t_T [postcondition_mut_default () args () res]. postcondition_mut_default () args () res
      -> (let () = args in inv_T res)
  
  function fn_mut_once_default (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_mut_once_default_spec: forall self: (), args: (), res: t_T. postcondition_once_default self args res
      = (exists res_state: (). postcondition_mut_default self args res_state res /\ resolve_default res_state)
  
  predicate hist_inv_default [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default
  
  function hist_inv_trans_default (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec: forall self: (), b: (), c: (). hist_inv_default self b
      -> hist_inv_default b c -> hist_inv_default self c
  
  function hist_inv_refl_default (self: ()) : ()
  
  axiom hist_inv_refl_default_spec: forall self: (). hist_inv_default self self
  
  function postcondition_mut_hist_inv_default (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom postcondition_mut_hist_inv_default_spec:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default self args res_state res
      -> hist_inv_default self res_state
  
  function fn_hist_inv_default (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec: forall self: (), res_state: (). hist_inv_default self res_state = (self = res_state)
  
  predicate postcondition_default (self: ()) (args: ()) (result: t_T)
  
  axiom postcondition_fndef'1:
    forall args: (), res: t_T [postcondition_default () args res]. postcondition_default () args res
      -> (let () = args in inv_T res)
  
  function fn_once_default (self: ()) (args: ()) (res: t_T) : ()
  
  axiom fn_once_default_spec: forall self: (), args: (), res: t_T. postcondition_once_default self args res
      = (postcondition_default self args res /\ resolve_default self)
  
  function fn_mut_default (self: ()) (args: ()) (res_state: ()) (res: t_T) : ()
  
  axiom fn_mut_default_spec:
    forall self: (), args: (), res_state: (), res: t_T. postcondition_mut_default self args res_state res
      = (postcondition_default self args res /\ self = res_state)
  
  predicate precondition_default (self: ()) (args: ())
  
  axiom precondition_fndef: forall args: () [precondition_default () args]. (let () = args in true)
      -> precondition_default () args
  
  let rec default_T (return (x: t_T)) = {[@expl:default requires] precondition_default () ()}
    any [ return (result: t_T) -> {postcondition_once_default () () result} (! return {result}) ]
  
  predicate inv_U (_1: t_U)
  
  predicate postcondition_once_default'0 (self: ()) (args: ()) (result: t_U)
  
  axiom postcondition_fndef'2:
    forall args: (), res: t_U [postcondition_once_default'0 () args res]. postcondition_once_default'0 () args res
      -> (let () = args in inv_U res)
  
  predicate resolve_default'0 [@inline:trivial] (_1: ()) = true
  
  meta "rewrite_def" predicate resolve_default'0
  
  predicate postcondition_mut_default'0 (self: ()) (args: ()) (result_state: ()) (result: t_U)
  
  axiom postcondition_fndef'3:
    forall args: (), res: t_U [postcondition_mut_default'0 () args () res]. postcondition_mut_default'0 () args () res
      -> (let () = args in inv_U res)
  
  function fn_mut_once_default'0 (self: ()) (args: ()) (res: t_U) : ()
  
  axiom fn_mut_once_default_spec'0: forall self: (), args: (), res: t_U. postcondition_once_default'0 self args res
      = (exists res_state: (). postcondition_mut_default'0 self args res_state res /\ resolve_default'0 res_state)
  
  predicate hist_inv_default'0 [@inline:trivial] (self: ()) (result_state: ()) = true
  
  meta "rewrite_def" predicate hist_inv_default'0
  
  function hist_inv_trans_default'0 (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_default_spec'0: forall self: (), b: (), c: (). hist_inv_default'0 self b
      -> hist_inv_default'0 b c -> hist_inv_default'0 self c
  
  function hist_inv_refl_default'0 (self: ()) : ()
  
  axiom hist_inv_refl_default_spec'0: forall self: (). hist_inv_default'0 self self
  
  function postcondition_mut_hist_inv_default'0 (self: ()) (args: ()) (res_state: ()) (res: t_U) : ()
  
  axiom postcondition_mut_hist_inv_default_spec'0:
    forall self: (), args: (), res_state: (), res: t_U. postcondition_mut_default'0 self args res_state res
      -> hist_inv_default'0 self res_state
  
  function fn_hist_inv_default'0 (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_default_spec'0: forall self: (), res_state: (). hist_inv_default'0 self res_state
      = (self = res_state)
  
  predicate postcondition_default'0 (self: ()) (args: ()) (result: t_U)
  
  axiom postcondition_fndef'4:
    forall args: (), res: t_U [postcondition_default'0 () args res]. postcondition_default'0 () args res
      -> (let () = args in inv_U res)
  
  function fn_once_default'0 (self: ()) (args: ()) (res: t_U) : ()
  
  axiom fn_once_default_spec'0: forall self: (), args: (), res: t_U. postcondition_once_default'0 self args res
      = (postcondition_default'0 self args res /\ resolve_default'0 self)
  
  function fn_mut_default'0 (self: ()) (args: ()) (res_state: ()) (res: t_U) : ()
  
  axiom fn_mut_default_spec'0:
    forall self: (), args: (), res_state: (), res: t_U. postcondition_mut_default'0 self args res_state res
      = (postcondition_default'0 self args res /\ self = res_state)
  
  predicate precondition_default'0 (self: ()) (args: ())
  
  axiom precondition_fndef'0: forall args: () [precondition_default'0 () args]. (let () = args in true)
      -> precondition_default'0 () args
  
  let rec default_U (return (x: t_U)) = {[@expl:default requires] precondition_default'0 () ()}
    any [ return (result: t_U) -> {postcondition_once_default'0 () () result} (! return {result}) ]
  
  predicate inv_ENamed_T_U (_1: t_ENamed_T_U)
  
  axiom inv_axiom [@rewrite]: forall x: t_ENamed_T_U [inv_ENamed_T_U x]. inv_ENamed_T_U x
      = match x with
        | A x'0 y -> inv_T x'0 /\ inv_U y
        | B -> true
        end
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall result: t_ENamed_T_U. match result with
            | A x y -> true /\ postcondition_default () () x /\ postcondition_default'0 () () y
            | _ -> false
            end
        /\ inv_ENamed_T_U result -> inv_ENamed_T_U result
end
