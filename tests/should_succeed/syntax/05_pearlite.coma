module M_05_pearlite__has_len_3
  use creusot.slice.Slice64
  use creusot.int.UInt32
  use seq.Seq
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant v : Slice64.slice UInt32.t
  
  predicate has_len_3 (v'0: Slice64.slice UInt32.t)
  
  goal vc_has_len_3: true
end
module M_05_pearlite__struct_in_pearlite
  use creusot.prelude.Any
  
  type t_A = { t_A__a: bool }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec struct_in_pearlite (x: t_A) (return' (x'0: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:struct_in_pearlite ensures] x = { t_A__a = false }} (! return' {result}) ]
end
module M_05_pearlite__struct_order
  use creusot.prelude.Any
  use creusot.int.UInt32
  
  type t_B = { t_B__field1: bool; t_B__field2: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec struct_order (x: t_B) (return' (x'0: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:struct_order ensures] x = { t_B__field1 = false; t_B__field2 = (0: UInt32.t) }}
      (! return' {result}) ]
end
module M_05_pearlite__ghost_closure
  use creusot.int.UInt32
  use creusot.prelude.Any
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_closure (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_x <- fun (a: UInt32.t) -> a ] s1 | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & _x: Map.map UInt32.t UInt32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_05_pearlite__pearlite_closure
  use creusot.prelude.Any
  use creusot.int.UInt32
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec pearlite_closure (_x: Map.map UInt32.t bool) (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_05_pearlite__caller
  use creusot.int.UInt32
  use map.Map
  use creusot.prelude.Any
  
  let rec pearlite_closure (_x: Map.map UInt32.t bool) (return' (x: ())) = any
    [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec caller (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_2 <- fun (_a: UInt32.t) -> true ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = pearlite_closure {_2} (fun (_ret: ()) -> [ &_1 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & _1: () = Any.any_l () | & _2: Map.map UInt32.t bool = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
