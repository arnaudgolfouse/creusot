module M_05_pearlite__has_len_3 [#"05_pearlite.rs" 10 0 10 35]
  let%span s05_pearlite = "05_pearlite.rs" 9 11 9 24
  let%span s05_pearlite'0 = "05_pearlite.rs" 11 16 11 29
  let%span smodel = "../../../creusot-contracts/src/model.rs" 43 8 43 22
  
  use creusot.slice.Slice64
  use creusot.int.UInt32
  use seq.Seq
  
  function view [@inline:trivial] (self: Slice64.slice UInt32.t) : Seq.seq UInt32.t = [%#smodel] Slice64.view self
  
  meta "rewrite_def" function view
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant v : Slice64.slice UInt32.t
  
  predicate has_len_3 [#"05_pearlite.rs" 10 0 10 35] (v'0: Slice64.slice UInt32.t)
  
  goal vc_has_len_3: true
end
module M_05_pearlite__struct_in_pearlite [#"05_pearlite.rs" 25 0 25 31]
  let%span s05_pearlite = "05_pearlite.rs" 24 10 24 29
  
  use creusot.prelude.Any
  
  type t_A = { t_A__a: bool }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec struct_in_pearlite [#"05_pearlite.rs" 25 0 25 31] (x: t_A) (return' (x'0: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:struct_in_pearlite ensures] [%#s05_pearlite] x = { t_A__a = false }}
      (! return' {result}) ]
end
module M_05_pearlite__struct_order [#"05_pearlite.rs" 33 0 33 25]
  let%span s05_pearlite = "05_pearlite.rs" 32 10 32 48
  
  use creusot.prelude.Any
  use creusot.int.UInt32
  
  type t_B = { t_B__field1: bool; t_B__field2: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec struct_order [#"05_pearlite.rs" 33 0 33 25] (x: t_B) (return' (x'0: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:struct_order ensures] [%#s05_pearlite] x
      = { t_B__field1 = false; t_B__field2 = (0: UInt32.t) }}
      (! return' {result}) ]
end
module M_05_pearlite__ghost_closure [#"05_pearlite.rs" 48 0 48 22]
  let%span s05_pearlite = "05_pearlite.rs" 49 13 49 37
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_closure [#"05_pearlite.rs" 48 0 48 22] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_x <- [%#s05_pearlite] fun (a: UInt32.t) -> a ] s1 | s1 = bb1 ] | bb1 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & _x: Map.map UInt32.t UInt32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_05_pearlite__pearlite_closure [#"05_pearlite.rs" 52 0 52 57]
  use creusot.prelude.Any
  use creusot.int.UInt32
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec pearlite_closure [#"05_pearlite.rs" 52 0 52 57] (_x: Map.map UInt32.t bool) (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_05_pearlite__caller [#"05_pearlite.rs" 54 0 54 15]
  let%span s05_pearlite = "05_pearlite.rs" 55 21 55 44
  
  use creusot.int.UInt32
  use map.Map
  use creusot.prelude.Any
  
  let rec pearlite_closure (_x: Map.map UInt32.t bool) (return' (x: ())) = any
    [ return''0 (result: ()) -> (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec caller [#"05_pearlite.rs" 54 0 54 15] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &_2 <- [%#s05_pearlite] fun (_a: UInt32.t) -> true ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = pearlite_closure {_2} (fun (_ret: ()) -> [ &_1 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return''0 {_0} ]
    [ & _0: () = Any.any_l () | & _1: () = Any.any_l () | & _2: Map.map UInt32.t bool = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
