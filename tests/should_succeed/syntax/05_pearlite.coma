module M_05_pearlite__has_len_3 [#"05_pearlite.rs" 11 0 11 35]
  let%span s05_pearlite = "05_pearlite.rs" 10 11 10 24
  let%span s05_pearlite'0 = "05_pearlite.rs" 12 16 12 29
  let%span smodel = "../../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 41
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 31 14 31 42
  
  use creusot.slice.Slice64
  use creusot.int.UInt32
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: Slice64.slice UInt32.t) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: Slice64.slice UInt32.t. [%#sslice] Seq.length (view self) <= UInt64.t'int v_MAX
  
  axiom view_spec'0: forall self: Slice64.slice UInt32.t. [%#sslice'0] view self = Slice64.id self
  
  function view'0 (self: Slice64.slice UInt32.t) : Seq.seq UInt32.t =
    [%#smodel] view self
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant v  : Slice64.slice UInt32.t
  
  predicate has_len_3 [#"05_pearlite.rs" 11 0 11 35] (v'0: Slice64.slice UInt32.t)
  
  goal vc_has_len_3: true
end
module M_05_pearlite__struct_in_pearlite [#"05_pearlite.rs" 26 0 26 31]
  let%span s05_pearlite = "05_pearlite.rs" 25 10 25 29
  
  use creusot.prelude.Any
  
  type t_A  =
    { t_A__a: bool }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec struct_in_pearlite[#"05_pearlite.rs" 26 0 26 31] (x:t_A) (return'  (x'0:()))= (! bb0 [ bb0 = return''0 {_0} ] 
    [ & _0: () = Any.any_l () ]
    )
    [ return''0 (result:())-> {[@expl:struct_in_pearlite ensures] [%#s05_pearlite] x = { t_A__a = false }}
      (! return' {result}) ]

end
module M_05_pearlite__struct_order [#"05_pearlite.rs" 34 0 34 25]
  let%span s05_pearlite = "05_pearlite.rs" 33 10 33 48
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_B  =
    { t_B__field1: bool; t_B__field2: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec struct_order[#"05_pearlite.rs" 34 0 34 25] (x:t_B) (return'  (x'0:()))= (! bb0 [ bb0 = return''0 {_0} ] 
    [ & _0: () = Any.any_l () ]
    )
    [ return''0 (result:())-> {[@expl:struct_order ensures] [%#s05_pearlite] x
      = { t_B__field1 = false; t_B__field2 = (0: UInt32.t) }}
      (! return' {result}) ]

end
module M_05_pearlite__ghost_closure [#"05_pearlite.rs" 50 0 50 22]
  let%span s05_pearlite = "05_pearlite.rs" 51 13 51 37
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_closure[#"05_pearlite.rs" 50 0 50 22] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_x <- [%#s05_pearlite] fun (a: UInt32.t) -> a ] s1 | s1 = bb1 ]  | bb1 = return''0 {_0} ]
     [ & _0: () = Any.any_l () | & _x: Map.map UInt32.t UInt32.t = Any.any_l () ] )
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_05_pearlite__pearlite_closure [#"05_pearlite.rs" 54 0 54 57]
  use creusot.int.UInt32
  use map.Map
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec pearlite_closure[#"05_pearlite.rs" 54 0 54 57] (_x:Map.map UInt32.t bool) (return'  (x:()))= (! bb0
    [ bb0 = return''0 {_0} ]
     [ & _0: () = Any.any_l () ] ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_05_pearlite__caller [#"05_pearlite.rs" 56 0 56 15]
  let%span s05_pearlite = "05_pearlite.rs" 57 21 57 44
  
  use creusot.int.UInt32
  use map.Map
  use creusot.prelude.Any
  
  let rec pearlite_closure (_x:Map.map UInt32.t bool) (return'  (x:()))= any
    [ return''0 (result:())-> (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec caller[#"05_pearlite.rs" 56 0 56 15] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_2 <- [%#s05_pearlite] fun (_a: UInt32.t) -> true ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = pearlite_closure {_2} (fun (_ret:()) ->  [ &_1 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = return''0 {_0} ]
     [ & _0: () = Any.any_l () | & _1: () = Any.any_l () | & _2: Map.map UInt32.t bool = Any.any_l () ] )
    [ return''0 (result:())-> (! return' {result}) ]

end
