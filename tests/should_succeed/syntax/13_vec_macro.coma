module M_13_vec_macro__x [#"13_vec_macro.rs" 5 0 5 10]
  let%span s13_vec_macro = "13_vec_macro.rs" 7 20 7 34
  let%span s13_vec_macro'0 = "13_vec_macro.rs" 9 18 9 19
  let%span s13_vec_macro'1 = "13_vec_macro.rs" 9 21 9 22
  let%span s13_vec_macro'2 = "13_vec_macro.rs" 10 20 10 34
  let%span s13_vec_macro'3 = "13_vec_macro.rs" 12 18 12 19
  let%span s13_vec_macro'4 = "13_vec_macro.rs" 12 21 12 22
  let%span s13_vec_macro'5 = "13_vec_macro.rs" 12 24 12 25
  let%span s13_vec_macro'6 = "13_vec_macro.rs" 13 20 13 34
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 72 26 72 44
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 178 22 178 41
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 179 22 179 70
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 356 18 356 35
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 41
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 31 14 31 42
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 22 8 22 22
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.int.Int32
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'0] Seq.length (view self) <= UInt64.t'int v_MAX
  
  let rec new (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#svec] Seq.length (view result) = 0} (! return' {result}) ]
  
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  function view'0 (self: t_Vec'0) : Seq.seq Int32.t
  
  axiom view_spec'0: forall self: t_Vec'0. [%#svec'0] Seq.length (view'0 self) <= UInt64.t'int v_MAX
  
  function index_logic [@inline:trivial] (self: t_Vec'0) (ix: int) : Int32.t =
    [%#sindex] Seq.get (view'0 self) ix
  
  let rec from_elem (elem:Int32.t) (n:UInt64.t) (return'  (x:t_Vec'0))= any
    [ return''0 (result:t_Vec'0)-> {[%#svec'1] Seq.length (view'0 result) = UInt64.t'int n}
      {[%#svec'2] forall i: int. 0 <= i /\ i < UInt64.t'int n  -> index_logic result i = elem}
      (! return' {result}) ]
  
  
  function view'1 (self: Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec'1: forall self: Slice64.slice Int32.t. [%#sslice'0] Seq.length (view'1 self) <= UInt64.t'int v_MAX
  
  axiom view_spec'2: forall self: Slice64.slice Int32.t. [%#sslice'1] view'1 self = Slice64.id self
  
  function view'2 (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#sboxed] view'1 self
  
  let rec into_vec (self_:Slice64.slice Int32.t) (return'  (x:t_Vec'0))= any
    [ return''0 (result:t_Vec'0)-> {[%#sslice] view'0 result = view'2 self_} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x[#"13_vec_macro.rs" 5 0 5 10] (return'  (x'0:()))= (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret:t_Vec) ->  [ &v0 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#s13_vec_macro] Seq.length (view v0) = 0} s1
      | s1 = from_elem {[%#s13_vec_macro'0] (0: Int32.t)} {[%#s13_vec_macro'1] (2: UInt64.t)}
          (fun (_ret:t_Vec'0) ->  [ &v1 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#s13_vec_macro'2] Seq.length (view'0 v1) = 2} s1
      | s1 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.Slice64.elts 0
          = ([%#s13_vec_macro'3] (1: Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 1 = ([%#s13_vec_macro'4] (2: Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 2 = ([%#s13_vec_macro'5] (3: Int32.t))
          /\ Seq.length __arr_temp.Slice64.elts = 3}-
           [ &_10 <- __arr_temp ] 
          s2) ]
      
      | s2 = bb4 ]
    
    | bb4 = s0 [ s0 = into_vec {_10} (fun (_ret:t_Vec'0) ->  [ &v2 <- _ret ] s1) | s1 = bb5 ] 
    | bb5 = s0 [ s0 = {[@expl:assertion] [%#s13_vec_macro'6] Seq.length (view'0 v2) = 3} s1 | s1 = bb8 ] 
    | bb8 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & v0: t_Vec = Any.any_l ()
    | & v1: t_Vec'0 = Any.any_l ()
    | & v2: t_Vec'0 = Any.any_l ()
    | & _10: Slice64.array Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
