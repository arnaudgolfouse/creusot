module M_x
  use seq.Seq
  use creusot.int.UInt32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.int.Int32
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_Vec_u32_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_u32_Global (self: t_Vec_u32_Global) : Seq.seq UInt32.t
  
  axiom view_Vec_u32_Global_spec: forall self: t_Vec_u32_Global. Seq.length (view_Vec_u32_Global self)
      <= UInt64.t'int const_MAX
  
  let rec new_u32 (return (x: t_Vec_u32_Global)) = any
    [ return (result: t_Vec_u32_Global) -> {Seq.length (view_Vec_u32_Global result) = 0} (! return {result}) ]
  
  type t_Vec_i32_Global
  
  function view_Vec_i32_Global (self: t_Vec_i32_Global) : Seq.seq Int32.t
  
  axiom view_Vec_i32_Global_spec: forall self: t_Vec_i32_Global. Seq.length (view_Vec_i32_Global self)
      <= UInt64.t'int const_MAX
  
  function index_Vec_i32_Global [@inline:trivial] (self: t_Vec_i32_Global) (ix: int) : Int32.t =
    Seq.get (view_Vec_i32_Global self) ix
  
  meta "rewrite_def" function index_Vec_i32_Global
  
  let rec from_elem_i32 (elem: Int32.t) (n: UInt64.t) (return (x: t_Vec_i32_Global)) = any
    [ return (result: t_Vec_i32_Global) -> {Seq.length (view_Vec_i32_Global result) = UInt64.t'int n}
      {forall i: int. 0 <= i /\ i < UInt64.t'int n -> index_Vec_i32_Global result i = elem}
      (! return {result}) ]
  
  function view_Box_slice_i32_Global [@inline:trivial] (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    Slice64.view self
  
  meta "rewrite_def" function view_Box_slice_i32_Global
  
  let rec into_vec_i32 (self_: Slice64.slice Int32.t) (return (x: t_Vec_i32_Global)) = any
    [ return (result: t_Vec_i32_Global) -> {view_Vec_i32_Global result = view_Box_slice_i32_Global self_}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x (return (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = new_u32 (fun (_ret: t_Vec_u32_Global) -> [ &v0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:assertion] Seq.length (view_Vec_u32_Global v0) = 0} s1
      | s1 = from_elem_i32 {(0: Int32.t)} {(2: UInt64.t)} (fun (_ret: t_Vec_i32_Global) -> [ &v1 <- _ret ] s2)
      | s2 = bb2 ]
    | bb2 = s0
      [ s0 = {[@expl:assertion] Seq.length (view_Vec_i32_Global v1) = 2} s1
      | s1 = any
        [ any_ (__arr_temp: Slice64.array Int32.t) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = (1: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 1 = (2: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 2 = (3: Int32.t) /\ Seq.length __arr_temp.Slice64.elts = 3}-
          [ &_10 <- __arr_temp ] s2) ]
      | s2 = bb4 ]
    | bb4 = s0 [ s0 = into_vec_i32 {_10} (fun (_ret: t_Vec_i32_Global) -> [ &v2 <- _ret ] s1) | s1 = bb5 ]
    | bb5 = s0 [ s0 = {[@expl:assertion] Seq.length (view_Vec_i32_Global v2) = 3} s1 | s1 = bb8 ]
    | bb8 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & v0: t_Vec_u32_Global = Any.any_l ()
    | & v1: t_Vec_i32_Global = Any.any_l ()
    | & v2: t_Vec_i32_Global = Any.any_l ()
    | & _10: Slice64.array Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
