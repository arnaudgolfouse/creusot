module M_int_suffix__foo
  use creusot.int.Int128
  use creusot.prelude.Any
  
  let rec new (value: Int128.t) (return' (x: int)) = any
    [ return''0 (result: int) -> {result = Int128.to_int value} (! return' {result}) ]
  
  let rec into_inner (self: int) (return' (x: int)) = any
    [ return''0 (result: int) -> {result = self} (! return' {result}) ]
  
  let rec new'0 (x: int) (return' (x'0: int)) = any [ return''0 (result: int) -> {result = x} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo (return' (x: int)) = (! bb0
    [ bb0 = s0 [ s0 = new {(1: Int128.t)} (fun (_ret: int) -> [ &_3 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = into_inner {_3} (fun (_ret: int) -> [ &_2 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = new'0 {_2} (fun (_ret: int) -> [ &_0 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = return''0 {_0} ] [ & _0: int = Any.any_l () | & _2: int = Any.any_l () | & _3: int = Any.any_l () ])
    [ return''0 (result: int) -> {[@expl:foo ensures] result = 1} (! return' {result}) ]
end
