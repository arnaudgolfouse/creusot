module M_impl_T_for_tup2_T1_T2__x (* <(T1, T2) as T<B>> *)
  use creusot.prelude.Any
  
  type t_T1
  
  type t_T2
  
  type tup2_T1_T2 = { f0: t_T1; f1: t_T2 }
  
  predicate inv_T1 (_1: t_T1)
  
  predicate inv_T2 (_1: t_T2)
  
  predicate inv_tup2_T1_T2 [@inline:trivial] (_1: tup2_T1_T2) = inv_T1 _1.f0 /\ inv_T2 _1.f1
  
  meta "rewrite_def" predicate inv_tup2_T1_T2
  
  predicate resolve_T1 (_1: t_T1)
  
  predicate resolve_T2 (_1: t_T2)
  
  predicate resolve_tup2_T1_T2 [@inline:trivial] (_1: tup2_T1_T2) = resolve_T1 _1.f0 /\ resolve_T2 _1.f1
  
  meta "rewrite_def" predicate resolve_tup2_T1_T2
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x_tup2_T1_T2 (self: tup2_T1_T2) (return (x: ())) = {[@expl:x 'self' type invariant] inv_tup2_T1_T2 self}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv_tup2_T1_T2 self} s1 | s1 = -{resolve_tup2_T1_T2 self}- s2 | s2 = bb1 ]
    | bb1 = return {_0} ] [ & _0: () = Any.any_l () | & self: tup2_T1_T2 = self ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_impl_T_for_u32__x (* <u32 as T<B>> *)
  use creusot.prelude.Any
  use creusot.int.UInt32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x_u32 (self: UInt32.t) (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_impl_T_for_tup2_T1_T2__x__refines (* <(T1, T2) as T<B>> *)
  type t_T1
  
  type t_T2
  
  type tup2_T1_T2 = { f0: t_T1; f1: t_T2 }
  
  predicate inv_T1 (_1: t_T1)
  
  predicate inv_T2 (_1: t_T2)
  
  predicate inv_tup2_T1_T2 [@inline:trivial] (_1: tup2_T1_T2) = inv_T1 _1.f0 /\ inv_T2 _1.f1
  
  meta "rewrite_def" predicate inv_tup2_T1_T2
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: tup2_T1_T2. inv_tup2_T1_T2 self -> inv_tup2_T1_T2 self
end
