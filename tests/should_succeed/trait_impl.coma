module M_trait_impl__qyi2836079215804511776__x (* <(T1, T2) as T<B>> *)
  use creusot.prelude.Any
  
  type t_T1
  
  type t_T2
  
  type tuple = { f0: t_T1; f1: t_T2 }
  
  predicate inv (_1: t_T1)
  
  predicate inv'0 (_1: t_T2)
  
  predicate inv'1 [@inline:trivial] (_1: tuple) = inv _1.f0 /\ inv'0 _1.f1
  
  meta "rewrite_def" predicate inv'1
  
  predicate resolve (_1: t_T1)
  
  predicate resolve'0 (_1: t_T2)
  
  predicate resolve'1 [@inline:trivial] (_1: tuple) = resolve _1.f0 /\ resolve'0 _1.f1
  
  meta "rewrite_def" predicate resolve'1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x (self: tuple) (return (x'0: ())) = {[@expl:x 'self' type invariant] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb1 ]
    | bb1 = return {_0} ] [ & _0: () = Any.any_l () | & self: tuple = self ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_trait_impl__qyi6561549274672949751__x (* <u32 as T<B>> *)
  use creusot.prelude.Any
  use creusot.int.UInt32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x (self: UInt32.t) (return (x'0: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_trait_impl__qyi2836079215804511776__x__refines (* <(T1, T2) as T<B>> *)
  type t_T1
  
  type t_T2
  
  type tuple = { f0: t_T1; f1: t_T2 }
  
  predicate inv (_1: t_T1)
  
  predicate inv'0 (_1: t_T2)
  
  predicate inv'1 [@inline:trivial] (_1: tuple) = inv _1.f0 /\ inv'0 _1.f1
  
  meta "rewrite_def" predicate inv'1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: tuple. inv'1 self -> inv'1 self
end
