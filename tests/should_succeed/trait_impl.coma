module M_trait_impl__qyi2836079215804511776__x [#"trait_impl.rs" 25 4 25 14] (* <(T1, T2) as T<B>> *)
  let%span strait_impl = "trait_impl.rs" 25 9 25 13
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 36 8 36 42
  
  use creusot.prelude.Any
  
  type t_T1
  
  type t_T2
  
  type tuple = { _p0: t_T1; _p1: t_T2 }
  
  predicate inv (_0: t_T1)
  
  predicate inv'0 (_0: t_T2)
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  predicate resolve (_0: t_T1)
  
  predicate resolve'0 (_0: t_T2)
  
  predicate resolve'1 (self: tuple) = [%#sresolve] resolve self._p0 /\ resolve'0 self._p1
  
  predicate resolve'2 (_0: tuple) = resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x [#"trait_impl.rs" 25 4 25 14] (self: tuple) (return' (x'0: ())) =
    {[@expl:x 'self' type invariant] [%#strait_impl] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'1 self'0} s1 | s1 = -{resolve'2 self'0}- s2 | s2 = bb1 ]
    | bb1 = return''0 {_0} ] [ & _0: () = Any.any_l () | & self'0: tuple = self ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_trait_impl__qyi6561549274672949751__x [#"trait_impl.rs" 29 4 29 14] (* <u32 as T<B>> *)
  use creusot.prelude.Any
  use creusot.int.UInt32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec x [#"trait_impl.rs" 29 4 29 14] (self: UInt32.t) (return' (x'0: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_trait_impl__qyi2836079215804511776__x__refines [#"trait_impl.rs" 25 4 25 14] (* <(T1, T2) as T<B>> *)
  let%span strait_impl = "trait_impl.rs" 25 4 25 14
  
  type t_T1
  
  type t_T2
  
  type tuple = { _p0: t_T1; _p1: t_T2 }
  
  predicate inv (_0: t_T1)
  
  predicate inv'0 (_0: t_T2)
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: [%#strait_impl] forall self: tuple. inv'1 self -> inv'1 self
end
