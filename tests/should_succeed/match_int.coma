module M_match_int__f [#"match_int.rs" 6 0 6 10]
  let%span smatch_int = "match_int.rs" 7 10 7 11
  let%span smatch_int'0 = "match_int.rs" 8 8 8 13
  let%span smatch_int'1 = "match_int.rs" 9 20 9 24
  let%span smatch_int'2 = "match_int.rs" 9 12 9 25
  let%span smatch_int'3 = "match_int.rs" 15 20 15 25
  let%span smatch_int'4 = "match_int.rs" 15 12 15 26
  let%span smatch_int'5 = "match_int.rs" 12 20 12 25
  let%span smatch_int'6 = "match_int.rs" 12 12 12 26
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec f[#"match_int.rs" 6 0 6 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- [%#smatch_int] (1: Int32.t) ] s1
      | s1 =  [ &_2 <- Int32.le ([%#smatch_int'0] (0: Int32.t)) _1 ] s2
      | s2 = any [ br0 -> {_2 = false} (! bb1) | br1 -> {_2} (! bb3) ]  ]
    
    | bb3 = s0
      [ s0 =  [ &_3 <- Int32.lt _1 ([%#smatch_int'0] (10: Int32.t)) ] s1
      | s1 = any [ br0 -> {_3 = false} (! bb1) | br1 -> {_3} (! bb2) ]  ]
    
    | bb2 = bb7
    | bb7 = any [ br0 -> {false} (! bb8) | br1 -> {true} (! bb9) ] 
    | bb9 = bb14
    | bb8 = {[%#smatch_int'2] false} any
    | bb1 = any [ br0 -> {_1 = (5: Int32.t)} (! bb5) | br1 -> {_1 = (6: Int32.t)} (! bb5) | default -> (! bb4) ] 
    | bb4 = any [ br0 -> {([%#smatch_int'3] false) = false} (! bb12) | br1 -> {[%#smatch_int'3] false} (! bb13) ] 
    | bb13 = bb14
    | bb12 = {[%#smatch_int'4] false} any
    | bb5 = bb6
    | bb6 = any [ br0 -> {([%#smatch_int'5] false) = false} (! bb10) | br1 -> {[%#smatch_int'5] false} (! bb11) ] 
    | bb11 = bb14
    | bb14 = return''0 {_0}
    | bb10 = {[%#smatch_int'6] false} any ]
    )
    [ & _0: () = Any.any_l () | & _1: Int32.t = Any.any_l () | & _2: bool = Any.any_l () | & _3: bool = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
