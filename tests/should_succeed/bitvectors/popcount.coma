module M_popcount__count8 [#"popcount.rs" 29 0 29 26]
  let%span spopcount = "popcount.rs" 31 19 31 20
  let%span spopcount'0 = "popcount.rs" 31 24 31 28
  let%span spopcount'1 = "popcount.rs" 32 13 32 17
  let%span spopcount'2 = "popcount.rs" 32 28 32 29
  let%span spopcount'3 = "popcount.rs" 32 33 32 37
  let%span spopcount'4 = "popcount.rs" 33 19 33 20
  let%span spopcount'5 = "popcount.rs" 33 25 33 29
  let%span spopcount'6 = "popcount.rs" 26 10 26 22
  let%span spopcount'7 = "popcount.rs" 27 10 27 34
  let%span spopcount'8 = "popcount.rs" 16 4 23 49
  
  use creusot.int.Int32BW
  use creusot.int.UInt8BW
  use creusot.prelude.Any
  use mach.int.Int
  
  function count8_log [#"popcount.rs" 15 0 15 31] (n: UInt8BW.t) : int =
    [%#spopcount'8] (if UInt8BW.bw_and n (1: UInt8BW.t) = (0: UInt8BW.t) then 0 else 1)
    + (if UInt8BW.bw_and n (2: UInt8BW.t) = (0: UInt8BW.t) then 0 else 1)
    + (if UInt8BW.bw_and n (4: UInt8BW.t) = (0: UInt8BW.t) then 0 else 1)
    + (if UInt8BW.bw_and n (8: UInt8BW.t) = (0: UInt8BW.t) then 0 else 1)
    + (if UInt8BW.bw_and n (16: UInt8BW.t) = (0: UInt8BW.t) then 0 else 1)
    + (if UInt8BW.bw_and n (32: UInt8BW.t) = (0: UInt8BW.t) then 0 else 1)
    + (if UInt8BW.bw_and n (64: UInt8BW.t) = (0: UInt8BW.t) then 0 else 1)
    + (if UInt8BW.bw_and n (128: UInt8BW.t) = (0: UInt8BW.t) then 0 else 1)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec count8[#"popcount.rs" 29 0 29 26] (n:UInt8BW.t) (return'  (x:UInt8BW.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- n'0 ] s1
      | s1 = UInt8BW.shr {x} {Int32BW.to_int ([%#spopcount] (1: Int32BW.t))}
          (fun (_ret:UInt8BW.t) ->  [ &_7 <- _ret ] s2)
      | s2 =  [ &_6 <- UInt8BW.bw_and _7 ([%#spopcount'0] (85: UInt8BW.t)) ] s3
      | s3 = UInt8BW.sub {x} {_6} (fun (_ret:UInt8BW.t) ->  [ &x <- _ret ] s4)
      | s4 =  [ &_9 <- UInt8BW.bw_and x ([%#spopcount'1] (51: UInt8BW.t)) ] s5
      | s5 = UInt8BW.shr {x} {Int32BW.to_int ([%#spopcount'2] (2: Int32BW.t))}
          (fun (_ret:UInt8BW.t) ->  [ &_12 <- _ret ] s6)
      | s6 =  [ &_11 <- UInt8BW.bw_and _12 ([%#spopcount'3] (51: UInt8BW.t)) ] s7
      | s7 = UInt8BW.add {_9} {_11} (fun (_ret:UInt8BW.t) ->  [ &x <- _ret ] s8)
      | s8 = UInt8BW.shr {x} {Int32BW.to_int ([%#spopcount'4] (4: Int32BW.t))}
          (fun (_ret:UInt8BW.t) ->  [ &_16 <- _ret ] s9)
      | s9 = UInt8BW.add {x} {_16} (fun (_ret:UInt8BW.t) ->  [ &_14 <- _ret ] s10)
      | s10 =  [ &x <- UInt8BW.bw_and _14 ([%#spopcount'5] (15: UInt8BW.t)) ] s11
      | s11 =  [ &_0 <- x ] s12
      | s12 = return''0 {_0} ]
     ]
    
    [ & _0: UInt8BW.t = Any.any_l ()
    | & n'0: UInt8BW.t = n
    | & x: UInt8BW.t = Any.any_l ()
    | & _6: UInt8BW.t = Any.any_l ()
    | & _7: UInt8BW.t = Any.any_l ()
    | & _9: UInt8BW.t = Any.any_l ()
    | & _11: UInt8BW.t = Any.any_l ()
    | & _12: UInt8BW.t = Any.any_l ()
    | & _14: UInt8BW.t = Any.any_l ()
    | & _16: UInt8BW.t = Any.any_l () ]
    )
    [ return''0 (result:UInt8BW.t)-> {[@expl:count8 ensures #0] [%#spopcount'6] UInt8BW.t'int result <= 8}
      {[@expl:count8 ensures #1] [%#spopcount'7] UInt8BW.t'int result = count8_log n}
      (! return' {result}) ]

end
module M_popcount__count16 [#"popcount.rs" 39 0 39 29]
  let%span spopcount = "popcount.rs" 41 19 41 20
  let%span spopcount'0 = "popcount.rs" 41 24 41 30
  let%span spopcount'1 = "popcount.rs" 42 13 42 19
  let%span spopcount'2 = "popcount.rs" 42 30 42 31
  let%span spopcount'3 = "popcount.rs" 42 35 42 41
  let%span spopcount'4 = "popcount.rs" 43 19 43 20
  let%span spopcount'5 = "popcount.rs" 43 25 43 31
  let%span spopcount'6 = "popcount.rs" 44 18 44 19
  let%span spopcount'7 = "popcount.rs" 45 8 45 12
  let%span spopcount'8 = "popcount.rs" 37 10 37 23
  
  use creusot.int.Int32BW
  use creusot.int.UInt16BW
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec count16[#"popcount.rs" 39 0 39 29] (n:UInt16BW.t) (return'  (x:UInt16BW.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- n'0 ] s1
      | s1 = UInt16BW.shr {x} {Int32BW.to_int ([%#spopcount] (1: Int32BW.t))}
          (fun (_ret:UInt16BW.t) ->  [ &_6 <- _ret ] s2)
      | s2 =  [ &_5 <- UInt16BW.bw_and _6 ([%#spopcount'0] (21845: UInt16BW.t)) ] s3
      | s3 = UInt16BW.sub {x} {_5} (fun (_ret:UInt16BW.t) ->  [ &x <- _ret ] s4)
      | s4 =  [ &_8 <- UInt16BW.bw_and x ([%#spopcount'1] (13107: UInt16BW.t)) ] s5
      | s5 = UInt16BW.shr {x} {Int32BW.to_int ([%#spopcount'2] (2: Int32BW.t))}
          (fun (_ret:UInt16BW.t) ->  [ &_11 <- _ret ] s6)
      | s6 =  [ &_10 <- UInt16BW.bw_and _11 ([%#spopcount'3] (13107: UInt16BW.t)) ] s7
      | s7 = UInt16BW.add {_8} {_10} (fun (_ret:UInt16BW.t) ->  [ &x <- _ret ] s8)
      | s8 = UInt16BW.shr {x} {Int32BW.to_int ([%#spopcount'4] (4: Int32BW.t))}
          (fun (_ret:UInt16BW.t) ->  [ &_15 <- _ret ] s9)
      | s9 = UInt16BW.add {x} {_15} (fun (_ret:UInt16BW.t) ->  [ &_13 <- _ret ] s10)
      | s10 =  [ &x <- UInt16BW.bw_and _13 ([%#spopcount'5] (3855: UInt16BW.t)) ] s11
      | s11 = UInt16BW.shr {x} {Int32BW.to_int ([%#spopcount'6] (8: Int32BW.t))}
          (fun (_ret:UInt16BW.t) ->  [ &_18 <- _ret ] s12)
      | s12 = UInt16BW.add {x} {_18} (fun (_ret:UInt16BW.t) ->  [ &x <- _ret ] s13)
      | s13 =  [ &_0 <- UInt16BW.bw_and x ([%#spopcount'7] (31: UInt16BW.t)) ] s14
      | s14 = return''0 {_0} ]
     ]
    
    [ & _0: UInt16BW.t = Any.any_l ()
    | & n'0: UInt16BW.t = n
    | & x: UInt16BW.t = Any.any_l ()
    | & _5: UInt16BW.t = Any.any_l ()
    | & _6: UInt16BW.t = Any.any_l ()
    | & _8: UInt16BW.t = Any.any_l ()
    | & _10: UInt16BW.t = Any.any_l ()
    | & _11: UInt16BW.t = Any.any_l ()
    | & _13: UInt16BW.t = Any.any_l ()
    | & _15: UInt16BW.t = Any.any_l ()
    | & _18: UInt16BW.t = Any.any_l () ]
    )
    [ return''0 (result:UInt16BW.t)-> {[@expl:count16 ensures] [%#spopcount'8] UInt16BW.t'int result <= 16}
      (! return' {result}) ]

end
module M_popcount__count32 [#"popcount.rs" 50 0 50 29]
  let%span spopcount = "popcount.rs" 52 19 52 20
  let%span spopcount'0 = "popcount.rs" 52 24 52 34
  let%span spopcount'1 = "popcount.rs" 53 13 53 23
  let%span spopcount'2 = "popcount.rs" 53 34 53 35
  let%span spopcount'3 = "popcount.rs" 53 39 53 49
  let%span spopcount'4 = "popcount.rs" 54 19 54 20
  let%span spopcount'5 = "popcount.rs" 54 25 54 35
  let%span spopcount'6 = "popcount.rs" 55 18 55 19
  let%span spopcount'7 = "popcount.rs" 56 18 56 20
  let%span spopcount'8 = "popcount.rs" 57 8 57 18
  let%span spopcount'9 = "popcount.rs" 48 10 48 23
  
  use creusot.int.Int32BW
  use creusot.int.UInt32BW
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec count32[#"popcount.rs" 50 0 50 29] (n:UInt32BW.t) (return'  (x:UInt32BW.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- n'0 ] s1
      | s1 = UInt32BW.shr {x} {Int32BW.to_int ([%#spopcount] (1: Int32BW.t))}
          (fun (_ret:UInt32BW.t) ->  [ &_6 <- _ret ] s2)
      | s2 =  [ &_5 <- UInt32BW.bw_and _6 ([%#spopcount'0] (1431655765: UInt32BW.t)) ] s3
      | s3 = UInt32BW.sub {x} {_5} (fun (_ret:UInt32BW.t) ->  [ &x <- _ret ] s4)
      | s4 =  [ &_8 <- UInt32BW.bw_and x ([%#spopcount'1] (858993459: UInt32BW.t)) ] s5
      | s5 = UInt32BW.shr {x} {Int32BW.to_int ([%#spopcount'2] (2: Int32BW.t))}
          (fun (_ret:UInt32BW.t) ->  [ &_11 <- _ret ] s6)
      | s6 =  [ &_10 <- UInt32BW.bw_and _11 ([%#spopcount'3] (858993459: UInt32BW.t)) ] s7
      | s7 = UInt32BW.add {_8} {_10} (fun (_ret:UInt32BW.t) ->  [ &x <- _ret ] s8)
      | s8 = UInt32BW.shr {x} {Int32BW.to_int ([%#spopcount'4] (4: Int32BW.t))}
          (fun (_ret:UInt32BW.t) ->  [ &_15 <- _ret ] s9)
      | s9 = UInt32BW.add {x} {_15} (fun (_ret:UInt32BW.t) ->  [ &_13 <- _ret ] s10)
      | s10 =  [ &x <- UInt32BW.bw_and _13 ([%#spopcount'5] (252645135: UInt32BW.t)) ] s11
      | s11 = UInt32BW.shr {x} {Int32BW.to_int ([%#spopcount'6] (8: Int32BW.t))}
          (fun (_ret:UInt32BW.t) ->  [ &_18 <- _ret ] s12)
      | s12 = UInt32BW.add {x} {_18} (fun (_ret:UInt32BW.t) ->  [ &x <- _ret ] s13)
      | s13 = UInt32BW.shr {x} {Int32BW.to_int ([%#spopcount'7] (16: Int32BW.t))}
          (fun (_ret:UInt32BW.t) ->  [ &_21 <- _ret ] s14)
      | s14 = UInt32BW.add {x} {_21} (fun (_ret:UInt32BW.t) ->  [ &x <- _ret ] s15)
      | s15 =  [ &_0 <- UInt32BW.bw_and x ([%#spopcount'8] (63: UInt32BW.t)) ] s16
      | s16 = return''0 {_0} ]
     ]
    
    [ & _0: UInt32BW.t = Any.any_l ()
    | & n'0: UInt32BW.t = n
    | & x: UInt32BW.t = Any.any_l ()
    | & _5: UInt32BW.t = Any.any_l ()
    | & _6: UInt32BW.t = Any.any_l ()
    | & _8: UInt32BW.t = Any.any_l ()
    | & _10: UInt32BW.t = Any.any_l ()
    | & _11: UInt32BW.t = Any.any_l ()
    | & _13: UInt32BW.t = Any.any_l ()
    | & _15: UInt32BW.t = Any.any_l ()
    | & _18: UInt32BW.t = Any.any_l ()
    | & _21: UInt32BW.t = Any.any_l () ]
    )
    [ return''0 (result:UInt32BW.t)-> {[@expl:count32 ensures] [%#spopcount'9] UInt32BW.t'int result <= 32}
      (! return' {result}) ]

end
module M_popcount__count64 [#"popcount.rs" 62 0 62 29]
  let%span spopcount = "popcount.rs" 64 19 64 20
  let%span spopcount'0 = "popcount.rs" 64 24 64 42
  let%span spopcount'1 = "popcount.rs" 65 13 65 31
  let%span spopcount'2 = "popcount.rs" 65 42 65 43
  let%span spopcount'3 = "popcount.rs" 65 47 65 65
  let%span spopcount'4 = "popcount.rs" 66 19 66 20
  let%span spopcount'5 = "popcount.rs" 66 25 66 43
  let%span spopcount'6 = "popcount.rs" 67 18 67 19
  let%span spopcount'7 = "popcount.rs" 68 18 68 20
  let%span spopcount'8 = "popcount.rs" 69 18 69 20
  let%span spopcount'9 = "popcount.rs" 70 8 70 12
  let%span spopcount'10 = "popcount.rs" 60 10 60 23
  
  use creusot.int.Int32BW
  use creusot.int.UInt64BW
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec count64[#"popcount.rs" 62 0 62 29] (n:UInt64BW.t) (return'  (x:UInt64BW.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- n'0 ] s1
      | s1 = UInt64BW.shr {x} {Int32BW.to_int ([%#spopcount] (1: Int32BW.t))}
          (fun (_ret:UInt64BW.t) ->  [ &_6 <- _ret ] s2)
      | s2 =  [ &_5 <- UInt64BW.bw_and _6 ([%#spopcount'0] (6148914691236517205: UInt64BW.t)) ] s3
      | s3 = UInt64BW.sub {x} {_5} (fun (_ret:UInt64BW.t) ->  [ &x <- _ret ] s4)
      | s4 =  [ &_8 <- UInt64BW.bw_and x ([%#spopcount'1] (3689348814741910323: UInt64BW.t)) ] s5
      | s5 = UInt64BW.shr {x} {Int32BW.to_int ([%#spopcount'2] (2: Int32BW.t))}
          (fun (_ret:UInt64BW.t) ->  [ &_11 <- _ret ] s6)
      | s6 =  [ &_10 <- UInt64BW.bw_and _11 ([%#spopcount'3] (3689348814741910323: UInt64BW.t)) ] s7
      | s7 = UInt64BW.add {_8} {_10} (fun (_ret:UInt64BW.t) ->  [ &x <- _ret ] s8)
      | s8 = UInt64BW.shr {x} {Int32BW.to_int ([%#spopcount'4] (4: Int32BW.t))}
          (fun (_ret:UInt64BW.t) ->  [ &_15 <- _ret ] s9)
      | s9 = UInt64BW.add {x} {_15} (fun (_ret:UInt64BW.t) ->  [ &_13 <- _ret ] s10)
      | s10 =  [ &x <- UInt64BW.bw_and _13 ([%#spopcount'5] (1085102592571150095: UInt64BW.t)) ] s11
      | s11 = UInt64BW.shr {x} {Int32BW.to_int ([%#spopcount'6] (8: Int32BW.t))}
          (fun (_ret:UInt64BW.t) ->  [ &_18 <- _ret ] s12)
      | s12 = UInt64BW.add {x} {_18} (fun (_ret:UInt64BW.t) ->  [ &x <- _ret ] s13)
      | s13 = UInt64BW.shr {x} {Int32BW.to_int ([%#spopcount'7] (16: Int32BW.t))}
          (fun (_ret:UInt64BW.t) ->  [ &_21 <- _ret ] s14)
      | s14 = UInt64BW.add {x} {_21} (fun (_ret:UInt64BW.t) ->  [ &x <- _ret ] s15)
      | s15 = UInt64BW.shr {x} {Int32BW.to_int ([%#spopcount'8] (32: Int32BW.t))}
          (fun (_ret:UInt64BW.t) ->  [ &_24 <- _ret ] s16)
      | s16 = UInt64BW.add {x} {_24} (fun (_ret:UInt64BW.t) ->  [ &x <- _ret ] s17)
      | s17 =  [ &_0 <- UInt64BW.bw_and x ([%#spopcount'9] (127: UInt64BW.t)) ] s18
      | s18 = return''0 {_0} ]
     ]
    
    [ & _0: UInt64BW.t = Any.any_l ()
    | & n'0: UInt64BW.t = n
    | & x: UInt64BW.t = Any.any_l ()
    | & _5: UInt64BW.t = Any.any_l ()
    | & _6: UInt64BW.t = Any.any_l ()
    | & _8: UInt64BW.t = Any.any_l ()
    | & _10: UInt64BW.t = Any.any_l ()
    | & _11: UInt64BW.t = Any.any_l ()
    | & _13: UInt64BW.t = Any.any_l ()
    | & _15: UInt64BW.t = Any.any_l ()
    | & _18: UInt64BW.t = Any.any_l ()
    | & _21: UInt64BW.t = Any.any_l ()
    | & _24: UInt64BW.t = Any.any_l () ]
    )
    [ return''0 (result:UInt64BW.t)-> {[@expl:count64 ensures] [%#spopcount'10] UInt64BW.t'int result <= 64}
      (! return' {result}) ]

end
