module M_f
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f_T (_1: MutBorrow.t t_T) (return (x: ())) = {[@expl:f '_1' type invariant] inv_ref_T _1}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv_ref_T _1} s1 | s1 = -{resolve_ref_T _1}- s2 | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & _1: MutBorrow.t t_T = _1 ]) [ return (result: ()) -> (! return {result}) ]
end
module M_simple
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  let rec f_T (_1: MutBorrow.t t_T) (return (x: ())) = {[@expl:f '_1' type invariant] inv_ref_T _1}
    any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec simple_T (x: MutBorrow.t t_T) (return (x'0: ())) = {[@expl:simple 'x' type invariant] inv_ref_T x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &old_1_0 <- x ] s1 | s1 = bb1 ]
    | bb1 = bb1
      [ bb1 = {[@expl:mut invariant] old_1_0.final = x.final}
        {[@expl:loop invariant] inv_ref_T x}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = {inv_T x.current}
            MutBorrow.borrow_mut <t_T> {x.current}
              (fun (_ret: MutBorrow.t t_T) ->
                [ &_6 <- _ret ] -{inv_T _ret.final}-
                [ &x <- { x with current = _ret.final } ] s1)
          | s1 = f_T {_6} (fun (_ret: ()) -> [ &_4 <- _ret ] s2)
          | s2 = bb1 ] ] ] ]
    [ & x: MutBorrow.t t_T = x
    | & _4: () = Any.any_l ()
    | & _6: MutBorrow.t t_T = Any.any_l ()
    | & old_1_0: MutBorrow.t t_T = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_swapper
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec swapper_T (x: MutBorrow.t t_T) (y: MutBorrow.t t_T) (return (x'0: ())) =
    {[@expl:swapper 'x' type invariant] inv_ref_T x}
    {[@expl:swapper 'y' type invariant] inv_ref_T y}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant #0] inv_ref_T x}
        {[@expl:loop invariant #1] inv_ref_T y}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = [ &c <- x ] s1
          | s1 = {inv_T y.current}
            MutBorrow.borrow_final <t_T> {y.current} {MutBorrow.get_id y}
              (fun (_ret: MutBorrow.t t_T) ->
                [ &_9 <- _ret ] -{inv_T _ret.final}-
                [ &y <- { y with current = _ret.final } ] s2)
          | s2 = [ &x <- _9 ] s3
          | s3 = {inv_T c.current}
            MutBorrow.borrow_final <t_T> {c.current} {MutBorrow.get_id c}
              (fun (_ret: MutBorrow.t t_T) ->
                [ &_10 <- _ret ] -{inv_T _ret.final}-
                [ &c <- { c with current = _ret.final } ] s4)
          | s4 = {[@expl:type invariant] inv_ref_T y} s5
          | s5 = -{resolve_ref_T y}- s6
          | s6 = [ &y <- _10 ] s7
          | s7 = {[@expl:type invariant] inv_ref_T c} s8
          | s8 = -{resolve_ref_T c}- s9
          | s9 = bb1 ] ] ] ]
    [ & x: MutBorrow.t t_T = x
    | & y: MutBorrow.t t_T = y
    | & c: MutBorrow.t t_T = Any.any_l ()
    | & _9: MutBorrow.t t_T = Any.any_l ()
    | & _10: MutBorrow.t t_T = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_tuple
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type tup2_ref_T_bool = { f0: MutBorrow.t t_T; f1: bool }
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate inv_tup2_ref_T_bool [@inline:trivial] (_1: tup2_ref_T_bool) = inv_ref_T _1.f0
  
  meta "rewrite_def" predicate inv_tup2_ref_T_bool
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec tuple_T (d: tup2_ref_T_bool) (e: tup2_ref_T_bool) (return (x: ())) =
    {[@expl:tuple 'd' type invariant] inv_tup2_ref_T_bool d}
    {[@expl:tuple 'e' type invariant] inv_tup2_ref_T_bool e}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant #0] inv_tup2_ref_T_bool d}
        {[@expl:loop invariant #1] inv_tup2_ref_T_bool e}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = s0 [ s0 = [ &c <- d ] s1 | s1 = [ &d <- e ] s2 | s2 = [ &e <- c ] s3 | s3 = bb1 ] ] ] ]
    [ & d: tup2_ref_T_bool = d | & e: tup2_ref_T_bool = e | & c: tup2_ref_T_bool = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_temp_move
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec temp_move_T (x: MutBorrow.t t_T) (return (x'0: ())) = {[@expl:temp_move 'x' type invariant] inv_ref_T x}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] inv_ref_T x}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = [ &c <- x ] s1
          | s1 = {inv_T c.current}
            MutBorrow.borrow_final <t_T> {c.current} {MutBorrow.get_id c}
              (fun (_ret: MutBorrow.t t_T) ->
                [ &_7 <- _ret ] -{inv_T _ret.final}-
                [ &c <- { c with current = _ret.final } ] s2)
          | s2 = [ &x <- _7 ] s3
          | s3 = {[@expl:type invariant] inv_ref_T c} s4
          | s4 = -{resolve_ref_T c}- s5
          | s5 = bb1 ] ] ] ]
    [ & x: MutBorrow.t t_T = x | & c: MutBorrow.t t_T = Any.any_l () | & _7: MutBorrow.t t_T = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_y
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_i32_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_i32_Global (self: t_Vec_i32_Global) : Seq.seq Int32.t
  
  axiom view_Vec_i32_Global_spec: forall self: t_Vec_i32_Global. Seq.length (view_Vec_i32_Global self)
      <= UInt64.t'int const_MAX
  
  let rec len_i32 (self_: t_Vec_i32_Global) (return (x: UInt64.t)) = any
    [ return (result: UInt64.t) -> {UInt64.t'int result = Seq.length (view_Vec_i32_Global self_)} (! return {result}) ]
  
  predicate in_bounds_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) =
    UInt64.t'int self < Seq.length seq
  
  meta "rewrite_def" predicate in_bounds_usize
  
  predicate has_value_usize [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    Seq.get seq (UInt64.t'int self) = out
  
  meta "rewrite_def" predicate has_value_usize
  
  predicate resolve_elswhere_usize [@inline:trivial] (self: UInt64.t) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  
  meta "rewrite_def" predicate resolve_elswhere_usize
  
  let rec index_mut_Vec_i32_Global (self_: MutBorrow.t t_Vec_i32_Global) (ix: UInt64.t)
    (return (x: MutBorrow.t Int32.t)) =
    {[@expl:index_mut requires] in_bounds_usize ix (view_Vec_i32_Global self_.current)}
    any
    [ return (result: MutBorrow.t Int32.t) -> {has_value_usize ix (view_Vec_i32_Global self_.current) result.current}
      {has_value_usize ix (view_Vec_i32_Global self_.final) result.final}
      {resolve_elswhere_usize ix (view_Vec_i32_Global self_.current) (view_Vec_i32_Global self_.final)}
      {Seq.length (view_Vec_i32_Global self_.final) = Seq.length (view_Vec_i32_Global self_.current)}
      (! return {result}) ]
  
  predicate resolve_ref_i32 [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_i32
  
  predicate resolve_ref_Vec_i32_Global [@inline:trivial] (_1: MutBorrow.t t_Vec_i32_Global) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Vec_i32_Global
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec y (v: MutBorrow.t t_Vec_i32_Global) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = [ &old_v <- v ] s1 | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &i <- (0: UInt64.t) ] s1 | s1 = [ &old_2_0 <- v ] s2 | s2 = bb2 ]
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] old_2_0.final = v.final}
        {[@expl:loop invariant #0] Seq.length (view_Vec_i32_Global old_v.current)
        = Seq.length (view_Vec_i32_Global v.current)}
        {[@expl:loop invariant #1] UInt64.t'int i <= 10}
        (! s0)
        [ s0 = bb3 ]
        [ bb3 = s0 [ s0 = len_i32 {v.current} (fun (_ret: UInt64.t) -> [ &_12 <- _ret ] s1) | s1 = bb4 ]
        | bb4 = s0
          [ s0 = [ &_10 <- UInt64.lt i _12 ] s1 | s1 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb5) ] ]
        | bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Vec_i32_Global> {v.current}
              (fun (_ret: MutBorrow.t t_Vec_i32_Global) ->
                [ &_15 <- _ret ] [ &v <- { v with current = _ret.final } ] s1)
          | s1 = index_mut_Vec_i32_Global {_15} {i} (fun (_ret: MutBorrow.t Int32.t) -> [ &_14 <- _ret ] s2)
          | s2 = bb6 ]
        | bb6 = s0
          [ s0 = [ &_14 <- { _14 with current = (0: Int32.t) } ] s1 | s1 = -{resolve_ref_i32 _14}- s2 | s2 = bb8 ]
        | bb8 = s0
          [ s0 = UInt64.add {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s1)
          | s1 = [ &_17 <- UInt64.gt i (10: UInt64.t) ] s2
          | s2 = any [ br0 -> {_17 = false} (! bb2) | br1 -> {_17} (! bb9) ] ] ] ]
    | bb9 = s0 [ s0 = -{resolve_ref_Vec_i32_Global v}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & v: MutBorrow.t t_Vec_i32_Global = v
    | & old_v: MutBorrow.t t_Vec_i32_Global = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _14: MutBorrow.t Int32.t = Any.any_l ()
    | & _15: MutBorrow.t t_Vec_i32_Global = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & old_2_0: MutBorrow.t t_Vec_i32_Global = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_nested_loops
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve_ref_i32 [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_i32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested_loops (x: MutBorrow.t Int32.t) (return (x'0: ())) = {[@expl:nested_loops requires] x.current
    = (0: Int32.t)}
    (! bb0
    [ bb0 = s0 [ s0 = [ &i <- (0: Int32.t) ] s1 | s1 = [ &old_1_0 <- x ] s2 | s2 = bb1 ]
    | bb1 = bb1
      [ bb1 = {[@expl:mut invariant] old_1_0.final = x.final}
        {[@expl:loop invariant] x.current = (0: Int32.t)}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = [ &_9 <- Int32.gt i (10: Int32.t) ] s1
          | s1 = any [ br0 -> {_9 = false} (! bb4) | br1 -> {_9} (! bb3) ] ]
        | bb4 = s0
          [ s0 = Int32.add {i} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &i <- _ret ] s1)
          | s1 = [ &j <- (0: Int32.t) ] s2
          | s2 = [ &old_5_0 <- x ] s3
          | s3 = bb5 ]
        | bb5 = bb5
          [ bb5 = {[@expl:mut invariant] old_5_0.final = x.final}
            {[@expl:loop invariant] x.current = (0: Int32.t)}
            (! s0)
            [ s0 = bb6 ]
            [ bb6 = s0
              [ s0 = [ &_16 <- Int32.gt j (10: Int32.t) ] s1
              | s1 = any [ br0 -> {_16 = false} (! bb8) | br1 -> {_16} (! bb1) ] ]
            | bb8 = s0
              [ s0 = Int32.add {j} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &j <- _ret ] s1)
              | s1 = [ &x <- { x with current = (0: Int32.t) } ] s2
              | s2 = bb5 ] ] ] ] ]
    | bb3 = s0 [ s0 = -{resolve_ref_i32 x}- s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: MutBorrow.t Int32.t = x
    | & i: Int32.t = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & j: Int32.t = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & old_5_0: MutBorrow.t Int32.t = Any.any_l ()
    | & old_1_0: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: ()) -> {[@expl:nested_loops ensures] x.final = (0: Int32.t)} (! return {result}) ]
end
module M_nested_borrows
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  let rec replace_ref_i32 (dest: MutBorrow.t (MutBorrow.t Int32.t)) (src: MutBorrow.t Int32.t)
    (return (x: MutBorrow.t Int32.t)) = any
    [ return (result: MutBorrow.t Int32.t) -> {dest.final = src} {result = dest.current} (! return {result}) ]
  
  predicate resolve_ref_ref_i32 [@inline:trivial] (_1: MutBorrow.t (MutBorrow.t Int32.t)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_ref_i32
  
  predicate resolve_ref_i32 [@inline:trivial] (_1: MutBorrow.t Int32.t) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_i32
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested_borrows (x: MutBorrow.t (MutBorrow.t Int32.t)) (y: MutBorrow.t Int32.t) (return (x'0: ())) =
    {[@expl:nested_borrows requires] x.current.current = (0: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = [ &i <- (0: Int32.t) ] s1 | s1 = [ &old_1_0 <- x ] s2 | s2 = [ &old_1_1 <- x.current ] s3 | s3 = bb1 ]
    | bb1 = bb1
      [ bb1 = {[@expl:mut invariant] old_1_1.final = x.current.final}
        {[@expl:mut invariant] old_1_0.final = x.final}
        {[@expl:loop invariant] x.current.current = (0: Int32.t)}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = [ &_12 <- Int32.gt i (10: Int32.t) ] s1
          | s1 = any [ br0 -> {_12 = false} (! bb4) | br1 -> {_12} (! bb3) ] ]
        | bb4 = s0
          [ s0 = Int32.add {i} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &i <- _ret ] s1)
          | s1 = [ &x <- { x with current = { x.current with current = (0: Int32.t) } } ] s2
          | s2 = bb1 ] ] ]
    | bb3 = s0
      [ s0 = MutBorrow.borrow_final <MutBorrow.t Int32.t> {x.current} {MutBorrow.get_id x}
          (fun (_ret: MutBorrow.t (MutBorrow.t Int32.t)) ->
            [ &_16 <- _ret ] [ &x <- { x with current = _ret.final } ] s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {y.current} {MutBorrow.get_id y}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_17 <- _ret ] [ &y <- { y with current = _ret.final } ] s2)
      | s2 = replace_ref_i32 {_16} {_17} (fun (_ret: MutBorrow.t Int32.t) -> [ &b <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = s0
      [ s0 = -{resolve_ref_ref_i32 x}- s1
      | s1 = Int32.add {b.current} {(1: Int32.t)} (fun (_ret: Int32.t) -> [ &b <- { b with current = _ret } ] s2)
      | s2 = -{resolve_ref_i32 b}- s3
      | s3 = -{resolve_ref_i32 y}- s4
      | s4 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: MutBorrow.t (MutBorrow.t Int32.t) = x
    | & y: MutBorrow.t Int32.t = y
    | & i: Int32.t = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & b: MutBorrow.t Int32.t = Any.any_l ()
    | & _16: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l ()
    | & _17: MutBorrow.t Int32.t = Any.any_l ()
    | & old_1_0: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l ()
    | & old_1_1: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: ()) -> {[@expl:nested_borrows ensures #0] x.final = y}
      {[@expl:nested_borrows ensures #1] x.current.final = (1: Int32.t)}
      (! return {result}) ]
end
