module M_inferred_invariants__f [#"inferred_invariants.rs" 4 0 4 18]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f[#"inferred_invariants.rs" 4 0 4 18] (_0:MutBorrow.t t_T) (return'  (x:()))= {[@expl:f '_0' type invariant] inv'0 _0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 _1} s1 | s1 = -{resolve'0 _1}- s2 | s2 = return''0 {_0'0} ]  ]
     [ & _0'0: () = Any.any_l () | & _1: MutBorrow.t t_T = _0 ] ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_inferred_invariants__simple [#"inferred_invariants.rs" 6 0 6 27]
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinferred_invariants = "inferred_invariants.rs" 7 16 7 22
  let%span sinferred_invariants'0 = "inferred_invariants.rs" 6 17 6 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  let rec f (_0:MutBorrow.t t_T) (return'  (x:()))= {[@expl:f '_0' type invariant] inv'0 _0}
    any [ return''0 (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec simple[#"inferred_invariants.rs" 6 0 6 27] (x:MutBorrow.t t_T) (return'  (x'0:()))= {[@expl:simple 'x' type invariant] [%#sinferred_invariants'0] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_1_0 <- x'0 ] s1 | s1 = bb1 ] 
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:mut invariant] old_1_0.final = x'0.final}
        {[@expl:loop invariant] [%#sinferred_invariants] inv'0 x'0}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 = {inv x'0.current}
            MutBorrow.borrow_mut <t_T> {x'0.current}
              (fun (_ret:MutBorrow.t t_T) ->
                 [ &_6 <- _ret ] 
                -{inv _ret.final}-
                 [ &x'0 <- { x'0 with current = _ret.final } ] 
                s1)
          | s1 = f {_6} (fun (_ret:()) ->  [ &_4 <- _ret ] s2)
          | s2 = bb1'0 ]
         ]
       ]
     ]
    
    [ & x'0: MutBorrow.t t_T = x
    | & _4: () = Any.any_l ()
    | & _6: MutBorrow.t t_T = Any.any_l ()
    | & old_1_0: MutBorrow.t t_T = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_inferred_invariants__swapper [#"inferred_invariants.rs" 13 0 13 57]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinferred_invariants = "inferred_invariants.rs" 15 16 15 22
  let%span sinferred_invariants'0 = "inferred_invariants.rs" 14 16 14 22
  let%span sinferred_invariants'1 = "inferred_invariants.rs" 13 26 13 27
  let%span sinferred_invariants'2 = "inferred_invariants.rs" 13 44 13 45
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec swapper[#"inferred_invariants.rs" 13 0 13 57] (x:MutBorrow.t t_T) (y:MutBorrow.t t_T) (return'  (x'0:()))= {[@expl:swapper 'x' type invariant] [%#sinferred_invariants'1] inv'0 x}
    {[@expl:swapper 'y' type invariant] [%#sinferred_invariants'2] inv'0 y}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:loop invariant #0] [%#sinferred_invariants'0] inv'0 x'0}
        {[@expl:loop invariant #1] [%#sinferred_invariants] inv'0 y'0}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 =  [ &c <- x'0 ] s1
          | s1 = {inv y'0.current}
            MutBorrow.borrow_final <t_T> {y'0.current} {MutBorrow.get_id y'0}
              (fun (_ret:MutBorrow.t t_T) ->
                 [ &_9 <- _ret ] 
                -{inv _ret.final}-
                 [ &y'0 <- { y'0 with current = _ret.final } ] 
                s2)
          | s2 =  [ &x'0 <- _9 ] s3
          | s3 = {inv c.current}
            MutBorrow.borrow_final <t_T> {c.current} {MutBorrow.get_id c}
              (fun (_ret:MutBorrow.t t_T) ->
                 [ &_10 <- _ret ] 
                -{inv _ret.final}-
                 [ &c <- { c with current = _ret.final } ] 
                s4)
          | s4 = {[@expl:type invariant] inv'0 y'0} s5
          | s5 = -{resolve'0 y'0}- s6
          | s6 =  [ &y'0 <- _10 ] s7
          | s7 = {[@expl:type invariant] inv'0 c} s8
          | s8 = -{resolve'0 c}- s9
          | s9 = bb1'0 ]
         ]
       ]
     ]
    
    [ & x'0: MutBorrow.t t_T = x
    | & y'0: MutBorrow.t t_T = y
    | & c: MutBorrow.t t_T = Any.any_l ()
    | & _9: MutBorrow.t t_T = Any.any_l ()
    | & _10: MutBorrow.t t_T = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_inferred_invariants__tuple [#"inferred_invariants.rs" 23 0 23 71]
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinferred_invariants = "inferred_invariants.rs" 25 16 25 22
  let%span sinferred_invariants'0 = "inferred_invariants.rs" 24 16 24 22
  let%span sinferred_invariants'1 = "inferred_invariants.rs" 23 24 23 25
  let%span sinferred_invariants'2 = "inferred_invariants.rs" 23 50 23 51
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type tuple  =
    { _p0: MutBorrow.t t_T; _p1: bool }
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom'0 [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {_p0 = x0 ; _p1 = x1} = x in inv'0 x0)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec tuple[#"inferred_invariants.rs" 23 0 23 71] (d:tuple) (e:tuple) (return'  (x:()))= {[@expl:tuple 'd' type invariant] [%#sinferred_invariants'1] inv'1 d}
    {[@expl:tuple 'e' type invariant] [%#sinferred_invariants'2] inv'1 e}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:loop invariant #0] [%#sinferred_invariants'0] inv'1 d'0}
        {[@expl:loop invariant #1] [%#sinferred_invariants] inv'1 e'0}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0 [ s0 =  [ &c <- d'0 ] s1 | s1 =  [ &d'0 <- e'0 ] s2 | s2 =  [ &e'0 <- c ] s3 | s3 = bb1'0 ]  ]
       ]
     ]
     [ & d'0: tuple = d | & e'0: tuple = e | & c: tuple = Any.any_l () ] )
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_inferred_invariants__temp_move [#"inferred_invariants.rs" 33 0 33 41]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sinferred_invariants = "inferred_invariants.rs" 34 16 34 22
  let%span sinferred_invariants'0 = "inferred_invariants.rs" 33 28 33 29
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec temp_move[#"inferred_invariants.rs" 33 0 33 41] (x:MutBorrow.t t_T) (return'  (x'0:()))= {[@expl:temp_move 'x' type invariant] [%#sinferred_invariants'0] inv'0 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:loop invariant] [%#sinferred_invariants] inv'0 x'0}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 =  [ &c <- x'0 ] s1
          | s1 = {inv c.current}
            MutBorrow.borrow_final <t_T> {c.current} {MutBorrow.get_id c}
              (fun (_ret:MutBorrow.t t_T) ->
                 [ &_7 <- _ret ] 
                -{inv _ret.final}-
                 [ &c <- { c with current = _ret.final } ] 
                s2)
          | s2 =  [ &x'0 <- _7 ] s3
          | s3 = {[@expl:type invariant] inv'0 c} s4
          | s4 = -{resolve'0 c}- s5
          | s5 = bb1'0 ]
         ]
       ]
     ]
     [ & x'0: MutBorrow.t t_T = x | & c: MutBorrow.t t_T = Any.any_l () | & _7: MutBorrow.t t_T = Any.any_l () ] )
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_inferred_invariants__y [#"inferred_invariants.rs" 41 0 41 26]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinferred_invariants = "inferred_invariants.rs" 42 16 42 31
  let%span sinferred_invariants'0 = "inferred_invariants.rs" 43 16 43 17
  let%span sinferred_invariants'1 = "inferred_invariants.rs" 45 16 45 24
  let%span sinferred_invariants'2 = "inferred_invariants.rs" 44 16 44 40
  let%span sinferred_invariants'3 = "inferred_invariants.rs" 48 19 48 20
  let%span sinferred_invariants'4 = "inferred_invariants.rs" 51 13 51 14
  let%span sinferred_invariants'5 = "inferred_invariants.rs" 52 15 52 17
  let%span ssnapshot = "../../creusot-contracts/src/snapshot.rs" 62 8 62 27
  let%span smodel = "../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 81 26 81 48
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 150 27 150 46
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 151 26 151 54
  let%span svec'2 = "../../creusot-contracts/src/std/vec.rs" 152 26 152 57
  let%span svec'3 = "../../creusot-contracts/src/std/vec.rs" 153 26 153 62
  let%span svec'4 = "../../creusot-contracts/src/std/vec.rs" 154 26 154 55
  let%span svec'5 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 110 20 110 37
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 117 20 117 37
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 124 20 124 88
  
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'5] Seq.length (view self) <= UInt64.t'int v_MAX
  
  function view'0 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel] view self.current
  
  function view'1 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel'0] view'0 self
  
  function view'2 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#ssnapshot] view'1 self
  
  function view'3 (self: t_Vec) : Seq.seq Int32.t =
    [%#smodel'0] view self
  
  let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'3 self_)} (! return' {result}) ]
  
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    [%#sslice'1] forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t Int32.t))= {[@expl:index_mut requires] [%#svec'0] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result:MutBorrow.t Int32.t)-> {[%#svec'1] has_value ix (view'0 self_) result.current}
      {[%#svec'2] has_value ix (view self_.final) result.final}
      {[%#svec'3] resolve_elswhere ix (view'0 self_) (view self_.final)}
      {[%#svec'4] Seq.length (view self_.final) = Seq.length (view'0 self_)}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_Vec) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_Vec) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec y[#"inferred_invariants.rs" 41 0 41 26] (v:MutBorrow.t t_Vec) (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sinferred_invariants] v'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &i <- [%#sinferred_invariants'0] (0: UInt64.t) ] s1 | s1 =  [ &old_2_0 <- v'0 ] s2 | s2 = bb2 ]
    
    | bb2 = bb2'0
      [ bb2'0 = {[@expl:mut invariant] old_2_0.final = v'0.final}
        {[@expl:loop invariant #0] [%#sinferred_invariants'2] Seq.length (view'2 old_v) = Seq.length (view'0 v'0)}
        {[@expl:loop invariant #1] [%#sinferred_invariants'1] UInt64.t'int i <= 10}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len {v'0.current} (fun (_ret:UInt64.t) ->  [ &_12 <- _ret ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 =  [ &_10 <- UInt64.lt i _12 ] s1 | s1 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb5) ]  ]
        
        | bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Vec> {v'0.current}
              (fun (_ret:MutBorrow.t t_Vec) ->  [ &_15 <- _ret ]  [ &v'0 <- { v'0 with current = _ret.final } ] s1)
          | s1 = index_mut {_15} {i} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_14 <- _ret ] s2)
          | s2 = bb6 ]
        
        | bb6 = s0
          [ s0 =  [ &_14 <- { _14 with current = ([%#sinferred_invariants'3] (0: Int32.t)) } ] s1
          | s1 = -{resolve'0 _14}- s2
          | s2 = bb8 ]
        
        | bb8 = s0
          [ s0 = UInt64.add {i} {[%#sinferred_invariants'4] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1)
          | s1 =  [ &_17 <- UInt64.gt i ([%#sinferred_invariants'5] (10: UInt64.t)) ] s2
          | s2 = any [ br0 -> {_17 = false} (! bb2'0) | br1 -> {_17} (! bb9) ]  ]
         ]
       ]
    
    | bb9 = s0 [ s0 = -{resolve'2 v'0}- s1 | s1 = return''0 {_0} ]  ]
    
    [ & _0: () = Any.any_l ()
    | & v'0: MutBorrow.t t_Vec = v
    | & old_v: MutBorrow.t t_Vec = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _14: MutBorrow.t Int32.t = Any.any_l ()
    | & _15: MutBorrow.t t_Vec = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & old_2_0: MutBorrow.t t_Vec = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_inferred_invariants__nested_loops [#"inferred_invariants.rs" 60 0 60 32]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinferred_invariants = "inferred_invariants.rs" 61 16 61 17
  let%span sinferred_invariants'0 = "inferred_invariants.rs" 63 16 63 26
  let%span sinferred_invariants'1 = "inferred_invariants.rs" 65 15 65 17
  let%span sinferred_invariants'2 = "inferred_invariants.rs" 68 13 68 14
  let%span sinferred_invariants'3 = "inferred_invariants.rs" 70 20 70 21
  let%span sinferred_invariants'4 = "inferred_invariants.rs" 72 20 72 30
  let%span sinferred_invariants'5 = "inferred_invariants.rs" 74 19 74 21
  let%span sinferred_invariants'6 = "inferred_invariants.rs" 77 17 77 18
  let%span sinferred_invariants'7 = "inferred_invariants.rs" 78 17 78 18
  let%span sinferred_invariants'8 = "inferred_invariants.rs" 58 11 58 21
  let%span sinferred_invariants'9 = "inferred_invariants.rs" 59 10 59 20
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested_loops[#"inferred_invariants.rs" 60 0 60 32] (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:nested_loops requires] [%#sinferred_invariants'8] x.current
    = (0: Int32.t)}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &i <- [%#sinferred_invariants] (0: Int32.t) ] s1 | s1 =  [ &old_1_0 <- x'0 ] s2 | s2 = bb1 ] 
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:mut invariant] old_1_0.final = x'0.final}
        {[@expl:loop invariant] [%#sinferred_invariants'0] x'0.current = (0: Int32.t)}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 =  [ &_9 <- Int32.gt i ([%#sinferred_invariants'1] (10: Int32.t)) ] s1
          | s1 = any [ br0 -> {_9 = false} (! bb4) | br1 -> {_9} (! bb3) ]  ]
        
        | bb4 = s0
          [ s0 = Int32.add {i} {[%#sinferred_invariants'2] (1: Int32.t)} (fun (_ret:Int32.t) ->  [ &i <- _ret ] s1)
          | s1 =  [ &j <- [%#sinferred_invariants'3] (0: Int32.t) ] s2
          | s2 =  [ &old_5_0 <- x'0 ] s3
          | s3 = bb5 ]
        
        | bb5 = bb5'0
          [ bb5'0 = {[@expl:mut invariant] old_5_0.final = x'0.final}
            {[@expl:loop invariant] [%#sinferred_invariants'4] x'0.current = (0: Int32.t)}
            (! s0) [ s0 = bb6 ] 
            [ bb6 = s0
              [ s0 =  [ &_16 <- Int32.gt j ([%#sinferred_invariants'5] (10: Int32.t)) ] s1
              | s1 = any [ br0 -> {_16 = false} (! bb8) | br1 -> {_16} (! bb1'0) ]  ]
            
            | bb8 = s0
              [ s0 = Int32.add {j} {[%#sinferred_invariants'6] (1: Int32.t)} (fun (_ret:Int32.t) ->  [ &j <- _ret ] s1)
              | s1 =  [ &x'0 <- { x'0 with current = ([%#sinferred_invariants'7] (0: Int32.t)) } ] s2
              | s2 = bb5'0 ]
             ]
           ]
         ]
       ]
    
    | bb3 = s0 [ s0 = -{resolve'0 x'0}- s1 | s1 = return''0 {_0} ]  ]
    
    [ & _0: () = Any.any_l ()
    | & x'0: MutBorrow.t Int32.t = x
    | & i: Int32.t = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & j: Int32.t = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & old_5_0: MutBorrow.t Int32.t = Any.any_l ()
    | & old_1_0: MutBorrow.t Int32.t = Any.any_l () ]
    )
    [ return''0 (result:())-> {[@expl:nested_loops ensures] [%#sinferred_invariants'9] x.final = (0: Int32.t)}
      (! return' {result}) ]

end
module M_inferred_invariants__nested_borrows [#"inferred_invariants.rs" 86 0 86 69]
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinferred_invariants = "inferred_invariants.rs" 87 16 87 17
  let%span sinferred_invariants'0 = "inferred_invariants.rs" 89 16 89 27
  let%span sinferred_invariants'1 = "inferred_invariants.rs" 91 15 91 17
  let%span sinferred_invariants'2 = "inferred_invariants.rs" 94 13 94 14
  let%span sinferred_invariants'3 = "inferred_invariants.rs" 96 14 96 15
  let%span sinferred_invariants'4 = "inferred_invariants.rs" 100 10 100 11
  let%span sinferred_invariants'5 = "inferred_invariants.rs" 83 11 83 22
  let%span sinferred_invariants'6 = "inferred_invariants.rs" 84 10 84 17
  let%span sinferred_invariants'7 = "inferred_invariants.rs" 85 10 85 21
  let%span smem = "../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  let%span smem'0 = "../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  let rec replace (dest:MutBorrow.t (MutBorrow.t Int32.t)) (src:MutBorrow.t Int32.t) (return'  (x:MutBorrow.t Int32.t))= any
    [ return''0 (result:MutBorrow.t Int32.t)-> {[%#smem] dest.final = src}
      {[%#smem'0] result = dest.current}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t (MutBorrow.t Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (MutBorrow.t Int32.t)) =
    resolve _0
  
  predicate resolve'1 (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t Int32.t) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested_borrows[#"inferred_invariants.rs" 86 0 86 69] (x:MutBorrow.t (MutBorrow.t Int32.t)) (y:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:nested_borrows requires] [%#sinferred_invariants'5] (x.current).current
    = (0: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &i <- [%#sinferred_invariants] (0: Int32.t) ] s1
      | s1 =  [ &old_1_0 <- x'0 ] s2
      | s2 =  [ &old_1_1 <- x'0.current ] s3
      | s3 = bb1 ]
    
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:mut invariant] old_1_1.final = (x'0.current).final}
        {[@expl:mut invariant] old_1_0.final = x'0.final}
        {[@expl:loop invariant] [%#sinferred_invariants'0] (x'0.current).current = (0: Int32.t)}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 =  [ &_12 <- Int32.gt i ([%#sinferred_invariants'1] (10: Int32.t)) ] s1
          | s1 = any [ br0 -> {_12 = false} (! bb4) | br1 -> {_12} (! bb3) ]  ]
        
        | bb4 = s0
          [ s0 = Int32.add {i} {[%#sinferred_invariants'2] (1: Int32.t)} (fun (_ret:Int32.t) ->  [ &i <- _ret ] s1)
          | s1 = 
            [ &x'0 <- { x'0 with current = { x'0.current with current = ([%#sinferred_invariants'3] (0: Int32.t)) } } ]
            
            s2
          | s2 = bb1'0 ]
         ]
       ]
    
    | bb3 = s0
      [ s0 = MutBorrow.borrow_final <MutBorrow.t Int32.t> {x'0.current} {MutBorrow.get_id x'0}
          (fun (_ret:MutBorrow.t (MutBorrow.t Int32.t)) ->
             [ &_16 <- _ret ] 
             [ &x'0 <- { x'0 with current = _ret.final } ] 
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {y'0.current} {MutBorrow.get_id y'0}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_17 <- _ret ]  [ &y'0 <- { y'0 with current = _ret.final } ] s2)
      | s2 = replace {_16} {_17} (fun (_ret:MutBorrow.t Int32.t) ->  [ &b <- _ret ] s3)
      | s3 = bb5 ]
    
    | bb5 = s0
      [ s0 = -{resolve'0 x'0}- s1
      | s1 = Int32.add {b.current} {[%#sinferred_invariants'4] (1: Int32.t)}
          (fun (_ret:Int32.t) ->  [ &b <- { b with current = _ret } ] s2)
      | s2 = -{resolve'2 b}- s3
      | s3 = -{resolve'2 y'0}- s4
      | s4 = return''0 {_0} ]
     ]
    
    [ & _0: () = Any.any_l ()
    | & x'0: MutBorrow.t (MutBorrow.t Int32.t) = x
    | & y'0: MutBorrow.t Int32.t = y
    | & i: Int32.t = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & b: MutBorrow.t Int32.t = Any.any_l ()
    | & _16: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l ()
    | & _17: MutBorrow.t Int32.t = Any.any_l ()
    | & old_1_0: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l ()
    | & old_1_1: MutBorrow.t Int32.t = Any.any_l () ]
    )
    [ return''0 (result:())-> {[@expl:nested_borrows ensures #0] [%#sinferred_invariants'6] x.final = y}
      {[@expl:nested_borrows ensures #1] [%#sinferred_invariants'7] (x.current).final = (1: Int32.t)}
      (! return' {result}) ]

end
