module M_borrows__qyi5649894289181344863__new [#"borrows.rs" 18 4 18 30] (* NonZero *)
  let%span sborrows = "borrows.rs" 16 15 16 22
  let%span sborrows'0 = "borrows.rs" 18 26 18 30
  let%span sborrows'1 = "borrows.rs" 17 14 17 27
  let%span sborrows'2 = "borrows.rs" 11 20 11 32
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_NonZero  =
    { t_NonZero__0: Int32.t }
  
  predicate invariant' [#"borrows.rs" 10 4 10 30] (self: t_NonZero) =
    [%#sborrows'2] Int32.to_int self.t_NonZero__0 <> 0
  
  predicate inv (_0: t_NonZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZero [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZero__0 = a_0} -> true
    end)
  
  meta "compute_max_steps" 1000000
  
  let rec new[#"borrows.rs" 18 4 18 30] (n:Int32.t) (return'  (x:t_NonZero))= {[@expl:new requires] [%#sborrows] Int32.to_int n
    <> 0}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- { t_NonZero__0 = n'0 } ] s1 | s1 = return''0 {_0} ]  ] )
    [ & _0: t_NonZero = Any.any_l () | & n'0: Int32.t = n ]
    
    [ return''0 (result:t_NonZero)-> {[@expl:new result type invariant] [%#sborrows'0] inv result}
      {[@expl:new ensures] [%#sborrows'1] result.t_NonZero__0 = n}
      (! return' {result}) ]

end
module M_borrows__qyi5649894289181344863__inner_mut [#"borrows.rs" 24 4 24 43] (* NonZero *)
  let%span sborrows = "borrows.rs" 24 26 24 30
  let%span sborrows'0 = "borrows.rs" 22 14 22 38
  let%span sborrows'1 = "borrows.rs" 23 14 23 38
  let%span sborrows'2 = "borrows.rs" 11 20 11 32
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_NonZero  =
    { t_NonZero__0: Int32.t }
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  predicate invariant' [#"borrows.rs" 10 4 10 30] (self: t_NonZero) =
    [%#sborrows'2] Int32.to_int self.t_NonZero__0 <> 0
  
  predicate inv (_0: t_NonZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZero [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZero__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: MutBorrow.t t_NonZero) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_NonZero)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_NonZero [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate resolve'1 (self: MutBorrow.t t_NonZero) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_NonZero) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec inner_mut[#"borrows.rs" 24 4 24 43] (self:MutBorrow.t t_NonZero) (return'  (x:MutBorrow.t Int32.t))= {[@expl:inner_mut 'self' type invariant] [%#sborrows] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final
          <Int32.t>
          {(self'0.current).t_NonZero__0}
          {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &_5 <- _ret ] 
             [ &self'0 <- { self'0 with current = { t_NonZero__0 = _ret.final } } ] 
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_2 <- _ret ]  [ &_5 <- { _5 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_0 <- _ret ]  [ &_2 <- { _2 with current = _ret.final } ] s3)
      | s3 = -{resolve'0 _5}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = {[@expl:type invariant] inv'0 self'0} s6
      | s6 = -{resolve'2 self'0}- s7
      | s7 = return''0 {_0} ]
     ]
    )
    [ & _0: MutBorrow.t Int32.t = Any.any_l ()
    | & self'0: MutBorrow.t t_NonZero = self
    | & _2: MutBorrow.t Int32.t = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l () ]
    
    [ return''0 (result:MutBorrow.t Int32.t)-> {[@expl:inner_mut ensures #0] [%#sborrows'0] Int32.to_int (self.current).t_NonZero__0
      = Int32.to_int result.current}
      {[@expl:inner_mut ensures #1] [%#sborrows'1] Int32.to_int (self.final).t_NonZero__0 = Int32.to_int result.final}
      (! return' {result}) ]

end
module M_borrows__simple [#"borrows.rs" 32 0 32 30]
  let%span sborrows = "borrows.rs" 32 14 32 15
  let%span sborrows'0 = "borrows.rs" 30 11 30 27
  let%span sborrows'1 = "borrows.rs" 31 11 31 21
  let%span sborrows'2 = "borrows.rs" 100 11 100 25
  let%span sborrows'3 = "borrows.rs" 101 10 101 25
  let%span sborrows'4 = "borrows.rs" 11 20 11 32
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZero  =
    { t_NonZero__0: Int32.t }
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MAX: Int32.t = (2147483647: Int32.t)
  
  let rec inc (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:inc requires] [%#sborrows'2] view x
    < Int32.to_int (v_MAX: Int32.t)}
    any [ return''0 (result:())-> {[%#sborrows'3] Int32.to_int x.final = view x + 1} (! return' {result}) ] 
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  predicate invariant' [#"borrows.rs" 10 4 10 30] (self: t_NonZero) =
    [%#sborrows'4] Int32.to_int self.t_NonZero__0 <> 0
  
  predicate inv (_0: t_NonZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZero [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZero__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: MutBorrow.t t_NonZero) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_NonZero)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_NonZero [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate resolve'1 (self: MutBorrow.t t_NonZero) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_NonZero) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec simple[#"borrows.rs" 32 0 32 30] (x:MutBorrow.t t_NonZero) (return'  (x'0:()))= {[@expl:simple 'x' type invariant] [%#sborrows] inv'0 x}
    {[@expl:simple requires #0] [%#sborrows'0] Int32.to_int (x.current).t_NonZero__0 < Int32.to_int (v_MAX: Int32.t)}
    {[@expl:simple requires #1] [%#sborrows'1] Int32.to_int (x.current).t_NonZero__0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final
          <Int32.t>
          {(x'0.current).t_NonZero__0}
          {MutBorrow.inherit_id (MutBorrow.get_id x'0) 1}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &_6 <- _ret ] 
             [ &x'0 <- { x'0 with current = { t_NonZero__0 = _ret.final } } ] 
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_5 <- _ret ]  [ &_6 <- { _6 with current = _ret.final } ] s2)
      | s2 = inc {_5} (fun (_ret:()) ->  [ &_4 <- _ret ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x'0} s2
      | s2 = -{resolve'2 x'0}- s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & x'0: MutBorrow.t t_NonZero = x
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_borrows__hard [#"borrows.rs" 39 0 39 28]
  let%span sborrows = "borrows.rs" 39 12 39 13
  let%span sborrows'0 = "borrows.rs" 37 11 37 27
  let%span sborrows'1 = "borrows.rs" 38 11 38 21
  let%span sborrows'2 = "borrows.rs" 24 26 24 30
  let%span sborrows'3 = "borrows.rs" 22 14 22 38
  let%span sborrows'4 = "borrows.rs" 23 14 23 38
  let%span sborrows'5 = "borrows.rs" 100 11 100 25
  let%span sborrows'6 = "borrows.rs" 101 10 101 25
  let%span sborrows'7 = "borrows.rs" 11 20 11 32
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZero  =
    { t_NonZero__0: Int32.t }
  
  predicate invariant' [#"borrows.rs" 10 4 10 30] (self: t_NonZero) =
    [%#sborrows'7] Int32.to_int self.t_NonZero__0 <> 0
  
  predicate inv (_0: t_NonZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZero [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZero__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: MutBorrow.t t_NonZero) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_NonZero)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_NonZero [inv'0 x]. inv'0 x = invariant''0 x
  
  let rec inner_mut (self:MutBorrow.t t_NonZero) (return'  (x:MutBorrow.t Int32.t))= {[@expl:inner_mut 'self' type invariant] [%#sborrows'2] inv'0 self}
    any
    [ return''0 (result:MutBorrow.t Int32.t)-> {[%#sborrows'3] Int32.to_int (self.current).t_NonZero__0
      = Int32.to_int result.current}
      {[%#sborrows'4] Int32.to_int (self.final).t_NonZero__0 = Int32.to_int result.final}
      (! return' {result}) ]
  
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MAX: Int32.t = (2147483647: Int32.t)
  
  let rec inc (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:inc requires] [%#sborrows'5] view x
    < Int32.to_int (v_MAX: Int32.t)}
    any [ return''0 (result:())-> {[%#sborrows'6] Int32.to_int x.final = view x + 1} (! return' {result}) ] 
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_NonZero) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_NonZero) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec hard[#"borrows.rs" 39 0 39 28] (x:MutBorrow.t t_NonZero) (return'  (x'0:()))= {[@expl:hard 'x' type invariant] [%#sborrows] inv'0 x}
    {[@expl:hard requires #0] [%#sborrows'0] Int32.to_int (x.current).t_NonZero__0 < Int32.to_int (v_MAX: Int32.t)}
    {[@expl:hard requires #1] [%#sborrows'1] Int32.to_int (x.current).t_NonZero__0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv x'0.current}
        MutBorrow.borrow_final <t_NonZero> {x'0.current} {MutBorrow.get_id x'0}
          (fun (_ret:MutBorrow.t t_NonZero) ->
             [ &_7 <- _ret ] 
            -{inv _ret.final}-
             [ &x'0 <- { x'0 with current = _ret.final } ] 
            s1)
      | s1 = inner_mut {_7} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_6 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_5 <- _ret ]  [ &_6 <- { _6 with current = _ret.final } ] s1)
      | s1 = inc {_5} (fun (_ret:()) ->  [ &_4 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x'0} s2
      | s2 = -{resolve'2 x'0}- s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & x'0: MutBorrow.t t_NonZero = x
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l ()
    | & _7: MutBorrow.t t_NonZero = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_borrows__tuple [#"borrows.rs" 46 0 46 44]
  let%span sborrows = "borrows.rs" 47 12 47 13
  let%span sborrows'0 = "borrows.rs" 46 17 46 18
  let%span sborrows'1 = "borrows.rs" 44 11 44 29
  let%span sborrows'2 = "borrows.rs" 45 11 45 23
  let%span sborrows'3 = "borrows.rs" 100 11 100 25
  let%span sborrows'4 = "borrows.rs" 101 10 101 25
  let%span sborrows'5 = "borrows.rs" 11 20 11 32
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sresolve'0 = "../../../creusot-contracts/src/resolve.rs" 36 8 36 44
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZero  =
    { t_NonZero__0: Int32.t }
  
  type tuple  =
    { _p0: t_NonZero; _p1: MutBorrow.t t_NonZero }
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MAX: Int32.t = (2147483647: Int32.t)
  
  let rec inc (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:inc requires] [%#sborrows'3] view x
    < Int32.to_int (v_MAX: Int32.t)}
    any [ return''0 (result:())-> {[%#sborrows'4] Int32.to_int x.final = view x + 1} (! return' {result}) ] 
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  predicate invariant' [#"borrows.rs" 10 4 10 30] (self: t_NonZero) =
    [%#sborrows'5] Int32.to_int self.t_NonZero__0 <> 0
  
  predicate inv (_0: t_NonZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZero [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZero__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: MutBorrow.t t_NonZero) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_NonZero)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_NonZero [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom'1 [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x
  = (let {_p0 = x0 ; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  predicate resolve'1 (_0: t_NonZero) =
    true
  
  predicate resolve'2 (self: MutBorrow.t t_NonZero) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'3 (_0: MutBorrow.t t_NonZero) =
    resolve'2 _0
  
  predicate resolve'4 (self: tuple) =
    [%#sresolve'0] resolve'1 self._p0 /\ resolve'3 self._p1
  
  predicate resolve'5 (_0: tuple) =
    resolve'4 _0
  
  meta "compute_max_steps" 1000000
  
  let rec tuple[#"borrows.rs" 46 0 46 44] (x:tuple) (return'  (x'0:()))= {[@expl:tuple 'x' type invariant] [%#sborrows'0] inv'1 x}
    {[@expl:tuple requires #0] [%#sborrows'1] Int32.to_int ((x._p1).current).t_NonZero__0
    < Int32.to_int (v_MAX: Int32.t)}
    {[@expl:tuple requires #1] [%#sborrows'2] Int32.to_int ((x._p1).current).t_NonZero__0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &x'0 <- { x'0 with _p0 = { t_NonZero__0 = ([%#sborrows] (0: Int32.t)) } } ] s1
      | s1 = MutBorrow.borrow_final
          <Int32.t>
          {((x'0._p1).current).t_NonZero__0}
          {MutBorrow.inherit_id (MutBorrow.get_id x'0._p1) 1}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &_6 <- _ret ] 
             [ &x'0 <- { x'0 with _p1 = { x'0._p1 with current = { t_NonZero__0 = _ret.final } } } ] 
            s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_5 <- _ret ]  [ &_6 <- { _6 with current = _ret.final } ] s3)
      | s3 = inc {_5} (fun (_ret:()) ->  [ &_4 <- _ret ] s4)
      | s4 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'1 x'0} s2
      | s2 = -{resolve'5 x'0}- s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & x'0: tuple = x
    | & _4: () = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_borrows__partial_move [#"borrows.rs" 54 0 54 47]
  let%span sborrows = "borrows.rs" 57 10 57 11
  let%span sborrows'0 = "borrows.rs" 54 20 54 21
  let%span sborrows'1 = "borrows.rs" 52 11 52 29
  let%span sborrows'2 = "borrows.rs" 53 11 53 23
  let%span sborrows'3 = "borrows.rs" 100 11 100 25
  let%span sborrows'4 = "borrows.rs" 101 10 101 25
  let%span sborrows'5 = "borrows.rs" 11 20 11 32
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZero  =
    { t_NonZero__0: Int32.t }
  
  type tuple  =
    { _p0: t_NonZero; _p1: MutBorrow.t t_NonZero }
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MAX: Int32.t = (2147483647: Int32.t)
  
  let rec inc (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:inc requires] [%#sborrows'3] view x
    < Int32.to_int (v_MAX: Int32.t)}
    any [ return''0 (result:())-> {[%#sborrows'4] Int32.to_int x.final = view x + 1} (! return' {result}) ] 
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  predicate invariant' [#"borrows.rs" 10 4 10 30] (self: t_NonZero) =
    [%#sborrows'5] Int32.to_int self.t_NonZero__0 <> 0
  
  predicate inv (_0: t_NonZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZero [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZero__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: MutBorrow.t t_NonZero) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_NonZero)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_NonZero [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate resolve'1 (self: MutBorrow.t t_NonZero) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_NonZero) =
    resolve'1 _0
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom'1 [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x
  = (let {_p0 = x0 ; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  meta "compute_max_steps" 1000000
  
  let rec partial_move[#"borrows.rs" 54 0 54 47] (x:tuple) (return'  (x'0:()))= {[@expl:partial_move 'x' type invariant] [%#sborrows'0] inv'1 x}
    {[@expl:partial_move requires #0] [%#sborrows'1] Int32.to_int ((x._p1).current).t_NonZero__0
    < Int32.to_int (v_MAX: Int32.t)}
    {[@expl:partial_move requires #1] [%#sborrows'2] Int32.to_int ((x._p1).current).t_NonZero__0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- x'0._p0 ] s1
      | s1 = MutBorrow.borrow_final
          <Int32.t>
          {((x'0._p1).current).t_NonZero__0}
          {MutBorrow.inherit_id (MutBorrow.get_id x'0._p1) 1}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &_7 <- _ret ] 
             [ &x'0 <- { x'0 with _p1 = { x'0._p1 with current = { t_NonZero__0 = _ret.final } } } ] 
            s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_6 <- _ret ]  [ &_7 <- { _7 with current = _ret.final } ] s3)
      | s3 = inc {_6} (fun (_ret:()) ->  [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = {[@expl:type invariant] match x'0 with
          | {_p1 = x'1} -> inv'0 x'1
          | _ -> true
          end}
        s2
      | s2 = -{match x'0 with
          | {_p1 = x'1} -> resolve'2 x'1
          | _ -> true
          end}-
        s3
      | s3 =  [ &a <- { t_NonZero__0 = ([%#sborrows] (0: Int32.t)) } ] s4
      | s4 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & x'0: tuple = x
    | & a: t_NonZero = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l ()
    | & _7: MutBorrow.t Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_borrows__destruct [#"borrows.rs" 62 0 62 43]
  let%span sborrows = "borrows.rs" 64 10 64 11
  let%span sborrows'0 = "borrows.rs" 62 16 62 17
  let%span sborrows'1 = "borrows.rs" 60 11 60 29
  let%span sborrows'2 = "borrows.rs" 61 11 61 23
  let%span sborrows'3 = "borrows.rs" 100 11 100 25
  let%span sborrows'4 = "borrows.rs" 101 10 101 25
  let%span sborrows'5 = "borrows.rs" 11 20 11 32
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZero  =
    { t_NonZero__0: Int32.t }
  
  type tuple  =
    { _p0: t_NonZero; _p1: MutBorrow.t t_NonZero }
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MAX: Int32.t = (2147483647: Int32.t)
  
  let rec inc (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:inc requires] [%#sborrows'3] view x
    < Int32.to_int (v_MAX: Int32.t)}
    any [ return''0 (result:())-> {[%#sborrows'4] Int32.to_int x.final = view x + 1} (! return' {result}) ] 
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  predicate invariant' [#"borrows.rs" 10 4 10 30] (self: t_NonZero) =
    [%#sborrows'5] Int32.to_int self.t_NonZero__0 <> 0
  
  predicate inv (_0: t_NonZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZero [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZero__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: MutBorrow.t t_NonZero) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_NonZero)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_NonZero [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate resolve'1 (self: MutBorrow.t t_NonZero) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_NonZero) =
    resolve'1 _0
  
  predicate inv'1 (_0: tuple)
  
  axiom inv_axiom'1 [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x
  = (let {_p0 = x0 ; _p1 = x1} = x in inv x0 /\ inv'0 x1)
  
  meta "compute_max_steps" 1000000
  
  let rec destruct[#"borrows.rs" 62 0 62 43] (x:tuple) (return'  (x'0:()))= {[@expl:destruct 'x' type invariant] [%#sborrows'0] inv'1 x}
    {[@expl:destruct requires #0] [%#sborrows'1] Int32.to_int ((x._p1).current).t_NonZero__0
    < Int32.to_int (v_MAX: Int32.t)}
    {[@expl:destruct requires #1] [%#sborrows'2] Int32.to_int ((x._p1).current).t_NonZero__0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- x'0._p0 ] s1
      | s1 =  [ &b <- x'0._p1 ] s2
      | s2 =  [ &a <- { t_NonZero__0 = ([%#sborrows] (0: Int32.t)) } ] s3
      | s3 = MutBorrow.borrow_final <Int32.t> {(b.current).t_NonZero__0} {MutBorrow.inherit_id (MutBorrow.get_id b) 1}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &_8 <- _ret ] 
             [ &b <- { b with current = { t_NonZero__0 = _ret.final } } ] 
            s4)
      | s4 = MutBorrow.borrow_final <Int32.t> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_7 <- _ret ]  [ &_8 <- { _8 with current = _ret.final } ] s5)
      | s5 = inc {_7} (fun (_ret:()) ->  [ &_6 <- _ret ] s6)
      | s6 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:type invariant] inv'0 b} s2
      | s2 = -{resolve'2 b}- s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & x'0: tuple = x
    | & a: t_NonZero = Any.any_l ()
    | & b: MutBorrow.t t_NonZero = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: MutBorrow.t Int32.t = Any.any_l ()
    | & _8: MutBorrow.t Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_borrows__frozen_dead [#"borrows.rs" 70 0 70 66]
  let%span sborrows = "borrows.rs" 70 27 70 28
  let%span sborrows'0 = "borrows.rs" 70 47 70 48
  let%span sborrows'1 = "borrows.rs" 68 11 68 27
  let%span sborrows'2 = "borrows.rs" 69 11 69 21
  let%span sborrows'3 = "borrows.rs" 100 11 100 25
  let%span sborrows'4 = "borrows.rs" 101 10 101 25
  let%span sborrows'5 = "borrows.rs" 11 20 11 32
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonZero  =
    { t_NonZero__0: Int32.t }
  
  predicate invariant' [#"borrows.rs" 10 4 10 30] (self: t_NonZero) =
    [%#sborrows'5] Int32.to_int self.t_NonZero__0 <> 0
  
  predicate inv (_0: t_NonZero)
  
  axiom inv_axiom [@rewrite]: forall x: t_NonZero [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_NonZero__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: MutBorrow.t t_NonZero) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_NonZero)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_NonZero [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate resolve (self: MutBorrow.t t_NonZero) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_NonZero) =
    resolve _0
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MAX: Int32.t = (2147483647: Int32.t)
  
  let rec inc (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:inc requires] [%#sborrows'3] view x
    < Int32.to_int (v_MAX: Int32.t)}
    any [ return''0 (result:())-> {[%#sborrows'4] Int32.to_int x.final = view x + 1} (! return' {result}) ] 
  
  predicate resolve'1 (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t Int32.t) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec frozen_dead[#"borrows.rs" 70 0 70 66] (x:MutBorrow.t t_NonZero) (y:MutBorrow.t t_NonZero) (return'  (x'0:()))= {[@expl:frozen_dead 'x' type invariant] [%#sborrows] inv'0 x}
    {[@expl:frozen_dead 'y' type invariant] [%#sborrows'0] inv'0 y}
    {[@expl:frozen_dead requires #0] [%#sborrows'1] Int32.to_int (x.current).t_NonZero__0
    < Int32.to_int (v_MAX: Int32.t)}
    {[@expl:frozen_dead requires #1] [%#sborrows'2] Int32.to_int (x.current).t_NonZero__0 <> - 1}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final
          <Int32.t>
          {(x'0.current).t_NonZero__0}
          {MutBorrow.inherit_id (MutBorrow.get_id x'0) 1}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &_a <- _ret ] 
             [ &x'0 <- { x'0 with current = { t_NonZero__0 = _ret.final } } ] 
            s1)
      | s1 = {inv y'0.current}
        MutBorrow.borrow_final <t_NonZero> {y'0.current} {MutBorrow.get_id y'0}
          (fun (_ret:MutBorrow.t t_NonZero) ->
             [ &_6 <- _ret ] 
            -{inv _ret.final}-
             [ &y'0 <- { y'0 with current = _ret.final } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'0 x'0} s3
      | s3 = -{resolve'0 x'0}- s4
      | s4 =  [ &x'0 <- _6 ] s5
      | s5 = {[@expl:type invariant] inv'0 x'0} s6
      | s6 = -{resolve'0 x'0}- s7
      | s7 = MutBorrow.borrow_final <Int32.t> {_a.current} {MutBorrow.get_id _a}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_8 <- _ret ]  [ &_a <- { _a with current = _ret.final } ] s8)
      | s8 = inc {_8} (fun (_ret:()) ->  [ &_7 <- _ret ] s9)
      | s9 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{resolve'2 _a}- s1
      | s1 = {[@expl:type invariant] inv'0 y'0} s2
      | s2 = -{resolve'0 y'0}- s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & x'0: MutBorrow.t t_NonZero = x
    | & y'0: MutBorrow.t t_NonZero = y
    | & _a: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t t_NonZero = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_borrows__qyi5556307355051076399__foo [#"borrows.rs" 94 4 94 25] (* SumTo10 *)
  let%span sborrows = "borrows.rs" 94 20 94 24
  let%span sborrows'0 = "borrows.rs" 93 15 93 34
  let%span sborrows'1 = "borrows.rs" 100 11 100 25
  let%span sborrows'2 = "borrows.rs" 101 10 101 25
  let%span sborrows'3 = "borrows.rs" 106 11 106 25
  let%span sborrows'4 = "borrows.rs" 107 10 107 25
  let%span sborrows'5 = "borrows.rs" 88 20 88 43
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_SumTo10  =
    { t_SumTo10__a: Int32.t; t_SumTo10__b: Int32.t }
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MAX: Int32.t = (2147483647: Int32.t)
  
  let rec inc (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:inc requires] [%#sborrows'1] view x
    < Int32.to_int (v_MAX: Int32.t)}
    any [ return''0 (result:())-> {[%#sborrows'2] Int32.to_int x.final = view x + 1} (! return' {result}) ] 
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  constant v_MIN: Int32.t = (-2147483648: Int32.t)
  
  let rec dec (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:dec requires] [%#sborrows'3] view x
    > Int32.to_int (v_MIN: Int32.t)}
    any [ return''0 (result:())-> {[%#sborrows'4] Int32.to_int x.final = view x - 1} (! return' {result}) ] 
  
  predicate invariant' [#"borrows.rs" 87 4 87 30] (self: t_SumTo10) =
    [%#sborrows'5] Int32.to_int self.t_SumTo10__a + Int32.to_int self.t_SumTo10__b = 10
  
  predicate inv (_0: t_SumTo10)
  
  axiom inv_axiom [@rewrite]: forall x: t_SumTo10 [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_SumTo10__a = a ; t_SumTo10__b = b} -> true
    end)
  
  predicate invariant''0 (self: MutBorrow.t t_SumTo10) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_SumTo10)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_SumTo10 [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate resolve'1 (self: MutBorrow.t t_SumTo10) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_SumTo10) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec foo[#"borrows.rs" 94 4 94 25] (self:MutBorrow.t t_SumTo10) (return'  (x:()))= {[@expl:foo 'self' type invariant] [%#sborrows] inv'0 self}
    {[@expl:foo requires] [%#sborrows'0] Int32.to_int (self.current).t_SumTo10__a < Int32.to_int (v_MAX: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final
          <Int32.t>
          {(self'0.current).t_SumTo10__a}
          {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &_5 <- _ret ] 
             [ &self'0 <- { self'0 with current = { self'0.current with t_SumTo10__a = _ret.final } } ] 
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_4 <- _ret ]  [ &_5 <- { _5 with current = _ret.final } ] s2)
      | s2 = inc {_4} (fun (_ret:()) ->  [ &_3 <- _ret ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = MutBorrow.borrow_final
          <Int32.t>
          {(self'0.current).t_SumTo10__b}
          {MutBorrow.inherit_id (MutBorrow.get_id self'0) 2}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &_8 <- _ret ] 
             [ &self'0 <- { self'0 with current = { self'0.current with t_SumTo10__b = _ret.final } } ] 
            s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &_7 <- _ret ]  [ &_8 <- { _8 with current = _ret.final } ] s3)
      | s3 = dec {_7} (fun (_ret:()) ->  [ &_6 <- _ret ] s4)
      | s4 = bb2 ]
    
    | bb2 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:type invariant] inv'0 self'0} s2
      | s2 = -{resolve'2 self'0}- s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & self'0: MutBorrow.t t_SumTo10 = self
    | & _3: () = Any.any_l ()
    | & _4: MutBorrow.t Int32.t = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: MutBorrow.t Int32.t = Any.any_l ()
    | & _8: MutBorrow.t Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_borrows__inc [#"borrows.rs" 102 0 102 23]
  let%span sborrows = "borrows.rs" 103 10 103 11
  let%span sborrows'0 = "borrows.rs" 100 11 100 25
  let%span sborrows'1 = "borrows.rs" 101 10 101 25
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MAX: Int32.t = (2147483647: Int32.t)
  
  meta "compute_max_steps" 1000000
  
  let rec inc[#"borrows.rs" 102 0 102 23] (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:inc requires] [%#sborrows'0] view x
    < Int32.to_int (v_MAX: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {x'0.current} {[%#sborrows] (1: Int32.t)}
          (fun (_ret:Int32.t) ->  [ &x'0 <- { x'0 with current = _ret } ] s1)
      | s1 = -{resolve'0 x'0}- s2
      | s2 = return''0 {_0} ]
     ]
    ) [ & _0: () = Any.any_l () | & x'0: MutBorrow.t Int32.t = x ] 
    [ return''0 (result:())-> {[@expl:inc ensures] [%#sborrows'1] Int32.to_int x.final = view x + 1}
      (! return' {result}) ]

end
module M_borrows__dec [#"borrows.rs" 108 0 108 23]
  let%span sborrows = "borrows.rs" 109 10 109 11
  let%span sborrows'0 = "borrows.rs" 106 11 106 25
  let%span sborrows'1 = "borrows.rs" 107 10 107 25
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span smodel = "../../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  function view (self: MutBorrow.t Int32.t) : int =
    [%#smodel] Int32.to_int self.current
  
  constant v_MIN: Int32.t = (-2147483648: Int32.t)
  
  meta "compute_max_steps" 1000000
  
  let rec dec[#"borrows.rs" 108 0 108 23] (x:MutBorrow.t Int32.t) (return'  (x'0:()))= {[@expl:dec requires] [%#sborrows'0] view x
    > Int32.to_int (v_MIN: Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.sub {x'0.current} {[%#sborrows] (1: Int32.t)}
          (fun (_ret:Int32.t) ->  [ &x'0 <- { x'0 with current = _ret } ] s1)
      | s1 = -{resolve'0 x'0}- s2
      | s2 = return''0 {_0} ]
     ]
    ) [ & _0: () = Any.any_l () | & x'0: MutBorrow.t Int32.t = x ] 
    [ return''0 (result:())-> {[@expl:dec ensures] [%#sborrows'1] Int32.to_int x.final = view x - 1}
      (! return' {result}) ]

end
