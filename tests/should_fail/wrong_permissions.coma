module M_wrong_permissions__unknown_permcell_permission
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_PermCell
  
  type t_PermCellOwn
  
  type t_Id
  
  function id (self: t_PermCell) : t_Id
  
  function id'0 (self: t_PermCellOwn) : t_Id
  
  function val' (self: t_PermCellOwn) : Int32.t
  
  function view [@inline:trivial] (self: t_PermCellOwn) : Int32.t = val' self
  
  meta "rewrite_def" function view
  
  let rec borrow (self: t_PermCell) (perm: t_PermCellOwn) (return (x: Int32.t)) = {[@expl:borrow requires] id self
    = id'0 perm}
    any [ return (result: Int32.t) -> {result = view perm} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unknown_permcell_permission (cell: t_PermCell) (perm: t_PermCellOwn) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = borrow {cell} {perm} (fun (_ret: Int32.t) -> [ &_3 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & cell: t_PermCell = cell
    | & perm: t_PermCellOwn = perm
    | & _3: Int32.t = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_wrong_permissions__wrong_permcell_permission
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_PermCell
  
  type t_PermCellOwn
  
  type tuple = { f0: t_PermCell; f1: t_PermCellOwn }
  
  type t_Id
  
  function id (self: t_PermCell) : t_Id
  
  function id'0 (self: t_PermCellOwn) : t_Id
  
  function val' (self: t_PermCellOwn) : Int32.t
  
  function view [@inline:trivial] (self: t_PermCellOwn) : Int32.t = val' self
  
  meta "rewrite_def" function view
  
  let rec new (value: Int32.t) (return (x: tuple)) = any
    [ return (result: tuple) -> {id result.f0 = id'0 result.f1} {view result.f1 = value} (! return {result}) ]
  
  predicate resolve (_1: t_PermCell)
  
  let rec borrow (self: t_PermCellOwn) (return (x: t_PermCellOwn)) = any
    [ return (result: t_PermCellOwn) -> {result = self} (! return {result}) ]
  
  let rec borrow'0 (self: t_PermCell) (perm: t_PermCellOwn) (return (x: Int32.t)) = {[@expl:borrow requires] id self
    = id'0 perm}
    any [ return (result: Int32.t) -> {result = view perm} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec wrong_permcell_permission (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new {(1: Int32.t)} (fun (_ret: tuple) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = [ &cell <- _2.f0 ] s1 | s1 = new {(1: Int32.t)} (fun (_ret: tuple) -> [ &_4 <- _ret ] s2) | s2 = bb2 ]
    | bb2 = s0
      [ s0 = -{resolve _4.f0}- s1
      | s1 = [ &perm <- _4.f1 ] s2
      | s2 = -{resolve cell}- s3
      | s3 = borrow {perm} (fun (_ret: t_PermCellOwn) -> [ &_7 <- _ret ] s4)
      | s4 = bb3 ]
    | bb3 = s0 [ s0 = borrow'0 {cell} {_7} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & cell: t_PermCell = Any.any_l ()
    | & _2: tuple = Any.any_l ()
    | & perm: t_PermCellOwn = Any.any_l ()
    | & _4: tuple = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _7: t_PermCellOwn = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_wrong_permissions__unknown_ptr_own_permission
  use creusot.prelude.Opaque
  use creusot.int.Int32
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.int.Int64
  use creusot.prelude.Any
  
  type t_PtrOwn
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches [@inline:trivial] (_value: Int32.t) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : Int32.t
  
  function metadata_logic (_1: Opaque.ptr) : ()
  
  constant size_of_i32: int = 4
  
  meta "rewrite_def" constant size_of_i32
  
  axiom size_of_i32_spec: 0 <= size_of_i32
  
  function size_of_val_logic [@inline:trivial] (val''0: Int32.t) : int = size_of_i32
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: Int32.t. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate inv [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate inv
  
  predicate invariant' (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv (val' self)
  
  predicate inv'0 (_1: t_PtrOwn)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: t_PtrOwn) = inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: t_PtrOwn) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate invariant''1 [@inline:trivial] (self: t_PtrOwn) = inv'1 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'2 [@inline:trivial] (_1: t_PtrOwn) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'2
  
  let rec as_ref (ptr'0: Opaque.ptr) (own: t_PtrOwn) (return (x: Int32.t)) =
    {[@expl:as_ref 'own' type invariant] inv'2 own}
    {[@expl:as_ref requires] ptr'0 = ptr own}
    any [ return (result: Int32.t) -> {result = val' own} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec unknown_ptr_own_permission (ptr'0: Opaque.ptr) (perm: t_PtrOwn) (return (x: ())) =
    {[@expl:unknown_ptr_own_permission 'perm' type invariant] inv'2 perm}
    (! bb0
    [ bb0 = s0 [ s0 = as_ref {ptr'0} {perm} (fun (_ret: Int32.t) -> [ &_3 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & ptr'0: Opaque.ptr = ptr'0 | & perm: t_PtrOwn = perm | & _3: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_wrong_permissions__wrong_ptr_own_permission
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.int.Int64
  use creusot.prelude.Any
  
  type t_PtrOwn
  
  type tuple = { f0: Opaque.ptr; f1: t_PtrOwn }
  
  predicate is_null_logic (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr (self: t_PtrOwn) : Opaque.ptr
  
  predicate ptr_is_aligned_opaque (self: t_PtrOwn)
  
  predicate metadata_matches [@inline:trivial] (_value: Int32.t) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches
  
  function val' (self: t_PtrOwn) : Int32.t
  
  function metadata_logic (_1: Opaque.ptr) : ()
  
  constant size_of_i32: int = 4
  
  meta "rewrite_def" constant size_of_i32
  
  axiom size_of_i32_spec: 0 <= size_of_i32
  
  function size_of_val_logic [@inline:trivial] (val''0: Int32.t) : int = size_of_i32
  
  meta "rewrite_def" function size_of_val_logic
  
  axiom size_of_val_logic_spec: forall val''0: Int32.t. 0 <= size_of_val_logic val''0
  
  constant const_MAX: Int64.t = (9223372036854775807: Int64.t)
  
  constant const_MAX'0: UInt64.t = (18446744073709551615: UInt64.t)
  
  predicate inv [@inline:trivial] (_1: Int32.t) = true
  
  meta "rewrite_def" predicate inv
  
  predicate invariant' (self: t_PtrOwn) =
    not is_null_logic (ptr self)
    /\ ptr_is_aligned_opaque self
    /\ metadata_matches (val' self) (metadata_logic (ptr self))
    /\ size_of_val_logic (val' self) <= Int64.to_int const_MAX
    /\ UInt64.t'int (Ptr.addr_logic_u64 (ptr self)) + size_of_val_logic (val' self) <= UInt64.t'int const_MAX'0
    /\ inv (val' self)
  
  predicate inv'0 (_1: t_PtrOwn)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: t_PtrOwn) = inv'0 self
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: t_PtrOwn) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  predicate inv'2 [@inline:trivial] (_1: tuple) = inv'1 _1.f1
  
  meta "rewrite_def" predicate inv'2
  
  let rec new (v: Int32.t) (return (x: tuple)) = any
    [ return (result: tuple) -> {inv'2 result} {ptr result.f1 = result.f0 /\ val' result.f1 = v} (! return {result}) ]
  
  predicate resolve (_1: t_PtrOwn)
  
  predicate resolve'0 [@inline:trivial] (_1: t_PtrOwn) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate resolve'1 [@inline:trivial] (_1: tuple) = resolve'0 _1.f1
  
  meta "rewrite_def" predicate resolve'1
  
  predicate invariant''1 [@inline:trivial] (self: t_PtrOwn) = inv'1 self
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'3 [@inline:trivial] (_1: t_PtrOwn) = invariant''1 _1
  
  meta "rewrite_def" predicate inv'3
  
  predicate invariant''2 [@inline:trivial] (self: t_PtrOwn) = inv'0 self
  
  meta "rewrite_def" predicate invariant''2
  
  predicate inv'4 [@inline:trivial] (_1: t_PtrOwn) = invariant''2 _1
  
  meta "rewrite_def" predicate inv'4
  
  predicate invariant''3 [@inline:trivial] (self: t_PtrOwn) = inv'4 self
  
  meta "rewrite_def" predicate invariant''3
  
  predicate inv'5 [@inline:trivial] (_1: t_PtrOwn) = invariant''3 _1
  
  meta "rewrite_def" predicate inv'5
  
  let rec borrow (self: t_PtrOwn) (return (x: t_PtrOwn)) = {[@expl:borrow 'self' type invariant] inv'3 self}
    any [ return (result: t_PtrOwn) -> {inv'5 result} {result = self} (! return {result}) ]
  
  let rec as_ref (ptr'0: Opaque.ptr) (own: t_PtrOwn) (return (x: Int32.t)) =
    {[@expl:as_ref 'own' type invariant] inv'5 own}
    {[@expl:as_ref requires] ptr'0 = ptr own}
    any [ return (result: Int32.t) -> {result = val' own} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec wrong_ptr_own_permission (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = new {(1: Int32.t)} (fun (_ret: tuple) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'2 _2} s1
      | s1 = -{resolve'1 _2}- s2
      | s2 = [ &ptr'0 <- _2.f0 ] s3
      | s3 = new {(1: Int32.t)} (fun (_ret: tuple) -> [ &_4 <- _ret ] s4)
      | s4 = bb2 ]
    | bb2 = s0
      [ s0 = [ &perm <- _4.f1 ] s1
      | s1 = {[@expl:type invariant] inv'1 perm} s2
      | s2 = -{resolve'0 perm}- s3
      | s3 = borrow {perm} (fun (_ret: t_PtrOwn) -> [ &_8 <- _ret ] s4)
      | s4 = bb3 ]
    | bb3 = s0 [ s0 = as_ref {ptr'0} {_8} (fun (_ret: Int32.t) -> [ &_5 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & ptr'0: Opaque.ptr = Any.any_l ()
    | & _2: tuple = Any.any_l ()
    | & perm: t_PtrOwn = Any.any_l ()
    | & _4: tuple = Any.any_l ()
    | & _5: Int32.t = Any.any_l ()
    | & _8: t_PtrOwn = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
