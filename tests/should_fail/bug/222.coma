module M_trait_A__is_true
  use mach.int.Int
  
  constant mktrue_Self : int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  function is_true_Self : ()
  
  goal vc_is_true_Self: [@expl:is_true ensures] mktrue_Self <= 10
end
module M_uses_invariant
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  type t_Option_T = None | Some t_T
  
  type t_Once_T = { f0: t_Option_T }
  
  predicate inv_T (_1: t_T)
  
  predicate inv_Option_T (_1: t_Option_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Option_T [inv_Option_T x]. inv_Option_T x
      = match x with
        | None -> true
        | Some f0'0 -> inv_T f0'0
        end
  
  predicate invariant_ref_Option_T [@inline:trivial] (self: MutBorrow.t t_Option_T) =
    inv_Option_T self.current /\ inv_Option_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Option_T
  
  predicate inv_ref_Option_T [@inline:trivial] (_1: MutBorrow.t t_Option_T) = invariant_ref_Option_T _1
  
  meta "rewrite_def" predicate inv_ref_Option_T
  
  let rec take_T (self_: MutBorrow.t t_Option_T) (return (x: t_Option_T)) =
    {[@expl:take 'self_' type invariant] inv_ref_Option_T self_}
    any
    [ return (result: t_Option_T) -> {inv_Option_T result}
      {result = self_.current /\ self_.final = None}
      (! return {result}) ]
  
  predicate resolve_T (_1: t_T)
  
  predicate resolve_Option_T (_1: t_Option_T)
  
  axiom resolve_axiom [@rewrite]: forall x: t_Option_T [resolve_Option_T x]. resolve_Option_T x
      = match x with
        | None -> true
        | Some x0 -> resolve_T x0
        end
  
  predicate inv_Once_T (_1: t_Once_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_Once_T [inv_Once_T x]. inv_Once_T x = inv_Option_T x.f0
  
  predicate invariant_ref_Once_T [@inline:trivial] (self: MutBorrow.t t_Once_T) =
    inv_Once_T self.current /\ inv_Once_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Once_T
  
  predicate inv_ref_Once_T [@inline:trivial] (_1: MutBorrow.t t_Once_T) = invariant_ref_Once_T _1
  
  meta "rewrite_def" predicate inv_ref_Once_T
  
  predicate resolve_ref_Once_T [@inline:trivial] (_1: MutBorrow.t t_Once_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Once_T
  
  predicate invariant_Once_T (self: t_Once_T) = true
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec uses_invariant_T (x: MutBorrow.t t_Once_T) (return (x'0: ())) =
    {[@expl:uses_invariant 'x' type invariant] inv_ref_Once_T x}
    {[@expl:uses_invariant requires] invariant_Once_T x.current}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_Option_T x.current.f0}
        MutBorrow.borrow_final <t_Option_T> {x.current.f0} {MutBorrow.inherit_id (MutBorrow.get_id x) 1}
          (fun (_ret: MutBorrow.t t_Option_T) ->
            [ &_5 <- _ret ] -{inv_Option_T _ret.final}-
            [ &x <- { x with current = { f0 = _ret.final } } ] s1)
      | s1 = take_T {_5} (fun (_ret: t_Option_T) -> [ &_4 <- _ret ] s2)
      | s2 = {[@expl:type invariant] inv_Option_T _4} s3
      | s3 = -{resolve_Option_T _4}- s4
      | s4 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv_ref_Once_T x} s1 | s1 = -{resolve_ref_Once_T x}- s2 | s2 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & x: MutBorrow.t t_Once_T = x
    | & _4: t_Option_T = Any.any_l ()
    | & _5: MutBorrow.t t_Option_T = Any.any_l () ])
    [ return (result: ()) -> {[@expl:uses_invariant ensures] invariant_Once_T x.final} (! return {result}) ]
end
