module M_make_vec_of_size
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Vec_bool_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_bool_Global (self: t_Vec_bool_Global) : Seq.seq bool
  
  axiom view_Vec_bool_Global_spec: forall self: t_Vec_bool_Global. Seq.length (view_Vec_bool_Global self)
      <= UInt64.t'int const_MAX
  
  let rec new_bool (return (x: t_Vec_bool_Global)) = any
    [ return (result: t_Vec_bool_Global) -> {Seq.length (view_Vec_bool_Global result) = 0} (! return {result}) ]
  
  type t_Ordering = Less | Equal | Greater
  
  function cmp_log_usize (self: UInt64.t) (o: UInt64.t) : t_Ordering = if UInt64.lt self o then
      Less
    else
      if self = o then Equal else Greater
  
  
  function eq_cmp_usize (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_usize_spec: forall x: UInt64.t, y: UInt64.t. (x = y) = (cmp_log_usize x y = Equal)
  
  function antisym2_usize (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_usize_spec: forall x: UInt64.t, y: UInt64.t. cmp_log_usize x y = Greater -> cmp_log_usize y x = Less
  
  function antisym1_usize (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_usize_spec: forall x: UInt64.t, y: UInt64.t. cmp_log_usize x y = Less -> cmp_log_usize y x = Greater
  
  function trans_usize (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_usize_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. cmp_log_usize x y = o
      -> cmp_log_usize y z = o -> cmp_log_usize x z = o
  
  function refl_usize (x: UInt64.t) : ()
  
  axiom refl_usize_spec: forall x: UInt64.t. cmp_log_usize x x = Equal
  
  function cmp_gt_log_usize (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_usize_spec: forall x: UInt64.t, y: UInt64.t. UInt64.gt x y = (cmp_log_usize x y = Greater)
  
  function cmp_ge_log_usize (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_usize_spec: forall x: UInt64.t, y: UInt64.t. UInt64.ge x y = (cmp_log_usize x y <> Less)
  
  function cmp_lt_log_usize (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_usize_spec: forall x: UInt64.t, y: UInt64.t. UInt64.lt x y = (cmp_log_usize x y = Less)
  
  function cmp_le_log_usize (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_usize_spec: forall x: UInt64.t, y: UInt64.t. UInt64.le x y = (cmp_log_usize x y <> Greater)
  
  let rec push_bool (self_: MutBorrow.t t_Vec_bool_Global) (v: bool) (return (x: ())) = any
    [ return (result: ()) -> {view_Vec_bool_Global self_.final = Seq.snoc (view_Vec_bool_Global self_.current) v}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec make_vec_of_size (n: UInt64.t) (return (x: t_Vec_bool_Global)) = (! bb0
    [ bb0 = s0 [ s0 = new_bool (fun (_ret: t_Vec_bool_Global) -> [ &out <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &i <- (0: UInt64.t) ] s1 | s1 = bb2 ]
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] UInt64.le (0: UInt64.t) i /\ UInt64.le i n}
        (! s0)
        [ s0 = bb3 ]
        [ bb3 = s0
          [ s0 = [ &_10 <- UInt64.le i n ] s1 | s1 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb4) ] ]
        | bb4 = s0
          [ s0 = MutBorrow.borrow_mut <t_Vec_bool_Global> {out}
              (fun (_ret: MutBorrow.t t_Vec_bool_Global) -> [ &_14 <- _ret ] [ &out <- _ret.final ] s1)
          | s1 = push_bool {_14} {false} (fun (_ret: ()) -> [ &_13 <- _ret ] s2)
          | s2 = bb5 ]
        | bb5 = s0 [ s0 = UInt64.add {i} {(1: UInt64.t)} (fun (_ret: UInt64.t) -> [ &i <- _ret ] s1) | s1 = bb2 ] ] ]
    | bb6 = s0 [ s0 = [ &_0 <- out ] s1 | s1 = bb7 ]
    | bb7 = return {_0} ]
    [ & _0: t_Vec_bool_Global = Any.any_l ()
    | & n: UInt64.t = n
    | & out: t_Vec_bool_Global = Any.any_l ()
    | & i: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _13: () = Any.any_l ()
    | & _14: MutBorrow.t t_Vec_bool_Global = Any.any_l () ])
    [ return (result: t_Vec_bool_Global) -> {[@expl:make_vec_of_size ensures] Seq.length (view_Vec_bool_Global result)
      = UInt64.t'int n}
      (! return {result}) ]
end
