module M_subregion__list_reversal_h [#"subregion.rs" 4 0 4 37]
  let%span ssubregion = "subregion.rs" 5 16 5 17
  let%span ssubregion'0 = "subregion.rs" 6 16 6 20
  let%span ssubregion'1 = "subregion.rs" 7 15 7 16
  let%span ssubregion'2 = "subregion.rs" 8 22 8 27
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec list_reversal_h [#"subregion.rs" 4 0 4 37] (l: UInt64.t) (return' (x: UInt64.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &r <- [%#ssubregion] (0: UInt64.t) ] s1 | s1 = bb1 ]
    | bb1 = bb1'0
      [ bb1'0 = {[@expl:loop invariant] [%#ssubregion'0] true}
        (! s0)
        [ s0 = bb2 ]
        [ bb2 = s0
          [ s0 = [ &_8 <- l'0 <> ([%#ssubregion'1] (0: UInt64.t)) ] s1
          | s1 = any [ br0 -> {_8 = false} (! bb4) | br1 -> {_8} (! bb3) ] ]
        | bb3 = s0
          [ s0 = {[@expl:assertion] [%#ssubregion'2] false} s1
          | s1 = [ &x <- r ] s2
          | s2 = [ &tmp <- l'0 ] s3
          | s3 = [ &r <- tmp ] s4
          | s4 = bb1'0 ] ] ]
    | bb4 = s0 [ s0 = [ &_0 <- r ] s1 | s1 = return''0 {_0} ] ]
    [ & _0: UInt64.t = Any.any_l ()
    | & l'0: UInt64.t = l
    | & r: UInt64.t = Any.any_l ()
    | & _8: bool = Any.any_l ()
    | & x: UInt64.t = Any.any_l ()
    | & tmp: UInt64.t = Any.any_l () ]) [ return''0 (result: UInt64.t) -> (! return' {result}) ]
end
