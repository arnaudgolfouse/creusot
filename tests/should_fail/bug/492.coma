module M_492__reborrow_tuple
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_1: t_T)
  
  type tuple = { f0: MutBorrow.t t_T; f1: UInt32.t }
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_T) = inv self.current /\ inv self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t t_T) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t t_T) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate inv'1 (_1: tuple)
  
  axiom inv_axiom'0 [@rewrite]: forall x: tuple [inv'1 x]. inv'1 x = (let {f0 = x0; f1 = x1} = x in inv'0 x0)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec reborrow_tuple (x: MutBorrow.t t_T) (return (x'0: tuple)) =
    {[@expl:reborrow_tuple 'x' type invariant] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv x.current}
        MutBorrow.borrow_final <t_T> {x.current} {MutBorrow.get_id x}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_3 <- _ret ] -{inv _ret.final}-
            [ &x <- { x with current = _ret.final } ] s1)
      | s1 = [ &_0 <- { f0 = _3; f1 = (32: UInt32.t) } ] s2
      | s2 = {[@expl:type invariant] inv'0 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 = return {_0} ] ]
    [ & _0: tuple = Any.any_l () | & x: MutBorrow.t t_T = x | & _3: MutBorrow.t t_T = Any.any_l () ])
    [ return (result: tuple) -> {[@expl:reborrow_tuple result type invariant] inv'1 result}
      {[@expl:reborrow_tuple ensures] result.f0.current = x.current}
      (! return {result}) ]
end
module M_492__test
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type tuple = { f0: MutBorrow.t Int32.t; f1: UInt32.t }
  
  let rec reborrow_tuple (x: MutBorrow.t Int32.t) (return (x'0: tuple)) = any
    [ return (result: tuple) -> {result.f0.current = x.current} (! return {result}) ]
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t Int32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t Int32.t) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &x <- (5: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_6 <- _ret ] [ &x <- _ret.final ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t Int32.t) -> [ &_5 <- _ret ] [ &_6 <- { _6 with current = _ret.final } ] s3)
      | s3 = reborrow_tuple {_5} (fun (_ret: tuple) -> [ &_4 <- _ret ] s4)
      | s4 = bb1 ]
    | bb1 = s0
      [ s0 = [ &res <- _4.f0 ] s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = {[@expl:assertion] res.final = (5: Int32.t)} s3
      | s3 = [ &res <- { res with current = (10: Int32.t) } ] s4
      | s4 = -{resolve'0 res}- s5
      | s5 = return {_0} ] ]
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & res: MutBorrow.t Int32.t = Any.any_l ()
    | & _4: tuple = Any.any_l ()
    | & _5: MutBorrow.t Int32.t = Any.any_l ()
    | & _6: MutBorrow.t Int32.t = Any.any_l () ])
    [ return (result: ()) -> {[@expl:test ensures] false} (! return {result}) ]
end
