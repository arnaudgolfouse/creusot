module M_878__test [#"878.rs" 5 0 5 13]
  let%span s878 = "878.rs" 6 21 6 22
  let%span s878'0 = "878.rs" 6 24 6 25
  let%span s878'1 = "878.rs" 6 27 6 28
  let%span s878'2 = "878.rs" 6 30 6 31
  let%span s878'3 = "878.rs" 7 4 7 13
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 356 18 356 35
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 41
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 31 14 31 42
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 22 8 22 22
  
  use creusot.slice.Slice64
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec] Seq.length (view self) <= UInt64.t'int v_MAX
  
  function view'0 (self: Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec'0: forall self: Slice64.slice Int32.t. [%#sslice'0] Seq.length (view'0 self) <= UInt64.t'int v_MAX
  
  axiom view_spec'1: forall self: Slice64.slice Int32.t. [%#sslice'1] view'0 self = Slice64.id self
  
  function view'1 (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#sboxed] view'0 self
  
  let rec into_vec (self_:Slice64.slice Int32.t) (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#sslice] view result = view'1 self_} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test[#"878.rs" 5 0 5 13] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.Slice64.elts 0 = ([%#s878] (1: Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 1 = ([%#s878'0] (2: Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 2 = ([%#s878'1] (2: Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 3 = ([%#s878'2] (3: Int32.t)) /\ Seq.length __arr_temp.Slice64.elts = 4}-
           [ &_4 <- __arr_temp ] 
          s1) ]
      
      | s1 = bb2 ]
    
    | bb2 = s0 [ s0 = into_vec {_4} (fun (_ret:t_Vec) ->  [ &v <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = {[%#s878'3] false} any ]
     [ & _0: () = Any.any_l () | & v: t_Vec = Any.any_l () | & _4: Slice64.array Int32.t = Any.any_l () ] )
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_878__test2 [#"878.rs" 20 0 20 14]
  let%span s878 = "878.rs" 21 19 21 20
  let%span s878'0 = "878.rs" 22 13 22 25
  let%span s878'1 = "878.rs" 16 8 16 22
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 357 34 357 39
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 356 18 356 35
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 41
  let%span sslice'2 = "../../../creusot-contracts/src/std/slice.rs" 31 14 31 42
  let%span sslice'3 = "../../../creusot-contracts/src/std/slice.rs" 20 20 20 30
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 63 20 63 41
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 22 8 22 22
  let%span sboxed'0 = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 683 20 683 91
  
  use creusot.int.UInt32
  use creusot.slice.Slice64
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_S  =
    { t_S__0: UInt32.t }
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  predicate invariant' [#"878.rs" 15 4 15 30] (self: t_S) =
    [%#s878'1] self.t_S__0 = (0: UInt32.t)
  
  predicate inv (_0: t_S)
  
  axiom inv_axiom [@rewrite]: forall x: t_S [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_S__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: t_S) =
    [%#sboxed'0] inv self
  
  predicate inv'0 (_0: t_S)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_S [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 (self: Seq.seq t_S) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self  -> inv'0 (Seq.get self i)
  
  predicate inv'1 (_0: Seq.seq t_S)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Seq.seq t_S [inv'1 x]. inv'1 x = invariant''1 x
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: Slice64.slice t_S) : Seq.seq t_S
  
  axiom view_spec: forall self: Slice64.slice t_S. [%#sslice'1] Seq.length (view self) <= UInt64.t'int v_MAX
  
  axiom view_spec'0: forall self: Slice64.slice t_S. [%#sslice'2] view self = Slice64.id self
  
  predicate invariant''2 (self: Slice64.slice t_S) =
    [%#sslice'3] inv'1 (view self)
  
  predicate inv'2 (_0: Slice64.slice t_S)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Slice64.slice t_S [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate invariant''3 (self: Slice64.slice t_S) =
    [%#sboxed'0] inv'2 self
  
  predicate inv'3 (_0: Slice64.slice t_S)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.slice t_S [inv'3 x]. inv'3 x = invariant''3 x
  
  function view'0 (self: t_Vec) : Seq.seq t_S
  
  axiom view_spec'1: forall self: t_Vec. [%#svec] Seq.length (view'0 self) <= UInt64.t'int v_MAX
  
  predicate invariant''4 (self: t_Vec) =
    [%#svec'0] inv'1 (view'0 self)
  
  predicate inv'4 (_0: t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Vec [inv'4 x]. inv'4 x = invariant''4 x
  
  function view'1 (self: Slice64.slice t_S) : Seq.seq t_S =
    [%#sboxed] view self
  
  let rec into_vec (self_:Slice64.slice t_S) (return'  (x:t_Vec))= {[@expl:into_vec 'self_' type invariant] [%#sslice] inv'3 self_}
    any [ return''0 (result:t_Vec)-> {inv'4 result} {[%#sslice'0] view'0 result = view'1 self_} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test2[#"878.rs" 20 0 20 14] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- { t_S__0 = ([%#s878] (0: UInt32.t)) } ] s1
      | s1 = any
        [ any_ (__arr_temp:Slice64.array t_S)-> (! -{Seq.get __arr_temp.Slice64.elts 0 = _5
          /\ Seq.length __arr_temp.Slice64.elts = 1}-
           [ &_4 <- __arr_temp ] 
          s2) ]
      
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 = into_vec {_4} (fun (_ret:t_Vec) ->  [ &v <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = {[%#s878'0] false} any ]
    
    [ & _0: () = Any.any_l ()
    | & v: t_Vec = Any.any_l ()
    | & _4: Slice64.array t_S = Any.any_l ()
    | & _5: t_S = Any.any_l ()
    | & b: bool = Any.any_l ()
    | & _7: bool = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
module M_878__test3 [#"878.rs" 26 0 26 14]
  let%span s878 = "878.rs" 27 19 27 20
  let%span s878'0 = "878.rs" 28 20 28 35
  let%span s878'1 = "878.rs" 16 8 16 22
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 357 34 357 39
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 356 18 356 35
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 41
  let%span sslice'2 = "../../../creusot-contracts/src/std/slice.rs" 31 14 31 42
  let%span sslice'3 = "../../../creusot-contracts/src/std/slice.rs" 20 20 20 30
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 63 20 63 41
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 22 8 22 22
  let%span sboxed'0 = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sseq = "../../../creusot-contracts/src/logic/seq.rs" 683 20 683 91
  
  use creusot.int.UInt32
  use creusot.slice.Slice64
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_S  =
    { t_S__0: UInt32.t }
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  predicate invariant' [#"878.rs" 15 4 15 30] (self: t_S) =
    [%#s878'1] self.t_S__0 = (0: UInt32.t)
  
  predicate inv (_0: t_S)
  
  axiom inv_axiom [@rewrite]: forall x: t_S [inv x]. inv x
  = (invariant' x
  /\ match x with
    | {t_S__0 = a_0} -> true
    end)
  
  predicate invariant''0 (self: t_S) =
    [%#sboxed'0] inv self
  
  predicate inv'0 (_0: t_S)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_S [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 (self: Seq.seq t_S) =
    [%#sseq] forall i: int. 0 <= i /\ i < Seq.length self  -> inv'0 (Seq.get self i)
  
  predicate inv'1 (_0: Seq.seq t_S)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Seq.seq t_S [inv'1 x]. inv'1 x = invariant''1 x
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: Slice64.slice t_S) : Seq.seq t_S
  
  axiom view_spec: forall self: Slice64.slice t_S. [%#sslice'1] Seq.length (view self) <= UInt64.t'int v_MAX
  
  axiom view_spec'0: forall self: Slice64.slice t_S. [%#sslice'2] view self = Slice64.id self
  
  predicate invariant''2 (self: Slice64.slice t_S) =
    [%#sslice'3] inv'1 (view self)
  
  predicate inv'2 (_0: Slice64.slice t_S)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Slice64.slice t_S [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate invariant''3 (self: Slice64.slice t_S) =
    [%#sboxed'0] inv'2 self
  
  predicate inv'3 (_0: Slice64.slice t_S)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.slice t_S [inv'3 x]. inv'3 x = invariant''3 x
  
  function view'0 (self: t_Vec) : Seq.seq t_S
  
  axiom view_spec'1: forall self: t_Vec. [%#svec] Seq.length (view'0 self) <= UInt64.t'int v_MAX
  
  predicate invariant''4 (self: t_Vec) =
    [%#svec'0] inv'1 (view'0 self)
  
  predicate inv'4 (_0: t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Vec [inv'4 x]. inv'4 x = invariant''4 x
  
  function view'1 (self: Slice64.slice t_S) : Seq.seq t_S =
    [%#sboxed] view self
  
  let rec into_vec (self_:Slice64.slice t_S) (return'  (x:t_Vec))= {[@expl:into_vec 'self_' type invariant] [%#sslice] inv'3 self_}
    any [ return''0 (result:t_Vec)-> {inv'4 result} {[%#sslice'0] view'0 result = view'1 self_} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test3[#"878.rs" 26 0 26 14] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- { t_S__0 = ([%#s878] (0: UInt32.t)) } ] s1
      | s1 = any
        [ any_ (__arr_temp:Slice64.array t_S)-> (! -{Seq.get __arr_temp.Slice64.elts 0 = _5
          /\ Seq.length __arr_temp.Slice64.elts = 1}-
           [ &_4 <- __arr_temp ] 
          s2) ]
      
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 = into_vec {_4} (fun (_ret:t_Vec) ->  [ &v <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#s878'0] (Seq.get (view'0 v) 0).t_S__0 = (0: UInt32.t)} s1 | s1 = bb4 ] 
    | bb4 = return''0 {_0} ]
    
    [ & _0: () = Any.any_l ()
    | & v: t_Vec = Any.any_l ()
    | & _4: Slice64.array t_S = Any.any_l ()
    | & _5: t_S = Any.any_l () ]
    ) [ return''0 (result:())-> (! return' {result}) ] 
end
