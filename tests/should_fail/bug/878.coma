module M_test
  use creusot.slice.Slice64
  use creusot.int.Int32
  use seq.Seq
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Vec_i32_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_i32_Global (self: t_Vec_i32_Global) : Seq.seq Int32.t
  
  axiom view_Vec_i32_Global_spec: forall self: t_Vec_i32_Global. Seq.length (view_Vec_i32_Global self)
      <= UInt64.t'int const_MAX
  
  function view_Box_slice_i32_Global [@inline:trivial] (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    Slice64.view self
  
  meta "rewrite_def" function view_Box_slice_i32_Global
  
  let rec into_vec_i32 (self_: Slice64.slice Int32.t) (return (x: t_Vec_i32_Global)) = any
    [ return (result: t_Vec_i32_Global) -> {view_Vec_i32_Global result = view_Box_slice_i32_Global self_}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp: Slice64.array Int32.t) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = (1: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 1 = (2: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 2 = (2: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 3 = (3: Int32.t) /\ Seq.length __arr_temp.Slice64.elts = 4}-
          [ &_4 <- __arr_temp ] s1) ]
      | s1 = bb2 ]
    | bb2 = s0 [ s0 = into_vec_i32 {_4} (fun (_ret: t_Vec_i32_Global) -> [ &v <- _ret ] s1) | s1 = bb3 ]
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l () | & v: t_Vec_i32_Global = Any.any_l () | & _4: Slice64.array Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_test2
  use creusot.int.UInt32
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_S = { f0: UInt32.t }
  
  type t_Vec_S_Global
  
  predicate invariant_S (self: t_S) = self.f0 = (0: UInt32.t)
  
  predicate inv_S (_1: t_S)
  
  axiom inv_axiom [@rewrite]: forall x: t_S [inv_S x]. inv_S x = invariant_S x
  
  predicate invariant_Box_S_Global (self: t_S) = inv_S self
  
  predicate inv_Box_S_Global [@inline:trivial] (_1: t_S) = invariant_Box_S_Global _1
  
  meta "rewrite_def" predicate inv_Box_S_Global
  
  predicate invariant_Seq_S [@inline:trivial] (self: Seq.seq t_S) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_S_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_S
  
  predicate inv_Seq_S [@inline:trivial] (_1: Seq.seq t_S) = invariant_Seq_S _1
  
  meta "rewrite_def" predicate inv_Seq_S
  
  predicate invariant_slice_S (self: Slice64.slice t_S) = inv_Seq_S (Slice64.view self)
  
  predicate inv_slice_S [@inline:trivial] (_1: Slice64.slice t_S) = invariant_slice_S _1
  
  meta "rewrite_def" predicate inv_slice_S
  
  predicate invariant_Box_slice_S_Global (self: Slice64.slice t_S) = inv_slice_S self
  
  predicate inv_Box_slice_S_Global [@inline:trivial] (_1: Slice64.slice t_S) = invariant_Box_slice_S_Global _1
  
  meta "rewrite_def" predicate inv_Box_slice_S_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_S_Global (self: t_Vec_S_Global) : Seq.seq t_S
  
  axiom view_Vec_S_Global_spec: forall self: t_Vec_S_Global. Seq.length (view_Vec_S_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_S_Global (self: t_Vec_S_Global) = inv_Seq_S (view_Vec_S_Global self)
  
  predicate inv_Vec_S_Global (_1: t_Vec_S_Global)
  
  axiom inv_axiom'0: forall x: t_Vec_S_Global [inv_Vec_S_Global x]. inv_Vec_S_Global x -> invariant_Vec_S_Global x
  
  function view_Box_slice_S_Global [@inline:trivial] (self: Slice64.slice t_S) : Seq.seq t_S = Slice64.view self
  
  meta "rewrite_def" function view_Box_slice_S_Global
  
  let rec into_vec_S (self_: Slice64.slice t_S) (return (x: t_Vec_S_Global)) =
    {[@expl:into_vec 'self_' type invariant] inv_Box_slice_S_Global self_}
    any
    [ return (result: t_Vec_S_Global) -> {inv_Vec_S_Global result}
      {view_Vec_S_Global result = view_Box_slice_S_Global self_}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- { f0 = (0: UInt32.t) } ] s1
      | s1 = any
        [ any_ (__arr_temp: Slice64.array t_S) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = _5
          /\ Seq.length __arr_temp.Slice64.elts = 1}-
          [ &_4 <- __arr_temp ] s2) ]
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = into_vec_S {_4} (fun (_ret: t_Vec_S_Global) -> [ &v <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv_Vec_S_Global v} s1 | s1 = {false} any ] ]
    [ & _0: () = Any.any_l ()
    | & v: t_Vec_S_Global = Any.any_l ()
    | & _4: Slice64.array t_S = Any.any_l ()
    | & _5: t_S = Any.any_l ()
    | & b: bool = Any.any_l ()
    | & _7: bool = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_test3
  use creusot.int.UInt32
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_S = { f0: UInt32.t }
  
  type t_Vec_S_Global
  
  predicate invariant_S (self: t_S) = self.f0 = (0: UInt32.t)
  
  predicate inv_S (_1: t_S)
  
  axiom inv_axiom [@rewrite]: forall x: t_S [inv_S x]. inv_S x = invariant_S x
  
  predicate invariant_Box_S_Global (self: t_S) = inv_S self
  
  predicate inv_Box_S_Global [@inline:trivial] (_1: t_S) = invariant_Box_S_Global _1
  
  meta "rewrite_def" predicate inv_Box_S_Global
  
  predicate invariant_Seq_S [@inline:trivial] (self: Seq.seq t_S) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_S_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_S
  
  predicate inv_Seq_S [@inline:trivial] (_1: Seq.seq t_S) = invariant_Seq_S _1
  
  meta "rewrite_def" predicate inv_Seq_S
  
  predicate invariant_slice_S (self: Slice64.slice t_S) = inv_Seq_S (Slice64.view self)
  
  predicate inv_slice_S [@inline:trivial] (_1: Slice64.slice t_S) = invariant_slice_S _1
  
  meta "rewrite_def" predicate inv_slice_S
  
  predicate invariant_Box_slice_S_Global (self: Slice64.slice t_S) = inv_slice_S self
  
  predicate inv_Box_slice_S_Global [@inline:trivial] (_1: Slice64.slice t_S) = invariant_Box_slice_S_Global _1
  
  meta "rewrite_def" predicate inv_Box_slice_S_Global
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view_Vec_S_Global (self: t_Vec_S_Global) : Seq.seq t_S
  
  axiom view_Vec_S_Global_spec: forall self: t_Vec_S_Global. Seq.length (view_Vec_S_Global self)
      <= UInt64.t'int const_MAX
  
  predicate invariant_Vec_S_Global (self: t_Vec_S_Global) = inv_Seq_S (view_Vec_S_Global self)
  
  predicate inv_Vec_S_Global (_1: t_Vec_S_Global)
  
  axiom inv_axiom'0: forall x: t_Vec_S_Global [inv_Vec_S_Global x]. inv_Vec_S_Global x -> invariant_Vec_S_Global x
  
  function view_Box_slice_S_Global [@inline:trivial] (self: Slice64.slice t_S) : Seq.seq t_S = Slice64.view self
  
  meta "rewrite_def" function view_Box_slice_S_Global
  
  let rec into_vec_S (self_: Slice64.slice t_S) (return (x: t_Vec_S_Global)) =
    {[@expl:into_vec 'self_' type invariant] inv_Box_slice_S_Global self_}
    any
    [ return (result: t_Vec_S_Global) -> {inv_Vec_S_Global result}
      {view_Vec_S_Global result = view_Box_slice_S_Global self_}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test3 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- { f0 = (0: UInt32.t) } ] s1
      | s1 = any
        [ any_ (__arr_temp: Slice64.array t_S) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = _5
          /\ Seq.length __arr_temp.Slice64.elts = 1}-
          [ &_4 <- __arr_temp ] s2) ]
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = into_vec_S {_4} (fun (_ret: t_Vec_S_Global) -> [ &v <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv_Vec_S_Global v} s1
      | s1 = {[@expl:assertion] (Seq.get (view_Vec_S_Global v) 0).f0 = (0: UInt32.t)} s2
      | s2 = bb4 ]
    | bb4 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & v: t_Vec_S_Global = Any.any_l ()
    | & _4: Slice64.array t_S = Any.any_l ()
    | & _5: t_S = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
