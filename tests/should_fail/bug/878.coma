module M_878__test
  use creusot.slice.Slice64
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  function view'0 [@inline:trivial] (self: Slice64.slice Int32.t) : Seq.seq Int32.t = Slice64.view self
  
  meta "rewrite_def" function view'0
  
  let rec into_vec (self_: Slice64.slice Int32.t) (return' (x: t_Vec)) = any
    [ return''0 (result: t_Vec) -> {view result = view'0 self_} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp: Slice64.array Int32.t) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = (1: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 1 = (2: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 2 = (2: Int32.t)
          /\ Seq.get __arr_temp.Slice64.elts 3 = (3: Int32.t) /\ Seq.length __arr_temp.Slice64.elts = 4}-
          [ &_4 <- __arr_temp ] s1) ]
      | s1 = bb2 ]
    | bb2 = s0 [ s0 = into_vec {_4} (fun (_ret: t_Vec) -> [ &v <- _ret ] s1) | s1 = bb3 ]
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l () | & v: t_Vec = Any.any_l () | & _4: Slice64.array Int32.t = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_878__test2
  use creusot.int.UInt32
  use creusot.slice.Slice64
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_S = { t_S__0: UInt32.t }
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  predicate invariant' (self: t_S) = self.t_S__0 = (0: UInt32.t)
  
  predicate inv (_0: t_S)
  
  axiom inv_axiom [@rewrite]: forall x: t_S [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_S__0 = a_0} -> true
        end)
  
  predicate invariant''0 (self: t_S) = inv self
  
  predicate inv'0 (_0: t_S)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_S [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_S) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_S)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Seq.seq t_S [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.slice t_S) = inv'1 (Slice64.view self)
  
  predicate inv'2 (_0: Slice64.slice t_S)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Slice64.slice t_S [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate invariant''3 (self: Slice64.slice t_S) = inv'2 self
  
  predicate inv'3 (_0: Slice64.slice t_S)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.slice t_S [inv'3 x]. inv'3 x = invariant''3 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_S
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''4 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'4 (_0: t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Vec [inv'4 x]. inv'4 x = invariant''4 x
  
  function view'0 [@inline:trivial] (self: Slice64.slice t_S) : Seq.seq t_S = Slice64.view self
  
  meta "rewrite_def" function view'0
  
  let rec into_vec (self_: Slice64.slice t_S) (return' (x: t_Vec)) =
    {[@expl:into_vec 'self_' type invariant] inv'3 self_}
    any [ return''0 (result: t_Vec) -> {inv'4 result} {view result = view'0 self_} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test2 (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- { t_S__0 = (0: UInt32.t) } ] s1
      | s1 = any
        [ any_ (__arr_temp: Slice64.array t_S) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = _5
          /\ Seq.length __arr_temp.Slice64.elts = 1}-
          [ &_4 <- __arr_temp ] s2) ]
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = into_vec {_4} (fun (_ret: t_Vec) -> [ &v <- _ret ] s1) | s1 = bb3 ]
    | bb3 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & v: t_Vec = Any.any_l ()
    | & _4: Slice64.array t_S = Any.any_l ()
    | & _5: t_S = Any.any_l ()
    | & b: bool = Any.any_l ()
    | & _7: bool = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_878__test3
  use creusot.int.UInt32
  use creusot.slice.Slice64
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_S = { t_S__0: UInt32.t }
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  predicate invariant' (self: t_S) = self.t_S__0 = (0: UInt32.t)
  
  predicate inv (_0: t_S)
  
  axiom inv_axiom [@rewrite]: forall x: t_S [inv x]. inv x
      = (invariant' x
      /\ match x with
        | {t_S__0 = a_0} -> true
        end)
  
  predicate invariant''0 (self: t_S) = inv self
  
  predicate inv'0 (_0: t_S)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_S [inv'0 x]. inv'0 x = invariant''0 x
  
  predicate invariant''1 [@inline:trivial] (self: Seq.seq t_S) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''1
  
  predicate inv'1 (_0: Seq.seq t_S)
  
  axiom inv_axiom'1 [@rewrite]: forall x: Seq.seq t_S [inv'1 x]. inv'1 x = invariant''1 x
  
  predicate invariant''2 (self: Slice64.slice t_S) = inv'1 (Slice64.view self)
  
  predicate inv'2 (_0: Slice64.slice t_S)
  
  axiom inv_axiom'2 [@rewrite]: forall x: Slice64.slice t_S [inv'2 x]. inv'2 x = invariant''2 x
  
  predicate invariant''3 (self: Slice64.slice t_S) = inv'2 self
  
  predicate inv'3 (_0: Slice64.slice t_S)
  
  axiom inv_axiom'3 [@rewrite]: forall x: Slice64.slice t_S [inv'3 x]. inv'3 x = invariant''3 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_S
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''4 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'4 (_0: t_Vec)
  
  axiom inv_axiom'4 [@rewrite]: forall x: t_Vec [inv'4 x]. inv'4 x = invariant''4 x
  
  function view'0 [@inline:trivial] (self: Slice64.slice t_S) : Seq.seq t_S = Slice64.view self
  
  meta "rewrite_def" function view'0
  
  let rec into_vec (self_: Slice64.slice t_S) (return' (x: t_Vec)) =
    {[@expl:into_vec 'self_' type invariant] inv'3 self_}
    any [ return''0 (result: t_Vec) -> {inv'4 result} {view result = view'0 self_} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test3 (return' (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_5 <- { t_S__0 = (0: UInt32.t) } ] s1
      | s1 = any
        [ any_ (__arr_temp: Slice64.array t_S) -> (! -{Seq.get __arr_temp.Slice64.elts 0 = _5
          /\ Seq.length __arr_temp.Slice64.elts = 1}-
          [ &_4 <- __arr_temp ] s2) ]
      | s2 = bb2 ]
    | bb2 = s0 [ s0 = into_vec {_4} (fun (_ret: t_Vec) -> [ &v <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = {[@expl:assertion] (Seq.get (view v) 0).t_S__0 = (0: UInt32.t)} s1 | s1 = bb4 ]
    | bb4 = return''0 {_0} ]
    [ & _0: () = Any.any_l ()
    | & v: t_Vec = Any.any_l ()
    | & _4: Slice64.array t_S = Any.any_l ()
    | & _5: t_S = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
