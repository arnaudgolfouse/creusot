module M_692__incorrect
  use creusot.prelude.Any
  
  type t_B
  
  predicate inv (_1: t_B)
  
  predicate resolve (_1: t_B)
  
  type t_C
  
  predicate inv'0 (_1: t_C)
  
  predicate resolve'0 (_1: t_C)
  
  predicate precondition (self: t_C) (args: ())
  
  predicate precondition'0 (self: t_B) (args: bool)
  
  predicate postcondition_once (self: t_C) (args: ()) (result: bool)
  
  predicate postcondition_mut (self: t_C) (args: ()) (result_state: t_C) (result: bool)
  
  function fn_mut_once (self: t_C) (args: ()) (res: bool) : ()
  
  axiom fn_mut_once_spec: forall self: t_C, args: (), res: bool. postcondition_once self args res
      = (exists res_state: t_C. postcondition_mut self args res_state res /\ resolve'0 res_state)
  
  predicate hist_inv (self: t_C) (result_state: t_C)
  
  function hist_inv_trans (self: t_C) (b: t_C) (c: t_C) : ()
  
  axiom hist_inv_trans_spec: forall self: t_C, b: t_C, c: t_C. hist_inv self b -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: t_C) : ()
  
  axiom hist_inv_refl_spec: forall self: t_C. hist_inv self self
  
  function postcondition_mut_hist_inv (self: t_C) (args: ()) (res_state: t_C) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: t_C, args: (), res_state: t_C, res: bool. postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  function fn_hist_inv (self: t_C) (res_state: t_C) : ()
  
  axiom fn_hist_inv_spec: forall self: t_C, res_state: t_C. hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: t_C) (args: ()) (result: bool)
  
  function fn_once (self: t_C) (args: ()) (res: bool) : ()
  
  axiom fn_once_spec: forall self: t_C, args: (), res: bool. postcondition_once self args res
      = (postcondition self args res /\ resolve'0 self)
  
  function fn_mut (self: t_C) (args: ()) (res_state: t_C) (res: bool) : ()
  
  axiom fn_mut_spec: forall self: t_C, args: (), res_state: t_C, res: bool. postcondition_mut self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec incorrect (cond: t_C) (branch: t_B) (return (x: ())) = {[@expl:incorrect 'cond' type invariant] inv'0 cond}
    {[@expl:incorrect 'branch' type invariant] inv branch}
    {[@expl:incorrect requires] precondition cond ()
    /\ (forall b: bool. precondition'0 branch b
      /\ (exists b'0: bool. forall b0: bool. postcondition cond () b0 -> b0 = b'0))}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv branch} s1
      | s1 = -{resolve branch}- s2
      | s2 = {[@expl:type invariant] inv'0 cond} s3
      | s3 = -{resolve'0 cond}- s4
      | s4 = bb2 ]
    | bb2 = return {_0} ] [ & _0: () = Any.any_l () | & cond: t_C = cond | & branch: t_B = branch ])
    [ return (result: ()) -> {[@expl:incorrect ensures] false} (! return {result}) ]
end
module M_692__valid_normal
  use creusot.int.UInt32
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  
  type closure1 = { c0: UInt32.t }
  
  type t_Ordering = C_Less | C_Equal | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering = if UInt32.lt self o then
      C_Less
    else
      if self = o then C_Equal else C_Greater
  
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Greater -> cmp_log y x = C_Less
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. cmp_log x y = C_Less -> cmp_log y x = C_Greater
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. cmp_log x y = o
      -> cmp_log y z = o -> cmp_log x z = o
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. UInt32.le x y = (cmp_log x y <> C_Greater)
  
  let rec closure1 (self: closure1) (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &res <- UInt32.gt self.c0 (7: UInt32.t) ] s1 | s1 = [ &_0 <- res ] s2 | s2 = return {_0} ] ]
    [ & _0: bool = Any.any_l () | & self: closure1 = self | & res: bool = Any.any_l () ])
    [ return (result: bool) -> {[@expl:closure ensures] result = UInt32.gt self.c0 (7: UInt32.t)} (! return {result}) ]
  
  type closure2 = { c0'0: MutBorrow.t UInt32.t }
  
  predicate resolve [@inline:trivial] (self: MutBorrow.t closure2) = self.final = self.current
  
  meta "rewrite_def" predicate resolve
  
  predicate resolve'0 [@inline:trivial] (_1: MutBorrow.t closure2) = resolve _1
  
  meta "rewrite_def" predicate resolve'0
  
  predicate postcondition_once [@inline:trivial] (self: closure2) (args: bool) (result: ()) =
    let b = args in b /\ self.c0'0.final = (2: UInt32.t) \/ not b /\ self.c0'0.final = (1: UInt32.t)
  
  meta "rewrite_def" predicate postcondition_once
  
  predicate resolve'1 [@inline:trivial] (self: MutBorrow.t UInt32.t) = self.final = self.current
  
  meta "rewrite_def" predicate resolve'1
  
  predicate resolve'2 [@inline:trivial] (_1: MutBorrow.t UInt32.t) = resolve'1 _1
  
  meta "rewrite_def" predicate resolve'2
  
  predicate resolve'3 [@inline:trivial] (_1: closure2) = resolve'2 _1.c0'0
  
  meta "rewrite_def" predicate resolve'3
  
  predicate hist_inv [@inline:trivial] (self: closure2) (result_state: closure2) =
    result_state.c0'0.final = self.c0'0.final
  
  meta "rewrite_def" predicate hist_inv
  
  predicate postcondition_mut [@inline:trivial] (self: closure2) (args: bool) (result_state: closure2) (result: ()) =
    let b = args in (b /\ result_state.c0'0.current = (2: UInt32.t)
      \/ not b /\ result_state.c0'0.current = (1: UInt32.t))
    /\ hist_inv self result_state
  
  meta "rewrite_def" predicate postcondition_mut
  
  function fn_mut_once (self: closure2) (args: bool) (res: ()) : ()
  
  axiom fn_mut_once_spec: forall self: closure2, args: bool, res: (). postcondition_once self args res
      = (exists res_state: closure2. postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function hist_inv_trans (self: closure2) (b: closure2) (c: closure2) : ()
  
  axiom hist_inv_trans_spec: forall self: closure2, b: closure2, c: closure2. hist_inv self b
      -> hist_inv b c -> hist_inv self c
  
  function hist_inv_refl (self: closure2) : ()
  
  axiom hist_inv_refl_spec: forall self: closure2. hist_inv self self
  
  function postcondition_mut_hist_inv (self: closure2) (args: bool) (res_state: closure2) (res: ()) : ()
  
  axiom postcondition_mut_hist_inv_spec:
    forall self: closure2, args: bool, res_state: closure2, res: (). postcondition_mut self args res_state res
      -> hist_inv self res_state
  
  let rec closure2 (self: MutBorrow.t closure2) (b: bool) (return (x: ())) = (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ]
    | bb1 = s0 [ s0 = [ &_4 <- (2: UInt32.t) ] s1 | s1 = bb3 ]
    | bb2 = s0 [ s0 = [ &_4 <- (1: UInt32.t) ] s1 | s1 = bb3 ]
    | bb3 = s0
      [ s0 = [ &self <- { self with current = { c0'0 = { self.current.c0'0 with current = _4 } } } ] s1
      | s1 = -{resolve'0 self}- s2
      | s2 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & self: MutBorrow.t closure2 = self | & b: bool = b | & _4: UInt32.t = Any.any_l () ])
    [ return (result: ()) -> {[@expl:closure ensures] b /\ self.final.c0'0.current = (2: UInt32.t)
      \/ not b /\ self.final.c0'0.current = (1: UInt32.t)}
      {[@expl:closure hist_inv post] hist_inv self.current self.final}
      (! return {result}) ]
  
  predicate precondition [@inline:trivial] (self: closure1) (args: ()) = true
  
  meta "rewrite_def" predicate precondition
  
  predicate precondition'0 [@inline:trivial] (self: closure2) (args: bool) = let b = args in true
  
  meta "rewrite_def" predicate precondition'0
  
  predicate postcondition_once'0 [@inline:trivial] (self: closure1) (args: ()) (result: bool) =
    result = UInt32.gt self.c0 (7: UInt32.t)
  
  meta "rewrite_def" predicate postcondition_once'0
  
  predicate resolve'4 [@inline:trivial] (_1: closure1) = true
  
  meta "rewrite_def" predicate resolve'4
  
  predicate hist_inv'0 [@inline:trivial] (self: closure1) (result_state: closure1) = self = result_state
  
  meta "rewrite_def" predicate hist_inv'0
  
  predicate postcondition_mut'0 [@inline:trivial] (self: closure1) (args: ()) (result_state: closure1) (result: bool) =
    result = UInt32.gt result_state.c0 (7: UInt32.t) /\ hist_inv'0 self result_state
  
  meta "rewrite_def" predicate postcondition_mut'0
  
  function fn_mut_once'0 (self: closure1) (args: ()) (res: bool) : ()
  
  axiom fn_mut_once_spec'0: forall self: closure1, args: (), res: bool. postcondition_once'0 self args res
      = (exists res_state: closure1. postcondition_mut'0 self args res_state res /\ resolve'4 res_state)
  
  function hist_inv_trans'0 (self: closure1) (b: closure1) (c: closure1) : ()
  
  axiom hist_inv_trans_spec'0: forall self: closure1, b: closure1, c: closure1. hist_inv'0 self b
      -> hist_inv'0 b c -> hist_inv'0 self c
  
  function hist_inv_refl'0 (self: closure1) : ()
  
  axiom hist_inv_refl_spec'0: forall self: closure1. hist_inv'0 self self
  
  function postcondition_mut_hist_inv'0 (self: closure1) (args: ()) (res_state: closure1) (res: bool) : ()
  
  axiom postcondition_mut_hist_inv_spec'0:
    forall self: closure1, args: (), res_state: closure1, res: bool. postcondition_mut'0 self args res_state res
      -> hist_inv'0 self res_state
  
  function fn_hist_inv (self: closure1) (res_state: closure1) : ()
  
  axiom fn_hist_inv_spec: forall self: closure1, res_state: closure1. hist_inv'0 self res_state = (self = res_state)
  
  predicate postcondition [@inline:trivial] (self: closure1) (args: ()) (result: bool) =
    result = UInt32.gt self.c0 (7: UInt32.t)
  
  meta "rewrite_def" predicate postcondition
  
  function fn_once (self: closure1) (args: ()) (res: bool) : ()
  
  axiom fn_once_spec: forall self: closure1, args: (), res: bool. postcondition_once'0 self args res
      = (postcondition self args res /\ resolve'4 self)
  
  function fn_mut (self: closure1) (args: ()) (res_state: closure1) (res: bool) : ()
  
  axiom fn_mut_spec:
    forall self: closure1, args: (), res_state: closure1, res: bool. postcondition_mut'0 self args res_state res
      = (postcondition self args res /\ self = res_state)
  
  let rec incorrect (cond: closure1) (branch: closure2) (return (x: ())) =
    {[@expl:incorrect requires] precondition cond ()
    /\ (forall b: bool. precondition'0 branch b
      /\ (exists b'0: bool. forall b0: bool. postcondition cond () b0 -> b0 = b'0))}
    any [ return (result: ()) -> {false} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec valid_normal (n: UInt32.t) (return (x: UInt32.t)) = (! bb0
    [ bb0 = s0
      [ s0 = [ &r <- (0: UInt32.t) ] s1
      | s1 = [ &cond <- { c0 = n } ] s2
      | s2 = MutBorrow.borrow_mut <UInt32.t> {r}
          (fun (_ret: MutBorrow.t UInt32.t) -> [ &_7 <- _ret ] [ &r <- _ret.final ] s3)
      | s3 = [ &branch <- { c0'0 = _7 } ] s4
      | s4 = incorrect {cond} {branch} (fun (_ret: ()) -> [ &_8 <- _ret ] s5)
      | s5 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- r ] s1 | s1 = return {_0} ] ]
    [ & _0: UInt32.t = Any.any_l ()
    | & n: UInt32.t = n
    | & r: UInt32.t = Any.any_l ()
    | & cond: closure1 = Any.any_l ()
    | & branch: closure2 = Any.any_l ()
    | & _7: MutBorrow.t UInt32.t = Any.any_l ()
    | & _8: () = Any.any_l () ])
    [ return (result: UInt32.t) -> {[@expl:valid_normal ensures] false} (! return {result}) ]
end
