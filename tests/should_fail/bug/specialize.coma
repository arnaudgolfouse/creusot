module M_specialize__f
  use creusot.prelude.Any
  
  type t_Vec
  
  let rec x (self: t_Vec) (return (x'0: ())) = any [ return (result: ()) -> {true} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (v: t_Vec) (return (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = x {v} (fun (_ret: ()) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:assertion] false} s1 | s1 = bb2 ]
    | bb2 = return {_0} ] [ & _0: () = Any.any_l () | & v: t_Vec = v | & _2: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_specialize__g
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Vec
  
  type t_T
  
  predicate inv (_1: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_T) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_T) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate precondition (self: ()) (args: t_Vec)
  
  axiom precondition_fndef: forall args: t_Vec [precondition () args]. (let self = args in inv'2 self)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_Vec) (result: ())
  
  axiom postcondition_fndef:
    forall args: t_Vec, res: () [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in true)
  
  let rec x (self: t_Vec) (return (x'0: ())) = {[@expl:x requires] precondition () self}
    any [ return (result: ()) -> {postcondition_once () self result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g (v: t_Vec) (return (x'0: ())) = {[@expl:g 'v' type invariant] inv'2 v}
    (! bb0
    [ bb0 = s0 [ s0 = x {v} (fun (_ret: ()) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:assertion] false} s1 | s1 = bb2 ]
    | bb2 = return {_0} ] [ & _0: () = Any.any_l () | & v: t_Vec = v | & _2: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_specialize__h
  use creusot.prelude.Any
  
  type t_Vec
  
  let rec x (self: t_Vec) (return (x'0: ())) = any [ return (result: ()) -> {false} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec h (v: t_Vec) (return (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = x {v} (fun (_ret: ()) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:assertion] false} s1 | s1 = bb2 ]
    | bb2 = return {_0} ] [ & _0: () = Any.any_l () | & v: t_Vec = v | & _2: () = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_specialize__qyi7590077194068412461__x__refines (* <std::vec::Vec<U> as T> *)
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  
  type t_Vec
  
  type t_U
  
  predicate inv (_1: t_U)
  
  predicate invariant' (self: t_U) = inv self
  
  predicate inv'0 [@inline:trivial] (_1: t_U) = invariant' _1
  
  meta "rewrite_def" predicate inv'0
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_U) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 [@inline:trivial] (_1: Seq.seq t_U) = invariant''0 _1
  
  meta "rewrite_def" predicate inv'1
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_U
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_1: t_Vec)
  
  axiom inv_axiom [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Vec. inv'2 self -> inv'2 self
end
