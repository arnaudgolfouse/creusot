module M_specialize__f
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  let rec x (self: t_Vec) (return' (x'0: ())) = any [ return''0 (result: ()) -> {true} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec f (v: t_Vec) (return' (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = x {v'0} (fun (_ret: ()) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:assertion] false} s1 | s1 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: () = Any.any_l () | & v'0: t_Vec = v | & _2: () = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_specialize__g
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: t_T) = inv self
  
  predicate inv'0 (_0: t_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_T
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  predicate precondition (self: ()) (args: t_Vec)
  
  axiom precondition_fndef: forall args: t_Vec [precondition () args]. (let self = args in inv'2 self)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_Vec) (result: ())
  
  axiom postcondition_fndef:
    forall args: t_Vec, res: () [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in true)
  
  let rec x (self: t_Vec) (return' (x'0: ())) = {[@expl:x requires] precondition () self}
    any [ return''0 (result: ()) -> {postcondition_once () self result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec g (v: t_Vec) (return' (x'0: ())) = {[@expl:g 'v' type invariant] inv'2 v}
    (! bb0
    [ bb0 = s0 [ s0 = x {v'0} (fun (_ret: ()) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:assertion] false} s1 | s1 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: () = Any.any_l () | & v'0: t_Vec = v | & _2: () = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_specialize__h
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  let rec x (self: t_Vec) (return' (x'0: ())) = any [ return''0 (result: ()) -> {false} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec h (v: t_Vec) (return' (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = x {v'0} (fun (_ret: ()) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = {[@expl:assertion] false} s1 | s1 = bb2 ]
    | bb2 = return''0 {_0} ] [ & _0: () = Any.any_l () | & v'0: t_Vec = v | & _2: () = Any.any_l () ])
    [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_specialize__qyi7590077194068412461__x__refines (* <std::vec::Vec<U> as T> *)
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique = { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit = { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner = { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec = { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec = { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_U
  
  predicate inv (_0: t_U)
  
  predicate invariant' (self: t_U) = inv self
  
  predicate inv'0 (_0: t_U)
  
  axiom inv_axiom [@rewrite]: forall x: t_U [inv'0 x]. inv'0 x = invariant' x
  
  predicate invariant''0 [@inline:trivial] (self: Seq.seq t_U) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv'0 (Seq.get self i)
  
  meta "rewrite_def" predicate invariant''0
  
  predicate inv'1 (_0: Seq.seq t_U)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq t_U [inv'1 x]. inv'1 x = invariant''0 x
  
  constant const_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq t_U
  
  axiom view_spec: forall self: t_Vec. Seq.length (view self) <= UInt64.t'int const_MAX
  
  predicate invariant''1 (self: t_Vec) = inv'1 (view self)
  
  predicate inv'2 (_0: t_Vec)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_Vec [inv'2 x]. inv'2 x = invariant''1 x
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: t_Vec. inv'2 self -> inv'2 self
end
