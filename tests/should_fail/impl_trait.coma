module M_impl_trait__qyi16477135280894462799__a [#"impl_trait.rs" 11 4 11 23] (* <() as MyTrait> *)
  let%span simpl_trait = "impl_trait.rs" 12 8 12 12
  let%span simpl_trait'0 = "impl_trait.rs" 10 14 10 20
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec a [#"impl_trait.rs" 11 4 11 23] (self: ()) (return' (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- [%#simpl_trait] true ] s1 | s1 = return''0 {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return''0 (result: bool) -> {[@expl:a ensures] [%#simpl_trait'0] result} (! return' {result}) ]
end
module M_impl_trait__returns_iterator [#"impl_trait.rs" 16 0 16 41]
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec returns_iterator [#"impl_trait.rs" 16 0 16 41] (return' (x: ())) = (! bb0
    [ bb0 = return''0 {_0} ] [ & _0: () = Any.any_l () ]) [ return''0 (result: ()) -> (! return' {result}) ]
end
module M_impl_trait__main [#"impl_trait.rs" 21 0 21 13]
  let%span simpl_trait = "impl_trait.rs" 24 18 24 19
  let%span simpl_trait'0 = "impl_trait.rs" 20 10 20 14
  let%span simpl_trait'1 = "impl_trait.rs" 16 29 16 41
  let%span simpl_trait'2 = "impl_trait.rs" 1 0 6 4
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type opaque0
  
  predicate inv (_0: opaque0)
  
  let rec returns_iterator (return' (x: opaque0)) = any
    [ return''0 (result: opaque0) -> {[%#simpl_trait'1] inv result} (! return' {result}) ]
  
  predicate invariant' [@inline:trivial] (self: opaque0) = [%#sinvariant] inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_0: opaque0)
  
  axiom inv_axiom [@rewrite]: forall x: opaque0 [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: opaque0)
  
  axiom precondition_fndef:
    [%#simpl_trait'2] forall args: opaque0 [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: opaque0) (result: bool)
  
  axiom postcondition_fndef:
    [%#simpl_trait'2] forall args: opaque0, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in true)
  
  let rec a (self: opaque0) (return' (x: bool)) = {[@expl:a requires] precondition () self}
    any [ return''0 (result: bool) -> {postcondition_once () self result} (! return' {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec main [#"impl_trait.rs" 21 0 21 13] (return' (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = returns_iterator (fun (_ret: opaque0) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = a {_4} (fun (_ret: bool) -> [ &x <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#simpl_trait] x} s1 | s1 = return''0 {_0} ] ]
    [ & _0: () = Any.any_l () | & x: bool = Any.any_l () | & _4: opaque0 = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:main ensures] [%#simpl_trait'0] true} (! return' {result}) ]
end
