module M_impl_trait__qyi16477135280894462799__a (* <() as MyTrait> *)
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec a (self: ()) (return (x: bool)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- true ] s1 | s1 = return {_0} ] ] [ & _0: bool = Any.any_l () ])
    [ return (result: bool) -> {[@expl:a ensures] result} (! return {result}) ]
end
module M_impl_trait__returns_iterator
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec returns_iterator (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_impl_trait__main
  use creusot.prelude.Any
  
  type opaque0
  
  predicate inv (_1: opaque0)
  
  let rec returns_iterator (return (x: opaque0)) = any [ return' (result: opaque0) -> {inv result} (! return {result}) ]
  
  predicate invariant' [@inline:trivial] (self: opaque0) = inv self
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'0 (_1: opaque0)
  
  axiom inv_axiom [@rewrite]: forall x: opaque0 [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: opaque0)
  
  axiom precondition_fndef: forall args: opaque0 [precondition () args]. (let self = args in inv'0 self)
      -> precondition () args
  
  predicate postcondition_once (self: ()) (args: opaque0) (result: bool)
  
  axiom postcondition_fndef:
    forall args: opaque0, res: bool [postcondition_once () args res]. postcondition_once () args res
      -> (let self = args in true)
  
  let rec a (self: opaque0) (return (x: bool)) = {[@expl:a requires] precondition () self}
    any [ return' (result: bool) -> {postcondition_once () self result} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec main (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = returns_iterator (fun (_ret: opaque0) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = a {_4} (fun (_ret: bool) -> [ &x <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = {[@expl:assertion] x} s1 | s1 = return {_0} ] ]
    [ & _0: () = Any.any_l () | & x: bool = Any.any_l () | & _4: opaque0 = Any.any_l () ])
    [ return (result: ()) -> {[@expl:main ensures] true} (! return {result}) ]
end
