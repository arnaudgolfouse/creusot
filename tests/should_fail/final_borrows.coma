module M_final_borrows__not_final_borrow [#"final_borrows.rs" 6 0 6 45]
  let%span sfinal_borrows = "final_borrows.rs" 9 18 9 27
  let%span sfinal_borrows'0 = "final_borrows.rs" 6 33 6 36
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec not_final_borrow[#"final_borrows.rs" 6 0 6 45] (bor:MutBorrow.t t_T) (return'  (x:()))= {[@expl:not_final_borrow 'bor' type invariant] [%#sfinal_borrows'0] inv'0 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv bor'0.current}
        MutBorrow.borrow_mut <t_T> {bor'0.current}
          (fun (_ret:MutBorrow.t t_T) ->
             [ &b1 <- _ret ] 
            -{inv _ret.final}-
             [ &bor'0 <- { bor'0 with current = _ret.final } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'0 b1} s2
      | s2 = -{resolve'0 b1}- s3
      | s3 = {inv bor'0.current}
        MutBorrow.borrow_final <t_T> {bor'0.current} {MutBorrow.get_id bor'0}
          (fun (_ret:MutBorrow.t t_T) ->
             [ &_b2 <- _ret ] 
            -{inv _ret.final}-
             [ &bor'0 <- { bor'0 with current = _ret.final } ] 
            s4)
      | s4 = {[@expl:type invariant] inv'0 _b2} s5
      | s5 = -{resolve'0 _b2}- s6
      | s6 = {[@expl:type invariant] inv'0 bor'0} s7
      | s7 = -{resolve'0 bor'0}- s8
      | s8 = {[@expl:assertion] [%#sfinal_borrows] b1 = bor'0} s9
      | s9 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & bor'0: MutBorrow.t t_T = bor
    | & b1: MutBorrow.t t_T = Any.any_l ()
    | & _b2: MutBorrow.t t_T = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_final_borrows__store_changes_prophecy [#"final_borrows.rs" 12 0 12 51]
  let%span sfinal_borrows = "final_borrows.rs" 17 18 17 27
  let%span sfinal_borrows'0 = "final_borrows.rs" 12 39 12 42
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec store_changes_prophecy[#"final_borrows.rs" 12 0 12 51] (bor:MutBorrow.t t_T) (return'  (x:()))= {[@expl:store_changes_prophecy 'bor' type invariant] [%#sfinal_borrows'0] inv'0 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv bor'0.current}
        MutBorrow.borrow_mut <t_T> {bor'0.current}
          (fun (_ret:MutBorrow.t t_T) ->
             [ &b1 <- _ret ] 
            -{inv _ret.final}-
             [ &bor'0 <- { bor'0 with current = _ret.final } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'0 b1} s2
      | s2 = -{resolve'0 b1}- s3
      | s3 =  [ &val' <- b1.current ] s4
      | s4 =  [ &bor'0 <- { bor'0 with current = val' } ] s5
      | s5 = {[@expl:type invariant] inv'0 bor'0} s6
      | s6 = -{resolve'0 bor'0}- s7
      | s7 = {[@expl:assertion] [%#sfinal_borrows] b1 = bor'0} s8
      | s8 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & bor'0: MutBorrow.t t_T = bor
    | & b1: MutBorrow.t t_T = Any.any_l ()
    | & val': t_T = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_final_borrows__store_changes_prophecy_2 [#"final_borrows.rs" 20 0 20 59]
  let%span sfinal_borrows = "final_borrows.rs" 25 18 25 27
  let%span sfinal_borrows'0 = "final_borrows.rs" 20 41 20 44
  let%span sfinal_borrows'1 = "final_borrows.rs" 20 54 20 55
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec store_changes_prophecy_2[#"final_borrows.rs" 20 0 20 59] (bor:MutBorrow.t t_T) (x:t_T) (return'  (x'0:()))= {[@expl:store_changes_prophecy_2 'bor' type invariant] [%#sfinal_borrows'0] inv'0 bor}
    {[@expl:store_changes_prophecy_2 'x' type invariant] [%#sfinal_borrows'1] inv x}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv bor'0.current}
        MutBorrow.borrow_mut <t_T> {bor'0.current}
          (fun (_ret:MutBorrow.t t_T) ->
             [ &b1 <- _ret ] 
            -{inv _ret.final}-
             [ &bor'0 <- { bor'0 with current = _ret.final } ] 
            s1)
      | s1 =  [ &b1 <- { b1 with current = x'0 } ] s2
      | s2 = {[@expl:type invariant] inv'0 b1} s3
      | s3 = -{resolve'0 b1}- s4
      | s4 =  [ &bor'0 <- { bor'0 with current = x'0 } ] s5
      | s5 = {[@expl:type invariant] inv'0 bor'0} s6
      | s6 = -{resolve'0 bor'0}- s7
      | s7 = {[@expl:assertion] [%#sfinal_borrows] b1 = bor'0} s8
      | s8 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l () | & bor'0: MutBorrow.t t_T = bor | & x'0: t_T = x | & b1: MutBorrow.t t_T = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_final_borrows__call_changes_prophecy [#"final_borrows.rs" 28 0 28 43]
  let%span sfinal_borrows = "final_borrows.rs" 34 19 34 33
  let%span sfinal_borrows'0 = "final_borrows.rs" 36 18 36 31
  let%span sfinal_borrows'1 = "final_borrows.rs" 40 18 40 39
  let%span sfinal_borrows'2 = "final_borrows.rs" 30 14 30 26
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec inner (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#sfinal_borrows'2] Int32.to_int result = 2} (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec call_changes_prophecy[#"final_borrows.rs" 28 0 28 43] (bor:MutBorrow.t Int32.t) (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &bor_snap <- [%#sfinal_borrows] bor'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {bor'0.current}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &b1 <- _ret ]  [ &bor'0 <- { bor'0 with current = _ret.final } ] s1)
      | s1 =  [ &b1_snap <- [%#sfinal_borrows'0] b1 ] s2
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 = inner (fun (_ret:Int32.t) ->  [ &_7 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &b1 <- { b1 with current = _7 } ] s1
      | s1 = -{resolve'0 b1}- s2
      | s2 = inner (fun (_ret:Int32.t) ->  [ &_8 <- _ret ] s3)
      | s3 = bb4 ]
    
    | bb4 = s0
      [ s0 =  [ &bor'0 <- { bor'0 with current = _8 } ] s1
      | s1 = -{resolve'0 bor'0}- s2
      | s2 = {[@expl:assertion] [%#sfinal_borrows'1] b1_snap = bor_snap} s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & bor'0: MutBorrow.t Int32.t = bor
    | & bor_snap: MutBorrow.t Int32.t = Any.any_l ()
    | & b1: MutBorrow.t Int32.t = Any.any_l ()
    | & b1_snap: MutBorrow.t Int32.t = Any.any_l ()
    | & _7: Int32.t = Any.any_l ()
    | & _8: Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_final_borrows__unnesting_fails [#"final_borrows.rs" 43 0 43 24]
  let%span sfinal_borrows = "final_borrows.rs" 44 16 44 17
  let%span sfinal_borrows'0 = "final_borrows.rs" 50 18 50 34
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  predicate resolve'1 (self: MutBorrow.t (MutBorrow.t Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t (MutBorrow.t Int32.t)) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec unnesting_fails[#"final_borrows.rs" 43 0 43 24] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sfinal_borrows] (0: Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret:MutBorrow.t Int32.t) ->  [ &bor <- _ret ]  [ &x <- _ret.final ] s2)
      | s2 = MutBorrow.borrow_mut <MutBorrow.t Int32.t> {bor}
          (fun (_ret:MutBorrow.t (MutBorrow.t Int32.t)) ->  [ &nested <- _ret ]  [ &bor <- _ret.final ] s3)
      | s3 = MutBorrow.borrow_mut <Int32.t> {(nested.current).current}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &rebor1 <- _ret ] 
             [ &nested <- { nested with current = { nested.current with current = _ret.final } } ] 
            s4)
      | s4 = -{resolve'0 rebor1}- s5
      | s5 = MutBorrow.borrow_mut <Int32.t> {(nested.current).current}
          (fun (_ret:MutBorrow.t Int32.t) ->
             [ &rebor2 <- _ret ] 
             [ &nested <- { nested with current = { nested.current with current = _ret.final } } ] 
            s6)
      | s6 = -{resolve'0 rebor2}- s7
      | s7 = -{resolve'2 nested}- s8
      | s8 = -{resolve'0 bor}- s9
      | s9 = {[@expl:assertion] [%#sfinal_borrows'0] rebor1 = rebor2} s10
      | s10 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & x: Int32.t = Any.any_l ()
    | & bor: MutBorrow.t Int32.t = Any.any_l ()
    | & nested: MutBorrow.t (MutBorrow.t Int32.t) = Any.any_l ()
    | & rebor1: MutBorrow.t Int32.t = Any.any_l ()
    | & rebor2: MutBorrow.t Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_final_borrows__move_place_without_deref [#"final_borrows.rs" 54 0 54 52]
  let%span sfinal_borrows = "final_borrows.rs" 58 19 58 34
  let%span sfinal_borrows'0 = "final_borrows.rs" 61 18 61 56
  let%span sfinal_borrows'1 = "final_borrows.rs" 62 18 62 33
  let%span sfinal_borrows'2 = "final_borrows.rs" 54 35 54 38
  let%span sfinal_borrows'3 = "final_borrows.rs" 57 16 57 17
  let%span sfinal_borrows'4 = "final_borrows.rs" 56 14 56 24
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 101 20 101 44
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate invariant' (self: MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom [@rewrite]: forall x: MutBorrow.t t_T [inv'0 x]. inv'0 x = invariant' x
  
  predicate resolve (self: MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_T) =
    resolve _0
  
  predicate invariant''0 (self: MutBorrow.t t_T) =
    [%#sboxed] inv'0 self
  
  predicate inv'1 (_0: MutBorrow.t t_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: MutBorrow.t t_T [inv'1 x]. inv'1 x = invariant''0 x
  
  let rec inner (x:MutBorrow.t t_T) (return'  (x'0:()))= {[@expl:inner 'x' type invariant] [%#sfinal_borrows'3] inv'1 x}
    any [ return''0 (result:())-> {[%#sfinal_borrows'4] x.current = x.final} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec move_place_without_deref[#"final_borrows.rs" 54 0 54 52] (bor:MutBorrow.t t_T) (return'  (x:()))= {[@expl:move_place_without_deref 'bor' type invariant] [%#sfinal_borrows'2] inv'1 bor}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &bor_snap <- [%#sfinal_borrows] bor'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {inv bor'0.current}
        MutBorrow.borrow_mut <t_T> {bor'0.current}
          (fun (_ret:MutBorrow.t t_T) ->
             [ &b1 <- _ret ] 
            -{inv _ret.final}-
             [ &bor'0 <- { bor'0 with current = _ret.final } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'0 b1} s2
      | s2 = -{resolve'0 b1}- s3
      | s3 = inner {bor'0} (fun (_ret:()) ->  [ &_5 <- _ret ] s4)
      | s4 = bb2 ]
    
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#sfinal_borrows'0] b1.current = bor_snap.current /\ b1.final = bor_snap.final} s1
      | s1 = {[@expl:assertion] [%#sfinal_borrows'1] b1 = bor_snap} s2
      | s2 = bb3 ]
    
    | bb3 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & bor'0: MutBorrow.t t_T = bor
    | & bor_snap: MutBorrow.t t_T = Any.any_l ()
    | & b1: MutBorrow.t t_T = Any.any_l ()
    | & _5: () = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
