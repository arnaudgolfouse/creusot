module M_17_impl_refinement__qyi370234707595078754__my_function (* <() as Tr> *)
  use creusot.int.UInt64
  use creusot.prelude.Any
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec my_function (self: ()) (return' (x: UInt64.t)) = {[@expl:my_function requires] true}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- (20: UInt64.t) ] s1 | s1 = return''0 {_0} ] ] [ & _0: UInt64.t = Any.any_l () ])
    [ return''0 (result: UInt64.t) -> {[@expl:my_function ensures] UInt64.t'int result >= 15} (! return' {result}) ]
end
module M_17_impl_refinement__qyi783700436729103035__need_false (* <() as ReqFalse> *)
  use creusot.int.UInt64
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  constant y : UInt64.t
  
  function need_false (y'0: UInt64.t) : ()
  
  goal vc_need_false: true
end
module M_17_impl_refinement__qyi370234707595078754__my_function__refines (* <() as Tr> *)
  use creusot.int.UInt64
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall self: (). forall result: UInt64.t. UInt64.t'int result >= 15 -> UInt64.t'int result >= 10
end
module M_17_impl_refinement__qyi783700436729103035__need_false__refines (* <() as ReqFalse> *)
  use creusot.int.UInt64
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  goal refines: forall x: UInt64.t. UInt64.t'int x >= 10 -> UInt64.t'int x >= 15
end
