module M_hash_map__qyi5744717520881225036__new [#"hash_map.rs" 18 4 18 24] (* Foo *)
  let%span shash_map = "hash_map.rs" 19 13 19 27
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_RandomState = { t_RandomState__k0: UInt64.t; t_RandomState__k1: UInt64.t }
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_RawTableInner = {
    t_RawTableInner__bucket_mask: UInt64.t;
    t_RawTableInner__ctrl: t_NonNull;
    t_RawTableInner__growth_left: UInt64.t;
    t_RawTableInner__items: UInt64.t }
  
  type t_RawTable = { t_RawTable__table: t_RawTableInner; t_RawTable__alloc: (); t_RawTable__marker: () }
  
  type t_HashMap = { t_HashMap__hash_builder: t_RandomState; t_HashMap__table: t_RawTable }
  
  type t_HashMap'0 = { t_HashMap__base: t_HashMap }
  
  type t_Foo = { t_Foo__0: t_HashMap'0 }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new [#"hash_map.rs" 18 4 18 24] (return' (x: t_Foo)) = (! bb0
    [ bb0 = {[%#shash_map] false} any ] [ & _0: t_Foo = Any.any_l () | & _1: t_HashMap'0 = Any.any_l () ])
    [ return''0 (result: t_Foo) -> (! return' {result}) ]
end
module M_hash_map__qyi5744717520881225036__add [#"hash_map.rs" 23 4 23 44] (* Foo *)
  let%span shash_map = "hash_map.rs" 24 9 24 26
  let%span shash_map'0 = "hash_map.rs" 22 14 22 45
  let%span shash_map'1 = "hash_map.rs" 11 4 11 25
  let%span sfmap = "../../../creusot-contracts/src/logic/fmap.rs" 92 4 92 26
  
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use creusot.int.UInt8
  use map.Map
  
  type t_RandomState = { t_RandomState__k0: UInt64.t; t_RandomState__k1: UInt64.t }
  
  type t_NonNull = { t_NonNull__pointer: Opaque.ptr }
  
  type t_RawTableInner = {
    t_RawTableInner__bucket_mask: UInt64.t;
    t_RawTableInner__ctrl: t_NonNull;
    t_RawTableInner__growth_left: UInt64.t;
    t_RawTableInner__items: UInt64.t }
  
  type t_RawTable = { t_RawTable__table: t_RawTableInner; t_RawTable__alloc: (); t_RawTable__marker: () }
  
  type t_HashMap = { t_HashMap__hash_builder: t_RandomState; t_HashMap__table: t_RawTable }
  
  type t_HashMap'0 = { t_HashMap__base: t_HashMap }
  
  type t_Foo = { t_Foo__0: t_HashMap'0 }
  
  type t_FMap
  
  type t_Option = C_None | C_Some UInt8.t
  
  function view (self: t_FMap) : Map.map int t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: int) : t_Option = [%#sfmap] Map.get (view self) k
  
  meta "rewrite_def" function get
  
  function view'0 (self: t_HashMap'0) : t_FMap
  
  function view'1 [#"hash_map.rs" 12 4 12 33] (self: t_Foo) : t_FMap = [%#shash_map'1] view'0 self.t_Foo__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add [#"hash_map.rs" 23 4 23 44] (self: MutBorrow.t t_Foo) (num: UInt64.t) (bar: UInt8.t) (return' (x: ())) =
    (! bb0
    [ bb0 = {[%#shash_map] false} any ]
    [ & _0: () = Any.any_l ()
    | & self'0: MutBorrow.t t_Foo = self
    | & num'0: UInt64.t = num
    | & bar'0: UInt8.t = bar
    | & _6: MutBorrow.t UInt8.t = Any.any_l () ])
    [ return''0 (result: ()) -> {[@expl:add ensures] [%#shash_map'0] get (view'1 self.final) (UInt64.t'int num)
      = C_Some bar}
      (! return' {result}) ]
end
