module M_hash_map__qyi5744717520881225036__new (* Foo *)
  use creusot.prelude.Any
  
  type t_HashMap
  
  type t_Foo = { t_Foo__0: t_HashMap }
  
  predicate inv (_1: t_HashMap)
  
  predicate inv'0 (_1: t_Foo)
  
  axiom inv_axiom [@rewrite]: forall x: t_Foo [inv'0 x]. inv'0 x = inv x.t_Foo__0
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new (return (x: t_Foo)) = (! bb0
    [ bb0 = {false} any ] [ & _0: t_Foo = Any.any_l () | & _1: t_HashMap = Any.any_l () ])
    [ return (result: t_Foo) -> {[@expl:new result type invariant] inv'0 result} (! return {result}) ]
end
module M_hash_map__qyi5744717520881225036__add (* Foo *)
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use creusot.int.UInt8
  use map.Map
  
  type t_HashMap
  
  type t_Foo = { t_Foo__0: t_HashMap }
  
  predicate inv (_1: t_HashMap)
  
  predicate inv'0 (_1: t_Foo)
  
  axiom inv_axiom [@rewrite]: forall x: t_Foo [inv'0 x]. inv'0 x = inv x.t_Foo__0
  
  predicate invariant' [@inline:trivial] (self: MutBorrow.t t_Foo) = inv'0 self.current /\ inv'0 self.final
  
  meta "rewrite_def" predicate invariant'
  
  predicate inv'1 [@inline:trivial] (_1: MutBorrow.t t_Foo) = invariant' _1
  
  meta "rewrite_def" predicate inv'1
  
  type t_FMap
  
  type t_Option = C_None | C_Some UInt8.t
  
  function view (self: t_FMap) : Map.map int t_Option
  
  function get [@inline:trivial] (self: t_FMap) (k: int) : t_Option = Map.get (view self) k
  
  meta "rewrite_def" function get
  
  function view'0 (self: t_HashMap) : t_FMap
  
  function view'1 [@inline:trivial] (self: t_Foo) : t_FMap = view'0 self.t_Foo__0
  
  meta "rewrite_def" function view'1
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec add (self: MutBorrow.t t_Foo) (num: UInt64.t) (bar: UInt8.t) (return (x: ())) =
    {[@expl:add 'self' type invariant] inv'1 self}
    (! bb0
    [ bb0 = {false} any ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_Foo = self
    | & num: UInt64.t = num
    | & bar: UInt8.t = bar
    | & _6: MutBorrow.t UInt8.t = Any.any_l () ])
    [ return (result: ()) -> {[@expl:add ensures] get (view'1 self.final) (UInt64.t'int num) = C_Some bar}
      (! return {result}) ]
end
