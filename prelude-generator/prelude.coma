module Any
  function any_l (a :'a) : 'b
end

module MutBorrow
  type t 'a = { current : 'a; final : 'a; id : int }

  let borrow_final < 'a > (a : 'a) (id : int) (ret (result : t 'a)) =
    any [ k (fin : 'a) -> (! ret { { current = a; final = fin; id = id } })]

  let borrow_mut < 'a > (a : 'a) (ret (result : t 'a)) =
    any [ k (fin : 'a) (id: int) -> (! ret { { current = a; final = fin; id = id } })]

  function borrow_logic (cur fin : 'a) (id : int) : t 'a = { current = cur; final = fin; id = id }

  function get_id (x : t 'a) : int = x.id
  function inherit_id (old_id inherit_path: int) : int
end

module Bool
  use bool.Bool

  function to_int [@inline:trivial] (b : bool) : int = if b then 1 else 0

  function bw_and [@inline:trivial] (a:bool) (b:bool) : bool = a /\ b
  function bw_or [@inline:trivial] (a:bool) (b:bool) : bool = a \/ b
  function bw_xor [@inline:trivial] (a:bool) (b:bool) : bool = not a = b

  predicate le [@inline:trivial] (a:bool) (b:bool) = (not a) \/ b
  predicate lt [@inline:trivial] (a:bool) (b:bool) = (not a) /\ b
  predicate ge [@inline:trivial] (a:bool) (b:bool) = a \/ not b
  predicate gt [@inline:trivial] (a:bool) (b:bool) = a /\ not b
end

module Char
  (* utf8 characters (not glyphs)
      highly restricted until Why3 supports Unicode strings
  *)
  use int.Int
  use bv.BV256 as BV256

  type t

  function to_int (x : t) : int
  axiom to_int: forall c. 0 <= to_int c < 0x10FFFF /\ not(0xD800 <= to_int c < 0xE000)
  axiom extensionality:
    forall x y: t [to_int x, to_int y]. to_int x = to_int y -> x = y

  function of_int (n: int) : t
  axiom to_of_int: forall n [of_int n]. 0 <= n < 0x10FFFF /\ not(0xD800 <= n < 0xE000) -> to_int (of_int n) = n

  predicate le [@inline:trivial] (a:t) (b:t) = to_int a <= to_int b
  predicate lt [@inline:trivial] (a:t) (b:t) = to_int a < to_int b
  predicate ge [@inline:trivial] (a:t) (b:t) = to_int a >= to_int b
  predicate gt [@inline:trivial] (a:t) (b:t) = to_int a > to_int b

  let of_int (n : int) { 0 <= n < 0x10FFFF } { not(0xD800 <= n < 0xE000) }
    (ret (result : t) { to_int result = n }) = any

  let of_BV256 (n: BV256.t)
    { [@expl:arithmetic overflow] BV256.t'int n >= 0 /\ BV256.t'int n < 0x10FFFF }
    { not(0xD800 <= BV256.t'int n < 0xE000) }
    (ret (result: t)  { to_int result = BV256.t'int n}) = any
end

module Opaque
  type ptr
  let fresh_ptr (ret (result : ptr) {true}) = any

  type dyn
  type foreign
end
